
STM32F407-MODBUS-OVER-ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000129a4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e68  08012b34  08012b34  00013b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801599c  0801599c  00017108  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801599c  0801599c  0001699c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080159a4  080159a4  00017108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080159a4  080159a4  000169a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080159a8  080159a8  000169a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000108  20000000  080159ac  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00017108  2**0
                  CONTENTS
 10 .bss          000085dc  20000108  20000108  00017108  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200086e4  200086e4  00017108  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00017108  2**0
                  CONTENTS, READONLY
 13 .debug_info   000258b0  00000000  00000000  00017138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000672a  00000000  00000000  0003c9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d58  00000000  00000000  00043118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000174b  00000000  00000000  00044e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030c35  00000000  00000000  000465bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002f7a8  00000000  00000000  000771f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f24ed  00000000  00000000  000a6998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00198e85  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008288  00000000  00000000  00198ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  001a1150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000108 	.word	0x20000108
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012b1c 	.word	0x08012b1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000010c 	.word	0x2000010c
 80001cc:	08012b1c 	.word	0x08012b1c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_uldivmod>:
 80005e8:	b953      	cbnz	r3, 8000600 <__aeabi_uldivmod+0x18>
 80005ea:	b94a      	cbnz	r2, 8000600 <__aeabi_uldivmod+0x18>
 80005ec:	2900      	cmp	r1, #0
 80005ee:	bf08      	it	eq
 80005f0:	2800      	cmpeq	r0, #0
 80005f2:	bf1c      	itt	ne
 80005f4:	f04f 31ff 	movne.w	r1, #4294967295
 80005f8:	f04f 30ff 	movne.w	r0, #4294967295
 80005fc:	f000 b988 	b.w	8000910 <__aeabi_idiv0>
 8000600:	f1ad 0c08 	sub.w	ip, sp, #8
 8000604:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000608:	f000 f806 	bl	8000618 <__udivmoddi4>
 800060c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000614:	b004      	add	sp, #16
 8000616:	4770      	bx	lr

08000618 <__udivmoddi4>:
 8000618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800061c:	9d08      	ldr	r5, [sp, #32]
 800061e:	468e      	mov	lr, r1
 8000620:	4604      	mov	r4, r0
 8000622:	4688      	mov	r8, r1
 8000624:	2b00      	cmp	r3, #0
 8000626:	d14a      	bne.n	80006be <__udivmoddi4+0xa6>
 8000628:	428a      	cmp	r2, r1
 800062a:	4617      	mov	r7, r2
 800062c:	d962      	bls.n	80006f4 <__udivmoddi4+0xdc>
 800062e:	fab2 f682 	clz	r6, r2
 8000632:	b14e      	cbz	r6, 8000648 <__udivmoddi4+0x30>
 8000634:	f1c6 0320 	rsb	r3, r6, #32
 8000638:	fa01 f806 	lsl.w	r8, r1, r6
 800063c:	fa20 f303 	lsr.w	r3, r0, r3
 8000640:	40b7      	lsls	r7, r6
 8000642:	ea43 0808 	orr.w	r8, r3, r8
 8000646:	40b4      	lsls	r4, r6
 8000648:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800064c:	fa1f fc87 	uxth.w	ip, r7
 8000650:	fbb8 f1fe 	udiv	r1, r8, lr
 8000654:	0c23      	lsrs	r3, r4, #16
 8000656:	fb0e 8811 	mls	r8, lr, r1, r8
 800065a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800065e:	fb01 f20c 	mul.w	r2, r1, ip
 8000662:	429a      	cmp	r2, r3
 8000664:	d909      	bls.n	800067a <__udivmoddi4+0x62>
 8000666:	18fb      	adds	r3, r7, r3
 8000668:	f101 30ff 	add.w	r0, r1, #4294967295
 800066c:	f080 80ea 	bcs.w	8000844 <__udivmoddi4+0x22c>
 8000670:	429a      	cmp	r2, r3
 8000672:	f240 80e7 	bls.w	8000844 <__udivmoddi4+0x22c>
 8000676:	3902      	subs	r1, #2
 8000678:	443b      	add	r3, r7
 800067a:	1a9a      	subs	r2, r3, r2
 800067c:	b2a3      	uxth	r3, r4
 800067e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000682:	fb0e 2210 	mls	r2, lr, r0, r2
 8000686:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800068a:	fb00 fc0c 	mul.w	ip, r0, ip
 800068e:	459c      	cmp	ip, r3
 8000690:	d909      	bls.n	80006a6 <__udivmoddi4+0x8e>
 8000692:	18fb      	adds	r3, r7, r3
 8000694:	f100 32ff 	add.w	r2, r0, #4294967295
 8000698:	f080 80d6 	bcs.w	8000848 <__udivmoddi4+0x230>
 800069c:	459c      	cmp	ip, r3
 800069e:	f240 80d3 	bls.w	8000848 <__udivmoddi4+0x230>
 80006a2:	443b      	add	r3, r7
 80006a4:	3802      	subs	r0, #2
 80006a6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006aa:	eba3 030c 	sub.w	r3, r3, ip
 80006ae:	2100      	movs	r1, #0
 80006b0:	b11d      	cbz	r5, 80006ba <__udivmoddi4+0xa2>
 80006b2:	40f3      	lsrs	r3, r6
 80006b4:	2200      	movs	r2, #0
 80006b6:	e9c5 3200 	strd	r3, r2, [r5]
 80006ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006be:	428b      	cmp	r3, r1
 80006c0:	d905      	bls.n	80006ce <__udivmoddi4+0xb6>
 80006c2:	b10d      	cbz	r5, 80006c8 <__udivmoddi4+0xb0>
 80006c4:	e9c5 0100 	strd	r0, r1, [r5]
 80006c8:	2100      	movs	r1, #0
 80006ca:	4608      	mov	r0, r1
 80006cc:	e7f5      	b.n	80006ba <__udivmoddi4+0xa2>
 80006ce:	fab3 f183 	clz	r1, r3
 80006d2:	2900      	cmp	r1, #0
 80006d4:	d146      	bne.n	8000764 <__udivmoddi4+0x14c>
 80006d6:	4573      	cmp	r3, lr
 80006d8:	d302      	bcc.n	80006e0 <__udivmoddi4+0xc8>
 80006da:	4282      	cmp	r2, r0
 80006dc:	f200 8105 	bhi.w	80008ea <__udivmoddi4+0x2d2>
 80006e0:	1a84      	subs	r4, r0, r2
 80006e2:	eb6e 0203 	sbc.w	r2, lr, r3
 80006e6:	2001      	movs	r0, #1
 80006e8:	4690      	mov	r8, r2
 80006ea:	2d00      	cmp	r5, #0
 80006ec:	d0e5      	beq.n	80006ba <__udivmoddi4+0xa2>
 80006ee:	e9c5 4800 	strd	r4, r8, [r5]
 80006f2:	e7e2      	b.n	80006ba <__udivmoddi4+0xa2>
 80006f4:	2a00      	cmp	r2, #0
 80006f6:	f000 8090 	beq.w	800081a <__udivmoddi4+0x202>
 80006fa:	fab2 f682 	clz	r6, r2
 80006fe:	2e00      	cmp	r6, #0
 8000700:	f040 80a4 	bne.w	800084c <__udivmoddi4+0x234>
 8000704:	1a8a      	subs	r2, r1, r2
 8000706:	0c03      	lsrs	r3, r0, #16
 8000708:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800070c:	b280      	uxth	r0, r0
 800070e:	b2bc      	uxth	r4, r7
 8000710:	2101      	movs	r1, #1
 8000712:	fbb2 fcfe 	udiv	ip, r2, lr
 8000716:	fb0e 221c 	mls	r2, lr, ip, r2
 800071a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800071e:	fb04 f20c 	mul.w	r2, r4, ip
 8000722:	429a      	cmp	r2, r3
 8000724:	d907      	bls.n	8000736 <__udivmoddi4+0x11e>
 8000726:	18fb      	adds	r3, r7, r3
 8000728:	f10c 38ff 	add.w	r8, ip, #4294967295
 800072c:	d202      	bcs.n	8000734 <__udivmoddi4+0x11c>
 800072e:	429a      	cmp	r2, r3
 8000730:	f200 80e0 	bhi.w	80008f4 <__udivmoddi4+0x2dc>
 8000734:	46c4      	mov	ip, r8
 8000736:	1a9b      	subs	r3, r3, r2
 8000738:	fbb3 f2fe 	udiv	r2, r3, lr
 800073c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000740:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000744:	fb02 f404 	mul.w	r4, r2, r4
 8000748:	429c      	cmp	r4, r3
 800074a:	d907      	bls.n	800075c <__udivmoddi4+0x144>
 800074c:	18fb      	adds	r3, r7, r3
 800074e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000752:	d202      	bcs.n	800075a <__udivmoddi4+0x142>
 8000754:	429c      	cmp	r4, r3
 8000756:	f200 80ca 	bhi.w	80008ee <__udivmoddi4+0x2d6>
 800075a:	4602      	mov	r2, r0
 800075c:	1b1b      	subs	r3, r3, r4
 800075e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000762:	e7a5      	b.n	80006b0 <__udivmoddi4+0x98>
 8000764:	f1c1 0620 	rsb	r6, r1, #32
 8000768:	408b      	lsls	r3, r1
 800076a:	fa22 f706 	lsr.w	r7, r2, r6
 800076e:	431f      	orrs	r7, r3
 8000770:	fa0e f401 	lsl.w	r4, lr, r1
 8000774:	fa20 f306 	lsr.w	r3, r0, r6
 8000778:	fa2e fe06 	lsr.w	lr, lr, r6
 800077c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000780:	4323      	orrs	r3, r4
 8000782:	fa00 f801 	lsl.w	r8, r0, r1
 8000786:	fa1f fc87 	uxth.w	ip, r7
 800078a:	fbbe f0f9 	udiv	r0, lr, r9
 800078e:	0c1c      	lsrs	r4, r3, #16
 8000790:	fb09 ee10 	mls	lr, r9, r0, lr
 8000794:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000798:	fb00 fe0c 	mul.w	lr, r0, ip
 800079c:	45a6      	cmp	lr, r4
 800079e:	fa02 f201 	lsl.w	r2, r2, r1
 80007a2:	d909      	bls.n	80007b8 <__udivmoddi4+0x1a0>
 80007a4:	193c      	adds	r4, r7, r4
 80007a6:	f100 3aff 	add.w	sl, r0, #4294967295
 80007aa:	f080 809c 	bcs.w	80008e6 <__udivmoddi4+0x2ce>
 80007ae:	45a6      	cmp	lr, r4
 80007b0:	f240 8099 	bls.w	80008e6 <__udivmoddi4+0x2ce>
 80007b4:	3802      	subs	r0, #2
 80007b6:	443c      	add	r4, r7
 80007b8:	eba4 040e 	sub.w	r4, r4, lr
 80007bc:	fa1f fe83 	uxth.w	lr, r3
 80007c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80007c4:	fb09 4413 	mls	r4, r9, r3, r4
 80007c8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80007cc:	fb03 fc0c 	mul.w	ip, r3, ip
 80007d0:	45a4      	cmp	ip, r4
 80007d2:	d908      	bls.n	80007e6 <__udivmoddi4+0x1ce>
 80007d4:	193c      	adds	r4, r7, r4
 80007d6:	f103 3eff 	add.w	lr, r3, #4294967295
 80007da:	f080 8082 	bcs.w	80008e2 <__udivmoddi4+0x2ca>
 80007de:	45a4      	cmp	ip, r4
 80007e0:	d97f      	bls.n	80008e2 <__udivmoddi4+0x2ca>
 80007e2:	3b02      	subs	r3, #2
 80007e4:	443c      	add	r4, r7
 80007e6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80007ea:	eba4 040c 	sub.w	r4, r4, ip
 80007ee:	fba0 ec02 	umull	lr, ip, r0, r2
 80007f2:	4564      	cmp	r4, ip
 80007f4:	4673      	mov	r3, lr
 80007f6:	46e1      	mov	r9, ip
 80007f8:	d362      	bcc.n	80008c0 <__udivmoddi4+0x2a8>
 80007fa:	d05f      	beq.n	80008bc <__udivmoddi4+0x2a4>
 80007fc:	b15d      	cbz	r5, 8000816 <__udivmoddi4+0x1fe>
 80007fe:	ebb8 0203 	subs.w	r2, r8, r3
 8000802:	eb64 0409 	sbc.w	r4, r4, r9
 8000806:	fa04 f606 	lsl.w	r6, r4, r6
 800080a:	fa22 f301 	lsr.w	r3, r2, r1
 800080e:	431e      	orrs	r6, r3
 8000810:	40cc      	lsrs	r4, r1
 8000812:	e9c5 6400 	strd	r6, r4, [r5]
 8000816:	2100      	movs	r1, #0
 8000818:	e74f      	b.n	80006ba <__udivmoddi4+0xa2>
 800081a:	fbb1 fcf2 	udiv	ip, r1, r2
 800081e:	0c01      	lsrs	r1, r0, #16
 8000820:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000824:	b280      	uxth	r0, r0
 8000826:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800082a:	463b      	mov	r3, r7
 800082c:	4638      	mov	r0, r7
 800082e:	463c      	mov	r4, r7
 8000830:	46b8      	mov	r8, r7
 8000832:	46be      	mov	lr, r7
 8000834:	2620      	movs	r6, #32
 8000836:	fbb1 f1f7 	udiv	r1, r1, r7
 800083a:	eba2 0208 	sub.w	r2, r2, r8
 800083e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000842:	e766      	b.n	8000712 <__udivmoddi4+0xfa>
 8000844:	4601      	mov	r1, r0
 8000846:	e718      	b.n	800067a <__udivmoddi4+0x62>
 8000848:	4610      	mov	r0, r2
 800084a:	e72c      	b.n	80006a6 <__udivmoddi4+0x8e>
 800084c:	f1c6 0220 	rsb	r2, r6, #32
 8000850:	fa2e f302 	lsr.w	r3, lr, r2
 8000854:	40b7      	lsls	r7, r6
 8000856:	40b1      	lsls	r1, r6
 8000858:	fa20 f202 	lsr.w	r2, r0, r2
 800085c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000860:	430a      	orrs	r2, r1
 8000862:	fbb3 f8fe 	udiv	r8, r3, lr
 8000866:	b2bc      	uxth	r4, r7
 8000868:	fb0e 3318 	mls	r3, lr, r8, r3
 800086c:	0c11      	lsrs	r1, r2, #16
 800086e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000872:	fb08 f904 	mul.w	r9, r8, r4
 8000876:	40b0      	lsls	r0, r6
 8000878:	4589      	cmp	r9, r1
 800087a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800087e:	b280      	uxth	r0, r0
 8000880:	d93e      	bls.n	8000900 <__udivmoddi4+0x2e8>
 8000882:	1879      	adds	r1, r7, r1
 8000884:	f108 3cff 	add.w	ip, r8, #4294967295
 8000888:	d201      	bcs.n	800088e <__udivmoddi4+0x276>
 800088a:	4589      	cmp	r9, r1
 800088c:	d81f      	bhi.n	80008ce <__udivmoddi4+0x2b6>
 800088e:	eba1 0109 	sub.w	r1, r1, r9
 8000892:	fbb1 f9fe 	udiv	r9, r1, lr
 8000896:	fb09 f804 	mul.w	r8, r9, r4
 800089a:	fb0e 1119 	mls	r1, lr, r9, r1
 800089e:	b292      	uxth	r2, r2
 80008a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008a4:	4542      	cmp	r2, r8
 80008a6:	d229      	bcs.n	80008fc <__udivmoddi4+0x2e4>
 80008a8:	18ba      	adds	r2, r7, r2
 80008aa:	f109 31ff 	add.w	r1, r9, #4294967295
 80008ae:	d2c4      	bcs.n	800083a <__udivmoddi4+0x222>
 80008b0:	4542      	cmp	r2, r8
 80008b2:	d2c2      	bcs.n	800083a <__udivmoddi4+0x222>
 80008b4:	f1a9 0102 	sub.w	r1, r9, #2
 80008b8:	443a      	add	r2, r7
 80008ba:	e7be      	b.n	800083a <__udivmoddi4+0x222>
 80008bc:	45f0      	cmp	r8, lr
 80008be:	d29d      	bcs.n	80007fc <__udivmoddi4+0x1e4>
 80008c0:	ebbe 0302 	subs.w	r3, lr, r2
 80008c4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80008c8:	3801      	subs	r0, #1
 80008ca:	46e1      	mov	r9, ip
 80008cc:	e796      	b.n	80007fc <__udivmoddi4+0x1e4>
 80008ce:	eba7 0909 	sub.w	r9, r7, r9
 80008d2:	4449      	add	r1, r9
 80008d4:	f1a8 0c02 	sub.w	ip, r8, #2
 80008d8:	fbb1 f9fe 	udiv	r9, r1, lr
 80008dc:	fb09 f804 	mul.w	r8, r9, r4
 80008e0:	e7db      	b.n	800089a <__udivmoddi4+0x282>
 80008e2:	4673      	mov	r3, lr
 80008e4:	e77f      	b.n	80007e6 <__udivmoddi4+0x1ce>
 80008e6:	4650      	mov	r0, sl
 80008e8:	e766      	b.n	80007b8 <__udivmoddi4+0x1a0>
 80008ea:	4608      	mov	r0, r1
 80008ec:	e6fd      	b.n	80006ea <__udivmoddi4+0xd2>
 80008ee:	443b      	add	r3, r7
 80008f0:	3a02      	subs	r2, #2
 80008f2:	e733      	b.n	800075c <__udivmoddi4+0x144>
 80008f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80008f8:	443b      	add	r3, r7
 80008fa:	e71c      	b.n	8000736 <__udivmoddi4+0x11e>
 80008fc:	4649      	mov	r1, r9
 80008fe:	e79c      	b.n	800083a <__udivmoddi4+0x222>
 8000900:	eba1 0109 	sub.w	r1, r1, r9
 8000904:	46c4      	mov	ip, r8
 8000906:	fbb1 f9fe 	udiv	r9, r1, lr
 800090a:	fb09 f804 	mul.w	r8, r9, r4
 800090e:	e7c4      	b.n	800089a <__udivmoddi4+0x282>

08000910 <__aeabi_idiv0>:
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop

08000914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b088      	sub	sp, #32
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091a:	f000 fded 	bl	80014f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800091e:	f000 f8bd 	bl	8000a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000922:	f000 f9ed 	bl	8000d00 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000926:	f004 fbd5 	bl	80050d4 <MX_LWIP_Init>
  MX_UART4_Init();
 800092a:	f000 f9bf 	bl	8000cac <MX_UART4_Init>
  MX_ADC1_Init();
 800092e:	f000 f91d 	bl	8000b6c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000932:	f000 f96d 	bl	8000c10 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000936:	484d      	ldr	r0, [pc, #308]	@ (8000a6c <main+0x158>)
 8000938:	f003 fcd4 	bl	80042e4 <HAL_TIM_Base_Start>
  HAL_ADC_Start_IT(&hadc1);
 800093c:	484c      	ldr	r0, [pc, #304]	@ (8000a70 <main+0x15c>)
 800093e:	f000 feb5 	bl	80016ac <HAL_ADC_Start_IT>

	eMBErrorCode err;
	err = eMBTCPInit(502);
 8000942:	f44f 70fb 	mov.w	r0, #502	@ 0x1f6
 8000946:	f010 f823 	bl	8010990 <eMBTCPInit>
 800094a:	4603      	mov	r3, r0
 800094c:	77fb      	strb	r3, [r7, #31]
	if (err != MB_ENOERR) {
 800094e:	7ffb      	ldrb	r3, [r7, #31]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d016      	beq.n	8000982 <main+0x6e>
		DEBUG_PRINTF("eMBTCPInit failed: %d\r\n", err);
 8000954:	7ffb      	ldrb	r3, [r7, #31]
 8000956:	4a47      	ldr	r2, [pc, #284]	@ (8000a74 <main+0x160>)
 8000958:	2140      	movs	r1, #64	@ 0x40
 800095a:	4847      	ldr	r0, [pc, #284]	@ (8000a78 <main+0x164>)
 800095c:	f011 f83c 	bl	80119d8 <sniprintf>
 8000960:	6038      	str	r0, [r7, #0]
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	b29a      	uxth	r2, r3
 8000966:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800096a:	4943      	ldr	r1, [pc, #268]	@ (8000a78 <main+0x164>)
 800096c:	4843      	ldr	r0, [pc, #268]	@ (8000a7c <main+0x168>)
 800096e:	f003 fff5 	bl	800495c <HAL_UART_Transmit>
		LED_ON(LED_RED_PIN);
 8000972:	2201      	movs	r2, #1
 8000974:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000978:	4841      	ldr	r0, [pc, #260]	@ (8000a80 <main+0x16c>)
 800097a:	f002 ffcd 	bl	8003918 <HAL_GPIO_WritePin>
		while (1); // hang on error
 800097e:	bf00      	nop
 8000980:	e7fd      	b.n	800097e <main+0x6a>
	} else {
		DEBUG_PRINTF("eMBTCPInit OK.\r\n");
 8000982:	4a40      	ldr	r2, [pc, #256]	@ (8000a84 <main+0x170>)
 8000984:	2140      	movs	r1, #64	@ 0x40
 8000986:	483c      	ldr	r0, [pc, #240]	@ (8000a78 <main+0x164>)
 8000988:	f011 f826 	bl	80119d8 <sniprintf>
 800098c:	61b8      	str	r0, [r7, #24]
 800098e:	69bb      	ldr	r3, [r7, #24]
 8000990:	b29a      	uxth	r2, r3
 8000992:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000996:	4938      	ldr	r1, [pc, #224]	@ (8000a78 <main+0x164>)
 8000998:	4838      	ldr	r0, [pc, #224]	@ (8000a7c <main+0x168>)
 800099a:	f003 ffdf 	bl	800495c <HAL_UART_Transmit>
	}

	err = eMBEnable();
 800099e:	f010 f849 	bl	8010a34 <eMBEnable>
 80009a2:	4603      	mov	r3, r0
 80009a4:	77fb      	strb	r3, [r7, #31]
	if (err != MB_ENOERR) {
 80009a6:	7ffb      	ldrb	r3, [r7, #31]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d016      	beq.n	80009da <main+0xc6>
		DEBUG_PRINTF("eMBEnable failed: %d\r\n", err);
 80009ac:	7ffb      	ldrb	r3, [r7, #31]
 80009ae:	4a36      	ldr	r2, [pc, #216]	@ (8000a88 <main+0x174>)
 80009b0:	2140      	movs	r1, #64	@ 0x40
 80009b2:	4831      	ldr	r0, [pc, #196]	@ (8000a78 <main+0x164>)
 80009b4:	f011 f810 	bl	80119d8 <sniprintf>
 80009b8:	6078      	str	r0, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	b29a      	uxth	r2, r3
 80009be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009c2:	492d      	ldr	r1, [pc, #180]	@ (8000a78 <main+0x164>)
 80009c4:	482d      	ldr	r0, [pc, #180]	@ (8000a7c <main+0x168>)
 80009c6:	f003 ffc9 	bl	800495c <HAL_UART_Transmit>
		LED_ON(LED_RED_PIN);
 80009ca:	2201      	movs	r2, #1
 80009cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009d0:	482b      	ldr	r0, [pc, #172]	@ (8000a80 <main+0x16c>)
 80009d2:	f002 ffa1 	bl	8003918 <HAL_GPIO_WritePin>
		while (1);
 80009d6:	bf00      	nop
 80009d8:	e7fd      	b.n	80009d6 <main+0xc2>
	} else {
		DEBUG_PRINTF("eMBEnable OK.\r\n");
 80009da:	4a2c      	ldr	r2, [pc, #176]	@ (8000a8c <main+0x178>)
 80009dc:	2140      	movs	r1, #64	@ 0x40
 80009de:	4826      	ldr	r0, [pc, #152]	@ (8000a78 <main+0x164>)
 80009e0:	f010 fffa 	bl	80119d8 <sniprintf>
 80009e4:	6178      	str	r0, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	b29a      	uxth	r2, r3
 80009ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ee:	4922      	ldr	r1, [pc, #136]	@ (8000a78 <main+0x164>)
 80009f0:	4822      	ldr	r0, [pc, #136]	@ (8000a7c <main+0x168>)
 80009f2:	f003 ffb3 	bl	800495c <HAL_UART_Transmit>
	}
	Modbus_InitCallbacks();
 80009f6:	f010 f939 	bl	8010c6c <Modbus_InitCallbacks>
	DEBUG_PRINTF("Callbacks registered.\r\n");
 80009fa:	4a25      	ldr	r2, [pc, #148]	@ (8000a90 <main+0x17c>)
 80009fc:	2140      	movs	r1, #64	@ 0x40
 80009fe:	481e      	ldr	r0, [pc, #120]	@ (8000a78 <main+0x164>)
 8000a00:	f010 ffea 	bl	80119d8 <sniprintf>
 8000a04:	6138      	str	r0, [r7, #16]
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a0e:	491a      	ldr	r1, [pc, #104]	@ (8000a78 <main+0x164>)
 8000a10:	481a      	ldr	r0, [pc, #104]	@ (8000a7c <main+0x168>)
 8000a12:	f003 ffa3 	bl	800495c <HAL_UART_Transmit>

	Modbus_SetHolding(0, 65);
 8000a16:	2141      	movs	r1, #65	@ 0x41
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f010 fb11 	bl	8011040 <Modbus_SetHolding>
	DEBUG_PRINTF("Holding[0] = 65 set.\r\n");
 8000a1e:	4a1d      	ldr	r2, [pc, #116]	@ (8000a94 <main+0x180>)
 8000a20:	2140      	movs	r1, #64	@ 0x40
 8000a22:	4815      	ldr	r0, [pc, #84]	@ (8000a78 <main+0x164>)
 8000a24:	f010 ffd8 	bl	80119d8 <sniprintf>
 8000a28:	60f8      	str	r0, [r7, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a32:	4911      	ldr	r1, [pc, #68]	@ (8000a78 <main+0x164>)
 8000a34:	4811      	ldr	r0, [pc, #68]	@ (8000a7c <main+0x168>)
 8000a36:	f003 ff91 	bl	800495c <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		MX_LWIP_Process();
 8000a3a:	f004 fc8b 	bl	8005354 <MX_LWIP_Process>

		err = eMBPoll();
 8000a3e:	f010 f815 	bl	8010a6c <eMBPoll>
 8000a42:	4603      	mov	r3, r0
 8000a44:	77fb      	strb	r3, [r7, #31]
		if (err != MB_ENOERR) {
 8000a46:	7ffb      	ldrb	r3, [r7, #31]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d0f6      	beq.n	8000a3a <main+0x126>
			DEBUG_PRINTF("eMBPoll error: %d\r\n", err);
 8000a4c:	7ffb      	ldrb	r3, [r7, #31]
 8000a4e:	4a12      	ldr	r2, [pc, #72]	@ (8000a98 <main+0x184>)
 8000a50:	2140      	movs	r1, #64	@ 0x40
 8000a52:	4809      	ldr	r0, [pc, #36]	@ (8000a78 <main+0x164>)
 8000a54:	f010 ffc0 	bl	80119d8 <sniprintf>
 8000a58:	60b8      	str	r0, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a62:	4905      	ldr	r1, [pc, #20]	@ (8000a78 <main+0x164>)
 8000a64:	4805      	ldr	r0, [pc, #20]	@ (8000a7c <main+0x168>)
 8000a66:	f003 ff79 	bl	800495c <HAL_UART_Transmit>
		MX_LWIP_Process();
 8000a6a:	e7e6      	b.n	8000a3a <main+0x126>
 8000a6c:	2000016c 	.word	0x2000016c
 8000a70:	20000124 	.word	0x20000124
 8000a74:	08012b34 	.word	0x08012b34
 8000a78:	200001fc 	.word	0x200001fc
 8000a7c:	200001b4 	.word	0x200001b4
 8000a80:	40020c00 	.word	0x40020c00
 8000a84:	08012b4c 	.word	0x08012b4c
 8000a88:	08012b60 	.word	0x08012b60
 8000a8c:	08012b78 	.word	0x08012b78
 8000a90:	08012b88 	.word	0x08012b88
 8000a94:	08012ba0 	.word	0x08012ba0
 8000a98:	08012bb8 	.word	0x08012bb8

08000a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b094      	sub	sp, #80	@ 0x50
 8000aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa2:	f107 0320 	add.w	r3, r7, #32
 8000aa6:	2230      	movs	r2, #48	@ 0x30
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f011 f837 	bl	8011b1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	4b27      	ldr	r3, [pc, #156]	@ (8000b64 <SystemClock_Config+0xc8>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac8:	4a26      	ldr	r2, [pc, #152]	@ (8000b64 <SystemClock_Config+0xc8>)
 8000aca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ace:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad0:	4b24      	ldr	r3, [pc, #144]	@ (8000b64 <SystemClock_Config+0xc8>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000adc:	2300      	movs	r3, #0
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	4b21      	ldr	r3, [pc, #132]	@ (8000b68 <SystemClock_Config+0xcc>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a20      	ldr	r2, [pc, #128]	@ (8000b68 <SystemClock_Config+0xcc>)
 8000ae6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	4b1e      	ldr	r3, [pc, #120]	@ (8000b68 <SystemClock_Config+0xcc>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af8:	2302      	movs	r3, #2
 8000afa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000afc:	2301      	movs	r3, #1
 8000afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b00:	2310      	movs	r3, #16
 8000b02:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b04:	2302      	movs	r3, #2
 8000b06:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b0c:	2308      	movs	r3, #8
 8000b0e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000b10:	2340      	movs	r3, #64	@ 0x40
 8000b12:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b14:	2302      	movs	r3, #2
 8000b16:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b18:	2304      	movs	r3, #4
 8000b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1c:	f107 0320 	add.w	r3, r7, #32
 8000b20:	4618      	mov	r0, r3
 8000b22:	f002 ff37 	bl	8003994 <HAL_RCC_OscConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b2c:	f000 f9d0 	bl	8000ed0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b30:	230f      	movs	r3, #15
 8000b32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b34:	2302      	movs	r3, #2
 8000b36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000b38:	2380      	movs	r3, #128	@ 0x80
 8000b3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	2101      	movs	r1, #1
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f003 f99a 	bl	8003e84 <HAL_RCC_ClockConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000b56:	f000 f9bb 	bl	8000ed0 <Error_Handler>
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	3750      	adds	r7, #80	@ 0x50
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40007000 	.word	0x40007000

08000b6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b72:	463b      	mov	r3, r7
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b7e:	4b22      	ldr	r3, [pc, #136]	@ (8000c08 <MX_ADC1_Init+0x9c>)
 8000b80:	4a22      	ldr	r2, [pc, #136]	@ (8000c0c <MX_ADC1_Init+0xa0>)
 8000b82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b84:	4b20      	ldr	r3, [pc, #128]	@ (8000c08 <MX_ADC1_Init+0x9c>)
 8000b86:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c08 <MX_ADC1_Init+0x9c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b92:	4b1d      	ldr	r3, [pc, #116]	@ (8000c08 <MX_ADC1_Init+0x9c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	@ (8000c08 <MX_ADC1_Init+0x9c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c08 <MX_ADC1_Init+0x9c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	@ (8000c08 <MX_ADC1_Init+0x9c>)
 8000ba8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000bac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000bae:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <MX_ADC1_Init+0x9c>)
 8000bb0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000bb4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <MX_ADC1_Init+0x9c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	@ (8000c08 <MX_ADC1_Init+0x9c>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bc2:	4b11      	ldr	r3, [pc, #68]	@ (8000c08 <MX_ADC1_Init+0x9c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bca:	4b0f      	ldr	r3, [pc, #60]	@ (8000c08 <MX_ADC1_Init+0x9c>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bd0:	480d      	ldr	r0, [pc, #52]	@ (8000c08 <MX_ADC1_Init+0x9c>)
 8000bd2:	f000 fd27 	bl	8001624 <HAL_ADC_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000bdc:	f000 f978 	bl	8000ed0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000be0:	2310      	movs	r3, #16
 8000be2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000be4:	2301      	movs	r3, #1
 8000be6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000be8:	2307      	movs	r3, #7
 8000bea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bec:	463b      	mov	r3, r7
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4805      	ldr	r0, [pc, #20]	@ (8000c08 <MX_ADC1_Init+0x9c>)
 8000bf2:	f000 ff6b 	bl	8001acc <HAL_ADC_ConfigChannel>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000bfc:	f000 f968 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000124 	.word	0x20000124
 8000c0c:	40012000 	.word	0x40012000

08000c10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c24:	463b      	mov	r3, r7
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca8 <MX_TIM2_Init+0x98>)
 8000c2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000-1;
 8000c34:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca8 <MX_TIM2_Init+0x98>)
 8000c36:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8000c3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca8 <MX_TIM2_Init+0x98>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2999;
 8000c42:	4b19      	ldr	r3, [pc, #100]	@ (8000ca8 <MX_TIM2_Init+0x98>)
 8000c44:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000c48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ca8 <MX_TIM2_Init+0x98>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c50:	4b15      	ldr	r3, [pc, #84]	@ (8000ca8 <MX_TIM2_Init+0x98>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c56:	4814      	ldr	r0, [pc, #80]	@ (8000ca8 <MX_TIM2_Init+0x98>)
 8000c58:	f003 faf4 	bl	8004244 <HAL_TIM_Base_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c62:	f000 f935 	bl	8000ed0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c6c:	f107 0308 	add.w	r3, r7, #8
 8000c70:	4619      	mov	r1, r3
 8000c72:	480d      	ldr	r0, [pc, #52]	@ (8000ca8 <MX_TIM2_Init+0x98>)
 8000c74:	f003 fb9e 	bl	80043b4 <HAL_TIM_ConfigClockSource>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c7e:	f000 f927 	bl	8000ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c82:	2320      	movs	r3, #32
 8000c84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4806      	ldr	r0, [pc, #24]	@ (8000ca8 <MX_TIM2_Init+0x98>)
 8000c90:	f003 fd98 	bl	80047c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c9a:	f000 f919 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	2000016c 	.word	0x2000016c

08000cac <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000cb0:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <MX_UART4_Init+0x4c>)
 8000cb2:	4a12      	ldr	r2, [pc, #72]	@ (8000cfc <MX_UART4_Init+0x50>)
 8000cb4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000cb6:	4b10      	ldr	r3, [pc, #64]	@ (8000cf8 <MX_UART4_Init+0x4c>)
 8000cb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cbc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <MX_UART4_Init+0x4c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <MX_UART4_Init+0x4c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf8 <MX_UART4_Init+0x4c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	@ (8000cf8 <MX_UART4_Init+0x4c>)
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	@ (8000cf8 <MX_UART4_Init+0x4c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <MX_UART4_Init+0x4c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ce2:	4805      	ldr	r0, [pc, #20]	@ (8000cf8 <MX_UART4_Init+0x4c>)
 8000ce4:	f003 fdea 	bl	80048bc <HAL_UART_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000cee:	f000 f8ef 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200001b4 	.word	0x200001b4
 8000cfc:	40004c00 	.word	0x40004c00

08000d00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	@ 0x28
 8000d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b32      	ldr	r3, [pc, #200]	@ (8000de4 <MX_GPIO_Init+0xe4>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	4a31      	ldr	r2, [pc, #196]	@ (8000de4 <MX_GPIO_Init+0xe4>)
 8000d20:	f043 0304 	orr.w	r3, r3, #4
 8000d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d26:	4b2f      	ldr	r3, [pc, #188]	@ (8000de4 <MX_GPIO_Init+0xe4>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b2b      	ldr	r3, [pc, #172]	@ (8000de4 <MX_GPIO_Init+0xe4>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a2a      	ldr	r2, [pc, #168]	@ (8000de4 <MX_GPIO_Init+0xe4>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d42:	4b28      	ldr	r3, [pc, #160]	@ (8000de4 <MX_GPIO_Init+0xe4>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	4b24      	ldr	r3, [pc, #144]	@ (8000de4 <MX_GPIO_Init+0xe4>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	4a23      	ldr	r2, [pc, #140]	@ (8000de4 <MX_GPIO_Init+0xe4>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5e:	4b21      	ldr	r3, [pc, #132]	@ (8000de4 <MX_GPIO_Init+0xe4>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000de4 <MX_GPIO_Init+0xe4>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	4a1c      	ldr	r2, [pc, #112]	@ (8000de4 <MX_GPIO_Init+0xe4>)
 8000d74:	f043 0308 	orr.w	r3, r3, #8
 8000d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000de4 <MX_GPIO_Init+0xe4>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000d8c:	4816      	ldr	r0, [pc, #88]	@ (8000de8 <MX_GPIO_Init+0xe8>)
 8000d8e:	f002 fdc3 	bl	8003918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d92:	2301      	movs	r3, #1
 8000d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d96:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4619      	mov	r1, r3
 8000da6:	4811      	ldr	r0, [pc, #68]	@ (8000dec <MX_GPIO_Init+0xec>)
 8000da8:	f002 fc1a 	bl	80035e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000dac:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4808      	ldr	r0, [pc, #32]	@ (8000de8 <MX_GPIO_Init+0xe8>)
 8000dc6:	f002 fc0b 	bl	80035e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2006      	movs	r0, #6
 8000dd0:	f001 f97f 	bl	80020d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000dd4:	2006      	movs	r0, #6
 8000dd6:	f001 f998 	bl	800210a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000dda:	bf00      	nop
 8000ddc:	3728      	adds	r7, #40	@ 0x28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020c00 	.word	0x40020c00
 8000dec:	40020000 	.word	0x40020000

08000df0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000df0:	b5b0      	push	{r4, r5, r7, lr}
 8000df2:	b08e      	sub	sp, #56	@ 0x38
 8000df4:	af06      	add	r7, sp, #24
 8000df6:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a2c      	ldr	r2, [pc, #176]	@ (8000eb0 <HAL_ADC_ConvCpltCallback+0xc0>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d151      	bne.n	8000ea6 <HAL_ADC_ConvCpltCallback+0xb6>
    {
        uint32_t raw = HAL_ADC_GetValue(hadc);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f000 fe40 	bl	8001a88 <HAL_ADC_GetValue>
 8000e08:	61f8      	str	r0, [r7, #28]

        float Vsense = ((float)raw) * 3.3f / 4095.0f;
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	ee07 3a90 	vmov	s15, r3
 8000e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e14:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8000eb4 <HAL_ADC_ConvCpltCallback+0xc4>
 8000e18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e1c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8000eb8 <HAL_ADC_ConvCpltCallback+0xc8>
 8000e20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e24:	edc7 7a06 	vstr	s15, [r7, #24]
        float temperature = ((Vsense - 0.76f) / 0.0025f) + 25.0f;
 8000e28:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e2c:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8000ebc <HAL_ADC_ConvCpltCallback+0xcc>
 8000e30:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000e34:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8000ec0 <HAL_ADC_ConvCpltCallback+0xd0>
 8000e38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e3c:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000e40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e44:	edc7 7a05 	vstr	s15, [r7, #20]

        uint16_t temp_scaled = (uint16_t)(temperature * 10.0f);
 8000e48:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e4c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000e50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e58:	ee17 3a90 	vmov	r3, s15
 8000e5c:	827b      	strh	r3, [r7, #18]

        Modbus_SetHolding(1, temp_scaled);
 8000e5e:	8a7b      	ldrh	r3, [r7, #18]
 8000e60:	4619      	mov	r1, r3
 8000e62:	2001      	movs	r0, #1
 8000e64:	f010 f8ec 	bl	8011040 <Modbus_SetHolding>

        DEBUG_PRINTF("ADC Raw=%lu | Vsense=%.3f V | Temp=%.2f C | Modbus=%u\r\n",
 8000e68:	69b8      	ldr	r0, [r7, #24]
 8000e6a:	f7ff fb65 	bl	8000538 <__aeabi_f2d>
 8000e6e:	4604      	mov	r4, r0
 8000e70:	460d      	mov	r5, r1
 8000e72:	6978      	ldr	r0, [r7, #20]
 8000e74:	f7ff fb60 	bl	8000538 <__aeabi_f2d>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	8a79      	ldrh	r1, [r7, #18]
 8000e7e:	9104      	str	r1, [sp, #16]
 8000e80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000e84:	e9cd 4500 	strd	r4, r5, [sp]
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ec4 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000e8c:	2140      	movs	r1, #64	@ 0x40
 8000e8e:	480e      	ldr	r0, [pc, #56]	@ (8000ec8 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000e90:	f010 fda2 	bl	80119d8 <sniprintf>
 8000e94:	60f8      	str	r0, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e9e:	490a      	ldr	r1, [pc, #40]	@ (8000ec8 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000ea0:	480a      	ldr	r0, [pc, #40]	@ (8000ecc <HAL_ADC_ConvCpltCallback+0xdc>)
 8000ea2:	f003 fd5b 	bl	800495c <HAL_UART_Transmit>
                     raw, Vsense, temperature, temp_scaled);
    }
}
 8000ea6:	bf00      	nop
 8000ea8:	3720      	adds	r7, #32
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bdb0      	pop	{r4, r5, r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40012000 	.word	0x40012000
 8000eb4:	40533333 	.word	0x40533333
 8000eb8:	457ff000 	.word	0x457ff000
 8000ebc:	3f428f5c 	.word	0x3f428f5c
 8000ec0:	3b23d70a 	.word	0x3b23d70a
 8000ec4:	08012bcc 	.word	0x08012bcc
 8000ec8:	200001fc 	.word	0x200001fc
 8000ecc:	200001b4 	.word	0x200001b4

08000ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed4:	b672      	cpsid	i
}
 8000ed6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <Error_Handler+0x8>

08000edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <HAL_MspInit+0x4c>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eea:	4a0f      	ldr	r2, [pc, #60]	@ (8000f28 <HAL_MspInit+0x4c>)
 8000eec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f28 <HAL_MspInit+0x4c>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	4b09      	ldr	r3, [pc, #36]	@ (8000f28 <HAL_MspInit+0x4c>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f06:	4a08      	ldr	r2, [pc, #32]	@ (8000f28 <HAL_MspInit+0x4c>)
 8000f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f0e:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <HAL_MspInit+0x4c>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	40023800 	.word	0x40023800

08000f2c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0e      	ldr	r2, [pc, #56]	@ (8000f74 <HAL_ADC_MspInit+0x48>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d115      	bne.n	8000f6a <HAL_ADC_MspInit+0x3e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b0d      	ldr	r3, [pc, #52]	@ (8000f78 <HAL_ADC_MspInit+0x4c>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f46:	4a0c      	ldr	r2, [pc, #48]	@ (8000f78 <HAL_ADC_MspInit+0x4c>)
 8000f48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f78 <HAL_ADC_MspInit+0x4c>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2012      	movs	r0, #18
 8000f60:	f001 f8b7 	bl	80020d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f64:	2012      	movs	r0, #18
 8000f66:	f001 f8d0 	bl	800210a <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40012000 	.word	0x40012000
 8000f78:	40023800 	.word	0x40023800

08000f7c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f8c:	d10d      	bne.n	8000faa <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b09      	ldr	r3, [pc, #36]	@ (8000fb8 <HAL_TIM_Base_MspInit+0x3c>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f96:	4a08      	ldr	r2, [pc, #32]	@ (8000fb8 <HAL_TIM_Base_MspInit+0x3c>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f9e:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <HAL_TIM_Base_MspInit+0x3c>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800

08000fbc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	@ 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a19      	ldr	r2, [pc, #100]	@ (8001040 <HAL_UART_MspInit+0x84>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d12c      	bne.n	8001038 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <HAL_UART_MspInit+0x88>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe6:	4a17      	ldr	r2, [pc, #92]	@ (8001044 <HAL_UART_MspInit+0x88>)
 8000fe8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <HAL_UART_MspInit+0x88>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <HAL_UART_MspInit+0x88>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	4a10      	ldr	r2, [pc, #64]	@ (8001044 <HAL_UART_MspInit+0x88>)
 8001004:	f043 0304 	orr.w	r3, r3, #4
 8001008:	6313      	str	r3, [r2, #48]	@ 0x30
 800100a:	4b0e      	ldr	r3, [pc, #56]	@ (8001044 <HAL_UART_MspInit+0x88>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	f003 0304 	and.w	r3, r3, #4
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001016:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800101a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001024:	2303      	movs	r3, #3
 8001026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001028:	2308      	movs	r3, #8
 800102a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	4805      	ldr	r0, [pc, #20]	@ (8001048 <HAL_UART_MspInit+0x8c>)
 8001034:	f002 fad4 	bl	80035e0 <HAL_GPIO_Init>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 8001038:	bf00      	nop
 800103a:	3728      	adds	r7, #40	@ 0x28
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40004c00 	.word	0x40004c00
 8001044:	40023800 	.word	0x40023800
 8001048:	40020800 	.word	0x40020800

0800104c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <NMI_Handler+0x4>

08001054 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <MemManage_Handler+0x4>

08001064 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <UsageFault_Handler+0x4>

08001074 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a2:	f000 fa7b 	bl	800159c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}

080010aa <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80010ae:	2001      	movs	r0, #1
 80010b0:	f002 fc4c 	bl	800394c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80010bc:	4802      	ldr	r0, [pc, #8]	@ (80010c8 <ADC_IRQHandler+0x10>)
 80010be:	f000 fbd3 	bl	8001868 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000124 	.word	0x20000124

080010cc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80010d0:	4802      	ldr	r0, [pc, #8]	@ (80010dc <ETH_IRQHandler+0x10>)
 80010d2:	f001 fb97 	bl	8002804 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20004d60 	.word	0x20004d60

080010e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return 1;
 80010e4:	2301      	movs	r3, #1
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <_kill>:

int _kill(int pid, int sig)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010fa:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <_kill+0x20>)
 80010fc:	2216      	movs	r2, #22
 80010fe:	601a      	str	r2, [r3, #0]
  return -1;
 8001100:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	200086d4 	.word	0x200086d4

08001114 <_exit>:

void _exit (int status)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800111c:	f04f 31ff 	mov.w	r1, #4294967295
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ffe5 	bl	80010f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001126:	bf00      	nop
 8001128:	e7fd      	b.n	8001126 <_exit+0x12>

0800112a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	60f8      	str	r0, [r7, #12]
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	e00a      	b.n	8001152 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800113c:	f3af 8000 	nop.w
 8001140:	4601      	mov	r1, r0
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	1c5a      	adds	r2, r3, #1
 8001146:	60ba      	str	r2, [r7, #8]
 8001148:	b2ca      	uxtb	r2, r1
 800114a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	3301      	adds	r3, #1
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	429a      	cmp	r2, r3
 8001158:	dbf0      	blt.n	800113c <_read+0x12>
  }

  return len;
 800115a:	687b      	ldr	r3, [r7, #4]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	e009      	b.n	800118a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	1c5a      	adds	r2, r3, #1
 800117a:	60ba      	str	r2, [r7, #8]
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3301      	adds	r3, #1
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	429a      	cmp	r2, r3
 8001190:	dbf1      	blt.n	8001176 <_write+0x12>
  }
  return len;
 8001192:	687b      	ldr	r3, [r7, #4]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <_close>:

int _close(int file)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011c4:	605a      	str	r2, [r3, #4]
  return 0;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <_isatty>:

int _isatty(int file)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011dc:	2301      	movs	r3, #1
}
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b085      	sub	sp, #20
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	60f8      	str	r0, [r7, #12]
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001204:	b480      	push	{r7}
 8001206:	b087      	sub	sp, #28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800120c:	4a14      	ldr	r2, [pc, #80]	@ (8001260 <_sbrk+0x5c>)
 800120e:	4b15      	ldr	r3, [pc, #84]	@ (8001264 <_sbrk+0x60>)
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001218:	4b13      	ldr	r3, [pc, #76]	@ (8001268 <_sbrk+0x64>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d102      	bne.n	8001226 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001220:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <_sbrk+0x64>)
 8001222:	4a12      	ldr	r2, [pc, #72]	@ (800126c <_sbrk+0x68>)
 8001224:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001226:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <_sbrk+0x64>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	429a      	cmp	r2, r3
 8001232:	d205      	bcs.n	8001240 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001234:	4b0e      	ldr	r3, [pc, #56]	@ (8001270 <_sbrk+0x6c>)
 8001236:	220c      	movs	r2, #12
 8001238:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800123a:	f04f 33ff 	mov.w	r3, #4294967295
 800123e:	e009      	b.n	8001254 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001240:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <_sbrk+0x64>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001246:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <_sbrk+0x64>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4413      	add	r3, r2
 800124e:	4a06      	ldr	r2, [pc, #24]	@ (8001268 <_sbrk+0x64>)
 8001250:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001252:	68fb      	ldr	r3, [r7, #12]
}
 8001254:	4618      	mov	r0, r3
 8001256:	371c      	adds	r7, #28
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	20020000 	.word	0x20020000
 8001264:	00000400 	.word	0x00000400
 8001268:	2000023c 	.word	0x2000023c
 800126c:	200086e8 	.word	0x200086e8
 8001270:	200086d4 	.word	0x200086d4

08001274 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <SystemInit+0x20>)
 800127a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800127e:	4a05      	ldr	r2, [pc, #20]	@ (8001294 <SystemInit+0x20>)
 8001280:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001284:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001298:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800129c:	f7ff ffea 	bl	8001274 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012a0:	480c      	ldr	r0, [pc, #48]	@ (80012d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012a2:	490d      	ldr	r1, [pc, #52]	@ (80012d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012a4:	4a0d      	ldr	r2, [pc, #52]	@ (80012dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a8:	e002      	b.n	80012b0 <LoopCopyDataInit>

080012aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ae:	3304      	adds	r3, #4

080012b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b4:	d3f9      	bcc.n	80012aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b6:	4a0a      	ldr	r2, [pc, #40]	@ (80012e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012b8:	4c0a      	ldr	r4, [pc, #40]	@ (80012e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012bc:	e001      	b.n	80012c2 <LoopFillZerobss>

080012be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c0:	3204      	adds	r2, #4

080012c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c4:	d3fb      	bcc.n	80012be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012c6:	f010 fc79 	bl	8011bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ca:	f7ff fb23 	bl	8000914 <main>
  bx  lr    
 80012ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d8:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 80012dc:	080159ac 	.word	0x080159ac
  ldr r2, =_sbss
 80012e0:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 80012e4:	200086e4 	.word	0x200086e4

080012e8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e8:	e7fe      	b.n	80012e8 <CAN1_RX0_IRQHandler>

080012ea <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00b      	beq.n	8001312 <LAN8742_RegisterBusIO+0x28>
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d007      	beq.n	8001312 <LAN8742_RegisterBusIO+0x28>
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <LAN8742_RegisterBusIO+0x28>
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d102      	bne.n	8001318 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001312:	f04f 33ff 	mov.w	r3, #4294967295
 8001316:	e014      	b.n	8001342 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	68da      	ldr	r2, [r3, #12]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	691a      	ldr	r2, [r3, #16]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800134e:	b580      	push	{r7, lr}
 8001350:	b086      	sub	sp, #24
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d139      	bne.n	80013de <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2220      	movs	r2, #32
 800137c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
 8001382:	e01c      	b.n	80013be <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	f107 020c 	add.w	r2, r7, #12
 800138c:	2112      	movs	r1, #18
 800138e:	6978      	ldr	r0, [r7, #20]
 8001390:	4798      	blx	r3
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	da03      	bge.n	80013a0 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001398:	f06f 0304 	mvn.w	r3, #4
 800139c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800139e:	e00b      	b.n	80013b8 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f003 031f 	and.w	r3, r3, #31
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d105      	bne.n	80013b8 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
         break;
 80013b6:	e005      	b.n	80013c4 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	3301      	adds	r3, #1
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	2b1f      	cmp	r3, #31
 80013c2:	d9df      	bls.n	8001384 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b1f      	cmp	r3, #31
 80013ca:	d902      	bls.n	80013d2 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80013cc:	f06f 0302 	mvn.w	r3, #2
 80013d0:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2201      	movs	r2, #1
 80013dc:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80013de:	693b      	ldr	r3, [r7, #16]
 }
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	6810      	ldr	r0, [r2, #0]
 80013fc:	f107 020c 	add.w	r2, r7, #12
 8001400:	2101      	movs	r1, #1
 8001402:	4798      	blx	r3
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	da02      	bge.n	8001410 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800140a:	f06f 0304 	mvn.w	r3, #4
 800140e:	e06e      	b.n	80014ee <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	695b      	ldr	r3, [r3, #20]
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6810      	ldr	r0, [r2, #0]
 8001418:	f107 020c 	add.w	r2, r7, #12
 800141c:	2101      	movs	r1, #1
 800141e:	4798      	blx	r3
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	da02      	bge.n	800142c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001426:	f06f 0304 	mvn.w	r3, #4
 800142a:	e060      	b.n	80014ee <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001436:	2301      	movs	r3, #1
 8001438:	e059      	b.n	80014ee <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6810      	ldr	r0, [r2, #0]
 8001442:	f107 020c 	add.w	r2, r7, #12
 8001446:	2100      	movs	r1, #0
 8001448:	4798      	blx	r3
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	da02      	bge.n	8001456 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001450:	f06f 0304 	mvn.w	r3, #4
 8001454:	e04b      	b.n	80014ee <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d11b      	bne.n	8001498 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d006      	beq.n	8001478 <LAN8742_GetLinkState+0x90>
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001474:	2302      	movs	r3, #2
 8001476:	e03a      	b.n	80014ee <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001482:	2303      	movs	r3, #3
 8001484:	e033      	b.n	80014ee <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001490:	2304      	movs	r3, #4
 8001492:	e02c      	b.n	80014ee <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001494:	2305      	movs	r3, #5
 8001496:	e02a      	b.n	80014ee <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6810      	ldr	r0, [r2, #0]
 80014a0:	f107 020c 	add.w	r2, r7, #12
 80014a4:	211f      	movs	r1, #31
 80014a6:	4798      	blx	r3
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	da02      	bge.n	80014b4 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80014ae:	f06f 0304 	mvn.w	r3, #4
 80014b2:	e01c      	b.n	80014ee <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80014be:	2306      	movs	r3, #6
 80014c0:	e015      	b.n	80014ee <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f003 031c 	and.w	r3, r3, #28
 80014c8:	2b18      	cmp	r3, #24
 80014ca:	d101      	bne.n	80014d0 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80014cc:	2302      	movs	r3, #2
 80014ce:	e00e      	b.n	80014ee <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 031c 	and.w	r3, r3, #28
 80014d6:	2b08      	cmp	r3, #8
 80014d8:	d101      	bne.n	80014de <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80014da:	2303      	movs	r3, #3
 80014dc:	e007      	b.n	80014ee <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f003 031c 	and.w	r3, r3, #28
 80014e4:	2b14      	cmp	r3, #20
 80014e6:	d101      	bne.n	80014ec <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80014e8:	2304      	movs	r3, #4
 80014ea:	e000      	b.n	80014ee <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80014ec:	2305      	movs	r3, #5
    }
  }
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001538 <HAL_Init+0x40>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a0d      	ldr	r2, [pc, #52]	@ (8001538 <HAL_Init+0x40>)
 8001502:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001506:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001508:	4b0b      	ldr	r3, [pc, #44]	@ (8001538 <HAL_Init+0x40>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0a      	ldr	r2, [pc, #40]	@ (8001538 <HAL_Init+0x40>)
 800150e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001512:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001514:	4b08      	ldr	r3, [pc, #32]	@ (8001538 <HAL_Init+0x40>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a07      	ldr	r2, [pc, #28]	@ (8001538 <HAL_Init+0x40>)
 800151a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800151e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001520:	2003      	movs	r0, #3
 8001522:	f000 fdcb 	bl	80020bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001526:	200f      	movs	r0, #15
 8001528:	f000 f808 	bl	800153c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800152c:	f7ff fcd6 	bl	8000edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40023c00 	.word	0x40023c00

0800153c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001544:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <HAL_InitTick+0x54>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <HAL_InitTick+0x58>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	4619      	mov	r1, r3
 800154e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001552:	fbb3 f3f1 	udiv	r3, r3, r1
 8001556:	fbb2 f3f3 	udiv	r3, r2, r3
 800155a:	4618      	mov	r0, r3
 800155c:	f000 fde3 	bl	8002126 <HAL_SYSTICK_Config>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e00e      	b.n	8001588 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b0f      	cmp	r3, #15
 800156e:	d80a      	bhi.n	8001586 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001570:	2200      	movs	r2, #0
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	f04f 30ff 	mov.w	r0, #4294967295
 8001578:	f000 fdab 	bl	80020d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800157c:	4a06      	ldr	r2, [pc, #24]	@ (8001598 <HAL_InitTick+0x5c>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001582:	2300      	movs	r3, #0
 8001584:	e000      	b.n	8001588 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000000 	.word	0x20000000
 8001594:	20000008 	.word	0x20000008
 8001598:	20000004 	.word	0x20000004

0800159c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a0:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <HAL_IncTick+0x20>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <HAL_IncTick+0x24>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4413      	add	r3, r2
 80015ac:	4a04      	ldr	r2, [pc, #16]	@ (80015c0 <HAL_IncTick+0x24>)
 80015ae:	6013      	str	r3, [r2, #0]
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	20000008 	.word	0x20000008
 80015c0:	20000240 	.word	0x20000240

080015c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return uwTick;
 80015c8:	4b03      	ldr	r3, [pc, #12]	@ (80015d8 <HAL_GetTick+0x14>)
 80015ca:	681b      	ldr	r3, [r3, #0]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	20000240 	.word	0x20000240

080015dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e4:	f7ff ffee 	bl	80015c4 <HAL_GetTick>
 80015e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f4:	d005      	beq.n	8001602 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001620 <HAL_Delay+0x44>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4413      	add	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001602:	bf00      	nop
 8001604:	f7ff ffde 	bl	80015c4 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	429a      	cmp	r2, r3
 8001612:	d8f7      	bhi.n	8001604 <HAL_Delay+0x28>
  {
  }
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000008 	.word	0x20000008

08001624 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e033      	b.n	80016a2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	2b00      	cmp	r3, #0
 8001640:	d109      	bne.n	8001656 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff fc72 	bl	8000f2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	2b00      	cmp	r3, #0
 8001660:	d118      	bne.n	8001694 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800166a:	f023 0302 	bic.w	r3, r3, #2
 800166e:	f043 0202 	orr.w	r2, r3, #2
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 fb4a 	bl	8001d10 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001686:	f023 0303 	bic.w	r3, r3, #3
 800168a:	f043 0201 	orr.w	r2, r3, #1
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	641a      	str	r2, [r3, #64]	@ 0x40
 8001692:	e001      	b.n	8001698 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_ADC_Start_IT+0x1a>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e0bd      	b.n	8001842 <HAL_ADC_Start_IT+0x196>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d018      	beq.n	800170e <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0201 	orr.w	r2, r2, #1
 80016ea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016ec:	4b58      	ldr	r3, [pc, #352]	@ (8001850 <HAL_ADC_Start_IT+0x1a4>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a58      	ldr	r2, [pc, #352]	@ (8001854 <HAL_ADC_Start_IT+0x1a8>)
 80016f2:	fba2 2303 	umull	r2, r3, r2, r3
 80016f6:	0c9a      	lsrs	r2, r3, #18
 80016f8:	4613      	mov	r3, r2
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4413      	add	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001700:	e002      	b.n	8001708 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	3b01      	subs	r3, #1
 8001706:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f9      	bne.n	8001702 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b01      	cmp	r3, #1
 800171a:	f040 8085 	bne.w	8001828 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001722:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001726:	f023 0301 	bic.w	r3, r3, #1
 800172a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800173c:	2b00      	cmp	r3, #0
 800173e:	d007      	beq.n	8001750 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001744:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001748:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001754:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001758:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800175c:	d106      	bne.n	800176c <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001762:	f023 0206 	bic.w	r2, r3, #6
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	645a      	str	r2, [r3, #68]	@ 0x44
 800176a:	e002      	b.n	8001772 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800177a:	4b37      	ldr	r3, [pc, #220]	@ (8001858 <HAL_ADC_Start_IT+0x1ac>)
 800177c:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001786:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6812      	ldr	r2, [r2, #0]
 8001792:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001796:	f043 0320 	orr.w	r3, r3, #32
 800179a:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 031f 	and.w	r3, r3, #31
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d12a      	bne.n	80017fe <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a2b      	ldr	r2, [pc, #172]	@ (800185c <HAL_ADC_Start_IT+0x1b0>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d015      	beq.n	80017de <HAL_ADC_Start_IT+0x132>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a2a      	ldr	r2, [pc, #168]	@ (8001860 <HAL_ADC_Start_IT+0x1b4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d105      	bne.n	80017c8 <HAL_ADC_Start_IT+0x11c>
 80017bc:	4b26      	ldr	r3, [pc, #152]	@ (8001858 <HAL_ADC_Start_IT+0x1ac>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 031f 	and.w	r3, r3, #31
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00a      	beq.n	80017de <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a25      	ldr	r2, [pc, #148]	@ (8001864 <HAL_ADC_Start_IT+0x1b8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d136      	bne.n	8001840 <HAL_ADC_Start_IT+0x194>
 80017d2:	4b21      	ldr	r3, [pc, #132]	@ (8001858 <HAL_ADC_Start_IT+0x1ac>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d130      	bne.n	8001840 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d129      	bne.n	8001840 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	e020      	b.n	8001840 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a16      	ldr	r2, [pc, #88]	@ (800185c <HAL_ADC_Start_IT+0x1b0>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d11b      	bne.n	8001840 <HAL_ADC_Start_IT+0x194>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d114      	bne.n	8001840 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	e00b      	b.n	8001840 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182c:	f043 0210 	orr.w	r2, r3, #16
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001838:	f043 0201 	orr.w	r2, r3, #1
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	20000000 	.word	0x20000000
 8001854:	431bde83 	.word	0x431bde83
 8001858:	40012300 	.word	0x40012300
 800185c:	40012000 	.word	0x40012000
 8001860:	40012100 	.word	0x40012100
 8001864:	40012200 	.word	0x40012200

08001868 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	2300      	movs	r3, #0
 8001876:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	f003 0320 	and.w	r3, r3, #32
 8001896:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d049      	beq.n	8001932 <HAL_ADC_IRQHandler+0xca>
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d046      	beq.n	8001932 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a8:	f003 0310 	and.w	r3, r3, #16
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d105      	bne.n	80018bc <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d12b      	bne.n	8001922 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d127      	bne.n	8001922 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d006      	beq.n	80018ee <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d119      	bne.n	8001922 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 0220 	bic.w	r2, r2, #32
 80018fc:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d105      	bne.n	8001922 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191a:	f043 0201 	orr.w	r2, r3, #1
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff fa64 	bl	8000df0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f06f 0212 	mvn.w	r2, #18
 8001930:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001940:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d057      	beq.n	80019f8 <HAL_ADC_IRQHandler+0x190>
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d054      	beq.n	80019f8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	2b00      	cmp	r3, #0
 8001958:	d105      	bne.n	8001966 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d139      	bne.n	80019e8 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800197a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800197e:	2b00      	cmp	r3, #0
 8001980:	d006      	beq.n	8001990 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800198c:	2b00      	cmp	r3, #0
 800198e:	d12b      	bne.n	80019e8 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800199a:	2b00      	cmp	r3, #0
 800199c:	d124      	bne.n	80019e8 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d11d      	bne.n	80019e8 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d119      	bne.n	80019e8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019c2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d105      	bne.n	80019e8 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e0:	f043 0201 	orr.w	r2, r3, #1
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 fa8d 	bl	8001f08 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f06f 020c 	mvn.w	r2, #12
 80019f6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a06:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d017      	beq.n	8001a3e <HAL_ADC_IRQHandler+0x1d6>
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d014      	beq.n	8001a3e <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d10d      	bne.n	8001a3e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a26:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f837 	bl	8001aa2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f06f 0201 	mvn.w	r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f003 0320 	and.w	r3, r3, #32
 8001a44:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a4c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d015      	beq.n	8001a80 <HAL_ADC_IRQHandler+0x218>
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d012      	beq.n	8001a80 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5e:	f043 0202 	orr.w	r2, r3, #2
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f06f 0220 	mvn.w	r2, #32
 8001a6e:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f820 	bl	8001ab6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f06f 0220 	mvn.w	r2, #32
 8001a7e:	601a      	str	r2, [r3, #0]
  }
}
 8001a80:	bf00      	nop
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d101      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x1c>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	e105      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x228>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b09      	cmp	r3, #9
 8001af6:	d925      	bls.n	8001b44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68d9      	ldr	r1, [r3, #12]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	461a      	mov	r2, r3
 8001b06:	4613      	mov	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3b1e      	subs	r3, #30
 8001b0e:	2207      	movs	r2, #7
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43da      	mvns	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	400a      	ands	r2, r1
 8001b1c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68d9      	ldr	r1, [r3, #12]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	4603      	mov	r3, r0
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	4403      	add	r3, r0
 8001b36:	3b1e      	subs	r3, #30
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	e022      	b.n	8001b8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6919      	ldr	r1, [r3, #16]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	461a      	mov	r2, r3
 8001b52:	4613      	mov	r3, r2
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	4413      	add	r3, r2
 8001b58:	2207      	movs	r2, #7
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	400a      	ands	r2, r1
 8001b66:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6919      	ldr	r1, [r3, #16]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	4618      	mov	r0, r3
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4403      	add	r3, r0
 8001b80:	409a      	lsls	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b06      	cmp	r3, #6
 8001b90:	d824      	bhi.n	8001bdc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3b05      	subs	r3, #5
 8001ba4:	221f      	movs	r2, #31
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43da      	mvns	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	400a      	ands	r2, r1
 8001bb2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	3b05      	subs	r3, #5
 8001bce:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bda:	e04c      	b.n	8001c76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b0c      	cmp	r3, #12
 8001be2:	d824      	bhi.n	8001c2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3b23      	subs	r3, #35	@ 0x23
 8001bf6:	221f      	movs	r2, #31
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43da      	mvns	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	400a      	ands	r2, r1
 8001c04:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	4618      	mov	r0, r3
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3b23      	subs	r3, #35	@ 0x23
 8001c20:	fa00 f203 	lsl.w	r2, r0, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c2c:	e023      	b.n	8001c76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3b41      	subs	r3, #65	@ 0x41
 8001c40:	221f      	movs	r2, #31
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43da      	mvns	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	400a      	ands	r2, r1
 8001c4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	3b41      	subs	r3, #65	@ 0x41
 8001c6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c76:	4b22      	ldr	r3, [pc, #136]	@ (8001d00 <HAL_ADC_ConfigChannel+0x234>)
 8001c78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a21      	ldr	r2, [pc, #132]	@ (8001d04 <HAL_ADC_ConfigChannel+0x238>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d109      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x1cc>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b12      	cmp	r3, #18
 8001c8a:	d105      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a19      	ldr	r2, [pc, #100]	@ (8001d04 <HAL_ADC_ConfigChannel+0x238>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d123      	bne.n	8001cea <HAL_ADC_ConfigChannel+0x21e>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b10      	cmp	r3, #16
 8001ca8:	d003      	beq.n	8001cb2 <HAL_ADC_ConfigChannel+0x1e6>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2b11      	cmp	r3, #17
 8001cb0:	d11b      	bne.n	8001cea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b10      	cmp	r3, #16
 8001cc4:	d111      	bne.n	8001cea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cc6:	4b10      	ldr	r3, [pc, #64]	@ (8001d08 <HAL_ADC_ConfigChannel+0x23c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a10      	ldr	r2, [pc, #64]	@ (8001d0c <HAL_ADC_ConfigChannel+0x240>)
 8001ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd0:	0c9a      	lsrs	r2, r3, #18
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001cdc:	e002      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f9      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	40012300 	.word	0x40012300
 8001d04:	40012000 	.word	0x40012000
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	431bde83 	.word	0x431bde83

08001d10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d18:	4b79      	ldr	r3, [pc, #484]	@ (8001f00 <ADC_Init+0x1f0>)
 8001d1a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	431a      	orrs	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6859      	ldr	r1, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	021a      	lsls	r2, r3, #8
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001d68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6859      	ldr	r1, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6899      	ldr	r1, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da2:	4a58      	ldr	r2, [pc, #352]	@ (8001f04 <ADC_Init+0x1f4>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d022      	beq.n	8001dee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001db6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6899      	ldr	r1, [r3, #8]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001dd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6899      	ldr	r1, [r3, #8]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	e00f      	b.n	8001e0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001dfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e0c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0202 	bic.w	r2, r2, #2
 8001e1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6899      	ldr	r1, [r3, #8]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	7e1b      	ldrb	r3, [r3, #24]
 8001e28:	005a      	lsls	r2, r3, #1
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d01b      	beq.n	8001e74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e4a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001e5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6859      	ldr	r1, [r3, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e66:	3b01      	subs	r3, #1
 8001e68:	035a      	lsls	r2, r3, #13
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	e007      	b.n	8001e84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e82:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001e92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	051a      	lsls	r2, r3, #20
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001eb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6899      	ldr	r1, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ec6:	025a      	lsls	r2, r3, #9
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ede:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6899      	ldr	r1, [r3, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	029a      	lsls	r2, r3, #10
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	609a      	str	r2, [r3, #8]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	40012300 	.word	0x40012300
 8001f04:	0f000001 	.word	0x0f000001

08001f08 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f60 <__NVIC_SetPriorityGrouping+0x44>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f4e:	4a04      	ldr	r2, [pc, #16]	@ (8001f60 <__NVIC_SetPriorityGrouping+0x44>)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	60d3      	str	r3, [r2, #12]
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f68:	4b04      	ldr	r3, [pc, #16]	@ (8001f7c <__NVIC_GetPriorityGrouping+0x18>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	f003 0307 	and.w	r3, r3, #7
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	db0b      	blt.n	8001faa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	f003 021f 	and.w	r2, r3, #31
 8001f98:	4907      	ldr	r1, [pc, #28]	@ (8001fb8 <__NVIC_EnableIRQ+0x38>)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000e100 	.word	0xe000e100

08001fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	6039      	str	r1, [r7, #0]
 8001fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	db0a      	blt.n	8001fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	490c      	ldr	r1, [pc, #48]	@ (8002008 <__NVIC_SetPriority+0x4c>)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	0112      	lsls	r2, r2, #4
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	440b      	add	r3, r1
 8001fe0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe4:	e00a      	b.n	8001ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	4908      	ldr	r1, [pc, #32]	@ (800200c <__NVIC_SetPriority+0x50>)
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	3b04      	subs	r3, #4
 8001ff4:	0112      	lsls	r2, r2, #4
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	761a      	strb	r2, [r3, #24]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000e100 	.word	0xe000e100
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002010:	b480      	push	{r7}
 8002012:	b089      	sub	sp, #36	@ 0x24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f1c3 0307 	rsb	r3, r3, #7
 800202a:	2b04      	cmp	r3, #4
 800202c:	bf28      	it	cs
 800202e:	2304      	movcs	r3, #4
 8002030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3304      	adds	r3, #4
 8002036:	2b06      	cmp	r3, #6
 8002038:	d902      	bls.n	8002040 <NVIC_EncodePriority+0x30>
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3b03      	subs	r3, #3
 800203e:	e000      	b.n	8002042 <NVIC_EncodePriority+0x32>
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	f04f 32ff 	mov.w	r2, #4294967295
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43da      	mvns	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	401a      	ands	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002058:	f04f 31ff 	mov.w	r1, #4294967295
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	fa01 f303 	lsl.w	r3, r1, r3
 8002062:	43d9      	mvns	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002068:	4313      	orrs	r3, r2
         );
}
 800206a:	4618      	mov	r0, r3
 800206c:	3724      	adds	r7, #36	@ 0x24
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
	...

08002078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3b01      	subs	r3, #1
 8002084:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002088:	d301      	bcc.n	800208e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800208a:	2301      	movs	r3, #1
 800208c:	e00f      	b.n	80020ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800208e:	4a0a      	ldr	r2, [pc, #40]	@ (80020b8 <SysTick_Config+0x40>)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3b01      	subs	r3, #1
 8002094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002096:	210f      	movs	r1, #15
 8002098:	f04f 30ff 	mov.w	r0, #4294967295
 800209c:	f7ff ff8e 	bl	8001fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a0:	4b05      	ldr	r3, [pc, #20]	@ (80020b8 <SysTick_Config+0x40>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a6:	4b04      	ldr	r3, [pc, #16]	@ (80020b8 <SysTick_Config+0x40>)
 80020a8:	2207      	movs	r2, #7
 80020aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	e000e010 	.word	0xe000e010

080020bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ff29 	bl	8001f1c <__NVIC_SetPriorityGrouping>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b086      	sub	sp, #24
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	4603      	mov	r3, r0
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
 80020de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e4:	f7ff ff3e 	bl	8001f64 <__NVIC_GetPriorityGrouping>
 80020e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	6978      	ldr	r0, [r7, #20]
 80020f0:	f7ff ff8e 	bl	8002010 <NVIC_EncodePriority>
 80020f4:	4602      	mov	r2, r0
 80020f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020fa:	4611      	mov	r1, r2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff5d 	bl	8001fbc <__NVIC_SetPriority>
}
 8002102:	bf00      	nop
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	4603      	mov	r3, r0
 8002112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff31 	bl	8001f80 <__NVIC_EnableIRQ>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff ffa2 	bl	8002078 <SysTick_Config>
 8002134:	4603      	mov	r3, r0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e08a      	b.n	8002268 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002158:	2b00      	cmp	r3, #0
 800215a:	d106      	bne.n	800216a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2220      	movs	r2, #32
 8002160:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f003 fab9 	bl	80056dc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	4b40      	ldr	r3, [pc, #256]	@ (8002270 <HAL_ETH_Init+0x130>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002172:	4a3f      	ldr	r2, [pc, #252]	@ (8002270 <HAL_ETH_Init+0x130>)
 8002174:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002178:	6453      	str	r3, [r2, #68]	@ 0x44
 800217a:	4b3d      	ldr	r3, [pc, #244]	@ (8002270 <HAL_ETH_Init+0x130>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002186:	4b3b      	ldr	r3, [pc, #236]	@ (8002274 <HAL_ETH_Init+0x134>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	4a3a      	ldr	r2, [pc, #232]	@ (8002274 <HAL_ETH_Init+0x134>)
 800218c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002190:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002192:	4b38      	ldr	r3, [pc, #224]	@ (8002274 <HAL_ETH_Init+0x134>)
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	4936      	ldr	r1, [pc, #216]	@ (8002274 <HAL_ETH_Init+0x134>)
 800219c:	4313      	orrs	r3, r2
 800219e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80021a0:	4b34      	ldr	r3, [pc, #208]	@ (8002274 <HAL_ETH_Init+0x134>)
 80021a2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80021ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021bc:	f7ff fa02 	bl	80015c4 <HAL_GetTick>
 80021c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80021c2:	e011      	b.n	80021e8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80021c4:	f7ff f9fe 	bl	80015c4 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80021d2:	d909      	bls.n	80021e8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2204      	movs	r2, #4
 80021d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	22e0      	movs	r2, #224	@ 0xe0
 80021e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e03f      	b.n	8002268 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1e4      	bne.n	80021c4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 ff32 	bl	8003064 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 ffdd 	bl	80031c0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f001 f833 	bl	8003272 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	461a      	mov	r2, r3
 8002212:	2100      	movs	r1, #0
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 ff9b 	bl	8003150 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002228:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6812      	ldr	r2, [r2, #0]
 8002236:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800223a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800223e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002252:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2210      	movs	r2, #16
 8002262:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40023800 	.word	0x40023800
 8002274:	40013800 	.word	0x40013800

08002278 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002286:	2b10      	cmp	r3, #16
 8002288:	d161      	bne.n	800234e <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2220      	movs	r2, #32
 800228e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2204      	movs	r2, #4
 800229c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 fa2c 	bl	80026fc <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022ac:	2001      	movs	r0, #1
 80022ae:	f7ff f995 	bl	80015dc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80022cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022d0:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	f043 0302 	orr.w	r3, r3, #2
 80022e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022e8:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 fd56 	bl	8002d9c <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0208 	orr.w	r2, r2, #8
 80022fe:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002308:	2001      	movs	r0, #1
 800230a:	f7ff f967 	bl	80015dc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f042 0204 	orr.w	r2, r2, #4
 8002324:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8002338:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 800233c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002340:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2240      	movs	r2, #64	@ 0x40
 8002346:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	e000      	b.n	8002350 <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
  }
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002366:	2b40      	cmp	r3, #64	@ 0x40
 8002368:	d170      	bne.n	800244c <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2220      	movs	r2, #32
 800236e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8002384:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8002388:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800238c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80023a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023a4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	f023 0302 	bic.w	r3, r3, #2
 80023b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023bc:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0204 	bic.w	r2, r2, #4
 80023cc:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023d6:	2001      	movs	r0, #1
 80023d8:	f7ff f900 	bl	80015dc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 fcd9 	bl	8002d9c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0208 	bic.w	r2, r2, #8
 80023f8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002402:	2001      	movs	r0, #1
 8002404:	f7ff f8ea 	bl	80015dc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	e00e      	b.n	8002434 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	3212      	adds	r2, #18
 800241c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002420:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	3301      	adds	r3, #1
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	2b03      	cmp	r3, #3
 8002438:	d9ed      	bls.n	8002416 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2210      	movs	r2, #16
 8002444:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	e000      	b.n	800244e <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
  }
}
 800244e:	4618      	mov	r0, r3
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b086      	sub	sp, #24
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d109      	bne.n	800247c <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800246e:	f043 0201 	orr.w	r2, r3, #1
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e07c      	b.n	8002576 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002482:	2b40      	cmp	r3, #64	@ 0x40
 8002484:	d176      	bne.n	8002574 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002486:	2200      	movs	r2, #0
 8002488:	68b9      	ldr	r1, [r7, #8]
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 ff60 	bl	8003350 <ETH_Prepare_Tx_Descriptors>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d009      	beq.n	80024aa <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800249c:	f043 0202 	orr.w	r2, r3, #2
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e065      	b.n	8002576 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 80024aa:	f3bf 8f4f 	dsb	sy
}
 80024ae:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	3206      	adds	r2, #6
 80024b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024bc:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d904      	bls.n	80024da <HAL_ETH_Transmit+0x84>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d4:	1f1a      	subs	r2, r3, #4
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	3106      	adds	r1, #6
 80024e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80024ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024ee:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80024f0:	f7ff f868 	bl	80015c4 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80024f6:	e037      	b.n	8002568 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d011      	beq.n	800252e <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002510:	f043 0208 	orr.w	r2, r3, #8
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e023      	b.n	8002576 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002534:	d018      	beq.n	8002568 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002536:	f7ff f845 	bl	80015c4 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	429a      	cmp	r2, r3
 8002544:	d302      	bcc.n	800254c <HAL_ETH_Transmit+0xf6>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10d      	bne.n	8002568 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002552:	f043 0204 	orr.w	r2, r3, #4
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8002562:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e006      	b.n	8002576 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	dbc3      	blt.n	80024f8 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	e000      	b.n	8002576 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
  }
}
 8002576:	4618      	mov	r0, r3
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b088      	sub	sp, #32
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800259c:	f043 0201 	orr.w	r2, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e0a4      	b.n	80026f4 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025b0:	2b40      	cmp	r3, #64	@ 0x40
 80025b2:	d001      	beq.n	80025b8 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e09d      	b.n	80026f4 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025bc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	3212      	adds	r2, #18
 80025c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c8:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025ce:	f1c3 0304 	rsb	r3, r3, #4
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80025d4:	e066      	b.n	80026a4 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d007      	beq.n	80025f2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	69da      	ldr	r2, [r3, #28]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	699a      	ldr	r2, [r3, #24]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d103      	bne.n	8002606 <HAL_ETH_ReadData+0x88>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002602:	2b00      	cmp	r3, #0
 8002604:	d03c      	beq.n	8002680 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800260e:	2b00      	cmp	r3, #0
 8002610:	d005      	beq.n	800261e <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	0c1b      	lsrs	r3, r3, #16
 8002624:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002628:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002632:	2b00      	cmp	r3, #0
 8002634:	d005      	beq.n	8002642 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 800263e:	2301      	movs	r3, #1
 8002640:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800265a:	461a      	mov	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	b29b      	uxth	r3, r3
 8002660:	f003 f9f4 	bl	8005a4c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	441a      	add	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	2200      	movs	r2, #0
 800267e:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	3301      	adds	r3, #1
 8002684:	61fb      	str	r3, [r7, #28]
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	2b03      	cmp	r3, #3
 800268a:	d902      	bls.n	8002692 <HAL_ETH_ReadData+0x114>
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	3b04      	subs	r3, #4
 8002690:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69fa      	ldr	r2, [r7, #28]
 8002696:	3212      	adds	r2, #18
 8002698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800269c:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	3301      	adds	r3, #1
 80026a2:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	db06      	blt.n	80026ba <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d202      	bcs.n	80026ba <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80026b4:	7cfb      	ldrb	r3, [r7, #19]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d08d      	beq.n	80025d6 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	441a      	add	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d002      	beq.n	80026d4 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f814 	bl	80026fc <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	69fa      	ldr	r2, [r7, #28]
 80026d8:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80026da:	7cfb      	ldrb	r3, [r7, #19]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d108      	bne.n	80026f2 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80026ee:	2300      	movs	r3, #0
 80026f0:	e000      	b.n	80026f4 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3720      	adds	r7, #32
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002704:	2300      	movs	r3, #0
 8002706:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002708:	2301      	movs	r3, #1
 800270a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002710:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69fa      	ldr	r2, [r7, #28]
 8002716:	3212      	adds	r2, #18
 8002718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800271c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002722:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002724:	e044      	b.n	80027b0 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d112      	bne.n	8002754 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800272e:	f107 0308 	add.w	r3, r7, #8
 8002732:	4618      	mov	r0, r3
 8002734:	f003 f95a 	bl	80059ec <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d102      	bne.n	8002744 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800273e:	2300      	movs	r3, #0
 8002740:	74fb      	strb	r3, [r7, #19]
 8002742:	e007      	b.n	8002754 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	461a      	mov	r2, r3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	461a      	mov	r2, r3
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002754:	7cfb      	ldrb	r3, [r7, #19]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d02a      	beq.n	80027b0 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800275e:	2b00      	cmp	r3, #0
 8002760:	d108      	bne.n	8002774 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800276a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	6053      	str	r3, [r2, #4]
 8002772:	e005      	b.n	8002780 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	3301      	adds	r3, #1
 8002790:	61fb      	str	r3, [r7, #28]
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	2b03      	cmp	r3, #3
 8002796:	d902      	bls.n	800279e <ETH_UpdateDescriptor+0xa2>
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	3b04      	subs	r3, #4
 800279c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69fa      	ldr	r2, [r7, #28]
 80027a2:	3212      	adds	r2, #18
 80027a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a8:	617b      	str	r3, [r7, #20]
      desccount--;
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	3b01      	subs	r3, #1
 80027ae:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <ETH_UpdateDescriptor+0xc0>
 80027b6:	7cfb      	ldrb	r3, [r7, #19]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1b4      	bne.n	8002726 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d01a      	beq.n	80027fc <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3303      	adds	r3, #3
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80027d0:	f3bf 8f5f 	dmb	sy
}
 80027d4:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6919      	ldr	r1, [r3, #16]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	18ca      	adds	r2, r1, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027ee:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69fa      	ldr	r2, [r7, #28]
 80027f4:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80027fc:	bf00      	nop
 80027fe:	3720      	adds	r7, #32
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002812:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 800282c:	4b4b      	ldr	r3, [pc, #300]	@ (800295c <HAL_ETH_IRQHandler+0x158>)
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00e      	beq.n	800285a <HAL_ETH_IRQHandler+0x56>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002842:	2b00      	cmp	r3, #0
 8002844:	d009      	beq.n	800285a <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800284e:	461a      	mov	r2, r3
 8002850:	4b43      	ldr	r3, [pc, #268]	@ (8002960 <HAL_ETH_IRQHandler+0x15c>)
 8002852:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 f891 	bl	800297c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00f      	beq.n	8002884 <HAL_ETH_IRQHandler+0x80>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00a      	beq.n	8002884 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002876:	461a      	mov	r2, r3
 8002878:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800287c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f872 	bl	8002968 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d042      	beq.n	8002914 <HAL_ETH_IRQHandler+0x110>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d03d      	beq.n	8002914 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800289e:	f043 0208 	orr.w	r2, r3, #8
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d01a      	beq.n	80028e8 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028ba:	695a      	ldr	r2, [r3, #20]
 80028bc:	4b29      	ldr	r3, [pc, #164]	@ (8002964 <HAL_ETH_IRQHandler+0x160>)
 80028be:	4013      	ands	r3, r2
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6812      	ldr	r2, [r2, #0]
 80028d4:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 80028d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028dc:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	22e0      	movs	r2, #224	@ 0xe0
 80028e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80028e6:	e012      	b.n	800290e <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	f248 6380 	movw	r3, #34432	@ 0x8680
 80028f6:	4013      	ands	r3, r2
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002906:	461a      	mov	r2, r3
 8002908:	f248 6380 	movw	r3, #34432	@ 0x8680
 800290c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f83e 	bl	8002990 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00e      	beq.n	800293c <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002924:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f838 	bl	80029a4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d006      	beq.n	8002954 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002946:	4b05      	ldr	r3, [pc, #20]	@ (800295c <HAL_ETH_IRQHandler+0x158>)
 8002948:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800294c:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f832 	bl	80029b8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002954:	bf00      	nop
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40013c00 	.word	0x40013c00
 8002960:	00010040 	.word	0x00010040
 8002964:	007e2000 	.word	0x007e2000

08002968 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f003 031c 	and.w	r3, r3, #28
 80029e8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	02db      	lsls	r3, r3, #11
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	019b      	lsls	r3, r3, #6
 80029fa:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	f023 0302 	bic.w	r3, r3, #2
 8002a0a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002a1c:	f7fe fdd2 	bl	80015c4 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a22:	e00d      	b.n	8002a40 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002a24:	f7fe fdce 	bl	80015c4 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a32:	d301      	bcc.n	8002a38 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e010      	b.n	8002a5a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1ec      	bne.n	8002a24 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	461a      	mov	r2, r3
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b086      	sub	sp, #24
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f003 031c 	and.w	r3, r3, #28
 8002a7e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	02db      	lsls	r3, r3, #11
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	019b      	lsls	r3, r3, #6
 8002a90:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f043 0302 	orr.w	r3, r3, #2
 8002aa0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002abc:	f7fe fd82 	bl	80015c4 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ac2:	e00d      	b.n	8002ae0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002ac4:	f7fe fd7e 	bl	80015c4 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ad2:	d301      	bcc.n	8002ad8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e009      	b.n	8002aec <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1ec      	bne.n	8002ac4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0e6      	b.n	8002cd6 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	bf14      	ite	ne
 8002b16:	2301      	movne	r3, #1
 8002b18:	2300      	moveq	r3, #0
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	bf0c      	ite	eq
 8002b40:	2301      	moveq	r3, #1
 8002b42:	2300      	movne	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	461a      	mov	r2, r3
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	bf14      	ite	ne
 8002b5c:	2301      	movne	r3, #1
 8002b5e:	2300      	moveq	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	bf0c      	ite	eq
 8002b76:	2301      	moveq	r3, #1
 8002b78:	2300      	movne	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	bf14      	ite	ne
 8002b90:	2301      	movne	r3, #1
 8002b92:	2300      	moveq	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	461a      	mov	r2, r3
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	bf0c      	ite	eq
 8002bc6:	2301      	moveq	r3, #1
 8002bc8:	2300      	movne	r3, #0
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	461a      	mov	r2, r3
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	bf0c      	ite	eq
 8002be0:	2301      	moveq	r3, #1
 8002be2:	2300      	movne	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	461a      	mov	r2, r3
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	bf14      	ite	ne
 8002bfa:	2301      	movne	r3, #1
 8002bfc:	2300      	moveq	r3, #0
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	461a      	mov	r2, r3
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	bf14      	ite	ne
 8002c22:	2301      	movne	r3, #1
 8002c24:	2300      	moveq	r3, #0
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf14      	ite	ne
 8002c3c:	2301      	movne	r3, #1
 8002c3e:	2300      	moveq	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	461a      	mov	r2, r3
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	bf14      	ite	ne
 8002c56:	2301      	movne	r3, #1
 8002c58:	2300      	moveq	r3, #0
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	bf0c      	ite	eq
 8002c72:	2301      	moveq	r3, #1
 8002c74:	2300      	movne	r3, #0
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	461a      	mov	r2, r3
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	0c1b      	lsrs	r3, r3, #16
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	f003 0304 	and.w	r3, r3, #4
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	bf14      	ite	ne
 8002caa:	2301      	movne	r3, #1
 8002cac:	2300      	moveq	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	bf14      	ite	ne
 8002cc6:	2301      	movne	r3, #1
 8002cc8:	2300      	moveq	r3, #0
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
 8002cea:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e00b      	b.n	8002d0e <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cfc:	2b10      	cmp	r3, #16
 8002cfe:	d105      	bne.n	8002d0c <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002d00:	6839      	ldr	r1, [r7, #0]
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f870 	bl	8002de8 <ETH_SetMACConfig>

    return HAL_OK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	e000      	b.n	8002d0e <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
  }
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f023 031c 	bic.w	r3, r3, #28
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002d30:	f001 fa54 	bl	80041dc <HAL_RCC_GetHCLKFreq>
 8002d34:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	4a14      	ldr	r2, [pc, #80]	@ (8002d8c <HAL_ETH_SetMDIOClockRange+0x74>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d804      	bhi.n	8002d48 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f043 0308 	orr.w	r3, r3, #8
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	e019      	b.n	8002d7c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4a11      	ldr	r2, [pc, #68]	@ (8002d90 <HAL_ETH_SetMDIOClockRange+0x78>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d204      	bcs.n	8002d5a <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f043 030c 	orr.w	r3, r3, #12
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	e010      	b.n	8002d7c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d94 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d90c      	bls.n	8002d7c <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	4a0c      	ldr	r2, [pc, #48]	@ (8002d98 <HAL_ETH_SetMDIOClockRange+0x80>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d804      	bhi.n	8002d74 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f043 0304 	orr.w	r3, r3, #4
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	e003      	b.n	8002d7c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f043 0310 	orr.w	r3, r3, #16
 8002d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	611a      	str	r2, [r3, #16]
}
 8002d84:	bf00      	nop
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	02160ebf 	.word	0x02160ebf
 8002d90:	03938700 	.word	0x03938700
 8002d94:	05f5e0ff 	.word	0x05f5e0ff
 8002d98:	08f0d17f 	.word	0x08f0d17f

08002d9c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6812      	ldr	r2, [r2, #0]
 8002db6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002dbe:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dcc:	2001      	movs	r0, #1
 8002dce:	f7fe fc05 	bl	80015dc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ddc:	6193      	str	r3, [r2, #24]
}
 8002dde:	bf00      	nop
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
	...

08002de8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	4b53      	ldr	r3, [pc, #332]	@ (8002f4c <ETH_SetMACConfig+0x164>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	7b9b      	ldrb	r3, [r3, #14]
 8002e06:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	7c12      	ldrb	r2, [r2, #16]
 8002e0c:	2a00      	cmp	r2, #0
 8002e0e:	d102      	bne.n	8002e16 <ETH_SetMACConfig+0x2e>
 8002e10:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002e14:	e000      	b.n	8002e18 <ETH_SetMACConfig+0x30>
 8002e16:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002e18:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	7c52      	ldrb	r2, [r2, #17]
 8002e1e:	2a00      	cmp	r2, #0
 8002e20:	d102      	bne.n	8002e28 <ETH_SetMACConfig+0x40>
 8002e22:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002e26:	e000      	b.n	8002e2a <ETH_SetMACConfig+0x42>
 8002e28:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e2a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e30:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	7fdb      	ldrb	r3, [r3, #31]
 8002e36:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002e38:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002e3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	7f92      	ldrb	r2, [r2, #30]
 8002e44:	2a00      	cmp	r2, #0
 8002e46:	d102      	bne.n	8002e4e <ETH_SetMACConfig+0x66>
 8002e48:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e4c:	e000      	b.n	8002e50 <ETH_SetMACConfig+0x68>
 8002e4e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002e50:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	7f1b      	ldrb	r3, [r3, #28]
 8002e56:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002e58:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002e5e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	791b      	ldrb	r3, [r3, #4]
 8002e64:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002e66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002e6e:	2a00      	cmp	r2, #0
 8002e70:	d102      	bne.n	8002e78 <ETH_SetMACConfig+0x90>
 8002e72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e76:	e000      	b.n	8002e7a <ETH_SetMACConfig+0x92>
 8002e78:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002e7a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	7bdb      	ldrb	r3, [r3, #15]
 8002e80:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002e82:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002e88:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002e90:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002e92:	4313      	orrs	r3, r2
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002eaa:	2001      	movs	r0, #1
 8002eac:	f7fe fb96 	bl	80015dc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ece:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002ed6:	2a00      	cmp	r2, #0
 8002ed8:	d101      	bne.n	8002ede <ETH_SetMACConfig+0xf6>
 8002eda:	2280      	movs	r2, #128	@ 0x80
 8002edc:	e000      	b.n	8002ee0 <ETH_SetMACConfig+0xf8>
 8002ede:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ee0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ee6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002eee:	2a01      	cmp	r2, #1
 8002ef0:	d101      	bne.n	8002ef6 <ETH_SetMACConfig+0x10e>
 8002ef2:	2208      	movs	r2, #8
 8002ef4:	e000      	b.n	8002ef8 <ETH_SetMACConfig+0x110>
 8002ef6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002ef8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002f00:	2a01      	cmp	r2, #1
 8002f02:	d101      	bne.n	8002f08 <ETH_SetMACConfig+0x120>
 8002f04:	2204      	movs	r2, #4
 8002f06:	e000      	b.n	8002f0a <ETH_SetMACConfig+0x122>
 8002f08:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f0a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002f12:	2a01      	cmp	r2, #1
 8002f14:	d101      	bne.n	8002f1a <ETH_SetMACConfig+0x132>
 8002f16:	2202      	movs	r2, #2
 8002f18:	e000      	b.n	8002f1c <ETH_SetMACConfig+0x134>
 8002f1a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f34:	2001      	movs	r0, #1
 8002f36:	f7fe fb51 	bl	80015dc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	619a      	str	r2, [r3, #24]
}
 8002f42:	bf00      	nop
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	fd20810f 	.word	0xfd20810f

08002f50 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	4b3d      	ldr	r3, [pc, #244]	@ (8003060 <ETH_SetDMAConfig+0x110>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	7b1b      	ldrb	r3, [r3, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d102      	bne.n	8002f7c <ETH_SetDMAConfig+0x2c>
 8002f76:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002f7a:	e000      	b.n	8002f7e <ETH_SetDMAConfig+0x2e>
 8002f7c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	7b5b      	ldrb	r3, [r3, #13]
 8002f82:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f84:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	7f52      	ldrb	r2, [r2, #29]
 8002f8a:	2a00      	cmp	r2, #0
 8002f8c:	d102      	bne.n	8002f94 <ETH_SetDMAConfig+0x44>
 8002f8e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002f92:	e000      	b.n	8002f96 <ETH_SetDMAConfig+0x46>
 8002f94:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002f96:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	7b9b      	ldrb	r3, [r3, #14]
 8002f9c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002f9e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002fa4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	7f1b      	ldrb	r3, [r3, #28]
 8002faa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002fac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	7f9b      	ldrb	r3, [r3, #30]
 8002fb2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002fb4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002fba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fc2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	f7fe faf8 	bl	80015dc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	791b      	ldrb	r3, [r3, #4]
 8002ffe:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003004:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800300a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003010:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003018:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800301a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003020:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003022:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003028:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003032:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003036:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003044:	2001      	movs	r0, #1
 8003046:	f7fe fac9 	bl	80015dc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003052:	461a      	mov	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6013      	str	r3, [r2, #0]
}
 8003058:	bf00      	nop
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	f8de3f23 	.word	0xf8de3f23

08003064 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b0a6      	sub	sp, #152	@ 0x98
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800306c:	2301      	movs	r3, #1
 800306e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003072:	2301      	movs	r3, #1
 8003074:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003078:	2300      	movs	r3, #0
 800307a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800307c:	2300      	movs	r3, #0
 800307e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003082:	2301      	movs	r3, #1
 8003084:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003088:	2300      	movs	r3, #0
 800308a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800308e:	2301      	movs	r3, #1
 8003090:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003094:	2301      	movs	r3, #1
 8003096:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800309a:	2300      	movs	r3, #0
 800309c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80030a6:	2300      	movs	r3, #0
 80030a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80030aa:	2300      	movs	r3, #0
 80030ac:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80030b4:	2300      	movs	r3, #0
 80030b6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80030ba:	2300      	movs	r3, #0
 80030bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80030c0:	2300      	movs	r3, #0
 80030c2:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80030c6:	2300      	movs	r3, #0
 80030c8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80030cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80030d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80030d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80030d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80030d8:	2300      	movs	r3, #0
 80030da:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80030de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80030e2:	4619      	mov	r1, r3
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7ff fe7f 	bl	8002de8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80030ea:	2301      	movs	r3, #1
 80030ec:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80030ee:	2301      	movs	r3, #1
 80030f0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80030f2:	2301      	movs	r3, #1
 80030f4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80030f8:	2301      	movs	r3, #1
 80030fa:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80030fc:	2300      	movs	r3, #0
 80030fe:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003100:	2300      	movs	r3, #0
 8003102:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003106:	2300      	movs	r3, #0
 8003108:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800310c:	2300      	movs	r3, #0
 800310e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003110:	2301      	movs	r3, #1
 8003112:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003116:	2301      	movs	r3, #1
 8003118:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800311a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800311e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003120:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003124:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003126:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800312a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800312c:	2301      	movs	r3, #1
 800312e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003132:	2300      	movs	r3, #0
 8003134:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003136:	2300      	movs	r3, #0
 8003138:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800313a:	f107 0308 	add.w	r3, r7, #8
 800313e:	4619      	mov	r1, r3
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff ff05 	bl	8002f50 <ETH_SetDMAConfig>
}
 8003146:	bf00      	nop
 8003148:	3798      	adds	r7, #152	@ 0x98
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003150:	b480      	push	{r7}
 8003152:	b087      	sub	sp, #28
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3305      	adds	r3, #5
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	021b      	lsls	r3, r3, #8
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	3204      	adds	r2, #4
 8003168:	7812      	ldrb	r2, [r2, #0]
 800316a:	4313      	orrs	r3, r2
 800316c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	4b11      	ldr	r3, [pc, #68]	@ (80031b8 <ETH_MACAddressConfig+0x68>)
 8003172:	4413      	add	r3, r2
 8003174:	461a      	mov	r2, r3
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3303      	adds	r3, #3
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	061a      	lsls	r2, r3, #24
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3302      	adds	r3, #2
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	041b      	lsls	r3, r3, #16
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3301      	adds	r3, #1
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	021b      	lsls	r3, r3, #8
 8003194:	4313      	orrs	r3, r2
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	7812      	ldrb	r2, [r2, #0]
 800319a:	4313      	orrs	r3, r2
 800319c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	4b06      	ldr	r3, [pc, #24]	@ (80031bc <ETH_MACAddressConfig+0x6c>)
 80031a2:	4413      	add	r3, r2
 80031a4:	461a      	mov	r2, r3
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	6013      	str	r3, [r2, #0]
}
 80031aa:	bf00      	nop
 80031ac:	371c      	adds	r7, #28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	40028040 	.word	0x40028040
 80031bc:	40028044 	.word	0x40028044

080031c0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80031c8:	2300      	movs	r3, #0
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	e03e      	b.n	800324c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68d9      	ldr	r1, [r3, #12]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4613      	mov	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	440b      	add	r3, r1
 80031de:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2200      	movs	r2, #0
 80031ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2200      	movs	r2, #0
 80031f0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2200      	movs	r2, #0
 80031f6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80031f8:	68b9      	ldr	r1, [r7, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	3206      	adds	r2, #6
 8003200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d80c      	bhi.n	8003230 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68d9      	ldr	r1, [r3, #12]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	4613      	mov	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	440b      	add	r3, r1
 8003228:	461a      	mov	r2, r3
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	60da      	str	r2, [r3, #12]
 800322e:	e004      	b.n	800323a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	461a      	mov	r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	3301      	adds	r3, #1
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2b03      	cmp	r3, #3
 8003250:	d9bd      	bls.n	80031ce <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003264:	611a      	str	r2, [r3, #16]
}
 8003266:	bf00      	nop
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003272:	b480      	push	{r7}
 8003274:	b085      	sub	sp, #20
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	e048      	b.n	8003312 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6919      	ldr	r1, [r3, #16]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	4613      	mov	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	440b      	add	r3, r1
 8003290:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2200      	movs	r2, #0
 800329c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	2200      	movs	r2, #0
 80032a2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2200      	movs	r2, #0
 80032a8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2200      	movs	r2, #0
 80032ae:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2200      	movs	r2, #0
 80032b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80032bc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80032d6:	68b9      	ldr	r1, [r7, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	3212      	adds	r2, #18
 80032de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d80c      	bhi.n	8003302 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6919      	ldr	r1, [r3, #16]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	440b      	add	r3, r1
 80032fa:	461a      	mov	r2, r3
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	60da      	str	r2, [r3, #12]
 8003300:	e004      	b.n	800330c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	461a      	mov	r2, r3
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	3301      	adds	r3, #1
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2b03      	cmp	r3, #3
 8003316:	d9b3      	bls.n	8003280 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691a      	ldr	r2, [r3, #16]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003342:	60da      	str	r2, [r3, #12]
}
 8003344:	bf00      	nop
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003350:	b480      	push	{r7}
 8003352:	b091      	sub	sp, #68	@ 0x44
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	3318      	adds	r3, #24
 8003360:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800336e:	2300      	movs	r3, #0
 8003370:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003374:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800337a:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8003382:	2300      	movs	r3, #0
 8003384:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800338e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003392:	d007      	beq.n	80033a4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003398:	3304      	adds	r3, #4
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80033a4:	2302      	movs	r3, #2
 80033a6:	e115      	b.n	80035d4 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 80033a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033aa:	3301      	adds	r3, #1
 80033ac:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80033ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	461a      	mov	r2, r3
 80033b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80033b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80033c0:	f023 031f 	bic.w	r3, r3, #31
 80033c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033c6:	6852      	ldr	r2, [r2, #4]
 80033c8:	431a      	orrs	r2, r3
 80033ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033cc:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d008      	beq.n	80033ec <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80033da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ea:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0320 	and.w	r3, r3, #32
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d008      	beq.n	800340a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80033f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	431a      	orrs	r2, r3
 8003406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003408:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b00      	cmp	r3, #0
 8003414:	d005      	beq.n	8003422 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800341e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003420:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800342a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800342c:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800342e:	e084      	b.n	800353a <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800343a:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d006      	beq.n	8003450 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800344a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	e005      	b.n	800345c <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345a:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800345c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800345e:	3301      	adds	r3, #1
 8003460:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003464:	2b03      	cmp	r3, #3
 8003466:	d902      	bls.n	800346e <ETH_Prepare_Tx_Descriptors+0x11e>
 8003468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800346a:	3b04      	subs	r3, #4
 800346c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800346e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003470:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003476:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003480:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003484:	d007      	beq.n	8003496 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800348a:	3304      	adds	r3, #4
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d029      	beq.n	80034ea <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800349a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800349e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034a2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80034a4:	2300      	movs	r3, #0
 80034a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034a8:	e019      	b.n	80034de <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 80034aa:	f3bf 8f5f 	dmb	sy
}
 80034ae:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80034b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80034b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ba:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80034bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034be:	3301      	adds	r3, #1
 80034c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d902      	bls.n	80034ce <ETH_Prepare_Tx_Descriptors+0x17e>
 80034c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034ca:	3b04      	subs	r3, #4
 80034cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80034ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034d6:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80034d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034da:	3301      	adds	r3, #1
 80034dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80034e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d3e1      	bcc.n	80034aa <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 80034e6:	2302      	movs	r3, #2
 80034e8:	e074      	b.n	80035d4 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80034ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80034f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f4:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 80034f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f8:	3301      	adds	r3, #1
 80034fa:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80034fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	461a      	mov	r2, r3
 8003508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350a:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800350c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8003514:	f023 031f 	bic.w	r3, r3, #31
 8003518:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800351a:	6852      	ldr	r2, [r2, #4]
 800351c:	431a      	orrs	r2, r3
 800351e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003520:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003524:	3301      	adds	r3, #1
 8003526:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003528:	f3bf 8f5f 	dmb	sy
}
 800352c:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800352e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003538:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800353a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	f47f af76 	bne.w	8003430 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d006      	beq.n	8003558 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800354a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	e005      	b.n	8003564 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003562:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800356c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800356e:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003572:	6a3a      	ldr	r2, [r7, #32]
 8003574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003578:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800357a:	f3bf 8f5f 	dmb	sy
}
 800357e:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358a:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800358c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003590:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003594:	3304      	adds	r3, #4
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800359c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035a0:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80035a2:	f3ef 8310 	mrs	r3, PRIMASK
 80035a6:	613b      	str	r3, [r7, #16]
  return(result);
 80035a8:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80035aa:	61fb      	str	r3, [r7, #28]
 80035ac:	2301      	movs	r3, #1
 80035ae:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f383 8810 	msr	PRIMASK, r3
}
 80035b6:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80035b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035be:	4413      	add	r3, r2
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	f383 8810 	msr	PRIMASK, r3
}
 80035d0:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3744      	adds	r7, #68	@ 0x44
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b089      	sub	sp, #36	@ 0x24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035f6:	2300      	movs	r3, #0
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	e16b      	b.n	80038d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035fc:	2201      	movs	r2, #1
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4013      	ands	r3, r2
 800360e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	429a      	cmp	r2, r3
 8003616:	f040 815a 	bne.w	80038ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	2b01      	cmp	r3, #1
 8003624:	d005      	beq.n	8003632 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800362e:	2b02      	cmp	r3, #2
 8003630:	d130      	bne.n	8003694 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	2203      	movs	r2, #3
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	43db      	mvns	r3, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4013      	ands	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4313      	orrs	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003668:	2201      	movs	r2, #1
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	091b      	lsrs	r3, r3, #4
 800367e:	f003 0201 	and.w	r2, r3, #1
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4313      	orrs	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f003 0303 	and.w	r3, r3, #3
 800369c:	2b03      	cmp	r3, #3
 800369e:	d017      	beq.n	80036d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	2203      	movs	r2, #3
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43db      	mvns	r3, r3
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4013      	ands	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 0303 	and.w	r3, r3, #3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d123      	bne.n	8003724 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	08da      	lsrs	r2, r3, #3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3208      	adds	r2, #8
 80036e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	220f      	movs	r2, #15
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4013      	ands	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4313      	orrs	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	08da      	lsrs	r2, r3, #3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3208      	adds	r2, #8
 800371e:	69b9      	ldr	r1, [r7, #24]
 8003720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	2203      	movs	r2, #3
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	43db      	mvns	r3, r3
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4013      	ands	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 0203 	and.w	r2, r3, #3
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4313      	orrs	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80b4 	beq.w	80038ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	4b60      	ldr	r3, [pc, #384]	@ (80038ec <HAL_GPIO_Init+0x30c>)
 800376c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376e:	4a5f      	ldr	r2, [pc, #380]	@ (80038ec <HAL_GPIO_Init+0x30c>)
 8003770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003774:	6453      	str	r3, [r2, #68]	@ 0x44
 8003776:	4b5d      	ldr	r3, [pc, #372]	@ (80038ec <HAL_GPIO_Init+0x30c>)
 8003778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800377a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003782:	4a5b      	ldr	r2, [pc, #364]	@ (80038f0 <HAL_GPIO_Init+0x310>)
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	089b      	lsrs	r3, r3, #2
 8003788:	3302      	adds	r3, #2
 800378a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800378e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	220f      	movs	r2, #15
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	43db      	mvns	r3, r3
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	4013      	ands	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a52      	ldr	r2, [pc, #328]	@ (80038f4 <HAL_GPIO_Init+0x314>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d02b      	beq.n	8003806 <HAL_GPIO_Init+0x226>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a51      	ldr	r2, [pc, #324]	@ (80038f8 <HAL_GPIO_Init+0x318>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d025      	beq.n	8003802 <HAL_GPIO_Init+0x222>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a50      	ldr	r2, [pc, #320]	@ (80038fc <HAL_GPIO_Init+0x31c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d01f      	beq.n	80037fe <HAL_GPIO_Init+0x21e>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a4f      	ldr	r2, [pc, #316]	@ (8003900 <HAL_GPIO_Init+0x320>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d019      	beq.n	80037fa <HAL_GPIO_Init+0x21a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a4e      	ldr	r2, [pc, #312]	@ (8003904 <HAL_GPIO_Init+0x324>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d013      	beq.n	80037f6 <HAL_GPIO_Init+0x216>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a4d      	ldr	r2, [pc, #308]	@ (8003908 <HAL_GPIO_Init+0x328>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00d      	beq.n	80037f2 <HAL_GPIO_Init+0x212>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a4c      	ldr	r2, [pc, #304]	@ (800390c <HAL_GPIO_Init+0x32c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d007      	beq.n	80037ee <HAL_GPIO_Init+0x20e>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a4b      	ldr	r2, [pc, #300]	@ (8003910 <HAL_GPIO_Init+0x330>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d101      	bne.n	80037ea <HAL_GPIO_Init+0x20a>
 80037e6:	2307      	movs	r3, #7
 80037e8:	e00e      	b.n	8003808 <HAL_GPIO_Init+0x228>
 80037ea:	2308      	movs	r3, #8
 80037ec:	e00c      	b.n	8003808 <HAL_GPIO_Init+0x228>
 80037ee:	2306      	movs	r3, #6
 80037f0:	e00a      	b.n	8003808 <HAL_GPIO_Init+0x228>
 80037f2:	2305      	movs	r3, #5
 80037f4:	e008      	b.n	8003808 <HAL_GPIO_Init+0x228>
 80037f6:	2304      	movs	r3, #4
 80037f8:	e006      	b.n	8003808 <HAL_GPIO_Init+0x228>
 80037fa:	2303      	movs	r3, #3
 80037fc:	e004      	b.n	8003808 <HAL_GPIO_Init+0x228>
 80037fe:	2302      	movs	r3, #2
 8003800:	e002      	b.n	8003808 <HAL_GPIO_Init+0x228>
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <HAL_GPIO_Init+0x228>
 8003806:	2300      	movs	r3, #0
 8003808:	69fa      	ldr	r2, [r7, #28]
 800380a:	f002 0203 	and.w	r2, r2, #3
 800380e:	0092      	lsls	r2, r2, #2
 8003810:	4093      	lsls	r3, r2
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4313      	orrs	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003818:	4935      	ldr	r1, [pc, #212]	@ (80038f0 <HAL_GPIO_Init+0x310>)
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	089b      	lsrs	r3, r3, #2
 800381e:	3302      	adds	r3, #2
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003826:	4b3b      	ldr	r3, [pc, #236]	@ (8003914 <HAL_GPIO_Init+0x334>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	43db      	mvns	r3, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4013      	ands	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	4313      	orrs	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800384a:	4a32      	ldr	r2, [pc, #200]	@ (8003914 <HAL_GPIO_Init+0x334>)
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003850:	4b30      	ldr	r3, [pc, #192]	@ (8003914 <HAL_GPIO_Init+0x334>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	43db      	mvns	r3, r3
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4013      	ands	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003874:	4a27      	ldr	r2, [pc, #156]	@ (8003914 <HAL_GPIO_Init+0x334>)
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800387a:	4b26      	ldr	r3, [pc, #152]	@ (8003914 <HAL_GPIO_Init+0x334>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	43db      	mvns	r3, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4013      	ands	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800389e:	4a1d      	ldr	r2, [pc, #116]	@ (8003914 <HAL_GPIO_Init+0x334>)
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003914 <HAL_GPIO_Init+0x334>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	43db      	mvns	r3, r3
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4013      	ands	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038c8:	4a12      	ldr	r2, [pc, #72]	@ (8003914 <HAL_GPIO_Init+0x334>)
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	3301      	adds	r3, #1
 80038d2:	61fb      	str	r3, [r7, #28]
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	2b0f      	cmp	r3, #15
 80038d8:	f67f ae90 	bls.w	80035fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038dc:	bf00      	nop
 80038de:	bf00      	nop
 80038e0:	3724      	adds	r7, #36	@ 0x24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	40023800 	.word	0x40023800
 80038f0:	40013800 	.word	0x40013800
 80038f4:	40020000 	.word	0x40020000
 80038f8:	40020400 	.word	0x40020400
 80038fc:	40020800 	.word	0x40020800
 8003900:	40020c00 	.word	0x40020c00
 8003904:	40021000 	.word	0x40021000
 8003908:	40021400 	.word	0x40021400
 800390c:	40021800 	.word	0x40021800
 8003910:	40021c00 	.word	0x40021c00
 8003914:	40013c00 	.word	0x40013c00

08003918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	807b      	strh	r3, [r7, #2]
 8003924:	4613      	mov	r3, r2
 8003926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003928:	787b      	ldrb	r3, [r7, #1]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800392e:	887a      	ldrh	r2, [r7, #2]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003934:	e003      	b.n	800393e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003936:	887b      	ldrh	r3, [r7, #2]
 8003938:	041a      	lsls	r2, r3, #16
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	619a      	str	r2, [r3, #24]
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
	...

0800394c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003956:	4b08      	ldr	r3, [pc, #32]	@ (8003978 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003958:	695a      	ldr	r2, [r3, #20]
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	4013      	ands	r3, r2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d006      	beq.n	8003970 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003962:	4a05      	ldr	r2, [pc, #20]	@ (8003978 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003964:	88fb      	ldrh	r3, [r7, #6]
 8003966:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003968:	88fb      	ldrh	r3, [r7, #6]
 800396a:	4618      	mov	r0, r3
 800396c:	f000 f806 	bl	800397c <HAL_GPIO_EXTI_Callback>
  }
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40013c00 	.word	0x40013c00

0800397c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
	...

08003994 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e267      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d075      	beq.n	8003a9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80039b2:	4b88      	ldr	r3, [pc, #544]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 030c 	and.w	r3, r3, #12
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d00c      	beq.n	80039d8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039be:	4b85      	ldr	r3, [pc, #532]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	d112      	bne.n	80039f0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ca:	4b82      	ldr	r3, [pc, #520]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039d6:	d10b      	bne.n	80039f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d8:	4b7e      	ldr	r3, [pc, #504]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d05b      	beq.n	8003a9c <HAL_RCC_OscConfig+0x108>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d157      	bne.n	8003a9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e242      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039f8:	d106      	bne.n	8003a08 <HAL_RCC_OscConfig+0x74>
 80039fa:	4b76      	ldr	r3, [pc, #472]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a75      	ldr	r2, [pc, #468]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	e01d      	b.n	8003a44 <HAL_RCC_OscConfig+0xb0>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a10:	d10c      	bne.n	8003a2c <HAL_RCC_OscConfig+0x98>
 8003a12:	4b70      	ldr	r3, [pc, #448]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a6f      	ldr	r2, [pc, #444]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	4b6d      	ldr	r3, [pc, #436]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a6c      	ldr	r2, [pc, #432]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	e00b      	b.n	8003a44 <HAL_RCC_OscConfig+0xb0>
 8003a2c:	4b69      	ldr	r3, [pc, #420]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a68      	ldr	r2, [pc, #416]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	4b66      	ldr	r3, [pc, #408]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a65      	ldr	r2, [pc, #404]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d013      	beq.n	8003a74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4c:	f7fd fdba 	bl	80015c4 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a54:	f7fd fdb6 	bl	80015c4 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b64      	cmp	r3, #100	@ 0x64
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e207      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a66:	4b5b      	ldr	r3, [pc, #364]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0f0      	beq.n	8003a54 <HAL_RCC_OscConfig+0xc0>
 8003a72:	e014      	b.n	8003a9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a74:	f7fd fda6 	bl	80015c4 <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a7c:	f7fd fda2 	bl	80015c4 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b64      	cmp	r3, #100	@ 0x64
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e1f3      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a8e:	4b51      	ldr	r3, [pc, #324]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1f0      	bne.n	8003a7c <HAL_RCC_OscConfig+0xe8>
 8003a9a:	e000      	b.n	8003a9e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d063      	beq.n	8003b72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003aaa:	4b4a      	ldr	r3, [pc, #296]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00b      	beq.n	8003ace <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ab6:	4b47      	ldr	r3, [pc, #284]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d11c      	bne.n	8003afc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ac2:	4b44      	ldr	r3, [pc, #272]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d116      	bne.n	8003afc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ace:	4b41      	ldr	r3, [pc, #260]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d005      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x152>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d001      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e1c7      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	4937      	ldr	r1, [pc, #220]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003afa:	e03a      	b.n	8003b72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d020      	beq.n	8003b46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b04:	4b34      	ldr	r3, [pc, #208]	@ (8003bd8 <HAL_RCC_OscConfig+0x244>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0a:	f7fd fd5b 	bl	80015c4 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b12:	f7fd fd57 	bl	80015c4 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e1a8      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b24:	4b2b      	ldr	r3, [pc, #172]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0f0      	beq.n	8003b12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b30:	4b28      	ldr	r3, [pc, #160]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4925      	ldr	r1, [pc, #148]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	600b      	str	r3, [r1, #0]
 8003b44:	e015      	b.n	8003b72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b46:	4b24      	ldr	r3, [pc, #144]	@ (8003bd8 <HAL_RCC_OscConfig+0x244>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4c:	f7fd fd3a 	bl	80015c4 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b54:	f7fd fd36 	bl	80015c4 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e187      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b66:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f0      	bne.n	8003b54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d036      	beq.n	8003bec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d016      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b86:	4b15      	ldr	r3, [pc, #84]	@ (8003bdc <HAL_RCC_OscConfig+0x248>)
 8003b88:	2201      	movs	r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8c:	f7fd fd1a 	bl	80015c4 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b94:	f7fd fd16 	bl	80015c4 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e167      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003ba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0f0      	beq.n	8003b94 <HAL_RCC_OscConfig+0x200>
 8003bb2:	e01b      	b.n	8003bec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bb4:	4b09      	ldr	r3, [pc, #36]	@ (8003bdc <HAL_RCC_OscConfig+0x248>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bba:	f7fd fd03 	bl	80015c4 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc0:	e00e      	b.n	8003be0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bc2:	f7fd fcff 	bl	80015c4 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d907      	bls.n	8003be0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e150      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	42470000 	.word	0x42470000
 8003bdc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be0:	4b88      	ldr	r3, [pc, #544]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003be2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1ea      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 8097 	beq.w	8003d28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bfe:	4b81      	ldr	r3, [pc, #516]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10f      	bne.n	8003c2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60bb      	str	r3, [r7, #8]
 8003c0e:	4b7d      	ldr	r3, [pc, #500]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c12:	4a7c      	ldr	r2, [pc, #496]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c1a:	4b7a      	ldr	r3, [pc, #488]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c22:	60bb      	str	r3, [r7, #8]
 8003c24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c26:	2301      	movs	r3, #1
 8003c28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c2a:	4b77      	ldr	r3, [pc, #476]	@ (8003e08 <HAL_RCC_OscConfig+0x474>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d118      	bne.n	8003c68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c36:	4b74      	ldr	r3, [pc, #464]	@ (8003e08 <HAL_RCC_OscConfig+0x474>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a73      	ldr	r2, [pc, #460]	@ (8003e08 <HAL_RCC_OscConfig+0x474>)
 8003c3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c42:	f7fd fcbf 	bl	80015c4 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c4a:	f7fd fcbb 	bl	80015c4 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e10c      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5c:	4b6a      	ldr	r3, [pc, #424]	@ (8003e08 <HAL_RCC_OscConfig+0x474>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0f0      	beq.n	8003c4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d106      	bne.n	8003c7e <HAL_RCC_OscConfig+0x2ea>
 8003c70:	4b64      	ldr	r3, [pc, #400]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c74:	4a63      	ldr	r2, [pc, #396]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c76:	f043 0301 	orr.w	r3, r3, #1
 8003c7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c7c:	e01c      	b.n	8003cb8 <HAL_RCC_OscConfig+0x324>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	2b05      	cmp	r3, #5
 8003c84:	d10c      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x30c>
 8003c86:	4b5f      	ldr	r3, [pc, #380]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c8a:	4a5e      	ldr	r2, [pc, #376]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c8c:	f043 0304 	orr.w	r3, r3, #4
 8003c90:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c92:	4b5c      	ldr	r3, [pc, #368]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c96:	4a5b      	ldr	r2, [pc, #364]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c98:	f043 0301 	orr.w	r3, r3, #1
 8003c9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c9e:	e00b      	b.n	8003cb8 <HAL_RCC_OscConfig+0x324>
 8003ca0:	4b58      	ldr	r3, [pc, #352]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca4:	4a57      	ldr	r2, [pc, #348]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003ca6:	f023 0301 	bic.w	r3, r3, #1
 8003caa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cac:	4b55      	ldr	r3, [pc, #340]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb0:	4a54      	ldr	r2, [pc, #336]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003cb2:	f023 0304 	bic.w	r3, r3, #4
 8003cb6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d015      	beq.n	8003cec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc0:	f7fd fc80 	bl	80015c4 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc6:	e00a      	b.n	8003cde <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc8:	f7fd fc7c 	bl	80015c4 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e0cb      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cde:	4b49      	ldr	r3, [pc, #292]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0ee      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x334>
 8003cea:	e014      	b.n	8003d16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cec:	f7fd fc6a 	bl	80015c4 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf2:	e00a      	b.n	8003d0a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf4:	f7fd fc66 	bl	80015c4 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e0b5      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d0a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1ee      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d16:	7dfb      	ldrb	r3, [r7, #23]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d105      	bne.n	8003d28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d1c:	4b39      	ldr	r3, [pc, #228]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d20:	4a38      	ldr	r2, [pc, #224]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003d22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d26:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 80a1 	beq.w	8003e74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d32:	4b34      	ldr	r3, [pc, #208]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 030c 	and.w	r3, r3, #12
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d05c      	beq.n	8003df8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d141      	bne.n	8003dca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d46:	4b31      	ldr	r3, [pc, #196]	@ (8003e0c <HAL_RCC_OscConfig+0x478>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4c:	f7fd fc3a 	bl	80015c4 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d54:	f7fd fc36 	bl	80015c4 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e087      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d66:	4b27      	ldr	r3, [pc, #156]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69da      	ldr	r2, [r3, #28]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d80:	019b      	lsls	r3, r3, #6
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d88:	085b      	lsrs	r3, r3, #1
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	041b      	lsls	r3, r3, #16
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d94:	061b      	lsls	r3, r3, #24
 8003d96:	491b      	ldr	r1, [pc, #108]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8003e0c <HAL_RCC_OscConfig+0x478>)
 8003d9e:	2201      	movs	r2, #1
 8003da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da2:	f7fd fc0f 	bl	80015c4 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003daa:	f7fd fc0b 	bl	80015c4 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e05c      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dbc:	4b11      	ldr	r3, [pc, #68]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0f0      	beq.n	8003daa <HAL_RCC_OscConfig+0x416>
 8003dc8:	e054      	b.n	8003e74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dca:	4b10      	ldr	r3, [pc, #64]	@ (8003e0c <HAL_RCC_OscConfig+0x478>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd0:	f7fd fbf8 	bl	80015c4 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd8:	f7fd fbf4 	bl	80015c4 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e045      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dea:	4b06      	ldr	r3, [pc, #24]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f0      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x444>
 8003df6:	e03d      	b.n	8003e74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d107      	bne.n	8003e10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e038      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
 8003e04:	40023800 	.word	0x40023800
 8003e08:	40007000 	.word	0x40007000
 8003e0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e10:	4b1b      	ldr	r3, [pc, #108]	@ (8003e80 <HAL_RCC_OscConfig+0x4ec>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d028      	beq.n	8003e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d121      	bne.n	8003e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d11a      	bne.n	8003e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e40:	4013      	ands	r3, r2
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d111      	bne.n	8003e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e56:	085b      	lsrs	r3, r3, #1
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d107      	bne.n	8003e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e000      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40023800 	.word	0x40023800

08003e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e0cc      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e98:	4b68      	ldr	r3, [pc, #416]	@ (800403c <HAL_RCC_ClockConfig+0x1b8>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d90c      	bls.n	8003ec0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea6:	4b65      	ldr	r3, [pc, #404]	@ (800403c <HAL_RCC_ClockConfig+0x1b8>)
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eae:	4b63      	ldr	r3, [pc, #396]	@ (800403c <HAL_RCC_ClockConfig+0x1b8>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d001      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e0b8      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d020      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ed8:	4b59      	ldr	r3, [pc, #356]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	4a58      	ldr	r2, [pc, #352]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003ede:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ee2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0308 	and.w	r3, r3, #8
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ef0:	4b53      	ldr	r3, [pc, #332]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	4a52      	ldr	r2, [pc, #328]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003efa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003efc:	4b50      	ldr	r3, [pc, #320]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	494d      	ldr	r1, [pc, #308]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d044      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d107      	bne.n	8003f32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f22:	4b47      	ldr	r3, [pc, #284]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d119      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e07f      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d003      	beq.n	8003f42 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	d107      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f42:	4b3f      	ldr	r3, [pc, #252]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d109      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e06f      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f52:	4b3b      	ldr	r3, [pc, #236]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e067      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f62:	4b37      	ldr	r3, [pc, #220]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f023 0203 	bic.w	r2, r3, #3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	4934      	ldr	r1, [pc, #208]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f74:	f7fd fb26 	bl	80015c4 <HAL_GetTick>
 8003f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f7a:	e00a      	b.n	8003f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f7c:	f7fd fb22 	bl	80015c4 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e04f      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f92:	4b2b      	ldr	r3, [pc, #172]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 020c 	and.w	r2, r3, #12
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d1eb      	bne.n	8003f7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fa4:	4b25      	ldr	r3, [pc, #148]	@ (800403c <HAL_RCC_ClockConfig+0x1b8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d20c      	bcs.n	8003fcc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb2:	4b22      	ldr	r3, [pc, #136]	@ (800403c <HAL_RCC_ClockConfig+0x1b8>)
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fba:	4b20      	ldr	r3, [pc, #128]	@ (800403c <HAL_RCC_ClockConfig+0x1b8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d001      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e032      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d008      	beq.n	8003fea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fd8:	4b19      	ldr	r3, [pc, #100]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	4916      	ldr	r1, [pc, #88]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d009      	beq.n	800400a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ff6:	4b12      	ldr	r3, [pc, #72]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	490e      	ldr	r1, [pc, #56]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8004006:	4313      	orrs	r3, r2
 8004008:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800400a:	f000 f821 	bl	8004050 <HAL_RCC_GetSysClockFreq>
 800400e:	4602      	mov	r2, r0
 8004010:	4b0b      	ldr	r3, [pc, #44]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	091b      	lsrs	r3, r3, #4
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	490a      	ldr	r1, [pc, #40]	@ (8004044 <HAL_RCC_ClockConfig+0x1c0>)
 800401c:	5ccb      	ldrb	r3, [r1, r3]
 800401e:	fa22 f303 	lsr.w	r3, r2, r3
 8004022:	4a09      	ldr	r2, [pc, #36]	@ (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8004024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004026:	4b09      	ldr	r3, [pc, #36]	@ (800404c <HAL_RCC_ClockConfig+0x1c8>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f7fd fa86 	bl	800153c <HAL_InitTick>

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40023c00 	.word	0x40023c00
 8004040:	40023800 	.word	0x40023800
 8004044:	08015738 	.word	0x08015738
 8004048:	20000000 	.word	0x20000000
 800404c:	20000004 	.word	0x20000004

08004050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004054:	b090      	sub	sp, #64	@ 0x40
 8004056:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004068:	4b59      	ldr	r3, [pc, #356]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f003 030c 	and.w	r3, r3, #12
 8004070:	2b08      	cmp	r3, #8
 8004072:	d00d      	beq.n	8004090 <HAL_RCC_GetSysClockFreq+0x40>
 8004074:	2b08      	cmp	r3, #8
 8004076:	f200 80a1 	bhi.w	80041bc <HAL_RCC_GetSysClockFreq+0x16c>
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <HAL_RCC_GetSysClockFreq+0x34>
 800407e:	2b04      	cmp	r3, #4
 8004080:	d003      	beq.n	800408a <HAL_RCC_GetSysClockFreq+0x3a>
 8004082:	e09b      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004084:	4b53      	ldr	r3, [pc, #332]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004086:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004088:	e09b      	b.n	80041c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800408a:	4b53      	ldr	r3, [pc, #332]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800408c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800408e:	e098      	b.n	80041c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004090:	4b4f      	ldr	r3, [pc, #316]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004098:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800409a:	4b4d      	ldr	r3, [pc, #308]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d028      	beq.n	80040f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040a6:	4b4a      	ldr	r3, [pc, #296]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	099b      	lsrs	r3, r3, #6
 80040ac:	2200      	movs	r2, #0
 80040ae:	623b      	str	r3, [r7, #32]
 80040b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80040b8:	2100      	movs	r1, #0
 80040ba:	4b47      	ldr	r3, [pc, #284]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80040bc:	fb03 f201 	mul.w	r2, r3, r1
 80040c0:	2300      	movs	r3, #0
 80040c2:	fb00 f303 	mul.w	r3, r0, r3
 80040c6:	4413      	add	r3, r2
 80040c8:	4a43      	ldr	r2, [pc, #268]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80040ca:	fba0 1202 	umull	r1, r2, r0, r2
 80040ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040d0:	460a      	mov	r2, r1
 80040d2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80040d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040d6:	4413      	add	r3, r2
 80040d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040dc:	2200      	movs	r2, #0
 80040de:	61bb      	str	r3, [r7, #24]
 80040e0:	61fa      	str	r2, [r7, #28]
 80040e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80040ea:	f7fc fa7d 	bl	80005e8 <__aeabi_uldivmod>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4613      	mov	r3, r2
 80040f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040f6:	e053      	b.n	80041a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040f8:	4b35      	ldr	r3, [pc, #212]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	099b      	lsrs	r3, r3, #6
 80040fe:	2200      	movs	r2, #0
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	617a      	str	r2, [r7, #20]
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800410a:	f04f 0b00 	mov.w	fp, #0
 800410e:	4652      	mov	r2, sl
 8004110:	465b      	mov	r3, fp
 8004112:	f04f 0000 	mov.w	r0, #0
 8004116:	f04f 0100 	mov.w	r1, #0
 800411a:	0159      	lsls	r1, r3, #5
 800411c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004120:	0150      	lsls	r0, r2, #5
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	ebb2 080a 	subs.w	r8, r2, sl
 800412a:	eb63 090b 	sbc.w	r9, r3, fp
 800412e:	f04f 0200 	mov.w	r2, #0
 8004132:	f04f 0300 	mov.w	r3, #0
 8004136:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800413a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800413e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004142:	ebb2 0408 	subs.w	r4, r2, r8
 8004146:	eb63 0509 	sbc.w	r5, r3, r9
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	00eb      	lsls	r3, r5, #3
 8004154:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004158:	00e2      	lsls	r2, r4, #3
 800415a:	4614      	mov	r4, r2
 800415c:	461d      	mov	r5, r3
 800415e:	eb14 030a 	adds.w	r3, r4, sl
 8004162:	603b      	str	r3, [r7, #0]
 8004164:	eb45 030b 	adc.w	r3, r5, fp
 8004168:	607b      	str	r3, [r7, #4]
 800416a:	f04f 0200 	mov.w	r2, #0
 800416e:	f04f 0300 	mov.w	r3, #0
 8004172:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004176:	4629      	mov	r1, r5
 8004178:	028b      	lsls	r3, r1, #10
 800417a:	4621      	mov	r1, r4
 800417c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004180:	4621      	mov	r1, r4
 8004182:	028a      	lsls	r2, r1, #10
 8004184:	4610      	mov	r0, r2
 8004186:	4619      	mov	r1, r3
 8004188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800418a:	2200      	movs	r2, #0
 800418c:	60bb      	str	r3, [r7, #8]
 800418e:	60fa      	str	r2, [r7, #12]
 8004190:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004194:	f7fc fa28 	bl	80005e8 <__aeabi_uldivmod>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4613      	mov	r3, r2
 800419e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80041a0:	4b0b      	ldr	r3, [pc, #44]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	0c1b      	lsrs	r3, r3, #16
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	3301      	adds	r3, #1
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80041b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041ba:	e002      	b.n	80041c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041bc:	4b05      	ldr	r3, [pc, #20]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80041be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3740      	adds	r7, #64	@ 0x40
 80041c8:	46bd      	mov	sp, r7
 80041ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ce:	bf00      	nop
 80041d0:	40023800 	.word	0x40023800
 80041d4:	00f42400 	.word	0x00f42400
 80041d8:	017d7840 	.word	0x017d7840

080041dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041e0:	4b03      	ldr	r3, [pc, #12]	@ (80041f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80041e2:	681b      	ldr	r3, [r3, #0]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	20000000 	.word	0x20000000

080041f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041f8:	f7ff fff0 	bl	80041dc <HAL_RCC_GetHCLKFreq>
 80041fc:	4602      	mov	r2, r0
 80041fe:	4b05      	ldr	r3, [pc, #20]	@ (8004214 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	0a9b      	lsrs	r3, r3, #10
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	4903      	ldr	r1, [pc, #12]	@ (8004218 <HAL_RCC_GetPCLK1Freq+0x24>)
 800420a:	5ccb      	ldrb	r3, [r1, r3]
 800420c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004210:	4618      	mov	r0, r3
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40023800 	.word	0x40023800
 8004218:	08015748 	.word	0x08015748

0800421c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004220:	f7ff ffdc 	bl	80041dc <HAL_RCC_GetHCLKFreq>
 8004224:	4602      	mov	r2, r0
 8004226:	4b05      	ldr	r3, [pc, #20]	@ (800423c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	0b5b      	lsrs	r3, r3, #13
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	4903      	ldr	r1, [pc, #12]	@ (8004240 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004232:	5ccb      	ldrb	r3, [r1, r3]
 8004234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004238:	4618      	mov	r0, r3
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40023800 	.word	0x40023800
 8004240:	08015748 	.word	0x08015748

08004244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e041      	b.n	80042da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d106      	bne.n	8004270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fc fe86 	bl	8000f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3304      	adds	r3, #4
 8004280:	4619      	mov	r1, r3
 8004282:	4610      	mov	r0, r2
 8004284:	f000 f95e 	bl	8004544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d001      	beq.n	80042fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e046      	b.n	800438a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a23      	ldr	r2, [pc, #140]	@ (8004398 <HAL_TIM_Base_Start+0xb4>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d022      	beq.n	8004354 <HAL_TIM_Base_Start+0x70>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004316:	d01d      	beq.n	8004354 <HAL_TIM_Base_Start+0x70>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a1f      	ldr	r2, [pc, #124]	@ (800439c <HAL_TIM_Base_Start+0xb8>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d018      	beq.n	8004354 <HAL_TIM_Base_Start+0x70>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a1e      	ldr	r2, [pc, #120]	@ (80043a0 <HAL_TIM_Base_Start+0xbc>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d013      	beq.n	8004354 <HAL_TIM_Base_Start+0x70>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a1c      	ldr	r2, [pc, #112]	@ (80043a4 <HAL_TIM_Base_Start+0xc0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d00e      	beq.n	8004354 <HAL_TIM_Base_Start+0x70>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a1b      	ldr	r2, [pc, #108]	@ (80043a8 <HAL_TIM_Base_Start+0xc4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d009      	beq.n	8004354 <HAL_TIM_Base_Start+0x70>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a19      	ldr	r2, [pc, #100]	@ (80043ac <HAL_TIM_Base_Start+0xc8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d004      	beq.n	8004354 <HAL_TIM_Base_Start+0x70>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a18      	ldr	r2, [pc, #96]	@ (80043b0 <HAL_TIM_Base_Start+0xcc>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d111      	bne.n	8004378 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2b06      	cmp	r3, #6
 8004364:	d010      	beq.n	8004388 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f042 0201 	orr.w	r2, r2, #1
 8004374:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004376:	e007      	b.n	8004388 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	40010000 	.word	0x40010000
 800439c:	40000400 	.word	0x40000400
 80043a0:	40000800 	.word	0x40000800
 80043a4:	40000c00 	.word	0x40000c00
 80043a8:	40010400 	.word	0x40010400
 80043ac:	40014000 	.word	0x40014000
 80043b0:	40001800 	.word	0x40001800

080043b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d101      	bne.n	80043d0 <HAL_TIM_ConfigClockSource+0x1c>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e0b4      	b.n	800453a <HAL_TIM_ConfigClockSource+0x186>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80043ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004408:	d03e      	beq.n	8004488 <HAL_TIM_ConfigClockSource+0xd4>
 800440a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800440e:	f200 8087 	bhi.w	8004520 <HAL_TIM_ConfigClockSource+0x16c>
 8004412:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004416:	f000 8086 	beq.w	8004526 <HAL_TIM_ConfigClockSource+0x172>
 800441a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800441e:	d87f      	bhi.n	8004520 <HAL_TIM_ConfigClockSource+0x16c>
 8004420:	2b70      	cmp	r3, #112	@ 0x70
 8004422:	d01a      	beq.n	800445a <HAL_TIM_ConfigClockSource+0xa6>
 8004424:	2b70      	cmp	r3, #112	@ 0x70
 8004426:	d87b      	bhi.n	8004520 <HAL_TIM_ConfigClockSource+0x16c>
 8004428:	2b60      	cmp	r3, #96	@ 0x60
 800442a:	d050      	beq.n	80044ce <HAL_TIM_ConfigClockSource+0x11a>
 800442c:	2b60      	cmp	r3, #96	@ 0x60
 800442e:	d877      	bhi.n	8004520 <HAL_TIM_ConfigClockSource+0x16c>
 8004430:	2b50      	cmp	r3, #80	@ 0x50
 8004432:	d03c      	beq.n	80044ae <HAL_TIM_ConfigClockSource+0xfa>
 8004434:	2b50      	cmp	r3, #80	@ 0x50
 8004436:	d873      	bhi.n	8004520 <HAL_TIM_ConfigClockSource+0x16c>
 8004438:	2b40      	cmp	r3, #64	@ 0x40
 800443a:	d058      	beq.n	80044ee <HAL_TIM_ConfigClockSource+0x13a>
 800443c:	2b40      	cmp	r3, #64	@ 0x40
 800443e:	d86f      	bhi.n	8004520 <HAL_TIM_ConfigClockSource+0x16c>
 8004440:	2b30      	cmp	r3, #48	@ 0x30
 8004442:	d064      	beq.n	800450e <HAL_TIM_ConfigClockSource+0x15a>
 8004444:	2b30      	cmp	r3, #48	@ 0x30
 8004446:	d86b      	bhi.n	8004520 <HAL_TIM_ConfigClockSource+0x16c>
 8004448:	2b20      	cmp	r3, #32
 800444a:	d060      	beq.n	800450e <HAL_TIM_ConfigClockSource+0x15a>
 800444c:	2b20      	cmp	r3, #32
 800444e:	d867      	bhi.n	8004520 <HAL_TIM_ConfigClockSource+0x16c>
 8004450:	2b00      	cmp	r3, #0
 8004452:	d05c      	beq.n	800450e <HAL_TIM_ConfigClockSource+0x15a>
 8004454:	2b10      	cmp	r3, #16
 8004456:	d05a      	beq.n	800450e <HAL_TIM_ConfigClockSource+0x15a>
 8004458:	e062      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800446a:	f000 f98b 	bl	8004784 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800447c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	609a      	str	r2, [r3, #8]
      break;
 8004486:	e04f      	b.n	8004528 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004498:	f000 f974 	bl	8004784 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689a      	ldr	r2, [r3, #8]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044aa:	609a      	str	r2, [r3, #8]
      break;
 80044ac:	e03c      	b.n	8004528 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ba:	461a      	mov	r2, r3
 80044bc:	f000 f8e8 	bl	8004690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2150      	movs	r1, #80	@ 0x50
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 f941 	bl	800474e <TIM_ITRx_SetConfig>
      break;
 80044cc:	e02c      	b.n	8004528 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044da:	461a      	mov	r2, r3
 80044dc:	f000 f907 	bl	80046ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2160      	movs	r1, #96	@ 0x60
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 f931 	bl	800474e <TIM_ITRx_SetConfig>
      break;
 80044ec:	e01c      	b.n	8004528 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044fa:	461a      	mov	r2, r3
 80044fc:	f000 f8c8 	bl	8004690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2140      	movs	r1, #64	@ 0x40
 8004506:	4618      	mov	r0, r3
 8004508:	f000 f921 	bl	800474e <TIM_ITRx_SetConfig>
      break;
 800450c:	e00c      	b.n	8004528 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4619      	mov	r1, r3
 8004518:	4610      	mov	r0, r2
 800451a:	f000 f918 	bl	800474e <TIM_ITRx_SetConfig>
      break;
 800451e:	e003      	b.n	8004528 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	73fb      	strb	r3, [r7, #15]
      break;
 8004524:	e000      	b.n	8004528 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004526:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004538:	7bfb      	ldrb	r3, [r7, #15]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a43      	ldr	r2, [pc, #268]	@ (8004664 <TIM_Base_SetConfig+0x120>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d013      	beq.n	8004584 <TIM_Base_SetConfig+0x40>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004562:	d00f      	beq.n	8004584 <TIM_Base_SetConfig+0x40>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a40      	ldr	r2, [pc, #256]	@ (8004668 <TIM_Base_SetConfig+0x124>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d00b      	beq.n	8004584 <TIM_Base_SetConfig+0x40>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a3f      	ldr	r2, [pc, #252]	@ (800466c <TIM_Base_SetConfig+0x128>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d007      	beq.n	8004584 <TIM_Base_SetConfig+0x40>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a3e      	ldr	r2, [pc, #248]	@ (8004670 <TIM_Base_SetConfig+0x12c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d003      	beq.n	8004584 <TIM_Base_SetConfig+0x40>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a3d      	ldr	r2, [pc, #244]	@ (8004674 <TIM_Base_SetConfig+0x130>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d108      	bne.n	8004596 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800458a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a32      	ldr	r2, [pc, #200]	@ (8004664 <TIM_Base_SetConfig+0x120>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d02b      	beq.n	80045f6 <TIM_Base_SetConfig+0xb2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045a4:	d027      	beq.n	80045f6 <TIM_Base_SetConfig+0xb2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a2f      	ldr	r2, [pc, #188]	@ (8004668 <TIM_Base_SetConfig+0x124>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d023      	beq.n	80045f6 <TIM_Base_SetConfig+0xb2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a2e      	ldr	r2, [pc, #184]	@ (800466c <TIM_Base_SetConfig+0x128>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d01f      	beq.n	80045f6 <TIM_Base_SetConfig+0xb2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a2d      	ldr	r2, [pc, #180]	@ (8004670 <TIM_Base_SetConfig+0x12c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d01b      	beq.n	80045f6 <TIM_Base_SetConfig+0xb2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a2c      	ldr	r2, [pc, #176]	@ (8004674 <TIM_Base_SetConfig+0x130>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d017      	beq.n	80045f6 <TIM_Base_SetConfig+0xb2>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a2b      	ldr	r2, [pc, #172]	@ (8004678 <TIM_Base_SetConfig+0x134>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d013      	beq.n	80045f6 <TIM_Base_SetConfig+0xb2>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a2a      	ldr	r2, [pc, #168]	@ (800467c <TIM_Base_SetConfig+0x138>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d00f      	beq.n	80045f6 <TIM_Base_SetConfig+0xb2>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a29      	ldr	r2, [pc, #164]	@ (8004680 <TIM_Base_SetConfig+0x13c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d00b      	beq.n	80045f6 <TIM_Base_SetConfig+0xb2>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a28      	ldr	r2, [pc, #160]	@ (8004684 <TIM_Base_SetConfig+0x140>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d007      	beq.n	80045f6 <TIM_Base_SetConfig+0xb2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a27      	ldr	r2, [pc, #156]	@ (8004688 <TIM_Base_SetConfig+0x144>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d003      	beq.n	80045f6 <TIM_Base_SetConfig+0xb2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a26      	ldr	r2, [pc, #152]	@ (800468c <TIM_Base_SetConfig+0x148>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d108      	bne.n	8004608 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	4313      	orrs	r3, r2
 8004606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	689a      	ldr	r2, [r3, #8]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a0e      	ldr	r2, [pc, #56]	@ (8004664 <TIM_Base_SetConfig+0x120>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d003      	beq.n	8004636 <TIM_Base_SetConfig+0xf2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a10      	ldr	r2, [pc, #64]	@ (8004674 <TIM_Base_SetConfig+0x130>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d103      	bne.n	800463e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	691a      	ldr	r2, [r3, #16]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f043 0204 	orr.w	r2, r3, #4
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	601a      	str	r2, [r3, #0]
}
 8004656:	bf00      	nop
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	40010000 	.word	0x40010000
 8004668:	40000400 	.word	0x40000400
 800466c:	40000800 	.word	0x40000800
 8004670:	40000c00 	.word	0x40000c00
 8004674:	40010400 	.word	0x40010400
 8004678:	40014000 	.word	0x40014000
 800467c:	40014400 	.word	0x40014400
 8004680:	40014800 	.word	0x40014800
 8004684:	40001800 	.word	0x40001800
 8004688:	40001c00 	.word	0x40001c00
 800468c:	40002000 	.word	0x40002000

08004690 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	f023 0201 	bic.w	r2, r3, #1
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	011b      	lsls	r3, r3, #4
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f023 030a 	bic.w	r3, r3, #10
 80046cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	621a      	str	r2, [r3, #32]
}
 80046e2:	bf00      	nop
 80046e4:	371c      	adds	r7, #28
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b087      	sub	sp, #28
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	60f8      	str	r0, [r7, #12]
 80046f6:	60b9      	str	r1, [r7, #8]
 80046f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	f023 0210 	bic.w	r2, r3, #16
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004718:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	031b      	lsls	r3, r3, #12
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800472a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	4313      	orrs	r3, r2
 8004734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	621a      	str	r2, [r3, #32]
}
 8004742:	bf00      	nop
 8004744:	371c      	adds	r7, #28
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800474e:	b480      	push	{r7}
 8004750:	b085      	sub	sp, #20
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004764:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4313      	orrs	r3, r2
 800476c:	f043 0307 	orr.w	r3, r3, #7
 8004770:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	609a      	str	r2, [r3, #8]
}
 8004778:	bf00      	nop
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004784:	b480      	push	{r7}
 8004786:	b087      	sub	sp, #28
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
 8004790:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800479e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	021a      	lsls	r2, r3, #8
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	431a      	orrs	r2, r3
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	609a      	str	r2, [r3, #8]
}
 80047b8:	bf00      	nop
 80047ba:	371c      	adds	r7, #28
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047d8:	2302      	movs	r3, #2
 80047da:	e05a      	b.n	8004892 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004802:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a21      	ldr	r2, [pc, #132]	@ (80048a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d022      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004828:	d01d      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a1d      	ldr	r2, [pc, #116]	@ (80048a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d018      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a1b      	ldr	r2, [pc, #108]	@ (80048a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d013      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a1a      	ldr	r2, [pc, #104]	@ (80048ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00e      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a18      	ldr	r2, [pc, #96]	@ (80048b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d009      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a17      	ldr	r2, [pc, #92]	@ (80048b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d004      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a15      	ldr	r2, [pc, #84]	@ (80048b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d10c      	bne.n	8004880 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800486c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	4313      	orrs	r3, r2
 8004876:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40010000 	.word	0x40010000
 80048a4:	40000400 	.word	0x40000400
 80048a8:	40000800 	.word	0x40000800
 80048ac:	40000c00 	.word	0x40000c00
 80048b0:	40010400 	.word	0x40010400
 80048b4:	40014000 	.word	0x40014000
 80048b8:	40001800 	.word	0x40001800

080048bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e042      	b.n	8004954 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d106      	bne.n	80048e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fc fb6a 	bl	8000fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2224      	movs	r2, #36	@ 0x24
 80048ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f973 	bl	8004bec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	691a      	ldr	r2, [r3, #16]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004914:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	695a      	ldr	r2, [r3, #20]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004924:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004934:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2220      	movs	r2, #32
 8004940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b08a      	sub	sp, #40	@ 0x28
 8004960:	af02      	add	r7, sp, #8
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	603b      	str	r3, [r7, #0]
 8004968:	4613      	mov	r3, r2
 800496a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b20      	cmp	r3, #32
 800497a:	d175      	bne.n	8004a68 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <HAL_UART_Transmit+0x2c>
 8004982:	88fb      	ldrh	r3, [r7, #6]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e06e      	b.n	8004a6a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2221      	movs	r2, #33	@ 0x21
 8004996:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800499a:	f7fc fe13 	bl	80015c4 <HAL_GetTick>
 800499e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	88fa      	ldrh	r2, [r7, #6]
 80049a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	88fa      	ldrh	r2, [r7, #6]
 80049aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049b4:	d108      	bne.n	80049c8 <HAL_UART_Transmit+0x6c>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d104      	bne.n	80049c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049be:	2300      	movs	r3, #0
 80049c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	61bb      	str	r3, [r7, #24]
 80049c6:	e003      	b.n	80049d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049cc:	2300      	movs	r3, #0
 80049ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049d0:	e02e      	b.n	8004a30 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	2200      	movs	r2, #0
 80049da:	2180      	movs	r1, #128	@ 0x80
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 f848 	bl	8004a72 <UART_WaitOnFlagUntilTimeout>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d005      	beq.n	80049f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e03a      	b.n	8004a6a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10b      	bne.n	8004a12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	461a      	mov	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	3302      	adds	r3, #2
 8004a0e:	61bb      	str	r3, [r7, #24]
 8004a10:	e007      	b.n	8004a22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	781a      	ldrb	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1cb      	bne.n	80049d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	2200      	movs	r2, #0
 8004a42:	2140      	movs	r1, #64	@ 0x40
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 f814 	bl	8004a72 <UART_WaitOnFlagUntilTimeout>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d005      	beq.n	8004a5c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2220      	movs	r2, #32
 8004a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e006      	b.n	8004a6a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	e000      	b.n	8004a6a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a68:	2302      	movs	r3, #2
  }
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3720      	adds	r7, #32
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b086      	sub	sp, #24
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	60f8      	str	r0, [r7, #12]
 8004a7a:	60b9      	str	r1, [r7, #8]
 8004a7c:	603b      	str	r3, [r7, #0]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a82:	e03b      	b.n	8004afc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8a:	d037      	beq.n	8004afc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a8c:	f7fc fd9a 	bl	80015c4 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	6a3a      	ldr	r2, [r7, #32]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d302      	bcc.n	8004aa2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e03a      	b.n	8004b1c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d023      	beq.n	8004afc <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b80      	cmp	r3, #128	@ 0x80
 8004ab8:	d020      	beq.n	8004afc <UART_WaitOnFlagUntilTimeout+0x8a>
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b40      	cmp	r3, #64	@ 0x40
 8004abe:	d01d      	beq.n	8004afc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b08      	cmp	r3, #8
 8004acc:	d116      	bne.n	8004afc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004ace:	2300      	movs	r3, #0
 8004ad0:	617b      	str	r3, [r7, #20]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	617b      	str	r3, [r7, #20]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	617b      	str	r3, [r7, #20]
 8004ae2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 f81d 	bl	8004b24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2208      	movs	r2, #8
 8004aee:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e00f      	b.n	8004b1c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	4013      	ands	r3, r2
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	bf0c      	ite	eq
 8004b0c:	2301      	moveq	r3, #1
 8004b0e:	2300      	movne	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	461a      	mov	r2, r3
 8004b14:	79fb      	ldrb	r3, [r7, #7]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d0b4      	beq.n	8004a84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b095      	sub	sp, #84	@ 0x54
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	330c      	adds	r3, #12
 8004b32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b36:	e853 3f00 	ldrex	r3, [r3]
 8004b3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	330c      	adds	r3, #12
 8004b4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b4c:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b54:	e841 2300 	strex	r3, r2, [r1]
 8004b58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1e5      	bne.n	8004b2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	3314      	adds	r3, #20
 8004b66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	e853 3f00 	ldrex	r3, [r3]
 8004b6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	f023 0301 	bic.w	r3, r3, #1
 8004b76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3314      	adds	r3, #20
 8004b7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b88:	e841 2300 	strex	r3, r2, [r1]
 8004b8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1e5      	bne.n	8004b60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d119      	bne.n	8004bd0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	330c      	adds	r3, #12
 8004ba2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	e853 3f00 	ldrex	r3, [r3]
 8004baa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f023 0310 	bic.w	r3, r3, #16
 8004bb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	330c      	adds	r3, #12
 8004bba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bbc:	61ba      	str	r2, [r7, #24]
 8004bbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc0:	6979      	ldr	r1, [r7, #20]
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	e841 2300 	strex	r3, r2, [r1]
 8004bc8:	613b      	str	r3, [r7, #16]
   return(result);
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1e5      	bne.n	8004b9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004bde:	bf00      	nop
 8004be0:	3754      	adds	r7, #84	@ 0x54
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
	...

08004bec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bf0:	b0c0      	sub	sp, #256	@ 0x100
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c08:	68d9      	ldr	r1, [r3, #12]
 8004c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	ea40 0301 	orr.w	r3, r0, r1
 8004c14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	431a      	orrs	r2, r3
 8004c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004c44:	f021 010c 	bic.w	r1, r1, #12
 8004c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c52:	430b      	orrs	r3, r1
 8004c54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c66:	6999      	ldr	r1, [r3, #24]
 8004c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	ea40 0301 	orr.w	r3, r0, r1
 8004c72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	4b8f      	ldr	r3, [pc, #572]	@ (8004eb8 <UART_SetConfig+0x2cc>)
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d005      	beq.n	8004c8c <UART_SetConfig+0xa0>
 8004c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	4b8d      	ldr	r3, [pc, #564]	@ (8004ebc <UART_SetConfig+0x2d0>)
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d104      	bne.n	8004c96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c8c:	f7ff fac6 	bl	800421c <HAL_RCC_GetPCLK2Freq>
 8004c90:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c94:	e003      	b.n	8004c9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c96:	f7ff faad 	bl	80041f4 <HAL_RCC_GetPCLK1Freq>
 8004c9a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ca8:	f040 810c 	bne.w	8004ec4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004cb6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004cba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004cbe:	4622      	mov	r2, r4
 8004cc0:	462b      	mov	r3, r5
 8004cc2:	1891      	adds	r1, r2, r2
 8004cc4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004cc6:	415b      	adcs	r3, r3
 8004cc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004cce:	4621      	mov	r1, r4
 8004cd0:	eb12 0801 	adds.w	r8, r2, r1
 8004cd4:	4629      	mov	r1, r5
 8004cd6:	eb43 0901 	adc.w	r9, r3, r1
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ce6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cee:	4690      	mov	r8, r2
 8004cf0:	4699      	mov	r9, r3
 8004cf2:	4623      	mov	r3, r4
 8004cf4:	eb18 0303 	adds.w	r3, r8, r3
 8004cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004cfc:	462b      	mov	r3, r5
 8004cfe:	eb49 0303 	adc.w	r3, r9, r3
 8004d02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d12:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004d16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	18db      	adds	r3, r3, r3
 8004d1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d20:	4613      	mov	r3, r2
 8004d22:	eb42 0303 	adc.w	r3, r2, r3
 8004d26:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004d2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004d30:	f7fb fc5a 	bl	80005e8 <__aeabi_uldivmod>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4b61      	ldr	r3, [pc, #388]	@ (8004ec0 <UART_SetConfig+0x2d4>)
 8004d3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d3e:	095b      	lsrs	r3, r3, #5
 8004d40:	011c      	lsls	r4, r3, #4
 8004d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d46:	2200      	movs	r2, #0
 8004d48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d4c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004d50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004d54:	4642      	mov	r2, r8
 8004d56:	464b      	mov	r3, r9
 8004d58:	1891      	adds	r1, r2, r2
 8004d5a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004d5c:	415b      	adcs	r3, r3
 8004d5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d64:	4641      	mov	r1, r8
 8004d66:	eb12 0a01 	adds.w	sl, r2, r1
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	eb43 0b01 	adc.w	fp, r3, r1
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d84:	4692      	mov	sl, r2
 8004d86:	469b      	mov	fp, r3
 8004d88:	4643      	mov	r3, r8
 8004d8a:	eb1a 0303 	adds.w	r3, sl, r3
 8004d8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d92:	464b      	mov	r3, r9
 8004d94:	eb4b 0303 	adc.w	r3, fp, r3
 8004d98:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004da8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004dac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004db0:	460b      	mov	r3, r1
 8004db2:	18db      	adds	r3, r3, r3
 8004db4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004db6:	4613      	mov	r3, r2
 8004db8:	eb42 0303 	adc.w	r3, r2, r3
 8004dbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004dc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004dc6:	f7fb fc0f 	bl	80005e8 <__aeabi_uldivmod>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4611      	mov	r1, r2
 8004dd0:	4b3b      	ldr	r3, [pc, #236]	@ (8004ec0 <UART_SetConfig+0x2d4>)
 8004dd2:	fba3 2301 	umull	r2, r3, r3, r1
 8004dd6:	095b      	lsrs	r3, r3, #5
 8004dd8:	2264      	movs	r2, #100	@ 0x64
 8004dda:	fb02 f303 	mul.w	r3, r2, r3
 8004dde:	1acb      	subs	r3, r1, r3
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004de6:	4b36      	ldr	r3, [pc, #216]	@ (8004ec0 <UART_SetConfig+0x2d4>)
 8004de8:	fba3 2302 	umull	r2, r3, r3, r2
 8004dec:	095b      	lsrs	r3, r3, #5
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004df4:	441c      	add	r4, r3
 8004df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e00:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004e04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004e08:	4642      	mov	r2, r8
 8004e0a:	464b      	mov	r3, r9
 8004e0c:	1891      	adds	r1, r2, r2
 8004e0e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004e10:	415b      	adcs	r3, r3
 8004e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004e18:	4641      	mov	r1, r8
 8004e1a:	1851      	adds	r1, r2, r1
 8004e1c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004e1e:	4649      	mov	r1, r9
 8004e20:	414b      	adcs	r3, r1
 8004e22:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004e30:	4659      	mov	r1, fp
 8004e32:	00cb      	lsls	r3, r1, #3
 8004e34:	4651      	mov	r1, sl
 8004e36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e3a:	4651      	mov	r1, sl
 8004e3c:	00ca      	lsls	r2, r1, #3
 8004e3e:	4610      	mov	r0, r2
 8004e40:	4619      	mov	r1, r3
 8004e42:	4603      	mov	r3, r0
 8004e44:	4642      	mov	r2, r8
 8004e46:	189b      	adds	r3, r3, r2
 8004e48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e4c:	464b      	mov	r3, r9
 8004e4e:	460a      	mov	r2, r1
 8004e50:	eb42 0303 	adc.w	r3, r2, r3
 8004e54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e64:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004e68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	18db      	adds	r3, r3, r3
 8004e70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e72:	4613      	mov	r3, r2
 8004e74:	eb42 0303 	adc.w	r3, r2, r3
 8004e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e82:	f7fb fbb1 	bl	80005e8 <__aeabi_uldivmod>
 8004e86:	4602      	mov	r2, r0
 8004e88:	460b      	mov	r3, r1
 8004e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec0 <UART_SetConfig+0x2d4>)
 8004e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e90:	095b      	lsrs	r3, r3, #5
 8004e92:	2164      	movs	r1, #100	@ 0x64
 8004e94:	fb01 f303 	mul.w	r3, r1, r3
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	3332      	adds	r3, #50	@ 0x32
 8004e9e:	4a08      	ldr	r2, [pc, #32]	@ (8004ec0 <UART_SetConfig+0x2d4>)
 8004ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea4:	095b      	lsrs	r3, r3, #5
 8004ea6:	f003 0207 	and.w	r2, r3, #7
 8004eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4422      	add	r2, r4
 8004eb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004eb4:	e106      	b.n	80050c4 <UART_SetConfig+0x4d8>
 8004eb6:	bf00      	nop
 8004eb8:	40011000 	.word	0x40011000
 8004ebc:	40011400 	.word	0x40011400
 8004ec0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ec4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ece:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004ed2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004ed6:	4642      	mov	r2, r8
 8004ed8:	464b      	mov	r3, r9
 8004eda:	1891      	adds	r1, r2, r2
 8004edc:	6239      	str	r1, [r7, #32]
 8004ede:	415b      	adcs	r3, r3
 8004ee0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ee2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ee6:	4641      	mov	r1, r8
 8004ee8:	1854      	adds	r4, r2, r1
 8004eea:	4649      	mov	r1, r9
 8004eec:	eb43 0501 	adc.w	r5, r3, r1
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	00eb      	lsls	r3, r5, #3
 8004efa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004efe:	00e2      	lsls	r2, r4, #3
 8004f00:	4614      	mov	r4, r2
 8004f02:	461d      	mov	r5, r3
 8004f04:	4643      	mov	r3, r8
 8004f06:	18e3      	adds	r3, r4, r3
 8004f08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f0c:	464b      	mov	r3, r9
 8004f0e:	eb45 0303 	adc.w	r3, r5, r3
 8004f12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f22:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f26:	f04f 0200 	mov.w	r2, #0
 8004f2a:	f04f 0300 	mov.w	r3, #0
 8004f2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f32:	4629      	mov	r1, r5
 8004f34:	008b      	lsls	r3, r1, #2
 8004f36:	4621      	mov	r1, r4
 8004f38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f3c:	4621      	mov	r1, r4
 8004f3e:	008a      	lsls	r2, r1, #2
 8004f40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004f44:	f7fb fb50 	bl	80005e8 <__aeabi_uldivmod>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	4b60      	ldr	r3, [pc, #384]	@ (80050d0 <UART_SetConfig+0x4e4>)
 8004f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f52:	095b      	lsrs	r3, r3, #5
 8004f54:	011c      	lsls	r4, r3, #4
 8004f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f60:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004f68:	4642      	mov	r2, r8
 8004f6a:	464b      	mov	r3, r9
 8004f6c:	1891      	adds	r1, r2, r2
 8004f6e:	61b9      	str	r1, [r7, #24]
 8004f70:	415b      	adcs	r3, r3
 8004f72:	61fb      	str	r3, [r7, #28]
 8004f74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f78:	4641      	mov	r1, r8
 8004f7a:	1851      	adds	r1, r2, r1
 8004f7c:	6139      	str	r1, [r7, #16]
 8004f7e:	4649      	mov	r1, r9
 8004f80:	414b      	adcs	r3, r1
 8004f82:	617b      	str	r3, [r7, #20]
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	f04f 0300 	mov.w	r3, #0
 8004f8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f90:	4659      	mov	r1, fp
 8004f92:	00cb      	lsls	r3, r1, #3
 8004f94:	4651      	mov	r1, sl
 8004f96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f9a:	4651      	mov	r1, sl
 8004f9c:	00ca      	lsls	r2, r1, #3
 8004f9e:	4610      	mov	r0, r2
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	4642      	mov	r2, r8
 8004fa6:	189b      	adds	r3, r3, r2
 8004fa8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004fac:	464b      	mov	r3, r9
 8004fae:	460a      	mov	r2, r1
 8004fb0:	eb42 0303 	adc.w	r3, r2, r3
 8004fb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004fc2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004fc4:	f04f 0200 	mov.w	r2, #0
 8004fc8:	f04f 0300 	mov.w	r3, #0
 8004fcc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004fd0:	4649      	mov	r1, r9
 8004fd2:	008b      	lsls	r3, r1, #2
 8004fd4:	4641      	mov	r1, r8
 8004fd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fda:	4641      	mov	r1, r8
 8004fdc:	008a      	lsls	r2, r1, #2
 8004fde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004fe2:	f7fb fb01 	bl	80005e8 <__aeabi_uldivmod>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	460b      	mov	r3, r1
 8004fea:	4611      	mov	r1, r2
 8004fec:	4b38      	ldr	r3, [pc, #224]	@ (80050d0 <UART_SetConfig+0x4e4>)
 8004fee:	fba3 2301 	umull	r2, r3, r3, r1
 8004ff2:	095b      	lsrs	r3, r3, #5
 8004ff4:	2264      	movs	r2, #100	@ 0x64
 8004ff6:	fb02 f303 	mul.w	r3, r2, r3
 8004ffa:	1acb      	subs	r3, r1, r3
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	3332      	adds	r3, #50	@ 0x32
 8005000:	4a33      	ldr	r2, [pc, #204]	@ (80050d0 <UART_SetConfig+0x4e4>)
 8005002:	fba2 2303 	umull	r2, r3, r2, r3
 8005006:	095b      	lsrs	r3, r3, #5
 8005008:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800500c:	441c      	add	r4, r3
 800500e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005012:	2200      	movs	r2, #0
 8005014:	673b      	str	r3, [r7, #112]	@ 0x70
 8005016:	677a      	str	r2, [r7, #116]	@ 0x74
 8005018:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800501c:	4642      	mov	r2, r8
 800501e:	464b      	mov	r3, r9
 8005020:	1891      	adds	r1, r2, r2
 8005022:	60b9      	str	r1, [r7, #8]
 8005024:	415b      	adcs	r3, r3
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800502c:	4641      	mov	r1, r8
 800502e:	1851      	adds	r1, r2, r1
 8005030:	6039      	str	r1, [r7, #0]
 8005032:	4649      	mov	r1, r9
 8005034:	414b      	adcs	r3, r1
 8005036:	607b      	str	r3, [r7, #4]
 8005038:	f04f 0200 	mov.w	r2, #0
 800503c:	f04f 0300 	mov.w	r3, #0
 8005040:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005044:	4659      	mov	r1, fp
 8005046:	00cb      	lsls	r3, r1, #3
 8005048:	4651      	mov	r1, sl
 800504a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800504e:	4651      	mov	r1, sl
 8005050:	00ca      	lsls	r2, r1, #3
 8005052:	4610      	mov	r0, r2
 8005054:	4619      	mov	r1, r3
 8005056:	4603      	mov	r3, r0
 8005058:	4642      	mov	r2, r8
 800505a:	189b      	adds	r3, r3, r2
 800505c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800505e:	464b      	mov	r3, r9
 8005060:	460a      	mov	r2, r1
 8005062:	eb42 0303 	adc.w	r3, r2, r3
 8005066:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	663b      	str	r3, [r7, #96]	@ 0x60
 8005072:	667a      	str	r2, [r7, #100]	@ 0x64
 8005074:	f04f 0200 	mov.w	r2, #0
 8005078:	f04f 0300 	mov.w	r3, #0
 800507c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005080:	4649      	mov	r1, r9
 8005082:	008b      	lsls	r3, r1, #2
 8005084:	4641      	mov	r1, r8
 8005086:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800508a:	4641      	mov	r1, r8
 800508c:	008a      	lsls	r2, r1, #2
 800508e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005092:	f7fb faa9 	bl	80005e8 <__aeabi_uldivmod>
 8005096:	4602      	mov	r2, r0
 8005098:	460b      	mov	r3, r1
 800509a:	4b0d      	ldr	r3, [pc, #52]	@ (80050d0 <UART_SetConfig+0x4e4>)
 800509c:	fba3 1302 	umull	r1, r3, r3, r2
 80050a0:	095b      	lsrs	r3, r3, #5
 80050a2:	2164      	movs	r1, #100	@ 0x64
 80050a4:	fb01 f303 	mul.w	r3, r1, r3
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	3332      	adds	r3, #50	@ 0x32
 80050ae:	4a08      	ldr	r2, [pc, #32]	@ (80050d0 <UART_SetConfig+0x4e4>)
 80050b0:	fba2 2303 	umull	r2, r3, r2, r3
 80050b4:	095b      	lsrs	r3, r3, #5
 80050b6:	f003 020f 	and.w	r2, r3, #15
 80050ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4422      	add	r2, r4
 80050c2:	609a      	str	r2, [r3, #8]
}
 80050c4:	bf00      	nop
 80050c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80050ca:	46bd      	mov	sp, r7
 80050cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050d0:	51eb851f 	.word	0x51eb851f

080050d4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80050da:	4b87      	ldr	r3, [pc, #540]	@ (80052f8 <MX_LWIP_Init+0x224>)
 80050dc:	22c0      	movs	r2, #192	@ 0xc0
 80050de:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80050e0:	4b85      	ldr	r3, [pc, #532]	@ (80052f8 <MX_LWIP_Init+0x224>)
 80050e2:	22a8      	movs	r2, #168	@ 0xa8
 80050e4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80050e6:	4b84      	ldr	r3, [pc, #528]	@ (80052f8 <MX_LWIP_Init+0x224>)
 80050e8:	2201      	movs	r2, #1
 80050ea:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 50;
 80050ec:	4b82      	ldr	r3, [pc, #520]	@ (80052f8 <MX_LWIP_Init+0x224>)
 80050ee:	2232      	movs	r2, #50	@ 0x32
 80050f0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80050f2:	4b82      	ldr	r3, [pc, #520]	@ (80052fc <MX_LWIP_Init+0x228>)
 80050f4:	22ff      	movs	r2, #255	@ 0xff
 80050f6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80050f8:	4b80      	ldr	r3, [pc, #512]	@ (80052fc <MX_LWIP_Init+0x228>)
 80050fa:	22ff      	movs	r2, #255	@ 0xff
 80050fc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80050fe:	4b7f      	ldr	r3, [pc, #508]	@ (80052fc <MX_LWIP_Init+0x228>)
 8005100:	22ff      	movs	r2, #255	@ 0xff
 8005102:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005104:	4b7d      	ldr	r3, [pc, #500]	@ (80052fc <MX_LWIP_Init+0x228>)
 8005106:	2200      	movs	r2, #0
 8005108:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800510a:	4b7d      	ldr	r3, [pc, #500]	@ (8005300 <MX_LWIP_Init+0x22c>)
 800510c:	22c0      	movs	r2, #192	@ 0xc0
 800510e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005110:	4b7b      	ldr	r3, [pc, #492]	@ (8005300 <MX_LWIP_Init+0x22c>)
 8005112:	22a8      	movs	r2, #168	@ 0xa8
 8005114:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8005116:	4b7a      	ldr	r3, [pc, #488]	@ (8005300 <MX_LWIP_Init+0x22c>)
 8005118:	2201      	movs	r2, #1
 800511a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800511c:	4b78      	ldr	r3, [pc, #480]	@ (8005300 <MX_LWIP_Init+0x22c>)
 800511e:	2201      	movs	r2, #1
 8005120:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8005122:	f000 fd02 	bl	8005b2a <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005126:	4b74      	ldr	r3, [pc, #464]	@ (80052f8 <MX_LWIP_Init+0x224>)
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	061a      	lsls	r2, r3, #24
 800512c:	4b72      	ldr	r3, [pc, #456]	@ (80052f8 <MX_LWIP_Init+0x224>)
 800512e:	785b      	ldrb	r3, [r3, #1]
 8005130:	041b      	lsls	r3, r3, #16
 8005132:	431a      	orrs	r2, r3
 8005134:	4b70      	ldr	r3, [pc, #448]	@ (80052f8 <MX_LWIP_Init+0x224>)
 8005136:	789b      	ldrb	r3, [r3, #2]
 8005138:	021b      	lsls	r3, r3, #8
 800513a:	4313      	orrs	r3, r2
 800513c:	4a6e      	ldr	r2, [pc, #440]	@ (80052f8 <MX_LWIP_Init+0x224>)
 800513e:	78d2      	ldrb	r2, [r2, #3]
 8005140:	4313      	orrs	r3, r2
 8005142:	061a      	lsls	r2, r3, #24
 8005144:	4b6c      	ldr	r3, [pc, #432]	@ (80052f8 <MX_LWIP_Init+0x224>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	0619      	lsls	r1, r3, #24
 800514a:	4b6b      	ldr	r3, [pc, #428]	@ (80052f8 <MX_LWIP_Init+0x224>)
 800514c:	785b      	ldrb	r3, [r3, #1]
 800514e:	041b      	lsls	r3, r3, #16
 8005150:	4319      	orrs	r1, r3
 8005152:	4b69      	ldr	r3, [pc, #420]	@ (80052f8 <MX_LWIP_Init+0x224>)
 8005154:	789b      	ldrb	r3, [r3, #2]
 8005156:	021b      	lsls	r3, r3, #8
 8005158:	430b      	orrs	r3, r1
 800515a:	4967      	ldr	r1, [pc, #412]	@ (80052f8 <MX_LWIP_Init+0x224>)
 800515c:	78c9      	ldrb	r1, [r1, #3]
 800515e:	430b      	orrs	r3, r1
 8005160:	021b      	lsls	r3, r3, #8
 8005162:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005166:	431a      	orrs	r2, r3
 8005168:	4b63      	ldr	r3, [pc, #396]	@ (80052f8 <MX_LWIP_Init+0x224>)
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	0619      	lsls	r1, r3, #24
 800516e:	4b62      	ldr	r3, [pc, #392]	@ (80052f8 <MX_LWIP_Init+0x224>)
 8005170:	785b      	ldrb	r3, [r3, #1]
 8005172:	041b      	lsls	r3, r3, #16
 8005174:	4319      	orrs	r1, r3
 8005176:	4b60      	ldr	r3, [pc, #384]	@ (80052f8 <MX_LWIP_Init+0x224>)
 8005178:	789b      	ldrb	r3, [r3, #2]
 800517a:	021b      	lsls	r3, r3, #8
 800517c:	430b      	orrs	r3, r1
 800517e:	495e      	ldr	r1, [pc, #376]	@ (80052f8 <MX_LWIP_Init+0x224>)
 8005180:	78c9      	ldrb	r1, [r1, #3]
 8005182:	430b      	orrs	r3, r1
 8005184:	0a1b      	lsrs	r3, r3, #8
 8005186:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800518a:	431a      	orrs	r2, r3
 800518c:	4b5a      	ldr	r3, [pc, #360]	@ (80052f8 <MX_LWIP_Init+0x224>)
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	0619      	lsls	r1, r3, #24
 8005192:	4b59      	ldr	r3, [pc, #356]	@ (80052f8 <MX_LWIP_Init+0x224>)
 8005194:	785b      	ldrb	r3, [r3, #1]
 8005196:	041b      	lsls	r3, r3, #16
 8005198:	4319      	orrs	r1, r3
 800519a:	4b57      	ldr	r3, [pc, #348]	@ (80052f8 <MX_LWIP_Init+0x224>)
 800519c:	789b      	ldrb	r3, [r3, #2]
 800519e:	021b      	lsls	r3, r3, #8
 80051a0:	430b      	orrs	r3, r1
 80051a2:	4955      	ldr	r1, [pc, #340]	@ (80052f8 <MX_LWIP_Init+0x224>)
 80051a4:	78c9      	ldrb	r1, [r1, #3]
 80051a6:	430b      	orrs	r3, r1
 80051a8:	0e1b      	lsrs	r3, r3, #24
 80051aa:	4313      	orrs	r3, r2
 80051ac:	4a55      	ldr	r2, [pc, #340]	@ (8005304 <MX_LWIP_Init+0x230>)
 80051ae:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80051b0:	4b52      	ldr	r3, [pc, #328]	@ (80052fc <MX_LWIP_Init+0x228>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	061a      	lsls	r2, r3, #24
 80051b6:	4b51      	ldr	r3, [pc, #324]	@ (80052fc <MX_LWIP_Init+0x228>)
 80051b8:	785b      	ldrb	r3, [r3, #1]
 80051ba:	041b      	lsls	r3, r3, #16
 80051bc:	431a      	orrs	r2, r3
 80051be:	4b4f      	ldr	r3, [pc, #316]	@ (80052fc <MX_LWIP_Init+0x228>)
 80051c0:	789b      	ldrb	r3, [r3, #2]
 80051c2:	021b      	lsls	r3, r3, #8
 80051c4:	4313      	orrs	r3, r2
 80051c6:	4a4d      	ldr	r2, [pc, #308]	@ (80052fc <MX_LWIP_Init+0x228>)
 80051c8:	78d2      	ldrb	r2, [r2, #3]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	061a      	lsls	r2, r3, #24
 80051ce:	4b4b      	ldr	r3, [pc, #300]	@ (80052fc <MX_LWIP_Init+0x228>)
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	0619      	lsls	r1, r3, #24
 80051d4:	4b49      	ldr	r3, [pc, #292]	@ (80052fc <MX_LWIP_Init+0x228>)
 80051d6:	785b      	ldrb	r3, [r3, #1]
 80051d8:	041b      	lsls	r3, r3, #16
 80051da:	4319      	orrs	r1, r3
 80051dc:	4b47      	ldr	r3, [pc, #284]	@ (80052fc <MX_LWIP_Init+0x228>)
 80051de:	789b      	ldrb	r3, [r3, #2]
 80051e0:	021b      	lsls	r3, r3, #8
 80051e2:	430b      	orrs	r3, r1
 80051e4:	4945      	ldr	r1, [pc, #276]	@ (80052fc <MX_LWIP_Init+0x228>)
 80051e6:	78c9      	ldrb	r1, [r1, #3]
 80051e8:	430b      	orrs	r3, r1
 80051ea:	021b      	lsls	r3, r3, #8
 80051ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80051f0:	431a      	orrs	r2, r3
 80051f2:	4b42      	ldr	r3, [pc, #264]	@ (80052fc <MX_LWIP_Init+0x228>)
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	0619      	lsls	r1, r3, #24
 80051f8:	4b40      	ldr	r3, [pc, #256]	@ (80052fc <MX_LWIP_Init+0x228>)
 80051fa:	785b      	ldrb	r3, [r3, #1]
 80051fc:	041b      	lsls	r3, r3, #16
 80051fe:	4319      	orrs	r1, r3
 8005200:	4b3e      	ldr	r3, [pc, #248]	@ (80052fc <MX_LWIP_Init+0x228>)
 8005202:	789b      	ldrb	r3, [r3, #2]
 8005204:	021b      	lsls	r3, r3, #8
 8005206:	430b      	orrs	r3, r1
 8005208:	493c      	ldr	r1, [pc, #240]	@ (80052fc <MX_LWIP_Init+0x228>)
 800520a:	78c9      	ldrb	r1, [r1, #3]
 800520c:	430b      	orrs	r3, r1
 800520e:	0a1b      	lsrs	r3, r3, #8
 8005210:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005214:	431a      	orrs	r2, r3
 8005216:	4b39      	ldr	r3, [pc, #228]	@ (80052fc <MX_LWIP_Init+0x228>)
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	0619      	lsls	r1, r3, #24
 800521c:	4b37      	ldr	r3, [pc, #220]	@ (80052fc <MX_LWIP_Init+0x228>)
 800521e:	785b      	ldrb	r3, [r3, #1]
 8005220:	041b      	lsls	r3, r3, #16
 8005222:	4319      	orrs	r1, r3
 8005224:	4b35      	ldr	r3, [pc, #212]	@ (80052fc <MX_LWIP_Init+0x228>)
 8005226:	789b      	ldrb	r3, [r3, #2]
 8005228:	021b      	lsls	r3, r3, #8
 800522a:	430b      	orrs	r3, r1
 800522c:	4933      	ldr	r1, [pc, #204]	@ (80052fc <MX_LWIP_Init+0x228>)
 800522e:	78c9      	ldrb	r1, [r1, #3]
 8005230:	430b      	orrs	r3, r1
 8005232:	0e1b      	lsrs	r3, r3, #24
 8005234:	4313      	orrs	r3, r2
 8005236:	4a34      	ldr	r2, [pc, #208]	@ (8005308 <MX_LWIP_Init+0x234>)
 8005238:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800523a:	4b31      	ldr	r3, [pc, #196]	@ (8005300 <MX_LWIP_Init+0x22c>)
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	061a      	lsls	r2, r3, #24
 8005240:	4b2f      	ldr	r3, [pc, #188]	@ (8005300 <MX_LWIP_Init+0x22c>)
 8005242:	785b      	ldrb	r3, [r3, #1]
 8005244:	041b      	lsls	r3, r3, #16
 8005246:	431a      	orrs	r2, r3
 8005248:	4b2d      	ldr	r3, [pc, #180]	@ (8005300 <MX_LWIP_Init+0x22c>)
 800524a:	789b      	ldrb	r3, [r3, #2]
 800524c:	021b      	lsls	r3, r3, #8
 800524e:	4313      	orrs	r3, r2
 8005250:	4a2b      	ldr	r2, [pc, #172]	@ (8005300 <MX_LWIP_Init+0x22c>)
 8005252:	78d2      	ldrb	r2, [r2, #3]
 8005254:	4313      	orrs	r3, r2
 8005256:	061a      	lsls	r2, r3, #24
 8005258:	4b29      	ldr	r3, [pc, #164]	@ (8005300 <MX_LWIP_Init+0x22c>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	0619      	lsls	r1, r3, #24
 800525e:	4b28      	ldr	r3, [pc, #160]	@ (8005300 <MX_LWIP_Init+0x22c>)
 8005260:	785b      	ldrb	r3, [r3, #1]
 8005262:	041b      	lsls	r3, r3, #16
 8005264:	4319      	orrs	r1, r3
 8005266:	4b26      	ldr	r3, [pc, #152]	@ (8005300 <MX_LWIP_Init+0x22c>)
 8005268:	789b      	ldrb	r3, [r3, #2]
 800526a:	021b      	lsls	r3, r3, #8
 800526c:	430b      	orrs	r3, r1
 800526e:	4924      	ldr	r1, [pc, #144]	@ (8005300 <MX_LWIP_Init+0x22c>)
 8005270:	78c9      	ldrb	r1, [r1, #3]
 8005272:	430b      	orrs	r3, r1
 8005274:	021b      	lsls	r3, r3, #8
 8005276:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800527a:	431a      	orrs	r2, r3
 800527c:	4b20      	ldr	r3, [pc, #128]	@ (8005300 <MX_LWIP_Init+0x22c>)
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	0619      	lsls	r1, r3, #24
 8005282:	4b1f      	ldr	r3, [pc, #124]	@ (8005300 <MX_LWIP_Init+0x22c>)
 8005284:	785b      	ldrb	r3, [r3, #1]
 8005286:	041b      	lsls	r3, r3, #16
 8005288:	4319      	orrs	r1, r3
 800528a:	4b1d      	ldr	r3, [pc, #116]	@ (8005300 <MX_LWIP_Init+0x22c>)
 800528c:	789b      	ldrb	r3, [r3, #2]
 800528e:	021b      	lsls	r3, r3, #8
 8005290:	430b      	orrs	r3, r1
 8005292:	491b      	ldr	r1, [pc, #108]	@ (8005300 <MX_LWIP_Init+0x22c>)
 8005294:	78c9      	ldrb	r1, [r1, #3]
 8005296:	430b      	orrs	r3, r1
 8005298:	0a1b      	lsrs	r3, r3, #8
 800529a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800529e:	431a      	orrs	r2, r3
 80052a0:	4b17      	ldr	r3, [pc, #92]	@ (8005300 <MX_LWIP_Init+0x22c>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	0619      	lsls	r1, r3, #24
 80052a6:	4b16      	ldr	r3, [pc, #88]	@ (8005300 <MX_LWIP_Init+0x22c>)
 80052a8:	785b      	ldrb	r3, [r3, #1]
 80052aa:	041b      	lsls	r3, r3, #16
 80052ac:	4319      	orrs	r1, r3
 80052ae:	4b14      	ldr	r3, [pc, #80]	@ (8005300 <MX_LWIP_Init+0x22c>)
 80052b0:	789b      	ldrb	r3, [r3, #2]
 80052b2:	021b      	lsls	r3, r3, #8
 80052b4:	430b      	orrs	r3, r1
 80052b6:	4912      	ldr	r1, [pc, #72]	@ (8005300 <MX_LWIP_Init+0x22c>)
 80052b8:	78c9      	ldrb	r1, [r1, #3]
 80052ba:	430b      	orrs	r3, r1
 80052bc:	0e1b      	lsrs	r3, r3, #24
 80052be:	4313      	orrs	r3, r2
 80052c0:	4a12      	ldr	r2, [pc, #72]	@ (800530c <MX_LWIP_Init+0x238>)
 80052c2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80052c4:	4b12      	ldr	r3, [pc, #72]	@ (8005310 <MX_LWIP_Init+0x23c>)
 80052c6:	9302      	str	r3, [sp, #8]
 80052c8:	4b12      	ldr	r3, [pc, #72]	@ (8005314 <MX_LWIP_Init+0x240>)
 80052ca:	9301      	str	r3, [sp, #4]
 80052cc:	2300      	movs	r3, #0
 80052ce:	9300      	str	r3, [sp, #0]
 80052d0:	4b0e      	ldr	r3, [pc, #56]	@ (800530c <MX_LWIP_Init+0x238>)
 80052d2:	4a0d      	ldr	r2, [pc, #52]	@ (8005308 <MX_LWIP_Init+0x234>)
 80052d4:	490b      	ldr	r1, [pc, #44]	@ (8005304 <MX_LWIP_Init+0x230>)
 80052d6:	4810      	ldr	r0, [pc, #64]	@ (8005318 <MX_LWIP_Init+0x244>)
 80052d8:	f001 f912 	bl	8006500 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80052dc:	480e      	ldr	r0, [pc, #56]	@ (8005318 <MX_LWIP_Init+0x244>)
 80052de:	f001 fac1 	bl	8006864 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80052e2:	480d      	ldr	r0, [pc, #52]	@ (8005318 <MX_LWIP_Init+0x244>)
 80052e4:	f001 face 	bl	8006884 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80052e8:	490c      	ldr	r1, [pc, #48]	@ (800531c <MX_LWIP_Init+0x248>)
 80052ea:	480b      	ldr	r0, [pc, #44]	@ (8005318 <MX_LWIP_Init+0x244>)
 80052ec:	f001 fbcc 	bl	8006a88 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80052f0:	bf00      	nop
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	20000288 	.word	0x20000288
 80052fc:	2000028c 	.word	0x2000028c
 8005300:	20000290 	.word	0x20000290
 8005304:	2000027c 	.word	0x2000027c
 8005308:	20000280 	.word	0x20000280
 800530c:	20000284 	.word	0x20000284
 8005310:	0800ffe5 	.word	0x0800ffe5
 8005314:	0800563d 	.word	0x0800563d
 8005318:	20000248 	.word	0x20000248
 800531c:	08005371 	.word	0x08005371

08005320 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8005328:	f7fc f94c 	bl	80015c4 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	4b08      	ldr	r3, [pc, #32]	@ (8005350 <Ethernet_Link_Periodic_Handle+0x30>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b63      	cmp	r3, #99	@ 0x63
 8005336:	d907      	bls.n	8005348 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8005338:	f7fc f944 	bl	80015c4 <HAL_GetTick>
 800533c:	4603      	mov	r3, r0
 800533e:	4a04      	ldr	r2, [pc, #16]	@ (8005350 <Ethernet_Link_Periodic_Handle+0x30>)
 8005340:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 fac6 	bl	80058d4 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8005348:	bf00      	nop
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	20000244 	.word	0x20000244

08005354 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005358:	4804      	ldr	r0, [pc, #16]	@ (800536c <MX_LWIP_Process+0x18>)
 800535a:	f000 f94f 	bl	80055fc <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800535e:	f008 fa55 	bl	800d80c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8005362:	4802      	ldr	r0, [pc, #8]	@ (800536c <MX_LWIP_Process+0x18>)
 8005364:	f7ff ffdc 	bl	8005320 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8005368:	bf00      	nop
 800536a:	bd80      	pop	{r7, pc}
 800536c:	20000248 	.word	0x20000248

08005370 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800538c:	2300      	movs	r3, #0
 800538e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005390:	4b44      	ldr	r3, [pc, #272]	@ (80054a4 <low_level_init+0x120>)
 8005392:	4a45      	ldr	r2, [pc, #276]	@ (80054a8 <low_level_init+0x124>)
 8005394:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005396:	2300      	movs	r3, #0
 8005398:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800539a:	2380      	movs	r3, #128	@ 0x80
 800539c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800539e:	23e1      	movs	r3, #225	@ 0xe1
 80053a0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80053a2:	2300      	movs	r3, #0
 80053a4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80053a6:	2300      	movs	r3, #0
 80053a8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80053aa:	2300      	movs	r3, #0
 80053ac:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80053ae:	4a3d      	ldr	r2, [pc, #244]	@ (80054a4 <low_level_init+0x120>)
 80053b0:	f107 0308 	add.w	r3, r7, #8
 80053b4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80053b6:	4b3b      	ldr	r3, [pc, #236]	@ (80054a4 <low_level_init+0x120>)
 80053b8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80053bc:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80053be:	4b39      	ldr	r3, [pc, #228]	@ (80054a4 <low_level_init+0x120>)
 80053c0:	4a3a      	ldr	r2, [pc, #232]	@ (80054ac <low_level_init+0x128>)
 80053c2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80053c4:	4b37      	ldr	r3, [pc, #220]	@ (80054a4 <low_level_init+0x120>)
 80053c6:	4a3a      	ldr	r2, [pc, #232]	@ (80054b0 <low_level_init+0x12c>)
 80053c8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80053ca:	4b36      	ldr	r3, [pc, #216]	@ (80054a4 <low_level_init+0x120>)
 80053cc:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80053d0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80053d2:	4834      	ldr	r0, [pc, #208]	@ (80054a4 <low_level_init+0x120>)
 80053d4:	f7fc feb4 	bl	8002140 <HAL_ETH_Init>
 80053d8:	4603      	mov	r3, r0
 80053da:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80053dc:	2238      	movs	r2, #56	@ 0x38
 80053de:	2100      	movs	r1, #0
 80053e0:	4834      	ldr	r0, [pc, #208]	@ (80054b4 <low_level_init+0x130>)
 80053e2:	f00c fb9c 	bl	8011b1e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80053e6:	4b33      	ldr	r3, [pc, #204]	@ (80054b4 <low_level_init+0x130>)
 80053e8:	2221      	movs	r2, #33	@ 0x21
 80053ea:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80053ec:	4b31      	ldr	r3, [pc, #196]	@ (80054b4 <low_level_init+0x130>)
 80053ee:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80053f2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80053f4:	4b2f      	ldr	r3, [pc, #188]	@ (80054b4 <low_level_init+0x130>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80053fa:	482f      	ldr	r0, [pc, #188]	@ (80054b8 <low_level_init+0x134>)
 80053fc:	f000 ff48 	bl	8006290 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2206      	movs	r2, #6
 8005404:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005408:	4b26      	ldr	r3, [pc, #152]	@ (80054a4 <low_level_init+0x120>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	781a      	ldrb	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005414:	4b23      	ldr	r3, [pc, #140]	@ (80054a4 <low_level_init+0x120>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	785a      	ldrb	r2, [r3, #1]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005420:	4b20      	ldr	r3, [pc, #128]	@ (80054a4 <low_level_init+0x120>)
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	789a      	ldrb	r2, [r3, #2]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800542c:	4b1d      	ldr	r3, [pc, #116]	@ (80054a4 <low_level_init+0x120>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	78da      	ldrb	r2, [r3, #3]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005438:	4b1a      	ldr	r3, [pc, #104]	@ (80054a4 <low_level_init+0x120>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	791a      	ldrb	r2, [r3, #4]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005444:	4b17      	ldr	r3, [pc, #92]	@ (80054a4 <low_level_init+0x120>)
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	795a      	ldrb	r2, [r3, #5]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005456:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800545e:	f043 030a 	orr.w	r3, r3, #10
 8005462:	b2da      	uxtb	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800546a:	4914      	ldr	r1, [pc, #80]	@ (80054bc <low_level_init+0x138>)
 800546c:	4814      	ldr	r0, [pc, #80]	@ (80054c0 <low_level_init+0x13c>)
 800546e:	f7fb ff3c 	bl	80012ea <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8005472:	4813      	ldr	r0, [pc, #76]	@ (80054c0 <low_level_init+0x13c>)
 8005474:	f7fb ff6b 	bl	800134e <LAN8742_Init>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d006      	beq.n	800548c <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f001 fad2 	bl	8006a28 <netif_set_link_down>
    netif_set_down(netif);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f001 fa69 	bl	800695c <netif_set_down>
 800548a:	e008      	b.n	800549e <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800548c:	7bfb      	ldrb	r3, [r7, #15]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d103      	bne.n	800549a <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 fa1e 	bl	80058d4 <ethernet_link_check_state>
 8005498:	e001      	b.n	800549e <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 800549a:	f7fb fd19 	bl	8000ed0 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	20004d60 	.word	0x20004d60
 80054a8:	40028000 	.word	0x40028000
 80054ac:	20004cc0 	.word	0x20004cc0
 80054b0:	20004c20 	.word	0x20004c20
 80054b4:	20004e10 	.word	0x20004e10
 80054b8:	08015750 	.word	0x08015750
 80054bc:	2000000c 	.word	0x2000000c
 80054c0:	20004e48 	.word	0x20004e48

080054c4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b092      	sub	sp, #72	@ 0x48
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80054ce:	2300      	movs	r3, #0
 80054d0:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 80054d2:	2300      	movs	r3, #0
 80054d4:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 80054d6:	2300      	movs	r3, #0
 80054d8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80054dc:	f107 030c 	add.w	r3, r7, #12
 80054e0:	2230      	movs	r2, #48	@ 0x30
 80054e2:	2100      	movs	r1, #0
 80054e4:	4618      	mov	r0, r3
 80054e6:	f00c fb1a 	bl	8011b1e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80054ea:	f107 030c 	add.w	r3, r7, #12
 80054ee:	2230      	movs	r2, #48	@ 0x30
 80054f0:	2100      	movs	r1, #0
 80054f2:	4618      	mov	r0, r3
 80054f4:	f00c fb13 	bl	8011b1e <memset>

  for(q = p; q != NULL; q = q->next)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80054fc:	e045      	b.n	800558a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80054fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005500:	2b03      	cmp	r3, #3
 8005502:	d902      	bls.n	800550a <low_level_output+0x46>
      return ERR_IF;
 8005504:	f06f 030b 	mvn.w	r3, #11
 8005508:	e055      	b.n	80055b6 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800550a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800550c:	6859      	ldr	r1, [r3, #4]
 800550e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005510:	4613      	mov	r3, r2
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	4413      	add	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	3348      	adds	r3, #72	@ 0x48
 800551a:	443b      	add	r3, r7
 800551c:	3b3c      	subs	r3, #60	@ 0x3c
 800551e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005520:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005522:	895b      	ldrh	r3, [r3, #10]
 8005524:	4619      	mov	r1, r3
 8005526:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005528:	4613      	mov	r3, r2
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	4413      	add	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	3348      	adds	r3, #72	@ 0x48
 8005532:	443b      	add	r3, r7
 8005534:	3b38      	subs	r3, #56	@ 0x38
 8005536:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800553a:	2b00      	cmp	r3, #0
 800553c:	d011      	beq.n	8005562 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800553e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005540:	1e5a      	subs	r2, r3, #1
 8005542:	f107 000c 	add.w	r0, r7, #12
 8005546:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005548:	460b      	mov	r3, r1
 800554a:	005b      	lsls	r3, r3, #1
 800554c:	440b      	add	r3, r1
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	18c1      	adds	r1, r0, r3
 8005552:	4613      	mov	r3, r2
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	4413      	add	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	3348      	adds	r3, #72	@ 0x48
 800555c:	443b      	add	r3, r7
 800555e:	3b34      	subs	r3, #52	@ 0x34
 8005560:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005562:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d109      	bne.n	800557e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800556a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800556c:	4613      	mov	r3, r2
 800556e:	005b      	lsls	r3, r3, #1
 8005570:	4413      	add	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	3348      	adds	r3, #72	@ 0x48
 8005576:	443b      	add	r3, r7
 8005578:	3b34      	subs	r3, #52	@ 0x34
 800557a:	2200      	movs	r2, #0
 800557c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800557e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005580:	3301      	adds	r3, #1
 8005582:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8005584:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	643b      	str	r3, [r7, #64]	@ 0x40
 800558a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1b6      	bne.n	80054fe <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	891b      	ldrh	r3, [r3, #8]
 8005594:	461a      	mov	r2, r3
 8005596:	4b0a      	ldr	r3, [pc, #40]	@ (80055c0 <low_level_output+0xfc>)
 8005598:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800559a:	4a09      	ldr	r2, [pc, #36]	@ (80055c0 <low_level_output+0xfc>)
 800559c:	f107 030c 	add.w	r3, r7, #12
 80055a0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80055a2:	4a07      	ldr	r2, [pc, #28]	@ (80055c0 <low_level_output+0xfc>)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80055a8:	2214      	movs	r2, #20
 80055aa:	4905      	ldr	r1, [pc, #20]	@ (80055c0 <low_level_output+0xfc>)
 80055ac:	4805      	ldr	r0, [pc, #20]	@ (80055c4 <low_level_output+0x100>)
 80055ae:	f7fc ff52 	bl	8002456 <HAL_ETH_Transmit>

  return errval;
 80055b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3748      	adds	r7, #72	@ 0x48
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	20004e10 	.word	0x20004e10
 80055c4:	20004d60 	.word	0x20004d60

080055c8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80055d4:	4b07      	ldr	r3, [pc, #28]	@ (80055f4 <low_level_input+0x2c>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d105      	bne.n	80055e8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80055dc:	f107 030c 	add.w	r3, r7, #12
 80055e0:	4619      	mov	r1, r3
 80055e2:	4805      	ldr	r0, [pc, #20]	@ (80055f8 <low_level_input+0x30>)
 80055e4:	f7fc ffcb 	bl	800257e <HAL_ETH_ReadData>
  }

  return p;
 80055e8:	68fb      	ldr	r3, [r7, #12]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	20004c1c 	.word	0x20004c1c
 80055f8:	20004d60 	.word	0x20004d60

080055fc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005604:	2300      	movs	r3, #0
 8005606:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7ff ffdd 	bl	80055c8 <low_level_input>
 800560e:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00a      	beq.n	800562c <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	6879      	ldr	r1, [r7, #4]
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	4798      	blx	r3
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f001 fdae 	bl	8007188 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1ea      	bne.n	8005608 <ethernetif_input+0xc>
}
 8005632:	bf00      	nop
 8005634:	bf00      	nop
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d106      	bne.n	8005658 <ethernetif_init+0x1c>
 800564a:	4b0e      	ldr	r3, [pc, #56]	@ (8005684 <ethernetif_init+0x48>)
 800564c:	f240 126f 	movw	r2, #367	@ 0x16f
 8005650:	490d      	ldr	r1, [pc, #52]	@ (8005688 <ethernetif_init+0x4c>)
 8005652:	480e      	ldr	r0, [pc, #56]	@ (800568c <ethernetif_init+0x50>)
 8005654:	f00c f9ae 	bl	80119b4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2273      	movs	r2, #115	@ 0x73
 800565c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2274      	movs	r2, #116	@ 0x74
 8005664:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a09      	ldr	r2, [pc, #36]	@ (8005690 <ethernetif_init+0x54>)
 800566c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a08      	ldr	r2, [pc, #32]	@ (8005694 <ethernetif_init+0x58>)
 8005672:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff fe85 	bl	8005384 <low_level_init>

  return ERR_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	08012c04 	.word	0x08012c04
 8005688:	08012c20 	.word	0x08012c20
 800568c:	08012c30 	.word	0x08012c30
 8005690:	0800e49d 	.word	0x0800e49d
 8005694:	080054c5 	.word	0x080054c5

08005698 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80056a4:	68f9      	ldr	r1, [r7, #12]
 80056a6:	4807      	ldr	r0, [pc, #28]	@ (80056c4 <pbuf_free_custom+0x2c>)
 80056a8:	f000 fed4 	bl	8006454 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80056ac:	4b06      	ldr	r3, [pc, #24]	@ (80056c8 <pbuf_free_custom+0x30>)
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d102      	bne.n	80056ba <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80056b4:	4b04      	ldr	r3, [pc, #16]	@ (80056c8 <pbuf_free_custom+0x30>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	701a      	strb	r2, [r3, #0]
  }
}
 80056ba:	bf00      	nop
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	08015750 	.word	0x08015750
 80056c8:	20004c1c 	.word	0x20004c1c

080056cc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80056d0:	f7fb ff78 	bl	80015c4 <HAL_GetTick>
 80056d4:	4603      	mov	r3, r0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	bd80      	pop	{r7, pc}
	...

080056dc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b08e      	sub	sp, #56	@ 0x38
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80056e8:	2200      	movs	r2, #0
 80056ea:	601a      	str	r2, [r3, #0]
 80056ec:	605a      	str	r2, [r3, #4]
 80056ee:	609a      	str	r2, [r3, #8]
 80056f0:	60da      	str	r2, [r3, #12]
 80056f2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a4a      	ldr	r2, [pc, #296]	@ (8005824 <HAL_ETH_MspInit+0x148>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	f040 808d 	bne.w	800581a <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005700:	2300      	movs	r3, #0
 8005702:	623b      	str	r3, [r7, #32]
 8005704:	4b48      	ldr	r3, [pc, #288]	@ (8005828 <HAL_ETH_MspInit+0x14c>)
 8005706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005708:	4a47      	ldr	r2, [pc, #284]	@ (8005828 <HAL_ETH_MspInit+0x14c>)
 800570a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800570e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005710:	4b45      	ldr	r3, [pc, #276]	@ (8005828 <HAL_ETH_MspInit+0x14c>)
 8005712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005718:	623b      	str	r3, [r7, #32]
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	2300      	movs	r3, #0
 800571e:	61fb      	str	r3, [r7, #28]
 8005720:	4b41      	ldr	r3, [pc, #260]	@ (8005828 <HAL_ETH_MspInit+0x14c>)
 8005722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005724:	4a40      	ldr	r2, [pc, #256]	@ (8005828 <HAL_ETH_MspInit+0x14c>)
 8005726:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800572a:	6313      	str	r3, [r2, #48]	@ 0x30
 800572c:	4b3e      	ldr	r3, [pc, #248]	@ (8005828 <HAL_ETH_MspInit+0x14c>)
 800572e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005730:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005734:	61fb      	str	r3, [r7, #28]
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	2300      	movs	r3, #0
 800573a:	61bb      	str	r3, [r7, #24]
 800573c:	4b3a      	ldr	r3, [pc, #232]	@ (8005828 <HAL_ETH_MspInit+0x14c>)
 800573e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005740:	4a39      	ldr	r2, [pc, #228]	@ (8005828 <HAL_ETH_MspInit+0x14c>)
 8005742:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005746:	6313      	str	r3, [r2, #48]	@ 0x30
 8005748:	4b37      	ldr	r3, [pc, #220]	@ (8005828 <HAL_ETH_MspInit+0x14c>)
 800574a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800574c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005750:	61bb      	str	r3, [r7, #24]
 8005752:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005754:	2300      	movs	r3, #0
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	4b33      	ldr	r3, [pc, #204]	@ (8005828 <HAL_ETH_MspInit+0x14c>)
 800575a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575c:	4a32      	ldr	r2, [pc, #200]	@ (8005828 <HAL_ETH_MspInit+0x14c>)
 800575e:	f043 0304 	orr.w	r3, r3, #4
 8005762:	6313      	str	r3, [r2, #48]	@ 0x30
 8005764:	4b30      	ldr	r3, [pc, #192]	@ (8005828 <HAL_ETH_MspInit+0x14c>)
 8005766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005768:	f003 0304 	and.w	r3, r3, #4
 800576c:	617b      	str	r3, [r7, #20]
 800576e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005770:	2300      	movs	r3, #0
 8005772:	613b      	str	r3, [r7, #16]
 8005774:	4b2c      	ldr	r3, [pc, #176]	@ (8005828 <HAL_ETH_MspInit+0x14c>)
 8005776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005778:	4a2b      	ldr	r2, [pc, #172]	@ (8005828 <HAL_ETH_MspInit+0x14c>)
 800577a:	f043 0301 	orr.w	r3, r3, #1
 800577e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005780:	4b29      	ldr	r3, [pc, #164]	@ (8005828 <HAL_ETH_MspInit+0x14c>)
 8005782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	613b      	str	r3, [r7, #16]
 800578a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800578c:	2300      	movs	r3, #0
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	4b25      	ldr	r3, [pc, #148]	@ (8005828 <HAL_ETH_MspInit+0x14c>)
 8005792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005794:	4a24      	ldr	r2, [pc, #144]	@ (8005828 <HAL_ETH_MspInit+0x14c>)
 8005796:	f043 0302 	orr.w	r3, r3, #2
 800579a:	6313      	str	r3, [r2, #48]	@ 0x30
 800579c:	4b22      	ldr	r3, [pc, #136]	@ (8005828 <HAL_ETH_MspInit+0x14c>)
 800579e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a0:	f003 0302 	and.w	r3, r3, #2
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80057a8:	2332      	movs	r3, #50	@ 0x32
 80057aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ac:	2302      	movs	r3, #2
 80057ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057b0:	2300      	movs	r3, #0
 80057b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057b4:	2303      	movs	r3, #3
 80057b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80057b8:	230b      	movs	r3, #11
 80057ba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057c0:	4619      	mov	r1, r3
 80057c2:	481a      	ldr	r0, [pc, #104]	@ (800582c <HAL_ETH_MspInit+0x150>)
 80057c4:	f7fd ff0c 	bl	80035e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80057c8:	2386      	movs	r3, #134	@ 0x86
 80057ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057cc:	2302      	movs	r3, #2
 80057ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d0:	2300      	movs	r3, #0
 80057d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057d4:	2303      	movs	r3, #3
 80057d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80057d8:	230b      	movs	r3, #11
 80057da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057e0:	4619      	mov	r1, r3
 80057e2:	4813      	ldr	r0, [pc, #76]	@ (8005830 <HAL_ETH_MspInit+0x154>)
 80057e4:	f7fd fefc 	bl	80035e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80057e8:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80057ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ee:	2302      	movs	r3, #2
 80057f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057f2:	2300      	movs	r3, #0
 80057f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057f6:	2303      	movs	r3, #3
 80057f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80057fa:	230b      	movs	r3, #11
 80057fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005802:	4619      	mov	r1, r3
 8005804:	480b      	ldr	r0, [pc, #44]	@ (8005834 <HAL_ETH_MspInit+0x158>)
 8005806:	f7fd feeb 	bl	80035e0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800580a:	2200      	movs	r2, #0
 800580c:	2100      	movs	r1, #0
 800580e:	203d      	movs	r0, #61	@ 0x3d
 8005810:	f7fc fc5f 	bl	80020d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005814:	203d      	movs	r0, #61	@ 0x3d
 8005816:	f7fc fc78 	bl	800210a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800581a:	bf00      	nop
 800581c:	3738      	adds	r7, #56	@ 0x38
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	40028000 	.word	0x40028000
 8005828:	40023800 	.word	0x40023800
 800582c:	40020800 	.word	0x40020800
 8005830:	40020000 	.word	0x40020000
 8005834:	40020400 	.word	0x40020400

08005838 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800583c:	4802      	ldr	r0, [pc, #8]	@ (8005848 <ETH_PHY_IO_Init+0x10>)
 800583e:	f7fd fa6b 	bl	8002d18 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	bd80      	pop	{r7, pc}
 8005848:	20004d60 	.word	0x20004d60

0800584c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0
  return 0;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	68f9      	ldr	r1, [r7, #12]
 800586e:	4807      	ldr	r0, [pc, #28]	@ (800588c <ETH_PHY_IO_ReadReg+0x30>)
 8005870:	f7fd f8ac 	bl	80029cc <HAL_ETH_ReadPHYRegister>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800587a:	f04f 33ff 	mov.w	r3, #4294967295
 800587e:	e000      	b.n	8005882 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	20004d60 	.word	0x20004d60

08005890 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	68f9      	ldr	r1, [r7, #12]
 80058a2:	4807      	ldr	r0, [pc, #28]	@ (80058c0 <ETH_PHY_IO_WriteReg+0x30>)
 80058a4:	f7fd f8dd 	bl	8002a62 <HAL_ETH_WritePHYRegister>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80058ae:	f04f 33ff 	mov.w	r3, #4294967295
 80058b2:	e000      	b.n	80058b6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	20004d60 	.word	0x20004d60

080058c4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80058c8:	f7fb fe7c 	bl	80015c4 <HAL_GetTick>
 80058cc:	4603      	mov	r3, r0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	bd80      	pop	{r7, pc}
	...

080058d4 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b0a0      	sub	sp, #128	@ 0x80
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80058dc:	f107 030c 	add.w	r3, r7, #12
 80058e0:	2264      	movs	r2, #100	@ 0x64
 80058e2:	2100      	movs	r1, #0
 80058e4:	4618      	mov	r0, r3
 80058e6:	f00c f91a 	bl	8011b1e <memset>
  int32_t PHYLinkState = 0;
 80058ea:	2300      	movs	r3, #0
 80058ec:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80058f2:	2300      	movs	r3, #0
 80058f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80058f6:	2300      	movs	r3, #0
 80058f8:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80058fa:	483a      	ldr	r0, [pc, #232]	@ (80059e4 <ethernet_link_check_state+0x110>)
 80058fc:	f7fb fd74 	bl	80013e8 <LAN8742_GetLinkState>
 8005900:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005908:	089b      	lsrs	r3, r3, #2
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00c      	beq.n	800592e <ethernet_link_check_state+0x5a>
 8005914:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005916:	2b01      	cmp	r3, #1
 8005918:	dc09      	bgt.n	800592e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 800591a:	4833      	ldr	r0, [pc, #204]	@ (80059e8 <ethernet_link_check_state+0x114>)
 800591c:	f7fc fd1c 	bl	8002358 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f001 f81b 	bl	800695c <netif_set_down>
    netif_set_link_down(netif);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f001 f87e 	bl	8006a28 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800592c:	e055      	b.n	80059da <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005934:	f003 0304 	and.w	r3, r3, #4
 8005938:	2b00      	cmp	r3, #0
 800593a:	d14e      	bne.n	80059da <ethernet_link_check_state+0x106>
 800593c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800593e:	2b01      	cmp	r3, #1
 8005940:	dd4b      	ble.n	80059da <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8005942:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005944:	3b02      	subs	r3, #2
 8005946:	2b03      	cmp	r3, #3
 8005948:	d82a      	bhi.n	80059a0 <ethernet_link_check_state+0xcc>
 800594a:	a201      	add	r2, pc, #4	@ (adr r2, 8005950 <ethernet_link_check_state+0x7c>)
 800594c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005950:	08005961 	.word	0x08005961
 8005954:	08005973 	.word	0x08005973
 8005958:	08005983 	.word	0x08005983
 800595c:	08005993 	.word	0x08005993
      duplex = ETH_FULLDUPLEX_MODE;
 8005960:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005964:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005966:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800596a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800596c:	2301      	movs	r3, #1
 800596e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005970:	e017      	b.n	80059a2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8005972:	2300      	movs	r3, #0
 8005974:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005976:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800597a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800597c:	2301      	movs	r3, #1
 800597e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005980:	e00f      	b.n	80059a2 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8005982:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005986:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005988:	2300      	movs	r3, #0
 800598a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800598c:	2301      	movs	r3, #1
 800598e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005990:	e007      	b.n	80059a2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8005992:	2300      	movs	r3, #0
 8005994:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005996:	2300      	movs	r3, #0
 8005998:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800599a:	2301      	movs	r3, #1
 800599c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800599e:	e000      	b.n	80059a2 <ethernet_link_check_state+0xce>
      break;
 80059a0:	bf00      	nop
    if(linkchanged)
 80059a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d018      	beq.n	80059da <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80059a8:	f107 030c 	add.w	r3, r7, #12
 80059ac:	4619      	mov	r1, r3
 80059ae:	480e      	ldr	r0, [pc, #56]	@ (80059e8 <ethernet_link_check_state+0x114>)
 80059b0:	f7fd f8a0 	bl	8002af4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80059b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059b6:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 80059b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059ba:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80059bc:	f107 030c 	add.w	r3, r7, #12
 80059c0:	4619      	mov	r1, r3
 80059c2:	4809      	ldr	r0, [pc, #36]	@ (80059e8 <ethernet_link_check_state+0x114>)
 80059c4:	f7fd f98d 	bl	8002ce2 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80059c8:	4807      	ldr	r0, [pc, #28]	@ (80059e8 <ethernet_link_check_state+0x114>)
 80059ca:	f7fc fc55 	bl	8002278 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 ff58 	bl	8006884 <netif_set_up>
      netif_set_link_up(netif);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 fff3 	bl	80069c0 <netif_set_link_up>
}
 80059da:	bf00      	nop
 80059dc:	3780      	adds	r7, #128	@ 0x80
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	20004e48 	.word	0x20004e48
 80059e8:	20004d60 	.word	0x20004d60

080059ec <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af02      	add	r7, sp, #8
 80059f2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80059f4:	4812      	ldr	r0, [pc, #72]	@ (8005a40 <HAL_ETH_RxAllocateCallback+0x54>)
 80059f6:	f000 fcbf 	bl	8006378 <memp_malloc_pool>
 80059fa:	60f8      	str	r0, [r7, #12]
  if (p)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d014      	beq.n	8005a2c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f103 0220 	add.w	r2, r3, #32
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4a0d      	ldr	r2, [pc, #52]	@ (8005a44 <HAL_ETH_RxAllocateCallback+0x58>)
 8005a10:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005a1a:	9201      	str	r2, [sp, #4]
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2241      	movs	r2, #65	@ 0x41
 8005a22:	2100      	movs	r1, #0
 8005a24:	2000      	movs	r0, #0
 8005a26:	f001 f9f5 	bl	8006e14 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005a2a:	e005      	b.n	8005a38 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005a2c:	4b06      	ldr	r3, [pc, #24]	@ (8005a48 <HAL_ETH_RxAllocateCallback+0x5c>)
 8005a2e:	2201      	movs	r2, #1
 8005a30:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	601a      	str	r2, [r3, #0]
}
 8005a38:	bf00      	nop
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	08015750 	.word	0x08015750
 8005a44:	08005699 	.word	0x08005699
 8005a48:	20004c1c 	.word	0x20004c1c

08005a4c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b089      	sub	sp, #36	@ 0x24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
 8005a58:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8005a62:	2300      	movs	r3, #0
 8005a64:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	3b20      	subs	r3, #32
 8005a6a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	2200      	movs	r2, #0
 8005a76:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	887a      	ldrh	r2, [r7, #2]
 8005a7c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d103      	bne.n	8005a8e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	69fa      	ldr	r2, [r7, #28]
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	e003      	b.n	8005a96 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	69fa      	ldr	r2, [r7, #28]
 8005a94:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	69fa      	ldr	r2, [r7, #28]
 8005a9a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	61fb      	str	r3, [r7, #28]
 8005aa2:	e009      	b.n	8005ab8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	891a      	ldrh	r2, [r3, #8]
 8005aa8:	887b      	ldrh	r3, [r7, #2]
 8005aaa:	4413      	add	r3, r2
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	61fb      	str	r3, [r7, #28]
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1f2      	bne.n	8005aa4 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005abe:	bf00      	nop
 8005ac0:	bf00      	nop
 8005ac2:	3724      	adds	r7, #36	@ 0x24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005ad6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ada:	021b      	lsls	r3, r3, #8
 8005adc:	b21a      	sxth	r2, r3
 8005ade:	88fb      	ldrh	r3, [r7, #6]
 8005ae0:	0a1b      	lsrs	r3, r3, #8
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	b21b      	sxth	r3, r3
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	b21b      	sxth	r3, r3
 8005aea:	b29b      	uxth	r3, r3
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	061a      	lsls	r2, r3, #24
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	021b      	lsls	r3, r3, #8
 8005b08:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	0a1b      	lsrs	r3, r3, #8
 8005b12:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005b16:	431a      	orrs	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	0e1b      	lsrs	r3, r3, #24
 8005b1c:	4313      	orrs	r3, r2
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b082      	sub	sp, #8
 8005b2e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8005b30:	2300      	movs	r3, #0
 8005b32:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005b34:	f000 f8d4 	bl	8005ce0 <mem_init>
  memp_init();
 8005b38:	f000 fbda 	bl	80062f0 <memp_init>
  pbuf_init();
  netif_init();
 8005b3c:	f000 fcd8 	bl	80064f0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005b40:	f007 fea6 	bl	800d890 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005b44:	f001 fdae 	bl	80076a4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005b48:	f007 fe18 	bl	800d77c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005b4c:	bf00      	nop
 8005b4e:	3708      	adds	r7, #8
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8005b5e:	4b05      	ldr	r3, [pc, #20]	@ (8005b74 <ptr_to_mem+0x20>)
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	88fb      	ldrh	r3, [r7, #6]
 8005b64:	4413      	add	r3, r2
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	200054d4 	.word	0x200054d4

08005b78 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005b80:	4b05      	ldr	r3, [pc, #20]	@ (8005b98 <mem_to_ptr+0x20>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	b29b      	uxth	r3, r3
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	200054d4 	.word	0x200054d4

08005b9c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005b9c:	b590      	push	{r4, r7, lr}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005ba4:	4b45      	ldr	r3, [pc, #276]	@ (8005cbc <plug_holes+0x120>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d206      	bcs.n	8005bbc <plug_holes+0x20>
 8005bae:	4b44      	ldr	r3, [pc, #272]	@ (8005cc0 <plug_holes+0x124>)
 8005bb0:	f240 12df 	movw	r2, #479	@ 0x1df
 8005bb4:	4943      	ldr	r1, [pc, #268]	@ (8005cc4 <plug_holes+0x128>)
 8005bb6:	4844      	ldr	r0, [pc, #272]	@ (8005cc8 <plug_holes+0x12c>)
 8005bb8:	f00b fefc 	bl	80119b4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005bbc:	4b43      	ldr	r3, [pc, #268]	@ (8005ccc <plug_holes+0x130>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d306      	bcc.n	8005bd4 <plug_holes+0x38>
 8005bc6:	4b3e      	ldr	r3, [pc, #248]	@ (8005cc0 <plug_holes+0x124>)
 8005bc8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8005bcc:	4940      	ldr	r1, [pc, #256]	@ (8005cd0 <plug_holes+0x134>)
 8005bce:	483e      	ldr	r0, [pc, #248]	@ (8005cc8 <plug_holes+0x12c>)
 8005bd0:	f00b fef0 	bl	80119b4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	791b      	ldrb	r3, [r3, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d006      	beq.n	8005bea <plug_holes+0x4e>
 8005bdc:	4b38      	ldr	r3, [pc, #224]	@ (8005cc0 <plug_holes+0x124>)
 8005bde:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8005be2:	493c      	ldr	r1, [pc, #240]	@ (8005cd4 <plug_holes+0x138>)
 8005be4:	4838      	ldr	r0, [pc, #224]	@ (8005cc8 <plug_holes+0x12c>)
 8005be6:	f00b fee5 	bl	80119b4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005bf2:	d906      	bls.n	8005c02 <plug_holes+0x66>
 8005bf4:	4b32      	ldr	r3, [pc, #200]	@ (8005cc0 <plug_holes+0x124>)
 8005bf6:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8005bfa:	4937      	ldr	r1, [pc, #220]	@ (8005cd8 <plug_holes+0x13c>)
 8005bfc:	4832      	ldr	r0, [pc, #200]	@ (8005cc8 <plug_holes+0x12c>)
 8005bfe:	f00b fed9 	bl	80119b4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff ffa4 	bl	8005b54 <ptr_to_mem>
 8005c0c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d024      	beq.n	8005c60 <plug_holes+0xc4>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	791b      	ldrb	r3, [r3, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d120      	bne.n	8005c60 <plug_holes+0xc4>
 8005c1e:	4b2b      	ldr	r3, [pc, #172]	@ (8005ccc <plug_holes+0x130>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d01b      	beq.n	8005c60 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005c28:	4b2c      	ldr	r3, [pc, #176]	@ (8005cdc <plug_holes+0x140>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d102      	bne.n	8005c38 <plug_holes+0x9c>
      lfree = mem;
 8005c32:	4a2a      	ldr	r2, [pc, #168]	@ (8005cdc <plug_holes+0x140>)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	881a      	ldrh	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	881b      	ldrh	r3, [r3, #0]
 8005c44:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005c48:	d00a      	beq.n	8005c60 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7ff ff80 	bl	8005b54 <ptr_to_mem>
 8005c54:	4604      	mov	r4, r0
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7ff ff8e 	bl	8005b78 <mem_to_ptr>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	885b      	ldrh	r3, [r3, #2]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7ff ff75 	bl	8005b54 <ptr_to_mem>
 8005c6a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d01f      	beq.n	8005cb4 <plug_holes+0x118>
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	791b      	ldrb	r3, [r3, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d11b      	bne.n	8005cb4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005c7c:	4b17      	ldr	r3, [pc, #92]	@ (8005cdc <plug_holes+0x140>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d102      	bne.n	8005c8c <plug_holes+0xf0>
      lfree = pmem;
 8005c86:	4a15      	ldr	r2, [pc, #84]	@ (8005cdc <plug_holes+0x140>)
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	881a      	ldrh	r2, [r3, #0]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	881b      	ldrh	r3, [r3, #0]
 8005c98:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005c9c:	d00a      	beq.n	8005cb4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7ff ff56 	bl	8005b54 <ptr_to_mem>
 8005ca8:	4604      	mov	r4, r0
 8005caa:	68b8      	ldr	r0, [r7, #8]
 8005cac:	f7ff ff64 	bl	8005b78 <mem_to_ptr>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005cb4:	bf00      	nop
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd90      	pop	{r4, r7, pc}
 8005cbc:	200054d4 	.word	0x200054d4
 8005cc0:	08012c58 	.word	0x08012c58
 8005cc4:	08012c88 	.word	0x08012c88
 8005cc8:	08012ca0 	.word	0x08012ca0
 8005ccc:	200054d8 	.word	0x200054d8
 8005cd0:	08012cc8 	.word	0x08012cc8
 8005cd4:	08012ce4 	.word	0x08012ce4
 8005cd8:	08012d00 	.word	0x08012d00
 8005cdc:	200054dc 	.word	0x200054dc

08005ce0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005ce6:	4b18      	ldr	r3, [pc, #96]	@ (8005d48 <mem_init+0x68>)
 8005ce8:	3303      	adds	r3, #3
 8005cea:	f023 0303 	bic.w	r3, r3, #3
 8005cee:	461a      	mov	r2, r3
 8005cf0:	4b16      	ldr	r3, [pc, #88]	@ (8005d4c <mem_init+0x6c>)
 8005cf2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005cf4:	4b15      	ldr	r3, [pc, #84]	@ (8005d4c <mem_init+0x6c>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8005d00:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005d0e:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8005d12:	f7ff ff1f 	bl	8005b54 <ptr_to_mem>
 8005d16:	4603      	mov	r3, r0
 8005d18:	4a0d      	ldr	r2, [pc, #52]	@ (8005d50 <mem_init+0x70>)
 8005d1a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8005d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8005d50 <mem_init+0x70>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2201      	movs	r2, #1
 8005d22:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005d24:	4b0a      	ldr	r3, [pc, #40]	@ (8005d50 <mem_init+0x70>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8005d2c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005d2e:	4b08      	ldr	r3, [pc, #32]	@ (8005d50 <mem_init+0x70>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8005d36:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005d38:	4b04      	ldr	r3, [pc, #16]	@ (8005d4c <mem_init+0x6c>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a05      	ldr	r2, [pc, #20]	@ (8005d54 <mem_init+0x74>)
 8005d3e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005d40:	bf00      	nop
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	20004e80 	.word	0x20004e80
 8005d4c:	200054d4 	.word	0x200054d4
 8005d50:	200054d8 	.word	0x200054d8
 8005d54:	200054dc 	.word	0x200054dc

08005d58 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f7ff ff09 	bl	8005b78 <mem_to_ptr>
 8005d66:	4603      	mov	r3, r0
 8005d68:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	881b      	ldrh	r3, [r3, #0]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff fef0 	bl	8005b54 <ptr_to_mem>
 8005d74:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	885b      	ldrh	r3, [r3, #2]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7ff feea 	bl	8005b54 <ptr_to_mem>
 8005d80:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005d8a:	d818      	bhi.n	8005dbe <mem_link_valid+0x66>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	885b      	ldrh	r3, [r3, #2]
 8005d90:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005d94:	d813      	bhi.n	8005dbe <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005d9a:	8afa      	ldrh	r2, [r7, #22]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d004      	beq.n	8005daa <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	8afa      	ldrh	r2, [r7, #22]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d109      	bne.n	8005dbe <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005daa:	4b08      	ldr	r3, [pc, #32]	@ (8005dcc <mem_link_valid+0x74>)
 8005dac:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d006      	beq.n	8005dc2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	885b      	ldrh	r3, [r3, #2]
 8005db8:	8afa      	ldrh	r2, [r7, #22]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d001      	beq.n	8005dc2 <mem_link_valid+0x6a>
    return 0;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	e000      	b.n	8005dc4 <mem_link_valid+0x6c>
  }
  return 1;
 8005dc2:	2301      	movs	r3, #1
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3718      	adds	r7, #24
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	200054d8 	.word	0x200054d8

08005dd0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d04c      	beq.n	8005e78 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f003 0303 	and.w	r3, r3, #3
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d007      	beq.n	8005df8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005de8:	4b25      	ldr	r3, [pc, #148]	@ (8005e80 <mem_free+0xb0>)
 8005dea:	f240 2273 	movw	r2, #627	@ 0x273
 8005dee:	4925      	ldr	r1, [pc, #148]	@ (8005e84 <mem_free+0xb4>)
 8005df0:	4825      	ldr	r0, [pc, #148]	@ (8005e88 <mem_free+0xb8>)
 8005df2:	f00b fddf 	bl	80119b4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005df6:	e040      	b.n	8005e7a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	3b08      	subs	r3, #8
 8005dfc:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005dfe:	4b23      	ldr	r3, [pc, #140]	@ (8005e8c <mem_free+0xbc>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d306      	bcc.n	8005e16 <mem_free+0x46>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f103 020c 	add.w	r2, r3, #12
 8005e0e:	4b20      	ldr	r3, [pc, #128]	@ (8005e90 <mem_free+0xc0>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d907      	bls.n	8005e26 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005e16:	4b1a      	ldr	r3, [pc, #104]	@ (8005e80 <mem_free+0xb0>)
 8005e18:	f240 227f 	movw	r2, #639	@ 0x27f
 8005e1c:	491d      	ldr	r1, [pc, #116]	@ (8005e94 <mem_free+0xc4>)
 8005e1e:	481a      	ldr	r0, [pc, #104]	@ (8005e88 <mem_free+0xb8>)
 8005e20:	f00b fdc8 	bl	80119b4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005e24:	e029      	b.n	8005e7a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	791b      	ldrb	r3, [r3, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d107      	bne.n	8005e3e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005e2e:	4b14      	ldr	r3, [pc, #80]	@ (8005e80 <mem_free+0xb0>)
 8005e30:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8005e34:	4918      	ldr	r1, [pc, #96]	@ (8005e98 <mem_free+0xc8>)
 8005e36:	4814      	ldr	r0, [pc, #80]	@ (8005e88 <mem_free+0xb8>)
 8005e38:	f00b fdbc 	bl	80119b4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005e3c:	e01d      	b.n	8005e7a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f7ff ff8a 	bl	8005d58 <mem_link_valid>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d107      	bne.n	8005e5a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e80 <mem_free+0xb0>)
 8005e4c:	f240 2295 	movw	r2, #661	@ 0x295
 8005e50:	4912      	ldr	r1, [pc, #72]	@ (8005e9c <mem_free+0xcc>)
 8005e52:	480d      	ldr	r0, [pc, #52]	@ (8005e88 <mem_free+0xb8>)
 8005e54:	f00b fdae 	bl	80119b4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005e58:	e00f      	b.n	8005e7a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005e60:	4b0f      	ldr	r3, [pc, #60]	@ (8005ea0 <mem_free+0xd0>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d202      	bcs.n	8005e70 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005e6a:	4a0d      	ldr	r2, [pc, #52]	@ (8005ea0 <mem_free+0xd0>)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f7ff fe93 	bl	8005b9c <plug_holes>
 8005e76:	e000      	b.n	8005e7a <mem_free+0xaa>
    return;
 8005e78:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	08012c58 	.word	0x08012c58
 8005e84:	08012d2c 	.word	0x08012d2c
 8005e88:	08012ca0 	.word	0x08012ca0
 8005e8c:	200054d4 	.word	0x200054d4
 8005e90:	200054d8 	.word	0x200054d8
 8005e94:	08012d50 	.word	0x08012d50
 8005e98:	08012d6c 	.word	0x08012d6c
 8005e9c:	08012d94 	.word	0x08012d94
 8005ea0:	200054dc 	.word	0x200054dc

08005ea4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b088      	sub	sp, #32
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	460b      	mov	r3, r1
 8005eae:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005eb0:	887b      	ldrh	r3, [r7, #2]
 8005eb2:	3303      	adds	r3, #3
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	f023 0303 	bic.w	r3, r3, #3
 8005eba:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005ebc:	8bfb      	ldrh	r3, [r7, #30]
 8005ebe:	2b0b      	cmp	r3, #11
 8005ec0:	d801      	bhi.n	8005ec6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005ec2:	230c      	movs	r3, #12
 8005ec4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005ec6:	8bfb      	ldrh	r3, [r7, #30]
 8005ec8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005ecc:	d803      	bhi.n	8005ed6 <mem_trim+0x32>
 8005ece:	8bfa      	ldrh	r2, [r7, #30]
 8005ed0:	887b      	ldrh	r3, [r7, #2]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d201      	bcs.n	8005eda <mem_trim+0x36>
    return NULL;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	e0cc      	b.n	8006074 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005eda:	4b68      	ldr	r3, [pc, #416]	@ (800607c <mem_trim+0x1d8>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d304      	bcc.n	8005eee <mem_trim+0x4a>
 8005ee4:	4b66      	ldr	r3, [pc, #408]	@ (8006080 <mem_trim+0x1dc>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d306      	bcc.n	8005efc <mem_trim+0x58>
 8005eee:	4b65      	ldr	r3, [pc, #404]	@ (8006084 <mem_trim+0x1e0>)
 8005ef0:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8005ef4:	4964      	ldr	r1, [pc, #400]	@ (8006088 <mem_trim+0x1e4>)
 8005ef6:	4865      	ldr	r0, [pc, #404]	@ (800608c <mem_trim+0x1e8>)
 8005ef8:	f00b fd5c 	bl	80119b4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005efc:	4b5f      	ldr	r3, [pc, #380]	@ (800607c <mem_trim+0x1d8>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d304      	bcc.n	8005f10 <mem_trim+0x6c>
 8005f06:	4b5e      	ldr	r3, [pc, #376]	@ (8006080 <mem_trim+0x1dc>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d301      	bcc.n	8005f14 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	e0af      	b.n	8006074 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3b08      	subs	r3, #8
 8005f18:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005f1a:	69b8      	ldr	r0, [r7, #24]
 8005f1c:	f7ff fe2c 	bl	8005b78 <mem_to_ptr>
 8005f20:	4603      	mov	r3, r0
 8005f22:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	881a      	ldrh	r2, [r3, #0]
 8005f28:	8afb      	ldrh	r3, [r7, #22]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	3b08      	subs	r3, #8
 8005f30:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005f32:	8bfa      	ldrh	r2, [r7, #30]
 8005f34:	8abb      	ldrh	r3, [r7, #20]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d906      	bls.n	8005f48 <mem_trim+0xa4>
 8005f3a:	4b52      	ldr	r3, [pc, #328]	@ (8006084 <mem_trim+0x1e0>)
 8005f3c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8005f40:	4953      	ldr	r1, [pc, #332]	@ (8006090 <mem_trim+0x1ec>)
 8005f42:	4852      	ldr	r0, [pc, #328]	@ (800608c <mem_trim+0x1e8>)
 8005f44:	f00b fd36 	bl	80119b4 <iprintf>
  if (newsize > size) {
 8005f48:	8bfa      	ldrh	r2, [r7, #30]
 8005f4a:	8abb      	ldrh	r3, [r7, #20]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d901      	bls.n	8005f54 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005f50:	2300      	movs	r3, #0
 8005f52:	e08f      	b.n	8006074 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005f54:	8bfa      	ldrh	r2, [r7, #30]
 8005f56:	8abb      	ldrh	r3, [r7, #20]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d101      	bne.n	8005f60 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	e089      	b.n	8006074 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	881b      	ldrh	r3, [r3, #0]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7ff fdf5 	bl	8005b54 <ptr_to_mem>
 8005f6a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	791b      	ldrb	r3, [r3, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d13f      	bne.n	8005ff4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005f7c:	d106      	bne.n	8005f8c <mem_trim+0xe8>
 8005f7e:	4b41      	ldr	r3, [pc, #260]	@ (8006084 <mem_trim+0x1e0>)
 8005f80:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8005f84:	4943      	ldr	r1, [pc, #268]	@ (8006094 <mem_trim+0x1f0>)
 8005f86:	4841      	ldr	r0, [pc, #260]	@ (800608c <mem_trim+0x1e8>)
 8005f88:	f00b fd14 	bl	80119b4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005f92:	8afa      	ldrh	r2, [r7, #22]
 8005f94:	8bfb      	ldrh	r3, [r7, #30]
 8005f96:	4413      	add	r3, r2
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3308      	adds	r3, #8
 8005f9c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005f9e:	4b3e      	ldr	r3, [pc, #248]	@ (8006098 <mem_trim+0x1f4>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d106      	bne.n	8005fb6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005fa8:	89fb      	ldrh	r3, [r7, #14]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7ff fdd2 	bl	8005b54 <ptr_to_mem>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	4a39      	ldr	r2, [pc, #228]	@ (8006098 <mem_trim+0x1f4>)
 8005fb4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005fb6:	89fb      	ldrh	r3, [r7, #14]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7ff fdcb 	bl	8005b54 <ptr_to_mem>
 8005fbe:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	89ba      	ldrh	r2, [r7, #12]
 8005fca:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	8afa      	ldrh	r2, [r7, #22]
 8005fd0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	89fa      	ldrh	r2, [r7, #14]
 8005fd6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005fe0:	d047      	beq.n	8006072 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7ff fdb4 	bl	8005b54 <ptr_to_mem>
 8005fec:	4602      	mov	r2, r0
 8005fee:	89fb      	ldrh	r3, [r7, #14]
 8005ff0:	8053      	strh	r3, [r2, #2]
 8005ff2:	e03e      	b.n	8006072 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005ff4:	8bfb      	ldrh	r3, [r7, #30]
 8005ff6:	f103 0214 	add.w	r2, r3, #20
 8005ffa:	8abb      	ldrh	r3, [r7, #20]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d838      	bhi.n	8006072 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006000:	8afa      	ldrh	r2, [r7, #22]
 8006002:	8bfb      	ldrh	r3, [r7, #30]
 8006004:	4413      	add	r3, r2
 8006006:	b29b      	uxth	r3, r3
 8006008:	3308      	adds	r3, #8
 800600a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	881b      	ldrh	r3, [r3, #0]
 8006010:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006014:	d106      	bne.n	8006024 <mem_trim+0x180>
 8006016:	4b1b      	ldr	r3, [pc, #108]	@ (8006084 <mem_trim+0x1e0>)
 8006018:	f240 3216 	movw	r2, #790	@ 0x316
 800601c:	491d      	ldr	r1, [pc, #116]	@ (8006094 <mem_trim+0x1f0>)
 800601e:	481b      	ldr	r0, [pc, #108]	@ (800608c <mem_trim+0x1e8>)
 8006020:	f00b fcc8 	bl	80119b4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8006024:	89fb      	ldrh	r3, [r7, #14]
 8006026:	4618      	mov	r0, r3
 8006028:	f7ff fd94 	bl	8005b54 <ptr_to_mem>
 800602c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800602e:	4b1a      	ldr	r3, [pc, #104]	@ (8006098 <mem_trim+0x1f4>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	429a      	cmp	r2, r3
 8006036:	d202      	bcs.n	800603e <mem_trim+0x19a>
      lfree = mem2;
 8006038:	4a17      	ldr	r2, [pc, #92]	@ (8006098 <mem_trim+0x1f4>)
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	2200      	movs	r2, #0
 8006042:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	881a      	ldrh	r2, [r3, #0]
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	8afa      	ldrh	r2, [r7, #22]
 8006050:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	89fa      	ldrh	r2, [r7, #14]
 8006056:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006060:	d007      	beq.n	8006072 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	4618      	mov	r0, r3
 8006068:	f7ff fd74 	bl	8005b54 <ptr_to_mem>
 800606c:	4602      	mov	r2, r0
 800606e:	89fb      	ldrh	r3, [r7, #14]
 8006070:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8006072:	687b      	ldr	r3, [r7, #4]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3720      	adds	r7, #32
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	200054d4 	.word	0x200054d4
 8006080:	200054d8 	.word	0x200054d8
 8006084:	08012c58 	.word	0x08012c58
 8006088:	08012dc8 	.word	0x08012dc8
 800608c:	08012ca0 	.word	0x08012ca0
 8006090:	08012de0 	.word	0x08012de0
 8006094:	08012e00 	.word	0x08012e00
 8006098:	200054dc 	.word	0x200054dc

0800609c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b088      	sub	sp, #32
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	4603      	mov	r3, r0
 80060a4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80060a6:	88fb      	ldrh	r3, [r7, #6]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <mem_malloc+0x14>
    return NULL;
 80060ac:	2300      	movs	r3, #0
 80060ae:	e0d9      	b.n	8006264 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80060b0:	88fb      	ldrh	r3, [r7, #6]
 80060b2:	3303      	adds	r3, #3
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	f023 0303 	bic.w	r3, r3, #3
 80060ba:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80060bc:	8bbb      	ldrh	r3, [r7, #28]
 80060be:	2b0b      	cmp	r3, #11
 80060c0:	d801      	bhi.n	80060c6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80060c2:	230c      	movs	r3, #12
 80060c4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80060c6:	8bbb      	ldrh	r3, [r7, #28]
 80060c8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80060cc:	d803      	bhi.n	80060d6 <mem_malloc+0x3a>
 80060ce:	8bba      	ldrh	r2, [r7, #28]
 80060d0:	88fb      	ldrh	r3, [r7, #6]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d201      	bcs.n	80060da <mem_malloc+0x3e>
    return NULL;
 80060d6:	2300      	movs	r3, #0
 80060d8:	e0c4      	b.n	8006264 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80060da:	4b64      	ldr	r3, [pc, #400]	@ (800626c <mem_malloc+0x1d0>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4618      	mov	r0, r3
 80060e0:	f7ff fd4a 	bl	8005b78 <mem_to_ptr>
 80060e4:	4603      	mov	r3, r0
 80060e6:	83fb      	strh	r3, [r7, #30]
 80060e8:	e0b4      	b.n	8006254 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80060ea:	8bfb      	ldrh	r3, [r7, #30]
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7ff fd31 	bl	8005b54 <ptr_to_mem>
 80060f2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	791b      	ldrb	r3, [r3, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f040 80a4 	bne.w	8006246 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	461a      	mov	r2, r3
 8006104:	8bfb      	ldrh	r3, [r7, #30]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	f1a3 0208 	sub.w	r2, r3, #8
 800610c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800610e:	429a      	cmp	r2, r3
 8006110:	f0c0 8099 	bcc.w	8006246 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	881b      	ldrh	r3, [r3, #0]
 8006118:	461a      	mov	r2, r3
 800611a:	8bfb      	ldrh	r3, [r7, #30]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	f1a3 0208 	sub.w	r2, r3, #8
 8006122:	8bbb      	ldrh	r3, [r7, #28]
 8006124:	3314      	adds	r3, #20
 8006126:	429a      	cmp	r2, r3
 8006128:	d333      	bcc.n	8006192 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800612a:	8bfa      	ldrh	r2, [r7, #30]
 800612c:	8bbb      	ldrh	r3, [r7, #28]
 800612e:	4413      	add	r3, r2
 8006130:	b29b      	uxth	r3, r3
 8006132:	3308      	adds	r3, #8
 8006134:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006136:	8a7b      	ldrh	r3, [r7, #18]
 8006138:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800613c:	d106      	bne.n	800614c <mem_malloc+0xb0>
 800613e:	4b4c      	ldr	r3, [pc, #304]	@ (8006270 <mem_malloc+0x1d4>)
 8006140:	f240 3287 	movw	r2, #903	@ 0x387
 8006144:	494b      	ldr	r1, [pc, #300]	@ (8006274 <mem_malloc+0x1d8>)
 8006146:	484c      	ldr	r0, [pc, #304]	@ (8006278 <mem_malloc+0x1dc>)
 8006148:	f00b fc34 	bl	80119b4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800614c:	8a7b      	ldrh	r3, [r7, #18]
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff fd00 	bl	8005b54 <ptr_to_mem>
 8006154:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	881a      	ldrh	r2, [r3, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8bfa      	ldrh	r2, [r7, #30]
 8006168:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	8a7a      	ldrh	r2, [r7, #18]
 800616e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	2201      	movs	r2, #1
 8006174:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800617e:	d00b      	beq.n	8006198 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	4618      	mov	r0, r3
 8006186:	f7ff fce5 	bl	8005b54 <ptr_to_mem>
 800618a:	4602      	mov	r2, r0
 800618c:	8a7b      	ldrh	r3, [r7, #18]
 800618e:	8053      	strh	r3, [r2, #2]
 8006190:	e002      	b.n	8006198 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2201      	movs	r2, #1
 8006196:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006198:	4b34      	ldr	r3, [pc, #208]	@ (800626c <mem_malloc+0x1d0>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d127      	bne.n	80061f2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80061a2:	4b32      	ldr	r3, [pc, #200]	@ (800626c <mem_malloc+0x1d0>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80061a8:	e005      	b.n	80061b6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7ff fcd0 	bl	8005b54 <ptr_to_mem>
 80061b4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	791b      	ldrb	r3, [r3, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d004      	beq.n	80061c8 <mem_malloc+0x12c>
 80061be:	4b2f      	ldr	r3, [pc, #188]	@ (800627c <mem_malloc+0x1e0>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d1f0      	bne.n	80061aa <mem_malloc+0x10e>
          }
          lfree = cur;
 80061c8:	4a28      	ldr	r2, [pc, #160]	@ (800626c <mem_malloc+0x1d0>)
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80061ce:	4b27      	ldr	r3, [pc, #156]	@ (800626c <mem_malloc+0x1d0>)
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	4b2a      	ldr	r3, [pc, #168]	@ (800627c <mem_malloc+0x1e0>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d00b      	beq.n	80061f2 <mem_malloc+0x156>
 80061da:	4b24      	ldr	r3, [pc, #144]	@ (800626c <mem_malloc+0x1d0>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	791b      	ldrb	r3, [r3, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d006      	beq.n	80061f2 <mem_malloc+0x156>
 80061e4:	4b22      	ldr	r3, [pc, #136]	@ (8006270 <mem_malloc+0x1d4>)
 80061e6:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80061ea:	4925      	ldr	r1, [pc, #148]	@ (8006280 <mem_malloc+0x1e4>)
 80061ec:	4822      	ldr	r0, [pc, #136]	@ (8006278 <mem_malloc+0x1dc>)
 80061ee:	f00b fbe1 	bl	80119b4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80061f2:	8bba      	ldrh	r2, [r7, #28]
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	4413      	add	r3, r2
 80061f8:	3308      	adds	r3, #8
 80061fa:	4a20      	ldr	r2, [pc, #128]	@ (800627c <mem_malloc+0x1e0>)
 80061fc:	6812      	ldr	r2, [r2, #0]
 80061fe:	4293      	cmp	r3, r2
 8006200:	d906      	bls.n	8006210 <mem_malloc+0x174>
 8006202:	4b1b      	ldr	r3, [pc, #108]	@ (8006270 <mem_malloc+0x1d4>)
 8006204:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8006208:	491e      	ldr	r1, [pc, #120]	@ (8006284 <mem_malloc+0x1e8>)
 800620a:	481b      	ldr	r0, [pc, #108]	@ (8006278 <mem_malloc+0x1dc>)
 800620c:	f00b fbd2 	bl	80119b4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	f003 0303 	and.w	r3, r3, #3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d006      	beq.n	8006228 <mem_malloc+0x18c>
 800621a:	4b15      	ldr	r3, [pc, #84]	@ (8006270 <mem_malloc+0x1d4>)
 800621c:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8006220:	4919      	ldr	r1, [pc, #100]	@ (8006288 <mem_malloc+0x1ec>)
 8006222:	4815      	ldr	r0, [pc, #84]	@ (8006278 <mem_malloc+0x1dc>)
 8006224:	f00b fbc6 	bl	80119b4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f003 0303 	and.w	r3, r3, #3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d006      	beq.n	8006240 <mem_malloc+0x1a4>
 8006232:	4b0f      	ldr	r3, [pc, #60]	@ (8006270 <mem_malloc+0x1d4>)
 8006234:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8006238:	4914      	ldr	r1, [pc, #80]	@ (800628c <mem_malloc+0x1f0>)
 800623a:	480f      	ldr	r0, [pc, #60]	@ (8006278 <mem_malloc+0x1dc>)
 800623c:	f00b fbba 	bl	80119b4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	3308      	adds	r3, #8
 8006244:	e00e      	b.n	8006264 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006246:	8bfb      	ldrh	r3, [r7, #30]
 8006248:	4618      	mov	r0, r3
 800624a:	f7ff fc83 	bl	8005b54 <ptr_to_mem>
 800624e:	4603      	mov	r3, r0
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006254:	8bfa      	ldrh	r2, [r7, #30]
 8006256:	8bbb      	ldrh	r3, [r7, #28]
 8006258:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800625c:	429a      	cmp	r2, r3
 800625e:	f4ff af44 	bcc.w	80060ea <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3720      	adds	r7, #32
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	200054dc 	.word	0x200054dc
 8006270:	08012c58 	.word	0x08012c58
 8006274:	08012e00 	.word	0x08012e00
 8006278:	08012ca0 	.word	0x08012ca0
 800627c:	200054d8 	.word	0x200054d8
 8006280:	08012e14 	.word	0x08012e14
 8006284:	08012e30 	.word	0x08012e30
 8006288:	08012e60 	.word	0x08012e60
 800628c:	08012e90 	.word	0x08012e90

08006290 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	2200      	movs	r2, #0
 800629e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	3303      	adds	r3, #3
 80062a6:	f023 0303 	bic.w	r3, r3, #3
 80062aa:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80062ac:	2300      	movs	r3, #0
 80062ae:	60fb      	str	r3, [r7, #12]
 80062b0:	e011      	b.n	80062d6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	881b      	ldrh	r3, [r3, #0]
 80062c8:	461a      	mov	r2, r3
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	4413      	add	r3, r2
 80062ce:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	3301      	adds	r3, #1
 80062d4:	60fb      	str	r3, [r7, #12]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	885b      	ldrh	r3, [r3, #2]
 80062da:	461a      	mov	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	4293      	cmp	r3, r2
 80062e0:	dbe7      	blt.n	80062b2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80062e2:	bf00      	nop
 80062e4:	bf00      	nop
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80062f6:	2300      	movs	r3, #0
 80062f8:	80fb      	strh	r3, [r7, #6]
 80062fa:	e009      	b.n	8006310 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80062fc:	88fb      	ldrh	r3, [r7, #6]
 80062fe:	4a08      	ldr	r2, [pc, #32]	@ (8006320 <memp_init+0x30>)
 8006300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006304:	4618      	mov	r0, r3
 8006306:	f7ff ffc3 	bl	8006290 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800630a:	88fb      	ldrh	r3, [r7, #6]
 800630c:	3301      	adds	r3, #1
 800630e:	80fb      	strh	r3, [r7, #6]
 8006310:	88fb      	ldrh	r3, [r7, #6]
 8006312:	2b08      	cmp	r3, #8
 8006314:	d9f2      	bls.n	80062fc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006316:	bf00      	nop
 8006318:	bf00      	nop
 800631a:	3708      	adds	r7, #8
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	080157c8 	.word	0x080157c8

08006324 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d012      	beq.n	8006360 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	6812      	ldr	r2, [r2, #0]
 8006342:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f003 0303 	and.w	r3, r3, #3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d006      	beq.n	800635c <do_memp_malloc_pool+0x38>
 800634e:	4b07      	ldr	r3, [pc, #28]	@ (800636c <do_memp_malloc_pool+0x48>)
 8006350:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8006354:	4906      	ldr	r1, [pc, #24]	@ (8006370 <do_memp_malloc_pool+0x4c>)
 8006356:	4807      	ldr	r0, [pc, #28]	@ (8006374 <do_memp_malloc_pool+0x50>)
 8006358:	f00b fb2c 	bl	80119b4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	e000      	b.n	8006362 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	08012eb4 	.word	0x08012eb4
 8006370:	08012ee4 	.word	0x08012ee4
 8006374:	08012f08 	.word	0x08012f08

08006378 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d106      	bne.n	8006394 <memp_malloc_pool+0x1c>
 8006386:	4b0a      	ldr	r3, [pc, #40]	@ (80063b0 <memp_malloc_pool+0x38>)
 8006388:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800638c:	4909      	ldr	r1, [pc, #36]	@ (80063b4 <memp_malloc_pool+0x3c>)
 800638e:	480a      	ldr	r0, [pc, #40]	@ (80063b8 <memp_malloc_pool+0x40>)
 8006390:	f00b fb10 	bl	80119b4 <iprintf>
  if (desc == NULL) {
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <memp_malloc_pool+0x26>
    return NULL;
 800639a:	2300      	movs	r3, #0
 800639c:	e003      	b.n	80063a6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7ff ffc0 	bl	8006324 <do_memp_malloc_pool>
 80063a4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3708      	adds	r7, #8
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	08012eb4 	.word	0x08012eb4
 80063b4:	08012f30 	.word	0x08012f30
 80063b8:	08012f08 	.word	0x08012f08

080063bc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	4603      	mov	r3, r0
 80063c4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80063c6:	79fb      	ldrb	r3, [r7, #7]
 80063c8:	2b08      	cmp	r3, #8
 80063ca:	d908      	bls.n	80063de <memp_malloc+0x22>
 80063cc:	4b0a      	ldr	r3, [pc, #40]	@ (80063f8 <memp_malloc+0x3c>)
 80063ce:	f240 1257 	movw	r2, #343	@ 0x157
 80063d2:	490a      	ldr	r1, [pc, #40]	@ (80063fc <memp_malloc+0x40>)
 80063d4:	480a      	ldr	r0, [pc, #40]	@ (8006400 <memp_malloc+0x44>)
 80063d6:	f00b faed 	bl	80119b4 <iprintf>
 80063da:	2300      	movs	r3, #0
 80063dc:	e008      	b.n	80063f0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80063de:	79fb      	ldrb	r3, [r7, #7]
 80063e0:	4a08      	ldr	r2, [pc, #32]	@ (8006404 <memp_malloc+0x48>)
 80063e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7ff ff9c 	bl	8006324 <do_memp_malloc_pool>
 80063ec:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80063ee:	68fb      	ldr	r3, [r7, #12]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	08012eb4 	.word	0x08012eb4
 80063fc:	08012f44 	.word	0x08012f44
 8006400:	08012f08 	.word	0x08012f08
 8006404:	080157c8 	.word	0x080157c8

08006408 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	f003 0303 	and.w	r3, r3, #3
 8006418:	2b00      	cmp	r3, #0
 800641a:	d006      	beq.n	800642a <do_memp_free_pool+0x22>
 800641c:	4b0a      	ldr	r3, [pc, #40]	@ (8006448 <do_memp_free_pool+0x40>)
 800641e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8006422:	490a      	ldr	r1, [pc, #40]	@ (800644c <do_memp_free_pool+0x44>)
 8006424:	480a      	ldr	r0, [pc, #40]	@ (8006450 <do_memp_free_pool+0x48>)
 8006426:	f00b fac5 	bl	80119b4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006440:	bf00      	nop
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	08012eb4 	.word	0x08012eb4
 800644c:	08012f64 	.word	0x08012f64
 8006450:	08012f08 	.word	0x08012f08

08006454 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d106      	bne.n	8006472 <memp_free_pool+0x1e>
 8006464:	4b0a      	ldr	r3, [pc, #40]	@ (8006490 <memp_free_pool+0x3c>)
 8006466:	f240 1295 	movw	r2, #405	@ 0x195
 800646a:	490a      	ldr	r1, [pc, #40]	@ (8006494 <memp_free_pool+0x40>)
 800646c:	480a      	ldr	r0, [pc, #40]	@ (8006498 <memp_free_pool+0x44>)
 800646e:	f00b faa1 	bl	80119b4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d007      	beq.n	8006488 <memp_free_pool+0x34>
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d004      	beq.n	8006488 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800647e:	6839      	ldr	r1, [r7, #0]
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f7ff ffc1 	bl	8006408 <do_memp_free_pool>
 8006486:	e000      	b.n	800648a <memp_free_pool+0x36>
    return;
 8006488:	bf00      	nop
}
 800648a:	3708      	adds	r7, #8
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	08012eb4 	.word	0x08012eb4
 8006494:	08012f30 	.word	0x08012f30
 8006498:	08012f08 	.word	0x08012f08

0800649c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	4603      	mov	r3, r0
 80064a4:	6039      	str	r1, [r7, #0]
 80064a6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80064a8:	79fb      	ldrb	r3, [r7, #7]
 80064aa:	2b08      	cmp	r3, #8
 80064ac:	d907      	bls.n	80064be <memp_free+0x22>
 80064ae:	4b0c      	ldr	r3, [pc, #48]	@ (80064e0 <memp_free+0x44>)
 80064b0:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80064b4:	490b      	ldr	r1, [pc, #44]	@ (80064e4 <memp_free+0x48>)
 80064b6:	480c      	ldr	r0, [pc, #48]	@ (80064e8 <memp_free+0x4c>)
 80064b8:	f00b fa7c 	bl	80119b4 <iprintf>
 80064bc:	e00c      	b.n	80064d8 <memp_free+0x3c>

  if (mem == NULL) {
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d008      	beq.n	80064d6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80064c4:	79fb      	ldrb	r3, [r7, #7]
 80064c6:	4a09      	ldr	r2, [pc, #36]	@ (80064ec <memp_free+0x50>)
 80064c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7ff ff9a 	bl	8006408 <do_memp_free_pool>
 80064d4:	e000      	b.n	80064d8 <memp_free+0x3c>
    return;
 80064d6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80064d8:	3708      	adds	r7, #8
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	08012eb4 	.word	0x08012eb4
 80064e4:	08012f84 	.word	0x08012f84
 80064e8:	08012f08 	.word	0x08012f08
 80064ec:	080157c8 	.word	0x080157c8

080064f0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80064f0:	b480      	push	{r7}
 80064f2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80064f4:	bf00      	nop
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
	...

08006500 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d108      	bne.n	8006526 <netif_add+0x26>
 8006514:	4b57      	ldr	r3, [pc, #348]	@ (8006674 <netif_add+0x174>)
 8006516:	f240 1227 	movw	r2, #295	@ 0x127
 800651a:	4957      	ldr	r1, [pc, #348]	@ (8006678 <netif_add+0x178>)
 800651c:	4857      	ldr	r0, [pc, #348]	@ (800667c <netif_add+0x17c>)
 800651e:	f00b fa49 	bl	80119b4 <iprintf>
 8006522:	2300      	movs	r3, #0
 8006524:	e0a2      	b.n	800666c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006528:	2b00      	cmp	r3, #0
 800652a:	d108      	bne.n	800653e <netif_add+0x3e>
 800652c:	4b51      	ldr	r3, [pc, #324]	@ (8006674 <netif_add+0x174>)
 800652e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8006532:	4953      	ldr	r1, [pc, #332]	@ (8006680 <netif_add+0x180>)
 8006534:	4851      	ldr	r0, [pc, #324]	@ (800667c <netif_add+0x17c>)
 8006536:	f00b fa3d 	bl	80119b4 <iprintf>
 800653a:	2300      	movs	r3, #0
 800653c:	e096      	b.n	800666c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006544:	4b4f      	ldr	r3, [pc, #316]	@ (8006684 <netif_add+0x184>)
 8006546:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d101      	bne.n	8006552 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800654e:	4b4d      	ldr	r3, [pc, #308]	@ (8006684 <netif_add+0x184>)
 8006550:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006558:	4b4a      	ldr	r3, [pc, #296]	@ (8006684 <netif_add+0x184>)
 800655a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4a45      	ldr	r2, [pc, #276]	@ (8006688 <netif_add+0x188>)
 8006572:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6a3a      	ldr	r2, [r7, #32]
 800658c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800658e:	4b3f      	ldr	r3, [pc, #252]	@ (800668c <netif_add+0x18c>)
 8006590:	781a      	ldrb	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800659c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	68b9      	ldr	r1, [r7, #8]
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 f913 	bl	80067d0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80065aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	4798      	blx	r3
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <netif_add+0xba>
    return NULL;
 80065b6:	2300      	movs	r3, #0
 80065b8:	e058      	b.n	800666c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80065c0:	2bff      	cmp	r3, #255	@ 0xff
 80065c2:	d103      	bne.n	80065cc <netif_add+0xcc>
        netif->num = 0;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80065cc:	2300      	movs	r3, #0
 80065ce:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80065d0:	4b2f      	ldr	r3, [pc, #188]	@ (8006690 <netif_add+0x190>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	617b      	str	r3, [r7, #20]
 80065d6:	e02b      	b.n	8006630 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d106      	bne.n	80065ee <netif_add+0xee>
 80065e0:	4b24      	ldr	r3, [pc, #144]	@ (8006674 <netif_add+0x174>)
 80065e2:	f240 128b 	movw	r2, #395	@ 0x18b
 80065e6:	492b      	ldr	r1, [pc, #172]	@ (8006694 <netif_add+0x194>)
 80065e8:	4824      	ldr	r0, [pc, #144]	@ (800667c <netif_add+0x17c>)
 80065ea:	f00b f9e3 	bl	80119b4 <iprintf>
        num_netifs++;
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	3301      	adds	r3, #1
 80065f2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	2bff      	cmp	r3, #255	@ 0xff
 80065f8:	dd06      	ble.n	8006608 <netif_add+0x108>
 80065fa:	4b1e      	ldr	r3, [pc, #120]	@ (8006674 <netif_add+0x174>)
 80065fc:	f240 128d 	movw	r2, #397	@ 0x18d
 8006600:	4925      	ldr	r1, [pc, #148]	@ (8006698 <netif_add+0x198>)
 8006602:	481e      	ldr	r0, [pc, #120]	@ (800667c <netif_add+0x17c>)
 8006604:	f00b f9d6 	bl	80119b4 <iprintf>
        if (netif2->num == netif->num) {
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006614:	429a      	cmp	r2, r3
 8006616:	d108      	bne.n	800662a <netif_add+0x12a>
          netif->num++;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800661e:	3301      	adds	r3, #1
 8006620:	b2da      	uxtb	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8006628:	e005      	b.n	8006636 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	617b      	str	r3, [r7, #20]
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1d0      	bne.n	80065d8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1be      	bne.n	80065ba <netif_add+0xba>
  }
  if (netif->num == 254) {
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006642:	2bfe      	cmp	r3, #254	@ 0xfe
 8006644:	d103      	bne.n	800664e <netif_add+0x14e>
    netif_num = 0;
 8006646:	4b11      	ldr	r3, [pc, #68]	@ (800668c <netif_add+0x18c>)
 8006648:	2200      	movs	r2, #0
 800664a:	701a      	strb	r2, [r3, #0]
 800664c:	e006      	b.n	800665c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006654:	3301      	adds	r3, #1
 8006656:	b2da      	uxtb	r2, r3
 8006658:	4b0c      	ldr	r3, [pc, #48]	@ (800668c <netif_add+0x18c>)
 800665a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800665c:	4b0c      	ldr	r3, [pc, #48]	@ (8006690 <netif_add+0x190>)
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8006664:	4a0a      	ldr	r2, [pc, #40]	@ (8006690 <netif_add+0x190>)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800666a:	68fb      	ldr	r3, [r7, #12]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3718      	adds	r7, #24
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	08012fa0 	.word	0x08012fa0
 8006678:	08013034 	.word	0x08013034
 800667c:	08012ff0 	.word	0x08012ff0
 8006680:	08013050 	.word	0x08013050
 8006684:	0801582c 	.word	0x0801582c
 8006688:	08006aab 	.word	0x08006aab
 800668c:	200083d4 	.word	0x200083d4
 8006690:	200083cc 	.word	0x200083cc
 8006694:	08013074 	.word	0x08013074
 8006698:	08013088 	.word	0x08013088

0800669c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80066a6:	6839      	ldr	r1, [r7, #0]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f002 fd41 	bl	8009130 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80066ae:	6839      	ldr	r1, [r7, #0]
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f007 fa77 	bl	800dba4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80066b6:	bf00      	nop
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
	...

080066c0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d106      	bne.n	80066e0 <netif_do_set_ipaddr+0x20>
 80066d2:	4b1d      	ldr	r3, [pc, #116]	@ (8006748 <netif_do_set_ipaddr+0x88>)
 80066d4:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80066d8:	491c      	ldr	r1, [pc, #112]	@ (800674c <netif_do_set_ipaddr+0x8c>)
 80066da:	481d      	ldr	r0, [pc, #116]	@ (8006750 <netif_do_set_ipaddr+0x90>)
 80066dc:	f00b f96a 	bl	80119b4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d106      	bne.n	80066f4 <netif_do_set_ipaddr+0x34>
 80066e6:	4b18      	ldr	r3, [pc, #96]	@ (8006748 <netif_do_set_ipaddr+0x88>)
 80066e8:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80066ec:	4917      	ldr	r1, [pc, #92]	@ (800674c <netif_do_set_ipaddr+0x8c>)
 80066ee:	4818      	ldr	r0, [pc, #96]	@ (8006750 <netif_do_set_ipaddr+0x90>)
 80066f0:	f00b f960 	bl	80119b4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	3304      	adds	r3, #4
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d01c      	beq.n	800673c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	3304      	adds	r3, #4
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8006712:	f107 0314 	add.w	r3, r7, #20
 8006716:	4619      	mov	r1, r3
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7ff ffbf 	bl	800669c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d002      	beq.n	800672a <netif_do_set_ipaddr+0x6a>
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	e000      	b.n	800672c <netif_do_set_ipaddr+0x6c>
 800672a:	2300      	movs	r3, #0
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006730:	2101      	movs	r1, #1
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f000 f8d2 	bl	80068dc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006738:	2301      	movs	r3, #1
 800673a:	e000      	b.n	800673e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3718      	adds	r7, #24
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	08012fa0 	.word	0x08012fa0
 800674c:	080130b8 	.word	0x080130b8
 8006750:	08012ff0 	.word	0x08012ff0

08006754 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	3308      	adds	r3, #8
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	429a      	cmp	r2, r3
 800676c:	d00a      	beq.n	8006784 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d002      	beq.n	800677a <netif_do_set_netmask+0x26>
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	e000      	b.n	800677c <netif_do_set_netmask+0x28>
 800677a:	2300      	movs	r3, #0
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006780:	2301      	movs	r3, #1
 8006782:	e000      	b.n	8006786 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3714      	adds	r7, #20
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8006792:	b480      	push	{r7}
 8006794:	b085      	sub	sp, #20
 8006796:	af00      	add	r7, sp, #0
 8006798:	60f8      	str	r0, [r7, #12]
 800679a:	60b9      	str	r1, [r7, #8]
 800679c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	330c      	adds	r3, #12
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d00a      	beq.n	80067c2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d002      	beq.n	80067b8 <netif_do_set_gw+0x26>
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	e000      	b.n	80067ba <netif_do_set_gw+0x28>
 80067b8:	2300      	movs	r3, #0
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80067be:	2301      	movs	r3, #1
 80067c0:	e000      	b.n	80067c4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b088      	sub	sp, #32
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
 80067dc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80067de:	2300      	movs	r3, #0
 80067e0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80067e2:	2300      	movs	r3, #0
 80067e4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d101      	bne.n	80067f0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80067ec:	4b1c      	ldr	r3, [pc, #112]	@ (8006860 <netif_set_addr+0x90>)
 80067ee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80067f6:	4b1a      	ldr	r3, [pc, #104]	@ (8006860 <netif_set_addr+0x90>)
 80067f8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006800:	4b17      	ldr	r3, [pc, #92]	@ (8006860 <netif_set_addr+0x90>)
 8006802:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <netif_set_addr+0x42>
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <netif_set_addr+0x46>
 8006812:	2301      	movs	r3, #1
 8006814:	e000      	b.n	8006818 <netif_set_addr+0x48>
 8006816:	2300      	movs	r3, #0
 8006818:	617b      	str	r3, [r7, #20]
  if (remove) {
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d006      	beq.n	800682e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006820:	f107 0310 	add.w	r3, r7, #16
 8006824:	461a      	mov	r2, r3
 8006826:	68b9      	ldr	r1, [r7, #8]
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f7ff ff49 	bl	80066c0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800682e:	69fa      	ldr	r2, [r7, #28]
 8006830:	6879      	ldr	r1, [r7, #4]
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f7ff ff8e 	bl	8006754 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006838:	69ba      	ldr	r2, [r7, #24]
 800683a:	6839      	ldr	r1, [r7, #0]
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f7ff ffa8 	bl	8006792 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d106      	bne.n	8006856 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006848:	f107 0310 	add.w	r3, r7, #16
 800684c:	461a      	mov	r2, r3
 800684e:	68b9      	ldr	r1, [r7, #8]
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f7ff ff35 	bl	80066c0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8006856:	bf00      	nop
 8006858:	3720      	adds	r7, #32
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	0801582c 	.word	0x0801582c

08006864 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800686c:	4a04      	ldr	r2, [pc, #16]	@ (8006880 <netif_set_default+0x1c>)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8006872:	bf00      	nop
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	200083d0 	.word	0x200083d0

08006884 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d107      	bne.n	80068a2 <netif_set_up+0x1e>
 8006892:	4b0f      	ldr	r3, [pc, #60]	@ (80068d0 <netif_set_up+0x4c>)
 8006894:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8006898:	490e      	ldr	r1, [pc, #56]	@ (80068d4 <netif_set_up+0x50>)
 800689a:	480f      	ldr	r0, [pc, #60]	@ (80068d8 <netif_set_up+0x54>)
 800689c:	f00b f88a 	bl	80119b4 <iprintf>
 80068a0:	e013      	b.n	80068ca <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10c      	bne.n	80068ca <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80068b6:	f043 0301 	orr.w	r3, r3, #1
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80068c2:	2103      	movs	r1, #3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f809 	bl	80068dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	08012fa0 	.word	0x08012fa0
 80068d4:	08013128 	.word	0x08013128
 80068d8:	08012ff0 	.word	0x08012ff0

080068dc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	460b      	mov	r3, r1
 80068e6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d106      	bne.n	80068fc <netif_issue_reports+0x20>
 80068ee:	4b18      	ldr	r3, [pc, #96]	@ (8006950 <netif_issue_reports+0x74>)
 80068f0:	f240 326d 	movw	r2, #877	@ 0x36d
 80068f4:	4917      	ldr	r1, [pc, #92]	@ (8006954 <netif_issue_reports+0x78>)
 80068f6:	4818      	ldr	r0, [pc, #96]	@ (8006958 <netif_issue_reports+0x7c>)
 80068f8:	f00b f85c 	bl	80119b4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006902:	f003 0304 	and.w	r3, r3, #4
 8006906:	2b00      	cmp	r3, #0
 8006908:	d01e      	beq.n	8006948 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006910:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006914:	2b00      	cmp	r3, #0
 8006916:	d017      	beq.n	8006948 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006918:	78fb      	ldrb	r3, [r7, #3]
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	d013      	beq.n	800694a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	3304      	adds	r3, #4
 8006926:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00e      	beq.n	800694a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006932:	f003 0308 	and.w	r3, r3, #8
 8006936:	2b00      	cmp	r3, #0
 8006938:	d007      	beq.n	800694a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	3304      	adds	r3, #4
 800693e:	4619      	mov	r1, r3
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f008 f899 	bl	800ea78 <etharp_request>
 8006946:	e000      	b.n	800694a <netif_issue_reports+0x6e>
    return;
 8006948:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	08012fa0 	.word	0x08012fa0
 8006954:	08013144 	.word	0x08013144
 8006958:	08012ff0 	.word	0x08012ff0

0800695c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d107      	bne.n	800697a <netif_set_down+0x1e>
 800696a:	4b12      	ldr	r3, [pc, #72]	@ (80069b4 <netif_set_down+0x58>)
 800696c:	f240 329b 	movw	r2, #923	@ 0x39b
 8006970:	4911      	ldr	r1, [pc, #68]	@ (80069b8 <netif_set_down+0x5c>)
 8006972:	4812      	ldr	r0, [pc, #72]	@ (80069bc <netif_set_down+0x60>)
 8006974:	f00b f81e 	bl	80119b4 <iprintf>
 8006978:	e019      	b.n	80069ae <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b00      	cmp	r3, #0
 8006986:	d012      	beq.n	80069ae <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800698e:	f023 0301 	bic.w	r3, r3, #1
 8006992:	b2da      	uxtb	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80069a0:	f003 0308 	and.w	r3, r3, #8
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d002      	beq.n	80069ae <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f007 fc23 	bl	800e1f4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	08012fa0 	.word	0x08012fa0
 80069b8:	08013168 	.word	0x08013168
 80069bc:	08012ff0 	.word	0x08012ff0

080069c0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d107      	bne.n	80069de <netif_set_link_up+0x1e>
 80069ce:	4b13      	ldr	r3, [pc, #76]	@ (8006a1c <netif_set_link_up+0x5c>)
 80069d0:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80069d4:	4912      	ldr	r1, [pc, #72]	@ (8006a20 <netif_set_link_up+0x60>)
 80069d6:	4813      	ldr	r0, [pc, #76]	@ (8006a24 <netif_set_link_up+0x64>)
 80069d8:	f00a ffec 	bl	80119b4 <iprintf>
 80069dc:	e01b      	b.n	8006a16 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80069e4:	f003 0304 	and.w	r3, r3, #4
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d114      	bne.n	8006a16 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80069f2:	f043 0304 	orr.w	r3, r3, #4
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80069fe:	2103      	movs	r1, #3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7ff ff6b 	bl	80068dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	69db      	ldr	r3, [r3, #28]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d003      	beq.n	8006a16 <netif_set_link_up+0x56>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	69db      	ldr	r3, [r3, #28]
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	08012fa0 	.word	0x08012fa0
 8006a20:	08013188 	.word	0x08013188
 8006a24:	08012ff0 	.word	0x08012ff0

08006a28 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d107      	bne.n	8006a46 <netif_set_link_down+0x1e>
 8006a36:	4b11      	ldr	r3, [pc, #68]	@ (8006a7c <netif_set_link_down+0x54>)
 8006a38:	f240 4206 	movw	r2, #1030	@ 0x406
 8006a3c:	4910      	ldr	r1, [pc, #64]	@ (8006a80 <netif_set_link_down+0x58>)
 8006a3e:	4811      	ldr	r0, [pc, #68]	@ (8006a84 <netif_set_link_down+0x5c>)
 8006a40:	f00a ffb8 	bl	80119b4 <iprintf>
 8006a44:	e017      	b.n	8006a76 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006a4c:	f003 0304 	and.w	r3, r3, #4
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d010      	beq.n	8006a76 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006a5a:	f023 0304 	bic.w	r3, r3, #4
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	69db      	ldr	r3, [r3, #28]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d003      	beq.n	8006a76 <netif_set_link_down+0x4e>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	69db      	ldr	r3, [r3, #28]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8006a76:	3708      	adds	r7, #8
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	08012fa0 	.word	0x08012fa0
 8006a80:	080131ac 	.word	0x080131ac
 8006a84:	08012ff0 	.word	0x08012ff0

08006a88 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d002      	beq.n	8006a9e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	61da      	str	r2, [r3, #28]
  }
}
 8006a9e:	bf00      	nop
 8006aa0:	370c      	adds	r7, #12
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b085      	sub	sp, #20
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	60f8      	str	r0, [r7, #12]
 8006ab2:	60b9      	str	r1, [r7, #8]
 8006ab4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8006ab6:	f06f 030b 	mvn.w	r3, #11
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
	...

08006ac8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	4603      	mov	r3, r0
 8006ad0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8006ad2:	79fb      	ldrb	r3, [r7, #7]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d013      	beq.n	8006b00 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8006b10 <netif_get_by_index+0x48>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	60fb      	str	r3, [r7, #12]
 8006ade:	e00c      	b.n	8006afa <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	79fa      	ldrb	r2, [r7, #7]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d101      	bne.n	8006af4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	e006      	b.n	8006b02 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	60fb      	str	r3, [r7, #12]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1ef      	bne.n	8006ae0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	200083cc 	.word	0x200083cc

08006b14 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8006b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8006b4c <pbuf_free_ooseq+0x38>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006b20:	4b0b      	ldr	r3, [pc, #44]	@ (8006b50 <pbuf_free_ooseq+0x3c>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	607b      	str	r3, [r7, #4]
 8006b26:	e00a      	b.n	8006b3e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d003      	beq.n	8006b38 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f002 fb3b 	bl	80091ac <tcp_free_ooseq>
      return;
 8006b36:	e005      	b.n	8006b44 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	607b      	str	r3, [r7, #4]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1f1      	bne.n	8006b28 <pbuf_free_ooseq+0x14>
    }
  }
}
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	200083d5 	.word	0x200083d5
 8006b50:	200083e4 	.word	0x200083e4

08006b54 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8006b54:	b480      	push	{r7}
 8006b56:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8006b58:	4b03      	ldr	r3, [pc, #12]	@ (8006b68 <pbuf_pool_is_empty+0x14>)
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8006b5e:	bf00      	nop
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr
 8006b68:	200083d5 	.word	0x200083d5

08006b6c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	4611      	mov	r1, r2
 8006b78:	461a      	mov	r2, r3
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	80fb      	strh	r3, [r7, #6]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	88fa      	ldrh	r2, [r7, #6]
 8006b92:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	88ba      	ldrh	r2, [r7, #4]
 8006b98:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8006b9a:	8b3b      	ldrh	r3, [r7, #24]
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	7f3a      	ldrb	r2, [r7, #28]
 8006ba6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2201      	movs	r2, #1
 8006bac:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	73da      	strb	r2, [r3, #15]
}
 8006bb4:	bf00      	nop
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b08c      	sub	sp, #48	@ 0x30
 8006bc4:	af02      	add	r7, sp, #8
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	71fb      	strb	r3, [r7, #7]
 8006bca:	460b      	mov	r3, r1
 8006bcc:	80bb      	strh	r3, [r7, #4]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006bd2:	79fb      	ldrb	r3, [r7, #7]
 8006bd4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8006bd6:	887b      	ldrh	r3, [r7, #2]
 8006bd8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8006bdc:	d07f      	beq.n	8006cde <pbuf_alloc+0x11e>
 8006bde:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8006be2:	f300 80c8 	bgt.w	8006d76 <pbuf_alloc+0x1b6>
 8006be6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8006bea:	d010      	beq.n	8006c0e <pbuf_alloc+0x4e>
 8006bec:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8006bf0:	f300 80c1 	bgt.w	8006d76 <pbuf_alloc+0x1b6>
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d002      	beq.n	8006bfe <pbuf_alloc+0x3e>
 8006bf8:	2b41      	cmp	r3, #65	@ 0x41
 8006bfa:	f040 80bc 	bne.w	8006d76 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8006bfe:	887a      	ldrh	r2, [r7, #2]
 8006c00:	88bb      	ldrh	r3, [r7, #4]
 8006c02:	4619      	mov	r1, r3
 8006c04:	2000      	movs	r0, #0
 8006c06:	f000 f8d1 	bl	8006dac <pbuf_alloc_reference>
 8006c0a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8006c0c:	e0bd      	b.n	8006d8a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8006c12:	2300      	movs	r3, #0
 8006c14:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8006c16:	88bb      	ldrh	r3, [r7, #4]
 8006c18:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006c1a:	2008      	movs	r0, #8
 8006c1c:	f7ff fbce 	bl	80063bc <memp_malloc>
 8006c20:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d109      	bne.n	8006c3c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8006c28:	f7ff ff94 	bl	8006b54 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <pbuf_alloc+0x78>
            pbuf_free(p);
 8006c32:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006c34:	f000 faa8 	bl	8007188 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	e0a7      	b.n	8006d8c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006c3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006c3e:	3303      	adds	r3, #3
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	f023 0303 	bic.w	r3, r3, #3
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	8b7a      	ldrh	r2, [r7, #26]
 8006c50:	4293      	cmp	r3, r2
 8006c52:	bf28      	it	cs
 8006c54:	4613      	movcs	r3, r2
 8006c56:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8006c58:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006c5a:	3310      	adds	r3, #16
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	4413      	add	r3, r2
 8006c60:	3303      	adds	r3, #3
 8006c62:	f023 0303 	bic.w	r3, r3, #3
 8006c66:	4618      	mov	r0, r3
 8006c68:	89f9      	ldrh	r1, [r7, #14]
 8006c6a:	8b7a      	ldrh	r2, [r7, #26]
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	9301      	str	r3, [sp, #4]
 8006c70:	887b      	ldrh	r3, [r7, #2]
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	460b      	mov	r3, r1
 8006c76:	4601      	mov	r1, r0
 8006c78:	6938      	ldr	r0, [r7, #16]
 8006c7a:	f7ff ff77 	bl	8006b6c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f003 0303 	and.w	r3, r3, #3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d006      	beq.n	8006c98 <pbuf_alloc+0xd8>
 8006c8a:	4b42      	ldr	r3, [pc, #264]	@ (8006d94 <pbuf_alloc+0x1d4>)
 8006c8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006c90:	4941      	ldr	r1, [pc, #260]	@ (8006d98 <pbuf_alloc+0x1d8>)
 8006c92:	4842      	ldr	r0, [pc, #264]	@ (8006d9c <pbuf_alloc+0x1dc>)
 8006c94:	f00a fe8e 	bl	80119b4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006c98:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006c9a:	3303      	adds	r3, #3
 8006c9c:	f023 0303 	bic.w	r3, r3, #3
 8006ca0:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8006ca4:	d106      	bne.n	8006cb4 <pbuf_alloc+0xf4>
 8006ca6:	4b3b      	ldr	r3, [pc, #236]	@ (8006d94 <pbuf_alloc+0x1d4>)
 8006ca8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8006cac:	493c      	ldr	r1, [pc, #240]	@ (8006da0 <pbuf_alloc+0x1e0>)
 8006cae:	483b      	ldr	r0, [pc, #236]	@ (8006d9c <pbuf_alloc+0x1dc>)
 8006cb0:	f00a fe80 	bl	80119b4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d102      	bne.n	8006cc0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cbe:	e002      	b.n	8006cc6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8006cca:	8b7a      	ldrh	r2, [r7, #26]
 8006ccc:	89fb      	ldrh	r3, [r7, #14]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8006cd6:	8b7b      	ldrh	r3, [r7, #26]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d19e      	bne.n	8006c1a <pbuf_alloc+0x5a>
      break;
 8006cdc:	e055      	b.n	8006d8a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006cde:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006ce0:	3303      	adds	r3, #3
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	f023 0303 	bic.w	r3, r3, #3
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	88bb      	ldrh	r3, [r7, #4]
 8006cec:	3303      	adds	r3, #3
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	f023 0303 	bic.w	r3, r3, #3
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	4413      	add	r3, r2
 8006cf8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8006cfa:	8b3b      	ldrh	r3, [r7, #24]
 8006cfc:	3310      	adds	r3, #16
 8006cfe:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006d00:	8b3a      	ldrh	r2, [r7, #24]
 8006d02:	88bb      	ldrh	r3, [r7, #4]
 8006d04:	3303      	adds	r3, #3
 8006d06:	f023 0303 	bic.w	r3, r3, #3
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d306      	bcc.n	8006d1c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8006d0e:	8afa      	ldrh	r2, [r7, #22]
 8006d10:	88bb      	ldrh	r3, [r7, #4]
 8006d12:	3303      	adds	r3, #3
 8006d14:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d201      	bcs.n	8006d20 <pbuf_alloc+0x160>
        return NULL;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	e035      	b.n	8006d8c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006d20:	8afb      	ldrh	r3, [r7, #22]
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7ff f9ba 	bl	800609c <mem_malloc>
 8006d28:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <pbuf_alloc+0x174>
        return NULL;
 8006d30:	2300      	movs	r3, #0
 8006d32:	e02b      	b.n	8006d8c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006d34:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006d36:	3310      	adds	r3, #16
 8006d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d3a:	4413      	add	r3, r2
 8006d3c:	3303      	adds	r3, #3
 8006d3e:	f023 0303 	bic.w	r3, r3, #3
 8006d42:	4618      	mov	r0, r3
 8006d44:	88b9      	ldrh	r1, [r7, #4]
 8006d46:	88ba      	ldrh	r2, [r7, #4]
 8006d48:	2300      	movs	r3, #0
 8006d4a:	9301      	str	r3, [sp, #4]
 8006d4c:	887b      	ldrh	r3, [r7, #2]
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	460b      	mov	r3, r1
 8006d52:	4601      	mov	r1, r0
 8006d54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006d56:	f7ff ff09 	bl	8006b6c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f003 0303 	and.w	r3, r3, #3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d010      	beq.n	8006d88 <pbuf_alloc+0x1c8>
 8006d66:	4b0b      	ldr	r3, [pc, #44]	@ (8006d94 <pbuf_alloc+0x1d4>)
 8006d68:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8006d6c:	490d      	ldr	r1, [pc, #52]	@ (8006da4 <pbuf_alloc+0x1e4>)
 8006d6e:	480b      	ldr	r0, [pc, #44]	@ (8006d9c <pbuf_alloc+0x1dc>)
 8006d70:	f00a fe20 	bl	80119b4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006d74:	e008      	b.n	8006d88 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006d76:	4b07      	ldr	r3, [pc, #28]	@ (8006d94 <pbuf_alloc+0x1d4>)
 8006d78:	f240 1227 	movw	r2, #295	@ 0x127
 8006d7c:	490a      	ldr	r1, [pc, #40]	@ (8006da8 <pbuf_alloc+0x1e8>)
 8006d7e:	4807      	ldr	r0, [pc, #28]	@ (8006d9c <pbuf_alloc+0x1dc>)
 8006d80:	f00a fe18 	bl	80119b4 <iprintf>
      return NULL;
 8006d84:	2300      	movs	r3, #0
 8006d86:	e001      	b.n	8006d8c <pbuf_alloc+0x1cc>
      break;
 8006d88:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3728      	adds	r7, #40	@ 0x28
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	080131d0 	.word	0x080131d0
 8006d98:	08013200 	.word	0x08013200
 8006d9c:	08013230 	.word	0x08013230
 8006da0:	08013258 	.word	0x08013258
 8006da4:	0801328c 	.word	0x0801328c
 8006da8:	080132b8 	.word	0x080132b8

08006dac <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af02      	add	r7, sp, #8
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	460b      	mov	r3, r1
 8006db6:	807b      	strh	r3, [r7, #2]
 8006db8:	4613      	mov	r3, r2
 8006dba:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006dbc:	883b      	ldrh	r3, [r7, #0]
 8006dbe:	2b41      	cmp	r3, #65	@ 0x41
 8006dc0:	d009      	beq.n	8006dd6 <pbuf_alloc_reference+0x2a>
 8006dc2:	883b      	ldrh	r3, [r7, #0]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d006      	beq.n	8006dd6 <pbuf_alloc_reference+0x2a>
 8006dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8006e08 <pbuf_alloc_reference+0x5c>)
 8006dca:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8006dce:	490f      	ldr	r1, [pc, #60]	@ (8006e0c <pbuf_alloc_reference+0x60>)
 8006dd0:	480f      	ldr	r0, [pc, #60]	@ (8006e10 <pbuf_alloc_reference+0x64>)
 8006dd2:	f00a fdef 	bl	80119b4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006dd6:	2007      	movs	r0, #7
 8006dd8:	f7ff faf0 	bl	80063bc <memp_malloc>
 8006ddc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006de4:	2300      	movs	r3, #0
 8006de6:	e00b      	b.n	8006e00 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006de8:	8879      	ldrh	r1, [r7, #2]
 8006dea:	887a      	ldrh	r2, [r7, #2]
 8006dec:	2300      	movs	r3, #0
 8006dee:	9301      	str	r3, [sp, #4]
 8006df0:	883b      	ldrh	r3, [r7, #0]
 8006df2:	9300      	str	r3, [sp, #0]
 8006df4:	460b      	mov	r3, r1
 8006df6:	6879      	ldr	r1, [r7, #4]
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f7ff feb7 	bl	8006b6c <pbuf_init_alloced_pbuf>
  return p;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	080131d0 	.word	0x080131d0
 8006e0c:	080132d4 	.word	0x080132d4
 8006e10:	08013230 	.word	0x08013230

08006e14 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b088      	sub	sp, #32
 8006e18:	af02      	add	r7, sp, #8
 8006e1a:	607b      	str	r3, [r7, #4]
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	73fb      	strb	r3, [r7, #15]
 8006e20:	460b      	mov	r3, r1
 8006e22:	81bb      	strh	r3, [r7, #12]
 8006e24:	4613      	mov	r3, r2
 8006e26:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
 8006e2a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006e2c:	8a7b      	ldrh	r3, [r7, #18]
 8006e2e:	3303      	adds	r3, #3
 8006e30:	f023 0203 	bic.w	r2, r3, #3
 8006e34:	89bb      	ldrh	r3, [r7, #12]
 8006e36:	441a      	add	r2, r3
 8006e38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d901      	bls.n	8006e42 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	e018      	b.n	8006e74 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d007      	beq.n	8006e58 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006e48:	8a7b      	ldrh	r3, [r7, #18]
 8006e4a:	3303      	adds	r3, #3
 8006e4c:	f023 0303 	bic.w	r3, r3, #3
 8006e50:	6a3a      	ldr	r2, [r7, #32]
 8006e52:	4413      	add	r3, r2
 8006e54:	617b      	str	r3, [r7, #20]
 8006e56:	e001      	b.n	8006e5c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	89b9      	ldrh	r1, [r7, #12]
 8006e60:	89ba      	ldrh	r2, [r7, #12]
 8006e62:	2302      	movs	r3, #2
 8006e64:	9301      	str	r3, [sp, #4]
 8006e66:	897b      	ldrh	r3, [r7, #10]
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	6979      	ldr	r1, [r7, #20]
 8006e6e:	f7ff fe7d 	bl	8006b6c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006e72:	687b      	ldr	r3, [r7, #4]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3718      	adds	r7, #24
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	460b      	mov	r3, r1
 8006e86:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d106      	bne.n	8006e9c <pbuf_realloc+0x20>
 8006e8e:	4b3a      	ldr	r3, [pc, #232]	@ (8006f78 <pbuf_realloc+0xfc>)
 8006e90:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8006e94:	4939      	ldr	r1, [pc, #228]	@ (8006f7c <pbuf_realloc+0x100>)
 8006e96:	483a      	ldr	r0, [pc, #232]	@ (8006f80 <pbuf_realloc+0x104>)
 8006e98:	f00a fd8c 	bl	80119b4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	891b      	ldrh	r3, [r3, #8]
 8006ea0:	887a      	ldrh	r2, [r7, #2]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d263      	bcs.n	8006f6e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	891a      	ldrh	r2, [r3, #8]
 8006eaa:	887b      	ldrh	r3, [r7, #2]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006eb0:	887b      	ldrh	r3, [r7, #2]
 8006eb2:	817b      	strh	r3, [r7, #10]
  q = p;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006eb8:	e018      	b.n	8006eec <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	895b      	ldrh	r3, [r3, #10]
 8006ebe:	897a      	ldrh	r2, [r7, #10]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	891a      	ldrh	r2, [r3, #8]
 8006ec8:	893b      	ldrh	r3, [r7, #8]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d106      	bne.n	8006eec <pbuf_realloc+0x70>
 8006ede:	4b26      	ldr	r3, [pc, #152]	@ (8006f78 <pbuf_realloc+0xfc>)
 8006ee0:	f240 12af 	movw	r2, #431	@ 0x1af
 8006ee4:	4927      	ldr	r1, [pc, #156]	@ (8006f84 <pbuf_realloc+0x108>)
 8006ee6:	4826      	ldr	r0, [pc, #152]	@ (8006f80 <pbuf_realloc+0x104>)
 8006ee8:	f00a fd64 	bl	80119b4 <iprintf>
  while (rem_len > q->len) {
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	895b      	ldrh	r3, [r3, #10]
 8006ef0:	897a      	ldrh	r2, [r7, #10]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d8e1      	bhi.n	8006eba <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	7b1b      	ldrb	r3, [r3, #12]
 8006efa:	f003 030f 	and.w	r3, r3, #15
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d121      	bne.n	8006f46 <pbuf_realloc+0xca>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	895b      	ldrh	r3, [r3, #10]
 8006f06:	897a      	ldrh	r2, [r7, #10]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d01c      	beq.n	8006f46 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	7b5b      	ldrb	r3, [r3, #13]
 8006f10:	f003 0302 	and.w	r3, r3, #2
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d116      	bne.n	8006f46 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	897b      	ldrh	r3, [r7, #10]
 8006f24:	4413      	add	r3, r2
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	4619      	mov	r1, r3
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f7fe ffba 	bl	8005ea4 <mem_trim>
 8006f30:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d106      	bne.n	8006f46 <pbuf_realloc+0xca>
 8006f38:	4b0f      	ldr	r3, [pc, #60]	@ (8006f78 <pbuf_realloc+0xfc>)
 8006f3a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8006f3e:	4912      	ldr	r1, [pc, #72]	@ (8006f88 <pbuf_realloc+0x10c>)
 8006f40:	480f      	ldr	r0, [pc, #60]	@ (8006f80 <pbuf_realloc+0x104>)
 8006f42:	f00a fd37 	bl	80119b4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	897a      	ldrh	r2, [r7, #10]
 8006f4a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	895a      	ldrh	r2, [r3, #10]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d004      	beq.n	8006f66 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 f911 	bl	8007188 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	601a      	str	r2, [r3, #0]
 8006f6c:	e000      	b.n	8006f70 <pbuf_realloc+0xf4>
    return;
 8006f6e:	bf00      	nop

}
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	080131d0 	.word	0x080131d0
 8006f7c:	080132e8 	.word	0x080132e8
 8006f80:	08013230 	.word	0x08013230
 8006f84:	08013300 	.word	0x08013300
 8006f88:	08013318 	.word	0x08013318

08006f8c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b086      	sub	sp, #24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	4613      	mov	r3, r2
 8006f98:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d106      	bne.n	8006fae <pbuf_add_header_impl+0x22>
 8006fa0:	4b2b      	ldr	r3, [pc, #172]	@ (8007050 <pbuf_add_header_impl+0xc4>)
 8006fa2:	f240 12df 	movw	r2, #479	@ 0x1df
 8006fa6:	492b      	ldr	r1, [pc, #172]	@ (8007054 <pbuf_add_header_impl+0xc8>)
 8006fa8:	482b      	ldr	r0, [pc, #172]	@ (8007058 <pbuf_add_header_impl+0xcc>)
 8006faa:	f00a fd03 	bl	80119b4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d003      	beq.n	8006fbc <pbuf_add_header_impl+0x30>
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fba:	d301      	bcc.n	8006fc0 <pbuf_add_header_impl+0x34>
    return 1;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e043      	b.n	8007048 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <pbuf_add_header_impl+0x3e>
    return 0;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	e03e      	b.n	8007048 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	891a      	ldrh	r2, [r3, #8]
 8006fd2:	8a7b      	ldrh	r3, [r7, #18]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	8a7a      	ldrh	r2, [r7, #18]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d901      	bls.n	8006fe2 <pbuf_add_header_impl+0x56>
    return 1;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e032      	b.n	8007048 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	7b1b      	ldrb	r3, [r3, #12]
 8006fe6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006fe8:	8a3b      	ldrh	r3, [r7, #16]
 8006fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00c      	beq.n	800700c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	425b      	negs	r3, r3
 8006ffa:	4413      	add	r3, r2
 8006ffc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3310      	adds	r3, #16
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	429a      	cmp	r2, r3
 8007006:	d20d      	bcs.n	8007024 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8007008:	2301      	movs	r3, #1
 800700a:	e01d      	b.n	8007048 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800700c:	79fb      	ldrb	r3, [r7, #7]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d006      	beq.n	8007020 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	685a      	ldr	r2, [r3, #4]
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	425b      	negs	r3, r3
 800701a:	4413      	add	r3, r2
 800701c:	617b      	str	r3, [r7, #20]
 800701e:	e001      	b.n	8007024 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007020:	2301      	movs	r3, #1
 8007022:	e011      	b.n	8007048 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	895a      	ldrh	r2, [r3, #10]
 800702e:	8a7b      	ldrh	r3, [r7, #18]
 8007030:	4413      	add	r3, r2
 8007032:	b29a      	uxth	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	891a      	ldrh	r2, [r3, #8]
 800703c:	8a7b      	ldrh	r3, [r7, #18]
 800703e:	4413      	add	r3, r2
 8007040:	b29a      	uxth	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	811a      	strh	r2, [r3, #8]


  return 0;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3718      	adds	r7, #24
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	080131d0 	.word	0x080131d0
 8007054:	08013334 	.word	0x08013334
 8007058:	08013230 	.word	0x08013230

0800705c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007066:	2200      	movs	r2, #0
 8007068:	6839      	ldr	r1, [r7, #0]
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7ff ff8e 	bl	8006f8c <pbuf_add_header_impl>
 8007070:	4603      	mov	r3, r0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
	...

0800707c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d106      	bne.n	800709a <pbuf_remove_header+0x1e>
 800708c:	4b20      	ldr	r3, [pc, #128]	@ (8007110 <pbuf_remove_header+0x94>)
 800708e:	f240 224b 	movw	r2, #587	@ 0x24b
 8007092:	4920      	ldr	r1, [pc, #128]	@ (8007114 <pbuf_remove_header+0x98>)
 8007094:	4820      	ldr	r0, [pc, #128]	@ (8007118 <pbuf_remove_header+0x9c>)
 8007096:	f00a fc8d 	bl	80119b4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d003      	beq.n	80070a8 <pbuf_remove_header+0x2c>
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070a6:	d301      	bcc.n	80070ac <pbuf_remove_header+0x30>
    return 1;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e02c      	b.n	8007106 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d101      	bne.n	80070b6 <pbuf_remove_header+0x3a>
    return 0;
 80070b2:	2300      	movs	r3, #0
 80070b4:	e027      	b.n	8007106 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	895b      	ldrh	r3, [r3, #10]
 80070be:	89fa      	ldrh	r2, [r7, #14]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d908      	bls.n	80070d6 <pbuf_remove_header+0x5a>
 80070c4:	4b12      	ldr	r3, [pc, #72]	@ (8007110 <pbuf_remove_header+0x94>)
 80070c6:	f240 2255 	movw	r2, #597	@ 0x255
 80070ca:	4914      	ldr	r1, [pc, #80]	@ (800711c <pbuf_remove_header+0xa0>)
 80070cc:	4812      	ldr	r0, [pc, #72]	@ (8007118 <pbuf_remove_header+0x9c>)
 80070ce:	f00a fc71 	bl	80119b4 <iprintf>
 80070d2:	2301      	movs	r3, #1
 80070d4:	e017      	b.n	8007106 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	441a      	add	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	895a      	ldrh	r2, [r3, #10]
 80070ec:	89fb      	ldrh	r3, [r7, #14]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	891a      	ldrh	r2, [r3, #8]
 80070fa:	89fb      	ldrh	r3, [r7, #14]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	b29a      	uxth	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	080131d0 	.word	0x080131d0
 8007114:	08013334 	.word	0x08013334
 8007118:	08013230 	.word	0x08013230
 800711c:	08013340 	.word	0x08013340

08007120 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	460b      	mov	r3, r1
 800712a:	807b      	strh	r3, [r7, #2]
 800712c:	4613      	mov	r3, r2
 800712e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007130:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007134:	2b00      	cmp	r3, #0
 8007136:	da08      	bge.n	800714a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007138:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800713c:	425b      	negs	r3, r3
 800713e:	4619      	mov	r1, r3
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f7ff ff9b 	bl	800707c <pbuf_remove_header>
 8007146:	4603      	mov	r3, r0
 8007148:	e007      	b.n	800715a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800714a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800714e:	787a      	ldrb	r2, [r7, #1]
 8007150:	4619      	mov	r1, r3
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7ff ff1a 	bl	8006f8c <pbuf_add_header_impl>
 8007158:	4603      	mov	r3, r0
  }
}
 800715a:	4618      	mov	r0, r3
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b082      	sub	sp, #8
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
 800716a:	460b      	mov	r3, r1
 800716c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800716e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007172:	2201      	movs	r2, #1
 8007174:	4619      	mov	r1, r3
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7ff ffd2 	bl	8007120 <pbuf_header_impl>
 800717c:	4603      	mov	r3, r0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
	...

08007188 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10b      	bne.n	80071ae <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d106      	bne.n	80071aa <pbuf_free+0x22>
 800719c:	4b38      	ldr	r3, [pc, #224]	@ (8007280 <pbuf_free+0xf8>)
 800719e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 80071a2:	4938      	ldr	r1, [pc, #224]	@ (8007284 <pbuf_free+0xfc>)
 80071a4:	4838      	ldr	r0, [pc, #224]	@ (8007288 <pbuf_free+0x100>)
 80071a6:	f00a fc05 	bl	80119b4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80071aa:	2300      	movs	r3, #0
 80071ac:	e063      	b.n	8007276 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80071ae:	2300      	movs	r3, #0
 80071b0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80071b2:	e05c      	b.n	800726e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	7b9b      	ldrb	r3, [r3, #14]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d106      	bne.n	80071ca <pbuf_free+0x42>
 80071bc:	4b30      	ldr	r3, [pc, #192]	@ (8007280 <pbuf_free+0xf8>)
 80071be:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80071c2:	4932      	ldr	r1, [pc, #200]	@ (800728c <pbuf_free+0x104>)
 80071c4:	4830      	ldr	r0, [pc, #192]	@ (8007288 <pbuf_free+0x100>)
 80071c6:	f00a fbf5 	bl	80119b4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	7b9b      	ldrb	r3, [r3, #14]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	b2da      	uxtb	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	739a      	strb	r2, [r3, #14]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	7b9b      	ldrb	r3, [r3, #14]
 80071da:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80071dc:	7dbb      	ldrb	r3, [r7, #22]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d143      	bne.n	800726a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	7b1b      	ldrb	r3, [r3, #12]
 80071ec:	f003 030f 	and.w	r3, r3, #15
 80071f0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	7b5b      	ldrb	r3, [r3, #13]
 80071f6:	f003 0302 	and.w	r3, r3, #2
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d011      	beq.n	8007222 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d106      	bne.n	8007218 <pbuf_free+0x90>
 800720a:	4b1d      	ldr	r3, [pc, #116]	@ (8007280 <pbuf_free+0xf8>)
 800720c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8007210:	491f      	ldr	r1, [pc, #124]	@ (8007290 <pbuf_free+0x108>)
 8007212:	481d      	ldr	r0, [pc, #116]	@ (8007288 <pbuf_free+0x100>)
 8007214:	f00a fbce 	bl	80119b4 <iprintf>
        pc->custom_free_function(p);
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	4798      	blx	r3
 8007220:	e01d      	b.n	800725e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007222:	7bfb      	ldrb	r3, [r7, #15]
 8007224:	2b02      	cmp	r3, #2
 8007226:	d104      	bne.n	8007232 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8007228:	6879      	ldr	r1, [r7, #4]
 800722a:	2008      	movs	r0, #8
 800722c:	f7ff f936 	bl	800649c <memp_free>
 8007230:	e015      	b.n	800725e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007232:	7bfb      	ldrb	r3, [r7, #15]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d104      	bne.n	8007242 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8007238:	6879      	ldr	r1, [r7, #4]
 800723a:	2007      	movs	r0, #7
 800723c:	f7ff f92e 	bl	800649c <memp_free>
 8007240:	e00d      	b.n	800725e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007242:	7bfb      	ldrb	r3, [r7, #15]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d103      	bne.n	8007250 <pbuf_free+0xc8>
          mem_free(p);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f7fe fdc1 	bl	8005dd0 <mem_free>
 800724e:	e006      	b.n	800725e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007250:	4b0b      	ldr	r3, [pc, #44]	@ (8007280 <pbuf_free+0xf8>)
 8007252:	f240 320f 	movw	r2, #783	@ 0x30f
 8007256:	490f      	ldr	r1, [pc, #60]	@ (8007294 <pbuf_free+0x10c>)
 8007258:	480b      	ldr	r0, [pc, #44]	@ (8007288 <pbuf_free+0x100>)
 800725a:	f00a fbab 	bl	80119b4 <iprintf>
        }
      }
      count++;
 800725e:	7dfb      	ldrb	r3, [r7, #23]
 8007260:	3301      	adds	r3, #1
 8007262:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	607b      	str	r3, [r7, #4]
 8007268:	e001      	b.n	800726e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800726a:	2300      	movs	r3, #0
 800726c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d19f      	bne.n	80071b4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007274:	7dfb      	ldrb	r3, [r7, #23]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3718      	adds	r7, #24
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	080131d0 	.word	0x080131d0
 8007284:	08013334 	.word	0x08013334
 8007288:	08013230 	.word	0x08013230
 800728c:	08013360 	.word	0x08013360
 8007290:	08013378 	.word	0x08013378
 8007294:	0801339c 	.word	0x0801339c

08007298 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80072a0:	2300      	movs	r3, #0
 80072a2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80072a4:	e005      	b.n	80072b2 <pbuf_clen+0x1a>
    ++len;
 80072a6:	89fb      	ldrh	r3, [r7, #14]
 80072a8:	3301      	adds	r3, #1
 80072aa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1f6      	bne.n	80072a6 <pbuf_clen+0xe>
  }
  return len;
 80072b8:	89fb      	ldrh	r3, [r7, #14]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
	...

080072c8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d010      	beq.n	80072f8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	7b9b      	ldrb	r3, [r3, #14]
 80072da:	3301      	adds	r3, #1
 80072dc:	b2da      	uxtb	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	7b9b      	ldrb	r3, [r3, #14]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d106      	bne.n	80072f8 <pbuf_ref+0x30>
 80072ea:	4b05      	ldr	r3, [pc, #20]	@ (8007300 <pbuf_ref+0x38>)
 80072ec:	f240 3242 	movw	r2, #834	@ 0x342
 80072f0:	4904      	ldr	r1, [pc, #16]	@ (8007304 <pbuf_ref+0x3c>)
 80072f2:	4805      	ldr	r0, [pc, #20]	@ (8007308 <pbuf_ref+0x40>)
 80072f4:	f00a fb5e 	bl	80119b4 <iprintf>
  }
}
 80072f8:	bf00      	nop
 80072fa:	3708      	adds	r7, #8
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	080131d0 	.word	0x080131d0
 8007304:	080133b0 	.word	0x080133b0
 8007308:	08013230 	.word	0x08013230

0800730c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d002      	beq.n	8007322 <pbuf_cat+0x16>
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d107      	bne.n	8007332 <pbuf_cat+0x26>
 8007322:	4b20      	ldr	r3, [pc, #128]	@ (80073a4 <pbuf_cat+0x98>)
 8007324:	f240 3259 	movw	r2, #857	@ 0x359
 8007328:	491f      	ldr	r1, [pc, #124]	@ (80073a8 <pbuf_cat+0x9c>)
 800732a:	4820      	ldr	r0, [pc, #128]	@ (80073ac <pbuf_cat+0xa0>)
 800732c:	f00a fb42 	bl	80119b4 <iprintf>
 8007330:	e034      	b.n	800739c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	60fb      	str	r3, [r7, #12]
 8007336:	e00a      	b.n	800734e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	891a      	ldrh	r2, [r3, #8]
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	891b      	ldrh	r3, [r3, #8]
 8007340:	4413      	add	r3, r2
 8007342:	b29a      	uxth	r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	60fb      	str	r3, [r7, #12]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1f0      	bne.n	8007338 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	891a      	ldrh	r2, [r3, #8]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	895b      	ldrh	r3, [r3, #10]
 800735e:	429a      	cmp	r2, r3
 8007360:	d006      	beq.n	8007370 <pbuf_cat+0x64>
 8007362:	4b10      	ldr	r3, [pc, #64]	@ (80073a4 <pbuf_cat+0x98>)
 8007364:	f240 3262 	movw	r2, #866	@ 0x362
 8007368:	4911      	ldr	r1, [pc, #68]	@ (80073b0 <pbuf_cat+0xa4>)
 800736a:	4810      	ldr	r0, [pc, #64]	@ (80073ac <pbuf_cat+0xa0>)
 800736c:	f00a fb22 	bl	80119b4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d006      	beq.n	8007386 <pbuf_cat+0x7a>
 8007378:	4b0a      	ldr	r3, [pc, #40]	@ (80073a4 <pbuf_cat+0x98>)
 800737a:	f240 3263 	movw	r2, #867	@ 0x363
 800737e:	490d      	ldr	r1, [pc, #52]	@ (80073b4 <pbuf_cat+0xa8>)
 8007380:	480a      	ldr	r0, [pc, #40]	@ (80073ac <pbuf_cat+0xa0>)
 8007382:	f00a fb17 	bl	80119b4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	891a      	ldrh	r2, [r3, #8]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	891b      	ldrh	r3, [r3, #8]
 800738e:	4413      	add	r3, r2
 8007390:	b29a      	uxth	r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	683a      	ldr	r2, [r7, #0]
 800739a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	080131d0 	.word	0x080131d0
 80073a8:	080133c4 	.word	0x080133c4
 80073ac:	08013230 	.word	0x08013230
 80073b0:	080133fc 	.word	0x080133fc
 80073b4:	0801342c 	.word	0x0801342c

080073b8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b086      	sub	sp, #24
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80073c2:	2300      	movs	r3, #0
 80073c4:	617b      	str	r3, [r7, #20]
 80073c6:	2300      	movs	r3, #0
 80073c8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d008      	beq.n	80073e2 <pbuf_copy+0x2a>
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d005      	beq.n	80073e2 <pbuf_copy+0x2a>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	891a      	ldrh	r2, [r3, #8]
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	891b      	ldrh	r3, [r3, #8]
 80073de:	429a      	cmp	r2, r3
 80073e0:	d209      	bcs.n	80073f6 <pbuf_copy+0x3e>
 80073e2:	4b57      	ldr	r3, [pc, #348]	@ (8007540 <pbuf_copy+0x188>)
 80073e4:	f240 32c9 	movw	r2, #969	@ 0x3c9
 80073e8:	4956      	ldr	r1, [pc, #344]	@ (8007544 <pbuf_copy+0x18c>)
 80073ea:	4857      	ldr	r0, [pc, #348]	@ (8007548 <pbuf_copy+0x190>)
 80073ec:	f00a fae2 	bl	80119b4 <iprintf>
 80073f0:	f06f 030f 	mvn.w	r3, #15
 80073f4:	e09f      	b.n	8007536 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	895b      	ldrh	r3, [r3, #10]
 80073fa:	461a      	mov	r2, r3
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	1ad2      	subs	r2, r2, r3
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	895b      	ldrh	r3, [r3, #10]
 8007404:	4619      	mov	r1, r3
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	1acb      	subs	r3, r1, r3
 800740a:	429a      	cmp	r2, r3
 800740c:	d306      	bcc.n	800741c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	895b      	ldrh	r3, [r3, #10]
 8007412:	461a      	mov	r2, r3
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	60fb      	str	r3, [r7, #12]
 800741a:	e005      	b.n	8007428 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	895b      	ldrh	r3, [r3, #10]
 8007420:	461a      	mov	r2, r3
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	18d0      	adds	r0, r2, r3
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	4413      	add	r3, r2
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	4619      	mov	r1, r3
 800743c:	f00a fbe5 	bl	8011c0a <memcpy>
    offset_to += len;
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	4413      	add	r3, r2
 8007446:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	4413      	add	r3, r2
 800744e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	895b      	ldrh	r3, [r3, #10]
 8007454:	461a      	mov	r2, r3
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	4293      	cmp	r3, r2
 800745a:	d906      	bls.n	800746a <pbuf_copy+0xb2>
 800745c:	4b38      	ldr	r3, [pc, #224]	@ (8007540 <pbuf_copy+0x188>)
 800745e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8007462:	493a      	ldr	r1, [pc, #232]	@ (800754c <pbuf_copy+0x194>)
 8007464:	4838      	ldr	r0, [pc, #224]	@ (8007548 <pbuf_copy+0x190>)
 8007466:	f00a faa5 	bl	80119b4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	895b      	ldrh	r3, [r3, #10]
 800746e:	461a      	mov	r2, r3
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	4293      	cmp	r3, r2
 8007474:	d906      	bls.n	8007484 <pbuf_copy+0xcc>
 8007476:	4b32      	ldr	r3, [pc, #200]	@ (8007540 <pbuf_copy+0x188>)
 8007478:	f240 32da 	movw	r2, #986	@ 0x3da
 800747c:	4934      	ldr	r1, [pc, #208]	@ (8007550 <pbuf_copy+0x198>)
 800747e:	4832      	ldr	r0, [pc, #200]	@ (8007548 <pbuf_copy+0x190>)
 8007480:	f00a fa98 	bl	80119b4 <iprintf>
    if (offset_from >= p_from->len) {
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	895b      	ldrh	r3, [r3, #10]
 8007488:	461a      	mov	r2, r3
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	4293      	cmp	r3, r2
 800748e:	d304      	bcc.n	800749a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007490:	2300      	movs	r3, #0
 8007492:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	895b      	ldrh	r3, [r3, #10]
 800749e:	461a      	mov	r2, r3
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d114      	bne.n	80074d0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80074a6:	2300      	movs	r3, #0
 80074a8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10c      	bne.n	80074d0 <pbuf_copy+0x118>
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d009      	beq.n	80074d0 <pbuf_copy+0x118>
 80074bc:	4b20      	ldr	r3, [pc, #128]	@ (8007540 <pbuf_copy+0x188>)
 80074be:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80074c2:	4924      	ldr	r1, [pc, #144]	@ (8007554 <pbuf_copy+0x19c>)
 80074c4:	4820      	ldr	r0, [pc, #128]	@ (8007548 <pbuf_copy+0x190>)
 80074c6:	f00a fa75 	bl	80119b4 <iprintf>
 80074ca:	f06f 030f 	mvn.w	r3, #15
 80074ce:	e032      	b.n	8007536 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d013      	beq.n	80074fe <pbuf_copy+0x146>
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	895a      	ldrh	r2, [r3, #10]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	891b      	ldrh	r3, [r3, #8]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d10d      	bne.n	80074fe <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d009      	beq.n	80074fe <pbuf_copy+0x146>
 80074ea:	4b15      	ldr	r3, [pc, #84]	@ (8007540 <pbuf_copy+0x188>)
 80074ec:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80074f0:	4919      	ldr	r1, [pc, #100]	@ (8007558 <pbuf_copy+0x1a0>)
 80074f2:	4815      	ldr	r0, [pc, #84]	@ (8007548 <pbuf_copy+0x190>)
 80074f4:	f00a fa5e 	bl	80119b4 <iprintf>
 80074f8:	f06f 0305 	mvn.w	r3, #5
 80074fc:	e01b      	b.n	8007536 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d013      	beq.n	800752c <pbuf_copy+0x174>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	895a      	ldrh	r2, [r3, #10]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	891b      	ldrh	r3, [r3, #8]
 800750c:	429a      	cmp	r2, r3
 800750e:	d10d      	bne.n	800752c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d009      	beq.n	800752c <pbuf_copy+0x174>
 8007518:	4b09      	ldr	r3, [pc, #36]	@ (8007540 <pbuf_copy+0x188>)
 800751a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800751e:	490e      	ldr	r1, [pc, #56]	@ (8007558 <pbuf_copy+0x1a0>)
 8007520:	4809      	ldr	r0, [pc, #36]	@ (8007548 <pbuf_copy+0x190>)
 8007522:	f00a fa47 	bl	80119b4 <iprintf>
 8007526:	f06f 0305 	mvn.w	r3, #5
 800752a:	e004      	b.n	8007536 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	f47f af61 	bne.w	80073f6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3718      	adds	r7, #24
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	080131d0 	.word	0x080131d0
 8007544:	08013478 	.word	0x08013478
 8007548:	08013230 	.word	0x08013230
 800754c:	080134a8 	.word	0x080134a8
 8007550:	080134c0 	.word	0x080134c0
 8007554:	080134dc 	.word	0x080134dc
 8007558:	080134ec 	.word	0x080134ec

0800755c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b088      	sub	sp, #32
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	4611      	mov	r1, r2
 8007568:	461a      	mov	r2, r3
 800756a:	460b      	mov	r3, r1
 800756c:	80fb      	strh	r3, [r7, #6]
 800756e:	4613      	mov	r3, r2
 8007570:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007572:	2300      	movs	r3, #0
 8007574:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007576:	2300      	movs	r3, #0
 8007578:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d108      	bne.n	8007592 <pbuf_copy_partial+0x36>
 8007580:	4b2b      	ldr	r3, [pc, #172]	@ (8007630 <pbuf_copy_partial+0xd4>)
 8007582:	f240 420a 	movw	r2, #1034	@ 0x40a
 8007586:	492b      	ldr	r1, [pc, #172]	@ (8007634 <pbuf_copy_partial+0xd8>)
 8007588:	482b      	ldr	r0, [pc, #172]	@ (8007638 <pbuf_copy_partial+0xdc>)
 800758a:	f00a fa13 	bl	80119b4 <iprintf>
 800758e:	2300      	movs	r3, #0
 8007590:	e04a      	b.n	8007628 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d108      	bne.n	80075aa <pbuf_copy_partial+0x4e>
 8007598:	4b25      	ldr	r3, [pc, #148]	@ (8007630 <pbuf_copy_partial+0xd4>)
 800759a:	f240 420b 	movw	r2, #1035	@ 0x40b
 800759e:	4927      	ldr	r1, [pc, #156]	@ (800763c <pbuf_copy_partial+0xe0>)
 80075a0:	4825      	ldr	r0, [pc, #148]	@ (8007638 <pbuf_copy_partial+0xdc>)
 80075a2:	f00a fa07 	bl	80119b4 <iprintf>
 80075a6:	2300      	movs	r3, #0
 80075a8:	e03e      	b.n	8007628 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	61fb      	str	r3, [r7, #28]
 80075ae:	e034      	b.n	800761a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80075b0:	88bb      	ldrh	r3, [r7, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00a      	beq.n	80075cc <pbuf_copy_partial+0x70>
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	895b      	ldrh	r3, [r3, #10]
 80075ba:	88ba      	ldrh	r2, [r7, #4]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d305      	bcc.n	80075cc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	895b      	ldrh	r3, [r3, #10]
 80075c4:	88ba      	ldrh	r2, [r7, #4]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	80bb      	strh	r3, [r7, #4]
 80075ca:	e023      	b.n	8007614 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	895a      	ldrh	r2, [r3, #10]
 80075d0:	88bb      	ldrh	r3, [r7, #4]
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80075d6:	8b3a      	ldrh	r2, [r7, #24]
 80075d8:	88fb      	ldrh	r3, [r7, #6]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d901      	bls.n	80075e2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80075de:	88fb      	ldrh	r3, [r7, #6]
 80075e0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80075e2:	8b7b      	ldrh	r3, [r7, #26]
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	18d0      	adds	r0, r2, r3
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	685a      	ldr	r2, [r3, #4]
 80075ec:	88bb      	ldrh	r3, [r7, #4]
 80075ee:	4413      	add	r3, r2
 80075f0:	8b3a      	ldrh	r2, [r7, #24]
 80075f2:	4619      	mov	r1, r3
 80075f4:	f00a fb09 	bl	8011c0a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80075f8:	8afa      	ldrh	r2, [r7, #22]
 80075fa:	8b3b      	ldrh	r3, [r7, #24]
 80075fc:	4413      	add	r3, r2
 80075fe:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007600:	8b7a      	ldrh	r2, [r7, #26]
 8007602:	8b3b      	ldrh	r3, [r7, #24]
 8007604:	4413      	add	r3, r2
 8007606:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8007608:	88fa      	ldrh	r2, [r7, #6]
 800760a:	8b3b      	ldrh	r3, [r7, #24]
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007610:	2300      	movs	r3, #0
 8007612:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	61fb      	str	r3, [r7, #28]
 800761a:	88fb      	ldrh	r3, [r7, #6]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d002      	beq.n	8007626 <pbuf_copy_partial+0xca>
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1c4      	bne.n	80075b0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8007626:	8afb      	ldrh	r3, [r7, #22]
}
 8007628:	4618      	mov	r0, r3
 800762a:	3720      	adds	r7, #32
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	080131d0 	.word	0x080131d0
 8007634:	08013518 	.word	0x08013518
 8007638:	08013230 	.word	0x08013230
 800763c:	08013538 	.word	0x08013538

08007640 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	4603      	mov	r3, r0
 8007648:	603a      	str	r2, [r7, #0]
 800764a:	71fb      	strb	r3, [r7, #7]
 800764c:	460b      	mov	r3, r1
 800764e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	8919      	ldrh	r1, [r3, #8]
 8007654:	88ba      	ldrh	r2, [r7, #4]
 8007656:	79fb      	ldrb	r3, [r7, #7]
 8007658:	4618      	mov	r0, r3
 800765a:	f7ff fab1 	bl	8006bc0 <pbuf_alloc>
 800765e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <pbuf_clone+0x2a>
    return NULL;
 8007666:	2300      	movs	r3, #0
 8007668:	e011      	b.n	800768e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800766a:	6839      	ldr	r1, [r7, #0]
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f7ff fea3 	bl	80073b8 <pbuf_copy>
 8007672:	4603      	mov	r3, r0
 8007674:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007676:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d006      	beq.n	800768c <pbuf_clone+0x4c>
 800767e:	4b06      	ldr	r3, [pc, #24]	@ (8007698 <pbuf_clone+0x58>)
 8007680:	f240 5224 	movw	r2, #1316	@ 0x524
 8007684:	4905      	ldr	r1, [pc, #20]	@ (800769c <pbuf_clone+0x5c>)
 8007686:	4806      	ldr	r0, [pc, #24]	@ (80076a0 <pbuf_clone+0x60>)
 8007688:	f00a f994 	bl	80119b4 <iprintf>
  return q;
 800768c:	68fb      	ldr	r3, [r7, #12]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	080131d0 	.word	0x080131d0
 800769c:	08013644 	.word	0x08013644
 80076a0:	08013230 	.word	0x08013230

080076a4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80076a8:	f00a f872 	bl	8011790 <rand>
 80076ac:	4603      	mov	r3, r0
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	4b01      	ldr	r3, [pc, #4]	@ (80076c4 <tcp_init+0x20>)
 80076be:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80076c0:	bf00      	nop
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	20000020 	.word	0x20000020

080076c8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	7d1b      	ldrb	r3, [r3, #20]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d105      	bne.n	80076e4 <tcp_free+0x1c>
 80076d8:	4b06      	ldr	r3, [pc, #24]	@ (80076f4 <tcp_free+0x2c>)
 80076da:	22d4      	movs	r2, #212	@ 0xd4
 80076dc:	4906      	ldr	r1, [pc, #24]	@ (80076f8 <tcp_free+0x30>)
 80076de:	4807      	ldr	r0, [pc, #28]	@ (80076fc <tcp_free+0x34>)
 80076e0:	f00a f968 	bl	80119b4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80076e4:	6879      	ldr	r1, [r7, #4]
 80076e6:	2001      	movs	r0, #1
 80076e8:	f7fe fed8 	bl	800649c <memp_free>
}
 80076ec:	bf00      	nop
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	080136d0 	.word	0x080136d0
 80076f8:	08013700 	.word	0x08013700
 80076fc:	08013714 	.word	0x08013714

08007700 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	7d1b      	ldrb	r3, [r3, #20]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d105      	bne.n	800771c <tcp_free_listen+0x1c>
 8007710:	4b06      	ldr	r3, [pc, #24]	@ (800772c <tcp_free_listen+0x2c>)
 8007712:	22df      	movs	r2, #223	@ 0xdf
 8007714:	4906      	ldr	r1, [pc, #24]	@ (8007730 <tcp_free_listen+0x30>)
 8007716:	4807      	ldr	r0, [pc, #28]	@ (8007734 <tcp_free_listen+0x34>)
 8007718:	f00a f94c 	bl	80119b4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800771c:	6879      	ldr	r1, [r7, #4]
 800771e:	2002      	movs	r0, #2
 8007720:	f7fe febc 	bl	800649c <memp_free>
}
 8007724:	bf00      	nop
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	080136d0 	.word	0x080136d0
 8007730:	0801373c 	.word	0x0801373c
 8007734:	08013714 	.word	0x08013714

08007738 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800773c:	f001 f85e 	bl	80087fc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8007740:	4b07      	ldr	r3, [pc, #28]	@ (8007760 <tcp_tmr+0x28>)
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	3301      	adds	r3, #1
 8007746:	b2da      	uxtb	r2, r3
 8007748:	4b05      	ldr	r3, [pc, #20]	@ (8007760 <tcp_tmr+0x28>)
 800774a:	701a      	strb	r2, [r3, #0]
 800774c:	4b04      	ldr	r3, [pc, #16]	@ (8007760 <tcp_tmr+0x28>)
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007758:	f000 fd0e 	bl	8008178 <tcp_slowtmr>
  }
}
 800775c:	bf00      	nop
 800775e:	bd80      	pop	{r7, pc}
 8007760:	200083ed 	.word	0x200083ed

08007764 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d105      	bne.n	8007780 <tcp_remove_listener+0x1c>
 8007774:	4b0d      	ldr	r3, [pc, #52]	@ (80077ac <tcp_remove_listener+0x48>)
 8007776:	22ff      	movs	r2, #255	@ 0xff
 8007778:	490d      	ldr	r1, [pc, #52]	@ (80077b0 <tcp_remove_listener+0x4c>)
 800777a:	480e      	ldr	r0, [pc, #56]	@ (80077b4 <tcp_remove_listener+0x50>)
 800777c:	f00a f91a 	bl	80119b4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	60fb      	str	r3, [r7, #12]
 8007784:	e00a      	b.n	800779c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	429a      	cmp	r2, r3
 800778e:	d102      	bne.n	8007796 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	60fb      	str	r3, [r7, #12]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1f1      	bne.n	8007786 <tcp_remove_listener+0x22>
    }
  }
}
 80077a2:	bf00      	nop
 80077a4:	bf00      	nop
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	080136d0 	.word	0x080136d0
 80077b0:	08013758 	.word	0x08013758
 80077b4:	08013714 	.word	0x08013714

080077b8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d106      	bne.n	80077d4 <tcp_listen_closed+0x1c>
 80077c6:	4b14      	ldr	r3, [pc, #80]	@ (8007818 <tcp_listen_closed+0x60>)
 80077c8:	f240 1211 	movw	r2, #273	@ 0x111
 80077cc:	4913      	ldr	r1, [pc, #76]	@ (800781c <tcp_listen_closed+0x64>)
 80077ce:	4814      	ldr	r0, [pc, #80]	@ (8007820 <tcp_listen_closed+0x68>)
 80077d0:	f00a f8f0 	bl	80119b4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	7d1b      	ldrb	r3, [r3, #20]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d006      	beq.n	80077ea <tcp_listen_closed+0x32>
 80077dc:	4b0e      	ldr	r3, [pc, #56]	@ (8007818 <tcp_listen_closed+0x60>)
 80077de:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80077e2:	4910      	ldr	r1, [pc, #64]	@ (8007824 <tcp_listen_closed+0x6c>)
 80077e4:	480e      	ldr	r0, [pc, #56]	@ (8007820 <tcp_listen_closed+0x68>)
 80077e6:	f00a f8e5 	bl	80119b4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80077ea:	2301      	movs	r3, #1
 80077ec:	60fb      	str	r3, [r7, #12]
 80077ee:	e00b      	b.n	8007808 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80077f0:	4a0d      	ldr	r2, [pc, #52]	@ (8007828 <tcp_listen_closed+0x70>)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	6879      	ldr	r1, [r7, #4]
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7ff ffb1 	bl	8007764 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	3301      	adds	r3, #1
 8007806:	60fb      	str	r3, [r7, #12]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2b03      	cmp	r3, #3
 800780c:	d9f0      	bls.n	80077f0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800780e:	bf00      	nop
 8007810:	bf00      	nop
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	080136d0 	.word	0x080136d0
 800781c:	08013780 	.word	0x08013780
 8007820:	08013714 	.word	0x08013714
 8007824:	0801378c 	.word	0x0801378c
 8007828:	08015804 	.word	0x08015804

0800782c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800782c:	b5b0      	push	{r4, r5, r7, lr}
 800782e:	b088      	sub	sp, #32
 8007830:	af04      	add	r7, sp, #16
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	460b      	mov	r3, r1
 8007836:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d106      	bne.n	800784c <tcp_close_shutdown+0x20>
 800783e:	4b63      	ldr	r3, [pc, #396]	@ (80079cc <tcp_close_shutdown+0x1a0>)
 8007840:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8007844:	4962      	ldr	r1, [pc, #392]	@ (80079d0 <tcp_close_shutdown+0x1a4>)
 8007846:	4863      	ldr	r0, [pc, #396]	@ (80079d4 <tcp_close_shutdown+0x1a8>)
 8007848:	f00a f8b4 	bl	80119b4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800784c:	78fb      	ldrb	r3, [r7, #3]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d066      	beq.n	8007920 <tcp_close_shutdown+0xf4>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	7d1b      	ldrb	r3, [r3, #20]
 8007856:	2b04      	cmp	r3, #4
 8007858:	d003      	beq.n	8007862 <tcp_close_shutdown+0x36>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	7d1b      	ldrb	r3, [r3, #20]
 800785e:	2b07      	cmp	r3, #7
 8007860:	d15e      	bne.n	8007920 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007866:	2b00      	cmp	r3, #0
 8007868:	d104      	bne.n	8007874 <tcp_close_shutdown+0x48>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800786e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8007872:	d055      	beq.n	8007920 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	8b5b      	ldrh	r3, [r3, #26]
 8007878:	f003 0310 	and.w	r3, r3, #16
 800787c:	2b00      	cmp	r3, #0
 800787e:	d106      	bne.n	800788e <tcp_close_shutdown+0x62>
 8007880:	4b52      	ldr	r3, [pc, #328]	@ (80079cc <tcp_close_shutdown+0x1a0>)
 8007882:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8007886:	4954      	ldr	r1, [pc, #336]	@ (80079d8 <tcp_close_shutdown+0x1ac>)
 8007888:	4852      	ldr	r0, [pc, #328]	@ (80079d4 <tcp_close_shutdown+0x1a8>)
 800788a:	f00a f893 	bl	80119b4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007896:	687d      	ldr	r5, [r7, #4]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	3304      	adds	r3, #4
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	8ad2      	ldrh	r2, [r2, #22]
 80078a0:	6879      	ldr	r1, [r7, #4]
 80078a2:	8b09      	ldrh	r1, [r1, #24]
 80078a4:	9102      	str	r1, [sp, #8]
 80078a6:	9201      	str	r2, [sp, #4]
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	462b      	mov	r3, r5
 80078ac:	4622      	mov	r2, r4
 80078ae:	4601      	mov	r1, r0
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f005 fce1 	bl	800d278 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f001 fac4 	bl	8008e44 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80078bc:	4b47      	ldr	r3, [pc, #284]	@ (80079dc <tcp_close_shutdown+0x1b0>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d105      	bne.n	80078d2 <tcp_close_shutdown+0xa6>
 80078c6:	4b45      	ldr	r3, [pc, #276]	@ (80079dc <tcp_close_shutdown+0x1b0>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	4a43      	ldr	r2, [pc, #268]	@ (80079dc <tcp_close_shutdown+0x1b0>)
 80078ce:	6013      	str	r3, [r2, #0]
 80078d0:	e013      	b.n	80078fa <tcp_close_shutdown+0xce>
 80078d2:	4b42      	ldr	r3, [pc, #264]	@ (80079dc <tcp_close_shutdown+0x1b0>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	60fb      	str	r3, [r7, #12]
 80078d8:	e00c      	b.n	80078f4 <tcp_close_shutdown+0xc8>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d104      	bne.n	80078ee <tcp_close_shutdown+0xc2>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	68da      	ldr	r2, [r3, #12]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	60da      	str	r2, [r3, #12]
 80078ec:	e005      	b.n	80078fa <tcp_close_shutdown+0xce>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	60fb      	str	r3, [r7, #12]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1ef      	bne.n	80078da <tcp_close_shutdown+0xae>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	60da      	str	r2, [r3, #12]
 8007900:	4b37      	ldr	r3, [pc, #220]	@ (80079e0 <tcp_close_shutdown+0x1b4>)
 8007902:	2201      	movs	r2, #1
 8007904:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8007906:	4b37      	ldr	r3, [pc, #220]	@ (80079e4 <tcp_close_shutdown+0x1b8>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	429a      	cmp	r2, r3
 800790e:	d102      	bne.n	8007916 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8007910:	f003 ff58 	bl	800b7c4 <tcp_trigger_input_pcb_close>
 8007914:	e002      	b.n	800791c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f7ff fed6 	bl	80076c8 <tcp_free>
      }
      return ERR_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	e050      	b.n	80079c2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	7d1b      	ldrb	r3, [r3, #20]
 8007924:	2b02      	cmp	r3, #2
 8007926:	d03b      	beq.n	80079a0 <tcp_close_shutdown+0x174>
 8007928:	2b02      	cmp	r3, #2
 800792a:	dc44      	bgt.n	80079b6 <tcp_close_shutdown+0x18a>
 800792c:	2b00      	cmp	r3, #0
 800792e:	d002      	beq.n	8007936 <tcp_close_shutdown+0x10a>
 8007930:	2b01      	cmp	r3, #1
 8007932:	d02a      	beq.n	800798a <tcp_close_shutdown+0x15e>
 8007934:	e03f      	b.n	80079b6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	8adb      	ldrh	r3, [r3, #22]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d021      	beq.n	8007982 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800793e:	4b2a      	ldr	r3, [pc, #168]	@ (80079e8 <tcp_close_shutdown+0x1bc>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	429a      	cmp	r2, r3
 8007946:	d105      	bne.n	8007954 <tcp_close_shutdown+0x128>
 8007948:	4b27      	ldr	r3, [pc, #156]	@ (80079e8 <tcp_close_shutdown+0x1bc>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	4a26      	ldr	r2, [pc, #152]	@ (80079e8 <tcp_close_shutdown+0x1bc>)
 8007950:	6013      	str	r3, [r2, #0]
 8007952:	e013      	b.n	800797c <tcp_close_shutdown+0x150>
 8007954:	4b24      	ldr	r3, [pc, #144]	@ (80079e8 <tcp_close_shutdown+0x1bc>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	60bb      	str	r3, [r7, #8]
 800795a:	e00c      	b.n	8007976 <tcp_close_shutdown+0x14a>
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	429a      	cmp	r2, r3
 8007964:	d104      	bne.n	8007970 <tcp_close_shutdown+0x144>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	68da      	ldr	r2, [r3, #12]
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	60da      	str	r2, [r3, #12]
 800796e:	e005      	b.n	800797c <tcp_close_shutdown+0x150>
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	60bb      	str	r3, [r7, #8]
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1ef      	bne.n	800795c <tcp_close_shutdown+0x130>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f7ff fea0 	bl	80076c8 <tcp_free>
      break;
 8007988:	e01a      	b.n	80079c0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f7ff ff14 	bl	80077b8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007990:	6879      	ldr	r1, [r7, #4]
 8007992:	4816      	ldr	r0, [pc, #88]	@ (80079ec <tcp_close_shutdown+0x1c0>)
 8007994:	f001 faa6 	bl	8008ee4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f7ff feb1 	bl	8007700 <tcp_free_listen>
      break;
 800799e:	e00f      	b.n	80079c0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80079a0:	6879      	ldr	r1, [r7, #4]
 80079a2:	480e      	ldr	r0, [pc, #56]	@ (80079dc <tcp_close_shutdown+0x1b0>)
 80079a4:	f001 fa9e 	bl	8008ee4 <tcp_pcb_remove>
 80079a8:	4b0d      	ldr	r3, [pc, #52]	@ (80079e0 <tcp_close_shutdown+0x1b4>)
 80079aa:	2201      	movs	r2, #1
 80079ac:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7ff fe8a 	bl	80076c8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80079b4:	e004      	b.n	80079c0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f81a 	bl	80079f0 <tcp_close_shutdown_fin>
 80079bc:	4603      	mov	r3, r0
 80079be:	e000      	b.n	80079c2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bdb0      	pop	{r4, r5, r7, pc}
 80079ca:	bf00      	nop
 80079cc:	080136d0 	.word	0x080136d0
 80079d0:	080137a4 	.word	0x080137a4
 80079d4:	08013714 	.word	0x08013714
 80079d8:	080137c4 	.word	0x080137c4
 80079dc:	200083e4 	.word	0x200083e4
 80079e0:	200083ec 	.word	0x200083ec
 80079e4:	20008424 	.word	0x20008424
 80079e8:	200083dc 	.word	0x200083dc
 80079ec:	200083e0 	.word	0x200083e0

080079f0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d106      	bne.n	8007a0c <tcp_close_shutdown_fin+0x1c>
 80079fe:	4b2e      	ldr	r3, [pc, #184]	@ (8007ab8 <tcp_close_shutdown_fin+0xc8>)
 8007a00:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8007a04:	492d      	ldr	r1, [pc, #180]	@ (8007abc <tcp_close_shutdown_fin+0xcc>)
 8007a06:	482e      	ldr	r0, [pc, #184]	@ (8007ac0 <tcp_close_shutdown_fin+0xd0>)
 8007a08:	f009 ffd4 	bl	80119b4 <iprintf>

  switch (pcb->state) {
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	7d1b      	ldrb	r3, [r3, #20]
 8007a10:	2b07      	cmp	r3, #7
 8007a12:	d020      	beq.n	8007a56 <tcp_close_shutdown_fin+0x66>
 8007a14:	2b07      	cmp	r3, #7
 8007a16:	dc2b      	bgt.n	8007a70 <tcp_close_shutdown_fin+0x80>
 8007a18:	2b03      	cmp	r3, #3
 8007a1a:	d002      	beq.n	8007a22 <tcp_close_shutdown_fin+0x32>
 8007a1c:	2b04      	cmp	r3, #4
 8007a1e:	d00d      	beq.n	8007a3c <tcp_close_shutdown_fin+0x4c>
 8007a20:	e026      	b.n	8007a70 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f004 fd36 	bl	800c494 <tcp_send_fin>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007a2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d11f      	bne.n	8007a74 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2205      	movs	r2, #5
 8007a38:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007a3a:	e01b      	b.n	8007a74 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f004 fd29 	bl	800c494 <tcp_send_fin>
 8007a42:	4603      	mov	r3, r0
 8007a44:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d114      	bne.n	8007a78 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2205      	movs	r2, #5
 8007a52:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007a54:	e010      	b.n	8007a78 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f004 fd1c 	bl	800c494 <tcp_send_fin>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d109      	bne.n	8007a7c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2209      	movs	r2, #9
 8007a6c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007a6e:	e005      	b.n	8007a7c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007a70:	2300      	movs	r3, #0
 8007a72:	e01c      	b.n	8007aae <tcp_close_shutdown_fin+0xbe>
      break;
 8007a74:	bf00      	nop
 8007a76:	e002      	b.n	8007a7e <tcp_close_shutdown_fin+0x8e>
      break;
 8007a78:	bf00      	nop
 8007a7a:	e000      	b.n	8007a7e <tcp_close_shutdown_fin+0x8e>
      break;
 8007a7c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d103      	bne.n	8007a8e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f004 fe42 	bl	800c710 <tcp_output>
 8007a8c:	e00d      	b.n	8007aaa <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8007a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a96:	d108      	bne.n	8007aaa <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	8b5b      	ldrh	r3, [r3, #26]
 8007a9c:	f043 0308 	orr.w	r3, r3, #8
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	e001      	b.n	8007aae <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8007aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	080136d0 	.word	0x080136d0
 8007abc:	08013780 	.word	0x08013780
 8007ac0:	08013714 	.word	0x08013714

08007ac4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d109      	bne.n	8007ae6 <tcp_close+0x22>
 8007ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8007b10 <tcp_close+0x4c>)
 8007ad4:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8007ad8:	490e      	ldr	r1, [pc, #56]	@ (8007b14 <tcp_close+0x50>)
 8007ada:	480f      	ldr	r0, [pc, #60]	@ (8007b18 <tcp_close+0x54>)
 8007adc:	f009 ff6a 	bl	80119b4 <iprintf>
 8007ae0:	f06f 030f 	mvn.w	r3, #15
 8007ae4:	e00f      	b.n	8007b06 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	7d1b      	ldrb	r3, [r3, #20]
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d006      	beq.n	8007afc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	8b5b      	ldrh	r3, [r3, #26]
 8007af2:	f043 0310 	orr.w	r3, r3, #16
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8007afc:	2101      	movs	r1, #1
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7ff fe94 	bl	800782c <tcp_close_shutdown>
 8007b04:	4603      	mov	r3, r0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	080136d0 	.word	0x080136d0
 8007b14:	080137e0 	.word	0x080137e0
 8007b18:	08013714 	.word	0x08013714

08007b1c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b08e      	sub	sp, #56	@ 0x38
 8007b20:	af04      	add	r7, sp, #16
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d107      	bne.n	8007b3c <tcp_abandon+0x20>
 8007b2c:	4b52      	ldr	r3, [pc, #328]	@ (8007c78 <tcp_abandon+0x15c>)
 8007b2e:	f240 223d 	movw	r2, #573	@ 0x23d
 8007b32:	4952      	ldr	r1, [pc, #328]	@ (8007c7c <tcp_abandon+0x160>)
 8007b34:	4852      	ldr	r0, [pc, #328]	@ (8007c80 <tcp_abandon+0x164>)
 8007b36:	f009 ff3d 	bl	80119b4 <iprintf>
 8007b3a:	e099      	b.n	8007c70 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	7d1b      	ldrb	r3, [r3, #20]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d106      	bne.n	8007b52 <tcp_abandon+0x36>
 8007b44:	4b4c      	ldr	r3, [pc, #304]	@ (8007c78 <tcp_abandon+0x15c>)
 8007b46:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8007b4a:	494e      	ldr	r1, [pc, #312]	@ (8007c84 <tcp_abandon+0x168>)
 8007b4c:	484c      	ldr	r0, [pc, #304]	@ (8007c80 <tcp_abandon+0x164>)
 8007b4e:	f009 ff31 	bl	80119b4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	7d1b      	ldrb	r3, [r3, #20]
 8007b56:	2b0a      	cmp	r3, #10
 8007b58:	d107      	bne.n	8007b6a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007b5a:	6879      	ldr	r1, [r7, #4]
 8007b5c:	484a      	ldr	r0, [pc, #296]	@ (8007c88 <tcp_abandon+0x16c>)
 8007b5e:	f001 f9c1 	bl	8008ee4 <tcp_pcb_remove>
    tcp_free(pcb);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7ff fdb0 	bl	80076c8 <tcp_free>
 8007b68:	e082      	b.n	8007c70 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b76:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b7c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b84:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	7d1b      	ldrb	r3, [r3, #20]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d126      	bne.n	8007be2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	8adb      	ldrh	r3, [r3, #22]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d02e      	beq.n	8007bfa <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007b9c:	4b3b      	ldr	r3, [pc, #236]	@ (8007c8c <tcp_abandon+0x170>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d105      	bne.n	8007bb2 <tcp_abandon+0x96>
 8007ba6:	4b39      	ldr	r3, [pc, #228]	@ (8007c8c <tcp_abandon+0x170>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	4a37      	ldr	r2, [pc, #220]	@ (8007c8c <tcp_abandon+0x170>)
 8007bae:	6013      	str	r3, [r2, #0]
 8007bb0:	e013      	b.n	8007bda <tcp_abandon+0xbe>
 8007bb2:	4b36      	ldr	r3, [pc, #216]	@ (8007c8c <tcp_abandon+0x170>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	61fb      	str	r3, [r7, #28]
 8007bb8:	e00c      	b.n	8007bd4 <tcp_abandon+0xb8>
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d104      	bne.n	8007bce <tcp_abandon+0xb2>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	68da      	ldr	r2, [r3, #12]
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	60da      	str	r2, [r3, #12]
 8007bcc:	e005      	b.n	8007bda <tcp_abandon+0xbe>
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	61fb      	str	r3, [r7, #28]
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1ef      	bne.n	8007bba <tcp_abandon+0x9e>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	60da      	str	r2, [r3, #12]
 8007be0:	e00b      	b.n	8007bfa <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	8adb      	ldrh	r3, [r3, #22]
 8007bea:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007bec:	6879      	ldr	r1, [r7, #4]
 8007bee:	4828      	ldr	r0, [pc, #160]	@ (8007c90 <tcp_abandon+0x174>)
 8007bf0:	f001 f978 	bl	8008ee4 <tcp_pcb_remove>
 8007bf4:	4b27      	ldr	r3, [pc, #156]	@ (8007c94 <tcp_abandon+0x178>)
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d004      	beq.n	8007c0c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c06:	4618      	mov	r0, r3
 8007c08:	f000 fed8 	bl	80089bc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d004      	beq.n	8007c1e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f000 fecf 	bl	80089bc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d004      	beq.n	8007c30 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 fec6 	bl	80089bc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8007c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00e      	beq.n	8007c54 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007c36:	6879      	ldr	r1, [r7, #4]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	8b12      	ldrh	r2, [r2, #24]
 8007c40:	9202      	str	r2, [sp, #8]
 8007c42:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8007c44:	9201      	str	r2, [sp, #4]
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	460b      	mov	r3, r1
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	69b9      	ldr	r1, [r7, #24]
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f005 fb12 	bl	800d278 <tcp_rst>
    }
    last_state = pcb->state;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	7d1b      	ldrb	r3, [r3, #20]
 8007c58:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7ff fd34 	bl	80076c8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d004      	beq.n	8007c70 <tcp_abandon+0x154>
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	f06f 010c 	mvn.w	r1, #12
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	4798      	blx	r3
  }
}
 8007c70:	3728      	adds	r7, #40	@ 0x28
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	080136d0 	.word	0x080136d0
 8007c7c:	08013814 	.word	0x08013814
 8007c80:	08013714 	.word	0x08013714
 8007c84:	08013830 	.word	0x08013830
 8007c88:	200083e8 	.word	0x200083e8
 8007c8c:	200083dc 	.word	0x200083dc
 8007c90:	200083e4 	.word	0x200083e4
 8007c94:	200083ec 	.word	0x200083ec

08007c98 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007ca0:	2101      	movs	r1, #1
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f7ff ff3a 	bl	8007b1c <tcp_abandon>
}
 8007ca8:	bf00      	nop
 8007caa:	3708      	adds	r7, #8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b088      	sub	sp, #32
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8007cbe:	2304      	movs	r3, #4
 8007cc0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d101      	bne.n	8007ccc <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8007cc8:	4b3e      	ldr	r3, [pc, #248]	@ (8007dc4 <tcp_bind+0x114>)
 8007cca:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d109      	bne.n	8007ce6 <tcp_bind+0x36>
 8007cd2:	4b3d      	ldr	r3, [pc, #244]	@ (8007dc8 <tcp_bind+0x118>)
 8007cd4:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8007cd8:	493c      	ldr	r1, [pc, #240]	@ (8007dcc <tcp_bind+0x11c>)
 8007cda:	483d      	ldr	r0, [pc, #244]	@ (8007dd0 <tcp_bind+0x120>)
 8007cdc:	f009 fe6a 	bl	80119b4 <iprintf>
 8007ce0:	f06f 030f 	mvn.w	r3, #15
 8007ce4:	e06a      	b.n	8007dbc <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	7d1b      	ldrb	r3, [r3, #20]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d009      	beq.n	8007d02 <tcp_bind+0x52>
 8007cee:	4b36      	ldr	r3, [pc, #216]	@ (8007dc8 <tcp_bind+0x118>)
 8007cf0:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8007cf4:	4937      	ldr	r1, [pc, #220]	@ (8007dd4 <tcp_bind+0x124>)
 8007cf6:	4836      	ldr	r0, [pc, #216]	@ (8007dd0 <tcp_bind+0x120>)
 8007cf8:	f009 fe5c 	bl	80119b4 <iprintf>
 8007cfc:	f06f 0305 	mvn.w	r3, #5
 8007d00:	e05c      	b.n	8007dbc <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8007d02:	88fb      	ldrh	r3, [r7, #6]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d109      	bne.n	8007d1c <tcp_bind+0x6c>
    port = tcp_new_port();
 8007d08:	f000 f9f0 	bl	80080ec <tcp_new_port>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8007d10:	88fb      	ldrh	r3, [r7, #6]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d135      	bne.n	8007d82 <tcp_bind+0xd2>
      return ERR_BUF;
 8007d16:	f06f 0301 	mvn.w	r3, #1
 8007d1a:	e04f      	b.n	8007dbc <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	61fb      	str	r3, [r7, #28]
 8007d20:	e02b      	b.n	8007d7a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007d22:	4a2d      	ldr	r2, [pc, #180]	@ (8007dd8 <tcp_bind+0x128>)
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	61bb      	str	r3, [r7, #24]
 8007d2e:	e01e      	b.n	8007d6e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	8adb      	ldrh	r3, [r3, #22]
 8007d34:	88fa      	ldrh	r2, [r7, #6]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d116      	bne.n	8007d68 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8007d3a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d010      	beq.n	8007d62 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00c      	beq.n	8007d62 <tcp_bind+0xb2>
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d009      	beq.n	8007d62 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d005      	beq.n	8007d62 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d102      	bne.n	8007d68 <tcp_bind+0xb8>
              return ERR_USE;
 8007d62:	f06f 0307 	mvn.w	r3, #7
 8007d66:	e029      	b.n	8007dbc <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	61bb      	str	r3, [r7, #24]
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1dd      	bne.n	8007d30 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	3301      	adds	r3, #1
 8007d78:	61fb      	str	r3, [r7, #28]
 8007d7a:	69fa      	ldr	r2, [r7, #28]
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	dbcf      	blt.n	8007d22 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00c      	beq.n	8007da2 <tcp_bind+0xf2>
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d008      	beq.n	8007da2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d002      	beq.n	8007d9c <tcp_bind+0xec>
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	e000      	b.n	8007d9e <tcp_bind+0xee>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	88fa      	ldrh	r2, [r7, #6]
 8007da6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8007da8:	4b0c      	ldr	r3, [pc, #48]	@ (8007ddc <tcp_bind+0x12c>)
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	60da      	str	r2, [r3, #12]
 8007db0:	4a0a      	ldr	r2, [pc, #40]	@ (8007ddc <tcp_bind+0x12c>)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6013      	str	r3, [r2, #0]
 8007db6:	f005 fc21 	bl	800d5fc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3720      	adds	r7, #32
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	0801582c 	.word	0x0801582c
 8007dc8:	080136d0 	.word	0x080136d0
 8007dcc:	08013864 	.word	0x08013864
 8007dd0:	08013714 	.word	0x08013714
 8007dd4:	0801387c 	.word	0x0801387c
 8007dd8:	08015804 	.word	0x08015804
 8007ddc:	200083dc 	.word	0x200083dc

08007de0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	4613      	mov	r3, r2
 8007dec:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d106      	bne.n	8007e02 <tcp_accept_null+0x22>
 8007df4:	4b07      	ldr	r3, [pc, #28]	@ (8007e14 <tcp_accept_null+0x34>)
 8007df6:	f240 320f 	movw	r2, #783	@ 0x30f
 8007dfa:	4907      	ldr	r1, [pc, #28]	@ (8007e18 <tcp_accept_null+0x38>)
 8007dfc:	4807      	ldr	r0, [pc, #28]	@ (8007e1c <tcp_accept_null+0x3c>)
 8007dfe:	f009 fdd9 	bl	80119b4 <iprintf>

  tcp_abort(pcb);
 8007e02:	68b8      	ldr	r0, [r7, #8]
 8007e04:	f7ff ff48 	bl	8007c98 <tcp_abort>

  return ERR_ABRT;
 8007e08:	f06f 030c 	mvn.w	r3, #12
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	080136d0 	.word	0x080136d0
 8007e18:	080138a4 	.word	0x080138a4
 8007e1c:	08013714 	.word	0x08013714

08007e20 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	460b      	mov	r3, r1
 8007e2a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8007e2c:	78fb      	ldrb	r3, [r7, #3]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	4619      	mov	r1, r3
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f806 	bl	8007e44 <tcp_listen_with_backlog_and_err>
 8007e38:	4603      	mov	r3, r0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3708      	adds	r7, #8
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
	...

08007e44 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b088      	sub	sp, #32
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	607a      	str	r2, [r7, #4]
 8007e50:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8007e52:	2300      	movs	r3, #0
 8007e54:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d109      	bne.n	8007e70 <tcp_listen_with_backlog_and_err+0x2c>
 8007e5c:	4b47      	ldr	r3, [pc, #284]	@ (8007f7c <tcp_listen_with_backlog_and_err+0x138>)
 8007e5e:	f240 3259 	movw	r2, #857	@ 0x359
 8007e62:	4947      	ldr	r1, [pc, #284]	@ (8007f80 <tcp_listen_with_backlog_and_err+0x13c>)
 8007e64:	4847      	ldr	r0, [pc, #284]	@ (8007f84 <tcp_listen_with_backlog_and_err+0x140>)
 8007e66:	f009 fda5 	bl	80119b4 <iprintf>
 8007e6a:	23f0      	movs	r3, #240	@ 0xf0
 8007e6c:	76fb      	strb	r3, [r7, #27]
 8007e6e:	e079      	b.n	8007f64 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	7d1b      	ldrb	r3, [r3, #20]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d009      	beq.n	8007e8c <tcp_listen_with_backlog_and_err+0x48>
 8007e78:	4b40      	ldr	r3, [pc, #256]	@ (8007f7c <tcp_listen_with_backlog_and_err+0x138>)
 8007e7a:	f240 325a 	movw	r2, #858	@ 0x35a
 8007e7e:	4942      	ldr	r1, [pc, #264]	@ (8007f88 <tcp_listen_with_backlog_and_err+0x144>)
 8007e80:	4840      	ldr	r0, [pc, #256]	@ (8007f84 <tcp_listen_with_backlog_and_err+0x140>)
 8007e82:	f009 fd97 	bl	80119b4 <iprintf>
 8007e86:	23f1      	movs	r3, #241	@ 0xf1
 8007e88:	76fb      	strb	r3, [r7, #27]
 8007e8a:	e06b      	b.n	8007f64 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	7d1b      	ldrb	r3, [r3, #20]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d104      	bne.n	8007e9e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8007e98:	23f7      	movs	r3, #247	@ 0xf7
 8007e9a:	76fb      	strb	r3, [r7, #27]
    goto done;
 8007e9c:	e062      	b.n	8007f64 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8007e9e:	2002      	movs	r0, #2
 8007ea0:	f7fe fa8c 	bl	80063bc <memp_malloc>
 8007ea4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d102      	bne.n	8007eb2 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8007eac:	23ff      	movs	r3, #255	@ 0xff
 8007eae:	76fb      	strb	r3, [r7, #27]
    goto done;
 8007eb0:	e058      	b.n	8007f64 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	691a      	ldr	r2, [r3, #16]
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	8ada      	ldrh	r2, [r3, #22]
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	7d5a      	ldrb	r2, [r3, #21]
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	7a5a      	ldrb	r2, [r3, #9]
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	2200      	movs	r2, #0
 8007edc:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	7ada      	ldrb	r2, [r3, #11]
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	7a9a      	ldrb	r2, [r3, #10]
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	8adb      	ldrh	r3, [r3, #22]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d021      	beq.n	8007f42 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8007efe:	4b23      	ldr	r3, [pc, #140]	@ (8007f8c <tcp_listen_with_backlog_and_err+0x148>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d105      	bne.n	8007f14 <tcp_listen_with_backlog_and_err+0xd0>
 8007f08:	4b20      	ldr	r3, [pc, #128]	@ (8007f8c <tcp_listen_with_backlog_and_err+0x148>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	4a1f      	ldr	r2, [pc, #124]	@ (8007f8c <tcp_listen_with_backlog_and_err+0x148>)
 8007f10:	6013      	str	r3, [r2, #0]
 8007f12:	e013      	b.n	8007f3c <tcp_listen_with_backlog_and_err+0xf8>
 8007f14:	4b1d      	ldr	r3, [pc, #116]	@ (8007f8c <tcp_listen_with_backlog_and_err+0x148>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	617b      	str	r3, [r7, #20]
 8007f1a:	e00c      	b.n	8007f36 <tcp_listen_with_backlog_and_err+0xf2>
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d104      	bne.n	8007f30 <tcp_listen_with_backlog_and_err+0xec>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	68da      	ldr	r2, [r3, #12]
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	60da      	str	r2, [r3, #12]
 8007f2e:	e005      	b.n	8007f3c <tcp_listen_with_backlog_and_err+0xf8>
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	617b      	str	r3, [r7, #20]
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1ef      	bne.n	8007f1c <tcp_listen_with_backlog_and_err+0xd8>
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f7ff fbc0 	bl	80076c8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	4a11      	ldr	r2, [pc, #68]	@ (8007f90 <tcp_listen_with_backlog_and_err+0x14c>)
 8007f4c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8007f4e:	4b11      	ldr	r3, [pc, #68]	@ (8007f94 <tcp_listen_with_backlog_and_err+0x150>)
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	60da      	str	r2, [r3, #12]
 8007f56:	4a0f      	ldr	r2, [pc, #60]	@ (8007f94 <tcp_listen_with_backlog_and_err+0x150>)
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	6013      	str	r3, [r2, #0]
 8007f5c:	f005 fb4e 	bl	800d5fc <tcp_timer_needed>
  res = ERR_OK;
 8007f60:	2300      	movs	r3, #0
 8007f62:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d002      	beq.n	8007f70 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	7efa      	ldrb	r2, [r7, #27]
 8007f6e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8007f70:	69fb      	ldr	r3, [r7, #28]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3720      	adds	r7, #32
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	080136d0 	.word	0x080136d0
 8007f80:	080138c4 	.word	0x080138c4
 8007f84:	08013714 	.word	0x08013714
 8007f88:	080138f4 	.word	0x080138f4
 8007f8c:	200083dc 	.word	0x200083dc
 8007f90:	08007de1 	.word	0x08007de1
 8007f94:	200083e0 	.word	0x200083e0

08007f98 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d106      	bne.n	8007fb4 <tcp_update_rcv_ann_wnd+0x1c>
 8007fa6:	4b25      	ldr	r3, [pc, #148]	@ (800803c <tcp_update_rcv_ann_wnd+0xa4>)
 8007fa8:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8007fac:	4924      	ldr	r1, [pc, #144]	@ (8008040 <tcp_update_rcv_ann_wnd+0xa8>)
 8007fae:	4825      	ldr	r0, [pc, #148]	@ (8008044 <tcp_update_rcv_ann_wnd+0xac>)
 8007fb0:	f009 fd00 	bl	80119b4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007fbc:	4413      	add	r3, r2
 8007fbe:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8007fc8:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8007fcc:	bf28      	it	cs
 8007fce:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8007fd2:	b292      	uxth	r2, r2
 8007fd4:	4413      	add	r3, r2
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	db08      	blt.n	8007ff0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	e020      	b.n	8008032 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	dd03      	ble.n	8008006 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008004:	e014      	b.n	8008030 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800800e:	1ad3      	subs	r3, r2, r3
 8008010:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008018:	d306      	bcc.n	8008028 <tcp_update_rcv_ann_wnd+0x90>
 800801a:	4b08      	ldr	r3, [pc, #32]	@ (800803c <tcp_update_rcv_ann_wnd+0xa4>)
 800801c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8008020:	4909      	ldr	r1, [pc, #36]	@ (8008048 <tcp_update_rcv_ann_wnd+0xb0>)
 8008022:	4808      	ldr	r0, [pc, #32]	@ (8008044 <tcp_update_rcv_ann_wnd+0xac>)
 8008024:	f009 fcc6 	bl	80119b4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	b29a      	uxth	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8008030:	2300      	movs	r3, #0
  }
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	080136d0 	.word	0x080136d0
 8008040:	0801392c 	.word	0x0801392c
 8008044:	08013714 	.word	0x08013714
 8008048:	08013950 	.word	0x08013950

0800804c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	460b      	mov	r3, r1
 8008056:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d107      	bne.n	800806e <tcp_recved+0x22>
 800805e:	4b1f      	ldr	r3, [pc, #124]	@ (80080dc <tcp_recved+0x90>)
 8008060:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8008064:	491e      	ldr	r1, [pc, #120]	@ (80080e0 <tcp_recved+0x94>)
 8008066:	481f      	ldr	r0, [pc, #124]	@ (80080e4 <tcp_recved+0x98>)
 8008068:	f009 fca4 	bl	80119b4 <iprintf>
 800806c:	e032      	b.n	80080d4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	7d1b      	ldrb	r3, [r3, #20]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d106      	bne.n	8008084 <tcp_recved+0x38>
 8008076:	4b19      	ldr	r3, [pc, #100]	@ (80080dc <tcp_recved+0x90>)
 8008078:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800807c:	491a      	ldr	r1, [pc, #104]	@ (80080e8 <tcp_recved+0x9c>)
 800807e:	4819      	ldr	r0, [pc, #100]	@ (80080e4 <tcp_recved+0x98>)
 8008080:	f009 fc98 	bl	80119b4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008088:	887b      	ldrh	r3, [r7, #2]
 800808a:	4413      	add	r3, r2
 800808c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800808e:	89fb      	ldrh	r3, [r7, #14]
 8008090:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008094:	d804      	bhi.n	80080a0 <tcp_recved+0x54>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800809a:	89fa      	ldrh	r2, [r7, #14]
 800809c:	429a      	cmp	r2, r3
 800809e:	d204      	bcs.n	80080aa <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80080a6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80080a8:	e002      	b.n	80080b0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	89fa      	ldrh	r2, [r7, #14]
 80080ae:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f7ff ff71 	bl	8007f98 <tcp_update_rcv_ann_wnd>
 80080b6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80080be:	d309      	bcc.n	80080d4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	8b5b      	ldrh	r3, [r3, #26]
 80080c4:	f043 0302 	orr.w	r3, r3, #2
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f004 fb1e 	bl	800c710 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	080136d0 	.word	0x080136d0
 80080e0:	0801396c 	.word	0x0801396c
 80080e4:	08013714 	.word	0x08013714
 80080e8:	08013984 	.word	0x08013984

080080ec <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80080f2:	2300      	movs	r3, #0
 80080f4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80080f6:	4b1e      	ldr	r3, [pc, #120]	@ (8008170 <tcp_new_port+0x84>)
 80080f8:	881b      	ldrh	r3, [r3, #0]
 80080fa:	3301      	adds	r3, #1
 80080fc:	b29a      	uxth	r2, r3
 80080fe:	4b1c      	ldr	r3, [pc, #112]	@ (8008170 <tcp_new_port+0x84>)
 8008100:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8008102:	4b1b      	ldr	r3, [pc, #108]	@ (8008170 <tcp_new_port+0x84>)
 8008104:	881b      	ldrh	r3, [r3, #0]
 8008106:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800810a:	4293      	cmp	r3, r2
 800810c:	d103      	bne.n	8008116 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800810e:	4b18      	ldr	r3, [pc, #96]	@ (8008170 <tcp_new_port+0x84>)
 8008110:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8008114:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008116:	2300      	movs	r3, #0
 8008118:	71fb      	strb	r3, [r7, #7]
 800811a:	e01e      	b.n	800815a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800811c:	79fb      	ldrb	r3, [r7, #7]
 800811e:	4a15      	ldr	r2, [pc, #84]	@ (8008174 <tcp_new_port+0x88>)
 8008120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	603b      	str	r3, [r7, #0]
 8008128:	e011      	b.n	800814e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	8ada      	ldrh	r2, [r3, #22]
 800812e:	4b10      	ldr	r3, [pc, #64]	@ (8008170 <tcp_new_port+0x84>)
 8008130:	881b      	ldrh	r3, [r3, #0]
 8008132:	429a      	cmp	r2, r3
 8008134:	d108      	bne.n	8008148 <tcp_new_port+0x5c>
        n++;
 8008136:	88bb      	ldrh	r3, [r7, #4]
 8008138:	3301      	adds	r3, #1
 800813a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800813c:	88bb      	ldrh	r3, [r7, #4]
 800813e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008142:	d3d8      	bcc.n	80080f6 <tcp_new_port+0xa>
          return 0;
 8008144:	2300      	movs	r3, #0
 8008146:	e00d      	b.n	8008164 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	603b      	str	r3, [r7, #0]
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1ea      	bne.n	800812a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008154:	79fb      	ldrb	r3, [r7, #7]
 8008156:	3301      	adds	r3, #1
 8008158:	71fb      	strb	r3, [r7, #7]
 800815a:	79fb      	ldrb	r3, [r7, #7]
 800815c:	2b03      	cmp	r3, #3
 800815e:	d9dd      	bls.n	800811c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8008160:	4b03      	ldr	r3, [pc, #12]	@ (8008170 <tcp_new_port+0x84>)
 8008162:	881b      	ldrh	r3, [r3, #0]
}
 8008164:	4618      	mov	r0, r3
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr
 8008170:	20000020 	.word	0x20000020
 8008174:	08015804 	.word	0x08015804

08008178 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008178:	b5b0      	push	{r4, r5, r7, lr}
 800817a:	b090      	sub	sp, #64	@ 0x40
 800817c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8008184:	4b95      	ldr	r3, [pc, #596]	@ (80083dc <tcp_slowtmr+0x264>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	3301      	adds	r3, #1
 800818a:	4a94      	ldr	r2, [pc, #592]	@ (80083dc <tcp_slowtmr+0x264>)
 800818c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800818e:	4b94      	ldr	r3, [pc, #592]	@ (80083e0 <tcp_slowtmr+0x268>)
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	3301      	adds	r3, #1
 8008194:	b2da      	uxtb	r2, r3
 8008196:	4b92      	ldr	r3, [pc, #584]	@ (80083e0 <tcp_slowtmr+0x268>)
 8008198:	701a      	strb	r2, [r3, #0]
 800819a:	e000      	b.n	800819e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800819c:	bf00      	nop
  prev = NULL;
 800819e:	2300      	movs	r3, #0
 80081a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80081a2:	4b90      	ldr	r3, [pc, #576]	@ (80083e4 <tcp_slowtmr+0x26c>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80081a8:	e29f      	b.n	80086ea <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80081aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ac:	7d1b      	ldrb	r3, [r3, #20]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d106      	bne.n	80081c0 <tcp_slowtmr+0x48>
 80081b2:	4b8d      	ldr	r3, [pc, #564]	@ (80083e8 <tcp_slowtmr+0x270>)
 80081b4:	f240 42be 	movw	r2, #1214	@ 0x4be
 80081b8:	498c      	ldr	r1, [pc, #560]	@ (80083ec <tcp_slowtmr+0x274>)
 80081ba:	488d      	ldr	r0, [pc, #564]	@ (80083f0 <tcp_slowtmr+0x278>)
 80081bc:	f009 fbfa 	bl	80119b4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80081c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c2:	7d1b      	ldrb	r3, [r3, #20]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d106      	bne.n	80081d6 <tcp_slowtmr+0x5e>
 80081c8:	4b87      	ldr	r3, [pc, #540]	@ (80083e8 <tcp_slowtmr+0x270>)
 80081ca:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80081ce:	4989      	ldr	r1, [pc, #548]	@ (80083f4 <tcp_slowtmr+0x27c>)
 80081d0:	4887      	ldr	r0, [pc, #540]	@ (80083f0 <tcp_slowtmr+0x278>)
 80081d2:	f009 fbef 	bl	80119b4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80081d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d8:	7d1b      	ldrb	r3, [r3, #20]
 80081da:	2b0a      	cmp	r3, #10
 80081dc:	d106      	bne.n	80081ec <tcp_slowtmr+0x74>
 80081de:	4b82      	ldr	r3, [pc, #520]	@ (80083e8 <tcp_slowtmr+0x270>)
 80081e0:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80081e4:	4984      	ldr	r1, [pc, #528]	@ (80083f8 <tcp_slowtmr+0x280>)
 80081e6:	4882      	ldr	r0, [pc, #520]	@ (80083f0 <tcp_slowtmr+0x278>)
 80081e8:	f009 fbe4 	bl	80119b4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80081ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ee:	7f9a      	ldrb	r2, [r3, #30]
 80081f0:	4b7b      	ldr	r3, [pc, #492]	@ (80083e0 <tcp_slowtmr+0x268>)
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d105      	bne.n	8008204 <tcp_slowtmr+0x8c>
      prev = pcb;
 80081f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80081fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8008202:	e272      	b.n	80086ea <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8008204:	4b76      	ldr	r3, [pc, #472]	@ (80083e0 <tcp_slowtmr+0x268>)
 8008206:	781a      	ldrb	r2, [r3, #0]
 8008208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800820a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800820c:	2300      	movs	r3, #0
 800820e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8008212:	2300      	movs	r3, #0
 8008214:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800821a:	7d1b      	ldrb	r3, [r3, #20]
 800821c:	2b02      	cmp	r3, #2
 800821e:	d10a      	bne.n	8008236 <tcp_slowtmr+0xbe>
 8008220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008222:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008226:	2b05      	cmp	r3, #5
 8008228:	d905      	bls.n	8008236 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800822a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800822e:	3301      	adds	r3, #1
 8008230:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008234:	e11e      	b.n	8008474 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008238:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800823c:	2b0b      	cmp	r3, #11
 800823e:	d905      	bls.n	800824c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8008240:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008244:	3301      	adds	r3, #1
 8008246:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800824a:	e113      	b.n	8008474 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800824c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800824e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008252:	2b00      	cmp	r3, #0
 8008254:	d075      	beq.n	8008342 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8008256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800825a:	2b00      	cmp	r3, #0
 800825c:	d006      	beq.n	800826c <tcp_slowtmr+0xf4>
 800825e:	4b62      	ldr	r3, [pc, #392]	@ (80083e8 <tcp_slowtmr+0x270>)
 8008260:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8008264:	4965      	ldr	r1, [pc, #404]	@ (80083fc <tcp_slowtmr+0x284>)
 8008266:	4862      	ldr	r0, [pc, #392]	@ (80083f0 <tcp_slowtmr+0x278>)
 8008268:	f009 fba4 	bl	80119b4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800826c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800826e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008270:	2b00      	cmp	r3, #0
 8008272:	d106      	bne.n	8008282 <tcp_slowtmr+0x10a>
 8008274:	4b5c      	ldr	r3, [pc, #368]	@ (80083e8 <tcp_slowtmr+0x270>)
 8008276:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800827a:	4961      	ldr	r1, [pc, #388]	@ (8008400 <tcp_slowtmr+0x288>)
 800827c:	485c      	ldr	r0, [pc, #368]	@ (80083f0 <tcp_slowtmr+0x278>)
 800827e:	f009 fb99 	bl	80119b4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008284:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8008288:	2b0b      	cmp	r3, #11
 800828a:	d905      	bls.n	8008298 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800828c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008290:	3301      	adds	r3, #1
 8008292:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008296:	e0ed      	b.n	8008474 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800829a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800829e:	3b01      	subs	r3, #1
 80082a0:	4a58      	ldr	r2, [pc, #352]	@ (8008404 <tcp_slowtmr+0x28c>)
 80082a2:	5cd3      	ldrb	r3, [r2, r3]
 80082a4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80082a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082a8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80082ac:	7c7a      	ldrb	r2, [r7, #17]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d907      	bls.n	80082c2 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80082b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082b4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80082b8:	3301      	adds	r3, #1
 80082ba:	b2da      	uxtb	r2, r3
 80082bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082be:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80082c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082c4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80082c8:	7c7a      	ldrb	r2, [r7, #17]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	f200 80d2 	bhi.w	8008474 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80082d0:	2301      	movs	r3, #1
 80082d2:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80082d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d108      	bne.n	80082f0 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80082de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80082e0:	f005 f8be 	bl	800d460 <tcp_zero_window_probe>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d014      	beq.n	8008314 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 80082ea:	2300      	movs	r3, #0
 80082ec:	623b      	str	r3, [r7, #32]
 80082ee:	e011      	b.n	8008314 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80082f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80082f6:	4619      	mov	r1, r3
 80082f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80082fa:	f003 ff83 	bl	800c204 <tcp_split_unsent_seg>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d107      	bne.n	8008314 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8008304:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008306:	f004 fa03 	bl	800c710 <tcp_output>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d101      	bne.n	8008314 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8008310:	2300      	movs	r3, #0
 8008312:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8008314:	6a3b      	ldr	r3, [r7, #32]
 8008316:	2b00      	cmp	r3, #0
 8008318:	f000 80ac 	beq.w	8008474 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800831c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800831e:	2200      	movs	r2, #0
 8008320:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008326:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800832a:	2b06      	cmp	r3, #6
 800832c:	f200 80a2 	bhi.w	8008474 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8008330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008332:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008336:	3301      	adds	r3, #1
 8008338:	b2da      	uxtb	r2, r3
 800833a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800833c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8008340:	e098      	b.n	8008474 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008344:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008348:	2b00      	cmp	r3, #0
 800834a:	db0f      	blt.n	800836c <tcp_slowtmr+0x1f4>
 800834c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800834e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008352:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008356:	4293      	cmp	r3, r2
 8008358:	d008      	beq.n	800836c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800835a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800835c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008360:	b29b      	uxth	r3, r3
 8008362:	3301      	adds	r3, #1
 8008364:	b29b      	uxth	r3, r3
 8008366:	b21a      	sxth	r2, r3
 8008368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800836a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800836c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800836e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8008372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008374:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8008378:	429a      	cmp	r2, r3
 800837a:	db7b      	blt.n	8008474 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800837c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800837e:	f004 fcbb 	bl	800ccf8 <tcp_rexmit_rto_prepare>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d007      	beq.n	8008398 <tcp_slowtmr+0x220>
 8008388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800838a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800838c:	2b00      	cmp	r3, #0
 800838e:	d171      	bne.n	8008474 <tcp_slowtmr+0x2fc>
 8008390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008394:	2b00      	cmp	r3, #0
 8008396:	d06d      	beq.n	8008474 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8008398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800839a:	7d1b      	ldrb	r3, [r3, #20]
 800839c:	2b02      	cmp	r3, #2
 800839e:	d03a      	beq.n	8008416 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80083a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80083a6:	2b0c      	cmp	r3, #12
 80083a8:	bf28      	it	cs
 80083aa:	230c      	movcs	r3, #12
 80083ac:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80083ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80083b4:	10db      	asrs	r3, r3, #3
 80083b6:	b21b      	sxth	r3, r3
 80083b8:	461a      	mov	r2, r3
 80083ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083bc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80083c0:	4413      	add	r3, r2
 80083c2:	7efa      	ldrb	r2, [r7, #27]
 80083c4:	4910      	ldr	r1, [pc, #64]	@ (8008408 <tcp_slowtmr+0x290>)
 80083c6:	5c8a      	ldrb	r2, [r1, r2]
 80083c8:	4093      	lsls	r3, r2
 80083ca:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80083d2:	4293      	cmp	r3, r2
 80083d4:	dc1a      	bgt.n	800840c <tcp_slowtmr+0x294>
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	b21a      	sxth	r2, r3
 80083da:	e019      	b.n	8008410 <tcp_slowtmr+0x298>
 80083dc:	200083d8 	.word	0x200083d8
 80083e0:	200083ee 	.word	0x200083ee
 80083e4:	200083e4 	.word	0x200083e4
 80083e8:	080136d0 	.word	0x080136d0
 80083ec:	08013a14 	.word	0x08013a14
 80083f0:	08013714 	.word	0x08013714
 80083f4:	08013a40 	.word	0x08013a40
 80083f8:	08013a6c 	.word	0x08013a6c
 80083fc:	08013a9c 	.word	0x08013a9c
 8008400:	08013ad0 	.word	0x08013ad0
 8008404:	080157fc 	.word	0x080157fc
 8008408:	080157ec 	.word	0x080157ec
 800840c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008412:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8008416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008418:	2200      	movs	r2, #0
 800841a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800841c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800841e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008424:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008428:	4293      	cmp	r3, r2
 800842a:	bf28      	it	cs
 800842c:	4613      	movcs	r3, r2
 800842e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008430:	8a7b      	ldrh	r3, [r7, #18]
 8008432:	085b      	lsrs	r3, r3, #1
 8008434:	b29a      	uxth	r2, r3
 8008436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008438:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800843c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800843e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8008442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008444:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008446:	005b      	lsls	r3, r3, #1
 8008448:	b29b      	uxth	r3, r3
 800844a:	429a      	cmp	r2, r3
 800844c:	d206      	bcs.n	800845c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800844e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008450:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008452:	005b      	lsls	r3, r3, #1
 8008454:	b29a      	uxth	r2, r3
 8008456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008458:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800845c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800845e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8008460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008462:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8008466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008468:	2200      	movs	r2, #0
 800846a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800846e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008470:	f004 fcb2 	bl	800cdd8 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8008474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008476:	7d1b      	ldrb	r3, [r3, #20]
 8008478:	2b06      	cmp	r3, #6
 800847a:	d111      	bne.n	80084a0 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800847c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800847e:	8b5b      	ldrh	r3, [r3, #26]
 8008480:	f003 0310 	and.w	r3, r3, #16
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00b      	beq.n	80084a0 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008488:	4b9d      	ldr	r3, [pc, #628]	@ (8008700 <tcp_slowtmr+0x588>)
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800848e:	6a1b      	ldr	r3, [r3, #32]
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	2b28      	cmp	r3, #40	@ 0x28
 8008494:	d904      	bls.n	80084a0 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8008496:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800849a:	3301      	adds	r3, #1
 800849c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80084a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a2:	7a5b      	ldrb	r3, [r3, #9]
 80084a4:	f003 0308 	and.w	r3, r3, #8
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d04c      	beq.n	8008546 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 80084ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ae:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80084b0:	2b04      	cmp	r3, #4
 80084b2:	d003      	beq.n	80084bc <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80084b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084b6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80084b8:	2b07      	cmp	r3, #7
 80084ba:	d144      	bne.n	8008546 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80084bc:	4b90      	ldr	r3, [pc, #576]	@ (8008700 <tcp_slowtmr+0x588>)
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084c2:	6a1b      	ldr	r3, [r3, #32]
 80084c4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80084c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80084cc:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 80084d0:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 80084d4:	498b      	ldr	r1, [pc, #556]	@ (8008704 <tcp_slowtmr+0x58c>)
 80084d6:	fba1 1303 	umull	r1, r3, r1, r3
 80084da:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80084dc:	429a      	cmp	r2, r3
 80084de:	d90a      	bls.n	80084f6 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 80084e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084e4:	3301      	adds	r3, #1
 80084e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 80084ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80084ee:	3301      	adds	r3, #1
 80084f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80084f4:	e027      	b.n	8008546 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80084f6:	4b82      	ldr	r3, [pc, #520]	@ (8008700 <tcp_slowtmr+0x588>)
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084fc:	6a1b      	ldr	r3, [r3, #32]
 80084fe:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008502:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8008506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008508:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800850c:	4618      	mov	r0, r3
 800850e:	4b7e      	ldr	r3, [pc, #504]	@ (8008708 <tcp_slowtmr+0x590>)
 8008510:	fb00 f303 	mul.w	r3, r0, r3
 8008514:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008516:	497b      	ldr	r1, [pc, #492]	@ (8008704 <tcp_slowtmr+0x58c>)
 8008518:	fba1 1303 	umull	r1, r3, r1, r3
 800851c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800851e:	429a      	cmp	r2, r3
 8008520:	d911      	bls.n	8008546 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 8008522:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008524:	f004 ff5c 	bl	800d3e0 <tcp_keepalive>
 8008528:	4603      	mov	r3, r0
 800852a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800852e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8008532:	2b00      	cmp	r3, #0
 8008534:	d107      	bne.n	8008546 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 8008536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008538:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800853c:	3301      	adds	r3, #1
 800853e:	b2da      	uxtb	r2, r3
 8008540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008542:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8008546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800854a:	2b00      	cmp	r3, #0
 800854c:	d011      	beq.n	8008572 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800854e:	4b6c      	ldr	r3, [pc, #432]	@ (8008700 <tcp_slowtmr+0x588>)
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008554:	6a1b      	ldr	r3, [r3, #32]
 8008556:	1ad2      	subs	r2, r2, r3
 8008558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800855a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800855e:	4619      	mov	r1, r3
 8008560:	460b      	mov	r3, r1
 8008562:	005b      	lsls	r3, r3, #1
 8008564:	440b      	add	r3, r1
 8008566:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008568:	429a      	cmp	r2, r3
 800856a:	d302      	bcc.n	8008572 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 800856c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800856e:	f000 fe1d 	bl	80091ac <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8008572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008574:	7d1b      	ldrb	r3, [r3, #20]
 8008576:	2b03      	cmp	r3, #3
 8008578:	d10b      	bne.n	8008592 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800857a:	4b61      	ldr	r3, [pc, #388]	@ (8008700 <tcp_slowtmr+0x588>)
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008580:	6a1b      	ldr	r3, [r3, #32]
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	2b28      	cmp	r3, #40	@ 0x28
 8008586:	d904      	bls.n	8008592 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8008588:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800858c:	3301      	adds	r3, #1
 800858e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8008592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008594:	7d1b      	ldrb	r3, [r3, #20]
 8008596:	2b09      	cmp	r3, #9
 8008598:	d10b      	bne.n	80085b2 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800859a:	4b59      	ldr	r3, [pc, #356]	@ (8008700 <tcp_slowtmr+0x588>)
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085a0:	6a1b      	ldr	r3, [r3, #32]
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	2bf0      	cmp	r3, #240	@ 0xf0
 80085a6:	d904      	bls.n	80085b2 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 80085a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80085ac:	3301      	adds	r3, #1
 80085ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80085b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d060      	beq.n	800867c <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 80085ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085c0:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80085c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80085c4:	f000 fc3e 	bl	8008e44 <tcp_pcb_purge>
      if (prev != NULL) {
 80085c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d010      	beq.n	80085f0 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80085ce:	4b4f      	ldr	r3, [pc, #316]	@ (800870c <tcp_slowtmr+0x594>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d106      	bne.n	80085e6 <tcp_slowtmr+0x46e>
 80085d8:	4b4d      	ldr	r3, [pc, #308]	@ (8008710 <tcp_slowtmr+0x598>)
 80085da:	f240 526d 	movw	r2, #1389	@ 0x56d
 80085de:	494d      	ldr	r1, [pc, #308]	@ (8008714 <tcp_slowtmr+0x59c>)
 80085e0:	484d      	ldr	r0, [pc, #308]	@ (8008718 <tcp_slowtmr+0x5a0>)
 80085e2:	f009 f9e7 	bl	80119b4 <iprintf>
        prev->next = pcb->next;
 80085e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085e8:	68da      	ldr	r2, [r3, #12]
 80085ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ec:	60da      	str	r2, [r3, #12]
 80085ee:	e00f      	b.n	8008610 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80085f0:	4b46      	ldr	r3, [pc, #280]	@ (800870c <tcp_slowtmr+0x594>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d006      	beq.n	8008608 <tcp_slowtmr+0x490>
 80085fa:	4b45      	ldr	r3, [pc, #276]	@ (8008710 <tcp_slowtmr+0x598>)
 80085fc:	f240 5271 	movw	r2, #1393	@ 0x571
 8008600:	4946      	ldr	r1, [pc, #280]	@ (800871c <tcp_slowtmr+0x5a4>)
 8008602:	4845      	ldr	r0, [pc, #276]	@ (8008718 <tcp_slowtmr+0x5a0>)
 8008604:	f009 f9d6 	bl	80119b4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8008608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	4a3f      	ldr	r2, [pc, #252]	@ (800870c <tcp_slowtmr+0x594>)
 800860e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8008610:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008614:	2b00      	cmp	r3, #0
 8008616:	d013      	beq.n	8008640 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800861a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800861c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800861e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008620:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8008622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008624:	3304      	adds	r3, #4
 8008626:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008628:	8ad2      	ldrh	r2, [r2, #22]
 800862a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800862c:	8b09      	ldrh	r1, [r1, #24]
 800862e:	9102      	str	r1, [sp, #8]
 8008630:	9201      	str	r2, [sp, #4]
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	462b      	mov	r3, r5
 8008636:	4622      	mov	r2, r4
 8008638:	4601      	mov	r1, r0
 800863a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800863c:	f004 fe1c 	bl	800d278 <tcp_rst>
      err_arg = pcb->callback_arg;
 8008640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008648:	7d1b      	ldrb	r3, [r3, #20]
 800864a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800864c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800864e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8008656:	6838      	ldr	r0, [r7, #0]
 8008658:	f7ff f836 	bl	80076c8 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800865c:	4b30      	ldr	r3, [pc, #192]	@ (8008720 <tcp_slowtmr+0x5a8>)
 800865e:	2200      	movs	r2, #0
 8008660:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d004      	beq.n	8008672 <tcp_slowtmr+0x4fa>
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f06f 010c 	mvn.w	r1, #12
 800866e:	68b8      	ldr	r0, [r7, #8]
 8008670:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008672:	4b2b      	ldr	r3, [pc, #172]	@ (8008720 <tcp_slowtmr+0x5a8>)
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d037      	beq.n	80086ea <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800867a:	e590      	b.n	800819e <tcp_slowtmr+0x26>
      prev = pcb;
 800867c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800867e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8008686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008688:	7f1b      	ldrb	r3, [r3, #28]
 800868a:	3301      	adds	r3, #1
 800868c:	b2da      	uxtb	r2, r3
 800868e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008690:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008694:	7f1a      	ldrb	r2, [r3, #28]
 8008696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008698:	7f5b      	ldrb	r3, [r3, #29]
 800869a:	429a      	cmp	r2, r3
 800869c:	d325      	bcc.n	80086ea <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800869e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a0:	2200      	movs	r2, #0
 80086a2:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80086a4:	4b1e      	ldr	r3, [pc, #120]	@ (8008720 <tcp_slowtmr+0x5a8>)
 80086a6:	2200      	movs	r2, #0
 80086a8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80086aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00b      	beq.n	80086cc <tcp_slowtmr+0x554>
 80086b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086bc:	6912      	ldr	r2, [r2, #16]
 80086be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80086c0:	4610      	mov	r0, r2
 80086c2:	4798      	blx	r3
 80086c4:	4603      	mov	r3, r0
 80086c6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80086ca:	e002      	b.n	80086d2 <tcp_slowtmr+0x55a>
 80086cc:	2300      	movs	r3, #0
 80086ce:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80086d2:	4b13      	ldr	r3, [pc, #76]	@ (8008720 <tcp_slowtmr+0x5a8>)
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f47f ad60 	bne.w	800819c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80086dc:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d102      	bne.n	80086ea <tcp_slowtmr+0x572>
          tcp_output(prev);
 80086e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086e6:	f004 f813 	bl	800c710 <tcp_output>
  while (pcb != NULL) {
 80086ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f47f ad5c 	bne.w	80081aa <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80086f2:	2300      	movs	r3, #0
 80086f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80086f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008724 <tcp_slowtmr+0x5ac>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80086fc:	e067      	b.n	80087ce <tcp_slowtmr+0x656>
 80086fe:	bf00      	nop
 8008700:	200083d8 	.word	0x200083d8
 8008704:	10624dd3 	.word	0x10624dd3
 8008708:	000124f8 	.word	0x000124f8
 800870c:	200083e4 	.word	0x200083e4
 8008710:	080136d0 	.word	0x080136d0
 8008714:	08013b08 	.word	0x08013b08
 8008718:	08013714 	.word	0x08013714
 800871c:	08013b34 	.word	0x08013b34
 8008720:	200083ec 	.word	0x200083ec
 8008724:	200083e8 	.word	0x200083e8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800872a:	7d1b      	ldrb	r3, [r3, #20]
 800872c:	2b0a      	cmp	r3, #10
 800872e:	d006      	beq.n	800873e <tcp_slowtmr+0x5c6>
 8008730:	4b2b      	ldr	r3, [pc, #172]	@ (80087e0 <tcp_slowtmr+0x668>)
 8008732:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8008736:	492b      	ldr	r1, [pc, #172]	@ (80087e4 <tcp_slowtmr+0x66c>)
 8008738:	482b      	ldr	r0, [pc, #172]	@ (80087e8 <tcp_slowtmr+0x670>)
 800873a:	f009 f93b 	bl	80119b4 <iprintf>
    pcb_remove = 0;
 800873e:	2300      	movs	r3, #0
 8008740:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008744:	4b29      	ldr	r3, [pc, #164]	@ (80087ec <tcp_slowtmr+0x674>)
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800874a:	6a1b      	ldr	r3, [r3, #32]
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	2bf0      	cmp	r3, #240	@ 0xf0
 8008750:	d904      	bls.n	800875c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8008752:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008756:	3301      	adds	r3, #1
 8008758:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800875c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008760:	2b00      	cmp	r3, #0
 8008762:	d02f      	beq.n	80087c4 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008764:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008766:	f000 fb6d 	bl	8008e44 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800876a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800876c:	2b00      	cmp	r3, #0
 800876e:	d010      	beq.n	8008792 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008770:	4b1f      	ldr	r3, [pc, #124]	@ (80087f0 <tcp_slowtmr+0x678>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008776:	429a      	cmp	r2, r3
 8008778:	d106      	bne.n	8008788 <tcp_slowtmr+0x610>
 800877a:	4b19      	ldr	r3, [pc, #100]	@ (80087e0 <tcp_slowtmr+0x668>)
 800877c:	f240 52af 	movw	r2, #1455	@ 0x5af
 8008780:	491c      	ldr	r1, [pc, #112]	@ (80087f4 <tcp_slowtmr+0x67c>)
 8008782:	4819      	ldr	r0, [pc, #100]	@ (80087e8 <tcp_slowtmr+0x670>)
 8008784:	f009 f916 	bl	80119b4 <iprintf>
        prev->next = pcb->next;
 8008788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800878a:	68da      	ldr	r2, [r3, #12]
 800878c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800878e:	60da      	str	r2, [r3, #12]
 8008790:	e00f      	b.n	80087b2 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008792:	4b17      	ldr	r3, [pc, #92]	@ (80087f0 <tcp_slowtmr+0x678>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008798:	429a      	cmp	r2, r3
 800879a:	d006      	beq.n	80087aa <tcp_slowtmr+0x632>
 800879c:	4b10      	ldr	r3, [pc, #64]	@ (80087e0 <tcp_slowtmr+0x668>)
 800879e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80087a2:	4915      	ldr	r1, [pc, #84]	@ (80087f8 <tcp_slowtmr+0x680>)
 80087a4:	4810      	ldr	r0, [pc, #64]	@ (80087e8 <tcp_slowtmr+0x670>)
 80087a6:	f009 f905 	bl	80119b4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80087aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	4a10      	ldr	r2, [pc, #64]	@ (80087f0 <tcp_slowtmr+0x678>)
 80087b0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80087b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087b4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80087b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80087bc:	69f8      	ldr	r0, [r7, #28]
 80087be:	f7fe ff83 	bl	80076c8 <tcp_free>
 80087c2:	e004      	b.n	80087ce <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80087c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80087c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80087ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1a9      	bne.n	8008728 <tcp_slowtmr+0x5b0>
    }
  }
}
 80087d4:	bf00      	nop
 80087d6:	bf00      	nop
 80087d8:	3730      	adds	r7, #48	@ 0x30
 80087da:	46bd      	mov	sp, r7
 80087dc:	bdb0      	pop	{r4, r5, r7, pc}
 80087de:	bf00      	nop
 80087e0:	080136d0 	.word	0x080136d0
 80087e4:	08013b60 	.word	0x08013b60
 80087e8:	08013714 	.word	0x08013714
 80087ec:	200083d8 	.word	0x200083d8
 80087f0:	200083e8 	.word	0x200083e8
 80087f4:	08013b90 	.word	0x08013b90
 80087f8:	08013bb8 	.word	0x08013bb8

080087fc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8008802:	4b2d      	ldr	r3, [pc, #180]	@ (80088b8 <tcp_fasttmr+0xbc>)
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	3301      	adds	r3, #1
 8008808:	b2da      	uxtb	r2, r3
 800880a:	4b2b      	ldr	r3, [pc, #172]	@ (80088b8 <tcp_fasttmr+0xbc>)
 800880c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800880e:	4b2b      	ldr	r3, [pc, #172]	@ (80088bc <tcp_fasttmr+0xc0>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008814:	e048      	b.n	80088a8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	7f9a      	ldrb	r2, [r3, #30]
 800881a:	4b27      	ldr	r3, [pc, #156]	@ (80088b8 <tcp_fasttmr+0xbc>)
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	429a      	cmp	r2, r3
 8008820:	d03f      	beq.n	80088a2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008822:	4b25      	ldr	r3, [pc, #148]	@ (80088b8 <tcp_fasttmr+0xbc>)
 8008824:	781a      	ldrb	r2, [r3, #0]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	8b5b      	ldrh	r3, [r3, #26]
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d010      	beq.n	8008858 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	8b5b      	ldrh	r3, [r3, #26]
 800883a:	f043 0302 	orr.w	r3, r3, #2
 800883e:	b29a      	uxth	r2, r3
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f003 ff63 	bl	800c710 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	8b5b      	ldrh	r3, [r3, #26]
 800884e:	f023 0303 	bic.w	r3, r3, #3
 8008852:	b29a      	uxth	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	8b5b      	ldrh	r3, [r3, #26]
 800885c:	f003 0308 	and.w	r3, r3, #8
 8008860:	2b00      	cmp	r3, #0
 8008862:	d009      	beq.n	8008878 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	8b5b      	ldrh	r3, [r3, #26]
 8008868:	f023 0308 	bic.w	r3, r3, #8
 800886c:	b29a      	uxth	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f7ff f8bc 	bl	80079f0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00a      	beq.n	800889c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008886:	4b0e      	ldr	r3, [pc, #56]	@ (80088c0 <tcp_fasttmr+0xc4>)
 8008888:	2200      	movs	r2, #0
 800888a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f819 	bl	80088c4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008892:	4b0b      	ldr	r3, [pc, #44]	@ (80088c0 <tcp_fasttmr+0xc4>)
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d000      	beq.n	800889c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800889a:	e7b8      	b.n	800880e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	607b      	str	r3, [r7, #4]
 80088a0:	e002      	b.n	80088a8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d1b3      	bne.n	8008816 <tcp_fasttmr+0x1a>
    }
  }
}
 80088ae:	bf00      	nop
 80088b0:	bf00      	nop
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	200083ee 	.word	0x200083ee
 80088bc:	200083e4 	.word	0x200083e4
 80088c0:	200083ec 	.word	0x200083ec

080088c4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80088c4:	b590      	push	{r4, r7, lr}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d109      	bne.n	80088e6 <tcp_process_refused_data+0x22>
 80088d2:	4b37      	ldr	r3, [pc, #220]	@ (80089b0 <tcp_process_refused_data+0xec>)
 80088d4:	f240 6209 	movw	r2, #1545	@ 0x609
 80088d8:	4936      	ldr	r1, [pc, #216]	@ (80089b4 <tcp_process_refused_data+0xf0>)
 80088da:	4837      	ldr	r0, [pc, #220]	@ (80089b8 <tcp_process_refused_data+0xf4>)
 80088dc:	f009 f86a 	bl	80119b4 <iprintf>
 80088e0:	f06f 030f 	mvn.w	r3, #15
 80088e4:	e060      	b.n	80089a8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088ea:	7b5b      	ldrb	r3, [r3, #13]
 80088ec:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088f2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008900:	2b00      	cmp	r3, #0
 8008902:	d00b      	beq.n	800891c <tcp_process_refused_data+0x58>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6918      	ldr	r0, [r3, #16]
 800890e:	2300      	movs	r3, #0
 8008910:	68ba      	ldr	r2, [r7, #8]
 8008912:	6879      	ldr	r1, [r7, #4]
 8008914:	47a0      	blx	r4
 8008916:	4603      	mov	r3, r0
 8008918:	73fb      	strb	r3, [r7, #15]
 800891a:	e007      	b.n	800892c <tcp_process_refused_data+0x68>
 800891c:	2300      	movs	r3, #0
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	6879      	ldr	r1, [r7, #4]
 8008922:	2000      	movs	r0, #0
 8008924:	f000 f8a4 	bl	8008a70 <tcp_recv_null>
 8008928:	4603      	mov	r3, r0
 800892a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800892c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d12a      	bne.n	800898a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008934:	7bbb      	ldrb	r3, [r7, #14]
 8008936:	f003 0320 	and.w	r3, r3, #32
 800893a:	2b00      	cmp	r3, #0
 800893c:	d033      	beq.n	80089a6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008942:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008946:	d005      	beq.n	8008954 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800894c:	3301      	adds	r3, #1
 800894e:	b29a      	uxth	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00b      	beq.n	8008976 <tcp_process_refused_data+0xb2>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6918      	ldr	r0, [r3, #16]
 8008968:	2300      	movs	r3, #0
 800896a:	2200      	movs	r2, #0
 800896c:	6879      	ldr	r1, [r7, #4]
 800896e:	47a0      	blx	r4
 8008970:	4603      	mov	r3, r0
 8008972:	73fb      	strb	r3, [r7, #15]
 8008974:	e001      	b.n	800897a <tcp_process_refused_data+0xb6>
 8008976:	2300      	movs	r3, #0
 8008978:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800897a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800897e:	f113 0f0d 	cmn.w	r3, #13
 8008982:	d110      	bne.n	80089a6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8008984:	f06f 030c 	mvn.w	r3, #12
 8008988:	e00e      	b.n	80089a8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800898a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800898e:	f113 0f0d 	cmn.w	r3, #13
 8008992:	d102      	bne.n	800899a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008994:	f06f 030c 	mvn.w	r3, #12
 8008998:	e006      	b.n	80089a8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80089a0:	f06f 0304 	mvn.w	r3, #4
 80089a4:	e000      	b.n	80089a8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3714      	adds	r7, #20
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd90      	pop	{r4, r7, pc}
 80089b0:	080136d0 	.word	0x080136d0
 80089b4:	08013be0 	.word	0x08013be0
 80089b8:	08013714 	.word	0x08013714

080089bc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80089c4:	e007      	b.n	80089d6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 f80a 	bl	80089e6 <tcp_seg_free>
    seg = next;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1f4      	bne.n	80089c6 <tcp_segs_free+0xa>
  }
}
 80089dc:	bf00      	nop
 80089de:	bf00      	nop
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b082      	sub	sp, #8
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00c      	beq.n	8008a0e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d004      	beq.n	8008a06 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7fe fbc1 	bl	8007188 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008a06:	6879      	ldr	r1, [r7, #4]
 8008a08:	2003      	movs	r0, #3
 8008a0a:	f7fd fd47 	bl	800649c <memp_free>
  }
}
 8008a0e:	bf00      	nop
 8008a10:	3708      	adds	r7, #8
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
	...

08008a18 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d106      	bne.n	8008a34 <tcp_seg_copy+0x1c>
 8008a26:	4b0f      	ldr	r3, [pc, #60]	@ (8008a64 <tcp_seg_copy+0x4c>)
 8008a28:	f240 6282 	movw	r2, #1666	@ 0x682
 8008a2c:	490e      	ldr	r1, [pc, #56]	@ (8008a68 <tcp_seg_copy+0x50>)
 8008a2e:	480f      	ldr	r0, [pc, #60]	@ (8008a6c <tcp_seg_copy+0x54>)
 8008a30:	f008 ffc0 	bl	80119b4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008a34:	2003      	movs	r0, #3
 8008a36:	f7fd fcc1 	bl	80063bc <memp_malloc>
 8008a3a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <tcp_seg_copy+0x2e>
    return NULL;
 8008a42:	2300      	movs	r3, #0
 8008a44:	e00a      	b.n	8008a5c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008a46:	2210      	movs	r2, #16
 8008a48:	6879      	ldr	r1, [r7, #4]
 8008a4a:	68f8      	ldr	r0, [r7, #12]
 8008a4c:	f009 f8dd 	bl	8011c0a <memcpy>
  pbuf_ref(cseg->p);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7fe fc37 	bl	80072c8 <pbuf_ref>
  return cseg;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	080136d0 	.word	0x080136d0
 8008a68:	08013c24 	.word	0x08013c24
 8008a6c:	08013714 	.word	0x08013714

08008a70 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
 8008a7c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d109      	bne.n	8008a98 <tcp_recv_null+0x28>
 8008a84:	4b12      	ldr	r3, [pc, #72]	@ (8008ad0 <tcp_recv_null+0x60>)
 8008a86:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8008a8a:	4912      	ldr	r1, [pc, #72]	@ (8008ad4 <tcp_recv_null+0x64>)
 8008a8c:	4812      	ldr	r0, [pc, #72]	@ (8008ad8 <tcp_recv_null+0x68>)
 8008a8e:	f008 ff91 	bl	80119b4 <iprintf>
 8008a92:	f06f 030f 	mvn.w	r3, #15
 8008a96:	e016      	b.n	8008ac6 <tcp_recv_null+0x56>

  if (p != NULL) {
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d009      	beq.n	8008ab2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	891b      	ldrh	r3, [r3, #8]
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	68b8      	ldr	r0, [r7, #8]
 8008aa6:	f7ff fad1 	bl	800804c <tcp_recved>
    pbuf_free(p);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7fe fb6c 	bl	8007188 <pbuf_free>
 8008ab0:	e008      	b.n	8008ac4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8008ab2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d104      	bne.n	8008ac4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8008aba:	68b8      	ldr	r0, [r7, #8]
 8008abc:	f7ff f802 	bl	8007ac4 <tcp_close>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	e000      	b.n	8008ac6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	080136d0 	.word	0x080136d0
 8008ad4:	08013c40 	.word	0x08013c40
 8008ad8:	08013714 	.word	0x08013714

08008adc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	db01      	blt.n	8008af2 <tcp_kill_prio+0x16>
 8008aee:	79fb      	ldrb	r3, [r7, #7]
 8008af0:	e000      	b.n	8008af4 <tcp_kill_prio+0x18>
 8008af2:	237f      	movs	r3, #127	@ 0x7f
 8008af4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8008af6:	7afb      	ldrb	r3, [r7, #11]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d034      	beq.n	8008b66 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8008afc:	7afb      	ldrb	r3, [r7, #11]
 8008afe:	3b01      	subs	r3, #1
 8008b00:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8008b02:	2300      	movs	r3, #0
 8008b04:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008b06:	2300      	movs	r3, #0
 8008b08:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b0a:	4b19      	ldr	r3, [pc, #100]	@ (8008b70 <tcp_kill_prio+0x94>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	617b      	str	r3, [r7, #20]
 8008b10:	e01f      	b.n	8008b52 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	7d5b      	ldrb	r3, [r3, #21]
 8008b16:	7afa      	ldrb	r2, [r7, #11]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d80c      	bhi.n	8008b36 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8008b20:	7afa      	ldrb	r2, [r7, #11]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d112      	bne.n	8008b4c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008b26:	4b13      	ldr	r3, [pc, #76]	@ (8008b74 <tcp_kill_prio+0x98>)
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	1ad3      	subs	r3, r2, r3
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d80a      	bhi.n	8008b4c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8008b36:	4b0f      	ldr	r3, [pc, #60]	@ (8008b74 <tcp_kill_prio+0x98>)
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	6a1b      	ldr	r3, [r3, #32]
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	7d5b      	ldrb	r3, [r3, #21]
 8008b4a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	617b      	str	r3, [r7, #20]
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d1dc      	bne.n	8008b12 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d004      	beq.n	8008b68 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008b5e:	6938      	ldr	r0, [r7, #16]
 8008b60:	f7ff f89a 	bl	8007c98 <tcp_abort>
 8008b64:	e000      	b.n	8008b68 <tcp_kill_prio+0x8c>
    return;
 8008b66:	bf00      	nop
  }
}
 8008b68:	3718      	adds	r7, #24
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	200083e4 	.word	0x200083e4
 8008b74:	200083d8 	.word	0x200083d8

08008b78 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b086      	sub	sp, #24
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	4603      	mov	r3, r0
 8008b80:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008b82:	79fb      	ldrb	r3, [r7, #7]
 8008b84:	2b08      	cmp	r3, #8
 8008b86:	d009      	beq.n	8008b9c <tcp_kill_state+0x24>
 8008b88:	79fb      	ldrb	r3, [r7, #7]
 8008b8a:	2b09      	cmp	r3, #9
 8008b8c:	d006      	beq.n	8008b9c <tcp_kill_state+0x24>
 8008b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8008bf8 <tcp_kill_state+0x80>)
 8008b90:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8008b94:	4919      	ldr	r1, [pc, #100]	@ (8008bfc <tcp_kill_state+0x84>)
 8008b96:	481a      	ldr	r0, [pc, #104]	@ (8008c00 <tcp_kill_state+0x88>)
 8008b98:	f008 ff0c 	bl	80119b4 <iprintf>

  inactivity = 0;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ba4:	4b17      	ldr	r3, [pc, #92]	@ (8008c04 <tcp_kill_state+0x8c>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	617b      	str	r3, [r7, #20]
 8008baa:	e017      	b.n	8008bdc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	7d1b      	ldrb	r3, [r3, #20]
 8008bb0:	79fa      	ldrb	r2, [r7, #7]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d10f      	bne.n	8008bd6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008bb6:	4b14      	ldr	r3, [pc, #80]	@ (8008c08 <tcp_kill_state+0x90>)
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
 8008bbe:	1ad3      	subs	r3, r2, r3
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d807      	bhi.n	8008bd6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8008bc6:	4b10      	ldr	r3, [pc, #64]	@ (8008c08 <tcp_kill_state+0x90>)
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	6a1b      	ldr	r3, [r3, #32]
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	617b      	str	r3, [r7, #20]
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1e4      	bne.n	8008bac <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d003      	beq.n	8008bf0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8008be8:	2100      	movs	r1, #0
 8008bea:	6938      	ldr	r0, [r7, #16]
 8008bec:	f7fe ff96 	bl	8007b1c <tcp_abandon>
  }
}
 8008bf0:	bf00      	nop
 8008bf2:	3718      	adds	r7, #24
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	080136d0 	.word	0x080136d0
 8008bfc:	08013c5c 	.word	0x08013c5c
 8008c00:	08013714 	.word	0x08013714
 8008c04:	200083e4 	.word	0x200083e4
 8008c08:	200083d8 	.word	0x200083d8

08008c0c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008c12:	2300      	movs	r3, #0
 8008c14:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8008c16:	2300      	movs	r3, #0
 8008c18:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c1a:	4b12      	ldr	r3, [pc, #72]	@ (8008c64 <tcp_kill_timewait+0x58>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	60fb      	str	r3, [r7, #12]
 8008c20:	e012      	b.n	8008c48 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008c22:	4b11      	ldr	r3, [pc, #68]	@ (8008c68 <tcp_kill_timewait+0x5c>)
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6a1b      	ldr	r3, [r3, #32]
 8008c2a:	1ad3      	subs	r3, r2, r3
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d807      	bhi.n	8008c42 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8008c32:	4b0d      	ldr	r3, [pc, #52]	@ (8008c68 <tcp_kill_timewait+0x5c>)
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6a1b      	ldr	r3, [r3, #32]
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	60fb      	str	r3, [r7, #12]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1e9      	bne.n	8008c22 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d002      	beq.n	8008c5a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008c54:	68b8      	ldr	r0, [r7, #8]
 8008c56:	f7ff f81f 	bl	8007c98 <tcp_abort>
  }
}
 8008c5a:	bf00      	nop
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	200083e8 	.word	0x200083e8
 8008c68:	200083d8 	.word	0x200083d8

08008c6c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008c72:	4b10      	ldr	r3, [pc, #64]	@ (8008cb4 <tcp_handle_closepend+0x48>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008c78:	e014      	b.n	8008ca4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	8b5b      	ldrh	r3, [r3, #26]
 8008c84:	f003 0308 	and.w	r3, r3, #8
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d009      	beq.n	8008ca0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	8b5b      	ldrh	r3, [r3, #26]
 8008c90:	f023 0308 	bic.w	r3, r3, #8
 8008c94:	b29a      	uxth	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f7fe fea8 	bl	80079f0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1e7      	bne.n	8008c7a <tcp_handle_closepend+0xe>
  }
}
 8008caa:	bf00      	nop
 8008cac:	bf00      	nop
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	200083e4 	.word	0x200083e4

08008cb8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008cc2:	2001      	movs	r0, #1
 8008cc4:	f7fd fb7a 	bl	80063bc <memp_malloc>
 8008cc8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d126      	bne.n	8008d1e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008cd0:	f7ff ffcc 	bl	8008c6c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008cd4:	f7ff ff9a 	bl	8008c0c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008cd8:	2001      	movs	r0, #1
 8008cda:	f7fd fb6f 	bl	80063bc <memp_malloc>
 8008cde:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d11b      	bne.n	8008d1e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8008ce6:	2009      	movs	r0, #9
 8008ce8:	f7ff ff46 	bl	8008b78 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008cec:	2001      	movs	r0, #1
 8008cee:	f7fd fb65 	bl	80063bc <memp_malloc>
 8008cf2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d111      	bne.n	8008d1e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8008cfa:	2008      	movs	r0, #8
 8008cfc:	f7ff ff3c 	bl	8008b78 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008d00:	2001      	movs	r0, #1
 8008d02:	f7fd fb5b 	bl	80063bc <memp_malloc>
 8008d06:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d107      	bne.n	8008d1e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8008d0e:	79fb      	ldrb	r3, [r7, #7]
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7ff fee3 	bl	8008adc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008d16:	2001      	movs	r0, #1
 8008d18:	f7fd fb50 	bl	80063bc <memp_malloc>
 8008d1c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d03f      	beq.n	8008da4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008d24:	229c      	movs	r2, #156	@ 0x9c
 8008d26:	2100      	movs	r1, #0
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f008 fef8 	bl	8011b1e <memset>
    pcb->prio = prio;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	79fa      	ldrb	r2, [r7, #7]
 8008d32:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8008d3a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8008d44:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	22ff      	movs	r2, #255	@ 0xff
 8008d52:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8008d5a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2206      	movs	r2, #6
 8008d60:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2206      	movs	r2, #6
 8008d68:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008d70:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8008d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8008db0 <tcp_alloc+0xf8>)
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008d82:	4b0c      	ldr	r3, [pc, #48]	@ (8008db4 <tcp_alloc+0xfc>)
 8008d84:	781a      	ldrb	r2, [r3, #0]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8008d90:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	4a08      	ldr	r2, [pc, #32]	@ (8008db8 <tcp_alloc+0x100>)
 8008d98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	4a07      	ldr	r2, [pc, #28]	@ (8008dbc <tcp_alloc+0x104>)
 8008da0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8008da4:	68fb      	ldr	r3, [r7, #12]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	200083d8 	.word	0x200083d8
 8008db4:	200083ee 	.word	0x200083ee
 8008db8:	08008a71 	.word	0x08008a71
 8008dbc:	006ddd00 	.word	0x006ddd00

08008dc0 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8008dc4:	2040      	movs	r0, #64	@ 0x40
 8008dc6:	f7ff ff77 	bl	8008cb8 <tcp_alloc>
 8008dca:	4603      	mov	r3, r0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00e      	beq.n	8008dfe <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	7d1b      	ldrb	r3, [r3, #20]
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d106      	bne.n	8008df6 <tcp_recv+0x26>
 8008de8:	4b07      	ldr	r3, [pc, #28]	@ (8008e08 <tcp_recv+0x38>)
 8008dea:	f240 72df 	movw	r2, #2015	@ 0x7df
 8008dee:	4907      	ldr	r1, [pc, #28]	@ (8008e0c <tcp_recv+0x3c>)
 8008df0:	4807      	ldr	r0, [pc, #28]	@ (8008e10 <tcp_recv+0x40>)
 8008df2:	f008 fddf 	bl	80119b4 <iprintf>
    pcb->recv = recv;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	683a      	ldr	r2, [r7, #0]
 8008dfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8008dfe:	bf00      	nop
 8008e00:	3708      	adds	r7, #8
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	080136d0 	.word	0x080136d0
 8008e0c:	08013c6c 	.word	0x08013c6c
 8008e10:	08013714 	.word	0x08013714

08008e14 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d008      	beq.n	8008e36 <tcp_accept+0x22>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	7d1b      	ldrb	r3, [r3, #20]
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d104      	bne.n	8008e36 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	683a      	ldr	r2, [r7, #0]
 8008e34:	619a      	str	r2, [r3, #24]
  }
}
 8008e36:	bf00      	nop
 8008e38:	3714      	adds	r7, #20
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr
	...

08008e44 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d107      	bne.n	8008e62 <tcp_pcb_purge+0x1e>
 8008e52:	4b21      	ldr	r3, [pc, #132]	@ (8008ed8 <tcp_pcb_purge+0x94>)
 8008e54:	f640 0251 	movw	r2, #2129	@ 0x851
 8008e58:	4920      	ldr	r1, [pc, #128]	@ (8008edc <tcp_pcb_purge+0x98>)
 8008e5a:	4821      	ldr	r0, [pc, #132]	@ (8008ee0 <tcp_pcb_purge+0x9c>)
 8008e5c:	f008 fdaa 	bl	80119b4 <iprintf>
 8008e60:	e037      	b.n	8008ed2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	7d1b      	ldrb	r3, [r3, #20]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d033      	beq.n	8008ed2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008e6e:	2b0a      	cmp	r3, #10
 8008e70:	d02f      	beq.n	8008ed2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d02b      	beq.n	8008ed2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d007      	beq.n	8008e92 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7fe f97e 	bl	8007188 <pbuf_free>
      pcb->refused_data = NULL;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d002      	beq.n	8008ea0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 f986 	bl	80091ac <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008ea6:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008eac:	4618      	mov	r0, r3
 8008eae:	f7ff fd85 	bl	80089bc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7ff fd80 	bl	80089bc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8008ed2:	3708      	adds	r7, #8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	080136d0 	.word	0x080136d0
 8008edc:	08013d1c 	.word	0x08013d1c
 8008ee0:	08013714 	.word	0x08013714

08008ee4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d106      	bne.n	8008f02 <tcp_pcb_remove+0x1e>
 8008ef4:	4b3e      	ldr	r3, [pc, #248]	@ (8008ff0 <tcp_pcb_remove+0x10c>)
 8008ef6:	f640 0283 	movw	r2, #2179	@ 0x883
 8008efa:	493e      	ldr	r1, [pc, #248]	@ (8008ff4 <tcp_pcb_remove+0x110>)
 8008efc:	483e      	ldr	r0, [pc, #248]	@ (8008ff8 <tcp_pcb_remove+0x114>)
 8008efe:	f008 fd59 	bl	80119b4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d106      	bne.n	8008f16 <tcp_pcb_remove+0x32>
 8008f08:	4b39      	ldr	r3, [pc, #228]	@ (8008ff0 <tcp_pcb_remove+0x10c>)
 8008f0a:	f640 0284 	movw	r2, #2180	@ 0x884
 8008f0e:	493b      	ldr	r1, [pc, #236]	@ (8008ffc <tcp_pcb_remove+0x118>)
 8008f10:	4839      	ldr	r0, [pc, #228]	@ (8008ff8 <tcp_pcb_remove+0x114>)
 8008f12:	f008 fd4f 	bl	80119b4 <iprintf>

  TCP_RMV(pcblist, pcb);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	683a      	ldr	r2, [r7, #0]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d105      	bne.n	8008f2c <tcp_pcb_remove+0x48>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68da      	ldr	r2, [r3, #12]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	601a      	str	r2, [r3, #0]
 8008f2a:	e013      	b.n	8008f54 <tcp_pcb_remove+0x70>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	60fb      	str	r3, [r7, #12]
 8008f32:	e00c      	b.n	8008f4e <tcp_pcb_remove+0x6a>
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	683a      	ldr	r2, [r7, #0]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d104      	bne.n	8008f48 <tcp_pcb_remove+0x64>
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	68da      	ldr	r2, [r3, #12]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	60da      	str	r2, [r3, #12]
 8008f46:	e005      	b.n	8008f54 <tcp_pcb_remove+0x70>
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	60fb      	str	r3, [r7, #12]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d1ef      	bne.n	8008f34 <tcp_pcb_remove+0x50>
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	2200      	movs	r2, #0
 8008f58:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008f5a:	6838      	ldr	r0, [r7, #0]
 8008f5c:	f7ff ff72 	bl	8008e44 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	7d1b      	ldrb	r3, [r3, #20]
 8008f64:	2b0a      	cmp	r3, #10
 8008f66:	d013      	beq.n	8008f90 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d00f      	beq.n	8008f90 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	8b5b      	ldrh	r3, [r3, #26]
 8008f74:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d009      	beq.n	8008f90 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	8b5b      	ldrh	r3, [r3, #26]
 8008f80:	f043 0302 	orr.w	r3, r3, #2
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008f8a:	6838      	ldr	r0, [r7, #0]
 8008f8c:	f003 fbc0 	bl	800c710 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	7d1b      	ldrb	r3, [r3, #20]
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d020      	beq.n	8008fda <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d006      	beq.n	8008fae <tcp_pcb_remove+0xca>
 8008fa0:	4b13      	ldr	r3, [pc, #76]	@ (8008ff0 <tcp_pcb_remove+0x10c>)
 8008fa2:	f640 0293 	movw	r2, #2195	@ 0x893
 8008fa6:	4916      	ldr	r1, [pc, #88]	@ (8009000 <tcp_pcb_remove+0x11c>)
 8008fa8:	4813      	ldr	r0, [pc, #76]	@ (8008ff8 <tcp_pcb_remove+0x114>)
 8008faa:	f008 fd03 	bl	80119b4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d006      	beq.n	8008fc4 <tcp_pcb_remove+0xe0>
 8008fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8008ff0 <tcp_pcb_remove+0x10c>)
 8008fb8:	f640 0294 	movw	r2, #2196	@ 0x894
 8008fbc:	4911      	ldr	r1, [pc, #68]	@ (8009004 <tcp_pcb_remove+0x120>)
 8008fbe:	480e      	ldr	r0, [pc, #56]	@ (8008ff8 <tcp_pcb_remove+0x114>)
 8008fc0:	f008 fcf8 	bl	80119b4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d006      	beq.n	8008fda <tcp_pcb_remove+0xf6>
 8008fcc:	4b08      	ldr	r3, [pc, #32]	@ (8008ff0 <tcp_pcb_remove+0x10c>)
 8008fce:	f640 0296 	movw	r2, #2198	@ 0x896
 8008fd2:	490d      	ldr	r1, [pc, #52]	@ (8009008 <tcp_pcb_remove+0x124>)
 8008fd4:	4808      	ldr	r0, [pc, #32]	@ (8008ff8 <tcp_pcb_remove+0x114>)
 8008fd6:	f008 fced 	bl	80119b4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008fe6:	bf00      	nop
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	080136d0 	.word	0x080136d0
 8008ff4:	08013d38 	.word	0x08013d38
 8008ff8:	08013714 	.word	0x08013714
 8008ffc:	08013d54 	.word	0x08013d54
 8009000:	08013d74 	.word	0x08013d74
 8009004:	08013d8c 	.word	0x08013d8c
 8009008:	08013da8 	.word	0x08013da8

0800900c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d106      	bne.n	8009028 <tcp_next_iss+0x1c>
 800901a:	4b0a      	ldr	r3, [pc, #40]	@ (8009044 <tcp_next_iss+0x38>)
 800901c:	f640 02af 	movw	r2, #2223	@ 0x8af
 8009020:	4909      	ldr	r1, [pc, #36]	@ (8009048 <tcp_next_iss+0x3c>)
 8009022:	480a      	ldr	r0, [pc, #40]	@ (800904c <tcp_next_iss+0x40>)
 8009024:	f008 fcc6 	bl	80119b4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009028:	4b09      	ldr	r3, [pc, #36]	@ (8009050 <tcp_next_iss+0x44>)
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	4b09      	ldr	r3, [pc, #36]	@ (8009054 <tcp_next_iss+0x48>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4413      	add	r3, r2
 8009032:	4a07      	ldr	r2, [pc, #28]	@ (8009050 <tcp_next_iss+0x44>)
 8009034:	6013      	str	r3, [r2, #0]
  return iss;
 8009036:	4b06      	ldr	r3, [pc, #24]	@ (8009050 <tcp_next_iss+0x44>)
 8009038:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800903a:	4618      	mov	r0, r3
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	080136d0 	.word	0x080136d0
 8009048:	08013dc0 	.word	0x08013dc0
 800904c:	08013714 	.word	0x08013714
 8009050:	20000024 	.word	0x20000024
 8009054:	200083d8 	.word	0x200083d8

08009058 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b086      	sub	sp, #24
 800905c:	af00      	add	r7, sp, #0
 800905e:	4603      	mov	r3, r0
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	607a      	str	r2, [r7, #4]
 8009064:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d106      	bne.n	800907a <tcp_eff_send_mss_netif+0x22>
 800906c:	4b14      	ldr	r3, [pc, #80]	@ (80090c0 <tcp_eff_send_mss_netif+0x68>)
 800906e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8009072:	4914      	ldr	r1, [pc, #80]	@ (80090c4 <tcp_eff_send_mss_netif+0x6c>)
 8009074:	4814      	ldr	r0, [pc, #80]	@ (80090c8 <tcp_eff_send_mss_netif+0x70>)
 8009076:	f008 fc9d 	bl	80119b4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d101      	bne.n	8009084 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8009080:	89fb      	ldrh	r3, [r7, #14]
 8009082:	e019      	b.n	80090b8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009088:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800908a:	8afb      	ldrh	r3, [r7, #22]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d012      	beq.n	80090b6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009090:	2328      	movs	r3, #40	@ 0x28
 8009092:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009094:	8afa      	ldrh	r2, [r7, #22]
 8009096:	8abb      	ldrh	r3, [r7, #20]
 8009098:	429a      	cmp	r2, r3
 800909a:	d904      	bls.n	80090a6 <tcp_eff_send_mss_netif+0x4e>
 800909c:	8afa      	ldrh	r2, [r7, #22]
 800909e:	8abb      	ldrh	r3, [r7, #20]
 80090a0:	1ad3      	subs	r3, r2, r3
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	e000      	b.n	80090a8 <tcp_eff_send_mss_netif+0x50>
 80090a6:	2300      	movs	r3, #0
 80090a8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80090aa:	8a7a      	ldrh	r2, [r7, #18]
 80090ac:	89fb      	ldrh	r3, [r7, #14]
 80090ae:	4293      	cmp	r3, r2
 80090b0:	bf28      	it	cs
 80090b2:	4613      	movcs	r3, r2
 80090b4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80090b6:	89fb      	ldrh	r3, [r7, #14]
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3718      	adds	r7, #24
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	080136d0 	.word	0x080136d0
 80090c4:	08013ddc 	.word	0x08013ddc
 80090c8:	08013714 	.word	0x08013714

080090cc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d119      	bne.n	8009114 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80090e0:	4b10      	ldr	r3, [pc, #64]	@ (8009124 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80090e2:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 80090e6:	4910      	ldr	r1, [pc, #64]	@ (8009128 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80090e8:	4810      	ldr	r0, [pc, #64]	@ (800912c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80090ea:	f008 fc63 	bl	80119b4 <iprintf>

  while (pcb != NULL) {
 80090ee:	e011      	b.n	8009114 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d108      	bne.n	800910e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	f7fe fdc8 	bl	8007c98 <tcp_abort>
      pcb = next;
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	60fb      	str	r3, [r7, #12]
 800910c:	e002      	b.n	8009114 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d1ea      	bne.n	80090f0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800911a:	bf00      	nop
 800911c:	bf00      	nop
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	080136d0 	.word	0x080136d0
 8009128:	08013e04 	.word	0x08013e04
 800912c:	08013714 	.word	0x08013714

08009130 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d02a      	beq.n	8009196 <tcp_netif_ip_addr_changed+0x66>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d026      	beq.n	8009196 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009148:	4b15      	ldr	r3, [pc, #84]	@ (80091a0 <tcp_netif_ip_addr_changed+0x70>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4619      	mov	r1, r3
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f7ff ffbc 	bl	80090cc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009154:	4b13      	ldr	r3, [pc, #76]	@ (80091a4 <tcp_netif_ip_addr_changed+0x74>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4619      	mov	r1, r3
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f7ff ffb6 	bl	80090cc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d017      	beq.n	8009196 <tcp_netif_ip_addr_changed+0x66>
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d013      	beq.n	8009196 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800916e:	4b0e      	ldr	r3, [pc, #56]	@ (80091a8 <tcp_netif_ip_addr_changed+0x78>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	60fb      	str	r3, [r7, #12]
 8009174:	e00c      	b.n	8009190 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	429a      	cmp	r2, r3
 8009180:	d103      	bne.n	800918a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	60fb      	str	r3, [r7, #12]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d1ef      	bne.n	8009176 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8009196:	bf00      	nop
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	200083e4 	.word	0x200083e4
 80091a4:	200083dc 	.word	0x200083dc
 80091a8:	200083e0 	.word	0x200083e0

080091ac <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d007      	beq.n	80091cc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7ff fbfb 	bl	80089bc <tcp_segs_free>
    pcb->ooseq = NULL;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80091cc:	bf00      	nop
 80091ce:	3708      	adds	r7, #8
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80091d4:	b590      	push	{r4, r7, lr}
 80091d6:	b08d      	sub	sp, #52	@ 0x34
 80091d8:	af04      	add	r7, sp, #16
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d105      	bne.n	80091f0 <tcp_input+0x1c>
 80091e4:	4b9b      	ldr	r3, [pc, #620]	@ (8009454 <tcp_input+0x280>)
 80091e6:	2283      	movs	r2, #131	@ 0x83
 80091e8:	499b      	ldr	r1, [pc, #620]	@ (8009458 <tcp_input+0x284>)
 80091ea:	489c      	ldr	r0, [pc, #624]	@ (800945c <tcp_input+0x288>)
 80091ec:	f008 fbe2 	bl	80119b4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	4a9a      	ldr	r2, [pc, #616]	@ (8009460 <tcp_input+0x28c>)
 80091f6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	895b      	ldrh	r3, [r3, #10]
 80091fc:	2b13      	cmp	r3, #19
 80091fe:	f240 83d1 	bls.w	80099a4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009202:	4b98      	ldr	r3, [pc, #608]	@ (8009464 <tcp_input+0x290>)
 8009204:	695b      	ldr	r3, [r3, #20]
 8009206:	4a97      	ldr	r2, [pc, #604]	@ (8009464 <tcp_input+0x290>)
 8009208:	6812      	ldr	r2, [r2, #0]
 800920a:	4611      	mov	r1, r2
 800920c:	4618      	mov	r0, r3
 800920e:	f006 f869 	bl	800f2e4 <ip4_addr_isbroadcast_u32>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	f040 83c7 	bne.w	80099a8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800921a:	4b92      	ldr	r3, [pc, #584]	@ (8009464 <tcp_input+0x290>)
 800921c:	695b      	ldr	r3, [r3, #20]
 800921e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009222:	2be0      	cmp	r3, #224	@ 0xe0
 8009224:	f000 83c0 	beq.w	80099a8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8009228:	4b8d      	ldr	r3, [pc, #564]	@ (8009460 <tcp_input+0x28c>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	899b      	ldrh	r3, [r3, #12]
 800922e:	b29b      	uxth	r3, r3
 8009230:	4618      	mov	r0, r3
 8009232:	f7fc fc4b 	bl	8005acc <lwip_htons>
 8009236:	4603      	mov	r3, r0
 8009238:	0b1b      	lsrs	r3, r3, #12
 800923a:	b29b      	uxth	r3, r3
 800923c:	b2db      	uxtb	r3, r3
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009242:	7cbb      	ldrb	r3, [r7, #18]
 8009244:	2b13      	cmp	r3, #19
 8009246:	f240 83b1 	bls.w	80099ac <tcp_input+0x7d8>
 800924a:	7cbb      	ldrb	r3, [r7, #18]
 800924c:	b29a      	uxth	r2, r3
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	891b      	ldrh	r3, [r3, #8]
 8009252:	429a      	cmp	r2, r3
 8009254:	f200 83aa 	bhi.w	80099ac <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009258:	7cbb      	ldrb	r3, [r7, #18]
 800925a:	b29b      	uxth	r3, r3
 800925c:	3b14      	subs	r3, #20
 800925e:	b29a      	uxth	r2, r3
 8009260:	4b81      	ldr	r3, [pc, #516]	@ (8009468 <tcp_input+0x294>)
 8009262:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009264:	4b81      	ldr	r3, [pc, #516]	@ (800946c <tcp_input+0x298>)
 8009266:	2200      	movs	r2, #0
 8009268:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	895a      	ldrh	r2, [r3, #10]
 800926e:	7cbb      	ldrb	r3, [r7, #18]
 8009270:	b29b      	uxth	r3, r3
 8009272:	429a      	cmp	r2, r3
 8009274:	d309      	bcc.n	800928a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8009276:	4b7c      	ldr	r3, [pc, #496]	@ (8009468 <tcp_input+0x294>)
 8009278:	881a      	ldrh	r2, [r3, #0]
 800927a:	4b7d      	ldr	r3, [pc, #500]	@ (8009470 <tcp_input+0x29c>)
 800927c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800927e:	7cbb      	ldrb	r3, [r7, #18]
 8009280:	4619      	mov	r1, r3
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f7fd fefa 	bl	800707c <pbuf_remove_header>
 8009288:	e04e      	b.n	8009328 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d105      	bne.n	800929e <tcp_input+0xca>
 8009292:	4b70      	ldr	r3, [pc, #448]	@ (8009454 <tcp_input+0x280>)
 8009294:	22c2      	movs	r2, #194	@ 0xc2
 8009296:	4977      	ldr	r1, [pc, #476]	@ (8009474 <tcp_input+0x2a0>)
 8009298:	4870      	ldr	r0, [pc, #448]	@ (800945c <tcp_input+0x288>)
 800929a:	f008 fb8b 	bl	80119b4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800929e:	2114      	movs	r1, #20
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f7fd feeb 	bl	800707c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	895a      	ldrh	r2, [r3, #10]
 80092aa:	4b71      	ldr	r3, [pc, #452]	@ (8009470 <tcp_input+0x29c>)
 80092ac:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80092ae:	4b6e      	ldr	r3, [pc, #440]	@ (8009468 <tcp_input+0x294>)
 80092b0:	881a      	ldrh	r2, [r3, #0]
 80092b2:	4b6f      	ldr	r3, [pc, #444]	@ (8009470 <tcp_input+0x29c>)
 80092b4:	881b      	ldrh	r3, [r3, #0]
 80092b6:	1ad3      	subs	r3, r2, r3
 80092b8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80092ba:	4b6d      	ldr	r3, [pc, #436]	@ (8009470 <tcp_input+0x29c>)
 80092bc:	881b      	ldrh	r3, [r3, #0]
 80092be:	4619      	mov	r1, r3
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f7fd fedb 	bl	800707c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	895b      	ldrh	r3, [r3, #10]
 80092cc:	8a3a      	ldrh	r2, [r7, #16]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	f200 836e 	bhi.w	80099b0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	4a64      	ldr	r2, [pc, #400]	@ (800946c <tcp_input+0x298>)
 80092dc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	8a3a      	ldrh	r2, [r7, #16]
 80092e4:	4611      	mov	r1, r2
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7fd fec8 	bl	800707c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	891a      	ldrh	r2, [r3, #8]
 80092f0:	8a3b      	ldrh	r3, [r7, #16]
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	b29a      	uxth	r2, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	895b      	ldrh	r3, [r3, #10]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d005      	beq.n	800930e <tcp_input+0x13a>
 8009302:	4b54      	ldr	r3, [pc, #336]	@ (8009454 <tcp_input+0x280>)
 8009304:	22df      	movs	r2, #223	@ 0xdf
 8009306:	495c      	ldr	r1, [pc, #368]	@ (8009478 <tcp_input+0x2a4>)
 8009308:	4854      	ldr	r0, [pc, #336]	@ (800945c <tcp_input+0x288>)
 800930a:	f008 fb53 	bl	80119b4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	891a      	ldrh	r2, [r3, #8]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	891b      	ldrh	r3, [r3, #8]
 8009318:	429a      	cmp	r2, r3
 800931a:	d005      	beq.n	8009328 <tcp_input+0x154>
 800931c:	4b4d      	ldr	r3, [pc, #308]	@ (8009454 <tcp_input+0x280>)
 800931e:	22e0      	movs	r2, #224	@ 0xe0
 8009320:	4956      	ldr	r1, [pc, #344]	@ (800947c <tcp_input+0x2a8>)
 8009322:	484e      	ldr	r0, [pc, #312]	@ (800945c <tcp_input+0x288>)
 8009324:	f008 fb46 	bl	80119b4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009328:	4b4d      	ldr	r3, [pc, #308]	@ (8009460 <tcp_input+0x28c>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	881b      	ldrh	r3, [r3, #0]
 800932e:	b29b      	uxth	r3, r3
 8009330:	4a4b      	ldr	r2, [pc, #300]	@ (8009460 <tcp_input+0x28c>)
 8009332:	6814      	ldr	r4, [r2, #0]
 8009334:	4618      	mov	r0, r3
 8009336:	f7fc fbc9 	bl	8005acc <lwip_htons>
 800933a:	4603      	mov	r3, r0
 800933c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800933e:	4b48      	ldr	r3, [pc, #288]	@ (8009460 <tcp_input+0x28c>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	885b      	ldrh	r3, [r3, #2]
 8009344:	b29b      	uxth	r3, r3
 8009346:	4a46      	ldr	r2, [pc, #280]	@ (8009460 <tcp_input+0x28c>)
 8009348:	6814      	ldr	r4, [r2, #0]
 800934a:	4618      	mov	r0, r3
 800934c:	f7fc fbbe 	bl	8005acc <lwip_htons>
 8009350:	4603      	mov	r3, r0
 8009352:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009354:	4b42      	ldr	r3, [pc, #264]	@ (8009460 <tcp_input+0x28c>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	4a41      	ldr	r2, [pc, #260]	@ (8009460 <tcp_input+0x28c>)
 800935c:	6814      	ldr	r4, [r2, #0]
 800935e:	4618      	mov	r0, r3
 8009360:	f7fc fbca 	bl	8005af8 <lwip_htonl>
 8009364:	4603      	mov	r3, r0
 8009366:	6063      	str	r3, [r4, #4]
 8009368:	6863      	ldr	r3, [r4, #4]
 800936a:	4a45      	ldr	r2, [pc, #276]	@ (8009480 <tcp_input+0x2ac>)
 800936c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800936e:	4b3c      	ldr	r3, [pc, #240]	@ (8009460 <tcp_input+0x28c>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	4a3a      	ldr	r2, [pc, #232]	@ (8009460 <tcp_input+0x28c>)
 8009376:	6814      	ldr	r4, [r2, #0]
 8009378:	4618      	mov	r0, r3
 800937a:	f7fc fbbd 	bl	8005af8 <lwip_htonl>
 800937e:	4603      	mov	r3, r0
 8009380:	60a3      	str	r3, [r4, #8]
 8009382:	68a3      	ldr	r3, [r4, #8]
 8009384:	4a3f      	ldr	r2, [pc, #252]	@ (8009484 <tcp_input+0x2b0>)
 8009386:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009388:	4b35      	ldr	r3, [pc, #212]	@ (8009460 <tcp_input+0x28c>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	89db      	ldrh	r3, [r3, #14]
 800938e:	b29b      	uxth	r3, r3
 8009390:	4a33      	ldr	r2, [pc, #204]	@ (8009460 <tcp_input+0x28c>)
 8009392:	6814      	ldr	r4, [r2, #0]
 8009394:	4618      	mov	r0, r3
 8009396:	f7fc fb99 	bl	8005acc <lwip_htons>
 800939a:	4603      	mov	r3, r0
 800939c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800939e:	4b30      	ldr	r3, [pc, #192]	@ (8009460 <tcp_input+0x28c>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	899b      	ldrh	r3, [r3, #12]
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7fc fb90 	bl	8005acc <lwip_htons>
 80093ac:	4603      	mov	r3, r0
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80093b4:	b2da      	uxtb	r2, r3
 80093b6:	4b34      	ldr	r3, [pc, #208]	@ (8009488 <tcp_input+0x2b4>)
 80093b8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	891a      	ldrh	r2, [r3, #8]
 80093be:	4b33      	ldr	r3, [pc, #204]	@ (800948c <tcp_input+0x2b8>)
 80093c0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80093c2:	4b31      	ldr	r3, [pc, #196]	@ (8009488 <tcp_input+0x2b4>)
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	f003 0303 	and.w	r3, r3, #3
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00c      	beq.n	80093e8 <tcp_input+0x214>
    tcplen++;
 80093ce:	4b2f      	ldr	r3, [pc, #188]	@ (800948c <tcp_input+0x2b8>)
 80093d0:	881b      	ldrh	r3, [r3, #0]
 80093d2:	3301      	adds	r3, #1
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	4b2d      	ldr	r3, [pc, #180]	@ (800948c <tcp_input+0x2b8>)
 80093d8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	891a      	ldrh	r2, [r3, #8]
 80093de:	4b2b      	ldr	r3, [pc, #172]	@ (800948c <tcp_input+0x2b8>)
 80093e0:	881b      	ldrh	r3, [r3, #0]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	f200 82e6 	bhi.w	80099b4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80093e8:	2300      	movs	r3, #0
 80093ea:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80093ec:	4b28      	ldr	r3, [pc, #160]	@ (8009490 <tcp_input+0x2bc>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	61fb      	str	r3, [r7, #28]
 80093f2:	e09d      	b.n	8009530 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	7d1b      	ldrb	r3, [r3, #20]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d105      	bne.n	8009408 <tcp_input+0x234>
 80093fc:	4b15      	ldr	r3, [pc, #84]	@ (8009454 <tcp_input+0x280>)
 80093fe:	22fb      	movs	r2, #251	@ 0xfb
 8009400:	4924      	ldr	r1, [pc, #144]	@ (8009494 <tcp_input+0x2c0>)
 8009402:	4816      	ldr	r0, [pc, #88]	@ (800945c <tcp_input+0x288>)
 8009404:	f008 fad6 	bl	80119b4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	7d1b      	ldrb	r3, [r3, #20]
 800940c:	2b0a      	cmp	r3, #10
 800940e:	d105      	bne.n	800941c <tcp_input+0x248>
 8009410:	4b10      	ldr	r3, [pc, #64]	@ (8009454 <tcp_input+0x280>)
 8009412:	22fc      	movs	r2, #252	@ 0xfc
 8009414:	4920      	ldr	r1, [pc, #128]	@ (8009498 <tcp_input+0x2c4>)
 8009416:	4811      	ldr	r0, [pc, #68]	@ (800945c <tcp_input+0x288>)
 8009418:	f008 facc 	bl	80119b4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	7d1b      	ldrb	r3, [r3, #20]
 8009420:	2b01      	cmp	r3, #1
 8009422:	d105      	bne.n	8009430 <tcp_input+0x25c>
 8009424:	4b0b      	ldr	r3, [pc, #44]	@ (8009454 <tcp_input+0x280>)
 8009426:	22fd      	movs	r2, #253	@ 0xfd
 8009428:	491c      	ldr	r1, [pc, #112]	@ (800949c <tcp_input+0x2c8>)
 800942a:	480c      	ldr	r0, [pc, #48]	@ (800945c <tcp_input+0x288>)
 800942c:	f008 fac2 	bl	80119b4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	7a1b      	ldrb	r3, [r3, #8]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d033      	beq.n	80094a0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	7a1a      	ldrb	r2, [r3, #8]
 800943c:	4b09      	ldr	r3, [pc, #36]	@ (8009464 <tcp_input+0x290>)
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009444:	3301      	adds	r3, #1
 8009446:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009448:	429a      	cmp	r2, r3
 800944a:	d029      	beq.n	80094a0 <tcp_input+0x2cc>
      prev = pcb;
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	61bb      	str	r3, [r7, #24]
      continue;
 8009450:	e06b      	b.n	800952a <tcp_input+0x356>
 8009452:	bf00      	nop
 8009454:	08013e38 	.word	0x08013e38
 8009458:	08013e6c 	.word	0x08013e6c
 800945c:	08013e84 	.word	0x08013e84
 8009460:	20008400 	.word	0x20008400
 8009464:	20004e68 	.word	0x20004e68
 8009468:	20008404 	.word	0x20008404
 800946c:	20008408 	.word	0x20008408
 8009470:	20008406 	.word	0x20008406
 8009474:	08013eac 	.word	0x08013eac
 8009478:	08013ebc 	.word	0x08013ebc
 800947c:	08013ec8 	.word	0x08013ec8
 8009480:	20008410 	.word	0x20008410
 8009484:	20008414 	.word	0x20008414
 8009488:	2000841c 	.word	0x2000841c
 800948c:	2000841a 	.word	0x2000841a
 8009490:	200083e4 	.word	0x200083e4
 8009494:	08013ee8 	.word	0x08013ee8
 8009498:	08013f10 	.word	0x08013f10
 800949c:	08013f3c 	.word	0x08013f3c
    }

    if (pcb->remote_port == tcphdr->src &&
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	8b1a      	ldrh	r2, [r3, #24]
 80094a4:	4b72      	ldr	r3, [pc, #456]	@ (8009670 <tcp_input+0x49c>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	881b      	ldrh	r3, [r3, #0]
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d13a      	bne.n	8009526 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	8ada      	ldrh	r2, [r3, #22]
 80094b4:	4b6e      	ldr	r3, [pc, #440]	@ (8009670 <tcp_input+0x49c>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	885b      	ldrh	r3, [r3, #2]
 80094ba:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80094bc:	429a      	cmp	r2, r3
 80094be:	d132      	bne.n	8009526 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	685a      	ldr	r2, [r3, #4]
 80094c4:	4b6b      	ldr	r3, [pc, #428]	@ (8009674 <tcp_input+0x4a0>)
 80094c6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d12c      	bne.n	8009526 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	4b68      	ldr	r3, [pc, #416]	@ (8009674 <tcp_input+0x4a0>)
 80094d2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d126      	bne.n	8009526 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	69fa      	ldr	r2, [r7, #28]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d106      	bne.n	80094f0 <tcp_input+0x31c>
 80094e2:	4b65      	ldr	r3, [pc, #404]	@ (8009678 <tcp_input+0x4a4>)
 80094e4:	f240 120d 	movw	r2, #269	@ 0x10d
 80094e8:	4964      	ldr	r1, [pc, #400]	@ (800967c <tcp_input+0x4a8>)
 80094ea:	4865      	ldr	r0, [pc, #404]	@ (8009680 <tcp_input+0x4ac>)
 80094ec:	f008 fa62 	bl	80119b4 <iprintf>
      if (prev != NULL) {
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00a      	beq.n	800950c <tcp_input+0x338>
        prev->next = pcb->next;
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	68da      	ldr	r2, [r3, #12]
 80094fa:	69bb      	ldr	r3, [r7, #24]
 80094fc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80094fe:	4b61      	ldr	r3, [pc, #388]	@ (8009684 <tcp_input+0x4b0>)
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	69fb      	ldr	r3, [r7, #28]
 8009504:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009506:	4a5f      	ldr	r2, [pc, #380]	@ (8009684 <tcp_input+0x4b0>)
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	69fa      	ldr	r2, [r7, #28]
 8009512:	429a      	cmp	r2, r3
 8009514:	d111      	bne.n	800953a <tcp_input+0x366>
 8009516:	4b58      	ldr	r3, [pc, #352]	@ (8009678 <tcp_input+0x4a4>)
 8009518:	f240 1215 	movw	r2, #277	@ 0x115
 800951c:	495a      	ldr	r1, [pc, #360]	@ (8009688 <tcp_input+0x4b4>)
 800951e:	4858      	ldr	r0, [pc, #352]	@ (8009680 <tcp_input+0x4ac>)
 8009520:	f008 fa48 	bl	80119b4 <iprintf>
      break;
 8009524:	e009      	b.n	800953a <tcp_input+0x366>
    }
    prev = pcb;
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	61fb      	str	r3, [r7, #28]
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	2b00      	cmp	r3, #0
 8009534:	f47f af5e 	bne.w	80093f4 <tcp_input+0x220>
 8009538:	e000      	b.n	800953c <tcp_input+0x368>
      break;
 800953a:	bf00      	nop
  }

  if (pcb == NULL) {
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	2b00      	cmp	r3, #0
 8009540:	f040 80aa 	bne.w	8009698 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009544:	4b51      	ldr	r3, [pc, #324]	@ (800968c <tcp_input+0x4b8>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	61fb      	str	r3, [r7, #28]
 800954a:	e03f      	b.n	80095cc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800954c:	69fb      	ldr	r3, [r7, #28]
 800954e:	7d1b      	ldrb	r3, [r3, #20]
 8009550:	2b0a      	cmp	r3, #10
 8009552:	d006      	beq.n	8009562 <tcp_input+0x38e>
 8009554:	4b48      	ldr	r3, [pc, #288]	@ (8009678 <tcp_input+0x4a4>)
 8009556:	f240 121f 	movw	r2, #287	@ 0x11f
 800955a:	494d      	ldr	r1, [pc, #308]	@ (8009690 <tcp_input+0x4bc>)
 800955c:	4848      	ldr	r0, [pc, #288]	@ (8009680 <tcp_input+0x4ac>)
 800955e:	f008 fa29 	bl	80119b4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	7a1b      	ldrb	r3, [r3, #8]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d009      	beq.n	800957e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800956a:	69fb      	ldr	r3, [r7, #28]
 800956c:	7a1a      	ldrb	r2, [r3, #8]
 800956e:	4b41      	ldr	r3, [pc, #260]	@ (8009674 <tcp_input+0x4a0>)
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009576:	3301      	adds	r3, #1
 8009578:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800957a:	429a      	cmp	r2, r3
 800957c:	d122      	bne.n	80095c4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	8b1a      	ldrh	r2, [r3, #24]
 8009582:	4b3b      	ldr	r3, [pc, #236]	@ (8009670 <tcp_input+0x49c>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	881b      	ldrh	r3, [r3, #0]
 8009588:	b29b      	uxth	r3, r3
 800958a:	429a      	cmp	r2, r3
 800958c:	d11b      	bne.n	80095c6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	8ada      	ldrh	r2, [r3, #22]
 8009592:	4b37      	ldr	r3, [pc, #220]	@ (8009670 <tcp_input+0x49c>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	885b      	ldrh	r3, [r3, #2]
 8009598:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800959a:	429a      	cmp	r2, r3
 800959c:	d113      	bne.n	80095c6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	685a      	ldr	r2, [r3, #4]
 80095a2:	4b34      	ldr	r3, [pc, #208]	@ (8009674 <tcp_input+0x4a0>)
 80095a4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d10d      	bne.n	80095c6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	4b31      	ldr	r3, [pc, #196]	@ (8009674 <tcp_input+0x4a0>)
 80095b0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d107      	bne.n	80095c6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80095b6:	69f8      	ldr	r0, [r7, #28]
 80095b8:	f000 fb56 	bl	8009c68 <tcp_timewait_input>
        }
        pbuf_free(p);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f7fd fde3 	bl	8007188 <pbuf_free>
        return;
 80095c2:	e1fd      	b.n	80099c0 <tcp_input+0x7ec>
        continue;
 80095c4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	61fb      	str	r3, [r7, #28]
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d1bc      	bne.n	800954c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80095d2:	2300      	movs	r3, #0
 80095d4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80095d6:	4b2f      	ldr	r3, [pc, #188]	@ (8009694 <tcp_input+0x4c0>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	617b      	str	r3, [r7, #20]
 80095dc:	e02a      	b.n	8009634 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	7a1b      	ldrb	r3, [r3, #8]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d00c      	beq.n	8009600 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	7a1a      	ldrb	r2, [r3, #8]
 80095ea:	4b22      	ldr	r3, [pc, #136]	@ (8009674 <tcp_input+0x4a0>)
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80095f2:	3301      	adds	r3, #1
 80095f4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d002      	beq.n	8009600 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	61bb      	str	r3, [r7, #24]
        continue;
 80095fe:	e016      	b.n	800962e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	8ada      	ldrh	r2, [r3, #22]
 8009604:	4b1a      	ldr	r3, [pc, #104]	@ (8009670 <tcp_input+0x49c>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	885b      	ldrh	r3, [r3, #2]
 800960a:	b29b      	uxth	r3, r3
 800960c:	429a      	cmp	r2, r3
 800960e:	d10c      	bne.n	800962a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	4b17      	ldr	r3, [pc, #92]	@ (8009674 <tcp_input+0x4a0>)
 8009616:	695b      	ldr	r3, [r3, #20]
 8009618:	429a      	cmp	r2, r3
 800961a:	d00f      	beq.n	800963c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00d      	beq.n	800963e <tcp_input+0x46a>
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d009      	beq.n	800963e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	617b      	str	r3, [r7, #20]
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d1d1      	bne.n	80095de <tcp_input+0x40a>
 800963a:	e000      	b.n	800963e <tcp_input+0x46a>
            break;
 800963c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d029      	beq.n	8009698 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009644:	69bb      	ldr	r3, [r7, #24]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00a      	beq.n	8009660 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	68da      	ldr	r2, [r3, #12]
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009652:	4b10      	ldr	r3, [pc, #64]	@ (8009694 <tcp_input+0x4c0>)
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800965a:	4a0e      	ldr	r2, [pc, #56]	@ (8009694 <tcp_input+0x4c0>)
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8009660:	6978      	ldr	r0, [r7, #20]
 8009662:	f000 fa03 	bl	8009a6c <tcp_listen_input>
      }
      pbuf_free(p);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f7fd fd8e 	bl	8007188 <pbuf_free>
      return;
 800966c:	e1a8      	b.n	80099c0 <tcp_input+0x7ec>
 800966e:	bf00      	nop
 8009670:	20008400 	.word	0x20008400
 8009674:	20004e68 	.word	0x20004e68
 8009678:	08013e38 	.word	0x08013e38
 800967c:	08013f64 	.word	0x08013f64
 8009680:	08013e84 	.word	0x08013e84
 8009684:	200083e4 	.word	0x200083e4
 8009688:	08013f90 	.word	0x08013f90
 800968c:	200083e8 	.word	0x200083e8
 8009690:	08013fbc 	.word	0x08013fbc
 8009694:	200083e0 	.word	0x200083e0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009698:	69fb      	ldr	r3, [r7, #28]
 800969a:	2b00      	cmp	r3, #0
 800969c:	f000 8158 	beq.w	8009950 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80096a0:	4b95      	ldr	r3, [pc, #596]	@ (80098f8 <tcp_input+0x724>)
 80096a2:	2200      	movs	r2, #0
 80096a4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	891a      	ldrh	r2, [r3, #8]
 80096aa:	4b93      	ldr	r3, [pc, #588]	@ (80098f8 <tcp_input+0x724>)
 80096ac:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80096ae:	4a92      	ldr	r2, [pc, #584]	@ (80098f8 <tcp_input+0x724>)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80096b4:	4b91      	ldr	r3, [pc, #580]	@ (80098fc <tcp_input+0x728>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a8f      	ldr	r2, [pc, #572]	@ (80098f8 <tcp_input+0x724>)
 80096ba:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80096bc:	4b90      	ldr	r3, [pc, #576]	@ (8009900 <tcp_input+0x72c>)
 80096be:	2200      	movs	r2, #0
 80096c0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80096c2:	4b90      	ldr	r3, [pc, #576]	@ (8009904 <tcp_input+0x730>)
 80096c4:	2200      	movs	r2, #0
 80096c6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80096c8:	4b8f      	ldr	r3, [pc, #572]	@ (8009908 <tcp_input+0x734>)
 80096ca:	2200      	movs	r2, #0
 80096cc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80096ce:	4b8f      	ldr	r3, [pc, #572]	@ (800990c <tcp_input+0x738>)
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	f003 0308 	and.w	r3, r3, #8
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d006      	beq.n	80096e8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	7b5b      	ldrb	r3, [r3, #13]
 80096de:	f043 0301 	orr.w	r3, r3, #1
 80096e2:	b2da      	uxtb	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d017      	beq.n	8009720 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80096f0:	69f8      	ldr	r0, [r7, #28]
 80096f2:	f7ff f8e7 	bl	80088c4 <tcp_process_refused_data>
 80096f6:	4603      	mov	r3, r0
 80096f8:	f113 0f0d 	cmn.w	r3, #13
 80096fc:	d007      	beq.n	800970e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00c      	beq.n	8009720 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009706:	4b82      	ldr	r3, [pc, #520]	@ (8009910 <tcp_input+0x73c>)
 8009708:	881b      	ldrh	r3, [r3, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d008      	beq.n	8009720 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800970e:	69fb      	ldr	r3, [r7, #28]
 8009710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009712:	2b00      	cmp	r3, #0
 8009714:	f040 80e3 	bne.w	80098de <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009718:	69f8      	ldr	r0, [r7, #28]
 800971a:	f003 fdff 	bl	800d31c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800971e:	e0de      	b.n	80098de <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8009720:	4a7c      	ldr	r2, [pc, #496]	@ (8009914 <tcp_input+0x740>)
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009726:	69f8      	ldr	r0, [r7, #28]
 8009728:	f000 fb18 	bl	8009d5c <tcp_process>
 800972c:	4603      	mov	r3, r0
 800972e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009730:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009734:	f113 0f0d 	cmn.w	r3, #13
 8009738:	f000 80d3 	beq.w	80098e2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800973c:	4b71      	ldr	r3, [pc, #452]	@ (8009904 <tcp_input+0x730>)
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	f003 0308 	and.w	r3, r3, #8
 8009744:	2b00      	cmp	r3, #0
 8009746:	d015      	beq.n	8009774 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009748:	69fb      	ldr	r3, [r7, #28]
 800974a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800974e:	2b00      	cmp	r3, #0
 8009750:	d008      	beq.n	8009764 <tcp_input+0x590>
 8009752:	69fb      	ldr	r3, [r7, #28]
 8009754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009758:	69fa      	ldr	r2, [r7, #28]
 800975a:	6912      	ldr	r2, [r2, #16]
 800975c:	f06f 010d 	mvn.w	r1, #13
 8009760:	4610      	mov	r0, r2
 8009762:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009764:	69f9      	ldr	r1, [r7, #28]
 8009766:	486c      	ldr	r0, [pc, #432]	@ (8009918 <tcp_input+0x744>)
 8009768:	f7ff fbbc 	bl	8008ee4 <tcp_pcb_remove>
        tcp_free(pcb);
 800976c:	69f8      	ldr	r0, [r7, #28]
 800976e:	f7fd ffab 	bl	80076c8 <tcp_free>
 8009772:	e0da      	b.n	800992a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8009774:	2300      	movs	r3, #0
 8009776:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009778:	4b63      	ldr	r3, [pc, #396]	@ (8009908 <tcp_input+0x734>)
 800977a:	881b      	ldrh	r3, [r3, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d01d      	beq.n	80097bc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009780:	4b61      	ldr	r3, [pc, #388]	@ (8009908 <tcp_input+0x734>)
 8009782:	881b      	ldrh	r3, [r3, #0]
 8009784:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00a      	beq.n	80097a6 <tcp_input+0x5d2>
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009796:	69fa      	ldr	r2, [r7, #28]
 8009798:	6910      	ldr	r0, [r2, #16]
 800979a:	89fa      	ldrh	r2, [r7, #14]
 800979c:	69f9      	ldr	r1, [r7, #28]
 800979e:	4798      	blx	r3
 80097a0:	4603      	mov	r3, r0
 80097a2:	74fb      	strb	r3, [r7, #19]
 80097a4:	e001      	b.n	80097aa <tcp_input+0x5d6>
 80097a6:	2300      	movs	r3, #0
 80097a8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80097aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80097ae:	f113 0f0d 	cmn.w	r3, #13
 80097b2:	f000 8098 	beq.w	80098e6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80097b6:	4b54      	ldr	r3, [pc, #336]	@ (8009908 <tcp_input+0x734>)
 80097b8:	2200      	movs	r2, #0
 80097ba:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80097bc:	69f8      	ldr	r0, [r7, #28]
 80097be:	f000 f915 	bl	80099ec <tcp_input_delayed_close>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f040 8090 	bne.w	80098ea <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80097ca:	4b4d      	ldr	r3, [pc, #308]	@ (8009900 <tcp_input+0x72c>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d041      	beq.n	8009856 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d006      	beq.n	80097e8 <tcp_input+0x614>
 80097da:	4b50      	ldr	r3, [pc, #320]	@ (800991c <tcp_input+0x748>)
 80097dc:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80097e0:	494f      	ldr	r1, [pc, #316]	@ (8009920 <tcp_input+0x74c>)
 80097e2:	4850      	ldr	r0, [pc, #320]	@ (8009924 <tcp_input+0x750>)
 80097e4:	f008 f8e6 	bl	80119b4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	8b5b      	ldrh	r3, [r3, #26]
 80097ec:	f003 0310 	and.w	r3, r3, #16
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d008      	beq.n	8009806 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80097f4:	4b42      	ldr	r3, [pc, #264]	@ (8009900 <tcp_input+0x72c>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7fd fcc5 	bl	8007188 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80097fe:	69f8      	ldr	r0, [r7, #28]
 8009800:	f7fe fa4a 	bl	8007c98 <tcp_abort>
            goto aborted;
 8009804:	e091      	b.n	800992a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800980c:	2b00      	cmp	r3, #0
 800980e:	d00c      	beq.n	800982a <tcp_input+0x656>
 8009810:	69fb      	ldr	r3, [r7, #28]
 8009812:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	6918      	ldr	r0, [r3, #16]
 800981a:	4b39      	ldr	r3, [pc, #228]	@ (8009900 <tcp_input+0x72c>)
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	2300      	movs	r3, #0
 8009820:	69f9      	ldr	r1, [r7, #28]
 8009822:	47a0      	blx	r4
 8009824:	4603      	mov	r3, r0
 8009826:	74fb      	strb	r3, [r7, #19]
 8009828:	e008      	b.n	800983c <tcp_input+0x668>
 800982a:	4b35      	ldr	r3, [pc, #212]	@ (8009900 <tcp_input+0x72c>)
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	2300      	movs	r3, #0
 8009830:	69f9      	ldr	r1, [r7, #28]
 8009832:	2000      	movs	r0, #0
 8009834:	f7ff f91c 	bl	8008a70 <tcp_recv_null>
 8009838:	4603      	mov	r3, r0
 800983a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800983c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009840:	f113 0f0d 	cmn.w	r3, #13
 8009844:	d053      	beq.n	80098ee <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009846:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d003      	beq.n	8009856 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800984e:	4b2c      	ldr	r3, [pc, #176]	@ (8009900 <tcp_input+0x72c>)
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	69fb      	ldr	r3, [r7, #28]
 8009854:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009856:	4b2b      	ldr	r3, [pc, #172]	@ (8009904 <tcp_input+0x730>)
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	f003 0320 	and.w	r3, r3, #32
 800985e:	2b00      	cmp	r3, #0
 8009860:	d030      	beq.n	80098c4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8009862:	69fb      	ldr	r3, [r7, #28]
 8009864:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009866:	2b00      	cmp	r3, #0
 8009868:	d009      	beq.n	800987e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800986e:	7b5a      	ldrb	r2, [r3, #13]
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009874:	f042 0220 	orr.w	r2, r2, #32
 8009878:	b2d2      	uxtb	r2, r2
 800987a:	735a      	strb	r2, [r3, #13]
 800987c:	e022      	b.n	80098c4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009882:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009886:	d005      	beq.n	8009894 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800988c:	3301      	adds	r3, #1
 800988e:	b29a      	uxth	r2, r3
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009894:	69fb      	ldr	r3, [r7, #28]
 8009896:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00b      	beq.n	80098b6 <tcp_input+0x6e2>
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	6918      	ldr	r0, [r3, #16]
 80098a8:	2300      	movs	r3, #0
 80098aa:	2200      	movs	r2, #0
 80098ac:	69f9      	ldr	r1, [r7, #28]
 80098ae:	47a0      	blx	r4
 80098b0:	4603      	mov	r3, r0
 80098b2:	74fb      	strb	r3, [r7, #19]
 80098b4:	e001      	b.n	80098ba <tcp_input+0x6e6>
 80098b6:	2300      	movs	r3, #0
 80098b8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80098ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80098be:	f113 0f0d 	cmn.w	r3, #13
 80098c2:	d016      	beq.n	80098f2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80098c4:	4b13      	ldr	r3, [pc, #76]	@ (8009914 <tcp_input+0x740>)
 80098c6:	2200      	movs	r2, #0
 80098c8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80098ca:	69f8      	ldr	r0, [r7, #28]
 80098cc:	f000 f88e 	bl	80099ec <tcp_input_delayed_close>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d128      	bne.n	8009928 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80098d6:	69f8      	ldr	r0, [r7, #28]
 80098d8:	f002 ff1a 	bl	800c710 <tcp_output>
 80098dc:	e025      	b.n	800992a <tcp_input+0x756>
        goto aborted;
 80098de:	bf00      	nop
 80098e0:	e023      	b.n	800992a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80098e2:	bf00      	nop
 80098e4:	e021      	b.n	800992a <tcp_input+0x756>
              goto aborted;
 80098e6:	bf00      	nop
 80098e8:	e01f      	b.n	800992a <tcp_input+0x756>
          goto aborted;
 80098ea:	bf00      	nop
 80098ec:	e01d      	b.n	800992a <tcp_input+0x756>
            goto aborted;
 80098ee:	bf00      	nop
 80098f0:	e01b      	b.n	800992a <tcp_input+0x756>
              goto aborted;
 80098f2:	bf00      	nop
 80098f4:	e019      	b.n	800992a <tcp_input+0x756>
 80098f6:	bf00      	nop
 80098f8:	200083f0 	.word	0x200083f0
 80098fc:	20008400 	.word	0x20008400
 8009900:	20008420 	.word	0x20008420
 8009904:	2000841d 	.word	0x2000841d
 8009908:	20008418 	.word	0x20008418
 800990c:	2000841c 	.word	0x2000841c
 8009910:	2000841a 	.word	0x2000841a
 8009914:	20008424 	.word	0x20008424
 8009918:	200083e4 	.word	0x200083e4
 800991c:	08013e38 	.word	0x08013e38
 8009920:	08013fec 	.word	0x08013fec
 8009924:	08013e84 	.word	0x08013e84
          goto aborted;
 8009928:	bf00      	nop
    tcp_input_pcb = NULL;
 800992a:	4b27      	ldr	r3, [pc, #156]	@ (80099c8 <tcp_input+0x7f4>)
 800992c:	2200      	movs	r2, #0
 800992e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009930:	4b26      	ldr	r3, [pc, #152]	@ (80099cc <tcp_input+0x7f8>)
 8009932:	2200      	movs	r2, #0
 8009934:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009936:	4b26      	ldr	r3, [pc, #152]	@ (80099d0 <tcp_input+0x7fc>)
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d03f      	beq.n	80099be <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800993e:	4b24      	ldr	r3, [pc, #144]	@ (80099d0 <tcp_input+0x7fc>)
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	4618      	mov	r0, r3
 8009944:	f7fd fc20 	bl	8007188 <pbuf_free>
      inseg.p = NULL;
 8009948:	4b21      	ldr	r3, [pc, #132]	@ (80099d0 <tcp_input+0x7fc>)
 800994a:	2200      	movs	r2, #0
 800994c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800994e:	e036      	b.n	80099be <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009950:	4b20      	ldr	r3, [pc, #128]	@ (80099d4 <tcp_input+0x800>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	899b      	ldrh	r3, [r3, #12]
 8009956:	b29b      	uxth	r3, r3
 8009958:	4618      	mov	r0, r3
 800995a:	f7fc f8b7 	bl	8005acc <lwip_htons>
 800995e:	4603      	mov	r3, r0
 8009960:	b2db      	uxtb	r3, r3
 8009962:	f003 0304 	and.w	r3, r3, #4
 8009966:	2b00      	cmp	r3, #0
 8009968:	d118      	bne.n	800999c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800996a:	4b1b      	ldr	r3, [pc, #108]	@ (80099d8 <tcp_input+0x804>)
 800996c:	6819      	ldr	r1, [r3, #0]
 800996e:	4b1b      	ldr	r3, [pc, #108]	@ (80099dc <tcp_input+0x808>)
 8009970:	881b      	ldrh	r3, [r3, #0]
 8009972:	461a      	mov	r2, r3
 8009974:	4b1a      	ldr	r3, [pc, #104]	@ (80099e0 <tcp_input+0x80c>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800997a:	4b16      	ldr	r3, [pc, #88]	@ (80099d4 <tcp_input+0x800>)
 800997c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800997e:	885b      	ldrh	r3, [r3, #2]
 8009980:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009982:	4a14      	ldr	r2, [pc, #80]	@ (80099d4 <tcp_input+0x800>)
 8009984:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009986:	8812      	ldrh	r2, [r2, #0]
 8009988:	b292      	uxth	r2, r2
 800998a:	9202      	str	r2, [sp, #8]
 800998c:	9301      	str	r3, [sp, #4]
 800998e:	4b15      	ldr	r3, [pc, #84]	@ (80099e4 <tcp_input+0x810>)
 8009990:	9300      	str	r3, [sp, #0]
 8009992:	4b15      	ldr	r3, [pc, #84]	@ (80099e8 <tcp_input+0x814>)
 8009994:	4602      	mov	r2, r0
 8009996:	2000      	movs	r0, #0
 8009998:	f003 fc6e 	bl	800d278 <tcp_rst>
    pbuf_free(p);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f7fd fbf3 	bl	8007188 <pbuf_free>
  return;
 80099a2:	e00c      	b.n	80099be <tcp_input+0x7ea>
    goto dropped;
 80099a4:	bf00      	nop
 80099a6:	e006      	b.n	80099b6 <tcp_input+0x7e2>
    goto dropped;
 80099a8:	bf00      	nop
 80099aa:	e004      	b.n	80099b6 <tcp_input+0x7e2>
    goto dropped;
 80099ac:	bf00      	nop
 80099ae:	e002      	b.n	80099b6 <tcp_input+0x7e2>
      goto dropped;
 80099b0:	bf00      	nop
 80099b2:	e000      	b.n	80099b6 <tcp_input+0x7e2>
      goto dropped;
 80099b4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f7fd fbe6 	bl	8007188 <pbuf_free>
 80099bc:	e000      	b.n	80099c0 <tcp_input+0x7ec>
  return;
 80099be:	bf00      	nop
}
 80099c0:	3724      	adds	r7, #36	@ 0x24
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd90      	pop	{r4, r7, pc}
 80099c6:	bf00      	nop
 80099c8:	20008424 	.word	0x20008424
 80099cc:	20008420 	.word	0x20008420
 80099d0:	200083f0 	.word	0x200083f0
 80099d4:	20008400 	.word	0x20008400
 80099d8:	20008414 	.word	0x20008414
 80099dc:	2000841a 	.word	0x2000841a
 80099e0:	20008410 	.word	0x20008410
 80099e4:	20004e78 	.word	0x20004e78
 80099e8:	20004e7c 	.word	0x20004e7c

080099ec <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d106      	bne.n	8009a08 <tcp_input_delayed_close+0x1c>
 80099fa:	4b17      	ldr	r3, [pc, #92]	@ (8009a58 <tcp_input_delayed_close+0x6c>)
 80099fc:	f240 225a 	movw	r2, #602	@ 0x25a
 8009a00:	4916      	ldr	r1, [pc, #88]	@ (8009a5c <tcp_input_delayed_close+0x70>)
 8009a02:	4817      	ldr	r0, [pc, #92]	@ (8009a60 <tcp_input_delayed_close+0x74>)
 8009a04:	f007 ffd6 	bl	80119b4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8009a08:	4b16      	ldr	r3, [pc, #88]	@ (8009a64 <tcp_input_delayed_close+0x78>)
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	f003 0310 	and.w	r3, r3, #16
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d01c      	beq.n	8009a4e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	8b5b      	ldrh	r3, [r3, #26]
 8009a18:	f003 0310 	and.w	r3, r3, #16
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d10d      	bne.n	8009a3c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d008      	beq.n	8009a3c <tcp_input_delayed_close+0x50>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	6912      	ldr	r2, [r2, #16]
 8009a34:	f06f 010e 	mvn.w	r1, #14
 8009a38:	4610      	mov	r0, r2
 8009a3a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009a3c:	6879      	ldr	r1, [r7, #4]
 8009a3e:	480a      	ldr	r0, [pc, #40]	@ (8009a68 <tcp_input_delayed_close+0x7c>)
 8009a40:	f7ff fa50 	bl	8008ee4 <tcp_pcb_remove>
    tcp_free(pcb);
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f7fd fe3f 	bl	80076c8 <tcp_free>
    return 1;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e000      	b.n	8009a50 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8009a4e:	2300      	movs	r3, #0
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3708      	adds	r7, #8
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	08013e38 	.word	0x08013e38
 8009a5c:	08014008 	.word	0x08014008
 8009a60:	08013e84 	.word	0x08013e84
 8009a64:	2000841d 	.word	0x2000841d
 8009a68:	200083e4 	.word	0x200083e4

08009a6c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009a6c:	b590      	push	{r4, r7, lr}
 8009a6e:	b08b      	sub	sp, #44	@ 0x2c
 8009a70:	af04      	add	r7, sp, #16
 8009a72:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009a74:	4b6f      	ldr	r3, [pc, #444]	@ (8009c34 <tcp_listen_input+0x1c8>)
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	f003 0304 	and.w	r3, r3, #4
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f040 80d2 	bne.w	8009c26 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d106      	bne.n	8009a96 <tcp_listen_input+0x2a>
 8009a88:	4b6b      	ldr	r3, [pc, #428]	@ (8009c38 <tcp_listen_input+0x1cc>)
 8009a8a:	f240 2281 	movw	r2, #641	@ 0x281
 8009a8e:	496b      	ldr	r1, [pc, #428]	@ (8009c3c <tcp_listen_input+0x1d0>)
 8009a90:	486b      	ldr	r0, [pc, #428]	@ (8009c40 <tcp_listen_input+0x1d4>)
 8009a92:	f007 ff8f 	bl	80119b4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009a96:	4b67      	ldr	r3, [pc, #412]	@ (8009c34 <tcp_listen_input+0x1c8>)
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	f003 0310 	and.w	r3, r3, #16
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d019      	beq.n	8009ad6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009aa2:	4b68      	ldr	r3, [pc, #416]	@ (8009c44 <tcp_listen_input+0x1d8>)
 8009aa4:	6819      	ldr	r1, [r3, #0]
 8009aa6:	4b68      	ldr	r3, [pc, #416]	@ (8009c48 <tcp_listen_input+0x1dc>)
 8009aa8:	881b      	ldrh	r3, [r3, #0]
 8009aaa:	461a      	mov	r2, r3
 8009aac:	4b67      	ldr	r3, [pc, #412]	@ (8009c4c <tcp_listen_input+0x1e0>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009ab2:	4b67      	ldr	r3, [pc, #412]	@ (8009c50 <tcp_listen_input+0x1e4>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009ab6:	885b      	ldrh	r3, [r3, #2]
 8009ab8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009aba:	4a65      	ldr	r2, [pc, #404]	@ (8009c50 <tcp_listen_input+0x1e4>)
 8009abc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009abe:	8812      	ldrh	r2, [r2, #0]
 8009ac0:	b292      	uxth	r2, r2
 8009ac2:	9202      	str	r2, [sp, #8]
 8009ac4:	9301      	str	r3, [sp, #4]
 8009ac6:	4b63      	ldr	r3, [pc, #396]	@ (8009c54 <tcp_listen_input+0x1e8>)
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	4b63      	ldr	r3, [pc, #396]	@ (8009c58 <tcp_listen_input+0x1ec>)
 8009acc:	4602      	mov	r2, r0
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f003 fbd2 	bl	800d278 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009ad4:	e0a9      	b.n	8009c2a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8009ad6:	4b57      	ldr	r3, [pc, #348]	@ (8009c34 <tcp_listen_input+0x1c8>)
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	f003 0302 	and.w	r3, r3, #2
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	f000 80a3 	beq.w	8009c2a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	7d5b      	ldrb	r3, [r3, #21]
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f7ff f8e5 	bl	8008cb8 <tcp_alloc>
 8009aee:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d111      	bne.n	8009b1a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	699b      	ldr	r3, [r3, #24]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00a      	beq.n	8009b14 <tcp_listen_input+0xa8>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	699b      	ldr	r3, [r3, #24]
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	6910      	ldr	r0, [r2, #16]
 8009b06:	f04f 32ff 	mov.w	r2, #4294967295
 8009b0a:	2100      	movs	r1, #0
 8009b0c:	4798      	blx	r3
 8009b0e:	4603      	mov	r3, r0
 8009b10:	73bb      	strb	r3, [r7, #14]
      return;
 8009b12:	e08b      	b.n	8009c2c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009b14:	23f0      	movs	r3, #240	@ 0xf0
 8009b16:	73bb      	strb	r3, [r7, #14]
      return;
 8009b18:	e088      	b.n	8009c2c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009b1a:	4b50      	ldr	r3, [pc, #320]	@ (8009c5c <tcp_listen_input+0x1f0>)
 8009b1c:	695a      	ldr	r2, [r3, #20]
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009b22:	4b4e      	ldr	r3, [pc, #312]	@ (8009c5c <tcp_listen_input+0x1f0>)
 8009b24:	691a      	ldr	r2, [r3, #16]
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	8ada      	ldrh	r2, [r3, #22]
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8009b32:	4b47      	ldr	r3, [pc, #284]	@ (8009c50 <tcp_listen_input+0x1e4>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	881b      	ldrh	r3, [r3, #0]
 8009b38:	b29a      	uxth	r2, r3
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	2203      	movs	r2, #3
 8009b42:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009b44:	4b41      	ldr	r3, [pc, #260]	@ (8009c4c <tcp_listen_input+0x1e0>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	1c5a      	adds	r2, r3, #1
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8009b56:	6978      	ldr	r0, [r7, #20]
 8009b58:	f7ff fa58 	bl	800900c <tcp_next_iss>
 8009b5c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	693a      	ldr	r2, [r7, #16]
 8009b62:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	693a      	ldr	r2, [r7, #16]
 8009b68:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	693a      	ldr	r2, [r7, #16]
 8009b6e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	693a      	ldr	r2, [r7, #16]
 8009b74:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009b76:	4b35      	ldr	r3, [pc, #212]	@ (8009c4c <tcp_listen_input+0x1e0>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	1e5a      	subs	r2, r3, #1
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	691a      	ldr	r2, [r3, #16]
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	7a5b      	ldrb	r3, [r3, #9]
 8009b92:	f003 030c 	and.w	r3, r3, #12
 8009b96:	b2da      	uxtb	r2, r3
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	7a1a      	ldrb	r2, [r3, #8]
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009ba4:	4b2e      	ldr	r3, [pc, #184]	@ (8009c60 <tcp_listen_input+0x1f4>)
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	60da      	str	r2, [r3, #12]
 8009bac:	4a2c      	ldr	r2, [pc, #176]	@ (8009c60 <tcp_listen_input+0x1f4>)
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	6013      	str	r3, [r2, #0]
 8009bb2:	f003 fd23 	bl	800d5fc <tcp_timer_needed>
 8009bb6:	4b2b      	ldr	r3, [pc, #172]	@ (8009c64 <tcp_listen_input+0x1f8>)
 8009bb8:	2201      	movs	r2, #1
 8009bba:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009bbc:	6978      	ldr	r0, [r7, #20]
 8009bbe:	f001 fd8b 	bl	800b6d8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009bc2:	4b23      	ldr	r3, [pc, #140]	@ (8009c50 <tcp_listen_input+0x1e4>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	89db      	ldrh	r3, [r3, #14]
 8009bc8:	b29a      	uxth	r2, r3
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	3304      	adds	r3, #4
 8009be4:	4618      	mov	r0, r3
 8009be6:	f005 f8e7 	bl	800edb8 <ip4_route>
 8009bea:	4601      	mov	r1, r0
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	3304      	adds	r3, #4
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	f7ff fa30 	bl	8009058 <tcp_eff_send_mss_netif>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009c00:	2112      	movs	r1, #18
 8009c02:	6978      	ldr	r0, [r7, #20]
 8009c04:	f002 fc96 	bl	800c534 <tcp_enqueue_flags>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8009c0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d004      	beq.n	8009c1e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8009c14:	2100      	movs	r1, #0
 8009c16:	6978      	ldr	r0, [r7, #20]
 8009c18:	f7fd ff80 	bl	8007b1c <tcp_abandon>
      return;
 8009c1c:	e006      	b.n	8009c2c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8009c1e:	6978      	ldr	r0, [r7, #20]
 8009c20:	f002 fd76 	bl	800c710 <tcp_output>
  return;
 8009c24:	e001      	b.n	8009c2a <tcp_listen_input+0x1be>
    return;
 8009c26:	bf00      	nop
 8009c28:	e000      	b.n	8009c2c <tcp_listen_input+0x1c0>
  return;
 8009c2a:	bf00      	nop
}
 8009c2c:	371c      	adds	r7, #28
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd90      	pop	{r4, r7, pc}
 8009c32:	bf00      	nop
 8009c34:	2000841c 	.word	0x2000841c
 8009c38:	08013e38 	.word	0x08013e38
 8009c3c:	08014030 	.word	0x08014030
 8009c40:	08013e84 	.word	0x08013e84
 8009c44:	20008414 	.word	0x20008414
 8009c48:	2000841a 	.word	0x2000841a
 8009c4c:	20008410 	.word	0x20008410
 8009c50:	20008400 	.word	0x20008400
 8009c54:	20004e78 	.word	0x20004e78
 8009c58:	20004e7c 	.word	0x20004e7c
 8009c5c:	20004e68 	.word	0x20004e68
 8009c60:	200083e4 	.word	0x200083e4
 8009c64:	200083ec 	.word	0x200083ec

08009c68 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b086      	sub	sp, #24
 8009c6c:	af04      	add	r7, sp, #16
 8009c6e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009c70:	4b2f      	ldr	r3, [pc, #188]	@ (8009d30 <tcp_timewait_input+0xc8>)
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	f003 0304 	and.w	r3, r3, #4
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d153      	bne.n	8009d24 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d106      	bne.n	8009c90 <tcp_timewait_input+0x28>
 8009c82:	4b2c      	ldr	r3, [pc, #176]	@ (8009d34 <tcp_timewait_input+0xcc>)
 8009c84:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8009c88:	492b      	ldr	r1, [pc, #172]	@ (8009d38 <tcp_timewait_input+0xd0>)
 8009c8a:	482c      	ldr	r0, [pc, #176]	@ (8009d3c <tcp_timewait_input+0xd4>)
 8009c8c:	f007 fe92 	bl	80119b4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009c90:	4b27      	ldr	r3, [pc, #156]	@ (8009d30 <tcp_timewait_input+0xc8>)
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	f003 0302 	and.w	r3, r3, #2
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d02a      	beq.n	8009cf2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009c9c:	4b28      	ldr	r3, [pc, #160]	@ (8009d40 <tcp_timewait_input+0xd8>)
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ca4:	1ad3      	subs	r3, r2, r3
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	db2d      	blt.n	8009d06 <tcp_timewait_input+0x9e>
 8009caa:	4b25      	ldr	r3, [pc, #148]	@ (8009d40 <tcp_timewait_input+0xd8>)
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cb2:	6879      	ldr	r1, [r7, #4]
 8009cb4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009cb6:	440b      	add	r3, r1
 8009cb8:	1ad3      	subs	r3, r2, r3
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	dc23      	bgt.n	8009d06 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009cbe:	4b21      	ldr	r3, [pc, #132]	@ (8009d44 <tcp_timewait_input+0xdc>)
 8009cc0:	6819      	ldr	r1, [r3, #0]
 8009cc2:	4b21      	ldr	r3, [pc, #132]	@ (8009d48 <tcp_timewait_input+0xe0>)
 8009cc4:	881b      	ldrh	r3, [r3, #0]
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8009d40 <tcp_timewait_input+0xd8>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009cce:	4b1f      	ldr	r3, [pc, #124]	@ (8009d4c <tcp_timewait_input+0xe4>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009cd2:	885b      	ldrh	r3, [r3, #2]
 8009cd4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009cd6:	4a1d      	ldr	r2, [pc, #116]	@ (8009d4c <tcp_timewait_input+0xe4>)
 8009cd8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009cda:	8812      	ldrh	r2, [r2, #0]
 8009cdc:	b292      	uxth	r2, r2
 8009cde:	9202      	str	r2, [sp, #8]
 8009ce0:	9301      	str	r3, [sp, #4]
 8009ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8009d50 <tcp_timewait_input+0xe8>)
 8009ce4:	9300      	str	r3, [sp, #0]
 8009ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8009d54 <tcp_timewait_input+0xec>)
 8009ce8:	4602      	mov	r2, r0
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f003 fac4 	bl	800d278 <tcp_rst>
      return;
 8009cf0:	e01b      	b.n	8009d2a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8009cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8009d30 <tcp_timewait_input+0xc8>)
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	f003 0301 	and.w	r3, r3, #1
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d003      	beq.n	8009d06 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8009cfe:	4b16      	ldr	r3, [pc, #88]	@ (8009d58 <tcp_timewait_input+0xf0>)
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8009d06:	4b10      	ldr	r3, [pc, #64]	@ (8009d48 <tcp_timewait_input+0xe0>)
 8009d08:	881b      	ldrh	r3, [r3, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00c      	beq.n	8009d28 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	8b5b      	ldrh	r3, [r3, #26]
 8009d12:	f043 0302 	orr.w	r3, r3, #2
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f002 fcf7 	bl	800c710 <tcp_output>
  }
  return;
 8009d22:	e001      	b.n	8009d28 <tcp_timewait_input+0xc0>
    return;
 8009d24:	bf00      	nop
 8009d26:	e000      	b.n	8009d2a <tcp_timewait_input+0xc2>
  return;
 8009d28:	bf00      	nop
}
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	2000841c 	.word	0x2000841c
 8009d34:	08013e38 	.word	0x08013e38
 8009d38:	08014050 	.word	0x08014050
 8009d3c:	08013e84 	.word	0x08013e84
 8009d40:	20008410 	.word	0x20008410
 8009d44:	20008414 	.word	0x20008414
 8009d48:	2000841a 	.word	0x2000841a
 8009d4c:	20008400 	.word	0x20008400
 8009d50:	20004e78 	.word	0x20004e78
 8009d54:	20004e7c 	.word	0x20004e7c
 8009d58:	200083d8 	.word	0x200083d8

08009d5c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009d5c:	b590      	push	{r4, r7, lr}
 8009d5e:	b08d      	sub	sp, #52	@ 0x34
 8009d60:	af04      	add	r7, sp, #16
 8009d62:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009d64:	2300      	movs	r3, #0
 8009d66:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d106      	bne.n	8009d80 <tcp_process+0x24>
 8009d72:	4b9d      	ldr	r3, [pc, #628]	@ (8009fe8 <tcp_process+0x28c>)
 8009d74:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8009d78:	499c      	ldr	r1, [pc, #624]	@ (8009fec <tcp_process+0x290>)
 8009d7a:	489d      	ldr	r0, [pc, #628]	@ (8009ff0 <tcp_process+0x294>)
 8009d7c:	f007 fe1a 	bl	80119b4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009d80:	4b9c      	ldr	r3, [pc, #624]	@ (8009ff4 <tcp_process+0x298>)
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	f003 0304 	and.w	r3, r3, #4
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d04e      	beq.n	8009e2a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	7d1b      	ldrb	r3, [r3, #20]
 8009d90:	2b02      	cmp	r3, #2
 8009d92:	d108      	bne.n	8009da6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009d98:	4b97      	ldr	r3, [pc, #604]	@ (8009ff8 <tcp_process+0x29c>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d123      	bne.n	8009de8 <tcp_process+0x8c>
        acceptable = 1;
 8009da0:	2301      	movs	r3, #1
 8009da2:	76fb      	strb	r3, [r7, #27]
 8009da4:	e020      	b.n	8009de8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009daa:	4b94      	ldr	r3, [pc, #592]	@ (8009ffc <tcp_process+0x2a0>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d102      	bne.n	8009db8 <tcp_process+0x5c>
        acceptable = 1;
 8009db2:	2301      	movs	r3, #1
 8009db4:	76fb      	strb	r3, [r7, #27]
 8009db6:	e017      	b.n	8009de8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009db8:	4b90      	ldr	r3, [pc, #576]	@ (8009ffc <tcp_process+0x2a0>)
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dc0:	1ad3      	subs	r3, r2, r3
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	db10      	blt.n	8009de8 <tcp_process+0x8c>
 8009dc6:	4b8d      	ldr	r3, [pc, #564]	@ (8009ffc <tcp_process+0x2a0>)
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dce:	6879      	ldr	r1, [r7, #4]
 8009dd0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009dd2:	440b      	add	r3, r1
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	dc06      	bgt.n	8009de8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	8b5b      	ldrh	r3, [r3, #26]
 8009dde:	f043 0302 	orr.w	r3, r3, #2
 8009de2:	b29a      	uxth	r2, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009de8:	7efb      	ldrb	r3, [r7, #27]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d01b      	beq.n	8009e26 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	7d1b      	ldrb	r3, [r3, #20]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d106      	bne.n	8009e04 <tcp_process+0xa8>
 8009df6:	4b7c      	ldr	r3, [pc, #496]	@ (8009fe8 <tcp_process+0x28c>)
 8009df8:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8009dfc:	4980      	ldr	r1, [pc, #512]	@ (800a000 <tcp_process+0x2a4>)
 8009dfe:	487c      	ldr	r0, [pc, #496]	@ (8009ff0 <tcp_process+0x294>)
 8009e00:	f007 fdd8 	bl	80119b4 <iprintf>
      recv_flags |= TF_RESET;
 8009e04:	4b7f      	ldr	r3, [pc, #508]	@ (800a004 <tcp_process+0x2a8>)
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	f043 0308 	orr.w	r3, r3, #8
 8009e0c:	b2da      	uxtb	r2, r3
 8009e0e:	4b7d      	ldr	r3, [pc, #500]	@ (800a004 <tcp_process+0x2a8>)
 8009e10:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	8b5b      	ldrh	r3, [r3, #26]
 8009e16:	f023 0301 	bic.w	r3, r3, #1
 8009e1a:	b29a      	uxth	r2, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009e20:	f06f 030d 	mvn.w	r3, #13
 8009e24:	e37a      	b.n	800a51c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8009e26:	2300      	movs	r3, #0
 8009e28:	e378      	b.n	800a51c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009e2a:	4b72      	ldr	r3, [pc, #456]	@ (8009ff4 <tcp_process+0x298>)
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	f003 0302 	and.w	r3, r3, #2
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d010      	beq.n	8009e58 <tcp_process+0xfc>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	7d1b      	ldrb	r3, [r3, #20]
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	d00c      	beq.n	8009e58 <tcp_process+0xfc>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	7d1b      	ldrb	r3, [r3, #20]
 8009e42:	2b03      	cmp	r3, #3
 8009e44:	d008      	beq.n	8009e58 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	8b5b      	ldrh	r3, [r3, #26]
 8009e4a:	f043 0302 	orr.w	r3, r3, #2
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8009e54:	2300      	movs	r3, #0
 8009e56:	e361      	b.n	800a51c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	8b5b      	ldrh	r3, [r3, #26]
 8009e5c:	f003 0310 	and.w	r3, r3, #16
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d103      	bne.n	8009e6c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009e64:	4b68      	ldr	r3, [pc, #416]	@ (800a008 <tcp_process+0x2ac>)
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f001 fc2b 	bl	800b6d8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	7d1b      	ldrb	r3, [r3, #20]
 8009e86:	3b02      	subs	r3, #2
 8009e88:	2b07      	cmp	r3, #7
 8009e8a:	f200 8337 	bhi.w	800a4fc <tcp_process+0x7a0>
 8009e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e94 <tcp_process+0x138>)
 8009e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e94:	08009eb5 	.word	0x08009eb5
 8009e98:	0800a0e5 	.word	0x0800a0e5
 8009e9c:	0800a25d 	.word	0x0800a25d
 8009ea0:	0800a287 	.word	0x0800a287
 8009ea4:	0800a3ab 	.word	0x0800a3ab
 8009ea8:	0800a25d 	.word	0x0800a25d
 8009eac:	0800a437 	.word	0x0800a437
 8009eb0:	0800a4c7 	.word	0x0800a4c7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009eb4:	4b4f      	ldr	r3, [pc, #316]	@ (8009ff4 <tcp_process+0x298>)
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	f003 0310 	and.w	r3, r3, #16
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	f000 80e4 	beq.w	800a08a <tcp_process+0x32e>
 8009ec2:	4b4c      	ldr	r3, [pc, #304]	@ (8009ff4 <tcp_process+0x298>)
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	f003 0302 	and.w	r3, r3, #2
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	f000 80dd 	beq.w	800a08a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ed4:	1c5a      	adds	r2, r3, #1
 8009ed6:	4b48      	ldr	r3, [pc, #288]	@ (8009ff8 <tcp_process+0x29c>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	f040 80d5 	bne.w	800a08a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009ee0:	4b46      	ldr	r3, [pc, #280]	@ (8009ffc <tcp_process+0x2a0>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	1c5a      	adds	r2, r3, #1
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8009ef2:	4b41      	ldr	r3, [pc, #260]	@ (8009ff8 <tcp_process+0x29c>)
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8009efa:	4b44      	ldr	r3, [pc, #272]	@ (800a00c <tcp_process+0x2b0>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	89db      	ldrh	r3, [r3, #14]
 8009f00:	b29a      	uxth	r2, r3
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009f14:	4b39      	ldr	r3, [pc, #228]	@ (8009ffc <tcp_process+0x2a0>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	1e5a      	subs	r2, r3, #1
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2204      	movs	r2, #4
 8009f22:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	3304      	adds	r3, #4
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f004 ff43 	bl	800edb8 <ip4_route>
 8009f32:	4601      	mov	r1, r0
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	3304      	adds	r3, #4
 8009f38:	461a      	mov	r2, r3
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	f7ff f88c 	bl	8009058 <tcp_eff_send_mss_netif>
 8009f40:	4603      	mov	r3, r0
 8009f42:	461a      	mov	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009f4c:	009a      	lsls	r2, r3, #2
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009f52:	005b      	lsls	r3, r3, #1
 8009f54:	f241 111c 	movw	r1, #4380	@ 0x111c
 8009f58:	428b      	cmp	r3, r1
 8009f5a:	bf38      	it	cc
 8009f5c:	460b      	movcc	r3, r1
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d204      	bcs.n	8009f6c <tcp_process+0x210>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	e00d      	b.n	8009f88 <tcp_process+0x22c>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009f70:	005b      	lsls	r3, r3, #1
 8009f72:	f241 121c 	movw	r2, #4380	@ 0x111c
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d904      	bls.n	8009f84 <tcp_process+0x228>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009f7e:	005b      	lsls	r3, r3, #1
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	e001      	b.n	8009f88 <tcp_process+0x22c>
 8009f84:	f241 131c 	movw	r3, #4380	@ 0x111c
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d106      	bne.n	8009fa6 <tcp_process+0x24a>
 8009f98:	4b13      	ldr	r3, [pc, #76]	@ (8009fe8 <tcp_process+0x28c>)
 8009f9a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8009f9e:	491c      	ldr	r1, [pc, #112]	@ (800a010 <tcp_process+0x2b4>)
 8009fa0:	4813      	ldr	r0, [pc, #76]	@ (8009ff0 <tcp_process+0x294>)
 8009fa2:	f007 fd07 	bl	80119b4 <iprintf>
        --pcb->snd_queuelen;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009fac:	3b01      	subs	r3, #1
 8009fae:	b29a      	uxth	r2, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fba:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d12a      	bne.n	800a018 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009fc6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009fc8:	69fb      	ldr	r3, [r7, #28]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d106      	bne.n	8009fdc <tcp_process+0x280>
 8009fce:	4b06      	ldr	r3, [pc, #24]	@ (8009fe8 <tcp_process+0x28c>)
 8009fd0:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8009fd4:	490f      	ldr	r1, [pc, #60]	@ (800a014 <tcp_process+0x2b8>)
 8009fd6:	4806      	ldr	r0, [pc, #24]	@ (8009ff0 <tcp_process+0x294>)
 8009fd8:	f007 fcec 	bl	80119b4 <iprintf>
          pcb->unsent = rseg->next;
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009fe4:	e01c      	b.n	800a020 <tcp_process+0x2c4>
 8009fe6:	bf00      	nop
 8009fe8:	08013e38 	.word	0x08013e38
 8009fec:	08014070 	.word	0x08014070
 8009ff0:	08013e84 	.word	0x08013e84
 8009ff4:	2000841c 	.word	0x2000841c
 8009ff8:	20008414 	.word	0x20008414
 8009ffc:	20008410 	.word	0x20008410
 800a000:	0801408c 	.word	0x0801408c
 800a004:	2000841d 	.word	0x2000841d
 800a008:	200083d8 	.word	0x200083d8
 800a00c:	20008400 	.word	0x20008400
 800a010:	080140ac 	.word	0x080140ac
 800a014:	080140c4 	.word	0x080140c4
        } else {
          pcb->unacked = rseg->next;
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800a020:	69f8      	ldr	r0, [r7, #28]
 800a022:	f7fe fce0 	bl	80089e6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d104      	bne.n	800a038 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a034:	861a      	strh	r2, [r3, #48]	@ 0x30
 800a036:	e006      	b.n	800a046 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d00a      	beq.n	800a066 <tcp_process+0x30a>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	6910      	ldr	r0, [r2, #16]
 800a05a:	2200      	movs	r2, #0
 800a05c:	6879      	ldr	r1, [r7, #4]
 800a05e:	4798      	blx	r3
 800a060:	4603      	mov	r3, r0
 800a062:	76bb      	strb	r3, [r7, #26]
 800a064:	e001      	b.n	800a06a <tcp_process+0x30e>
 800a066:	2300      	movs	r3, #0
 800a068:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800a06a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a06e:	f113 0f0d 	cmn.w	r3, #13
 800a072:	d102      	bne.n	800a07a <tcp_process+0x31e>
          return ERR_ABRT;
 800a074:	f06f 030c 	mvn.w	r3, #12
 800a078:	e250      	b.n	800a51c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	8b5b      	ldrh	r3, [r3, #26]
 800a07e:	f043 0302 	orr.w	r3, r3, #2
 800a082:	b29a      	uxth	r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800a088:	e23a      	b.n	800a500 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800a08a:	4b98      	ldr	r3, [pc, #608]	@ (800a2ec <tcp_process+0x590>)
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	f003 0310 	and.w	r3, r3, #16
 800a092:	2b00      	cmp	r3, #0
 800a094:	f000 8234 	beq.w	800a500 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a098:	4b95      	ldr	r3, [pc, #596]	@ (800a2f0 <tcp_process+0x594>)
 800a09a:	6819      	ldr	r1, [r3, #0]
 800a09c:	4b95      	ldr	r3, [pc, #596]	@ (800a2f4 <tcp_process+0x598>)
 800a09e:	881b      	ldrh	r3, [r3, #0]
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	4b95      	ldr	r3, [pc, #596]	@ (800a2f8 <tcp_process+0x59c>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a0a8:	4b94      	ldr	r3, [pc, #592]	@ (800a2fc <tcp_process+0x5a0>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0ac:	885b      	ldrh	r3, [r3, #2]
 800a0ae:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a0b0:	4a92      	ldr	r2, [pc, #584]	@ (800a2fc <tcp_process+0x5a0>)
 800a0b2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0b4:	8812      	ldrh	r2, [r2, #0]
 800a0b6:	b292      	uxth	r2, r2
 800a0b8:	9202      	str	r2, [sp, #8]
 800a0ba:	9301      	str	r3, [sp, #4]
 800a0bc:	4b90      	ldr	r3, [pc, #576]	@ (800a300 <tcp_process+0x5a4>)
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	4b90      	ldr	r3, [pc, #576]	@ (800a304 <tcp_process+0x5a8>)
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f003 f8d7 	bl	800d278 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a0d0:	2b05      	cmp	r3, #5
 800a0d2:	f200 8215 	bhi.w	800a500 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f002 fea3 	bl	800ce28 <tcp_rexmit_rto>
      break;
 800a0e2:	e20d      	b.n	800a500 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800a0e4:	4b81      	ldr	r3, [pc, #516]	@ (800a2ec <tcp_process+0x590>)
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	f003 0310 	and.w	r3, r3, #16
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f000 80a1 	beq.w	800a234 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a0f2:	4b7f      	ldr	r3, [pc, #508]	@ (800a2f0 <tcp_process+0x594>)
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0fa:	1ad3      	subs	r3, r2, r3
 800a0fc:	3b01      	subs	r3, #1
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	db7e      	blt.n	800a200 <tcp_process+0x4a4>
 800a102:	4b7b      	ldr	r3, [pc, #492]	@ (800a2f0 <tcp_process+0x594>)
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a10a:	1ad3      	subs	r3, r2, r3
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	dc77      	bgt.n	800a200 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2204      	movs	r2, #4
 800a114:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d102      	bne.n	800a124 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800a11e:	23fa      	movs	r3, #250	@ 0xfa
 800a120:	76bb      	strb	r3, [r7, #26]
 800a122:	e01d      	b.n	800a160 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a128:	699b      	ldr	r3, [r3, #24]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d106      	bne.n	800a13c <tcp_process+0x3e0>
 800a12e:	4b76      	ldr	r3, [pc, #472]	@ (800a308 <tcp_process+0x5ac>)
 800a130:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800a134:	4975      	ldr	r1, [pc, #468]	@ (800a30c <tcp_process+0x5b0>)
 800a136:	4876      	ldr	r0, [pc, #472]	@ (800a310 <tcp_process+0x5b4>)
 800a138:	f007 fc3c 	bl	80119b4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a140:	699b      	ldr	r3, [r3, #24]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d00a      	beq.n	800a15c <tcp_process+0x400>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a14a:	699b      	ldr	r3, [r3, #24]
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	6910      	ldr	r0, [r2, #16]
 800a150:	2200      	movs	r2, #0
 800a152:	6879      	ldr	r1, [r7, #4]
 800a154:	4798      	blx	r3
 800a156:	4603      	mov	r3, r0
 800a158:	76bb      	strb	r3, [r7, #26]
 800a15a:	e001      	b.n	800a160 <tcp_process+0x404>
 800a15c:	23f0      	movs	r3, #240	@ 0xf0
 800a15e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800a160:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d00a      	beq.n	800a17e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800a168:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a16c:	f113 0f0d 	cmn.w	r3, #13
 800a170:	d002      	beq.n	800a178 <tcp_process+0x41c>
              tcp_abort(pcb);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f7fd fd90 	bl	8007c98 <tcp_abort>
            }
            return ERR_ABRT;
 800a178:	f06f 030c 	mvn.w	r3, #12
 800a17c:	e1ce      	b.n	800a51c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 fae0 	bl	800a744 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800a184:	4b63      	ldr	r3, [pc, #396]	@ (800a314 <tcp_process+0x5b8>)
 800a186:	881b      	ldrh	r3, [r3, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d005      	beq.n	800a198 <tcp_process+0x43c>
            recv_acked--;
 800a18c:	4b61      	ldr	r3, [pc, #388]	@ (800a314 <tcp_process+0x5b8>)
 800a18e:	881b      	ldrh	r3, [r3, #0]
 800a190:	3b01      	subs	r3, #1
 800a192:	b29a      	uxth	r2, r3
 800a194:	4b5f      	ldr	r3, [pc, #380]	@ (800a314 <tcp_process+0x5b8>)
 800a196:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a19c:	009a      	lsls	r2, r3, #2
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a1a2:	005b      	lsls	r3, r3, #1
 800a1a4:	f241 111c 	movw	r1, #4380	@ 0x111c
 800a1a8:	428b      	cmp	r3, r1
 800a1aa:	bf38      	it	cc
 800a1ac:	460b      	movcc	r3, r1
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d204      	bcs.n	800a1bc <tcp_process+0x460>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	e00d      	b.n	800a1d8 <tcp_process+0x47c>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a1c0:	005b      	lsls	r3, r3, #1
 800a1c2:	f241 121c 	movw	r2, #4380	@ 0x111c
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d904      	bls.n	800a1d4 <tcp_process+0x478>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a1ce:	005b      	lsls	r3, r3, #1
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	e001      	b.n	800a1d8 <tcp_process+0x47c>
 800a1d4:	f241 131c 	movw	r3, #4380	@ 0x111c
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800a1de:	4b4e      	ldr	r3, [pc, #312]	@ (800a318 <tcp_process+0x5bc>)
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	f003 0320 	and.w	r3, r3, #32
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d037      	beq.n	800a25a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	8b5b      	ldrh	r3, [r3, #26]
 800a1ee:	f043 0302 	orr.w	r3, r3, #2
 800a1f2:	b29a      	uxth	r2, r3
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2207      	movs	r2, #7
 800a1fc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800a1fe:	e02c      	b.n	800a25a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a200:	4b3b      	ldr	r3, [pc, #236]	@ (800a2f0 <tcp_process+0x594>)
 800a202:	6819      	ldr	r1, [r3, #0]
 800a204:	4b3b      	ldr	r3, [pc, #236]	@ (800a2f4 <tcp_process+0x598>)
 800a206:	881b      	ldrh	r3, [r3, #0]
 800a208:	461a      	mov	r2, r3
 800a20a:	4b3b      	ldr	r3, [pc, #236]	@ (800a2f8 <tcp_process+0x59c>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a210:	4b3a      	ldr	r3, [pc, #232]	@ (800a2fc <tcp_process+0x5a0>)
 800a212:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a214:	885b      	ldrh	r3, [r3, #2]
 800a216:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a218:	4a38      	ldr	r2, [pc, #224]	@ (800a2fc <tcp_process+0x5a0>)
 800a21a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a21c:	8812      	ldrh	r2, [r2, #0]
 800a21e:	b292      	uxth	r2, r2
 800a220:	9202      	str	r2, [sp, #8]
 800a222:	9301      	str	r3, [sp, #4]
 800a224:	4b36      	ldr	r3, [pc, #216]	@ (800a300 <tcp_process+0x5a4>)
 800a226:	9300      	str	r3, [sp, #0]
 800a228:	4b36      	ldr	r3, [pc, #216]	@ (800a304 <tcp_process+0x5a8>)
 800a22a:	4602      	mov	r2, r0
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f003 f823 	bl	800d278 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800a232:	e167      	b.n	800a504 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a234:	4b2d      	ldr	r3, [pc, #180]	@ (800a2ec <tcp_process+0x590>)
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	f003 0302 	and.w	r3, r3, #2
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	f000 8161 	beq.w	800a504 <tcp_process+0x7a8>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a246:	1e5a      	subs	r2, r3, #1
 800a248:	4b2b      	ldr	r3, [pc, #172]	@ (800a2f8 <tcp_process+0x59c>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	f040 8159 	bne.w	800a504 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f002 fe0a 	bl	800ce6c <tcp_rexmit>
      break;
 800a258:	e154      	b.n	800a504 <tcp_process+0x7a8>
 800a25a:	e153      	b.n	800a504 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 fa71 	bl	800a744 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a262:	4b2d      	ldr	r3, [pc, #180]	@ (800a318 <tcp_process+0x5bc>)
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	f003 0320 	and.w	r3, r3, #32
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	f000 814c 	beq.w	800a508 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	8b5b      	ldrh	r3, [r3, #26]
 800a274:	f043 0302 	orr.w	r3, r3, #2
 800a278:	b29a      	uxth	r2, r3
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2207      	movs	r2, #7
 800a282:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a284:	e140      	b.n	800a508 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 fa5c 	bl	800a744 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a28c:	4b22      	ldr	r3, [pc, #136]	@ (800a318 <tcp_process+0x5bc>)
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	f003 0320 	and.w	r3, r3, #32
 800a294:	2b00      	cmp	r3, #0
 800a296:	d071      	beq.n	800a37c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a298:	4b14      	ldr	r3, [pc, #80]	@ (800a2ec <tcp_process+0x590>)
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	f003 0310 	and.w	r3, r3, #16
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d060      	beq.n	800a366 <tcp_process+0x60a>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a2a8:	4b11      	ldr	r3, [pc, #68]	@ (800a2f0 <tcp_process+0x594>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d15a      	bne.n	800a366 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d156      	bne.n	800a366 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	8b5b      	ldrh	r3, [r3, #26]
 800a2bc:	f043 0302 	orr.w	r3, r3, #2
 800a2c0:	b29a      	uxth	r2, r3
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f7fe fdbc 	bl	8008e44 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a2cc:	4b13      	ldr	r3, [pc, #76]	@ (800a31c <tcp_process+0x5c0>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d105      	bne.n	800a2e2 <tcp_process+0x586>
 800a2d6:	4b11      	ldr	r3, [pc, #68]	@ (800a31c <tcp_process+0x5c0>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	4a0f      	ldr	r2, [pc, #60]	@ (800a31c <tcp_process+0x5c0>)
 800a2de:	6013      	str	r3, [r2, #0]
 800a2e0:	e02e      	b.n	800a340 <tcp_process+0x5e4>
 800a2e2:	4b0e      	ldr	r3, [pc, #56]	@ (800a31c <tcp_process+0x5c0>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	617b      	str	r3, [r7, #20]
 800a2e8:	e027      	b.n	800a33a <tcp_process+0x5de>
 800a2ea:	bf00      	nop
 800a2ec:	2000841c 	.word	0x2000841c
 800a2f0:	20008414 	.word	0x20008414
 800a2f4:	2000841a 	.word	0x2000841a
 800a2f8:	20008410 	.word	0x20008410
 800a2fc:	20008400 	.word	0x20008400
 800a300:	20004e78 	.word	0x20004e78
 800a304:	20004e7c 	.word	0x20004e7c
 800a308:	08013e38 	.word	0x08013e38
 800a30c:	080140d8 	.word	0x080140d8
 800a310:	08013e84 	.word	0x08013e84
 800a314:	20008418 	.word	0x20008418
 800a318:	2000841d 	.word	0x2000841d
 800a31c:	200083e4 	.word	0x200083e4
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	429a      	cmp	r2, r3
 800a328:	d104      	bne.n	800a334 <tcp_process+0x5d8>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	68da      	ldr	r2, [r3, #12]
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	60da      	str	r2, [r3, #12]
 800a332:	e005      	b.n	800a340 <tcp_process+0x5e4>
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	617b      	str	r3, [r7, #20]
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d1ef      	bne.n	800a320 <tcp_process+0x5c4>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	60da      	str	r2, [r3, #12]
 800a346:	4b77      	ldr	r3, [pc, #476]	@ (800a524 <tcp_process+0x7c8>)
 800a348:	2201      	movs	r2, #1
 800a34a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	220a      	movs	r2, #10
 800a350:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800a352:	4b75      	ldr	r3, [pc, #468]	@ (800a528 <tcp_process+0x7cc>)
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	60da      	str	r2, [r3, #12]
 800a35a:	4a73      	ldr	r2, [pc, #460]	@ (800a528 <tcp_process+0x7cc>)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6013      	str	r3, [r2, #0]
 800a360:	f003 f94c 	bl	800d5fc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800a364:	e0d2      	b.n	800a50c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	8b5b      	ldrh	r3, [r3, #26]
 800a36a:	f043 0302 	orr.w	r3, r3, #2
 800a36e:	b29a      	uxth	r2, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2208      	movs	r2, #8
 800a378:	751a      	strb	r2, [r3, #20]
      break;
 800a37a:	e0c7      	b.n	800a50c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a37c:	4b6b      	ldr	r3, [pc, #428]	@ (800a52c <tcp_process+0x7d0>)
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	f003 0310 	and.w	r3, r3, #16
 800a384:	2b00      	cmp	r3, #0
 800a386:	f000 80c1 	beq.w	800a50c <tcp_process+0x7b0>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a38e:	4b68      	ldr	r3, [pc, #416]	@ (800a530 <tcp_process+0x7d4>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	429a      	cmp	r2, r3
 800a394:	f040 80ba 	bne.w	800a50c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f040 80b5 	bne.w	800a50c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2206      	movs	r2, #6
 800a3a6:	751a      	strb	r2, [r3, #20]
      break;
 800a3a8:	e0b0      	b.n	800a50c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 f9ca 	bl	800a744 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a3b0:	4b60      	ldr	r3, [pc, #384]	@ (800a534 <tcp_process+0x7d8>)
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	f003 0320 	and.w	r3, r3, #32
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	f000 80a9 	beq.w	800a510 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	8b5b      	ldrh	r3, [r3, #26]
 800a3c2:	f043 0302 	orr.w	r3, r3, #2
 800a3c6:	b29a      	uxth	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f7fe fd39 	bl	8008e44 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a3d2:	4b59      	ldr	r3, [pc, #356]	@ (800a538 <tcp_process+0x7dc>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d105      	bne.n	800a3e8 <tcp_process+0x68c>
 800a3dc:	4b56      	ldr	r3, [pc, #344]	@ (800a538 <tcp_process+0x7dc>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	68db      	ldr	r3, [r3, #12]
 800a3e2:	4a55      	ldr	r2, [pc, #340]	@ (800a538 <tcp_process+0x7dc>)
 800a3e4:	6013      	str	r3, [r2, #0]
 800a3e6:	e013      	b.n	800a410 <tcp_process+0x6b4>
 800a3e8:	4b53      	ldr	r3, [pc, #332]	@ (800a538 <tcp_process+0x7dc>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	613b      	str	r3, [r7, #16]
 800a3ee:	e00c      	b.n	800a40a <tcp_process+0x6ae>
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d104      	bne.n	800a404 <tcp_process+0x6a8>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	68da      	ldr	r2, [r3, #12]
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	60da      	str	r2, [r3, #12]
 800a402:	e005      	b.n	800a410 <tcp_process+0x6b4>
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	613b      	str	r3, [r7, #16]
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d1ef      	bne.n	800a3f0 <tcp_process+0x694>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	60da      	str	r2, [r3, #12]
 800a416:	4b43      	ldr	r3, [pc, #268]	@ (800a524 <tcp_process+0x7c8>)
 800a418:	2201      	movs	r2, #1
 800a41a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	220a      	movs	r2, #10
 800a420:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a422:	4b41      	ldr	r3, [pc, #260]	@ (800a528 <tcp_process+0x7cc>)
 800a424:	681a      	ldr	r2, [r3, #0]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	60da      	str	r2, [r3, #12]
 800a42a:	4a3f      	ldr	r2, [pc, #252]	@ (800a528 <tcp_process+0x7cc>)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6013      	str	r3, [r2, #0]
 800a430:	f003 f8e4 	bl	800d5fc <tcp_timer_needed>
      }
      break;
 800a434:	e06c      	b.n	800a510 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 f984 	bl	800a744 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a43c:	4b3b      	ldr	r3, [pc, #236]	@ (800a52c <tcp_process+0x7d0>)
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	f003 0310 	and.w	r3, r3, #16
 800a444:	2b00      	cmp	r3, #0
 800a446:	d065      	beq.n	800a514 <tcp_process+0x7b8>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a44c:	4b38      	ldr	r3, [pc, #224]	@ (800a530 <tcp_process+0x7d4>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	429a      	cmp	r2, r3
 800a452:	d15f      	bne.n	800a514 <tcp_process+0x7b8>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d15b      	bne.n	800a514 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f7fe fcf1 	bl	8008e44 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a462:	4b35      	ldr	r3, [pc, #212]	@ (800a538 <tcp_process+0x7dc>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	429a      	cmp	r2, r3
 800a46a:	d105      	bne.n	800a478 <tcp_process+0x71c>
 800a46c:	4b32      	ldr	r3, [pc, #200]	@ (800a538 <tcp_process+0x7dc>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	4a31      	ldr	r2, [pc, #196]	@ (800a538 <tcp_process+0x7dc>)
 800a474:	6013      	str	r3, [r2, #0]
 800a476:	e013      	b.n	800a4a0 <tcp_process+0x744>
 800a478:	4b2f      	ldr	r3, [pc, #188]	@ (800a538 <tcp_process+0x7dc>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	60fb      	str	r3, [r7, #12]
 800a47e:	e00c      	b.n	800a49a <tcp_process+0x73e>
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	68db      	ldr	r3, [r3, #12]
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	429a      	cmp	r2, r3
 800a488:	d104      	bne.n	800a494 <tcp_process+0x738>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	68da      	ldr	r2, [r3, #12]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	60da      	str	r2, [r3, #12]
 800a492:	e005      	b.n	800a4a0 <tcp_process+0x744>
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	60fb      	str	r3, [r7, #12]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d1ef      	bne.n	800a480 <tcp_process+0x724>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	60da      	str	r2, [r3, #12]
 800a4a6:	4b1f      	ldr	r3, [pc, #124]	@ (800a524 <tcp_process+0x7c8>)
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	220a      	movs	r2, #10
 800a4b0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a4b2:	4b1d      	ldr	r3, [pc, #116]	@ (800a528 <tcp_process+0x7cc>)
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	60da      	str	r2, [r3, #12]
 800a4ba:	4a1b      	ldr	r2, [pc, #108]	@ (800a528 <tcp_process+0x7cc>)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6013      	str	r3, [r2, #0]
 800a4c0:	f003 f89c 	bl	800d5fc <tcp_timer_needed>
      }
      break;
 800a4c4:	e026      	b.n	800a514 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 f93c 	bl	800a744 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a4cc:	4b17      	ldr	r3, [pc, #92]	@ (800a52c <tcp_process+0x7d0>)
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	f003 0310 	and.w	r3, r3, #16
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d01f      	beq.n	800a518 <tcp_process+0x7bc>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a4dc:	4b14      	ldr	r3, [pc, #80]	@ (800a530 <tcp_process+0x7d4>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d119      	bne.n	800a518 <tcp_process+0x7bc>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d115      	bne.n	800a518 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800a4ec:	4b11      	ldr	r3, [pc, #68]	@ (800a534 <tcp_process+0x7d8>)
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	f043 0310 	orr.w	r3, r3, #16
 800a4f4:	b2da      	uxtb	r2, r3
 800a4f6:	4b0f      	ldr	r3, [pc, #60]	@ (800a534 <tcp_process+0x7d8>)
 800a4f8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a4fa:	e00d      	b.n	800a518 <tcp_process+0x7bc>
    default:
      break;
 800a4fc:	bf00      	nop
 800a4fe:	e00c      	b.n	800a51a <tcp_process+0x7be>
      break;
 800a500:	bf00      	nop
 800a502:	e00a      	b.n	800a51a <tcp_process+0x7be>
      break;
 800a504:	bf00      	nop
 800a506:	e008      	b.n	800a51a <tcp_process+0x7be>
      break;
 800a508:	bf00      	nop
 800a50a:	e006      	b.n	800a51a <tcp_process+0x7be>
      break;
 800a50c:	bf00      	nop
 800a50e:	e004      	b.n	800a51a <tcp_process+0x7be>
      break;
 800a510:	bf00      	nop
 800a512:	e002      	b.n	800a51a <tcp_process+0x7be>
      break;
 800a514:	bf00      	nop
 800a516:	e000      	b.n	800a51a <tcp_process+0x7be>
      break;
 800a518:	bf00      	nop
  }
  return ERR_OK;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3724      	adds	r7, #36	@ 0x24
 800a520:	46bd      	mov	sp, r7
 800a522:	bd90      	pop	{r4, r7, pc}
 800a524:	200083ec 	.word	0x200083ec
 800a528:	200083e8 	.word	0x200083e8
 800a52c:	2000841c 	.word	0x2000841c
 800a530:	20008414 	.word	0x20008414
 800a534:	2000841d 	.word	0x2000841d
 800a538:	200083e4 	.word	0x200083e4

0800a53c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800a53c:	b590      	push	{r4, r7, lr}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d106      	bne.n	800a55a <tcp_oos_insert_segment+0x1e>
 800a54c:	4b3b      	ldr	r3, [pc, #236]	@ (800a63c <tcp_oos_insert_segment+0x100>)
 800a54e:	f240 421f 	movw	r2, #1055	@ 0x41f
 800a552:	493b      	ldr	r1, [pc, #236]	@ (800a640 <tcp_oos_insert_segment+0x104>)
 800a554:	483b      	ldr	r0, [pc, #236]	@ (800a644 <tcp_oos_insert_segment+0x108>)
 800a556:	f007 fa2d 	bl	80119b4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	68db      	ldr	r3, [r3, #12]
 800a55e:	899b      	ldrh	r3, [r3, #12]
 800a560:	b29b      	uxth	r3, r3
 800a562:	4618      	mov	r0, r3
 800a564:	f7fb fab2 	bl	8005acc <lwip_htons>
 800a568:	4603      	mov	r3, r0
 800a56a:	b2db      	uxtb	r3, r3
 800a56c:	f003 0301 	and.w	r3, r3, #1
 800a570:	2b00      	cmp	r3, #0
 800a572:	d028      	beq.n	800a5c6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800a574:	6838      	ldr	r0, [r7, #0]
 800a576:	f7fe fa21 	bl	80089bc <tcp_segs_free>
    next = NULL;
 800a57a:	2300      	movs	r3, #0
 800a57c:	603b      	str	r3, [r7, #0]
 800a57e:	e056      	b.n	800a62e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	68db      	ldr	r3, [r3, #12]
 800a584:	899b      	ldrh	r3, [r3, #12]
 800a586:	b29b      	uxth	r3, r3
 800a588:	4618      	mov	r0, r3
 800a58a:	f7fb fa9f 	bl	8005acc <lwip_htons>
 800a58e:	4603      	mov	r3, r0
 800a590:	b2db      	uxtb	r3, r3
 800a592:	f003 0301 	and.w	r3, r3, #1
 800a596:	2b00      	cmp	r3, #0
 800a598:	d00d      	beq.n	800a5b6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	899b      	ldrh	r3, [r3, #12]
 800a5a0:	b29c      	uxth	r4, r3
 800a5a2:	2001      	movs	r0, #1
 800a5a4:	f7fb fa92 	bl	8005acc <lwip_htons>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	4322      	orrs	r2, r4
 800a5b2:	b292      	uxth	r2, r2
 800a5b4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800a5c0:	68f8      	ldr	r0, [r7, #12]
 800a5c2:	f7fe fa10 	bl	80089e6 <tcp_seg_free>
    while (next &&
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d00e      	beq.n	800a5ea <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	891b      	ldrh	r3, [r3, #8]
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	4b1d      	ldr	r3, [pc, #116]	@ (800a648 <tcp_oos_insert_segment+0x10c>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	441a      	add	r2, r3
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	68db      	ldr	r3, [r3, #12]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	6839      	ldr	r1, [r7, #0]
 800a5e0:	8909      	ldrh	r1, [r1, #8]
 800a5e2:	440b      	add	r3, r1
 800a5e4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	daca      	bge.n	800a580 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d01e      	beq.n	800a62e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	891b      	ldrh	r3, [r3, #8]
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	4b14      	ldr	r3, [pc, #80]	@ (800a648 <tcp_oos_insert_segment+0x10c>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	441a      	add	r2, r3
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	1ad3      	subs	r3, r2, r3
    if (next &&
 800a604:	2b00      	cmp	r3, #0
 800a606:	dd12      	ble.n	800a62e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	68db      	ldr	r3, [r3, #12]
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	b29a      	uxth	r2, r3
 800a610:	4b0d      	ldr	r3, [pc, #52]	@ (800a648 <tcp_oos_insert_segment+0x10c>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	b29b      	uxth	r3, r3
 800a616:	1ad3      	subs	r3, r2, r3
 800a618:	b29a      	uxth	r2, r3
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	685a      	ldr	r2, [r3, #4]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	891b      	ldrh	r3, [r3, #8]
 800a626:	4619      	mov	r1, r3
 800a628:	4610      	mov	r0, r2
 800a62a:	f7fc fc27 	bl	8006e7c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	683a      	ldr	r2, [r7, #0]
 800a632:	601a      	str	r2, [r3, #0]
}
 800a634:	bf00      	nop
 800a636:	3714      	adds	r7, #20
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd90      	pop	{r4, r7, pc}
 800a63c:	08013e38 	.word	0x08013e38
 800a640:	080140f8 	.word	0x080140f8
 800a644:	08013e84 	.word	0x08013e84
 800a648:	20008410 	.word	0x20008410

0800a64c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800a64c:	b5b0      	push	{r4, r5, r7, lr}
 800a64e:	b086      	sub	sp, #24
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	607a      	str	r2, [r7, #4]
 800a658:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800a65a:	e03e      	b.n	800a6da <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7fc fe14 	bl	8007298 <pbuf_clen>
 800a670:	4603      	mov	r3, r0
 800a672:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a67a:	8a7a      	ldrh	r2, [r7, #18]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d906      	bls.n	800a68e <tcp_free_acked_segments+0x42>
 800a680:	4b2a      	ldr	r3, [pc, #168]	@ (800a72c <tcp_free_acked_segments+0xe0>)
 800a682:	f240 4257 	movw	r2, #1111	@ 0x457
 800a686:	492a      	ldr	r1, [pc, #168]	@ (800a730 <tcp_free_acked_segments+0xe4>)
 800a688:	482a      	ldr	r0, [pc, #168]	@ (800a734 <tcp_free_acked_segments+0xe8>)
 800a68a:	f007 f993 	bl	80119b4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800a694:	8a7b      	ldrh	r3, [r7, #18]
 800a696:	1ad3      	subs	r3, r2, r3
 800a698:	b29a      	uxth	r2, r3
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	891a      	ldrh	r2, [r3, #8]
 800a6a4:	4b24      	ldr	r3, [pc, #144]	@ (800a738 <tcp_free_acked_segments+0xec>)
 800a6a6:	881b      	ldrh	r3, [r3, #0]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	b29a      	uxth	r2, r3
 800a6ac:	4b22      	ldr	r3, [pc, #136]	@ (800a738 <tcp_free_acked_segments+0xec>)
 800a6ae:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800a6b0:	6978      	ldr	r0, [r7, #20]
 800a6b2:	f7fe f998 	bl	80089e6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d00c      	beq.n	800a6da <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d109      	bne.n	800a6da <tcp_free_acked_segments+0x8e>
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d106      	bne.n	800a6da <tcp_free_acked_segments+0x8e>
 800a6cc:	4b17      	ldr	r3, [pc, #92]	@ (800a72c <tcp_free_acked_segments+0xe0>)
 800a6ce:	f240 4261 	movw	r2, #1121	@ 0x461
 800a6d2:	491a      	ldr	r1, [pc, #104]	@ (800a73c <tcp_free_acked_segments+0xf0>)
 800a6d4:	4817      	ldr	r0, [pc, #92]	@ (800a734 <tcp_free_acked_segments+0xe8>)
 800a6d6:	f007 f96d 	bl	80119b4 <iprintf>
  while (seg_list != NULL &&
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d020      	beq.n	800a722 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	68db      	ldr	r3, [r3, #12]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7fb fa06 	bl	8005af8 <lwip_htonl>
 800a6ec:	4604      	mov	r4, r0
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	891b      	ldrh	r3, [r3, #8]
 800a6f2:	461d      	mov	r5, r3
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	899b      	ldrh	r3, [r3, #12]
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f7fb f9e5 	bl	8005acc <lwip_htons>
 800a702:	4603      	mov	r3, r0
 800a704:	b2db      	uxtb	r3, r3
 800a706:	f003 0303 	and.w	r3, r3, #3
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d001      	beq.n	800a712 <tcp_free_acked_segments+0xc6>
 800a70e:	2301      	movs	r3, #1
 800a710:	e000      	b.n	800a714 <tcp_free_acked_segments+0xc8>
 800a712:	2300      	movs	r3, #0
 800a714:	442b      	add	r3, r5
 800a716:	18e2      	adds	r2, r4, r3
 800a718:	4b09      	ldr	r3, [pc, #36]	@ (800a740 <tcp_free_acked_segments+0xf4>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800a71e:	2b00      	cmp	r3, #0
 800a720:	dd9c      	ble.n	800a65c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800a722:	68bb      	ldr	r3, [r7, #8]
}
 800a724:	4618      	mov	r0, r3
 800a726:	3718      	adds	r7, #24
 800a728:	46bd      	mov	sp, r7
 800a72a:	bdb0      	pop	{r4, r5, r7, pc}
 800a72c:	08013e38 	.word	0x08013e38
 800a730:	08014120 	.word	0x08014120
 800a734:	08013e84 	.word	0x08013e84
 800a738:	20008418 	.word	0x20008418
 800a73c:	08014148 	.word	0x08014148
 800a740:	20008414 	.word	0x20008414

0800a744 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a744:	b5b0      	push	{r4, r5, r7, lr}
 800a746:	b094      	sub	sp, #80	@ 0x50
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800a74c:	2300      	movs	r3, #0
 800a74e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d106      	bne.n	800a764 <tcp_receive+0x20>
 800a756:	4b91      	ldr	r3, [pc, #580]	@ (800a99c <tcp_receive+0x258>)
 800a758:	f240 427b 	movw	r2, #1147	@ 0x47b
 800a75c:	4990      	ldr	r1, [pc, #576]	@ (800a9a0 <tcp_receive+0x25c>)
 800a75e:	4891      	ldr	r0, [pc, #580]	@ (800a9a4 <tcp_receive+0x260>)
 800a760:	f007 f928 	bl	80119b4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	7d1b      	ldrb	r3, [r3, #20]
 800a768:	2b03      	cmp	r3, #3
 800a76a:	d806      	bhi.n	800a77a <tcp_receive+0x36>
 800a76c:	4b8b      	ldr	r3, [pc, #556]	@ (800a99c <tcp_receive+0x258>)
 800a76e:	f240 427c 	movw	r2, #1148	@ 0x47c
 800a772:	498d      	ldr	r1, [pc, #564]	@ (800a9a8 <tcp_receive+0x264>)
 800a774:	488b      	ldr	r0, [pc, #556]	@ (800a9a4 <tcp_receive+0x260>)
 800a776:	f007 f91d 	bl	80119b4 <iprintf>

  if (flags & TCP_ACK) {
 800a77a:	4b8c      	ldr	r3, [pc, #560]	@ (800a9ac <tcp_receive+0x268>)
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	f003 0310 	and.w	r3, r3, #16
 800a782:	2b00      	cmp	r3, #0
 800a784:	f000 8264 	beq.w	800ac50 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a78e:	461a      	mov	r2, r3
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a794:	4413      	add	r3, r2
 800a796:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a79c:	4b84      	ldr	r3, [pc, #528]	@ (800a9b0 <tcp_receive+0x26c>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	1ad3      	subs	r3, r2, r3
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	db1b      	blt.n	800a7de <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a7aa:	4b81      	ldr	r3, [pc, #516]	@ (800a9b0 <tcp_receive+0x26c>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d106      	bne.n	800a7c0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a7b6:	4b7f      	ldr	r3, [pc, #508]	@ (800a9b4 <tcp_receive+0x270>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	1ad3      	subs	r3, r2, r3
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	db0e      	blt.n	800a7de <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a7c4:	4b7b      	ldr	r3, [pc, #492]	@ (800a9b4 <tcp_receive+0x270>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d125      	bne.n	800a818 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a7cc:	4b7a      	ldr	r3, [pc, #488]	@ (800a9b8 <tcp_receive+0x274>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	89db      	ldrh	r3, [r3, #14]
 800a7d2:	b29a      	uxth	r2, r3
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d91c      	bls.n	800a818 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a7de:	4b76      	ldr	r3, [pc, #472]	@ (800a9b8 <tcp_receive+0x274>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	89db      	ldrh	r3, [r3, #14]
 800a7e4:	b29a      	uxth	r2, r3
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d205      	bcs.n	800a808 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800a808:	4b69      	ldr	r3, [pc, #420]	@ (800a9b0 <tcp_receive+0x26c>)
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800a810:	4b68      	ldr	r3, [pc, #416]	@ (800a9b4 <tcp_receive+0x270>)
 800a812:	681a      	ldr	r2, [r3, #0]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a818:	4b66      	ldr	r3, [pc, #408]	@ (800a9b4 <tcp_receive+0x270>)
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a820:	1ad3      	subs	r3, r2, r3
 800a822:	2b00      	cmp	r3, #0
 800a824:	dc58      	bgt.n	800a8d8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800a826:	4b65      	ldr	r3, [pc, #404]	@ (800a9bc <tcp_receive+0x278>)
 800a828:	881b      	ldrh	r3, [r3, #0]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d14b      	bne.n	800a8c6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800a838:	4413      	add	r3, r2
 800a83a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d142      	bne.n	800a8c6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a846:	2b00      	cmp	r3, #0
 800a848:	db3d      	blt.n	800a8c6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a84e:	4b59      	ldr	r3, [pc, #356]	@ (800a9b4 <tcp_receive+0x270>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	429a      	cmp	r2, r3
 800a854:	d137      	bne.n	800a8c6 <tcp_receive+0x182>
              found_dupack = 1;
 800a856:	2301      	movs	r3, #1
 800a858:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a860:	2bff      	cmp	r3, #255	@ 0xff
 800a862:	d007      	beq.n	800a874 <tcp_receive+0x130>
                ++pcb->dupacks;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a86a:	3301      	adds	r3, #1
 800a86c:	b2da      	uxtb	r2, r3
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a87a:	2b03      	cmp	r3, #3
 800a87c:	d91b      	bls.n	800a8b6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a888:	4413      	add	r3, r2
 800a88a:	b29a      	uxth	r2, r3
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a892:	429a      	cmp	r2, r3
 800a894:	d30a      	bcc.n	800a8ac <tcp_receive+0x168>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a8a0:	4413      	add	r3, r2
 800a8a2:	b29a      	uxth	r2, r3
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800a8aa:	e004      	b.n	800a8b6 <tcp_receive+0x172>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a8b2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a8bc:	2b02      	cmp	r3, #2
 800a8be:	d902      	bls.n	800a8c6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f002 fb3f 	bl	800cf44 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a8c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	f040 8161 	bne.w	800ab90 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a8d6:	e15b      	b.n	800ab90 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a8d8:	4b36      	ldr	r3, [pc, #216]	@ (800a9b4 <tcp_receive+0x270>)
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8e0:	1ad3      	subs	r3, r2, r3
 800a8e2:	3b01      	subs	r3, #1
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	f2c0 814e 	blt.w	800ab86 <tcp_receive+0x442>
 800a8ea:	4b32      	ldr	r3, [pc, #200]	@ (800a9b4 <tcp_receive+0x270>)
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8f2:	1ad3      	subs	r3, r2, r3
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	f300 8146 	bgt.w	800ab86 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	8b5b      	ldrh	r3, [r3, #26]
 800a8fe:	f003 0304 	and.w	r3, r3, #4
 800a902:	2b00      	cmp	r3, #0
 800a904:	d010      	beq.n	800a928 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	8b5b      	ldrh	r3, [r3, #26]
 800a90a:	f023 0304 	bic.w	r3, r3, #4
 800a90e:	b29a      	uxth	r2, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a936:	10db      	asrs	r3, r3, #3
 800a938:	b21b      	sxth	r3, r3
 800a93a:	b29a      	uxth	r2, r3
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a942:	b29b      	uxth	r3, r3
 800a944:	4413      	add	r3, r2
 800a946:	b29b      	uxth	r3, r3
 800a948:	b21a      	sxth	r2, r3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a950:	4b18      	ldr	r3, [pc, #96]	@ (800a9b4 <tcp_receive+0x270>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	b29a      	uxth	r2, r3
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a95a:	b29b      	uxth	r3, r3
 800a95c:	1ad3      	subs	r3, r2, r3
 800a95e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2200      	movs	r2, #0
 800a964:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800a968:	4b12      	ldr	r3, [pc, #72]	@ (800a9b4 <tcp_receive+0x270>)
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	7d1b      	ldrb	r3, [r3, #20]
 800a974:	2b03      	cmp	r3, #3
 800a976:	f240 8097 	bls.w	800aaa8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800a986:	429a      	cmp	r2, r3
 800a988:	d245      	bcs.n	800aa16 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	8b5b      	ldrh	r3, [r3, #26]
 800a98e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a992:	2b00      	cmp	r3, #0
 800a994:	d014      	beq.n	800a9c0 <tcp_receive+0x27c>
 800a996:	2301      	movs	r3, #1
 800a998:	e013      	b.n	800a9c2 <tcp_receive+0x27e>
 800a99a:	bf00      	nop
 800a99c:	08013e38 	.word	0x08013e38
 800a9a0:	08014168 	.word	0x08014168
 800a9a4:	08013e84 	.word	0x08013e84
 800a9a8:	08014184 	.word	0x08014184
 800a9ac:	2000841c 	.word	0x2000841c
 800a9b0:	20008410 	.word	0x20008410
 800a9b4:	20008414 	.word	0x20008414
 800a9b8:	20008400 	.word	0x20008400
 800a9bc:	2000841a 	.word	0x2000841a
 800a9c0:	2302      	movs	r3, #2
 800a9c2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a9c6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a9d0:	fb12 f303 	smulbb	r3, r2, r3
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	bf28      	it	cs
 800a9dc:	4613      	movcs	r3, r2
 800a9de:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a9e6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a9e8:	4413      	add	r3, r2
 800a9ea:	b29a      	uxth	r2, r3
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d309      	bcc.n	800aa0a <tcp_receive+0x2c6>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a9fc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a9fe:	4413      	add	r3, r2
 800aa00:	b29a      	uxth	r2, r3
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800aa08:	e04e      	b.n	800aaa8 <tcp_receive+0x364>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aa10:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800aa14:	e048      	b.n	800aaa8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800aa1c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800aa1e:	4413      	add	r3, r2
 800aa20:	b29a      	uxth	r2, r3
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d309      	bcc.n	800aa40 <tcp_receive+0x2fc>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800aa32:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800aa34:	4413      	add	r3, r2
 800aa36:	b29a      	uxth	r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800aa3e:	e004      	b.n	800aa4a <tcp_receive+0x306>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aa46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d326      	bcc.n	800aaa8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800aa66:	1ad3      	subs	r3, r2, r3
 800aa68:	b29a      	uxth	r2, r3
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800aa7a:	4413      	add	r3, r2
 800aa7c:	b29a      	uxth	r2, r3
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d30a      	bcc.n	800aa9e <tcp_receive+0x35a>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800aa92:	4413      	add	r3, r2
 800aa94:	b29a      	uxth	r2, r3
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800aa9c:	e004      	b.n	800aaa8 <tcp_receive+0x364>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aaa4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aab0:	4a98      	ldr	r2, [pc, #608]	@ (800ad14 <tcp_receive+0x5d0>)
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f7ff fdca 	bl	800a64c <tcp_free_acked_segments>
 800aab8:	4602      	mov	r2, r0
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aac6:	4a94      	ldr	r2, [pc, #592]	@ (800ad18 <tcp_receive+0x5d4>)
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f7ff fdbf 	bl	800a64c <tcp_free_acked_segments>
 800aace:	4602      	mov	r2, r0
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d104      	bne.n	800aae6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aae2:	861a      	strh	r2, [r3, #48]	@ 0x30
 800aae4:	e002      	b.n	800aaec <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d103      	bne.n	800ab02 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2200      	movs	r2, #0
 800aafe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800ab08:	4b84      	ldr	r3, [pc, #528]	@ (800ad1c <tcp_receive+0x5d8>)
 800ab0a:	881b      	ldrh	r3, [r3, #0]
 800ab0c:	4413      	add	r3, r2
 800ab0e:	b29a      	uxth	r2, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	8b5b      	ldrh	r3, [r3, #26]
 800ab1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d035      	beq.n	800ab8e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d118      	bne.n	800ab5c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d00c      	beq.n	800ab4c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab3a:	68db      	ldr	r3, [r3, #12]
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7fa ffda 	bl	8005af8 <lwip_htonl>
 800ab44:	4603      	mov	r3, r0
 800ab46:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	dc20      	bgt.n	800ab8e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	8b5b      	ldrh	r3, [r3, #26]
 800ab50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ab54:	b29a      	uxth	r2, r3
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ab5a:	e018      	b.n	800ab8e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab64:	68db      	ldr	r3, [r3, #12]
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7fa ffc5 	bl	8005af8 <lwip_htonl>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	1ae3      	subs	r3, r4, r3
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	dc0b      	bgt.n	800ab8e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	8b5b      	ldrh	r3, [r3, #26]
 800ab7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ab7e:	b29a      	uxth	r2, r3
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ab84:	e003      	b.n	800ab8e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f002 fbc8 	bl	800d31c <tcp_send_empty_ack>
 800ab8c:	e000      	b.n	800ab90 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ab8e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d05b      	beq.n	800ac50 <tcp_receive+0x50c>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab9c:	4b60      	ldr	r3, [pc, #384]	@ (800ad20 <tcp_receive+0x5dc>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	1ad3      	subs	r3, r2, r3
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	da54      	bge.n	800ac50 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800aba6:	4b5f      	ldr	r3, [pc, #380]	@ (800ad24 <tcp_receive+0x5e0>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	b29a      	uxth	r2, r3
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	1ad3      	subs	r3, r2, r3
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800abba:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800abc4:	10db      	asrs	r3, r3, #3
 800abc6:	b21b      	sxth	r3, r3
 800abc8:	b29b      	uxth	r3, r3
 800abca:	1ad3      	subs	r3, r2, r3
 800abcc:	b29b      	uxth	r3, r3
 800abce:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800abd8:	b29a      	uxth	r2, r3
 800abda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800abde:	4413      	add	r3, r2
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	b21a      	sxth	r2, r3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800abe8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800abec:	2b00      	cmp	r3, #0
 800abee:	da05      	bge.n	800abfc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800abf0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800abf4:	425b      	negs	r3, r3
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800abfc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ac06:	109b      	asrs	r3, r3, #2
 800ac08:	b21b      	sxth	r3, r3
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	1ad3      	subs	r3, r2, r3
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ac1a:	b29a      	uxth	r2, r3
 800ac1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ac20:	4413      	add	r3, r2
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	b21a      	sxth	r2, r3
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ac30:	10db      	asrs	r3, r3, #3
 800ac32:	b21b      	sxth	r3, r3
 800ac34:	b29a      	uxth	r2, r3
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	4413      	add	r3, r2
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	b21a      	sxth	r2, r3
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ac50:	4b35      	ldr	r3, [pc, #212]	@ (800ad28 <tcp_receive+0x5e4>)
 800ac52:	881b      	ldrh	r3, [r3, #0]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	f000 84df 	beq.w	800b618 <tcp_receive+0xed4>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	7d1b      	ldrb	r3, [r3, #20]
 800ac5e:	2b06      	cmp	r3, #6
 800ac60:	f200 84da 	bhi.w	800b618 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ac68:	4b30      	ldr	r3, [pc, #192]	@ (800ad2c <tcp_receive+0x5e8>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	1ad3      	subs	r3, r2, r3
 800ac6e:	3b01      	subs	r3, #1
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	f2c0 808f 	blt.w	800ad94 <tcp_receive+0x650>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ac7a:	4b2b      	ldr	r3, [pc, #172]	@ (800ad28 <tcp_receive+0x5e4>)
 800ac7c:	881b      	ldrh	r3, [r3, #0]
 800ac7e:	4619      	mov	r1, r3
 800ac80:	4b2a      	ldr	r3, [pc, #168]	@ (800ad2c <tcp_receive+0x5e8>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	440b      	add	r3, r1
 800ac86:	1ad3      	subs	r3, r2, r3
 800ac88:	3301      	adds	r3, #1
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	f300 8082 	bgt.w	800ad94 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800ac90:	4b27      	ldr	r3, [pc, #156]	@ (800ad30 <tcp_receive+0x5ec>)
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ac9a:	4b24      	ldr	r3, [pc, #144]	@ (800ad2c <tcp_receive+0x5e8>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	1ad3      	subs	r3, r2, r3
 800aca0:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800aca2:	4b23      	ldr	r3, [pc, #140]	@ (800ad30 <tcp_receive+0x5ec>)
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d106      	bne.n	800acb8 <tcp_receive+0x574>
 800acaa:	4b22      	ldr	r3, [pc, #136]	@ (800ad34 <tcp_receive+0x5f0>)
 800acac:	f240 5294 	movw	r2, #1428	@ 0x594
 800acb0:	4921      	ldr	r1, [pc, #132]	@ (800ad38 <tcp_receive+0x5f4>)
 800acb2:	4822      	ldr	r0, [pc, #136]	@ (800ad3c <tcp_receive+0x5f8>)
 800acb4:	f006 fe7e 	bl	80119b4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800acb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acba:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d906      	bls.n	800acd0 <tcp_receive+0x58c>
 800acc2:	4b1c      	ldr	r3, [pc, #112]	@ (800ad34 <tcp_receive+0x5f0>)
 800acc4:	f240 5295 	movw	r2, #1429	@ 0x595
 800acc8:	491d      	ldr	r1, [pc, #116]	@ (800ad40 <tcp_receive+0x5fc>)
 800acca:	481c      	ldr	r0, [pc, #112]	@ (800ad3c <tcp_receive+0x5f8>)
 800accc:	f006 fe72 	bl	80119b4 <iprintf>
      off = (u16_t)off32;
 800acd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800acd6:	4b16      	ldr	r3, [pc, #88]	@ (800ad30 <tcp_receive+0x5ec>)
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	891b      	ldrh	r3, [r3, #8]
 800acdc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d906      	bls.n	800acf2 <tcp_receive+0x5ae>
 800ace4:	4b13      	ldr	r3, [pc, #76]	@ (800ad34 <tcp_receive+0x5f0>)
 800ace6:	f240 5297 	movw	r2, #1431	@ 0x597
 800acea:	4916      	ldr	r1, [pc, #88]	@ (800ad44 <tcp_receive+0x600>)
 800acec:	4813      	ldr	r0, [pc, #76]	@ (800ad3c <tcp_receive+0x5f8>)
 800acee:	f006 fe61 	bl	80119b4 <iprintf>
      inseg.len -= off;
 800acf2:	4b0f      	ldr	r3, [pc, #60]	@ (800ad30 <tcp_receive+0x5ec>)
 800acf4:	891a      	ldrh	r2, [r3, #8]
 800acf6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800acfa:	1ad3      	subs	r3, r2, r3
 800acfc:	b29a      	uxth	r2, r3
 800acfe:	4b0c      	ldr	r3, [pc, #48]	@ (800ad30 <tcp_receive+0x5ec>)
 800ad00:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ad02:	4b0b      	ldr	r3, [pc, #44]	@ (800ad30 <tcp_receive+0x5ec>)
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	891a      	ldrh	r2, [r3, #8]
 800ad08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ad0c:	1ad3      	subs	r3, r2, r3
 800ad0e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800ad10:	e02a      	b.n	800ad68 <tcp_receive+0x624>
 800ad12:	bf00      	nop
 800ad14:	080141a0 	.word	0x080141a0
 800ad18:	080141a8 	.word	0x080141a8
 800ad1c:	20008418 	.word	0x20008418
 800ad20:	20008414 	.word	0x20008414
 800ad24:	200083d8 	.word	0x200083d8
 800ad28:	2000841a 	.word	0x2000841a
 800ad2c:	20008410 	.word	0x20008410
 800ad30:	200083f0 	.word	0x200083f0
 800ad34:	08013e38 	.word	0x08013e38
 800ad38:	080141b0 	.word	0x080141b0
 800ad3c:	08013e84 	.word	0x08013e84
 800ad40:	080141c0 	.word	0x080141c0
 800ad44:	080141d0 	.word	0x080141d0
        off -= p->len;
 800ad48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad4a:	895b      	ldrh	r3, [r3, #10]
 800ad4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ad50:	1ad3      	subs	r3, r2, r3
 800ad52:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ad56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad58:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800ad5a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ad5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad5e:	2200      	movs	r2, #0
 800ad60:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ad62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800ad68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad6a:	895b      	ldrh	r3, [r3, #10]
 800ad6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d8e9      	bhi.n	800ad48 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ad74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ad78:	4619      	mov	r1, r3
 800ad7a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800ad7c:	f7fc f97e 	bl	800707c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad84:	4a90      	ldr	r2, [pc, #576]	@ (800afc8 <tcp_receive+0x884>)
 800ad86:	6013      	str	r3, [r2, #0]
 800ad88:	4b90      	ldr	r3, [pc, #576]	@ (800afcc <tcp_receive+0x888>)
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	4a8e      	ldr	r2, [pc, #568]	@ (800afc8 <tcp_receive+0x884>)
 800ad8e:	6812      	ldr	r2, [r2, #0]
 800ad90:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ad92:	e00d      	b.n	800adb0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ad94:	4b8c      	ldr	r3, [pc, #560]	@ (800afc8 <tcp_receive+0x884>)
 800ad96:	681a      	ldr	r2, [r3, #0]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad9c:	1ad3      	subs	r3, r2, r3
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	da06      	bge.n	800adb0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	8b5b      	ldrh	r3, [r3, #26]
 800ada6:	f043 0302 	orr.w	r3, r3, #2
 800adaa:	b29a      	uxth	r2, r3
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800adb0:	4b85      	ldr	r3, [pc, #532]	@ (800afc8 <tcp_receive+0x884>)
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adb8:	1ad3      	subs	r3, r2, r3
 800adba:	2b00      	cmp	r3, #0
 800adbc:	f2c0 8427 	blt.w	800b60e <tcp_receive+0xeca>
 800adc0:	4b81      	ldr	r3, [pc, #516]	@ (800afc8 <tcp_receive+0x884>)
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adc8:	6879      	ldr	r1, [r7, #4]
 800adca:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800adcc:	440b      	add	r3, r1
 800adce:	1ad3      	subs	r3, r2, r3
 800add0:	3301      	adds	r3, #1
 800add2:	2b00      	cmp	r3, #0
 800add4:	f300 841b 	bgt.w	800b60e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800addc:	4b7a      	ldr	r3, [pc, #488]	@ (800afc8 <tcp_receive+0x884>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	f040 8298 	bne.w	800b316 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ade6:	4b79      	ldr	r3, [pc, #484]	@ (800afcc <tcp_receive+0x888>)
 800ade8:	891c      	ldrh	r4, [r3, #8]
 800adea:	4b78      	ldr	r3, [pc, #480]	@ (800afcc <tcp_receive+0x888>)
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	899b      	ldrh	r3, [r3, #12]
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7fa fe6a 	bl	8005acc <lwip_htons>
 800adf8:	4603      	mov	r3, r0
 800adfa:	b2db      	uxtb	r3, r3
 800adfc:	f003 0303 	and.w	r3, r3, #3
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d001      	beq.n	800ae08 <tcp_receive+0x6c4>
 800ae04:	2301      	movs	r3, #1
 800ae06:	e000      	b.n	800ae0a <tcp_receive+0x6c6>
 800ae08:	2300      	movs	r3, #0
 800ae0a:	4423      	add	r3, r4
 800ae0c:	b29a      	uxth	r2, r3
 800ae0e:	4b70      	ldr	r3, [pc, #448]	@ (800afd0 <tcp_receive+0x88c>)
 800ae10:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ae16:	4b6e      	ldr	r3, [pc, #440]	@ (800afd0 <tcp_receive+0x88c>)
 800ae18:	881b      	ldrh	r3, [r3, #0]
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d274      	bcs.n	800af08 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ae1e:	4b6b      	ldr	r3, [pc, #428]	@ (800afcc <tcp_receive+0x888>)
 800ae20:	68db      	ldr	r3, [r3, #12]
 800ae22:	899b      	ldrh	r3, [r3, #12]
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7fa fe50 	bl	8005acc <lwip_htons>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	f003 0301 	and.w	r3, r3, #1
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d01e      	beq.n	800ae76 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ae38:	4b64      	ldr	r3, [pc, #400]	@ (800afcc <tcp_receive+0x888>)
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	899b      	ldrh	r3, [r3, #12]
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	b21b      	sxth	r3, r3
 800ae42:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ae46:	b21c      	sxth	r4, r3
 800ae48:	4b60      	ldr	r3, [pc, #384]	@ (800afcc <tcp_receive+0x888>)
 800ae4a:	68db      	ldr	r3, [r3, #12]
 800ae4c:	899b      	ldrh	r3, [r3, #12]
 800ae4e:	b29b      	uxth	r3, r3
 800ae50:	4618      	mov	r0, r3
 800ae52:	f7fa fe3b 	bl	8005acc <lwip_htons>
 800ae56:	4603      	mov	r3, r0
 800ae58:	b2db      	uxtb	r3, r3
 800ae5a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	4618      	mov	r0, r3
 800ae62:	f7fa fe33 	bl	8005acc <lwip_htons>
 800ae66:	4603      	mov	r3, r0
 800ae68:	b21b      	sxth	r3, r3
 800ae6a:	4323      	orrs	r3, r4
 800ae6c:	b21a      	sxth	r2, r3
 800ae6e:	4b57      	ldr	r3, [pc, #348]	@ (800afcc <tcp_receive+0x888>)
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	b292      	uxth	r2, r2
 800ae74:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ae7a:	4b54      	ldr	r3, [pc, #336]	@ (800afcc <tcp_receive+0x888>)
 800ae7c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ae7e:	4b53      	ldr	r3, [pc, #332]	@ (800afcc <tcp_receive+0x888>)
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	899b      	ldrh	r3, [r3, #12]
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7fa fe20 	bl	8005acc <lwip_htons>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	f003 0302 	and.w	r3, r3, #2
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d005      	beq.n	800aea4 <tcp_receive+0x760>
            inseg.len -= 1;
 800ae98:	4b4c      	ldr	r3, [pc, #304]	@ (800afcc <tcp_receive+0x888>)
 800ae9a:	891b      	ldrh	r3, [r3, #8]
 800ae9c:	3b01      	subs	r3, #1
 800ae9e:	b29a      	uxth	r2, r3
 800aea0:	4b4a      	ldr	r3, [pc, #296]	@ (800afcc <tcp_receive+0x888>)
 800aea2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800aea4:	4b49      	ldr	r3, [pc, #292]	@ (800afcc <tcp_receive+0x888>)
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	4a48      	ldr	r2, [pc, #288]	@ (800afcc <tcp_receive+0x888>)
 800aeaa:	8912      	ldrh	r2, [r2, #8]
 800aeac:	4611      	mov	r1, r2
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7fb ffe4 	bl	8006e7c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800aeb4:	4b45      	ldr	r3, [pc, #276]	@ (800afcc <tcp_receive+0x888>)
 800aeb6:	891c      	ldrh	r4, [r3, #8]
 800aeb8:	4b44      	ldr	r3, [pc, #272]	@ (800afcc <tcp_receive+0x888>)
 800aeba:	68db      	ldr	r3, [r3, #12]
 800aebc:	899b      	ldrh	r3, [r3, #12]
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7fa fe03 	bl	8005acc <lwip_htons>
 800aec6:	4603      	mov	r3, r0
 800aec8:	b2db      	uxtb	r3, r3
 800aeca:	f003 0303 	and.w	r3, r3, #3
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d001      	beq.n	800aed6 <tcp_receive+0x792>
 800aed2:	2301      	movs	r3, #1
 800aed4:	e000      	b.n	800aed8 <tcp_receive+0x794>
 800aed6:	2300      	movs	r3, #0
 800aed8:	4423      	add	r3, r4
 800aeda:	b29a      	uxth	r2, r3
 800aedc:	4b3c      	ldr	r3, [pc, #240]	@ (800afd0 <tcp_receive+0x88c>)
 800aede:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800aee0:	4b3b      	ldr	r3, [pc, #236]	@ (800afd0 <tcp_receive+0x88c>)
 800aee2:	881b      	ldrh	r3, [r3, #0]
 800aee4:	461a      	mov	r2, r3
 800aee6:	4b38      	ldr	r3, [pc, #224]	@ (800afc8 <tcp_receive+0x884>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	441a      	add	r2, r3
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aef0:	6879      	ldr	r1, [r7, #4]
 800aef2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800aef4:	440b      	add	r3, r1
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d006      	beq.n	800af08 <tcp_receive+0x7c4>
 800aefa:	4b36      	ldr	r3, [pc, #216]	@ (800afd4 <tcp_receive+0x890>)
 800aefc:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800af00:	4935      	ldr	r1, [pc, #212]	@ (800afd8 <tcp_receive+0x894>)
 800af02:	4836      	ldr	r0, [pc, #216]	@ (800afdc <tcp_receive+0x898>)
 800af04:	f006 fd56 	bl	80119b4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f000 80e6 	beq.w	800b0de <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800af12:	4b2e      	ldr	r3, [pc, #184]	@ (800afcc <tcp_receive+0x888>)
 800af14:	68db      	ldr	r3, [r3, #12]
 800af16:	899b      	ldrh	r3, [r3, #12]
 800af18:	b29b      	uxth	r3, r3
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7fa fdd6 	bl	8005acc <lwip_htons>
 800af20:	4603      	mov	r3, r0
 800af22:	b2db      	uxtb	r3, r3
 800af24:	f003 0301 	and.w	r3, r3, #1
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d010      	beq.n	800af4e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800af2c:	e00a      	b.n	800af44 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af32:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800af3e:	68f8      	ldr	r0, [r7, #12]
 800af40:	f7fd fd51 	bl	80089e6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d1f0      	bne.n	800af2e <tcp_receive+0x7ea>
 800af4c:	e0c7      	b.n	800b0de <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af52:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800af54:	e051      	b.n	800affa <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800af56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af58:	68db      	ldr	r3, [r3, #12]
 800af5a:	899b      	ldrh	r3, [r3, #12]
 800af5c:	b29b      	uxth	r3, r3
 800af5e:	4618      	mov	r0, r3
 800af60:	f7fa fdb4 	bl	8005acc <lwip_htons>
 800af64:	4603      	mov	r3, r0
 800af66:	b2db      	uxtb	r3, r3
 800af68:	f003 0301 	and.w	r3, r3, #1
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d03c      	beq.n	800afea <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800af70:	4b16      	ldr	r3, [pc, #88]	@ (800afcc <tcp_receive+0x888>)
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	899b      	ldrh	r3, [r3, #12]
 800af76:	b29b      	uxth	r3, r3
 800af78:	4618      	mov	r0, r3
 800af7a:	f7fa fda7 	bl	8005acc <lwip_htons>
 800af7e:	4603      	mov	r3, r0
 800af80:	b2db      	uxtb	r3, r3
 800af82:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800af86:	2b00      	cmp	r3, #0
 800af88:	d12f      	bne.n	800afea <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800af8a:	4b10      	ldr	r3, [pc, #64]	@ (800afcc <tcp_receive+0x888>)
 800af8c:	68db      	ldr	r3, [r3, #12]
 800af8e:	899b      	ldrh	r3, [r3, #12]
 800af90:	b29c      	uxth	r4, r3
 800af92:	2001      	movs	r0, #1
 800af94:	f7fa fd9a 	bl	8005acc <lwip_htons>
 800af98:	4603      	mov	r3, r0
 800af9a:	461a      	mov	r2, r3
 800af9c:	4b0b      	ldr	r3, [pc, #44]	@ (800afcc <tcp_receive+0x888>)
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	4322      	orrs	r2, r4
 800afa2:	b292      	uxth	r2, r2
 800afa4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800afa6:	4b09      	ldr	r3, [pc, #36]	@ (800afcc <tcp_receive+0x888>)
 800afa8:	891c      	ldrh	r4, [r3, #8]
 800afaa:	4b08      	ldr	r3, [pc, #32]	@ (800afcc <tcp_receive+0x888>)
 800afac:	68db      	ldr	r3, [r3, #12]
 800afae:	899b      	ldrh	r3, [r3, #12]
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7fa fd8a 	bl	8005acc <lwip_htons>
 800afb8:	4603      	mov	r3, r0
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	f003 0303 	and.w	r3, r3, #3
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d00d      	beq.n	800afe0 <tcp_receive+0x89c>
 800afc4:	2301      	movs	r3, #1
 800afc6:	e00c      	b.n	800afe2 <tcp_receive+0x89e>
 800afc8:	20008410 	.word	0x20008410
 800afcc:	200083f0 	.word	0x200083f0
 800afd0:	2000841a 	.word	0x2000841a
 800afd4:	08013e38 	.word	0x08013e38
 800afd8:	080141e0 	.word	0x080141e0
 800afdc:	08013e84 	.word	0x08013e84
 800afe0:	2300      	movs	r3, #0
 800afe2:	4423      	add	r3, r4
 800afe4:	b29a      	uxth	r2, r3
 800afe6:	4b98      	ldr	r3, [pc, #608]	@ (800b248 <tcp_receive+0xb04>)
 800afe8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800afea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afec:	613b      	str	r3, [r7, #16]
              next = next->next;
 800afee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800aff4:	6938      	ldr	r0, [r7, #16]
 800aff6:	f7fd fcf6 	bl	80089e6 <tcp_seg_free>
            while (next &&
 800affa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800affc:	2b00      	cmp	r3, #0
 800affe:	d00e      	beq.n	800b01e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b000:	4b91      	ldr	r3, [pc, #580]	@ (800b248 <tcp_receive+0xb04>)
 800b002:	881b      	ldrh	r3, [r3, #0]
 800b004:	461a      	mov	r2, r3
 800b006:	4b91      	ldr	r3, [pc, #580]	@ (800b24c <tcp_receive+0xb08>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	441a      	add	r2, r3
 800b00c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b014:	8909      	ldrh	r1, [r1, #8]
 800b016:	440b      	add	r3, r1
 800b018:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	da9b      	bge.n	800af56 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b01e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b020:	2b00      	cmp	r3, #0
 800b022:	d059      	beq.n	800b0d8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800b024:	4b88      	ldr	r3, [pc, #544]	@ (800b248 <tcp_receive+0xb04>)
 800b026:	881b      	ldrh	r3, [r3, #0]
 800b028:	461a      	mov	r2, r3
 800b02a:	4b88      	ldr	r3, [pc, #544]	@ (800b24c <tcp_receive+0xb08>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	441a      	add	r2, r3
 800b030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b032:	68db      	ldr	r3, [r3, #12]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b038:	2b00      	cmp	r3, #0
 800b03a:	dd4d      	ble.n	800b0d8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b03c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	b29a      	uxth	r2, r3
 800b044:	4b81      	ldr	r3, [pc, #516]	@ (800b24c <tcp_receive+0xb08>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	b29b      	uxth	r3, r3
 800b04a:	1ad3      	subs	r3, r2, r3
 800b04c:	b29a      	uxth	r2, r3
 800b04e:	4b80      	ldr	r3, [pc, #512]	@ (800b250 <tcp_receive+0xb0c>)
 800b050:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b052:	4b7f      	ldr	r3, [pc, #508]	@ (800b250 <tcp_receive+0xb0c>)
 800b054:	68db      	ldr	r3, [r3, #12]
 800b056:	899b      	ldrh	r3, [r3, #12]
 800b058:	b29b      	uxth	r3, r3
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7fa fd36 	bl	8005acc <lwip_htons>
 800b060:	4603      	mov	r3, r0
 800b062:	b2db      	uxtb	r3, r3
 800b064:	f003 0302 	and.w	r3, r3, #2
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d005      	beq.n	800b078 <tcp_receive+0x934>
                inseg.len -= 1;
 800b06c:	4b78      	ldr	r3, [pc, #480]	@ (800b250 <tcp_receive+0xb0c>)
 800b06e:	891b      	ldrh	r3, [r3, #8]
 800b070:	3b01      	subs	r3, #1
 800b072:	b29a      	uxth	r2, r3
 800b074:	4b76      	ldr	r3, [pc, #472]	@ (800b250 <tcp_receive+0xb0c>)
 800b076:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b078:	4b75      	ldr	r3, [pc, #468]	@ (800b250 <tcp_receive+0xb0c>)
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	4a74      	ldr	r2, [pc, #464]	@ (800b250 <tcp_receive+0xb0c>)
 800b07e:	8912      	ldrh	r2, [r2, #8]
 800b080:	4611      	mov	r1, r2
 800b082:	4618      	mov	r0, r3
 800b084:	f7fb fefa 	bl	8006e7c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b088:	4b71      	ldr	r3, [pc, #452]	@ (800b250 <tcp_receive+0xb0c>)
 800b08a:	891c      	ldrh	r4, [r3, #8]
 800b08c:	4b70      	ldr	r3, [pc, #448]	@ (800b250 <tcp_receive+0xb0c>)
 800b08e:	68db      	ldr	r3, [r3, #12]
 800b090:	899b      	ldrh	r3, [r3, #12]
 800b092:	b29b      	uxth	r3, r3
 800b094:	4618      	mov	r0, r3
 800b096:	f7fa fd19 	bl	8005acc <lwip_htons>
 800b09a:	4603      	mov	r3, r0
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	f003 0303 	and.w	r3, r3, #3
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d001      	beq.n	800b0aa <tcp_receive+0x966>
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	e000      	b.n	800b0ac <tcp_receive+0x968>
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	4423      	add	r3, r4
 800b0ae:	b29a      	uxth	r2, r3
 800b0b0:	4b65      	ldr	r3, [pc, #404]	@ (800b248 <tcp_receive+0xb04>)
 800b0b2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b0b4:	4b64      	ldr	r3, [pc, #400]	@ (800b248 <tcp_receive+0xb04>)
 800b0b6:	881b      	ldrh	r3, [r3, #0]
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	4b64      	ldr	r3, [pc, #400]	@ (800b24c <tcp_receive+0xb08>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	441a      	add	r2, r3
 800b0c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0c2:	68db      	ldr	r3, [r3, #12]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d006      	beq.n	800b0d8 <tcp_receive+0x994>
 800b0ca:	4b62      	ldr	r3, [pc, #392]	@ (800b254 <tcp_receive+0xb10>)
 800b0cc:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800b0d0:	4961      	ldr	r1, [pc, #388]	@ (800b258 <tcp_receive+0xb14>)
 800b0d2:	4862      	ldr	r0, [pc, #392]	@ (800b25c <tcp_receive+0xb18>)
 800b0d4:	f006 fc6e 	bl	80119b4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b0dc:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b0de:	4b5a      	ldr	r3, [pc, #360]	@ (800b248 <tcp_receive+0xb04>)
 800b0e0:	881b      	ldrh	r3, [r3, #0]
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	4b59      	ldr	r3, [pc, #356]	@ (800b24c <tcp_receive+0xb08>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	441a      	add	r2, r3
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b0f2:	4b55      	ldr	r3, [pc, #340]	@ (800b248 <tcp_receive+0xb04>)
 800b0f4:	881b      	ldrh	r3, [r3, #0]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d206      	bcs.n	800b108 <tcp_receive+0x9c4>
 800b0fa:	4b56      	ldr	r3, [pc, #344]	@ (800b254 <tcp_receive+0xb10>)
 800b0fc:	f240 6207 	movw	r2, #1543	@ 0x607
 800b100:	4957      	ldr	r1, [pc, #348]	@ (800b260 <tcp_receive+0xb1c>)
 800b102:	4856      	ldr	r0, [pc, #344]	@ (800b25c <tcp_receive+0xb18>)
 800b104:	f006 fc56 	bl	80119b4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b10c:	4b4e      	ldr	r3, [pc, #312]	@ (800b248 <tcp_receive+0xb04>)
 800b10e:	881b      	ldrh	r3, [r3, #0]
 800b110:	1ad3      	subs	r3, r2, r3
 800b112:	b29a      	uxth	r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f7fc ff3d 	bl	8007f98 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b11e:	4b4c      	ldr	r3, [pc, #304]	@ (800b250 <tcp_receive+0xb0c>)
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	891b      	ldrh	r3, [r3, #8]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d006      	beq.n	800b136 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800b128:	4b49      	ldr	r3, [pc, #292]	@ (800b250 <tcp_receive+0xb0c>)
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	4a4d      	ldr	r2, [pc, #308]	@ (800b264 <tcp_receive+0xb20>)
 800b12e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b130:	4b47      	ldr	r3, [pc, #284]	@ (800b250 <tcp_receive+0xb0c>)
 800b132:	2200      	movs	r2, #0
 800b134:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b136:	4b46      	ldr	r3, [pc, #280]	@ (800b250 <tcp_receive+0xb0c>)
 800b138:	68db      	ldr	r3, [r3, #12]
 800b13a:	899b      	ldrh	r3, [r3, #12]
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	4618      	mov	r0, r3
 800b140:	f7fa fcc4 	bl	8005acc <lwip_htons>
 800b144:	4603      	mov	r3, r0
 800b146:	b2db      	uxtb	r3, r3
 800b148:	f003 0301 	and.w	r3, r3, #1
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	f000 80b8 	beq.w	800b2c2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b152:	4b45      	ldr	r3, [pc, #276]	@ (800b268 <tcp_receive+0xb24>)
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	f043 0320 	orr.w	r3, r3, #32
 800b15a:	b2da      	uxtb	r2, r3
 800b15c:	4b42      	ldr	r3, [pc, #264]	@ (800b268 <tcp_receive+0xb24>)
 800b15e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b160:	e0af      	b.n	800b2c2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b166:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b16c:	68db      	ldr	r3, [r3, #12]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	4a36      	ldr	r2, [pc, #216]	@ (800b24c <tcp_receive+0xb08>)
 800b172:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	891b      	ldrh	r3, [r3, #8]
 800b178:	461c      	mov	r4, r3
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	68db      	ldr	r3, [r3, #12]
 800b17e:	899b      	ldrh	r3, [r3, #12]
 800b180:	b29b      	uxth	r3, r3
 800b182:	4618      	mov	r0, r3
 800b184:	f7fa fca2 	bl	8005acc <lwip_htons>
 800b188:	4603      	mov	r3, r0
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	f003 0303 	and.w	r3, r3, #3
 800b190:	2b00      	cmp	r3, #0
 800b192:	d001      	beq.n	800b198 <tcp_receive+0xa54>
 800b194:	2301      	movs	r3, #1
 800b196:	e000      	b.n	800b19a <tcp_receive+0xa56>
 800b198:	2300      	movs	r3, #0
 800b19a:	191a      	adds	r2, r3, r4
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1a0:	441a      	add	r2, r3
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1aa:	461c      	mov	r4, r3
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	891b      	ldrh	r3, [r3, #8]
 800b1b0:	461d      	mov	r5, r3
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	68db      	ldr	r3, [r3, #12]
 800b1b6:	899b      	ldrh	r3, [r3, #12]
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7fa fc86 	bl	8005acc <lwip_htons>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	f003 0303 	and.w	r3, r3, #3
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d001      	beq.n	800b1d0 <tcp_receive+0xa8c>
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	e000      	b.n	800b1d2 <tcp_receive+0xa8e>
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	442b      	add	r3, r5
 800b1d4:	429c      	cmp	r4, r3
 800b1d6:	d206      	bcs.n	800b1e6 <tcp_receive+0xaa2>
 800b1d8:	4b1e      	ldr	r3, [pc, #120]	@ (800b254 <tcp_receive+0xb10>)
 800b1da:	f240 622b 	movw	r2, #1579	@ 0x62b
 800b1de:	4923      	ldr	r1, [pc, #140]	@ (800b26c <tcp_receive+0xb28>)
 800b1e0:	481e      	ldr	r0, [pc, #120]	@ (800b25c <tcp_receive+0xb18>)
 800b1e2:	f006 fbe7 	bl	80119b4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	891b      	ldrh	r3, [r3, #8]
 800b1ea:	461c      	mov	r4, r3
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	68db      	ldr	r3, [r3, #12]
 800b1f0:	899b      	ldrh	r3, [r3, #12]
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f7fa fc69 	bl	8005acc <lwip_htons>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	f003 0303 	and.w	r3, r3, #3
 800b202:	2b00      	cmp	r3, #0
 800b204:	d001      	beq.n	800b20a <tcp_receive+0xac6>
 800b206:	2301      	movs	r3, #1
 800b208:	e000      	b.n	800b20c <tcp_receive+0xac8>
 800b20a:	2300      	movs	r3, #0
 800b20c:	1919      	adds	r1, r3, r4
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b212:	b28b      	uxth	r3, r1
 800b214:	1ad3      	subs	r3, r2, r3
 800b216:	b29a      	uxth	r2, r3
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f7fc febb 	bl	8007f98 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	891b      	ldrh	r3, [r3, #8]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d028      	beq.n	800b27e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b22c:	4b0d      	ldr	r3, [pc, #52]	@ (800b264 <tcp_receive+0xb20>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d01d      	beq.n	800b270 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800b234:	4b0b      	ldr	r3, [pc, #44]	@ (800b264 <tcp_receive+0xb20>)
 800b236:	681a      	ldr	r2, [r3, #0]
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	4619      	mov	r1, r3
 800b23e:	4610      	mov	r0, r2
 800b240:	f7fc f864 	bl	800730c <pbuf_cat>
 800b244:	e018      	b.n	800b278 <tcp_receive+0xb34>
 800b246:	bf00      	nop
 800b248:	2000841a 	.word	0x2000841a
 800b24c:	20008410 	.word	0x20008410
 800b250:	200083f0 	.word	0x200083f0
 800b254:	08013e38 	.word	0x08013e38
 800b258:	08014218 	.word	0x08014218
 800b25c:	08013e84 	.word	0x08013e84
 800b260:	08014254 	.word	0x08014254
 800b264:	20008420 	.word	0x20008420
 800b268:	2000841d 	.word	0x2000841d
 800b26c:	08014274 	.word	0x08014274
            } else {
              recv_data = cseg->p;
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	4a70      	ldr	r2, [pc, #448]	@ (800b438 <tcp_receive+0xcf4>)
 800b276:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	2200      	movs	r2, #0
 800b27c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	68db      	ldr	r3, [r3, #12]
 800b282:	899b      	ldrh	r3, [r3, #12]
 800b284:	b29b      	uxth	r3, r3
 800b286:	4618      	mov	r0, r3
 800b288:	f7fa fc20 	bl	8005acc <lwip_htons>
 800b28c:	4603      	mov	r3, r0
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	f003 0301 	and.w	r3, r3, #1
 800b294:	2b00      	cmp	r3, #0
 800b296:	d00d      	beq.n	800b2b4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b298:	4b68      	ldr	r3, [pc, #416]	@ (800b43c <tcp_receive+0xcf8>)
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	f043 0320 	orr.w	r3, r3, #32
 800b2a0:	b2da      	uxtb	r2, r3
 800b2a2:	4b66      	ldr	r3, [pc, #408]	@ (800b43c <tcp_receive+0xcf8>)
 800b2a4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	7d1b      	ldrb	r3, [r3, #20]
 800b2aa:	2b04      	cmp	r3, #4
 800b2ac:	d102      	bne.n	800b2b4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2207      	movs	r2, #7
 800b2b2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	681a      	ldr	r2, [r3, #0]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800b2bc:	68b8      	ldr	r0, [r7, #8]
 800b2be:	f7fd fb92 	bl	80089e6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d008      	beq.n	800b2dc <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	685a      	ldr	r2, [r3, #4]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	f43f af43 	beq.w	800b162 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	8b5b      	ldrh	r3, [r3, #26]
 800b2e0:	f003 0301 	and.w	r3, r3, #1
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d00e      	beq.n	800b306 <tcp_receive+0xbc2>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	8b5b      	ldrh	r3, [r3, #26]
 800b2ec:	f023 0301 	bic.w	r3, r3, #1
 800b2f0:	b29a      	uxth	r2, r3
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	835a      	strh	r2, [r3, #26]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	8b5b      	ldrh	r3, [r3, #26]
 800b2fa:	f043 0302 	orr.w	r3, r3, #2
 800b2fe:	b29a      	uxth	r2, r3
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b304:	e187      	b.n	800b616 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	8b5b      	ldrh	r3, [r3, #26]
 800b30a:	f043 0301 	orr.w	r3, r3, #1
 800b30e:	b29a      	uxth	r2, r3
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b314:	e17f      	b.n	800b616 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d106      	bne.n	800b32c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b31e:	4848      	ldr	r0, [pc, #288]	@ (800b440 <tcp_receive+0xcfc>)
 800b320:	f7fd fb7a 	bl	8008a18 <tcp_seg_copy>
 800b324:	4602      	mov	r2, r0
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	675a      	str	r2, [r3, #116]	@ 0x74
 800b32a:	e16c      	b.n	800b606 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800b32c:	2300      	movs	r3, #0
 800b32e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b334:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b336:	e156      	b.n	800b5e6 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800b338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	685a      	ldr	r2, [r3, #4]
 800b33e:	4b41      	ldr	r3, [pc, #260]	@ (800b444 <tcp_receive+0xd00>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	429a      	cmp	r2, r3
 800b344:	d11d      	bne.n	800b382 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800b346:	4b3e      	ldr	r3, [pc, #248]	@ (800b440 <tcp_receive+0xcfc>)
 800b348:	891a      	ldrh	r2, [r3, #8]
 800b34a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b34c:	891b      	ldrh	r3, [r3, #8]
 800b34e:	429a      	cmp	r2, r3
 800b350:	f240 814e 	bls.w	800b5f0 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b354:	483a      	ldr	r0, [pc, #232]	@ (800b440 <tcp_receive+0xcfc>)
 800b356:	f7fd fb5f 	bl	8008a18 <tcp_seg_copy>
 800b35a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	f000 8148 	beq.w	800b5f4 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800b364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b366:	2b00      	cmp	r3, #0
 800b368:	d003      	beq.n	800b372 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800b36a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b36c:	697a      	ldr	r2, [r7, #20]
 800b36e:	601a      	str	r2, [r3, #0]
 800b370:	e002      	b.n	800b378 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	697a      	ldr	r2, [r7, #20]
 800b376:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800b378:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b37a:	6978      	ldr	r0, [r7, #20]
 800b37c:	f7ff f8de 	bl	800a53c <tcp_oos_insert_segment>
                }
                break;
 800b380:	e138      	b.n	800b5f4 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800b382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b384:	2b00      	cmp	r3, #0
 800b386:	d117      	bne.n	800b3b8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800b388:	4b2e      	ldr	r3, [pc, #184]	@ (800b444 <tcp_receive+0xd00>)
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	1ad3      	subs	r3, r2, r3
 800b394:	2b00      	cmp	r3, #0
 800b396:	da57      	bge.n	800b448 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b398:	4829      	ldr	r0, [pc, #164]	@ (800b440 <tcp_receive+0xcfc>)
 800b39a:	f7fd fb3d 	bl	8008a18 <tcp_seg_copy>
 800b39e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800b3a0:	69bb      	ldr	r3, [r7, #24]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	f000 8128 	beq.w	800b5f8 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	69ba      	ldr	r2, [r7, #24]
 800b3ac:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800b3ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b3b0:	69b8      	ldr	r0, [r7, #24]
 800b3b2:	f7ff f8c3 	bl	800a53c <tcp_oos_insert_segment>
                  }
                  break;
 800b3b6:	e11f      	b.n	800b5f8 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800b3b8:	4b22      	ldr	r3, [pc, #136]	@ (800b444 <tcp_receive+0xd00>)
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3be:	68db      	ldr	r3, [r3, #12]
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	1ad3      	subs	r3, r2, r3
 800b3c4:	3b01      	subs	r3, #1
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	db3e      	blt.n	800b448 <tcp_receive+0xd04>
 800b3ca:	4b1e      	ldr	r3, [pc, #120]	@ (800b444 <tcp_receive+0xd00>)
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3d0:	68db      	ldr	r3, [r3, #12]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	1ad3      	subs	r3, r2, r3
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	dc35      	bgt.n	800b448 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b3dc:	4818      	ldr	r0, [pc, #96]	@ (800b440 <tcp_receive+0xcfc>)
 800b3de:	f7fd fb1b 	bl	8008a18 <tcp_seg_copy>
 800b3e2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800b3e4:	69fb      	ldr	r3, [r7, #28]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	f000 8108 	beq.w	800b5fc <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800b3ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3ee:	68db      	ldr	r3, [r3, #12]
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b3f4:	8912      	ldrh	r2, [r2, #8]
 800b3f6:	441a      	add	r2, r3
 800b3f8:	4b12      	ldr	r3, [pc, #72]	@ (800b444 <tcp_receive+0xd00>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	1ad3      	subs	r3, r2, r3
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	dd12      	ble.n	800b428 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800b402:	4b10      	ldr	r3, [pc, #64]	@ (800b444 <tcp_receive+0xd00>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	b29a      	uxth	r2, r3
 800b408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	b29b      	uxth	r3, r3
 800b410:	1ad3      	subs	r3, r2, r3
 800b412:	b29a      	uxth	r2, r3
 800b414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b416:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800b418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b41a:	685a      	ldr	r2, [r3, #4]
 800b41c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b41e:	891b      	ldrh	r3, [r3, #8]
 800b420:	4619      	mov	r1, r3
 800b422:	4610      	mov	r0, r2
 800b424:	f7fb fd2a 	bl	8006e7c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800b428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b42a:	69fa      	ldr	r2, [r7, #28]
 800b42c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800b42e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b430:	69f8      	ldr	r0, [r7, #28]
 800b432:	f7ff f883 	bl	800a53c <tcp_oos_insert_segment>
                  }
                  break;
 800b436:	e0e1      	b.n	800b5fc <tcp_receive+0xeb8>
 800b438:	20008420 	.word	0x20008420
 800b43c:	2000841d 	.word	0x2000841d
 800b440:	200083f0 	.word	0x200083f0
 800b444:	20008410 	.word	0x20008410
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800b448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b44a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800b44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	2b00      	cmp	r3, #0
 800b452:	f040 80c5 	bne.w	800b5e0 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800b456:	4b7f      	ldr	r3, [pc, #508]	@ (800b654 <tcp_receive+0xf10>)
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b45c:	68db      	ldr	r3, [r3, #12]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800b462:	2b00      	cmp	r3, #0
 800b464:	f340 80bc 	ble.w	800b5e0 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b46a:	68db      	ldr	r3, [r3, #12]
 800b46c:	899b      	ldrh	r3, [r3, #12]
 800b46e:	b29b      	uxth	r3, r3
 800b470:	4618      	mov	r0, r3
 800b472:	f7fa fb2b 	bl	8005acc <lwip_htons>
 800b476:	4603      	mov	r3, r0
 800b478:	b2db      	uxtb	r3, r3
 800b47a:	f003 0301 	and.w	r3, r3, #1
 800b47e:	2b00      	cmp	r3, #0
 800b480:	f040 80be 	bne.w	800b600 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800b484:	4874      	ldr	r0, [pc, #464]	@ (800b658 <tcp_receive+0xf14>)
 800b486:	f7fd fac7 	bl	8008a18 <tcp_seg_copy>
 800b48a:	4602      	mov	r2, r0
 800b48c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b48e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800b490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	f000 80b5 	beq.w	800b604 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800b49a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b4a2:	8912      	ldrh	r2, [r2, #8]
 800b4a4:	441a      	add	r2, r3
 800b4a6:	4b6b      	ldr	r3, [pc, #428]	@ (800b654 <tcp_receive+0xf10>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	1ad3      	subs	r3, r2, r3
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	dd12      	ble.n	800b4d6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b4b0:	4b68      	ldr	r3, [pc, #416]	@ (800b654 <tcp_receive+0xf10>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	b29a      	uxth	r2, r3
 800b4b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b8:	68db      	ldr	r3, [r3, #12]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	1ad3      	subs	r3, r2, r3
 800b4c0:	b29a      	uxth	r2, r3
 800b4c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800b4c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c8:	685a      	ldr	r2, [r3, #4]
 800b4ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4cc:	891b      	ldrh	r3, [r3, #8]
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	4610      	mov	r0, r2
 800b4d2:	f7fb fcd3 	bl	8006e7c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800b4d6:	4b61      	ldr	r3, [pc, #388]	@ (800b65c <tcp_receive+0xf18>)
 800b4d8:	881b      	ldrh	r3, [r3, #0]
 800b4da:	461a      	mov	r2, r3
 800b4dc:	4b5d      	ldr	r3, [pc, #372]	@ (800b654 <tcp_receive+0xf10>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	441a      	add	r2, r3
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4e6:	6879      	ldr	r1, [r7, #4]
 800b4e8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b4ea:	440b      	add	r3, r1
 800b4ec:	1ad3      	subs	r3, r2, r3
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	f340 8088 	ble.w	800b604 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b4f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	68db      	ldr	r3, [r3, #12]
 800b4fa:	899b      	ldrh	r3, [r3, #12]
 800b4fc:	b29b      	uxth	r3, r3
 800b4fe:	4618      	mov	r0, r3
 800b500:	f7fa fae4 	bl	8005acc <lwip_htons>
 800b504:	4603      	mov	r3, r0
 800b506:	b2db      	uxtb	r3, r3
 800b508:	f003 0301 	and.w	r3, r3, #1
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d021      	beq.n	800b554 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	899b      	ldrh	r3, [r3, #12]
 800b518:	b29b      	uxth	r3, r3
 800b51a:	b21b      	sxth	r3, r3
 800b51c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b520:	b21c      	sxth	r4, r3
 800b522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	68db      	ldr	r3, [r3, #12]
 800b528:	899b      	ldrh	r3, [r3, #12]
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7fa facd 	bl	8005acc <lwip_htons>
 800b532:	4603      	mov	r3, r0
 800b534:	b2db      	uxtb	r3, r3
 800b536:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7fa fac5 	bl	8005acc <lwip_htons>
 800b542:	4603      	mov	r3, r0
 800b544:	b21b      	sxth	r3, r3
 800b546:	4323      	orrs	r3, r4
 800b548:	b21a      	sxth	r2, r3
 800b54a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	b292      	uxth	r2, r2
 800b552:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b558:	b29a      	uxth	r2, r3
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b55e:	4413      	add	r3, r2
 800b560:	b299      	uxth	r1, r3
 800b562:	4b3c      	ldr	r3, [pc, #240]	@ (800b654 <tcp_receive+0xf10>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	b29a      	uxth	r2, r3
 800b568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	1a8a      	subs	r2, r1, r2
 800b56e:	b292      	uxth	r2, r2
 800b570:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	685a      	ldr	r2, [r3, #4]
 800b578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	891b      	ldrh	r3, [r3, #8]
 800b57e:	4619      	mov	r1, r3
 800b580:	4610      	mov	r0, r2
 800b582:	f7fb fc7b 	bl	8006e7c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	891c      	ldrh	r4, [r3, #8]
 800b58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	68db      	ldr	r3, [r3, #12]
 800b592:	899b      	ldrh	r3, [r3, #12]
 800b594:	b29b      	uxth	r3, r3
 800b596:	4618      	mov	r0, r3
 800b598:	f7fa fa98 	bl	8005acc <lwip_htons>
 800b59c:	4603      	mov	r3, r0
 800b59e:	b2db      	uxtb	r3, r3
 800b5a0:	f003 0303 	and.w	r3, r3, #3
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d001      	beq.n	800b5ac <tcp_receive+0xe68>
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	e000      	b.n	800b5ae <tcp_receive+0xe6a>
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	4423      	add	r3, r4
 800b5b0:	b29a      	uxth	r2, r3
 800b5b2:	4b2a      	ldr	r3, [pc, #168]	@ (800b65c <tcp_receive+0xf18>)
 800b5b4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b5b6:	4b29      	ldr	r3, [pc, #164]	@ (800b65c <tcp_receive+0xf18>)
 800b5b8:	881b      	ldrh	r3, [r3, #0]
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	4b25      	ldr	r3, [pc, #148]	@ (800b654 <tcp_receive+0xf10>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	441a      	add	r2, r3
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5c6:	6879      	ldr	r1, [r7, #4]
 800b5c8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b5ca:	440b      	add	r3, r1
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d019      	beq.n	800b604 <tcp_receive+0xec0>
 800b5d0:	4b23      	ldr	r3, [pc, #140]	@ (800b660 <tcp_receive+0xf1c>)
 800b5d2:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800b5d6:	4923      	ldr	r1, [pc, #140]	@ (800b664 <tcp_receive+0xf20>)
 800b5d8:	4823      	ldr	r0, [pc, #140]	@ (800b668 <tcp_receive+0xf24>)
 800b5da:	f006 f9eb 	bl	80119b4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800b5de:	e011      	b.n	800b604 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b5e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b5e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	f47f aea5 	bne.w	800b338 <tcp_receive+0xbf4>
 800b5ee:	e00a      	b.n	800b606 <tcp_receive+0xec2>
                break;
 800b5f0:	bf00      	nop
 800b5f2:	e008      	b.n	800b606 <tcp_receive+0xec2>
                break;
 800b5f4:	bf00      	nop
 800b5f6:	e006      	b.n	800b606 <tcp_receive+0xec2>
                  break;
 800b5f8:	bf00      	nop
 800b5fa:	e004      	b.n	800b606 <tcp_receive+0xec2>
                  break;
 800b5fc:	bf00      	nop
 800b5fe:	e002      	b.n	800b606 <tcp_receive+0xec2>
                  break;
 800b600:	bf00      	nop
 800b602:	e000      	b.n	800b606 <tcp_receive+0xec2>
                break;
 800b604:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f001 fe88 	bl	800d31c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800b60c:	e003      	b.n	800b616 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f001 fe84 	bl	800d31c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b614:	e01a      	b.n	800b64c <tcp_receive+0xf08>
 800b616:	e019      	b.n	800b64c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b618:	4b0e      	ldr	r3, [pc, #56]	@ (800b654 <tcp_receive+0xf10>)
 800b61a:	681a      	ldr	r2, [r3, #0]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b620:	1ad3      	subs	r3, r2, r3
 800b622:	2b00      	cmp	r3, #0
 800b624:	db0a      	blt.n	800b63c <tcp_receive+0xef8>
 800b626:	4b0b      	ldr	r3, [pc, #44]	@ (800b654 <tcp_receive+0xf10>)
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b62e:	6879      	ldr	r1, [r7, #4]
 800b630:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b632:	440b      	add	r3, r1
 800b634:	1ad3      	subs	r3, r2, r3
 800b636:	3301      	adds	r3, #1
 800b638:	2b00      	cmp	r3, #0
 800b63a:	dd07      	ble.n	800b64c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	8b5b      	ldrh	r3, [r3, #26]
 800b640:	f043 0302 	orr.w	r3, r3, #2
 800b644:	b29a      	uxth	r2, r3
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800b64a:	e7ff      	b.n	800b64c <tcp_receive+0xf08>
 800b64c:	bf00      	nop
 800b64e:	3750      	adds	r7, #80	@ 0x50
 800b650:	46bd      	mov	sp, r7
 800b652:	bdb0      	pop	{r4, r5, r7, pc}
 800b654:	20008410 	.word	0x20008410
 800b658:	200083f0 	.word	0x200083f0
 800b65c:	2000841a 	.word	0x2000841a
 800b660:	08013e38 	.word	0x08013e38
 800b664:	080141e0 	.word	0x080141e0
 800b668:	08013e84 	.word	0x08013e84

0800b66c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800b672:	4b15      	ldr	r3, [pc, #84]	@ (800b6c8 <tcp_get_next_optbyte+0x5c>)
 800b674:	881b      	ldrh	r3, [r3, #0]
 800b676:	1c5a      	adds	r2, r3, #1
 800b678:	b291      	uxth	r1, r2
 800b67a:	4a13      	ldr	r2, [pc, #76]	@ (800b6c8 <tcp_get_next_optbyte+0x5c>)
 800b67c:	8011      	strh	r1, [r2, #0]
 800b67e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b680:	4b12      	ldr	r3, [pc, #72]	@ (800b6cc <tcp_get_next_optbyte+0x60>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d004      	beq.n	800b692 <tcp_get_next_optbyte+0x26>
 800b688:	4b11      	ldr	r3, [pc, #68]	@ (800b6d0 <tcp_get_next_optbyte+0x64>)
 800b68a:	881b      	ldrh	r3, [r3, #0]
 800b68c:	88fa      	ldrh	r2, [r7, #6]
 800b68e:	429a      	cmp	r2, r3
 800b690:	d208      	bcs.n	800b6a4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800b692:	4b10      	ldr	r3, [pc, #64]	@ (800b6d4 <tcp_get_next_optbyte+0x68>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	3314      	adds	r3, #20
 800b698:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800b69a:	88fb      	ldrh	r3, [r7, #6]
 800b69c:	683a      	ldr	r2, [r7, #0]
 800b69e:	4413      	add	r3, r2
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	e00b      	b.n	800b6bc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800b6a4:	88fb      	ldrh	r3, [r7, #6]
 800b6a6:	b2da      	uxtb	r2, r3
 800b6a8:	4b09      	ldr	r3, [pc, #36]	@ (800b6d0 <tcp_get_next_optbyte+0x64>)
 800b6aa:	881b      	ldrh	r3, [r3, #0]
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	1ad3      	subs	r3, r2, r3
 800b6b0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800b6b2:	4b06      	ldr	r3, [pc, #24]	@ (800b6cc <tcp_get_next_optbyte+0x60>)
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	797b      	ldrb	r3, [r7, #5]
 800b6b8:	4413      	add	r3, r2
 800b6ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	370c      	adds	r7, #12
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr
 800b6c8:	2000840c 	.word	0x2000840c
 800b6cc:	20008408 	.word	0x20008408
 800b6d0:	20008406 	.word	0x20008406
 800b6d4:	20008400 	.word	0x20008400

0800b6d8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d106      	bne.n	800b6f4 <tcp_parseopt+0x1c>
 800b6e6:	4b32      	ldr	r3, [pc, #200]	@ (800b7b0 <tcp_parseopt+0xd8>)
 800b6e8:	f240 727d 	movw	r2, #1917	@ 0x77d
 800b6ec:	4931      	ldr	r1, [pc, #196]	@ (800b7b4 <tcp_parseopt+0xdc>)
 800b6ee:	4832      	ldr	r0, [pc, #200]	@ (800b7b8 <tcp_parseopt+0xe0>)
 800b6f0:	f006 f960 	bl	80119b4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b6f4:	4b31      	ldr	r3, [pc, #196]	@ (800b7bc <tcp_parseopt+0xe4>)
 800b6f6:	881b      	ldrh	r3, [r3, #0]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d056      	beq.n	800b7aa <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b6fc:	4b30      	ldr	r3, [pc, #192]	@ (800b7c0 <tcp_parseopt+0xe8>)
 800b6fe:	2200      	movs	r2, #0
 800b700:	801a      	strh	r2, [r3, #0]
 800b702:	e046      	b.n	800b792 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800b704:	f7ff ffb2 	bl	800b66c <tcp_get_next_optbyte>
 800b708:	4603      	mov	r3, r0
 800b70a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b70c:	7bfb      	ldrb	r3, [r7, #15]
 800b70e:	2b02      	cmp	r3, #2
 800b710:	d006      	beq.n	800b720 <tcp_parseopt+0x48>
 800b712:	2b02      	cmp	r3, #2
 800b714:	dc2a      	bgt.n	800b76c <tcp_parseopt+0x94>
 800b716:	2b00      	cmp	r3, #0
 800b718:	d042      	beq.n	800b7a0 <tcp_parseopt+0xc8>
 800b71a:	2b01      	cmp	r3, #1
 800b71c:	d038      	beq.n	800b790 <tcp_parseopt+0xb8>
 800b71e:	e025      	b.n	800b76c <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b720:	f7ff ffa4 	bl	800b66c <tcp_get_next_optbyte>
 800b724:	4603      	mov	r3, r0
 800b726:	2b04      	cmp	r3, #4
 800b728:	d13c      	bne.n	800b7a4 <tcp_parseopt+0xcc>
 800b72a:	4b25      	ldr	r3, [pc, #148]	@ (800b7c0 <tcp_parseopt+0xe8>)
 800b72c:	881b      	ldrh	r3, [r3, #0]
 800b72e:	3301      	adds	r3, #1
 800b730:	4a22      	ldr	r2, [pc, #136]	@ (800b7bc <tcp_parseopt+0xe4>)
 800b732:	8812      	ldrh	r2, [r2, #0]
 800b734:	4293      	cmp	r3, r2
 800b736:	da35      	bge.n	800b7a4 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b738:	f7ff ff98 	bl	800b66c <tcp_get_next_optbyte>
 800b73c:	4603      	mov	r3, r0
 800b73e:	021b      	lsls	r3, r3, #8
 800b740:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800b742:	f7ff ff93 	bl	800b66c <tcp_get_next_optbyte>
 800b746:	4603      	mov	r3, r0
 800b748:	461a      	mov	r2, r3
 800b74a:	89bb      	ldrh	r3, [r7, #12]
 800b74c:	4313      	orrs	r3, r2
 800b74e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b750:	89bb      	ldrh	r3, [r7, #12]
 800b752:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800b756:	d804      	bhi.n	800b762 <tcp_parseopt+0x8a>
 800b758:	89bb      	ldrh	r3, [r7, #12]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d001      	beq.n	800b762 <tcp_parseopt+0x8a>
 800b75e:	89ba      	ldrh	r2, [r7, #12]
 800b760:	e001      	b.n	800b766 <tcp_parseopt+0x8e>
 800b762:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800b76a:	e012      	b.n	800b792 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800b76c:	f7ff ff7e 	bl	800b66c <tcp_get_next_optbyte>
 800b770:	4603      	mov	r3, r0
 800b772:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800b774:	7afb      	ldrb	r3, [r7, #11]
 800b776:	2b01      	cmp	r3, #1
 800b778:	d916      	bls.n	800b7a8 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800b77a:	7afb      	ldrb	r3, [r7, #11]
 800b77c:	b29a      	uxth	r2, r3
 800b77e:	4b10      	ldr	r3, [pc, #64]	@ (800b7c0 <tcp_parseopt+0xe8>)
 800b780:	881b      	ldrh	r3, [r3, #0]
 800b782:	4413      	add	r3, r2
 800b784:	b29b      	uxth	r3, r3
 800b786:	3b02      	subs	r3, #2
 800b788:	b29a      	uxth	r2, r3
 800b78a:	4b0d      	ldr	r3, [pc, #52]	@ (800b7c0 <tcp_parseopt+0xe8>)
 800b78c:	801a      	strh	r2, [r3, #0]
 800b78e:	e000      	b.n	800b792 <tcp_parseopt+0xba>
          break;
 800b790:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b792:	4b0b      	ldr	r3, [pc, #44]	@ (800b7c0 <tcp_parseopt+0xe8>)
 800b794:	881a      	ldrh	r2, [r3, #0]
 800b796:	4b09      	ldr	r3, [pc, #36]	@ (800b7bc <tcp_parseopt+0xe4>)
 800b798:	881b      	ldrh	r3, [r3, #0]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d3b2      	bcc.n	800b704 <tcp_parseopt+0x2c>
 800b79e:	e004      	b.n	800b7aa <tcp_parseopt+0xd2>
          return;
 800b7a0:	bf00      	nop
 800b7a2:	e002      	b.n	800b7aa <tcp_parseopt+0xd2>
            return;
 800b7a4:	bf00      	nop
 800b7a6:	e000      	b.n	800b7aa <tcp_parseopt+0xd2>
            return;
 800b7a8:	bf00      	nop
      }
    }
  }
}
 800b7aa:	3710      	adds	r7, #16
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	08013e38 	.word	0x08013e38
 800b7b4:	0801429c 	.word	0x0801429c
 800b7b8:	08013e84 	.word	0x08013e84
 800b7bc:	20008404 	.word	0x20008404
 800b7c0:	2000840c 	.word	0x2000840c

0800b7c4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b7c8:	4b05      	ldr	r3, [pc, #20]	@ (800b7e0 <tcp_trigger_input_pcb_close+0x1c>)
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	f043 0310 	orr.w	r3, r3, #16
 800b7d0:	b2da      	uxtb	r2, r3
 800b7d2:	4b03      	ldr	r3, [pc, #12]	@ (800b7e0 <tcp_trigger_input_pcb_close+0x1c>)
 800b7d4:	701a      	strb	r2, [r3, #0]
}
 800b7d6:	bf00      	nop
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr
 800b7e0:	2000841d 	.word	0x2000841d

0800b7e4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	60b9      	str	r1, [r7, #8]
 800b7ee:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d00a      	beq.n	800b80c <tcp_route+0x28>
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	7a1b      	ldrb	r3, [r3, #8]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d006      	beq.n	800b80c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	7a1b      	ldrb	r3, [r3, #8]
 800b802:	4618      	mov	r0, r3
 800b804:	f7fb f960 	bl	8006ac8 <netif_get_by_index>
 800b808:	4603      	mov	r3, r0
 800b80a:	e003      	b.n	800b814 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f003 fad3 	bl	800edb8 <ip4_route>
 800b812:	4603      	mov	r3, r0
  }
}
 800b814:	4618      	mov	r0, r3
 800b816:	3710      	adds	r7, #16
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b81c:	b590      	push	{r4, r7, lr}
 800b81e:	b087      	sub	sp, #28
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	603b      	str	r3, [r7, #0]
 800b828:	4613      	mov	r3, r2
 800b82a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d105      	bne.n	800b83e <tcp_create_segment+0x22>
 800b832:	4b43      	ldr	r3, [pc, #268]	@ (800b940 <tcp_create_segment+0x124>)
 800b834:	22a3      	movs	r2, #163	@ 0xa3
 800b836:	4943      	ldr	r1, [pc, #268]	@ (800b944 <tcp_create_segment+0x128>)
 800b838:	4843      	ldr	r0, [pc, #268]	@ (800b948 <tcp_create_segment+0x12c>)
 800b83a:	f006 f8bb 	bl	80119b4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d105      	bne.n	800b850 <tcp_create_segment+0x34>
 800b844:	4b3e      	ldr	r3, [pc, #248]	@ (800b940 <tcp_create_segment+0x124>)
 800b846:	22a4      	movs	r2, #164	@ 0xa4
 800b848:	4940      	ldr	r1, [pc, #256]	@ (800b94c <tcp_create_segment+0x130>)
 800b84a:	483f      	ldr	r0, [pc, #252]	@ (800b948 <tcp_create_segment+0x12c>)
 800b84c:	f006 f8b2 	bl	80119b4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b850:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b854:	009b      	lsls	r3, r3, #2
 800b856:	b2db      	uxtb	r3, r3
 800b858:	f003 0304 	and.w	r3, r3, #4
 800b85c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b85e:	2003      	movs	r0, #3
 800b860:	f7fa fdac 	bl	80063bc <memp_malloc>
 800b864:	6138      	str	r0, [r7, #16]
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d104      	bne.n	800b876 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b86c:	68b8      	ldr	r0, [r7, #8]
 800b86e:	f7fb fc8b 	bl	8007188 <pbuf_free>
    return NULL;
 800b872:	2300      	movs	r3, #0
 800b874:	e060      	b.n	800b938 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800b87c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	2200      	movs	r2, #0
 800b882:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	68ba      	ldr	r2, [r7, #8]
 800b888:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	891a      	ldrh	r2, [r3, #8]
 800b88e:	7dfb      	ldrb	r3, [r7, #23]
 800b890:	b29b      	uxth	r3, r3
 800b892:	429a      	cmp	r2, r3
 800b894:	d205      	bcs.n	800b8a2 <tcp_create_segment+0x86>
 800b896:	4b2a      	ldr	r3, [pc, #168]	@ (800b940 <tcp_create_segment+0x124>)
 800b898:	22b0      	movs	r2, #176	@ 0xb0
 800b89a:	492d      	ldr	r1, [pc, #180]	@ (800b950 <tcp_create_segment+0x134>)
 800b89c:	482a      	ldr	r0, [pc, #168]	@ (800b948 <tcp_create_segment+0x12c>)
 800b89e:	f006 f889 	bl	80119b4 <iprintf>
  seg->len = p->tot_len - optlen;
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	891a      	ldrh	r2, [r3, #8]
 800b8a6:	7dfb      	ldrb	r3, [r7, #23]
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	1ad3      	subs	r3, r2, r3
 800b8ac:	b29a      	uxth	r2, r3
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b8b2:	2114      	movs	r1, #20
 800b8b4:	68b8      	ldr	r0, [r7, #8]
 800b8b6:	f7fb fbd1 	bl	800705c <pbuf_add_header>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d004      	beq.n	800b8ca <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b8c0:	6938      	ldr	r0, [r7, #16]
 800b8c2:	f7fd f890 	bl	80089e6 <tcp_seg_free>
    return NULL;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	e036      	b.n	800b938 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	685b      	ldr	r3, [r3, #4]
 800b8ce:	685a      	ldr	r2, [r3, #4]
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	8ada      	ldrh	r2, [r3, #22]
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	68dc      	ldr	r4, [r3, #12]
 800b8dc:	4610      	mov	r0, r2
 800b8de:	f7fa f8f5 	bl	8005acc <lwip_htons>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	8b1a      	ldrh	r2, [r3, #24]
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	68dc      	ldr	r4, [r3, #12]
 800b8ee:	4610      	mov	r0, r2
 800b8f0:	f7fa f8ec 	bl	8005acc <lwip_htons>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	68dc      	ldr	r4, [r3, #12]
 800b8fc:	6838      	ldr	r0, [r7, #0]
 800b8fe:	f7fa f8fb 	bl	8005af8 <lwip_htonl>
 800b902:	4603      	mov	r3, r0
 800b904:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b906:	7dfb      	ldrb	r3, [r7, #23]
 800b908:	089b      	lsrs	r3, r3, #2
 800b90a:	b2db      	uxtb	r3, r3
 800b90c:	3305      	adds	r3, #5
 800b90e:	b29b      	uxth	r3, r3
 800b910:	031b      	lsls	r3, r3, #12
 800b912:	b29a      	uxth	r2, r3
 800b914:	79fb      	ldrb	r3, [r7, #7]
 800b916:	b29b      	uxth	r3, r3
 800b918:	4313      	orrs	r3, r2
 800b91a:	b29a      	uxth	r2, r3
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	68dc      	ldr	r4, [r3, #12]
 800b920:	4610      	mov	r0, r2
 800b922:	f7fa f8d3 	bl	8005acc <lwip_htons>
 800b926:	4603      	mov	r3, r0
 800b928:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	68db      	ldr	r3, [r3, #12]
 800b92e:	2200      	movs	r2, #0
 800b930:	749a      	strb	r2, [r3, #18]
 800b932:	2200      	movs	r2, #0
 800b934:	74da      	strb	r2, [r3, #19]
  return seg;
 800b936:	693b      	ldr	r3, [r7, #16]
}
 800b938:	4618      	mov	r0, r3
 800b93a:	371c      	adds	r7, #28
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd90      	pop	{r4, r7, pc}
 800b940:	080142b8 	.word	0x080142b8
 800b944:	080142ec 	.word	0x080142ec
 800b948:	0801430c 	.word	0x0801430c
 800b94c:	08014334 	.word	0x08014334
 800b950:	08014358 	.word	0x08014358

0800b954 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b086      	sub	sp, #24
 800b958:	af00      	add	r7, sp, #0
 800b95a:	607b      	str	r3, [r7, #4]
 800b95c:	4603      	mov	r3, r0
 800b95e:	73fb      	strb	r3, [r7, #15]
 800b960:	460b      	mov	r3, r1
 800b962:	81bb      	strh	r3, [r7, #12]
 800b964:	4613      	mov	r3, r2
 800b966:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800b968:	89bb      	ldrh	r3, [r7, #12]
 800b96a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d105      	bne.n	800b97e <tcp_pbuf_prealloc+0x2a>
 800b972:	4b30      	ldr	r3, [pc, #192]	@ (800ba34 <tcp_pbuf_prealloc+0xe0>)
 800b974:	22e8      	movs	r2, #232	@ 0xe8
 800b976:	4930      	ldr	r1, [pc, #192]	@ (800ba38 <tcp_pbuf_prealloc+0xe4>)
 800b978:	4830      	ldr	r0, [pc, #192]	@ (800ba3c <tcp_pbuf_prealloc+0xe8>)
 800b97a:	f006 f81b 	bl	80119b4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b97e:	6a3b      	ldr	r3, [r7, #32]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d105      	bne.n	800b990 <tcp_pbuf_prealloc+0x3c>
 800b984:	4b2b      	ldr	r3, [pc, #172]	@ (800ba34 <tcp_pbuf_prealloc+0xe0>)
 800b986:	22e9      	movs	r2, #233	@ 0xe9
 800b988:	492d      	ldr	r1, [pc, #180]	@ (800ba40 <tcp_pbuf_prealloc+0xec>)
 800b98a:	482c      	ldr	r0, [pc, #176]	@ (800ba3c <tcp_pbuf_prealloc+0xe8>)
 800b98c:	f006 f812 	bl	80119b4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800b990:	89ba      	ldrh	r2, [r7, #12]
 800b992:	897b      	ldrh	r3, [r7, #10]
 800b994:	429a      	cmp	r2, r3
 800b996:	d221      	bcs.n	800b9dc <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b998:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b99c:	f003 0302 	and.w	r3, r3, #2
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d111      	bne.n	800b9c8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800b9a4:	6a3b      	ldr	r3, [r7, #32]
 800b9a6:	8b5b      	ldrh	r3, [r3, #26]
 800b9a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d115      	bne.n	800b9dc <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800b9b0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d007      	beq.n	800b9c8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800b9b8:	6a3b      	ldr	r3, [r7, #32]
 800b9ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d103      	bne.n	800b9c8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800b9c0:	6a3b      	ldr	r3, [r7, #32]
 800b9c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d009      	beq.n	800b9dc <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800b9c8:	89bb      	ldrh	r3, [r7, #12]
 800b9ca:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800b9ce:	f023 0203 	bic.w	r2, r3, #3
 800b9d2:	897b      	ldrh	r3, [r7, #10]
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	bf28      	it	cs
 800b9d8:	4613      	movcs	r3, r2
 800b9da:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b9dc:	8af9      	ldrh	r1, [r7, #22]
 800b9de:	7bfb      	ldrb	r3, [r7, #15]
 800b9e0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7fb f8eb 	bl	8006bc0 <pbuf_alloc>
 800b9ea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d101      	bne.n	800b9f6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	e019      	b.n	800ba2a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d006      	beq.n	800ba0c <tcp_pbuf_prealloc+0xb8>
 800b9fe:	4b0d      	ldr	r3, [pc, #52]	@ (800ba34 <tcp_pbuf_prealloc+0xe0>)
 800ba00:	f240 120b 	movw	r2, #267	@ 0x10b
 800ba04:	490f      	ldr	r1, [pc, #60]	@ (800ba44 <tcp_pbuf_prealloc+0xf0>)
 800ba06:	480d      	ldr	r0, [pc, #52]	@ (800ba3c <tcp_pbuf_prealloc+0xe8>)
 800ba08:	f005 ffd4 	bl	80119b4 <iprintf>
  *oversize = p->len - length;
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	895a      	ldrh	r2, [r3, #10]
 800ba10:	89bb      	ldrh	r3, [r7, #12]
 800ba12:	1ad3      	subs	r3, r2, r3
 800ba14:	b29a      	uxth	r2, r3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	89ba      	ldrh	r2, [r7, #12]
 800ba1e:	811a      	strh	r2, [r3, #8]
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	891a      	ldrh	r2, [r3, #8]
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	815a      	strh	r2, [r3, #10]
  return p;
 800ba28:	693b      	ldr	r3, [r7, #16]
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3718      	adds	r7, #24
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	080142b8 	.word	0x080142b8
 800ba38:	08014370 	.word	0x08014370
 800ba3c:	0801430c 	.word	0x0801430c
 800ba40:	08014394 	.word	0x08014394
 800ba44:	080143b4 	.word	0x080143b4

0800ba48 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b082      	sub	sp, #8
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	460b      	mov	r3, r1
 800ba52:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d106      	bne.n	800ba68 <tcp_write_checks+0x20>
 800ba5a:	4b33      	ldr	r3, [pc, #204]	@ (800bb28 <tcp_write_checks+0xe0>)
 800ba5c:	f240 1233 	movw	r2, #307	@ 0x133
 800ba60:	4932      	ldr	r1, [pc, #200]	@ (800bb2c <tcp_write_checks+0xe4>)
 800ba62:	4833      	ldr	r0, [pc, #204]	@ (800bb30 <tcp_write_checks+0xe8>)
 800ba64:	f005 ffa6 	bl	80119b4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	7d1b      	ldrb	r3, [r3, #20]
 800ba6c:	2b04      	cmp	r3, #4
 800ba6e:	d00e      	beq.n	800ba8e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800ba74:	2b07      	cmp	r3, #7
 800ba76:	d00a      	beq.n	800ba8e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800ba7c:	2b02      	cmp	r3, #2
 800ba7e:	d006      	beq.n	800ba8e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800ba84:	2b03      	cmp	r3, #3
 800ba86:	d002      	beq.n	800ba8e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800ba88:	f06f 030a 	mvn.w	r3, #10
 800ba8c:	e048      	b.n	800bb20 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800ba8e:	887b      	ldrh	r3, [r7, #2]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d101      	bne.n	800ba98 <tcp_write_checks+0x50>
    return ERR_OK;
 800ba94:	2300      	movs	r3, #0
 800ba96:	e043      	b.n	800bb20 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ba9e:	887a      	ldrh	r2, [r7, #2]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d909      	bls.n	800bab8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	8b5b      	ldrh	r3, [r3, #26]
 800baa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800baac:	b29a      	uxth	r2, r3
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800bab2:	f04f 33ff 	mov.w	r3, #4294967295
 800bab6:	e033      	b.n	800bb20 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800babe:	2b08      	cmp	r3, #8
 800bac0:	d909      	bls.n	800bad6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	8b5b      	ldrh	r3, [r3, #26]
 800bac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800baca:	b29a      	uxth	r2, r3
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800bad0:	f04f 33ff 	mov.w	r3, #4294967295
 800bad4:	e024      	b.n	800bb20 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800badc:	2b00      	cmp	r3, #0
 800bade:	d00f      	beq.n	800bb00 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d11a      	bne.n	800bb1e <tcp_write_checks+0xd6>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800baec:	2b00      	cmp	r3, #0
 800baee:	d116      	bne.n	800bb1e <tcp_write_checks+0xd6>
 800baf0:	4b0d      	ldr	r3, [pc, #52]	@ (800bb28 <tcp_write_checks+0xe0>)
 800baf2:	f240 1255 	movw	r2, #341	@ 0x155
 800baf6:	490f      	ldr	r1, [pc, #60]	@ (800bb34 <tcp_write_checks+0xec>)
 800baf8:	480d      	ldr	r0, [pc, #52]	@ (800bb30 <tcp_write_checks+0xe8>)
 800bafa:	f005 ff5b 	bl	80119b4 <iprintf>
 800bafe:	e00e      	b.n	800bb1e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d103      	bne.n	800bb10 <tcp_write_checks+0xc8>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d006      	beq.n	800bb1e <tcp_write_checks+0xd6>
 800bb10:	4b05      	ldr	r3, [pc, #20]	@ (800bb28 <tcp_write_checks+0xe0>)
 800bb12:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800bb16:	4908      	ldr	r1, [pc, #32]	@ (800bb38 <tcp_write_checks+0xf0>)
 800bb18:	4805      	ldr	r0, [pc, #20]	@ (800bb30 <tcp_write_checks+0xe8>)
 800bb1a:	f005 ff4b 	bl	80119b4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800bb1e:	2300      	movs	r3, #0
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3708      	adds	r7, #8
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}
 800bb28:	080142b8 	.word	0x080142b8
 800bb2c:	080143c8 	.word	0x080143c8
 800bb30:	0801430c 	.word	0x0801430c
 800bb34:	080143e8 	.word	0x080143e8
 800bb38:	08014424 	.word	0x08014424

0800bb3c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800bb3c:	b590      	push	{r4, r7, lr}
 800bb3e:	b09b      	sub	sp, #108	@ 0x6c
 800bb40:	af04      	add	r7, sp, #16
 800bb42:	60f8      	str	r0, [r7, #12]
 800bb44:	60b9      	str	r1, [r7, #8]
 800bb46:	4611      	mov	r1, r2
 800bb48:	461a      	mov	r2, r3
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	80fb      	strh	r3, [r7, #6]
 800bb4e:	4613      	mov	r3, r2
 800bb50:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800bb52:	2300      	movs	r3, #0
 800bb54:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800bb56:	2300      	movs	r3, #0
 800bb58:	653b      	str	r3, [r7, #80]	@ 0x50
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb5e:	2300      	movs	r3, #0
 800bb60:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb62:	2300      	movs	r3, #0
 800bb64:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800bb66:	2300      	movs	r3, #0
 800bb68:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800bb72:	2300      	movs	r3, #0
 800bb74:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800bb76:	2300      	movs	r3, #0
 800bb78:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d109      	bne.n	800bb98 <tcp_write+0x5c>
 800bb84:	4ba4      	ldr	r3, [pc, #656]	@ (800be18 <tcp_write+0x2dc>)
 800bb86:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800bb8a:	49a4      	ldr	r1, [pc, #656]	@ (800be1c <tcp_write+0x2e0>)
 800bb8c:	48a4      	ldr	r0, [pc, #656]	@ (800be20 <tcp_write+0x2e4>)
 800bb8e:	f005 ff11 	bl	80119b4 <iprintf>
 800bb92:	f06f 030f 	mvn.w	r3, #15
 800bb96:	e32a      	b.n	800c1ee <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bb9e:	085b      	lsrs	r3, r3, #1
 800bba0:	b29a      	uxth	r2, r3
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bba6:	4293      	cmp	r3, r2
 800bba8:	bf28      	it	cs
 800bbaa:	4613      	movcs	r3, r2
 800bbac:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800bbae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d102      	bne.n	800bbba <tcp_write+0x7e>
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bbb8:	e000      	b.n	800bbbc <tcp_write+0x80>
 800bbba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bbbc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d109      	bne.n	800bbd8 <tcp_write+0x9c>
 800bbc4:	4b94      	ldr	r3, [pc, #592]	@ (800be18 <tcp_write+0x2dc>)
 800bbc6:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800bbca:	4996      	ldr	r1, [pc, #600]	@ (800be24 <tcp_write+0x2e8>)
 800bbcc:	4894      	ldr	r0, [pc, #592]	@ (800be20 <tcp_write+0x2e4>)
 800bbce:	f005 fef1 	bl	80119b4 <iprintf>
 800bbd2:	f06f 030f 	mvn.w	r3, #15
 800bbd6:	e30a      	b.n	800c1ee <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800bbd8:	88fb      	ldrh	r3, [r7, #6]
 800bbda:	4619      	mov	r1, r3
 800bbdc:	68f8      	ldr	r0, [r7, #12]
 800bbde:	f7ff ff33 	bl	800ba48 <tcp_write_checks>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 800bbe8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d002      	beq.n	800bbf6 <tcp_write+0xba>
    return err;
 800bbf0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800bbf4:	e2fb      	b.n	800c1ee <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bbfc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bc00:	2300      	movs	r3, #0
 800bc02:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	f000 80f6 	beq.w	800bdfc <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc14:	653b      	str	r3, [r7, #80]	@ 0x50
 800bc16:	e002      	b.n	800bc1e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800bc18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bc1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d1f8      	bne.n	800bc18 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800bc26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc28:	7a9b      	ldrb	r3, [r3, #10]
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	f003 0304 	and.w	r3, r3, #4
 800bc32:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800bc34:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800bc36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc38:	891b      	ldrh	r3, [r3, #8]
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	8c3b      	ldrh	r3, [r7, #32]
 800bc3e:	440b      	add	r3, r1
 800bc40:	429a      	cmp	r2, r3
 800bc42:	da06      	bge.n	800bc52 <tcp_write+0x116>
 800bc44:	4b74      	ldr	r3, [pc, #464]	@ (800be18 <tcp_write+0x2dc>)
 800bc46:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800bc4a:	4977      	ldr	r1, [pc, #476]	@ (800be28 <tcp_write+0x2ec>)
 800bc4c:	4874      	ldr	r0, [pc, #464]	@ (800be20 <tcp_write+0x2e4>)
 800bc4e:	f005 feb1 	bl	80119b4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800bc52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc54:	891a      	ldrh	r2, [r3, #8]
 800bc56:	8c3b      	ldrh	r3, [r7, #32]
 800bc58:	4413      	add	r3, r2
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800bc5e:	1ad3      	subs	r3, r2, r3
 800bc60:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800bc68:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800bc6a:	8a7b      	ldrh	r3, [r7, #18]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d026      	beq.n	800bcbe <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800bc70:	8a7b      	ldrh	r3, [r7, #18]
 800bc72:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d206      	bcs.n	800bc86 <tcp_write+0x14a>
 800bc78:	4b67      	ldr	r3, [pc, #412]	@ (800be18 <tcp_write+0x2dc>)
 800bc7a:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800bc7e:	496b      	ldr	r1, [pc, #428]	@ (800be2c <tcp_write+0x2f0>)
 800bc80:	4867      	ldr	r0, [pc, #412]	@ (800be20 <tcp_write+0x2e4>)
 800bc82:	f005 fe97 	bl	80119b4 <iprintf>
      seg = last_unsent;
 800bc86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc88:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800bc8a:	8a7b      	ldrh	r3, [r7, #18]
 800bc8c:	88fa      	ldrh	r2, [r7, #6]
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	bf28      	it	cs
 800bc92:	4613      	movcs	r3, r2
 800bc94:	b29b      	uxth	r3, r3
 800bc96:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	bf28      	it	cs
 800bc9c:	4613      	movcs	r3, r2
 800bc9e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 800bca0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800bca4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800bca6:	4413      	add	r3, r2
 800bca8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 800bcac:	8a7a      	ldrh	r2, [r7, #18]
 800bcae:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800bcb0:	1ad3      	subs	r3, r2, r3
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800bcb6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800bcb8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800bcba:	1ad3      	subs	r3, r2, r3
 800bcbc:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800bcbe:	8a7b      	ldrh	r3, [r7, #18]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d00b      	beq.n	800bcdc <tcp_write+0x1a0>
 800bcc4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800bcc8:	88fb      	ldrh	r3, [r7, #6]
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d006      	beq.n	800bcdc <tcp_write+0x1a0>
 800bcce:	4b52      	ldr	r3, [pc, #328]	@ (800be18 <tcp_write+0x2dc>)
 800bcd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bcd4:	4956      	ldr	r1, [pc, #344]	@ (800be30 <tcp_write+0x2f4>)
 800bcd6:	4852      	ldr	r0, [pc, #328]	@ (800be20 <tcp_write+0x2e4>)
 800bcd8:	f005 fe6c 	bl	80119b4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800bcdc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800bce0:	88fb      	ldrh	r3, [r7, #6]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	f080 8167 	bcs.w	800bfb6 <tcp_write+0x47a>
 800bce8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	f000 8163 	beq.w	800bfb6 <tcp_write+0x47a>
 800bcf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcf2:	891b      	ldrh	r3, [r3, #8]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	f000 815e 	beq.w	800bfb6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800bcfa:	88fa      	ldrh	r2, [r7, #6]
 800bcfc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bd00:	1ad2      	subs	r2, r2, r3
 800bd02:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800bd04:	4293      	cmp	r3, r2
 800bd06:	bfa8      	it	ge
 800bd08:	4613      	movge	r3, r2
 800bd0a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800bd0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd0e:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bd10:	797b      	ldrb	r3, [r7, #5]
 800bd12:	f003 0301 	and.w	r3, r3, #1
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d027      	beq.n	800bd6a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800bd1a:	f107 0012 	add.w	r0, r7, #18
 800bd1e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800bd20:	8bf9      	ldrh	r1, [r7, #30]
 800bd22:	2301      	movs	r3, #1
 800bd24:	9302      	str	r3, [sp, #8]
 800bd26:	797b      	ldrb	r3, [r7, #5]
 800bd28:	9301      	str	r3, [sp, #4]
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	9300      	str	r3, [sp, #0]
 800bd2e:	4603      	mov	r3, r0
 800bd30:	2000      	movs	r0, #0
 800bd32:	f7ff fe0f 	bl	800b954 <tcp_pbuf_prealloc>
 800bd36:	6578      	str	r0, [r7, #84]	@ 0x54
 800bd38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	f000 8225 	beq.w	800c18a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800bd40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd42:	6858      	ldr	r0, [r3, #4]
 800bd44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bd48:	68ba      	ldr	r2, [r7, #8]
 800bd4a:	4413      	add	r3, r2
 800bd4c:	8bfa      	ldrh	r2, [r7, #30]
 800bd4e:	4619      	mov	r1, r3
 800bd50:	f005 ff5b 	bl	8011c0a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800bd54:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800bd56:	f7fb fa9f 	bl	8007298 <pbuf_clen>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	461a      	mov	r2, r3
 800bd5e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800bd62:	4413      	add	r3, r2
 800bd64:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800bd68:	e041      	b.n	800bdee <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800bd6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd70:	e002      	b.n	800bd78 <tcp_write+0x23c>
 800bd72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d1f8      	bne.n	800bd72 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800bd80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd82:	7b1b      	ldrb	r3, [r3, #12]
 800bd84:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d115      	bne.n	800bdb8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800bd8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd8e:	685b      	ldr	r3, [r3, #4]
 800bd90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd92:	8952      	ldrh	r2, [r2, #10]
 800bd94:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800bd96:	68ba      	ldr	r2, [r7, #8]
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d10d      	bne.n	800bdb8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800bd9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d006      	beq.n	800bdb2 <tcp_write+0x276>
 800bda4:	4b1c      	ldr	r3, [pc, #112]	@ (800be18 <tcp_write+0x2dc>)
 800bda6:	f240 2231 	movw	r2, #561	@ 0x231
 800bdaa:	4922      	ldr	r1, [pc, #136]	@ (800be34 <tcp_write+0x2f8>)
 800bdac:	481c      	ldr	r0, [pc, #112]	@ (800be20 <tcp_write+0x2e4>)
 800bdae:	f005 fe01 	bl	80119b4 <iprintf>
          extendlen = seglen;
 800bdb2:	8bfb      	ldrh	r3, [r7, #30]
 800bdb4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800bdb6:	e01a      	b.n	800bdee <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800bdb8:	8bfb      	ldrh	r3, [r7, #30]
 800bdba:	2201      	movs	r2, #1
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	2000      	movs	r0, #0
 800bdc0:	f7fa fefe 	bl	8006bc0 <pbuf_alloc>
 800bdc4:	6578      	str	r0, [r7, #84]	@ 0x54
 800bdc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	f000 81e0 	beq.w	800c18e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800bdce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bdd2:	68ba      	ldr	r2, [r7, #8]
 800bdd4:	441a      	add	r2, r3
 800bdd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bdd8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800bdda:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800bddc:	f7fb fa5c 	bl	8007298 <pbuf_clen>
 800bde0:	4603      	mov	r3, r0
 800bde2:	461a      	mov	r2, r3
 800bde4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800bde8:	4413      	add	r3, r2
 800bdea:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800bdee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800bdf2:	8bfb      	ldrh	r3, [r7, #30]
 800bdf4:	4413      	add	r3, r2
 800bdf6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800bdfa:	e0dc      	b.n	800bfb6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800be02:	2b00      	cmp	r3, #0
 800be04:	f000 80d7 	beq.w	800bfb6 <tcp_write+0x47a>
 800be08:	4b03      	ldr	r3, [pc, #12]	@ (800be18 <tcp_write+0x2dc>)
 800be0a:	f240 224a 	movw	r2, #586	@ 0x24a
 800be0e:	490a      	ldr	r1, [pc, #40]	@ (800be38 <tcp_write+0x2fc>)
 800be10:	4803      	ldr	r0, [pc, #12]	@ (800be20 <tcp_write+0x2e4>)
 800be12:	f005 fdcf 	bl	80119b4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800be16:	e0ce      	b.n	800bfb6 <tcp_write+0x47a>
 800be18:	080142b8 	.word	0x080142b8
 800be1c:	08014458 	.word	0x08014458
 800be20:	0801430c 	.word	0x0801430c
 800be24:	08014470 	.word	0x08014470
 800be28:	080144a4 	.word	0x080144a4
 800be2c:	080144bc 	.word	0x080144bc
 800be30:	080144dc 	.word	0x080144dc
 800be34:	080144fc 	.word	0x080144fc
 800be38:	08014528 	.word	0x08014528
    struct pbuf *p;
    u16_t left = len - pos;
 800be3c:	88fa      	ldrh	r2, [r7, #6]
 800be3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800be42:	1ad3      	subs	r3, r2, r3
 800be44:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800be46:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800be4a:	b29b      	uxth	r3, r3
 800be4c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800be4e:	1ad3      	subs	r3, r2, r3
 800be50:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800be52:	8b7a      	ldrh	r2, [r7, #26]
 800be54:	8bbb      	ldrh	r3, [r7, #28]
 800be56:	4293      	cmp	r3, r2
 800be58:	bf28      	it	cs
 800be5a:	4613      	movcs	r3, r2
 800be5c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800be5e:	797b      	ldrb	r3, [r7, #5]
 800be60:	f003 0301 	and.w	r3, r3, #1
 800be64:	2b00      	cmp	r3, #0
 800be66:	d036      	beq.n	800bed6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800be68:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800be6c:	b29a      	uxth	r2, r3
 800be6e:	8b3b      	ldrh	r3, [r7, #24]
 800be70:	4413      	add	r3, r2
 800be72:	b299      	uxth	r1, r3
 800be74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be76:	2b00      	cmp	r3, #0
 800be78:	bf0c      	ite	eq
 800be7a:	2301      	moveq	r3, #1
 800be7c:	2300      	movne	r3, #0
 800be7e:	b2db      	uxtb	r3, r3
 800be80:	f107 0012 	add.w	r0, r7, #18
 800be84:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800be86:	9302      	str	r3, [sp, #8]
 800be88:	797b      	ldrb	r3, [r7, #5]
 800be8a:	9301      	str	r3, [sp, #4]
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	9300      	str	r3, [sp, #0]
 800be90:	4603      	mov	r3, r0
 800be92:	2036      	movs	r0, #54	@ 0x36
 800be94:	f7ff fd5e 	bl	800b954 <tcp_pbuf_prealloc>
 800be98:	6338      	str	r0, [r7, #48]	@ 0x30
 800be9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	f000 8178 	beq.w	800c192 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800bea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bea4:	895b      	ldrh	r3, [r3, #10]
 800bea6:	8b3a      	ldrh	r2, [r7, #24]
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d906      	bls.n	800beba <tcp_write+0x37e>
 800beac:	4b8c      	ldr	r3, [pc, #560]	@ (800c0e0 <tcp_write+0x5a4>)
 800beae:	f240 2266 	movw	r2, #614	@ 0x266
 800beb2:	498c      	ldr	r1, [pc, #560]	@ (800c0e4 <tcp_write+0x5a8>)
 800beb4:	488c      	ldr	r0, [pc, #560]	@ (800c0e8 <tcp_write+0x5ac>)
 800beb6:	f005 fd7d 	bl	80119b4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800beba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bebc:	685a      	ldr	r2, [r3, #4]
 800bebe:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800bec2:	18d0      	adds	r0, r2, r3
 800bec4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bec8:	68ba      	ldr	r2, [r7, #8]
 800beca:	4413      	add	r3, r2
 800becc:	8b3a      	ldrh	r2, [r7, #24]
 800bece:	4619      	mov	r1, r3
 800bed0:	f005 fe9b 	bl	8011c0a <memcpy>
 800bed4:	e02f      	b.n	800bf36 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800bed6:	8a7b      	ldrh	r3, [r7, #18]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d006      	beq.n	800beea <tcp_write+0x3ae>
 800bedc:	4b80      	ldr	r3, [pc, #512]	@ (800c0e0 <tcp_write+0x5a4>)
 800bede:	f240 2271 	movw	r2, #625	@ 0x271
 800bee2:	4982      	ldr	r1, [pc, #520]	@ (800c0ec <tcp_write+0x5b0>)
 800bee4:	4880      	ldr	r0, [pc, #512]	@ (800c0e8 <tcp_write+0x5ac>)
 800bee6:	f005 fd65 	bl	80119b4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800beea:	8b3b      	ldrh	r3, [r7, #24]
 800beec:	2201      	movs	r2, #1
 800beee:	4619      	mov	r1, r3
 800bef0:	2036      	movs	r0, #54	@ 0x36
 800bef2:	f7fa fe65 	bl	8006bc0 <pbuf_alloc>
 800bef6:	6178      	str	r0, [r7, #20]
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	2b00      	cmp	r3, #0
 800befc:	f000 814b 	beq.w	800c196 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800bf00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bf04:	68ba      	ldr	r2, [r7, #8]
 800bf06:	441a      	add	r2, r3
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bf0c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800bf10:	b29b      	uxth	r3, r3
 800bf12:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800bf16:	4619      	mov	r1, r3
 800bf18:	2036      	movs	r0, #54	@ 0x36
 800bf1a:	f7fa fe51 	bl	8006bc0 <pbuf_alloc>
 800bf1e:	6338      	str	r0, [r7, #48]	@ 0x30
 800bf20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d103      	bne.n	800bf2e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800bf26:	6978      	ldr	r0, [r7, #20]
 800bf28:	f7fb f92e 	bl	8007188 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800bf2c:	e136      	b.n	800c19c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800bf2e:	6979      	ldr	r1, [r7, #20]
 800bf30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bf32:	f7fb f9eb 	bl	800730c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800bf36:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bf38:	f7fb f9ae 	bl	8007298 <pbuf_clen>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	461a      	mov	r2, r3
 800bf40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800bf44:	4413      	add	r3, r2
 800bf46:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800bf4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800bf4e:	2b09      	cmp	r3, #9
 800bf50:	d903      	bls.n	800bf5a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800bf52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bf54:	f7fb f918 	bl	8007188 <pbuf_free>
      goto memerr;
 800bf58:	e120      	b.n	800c19c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bf5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bf62:	441a      	add	r2, r3
 800bf64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bf68:	9300      	str	r3, [sp, #0]
 800bf6a:	4613      	mov	r3, r2
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bf70:	68f8      	ldr	r0, [r7, #12]
 800bf72:	f7ff fc53 	bl	800b81c <tcp_create_segment>
 800bf76:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800bf78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	f000 810d 	beq.w	800c19a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800bf80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d102      	bne.n	800bf8c <tcp_write+0x450>
      queue = seg;
 800bf86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf88:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf8a:	e00c      	b.n	800bfa6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800bf8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d106      	bne.n	800bfa0 <tcp_write+0x464>
 800bf92:	4b53      	ldr	r3, [pc, #332]	@ (800c0e0 <tcp_write+0x5a4>)
 800bf94:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800bf98:	4955      	ldr	r1, [pc, #340]	@ (800c0f0 <tcp_write+0x5b4>)
 800bf9a:	4853      	ldr	r0, [pc, #332]	@ (800c0e8 <tcp_write+0x5ac>)
 800bf9c:	f005 fd0a 	bl	80119b4 <iprintf>
      prev_seg->next = seg;
 800bfa0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bfa2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bfa4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800bfa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfa8:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800bfaa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800bfae:	8b3b      	ldrh	r3, [r7, #24]
 800bfb0:	4413      	add	r3, r2
 800bfb2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 800bfb6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800bfba:	88fb      	ldrh	r3, [r7, #6]
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	f4ff af3d 	bcc.w	800be3c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800bfc2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d02c      	beq.n	800c022 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800bfc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bfce:	e01e      	b.n	800c00e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800bfd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfd2:	891a      	ldrh	r2, [r3, #8]
 800bfd4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800bfd6:	4413      	add	r3, r2
 800bfd8:	b29a      	uxth	r2, r3
 800bfda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfdc:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800bfde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d110      	bne.n	800c008 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800bfe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfec:	8952      	ldrh	r2, [r2, #10]
 800bfee:	4413      	add	r3, r2
 800bff0:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800bff2:	68b9      	ldr	r1, [r7, #8]
 800bff4:	4618      	mov	r0, r3
 800bff6:	f005 fe08 	bl	8011c0a <memcpy>
        p->len += oversize_used;
 800bffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bffc:	895a      	ldrh	r2, [r3, #10]
 800bffe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c000:	4413      	add	r3, r2
 800c002:	b29a      	uxth	r2, r3
 800c004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c006:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800c008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c00e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c010:	2b00      	cmp	r3, #0
 800c012:	d1dd      	bne.n	800bfd0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800c014:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c016:	891a      	ldrh	r2, [r3, #8]
 800c018:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c01a:	4413      	add	r3, r2
 800c01c:	b29a      	uxth	r2, r3
 800c01e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c020:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800c022:	8a7a      	ldrh	r2, [r7, #18]
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800c02a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d018      	beq.n	800c062 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800c030:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c032:	2b00      	cmp	r3, #0
 800c034:	d106      	bne.n	800c044 <tcp_write+0x508>
 800c036:	4b2a      	ldr	r3, [pc, #168]	@ (800c0e0 <tcp_write+0x5a4>)
 800c038:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800c03c:	492d      	ldr	r1, [pc, #180]	@ (800c0f4 <tcp_write+0x5b8>)
 800c03e:	482a      	ldr	r0, [pc, #168]	@ (800c0e8 <tcp_write+0x5ac>)
 800c040:	f005 fcb8 	bl	80119b4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800c044:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c046:	685b      	ldr	r3, [r3, #4]
 800c048:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7fb f95e 	bl	800730c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800c050:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c052:	891a      	ldrh	r2, [r3, #8]
 800c054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c056:	891b      	ldrh	r3, [r3, #8]
 800c058:	4413      	add	r3, r2
 800c05a:	b29a      	uxth	r2, r3
 800c05c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c05e:	811a      	strh	r2, [r3, #8]
 800c060:	e037      	b.n	800c0d2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800c062:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c064:	2b00      	cmp	r3, #0
 800c066:	d034      	beq.n	800c0d2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800c068:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d003      	beq.n	800c076 <tcp_write+0x53a>
 800c06e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d106      	bne.n	800c084 <tcp_write+0x548>
 800c076:	4b1a      	ldr	r3, [pc, #104]	@ (800c0e0 <tcp_write+0x5a4>)
 800c078:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800c07c:	491e      	ldr	r1, [pc, #120]	@ (800c0f8 <tcp_write+0x5bc>)
 800c07e:	481a      	ldr	r0, [pc, #104]	@ (800c0e8 <tcp_write+0x5ac>)
 800c080:	f005 fc98 	bl	80119b4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c084:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c08a:	e009      	b.n	800c0a0 <tcp_write+0x564>
      p->tot_len += extendlen;
 800c08c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c08e:	891a      	ldrh	r2, [r3, #8]
 800c090:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c092:	4413      	add	r3, r2
 800c094:	b29a      	uxth	r2, r3
 800c096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c098:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c09a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c0a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d1f1      	bne.n	800c08c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800c0a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0aa:	891a      	ldrh	r2, [r3, #8]
 800c0ac:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c0ae:	4413      	add	r3, r2
 800c0b0:	b29a      	uxth	r2, r3
 800c0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0b4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800c0b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0b8:	895a      	ldrh	r2, [r3, #10]
 800c0ba:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c0bc:	4413      	add	r3, r2
 800c0be:	b29a      	uxth	r2, r3
 800c0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0c2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800c0c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0c6:	891a      	ldrh	r2, [r3, #8]
 800c0c8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c0ca:	4413      	add	r3, r2
 800c0cc:	b29a      	uxth	r2, r3
 800c0ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0d0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800c0d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d111      	bne.n	800c0fc <tcp_write+0x5c0>
    pcb->unsent = queue;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c0dc:	66da      	str	r2, [r3, #108]	@ 0x6c
 800c0de:	e010      	b.n	800c102 <tcp_write+0x5c6>
 800c0e0:	080142b8 	.word	0x080142b8
 800c0e4:	08014558 	.word	0x08014558
 800c0e8:	0801430c 	.word	0x0801430c
 800c0ec:	08014598 	.word	0x08014598
 800c0f0:	080145a8 	.word	0x080145a8
 800c0f4:	080145bc 	.word	0x080145bc
 800c0f8:	080145f4 	.word	0x080145f4
  } else {
    last_unsent->next = queue;
 800c0fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c100:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c106:	88fb      	ldrh	r3, [r7, #6]
 800c108:	441a      	add	r2, r3
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800c114:	88fb      	ldrh	r3, [r7, #6]
 800c116:	1ad3      	subs	r3, r2, r3
 800c118:	b29a      	uxth	r2, r3
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800c126:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c130:	2b00      	cmp	r3, #0
 800c132:	d00e      	beq.n	800c152 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d10a      	bne.n	800c152 <tcp_write+0x616>
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c140:	2b00      	cmp	r3, #0
 800c142:	d106      	bne.n	800c152 <tcp_write+0x616>
 800c144:	4b2c      	ldr	r3, [pc, #176]	@ (800c1f8 <tcp_write+0x6bc>)
 800c146:	f240 3212 	movw	r2, #786	@ 0x312
 800c14a:	492c      	ldr	r1, [pc, #176]	@ (800c1fc <tcp_write+0x6c0>)
 800c14c:	482c      	ldr	r0, [pc, #176]	@ (800c200 <tcp_write+0x6c4>)
 800c14e:	f005 fc31 	bl	80119b4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800c152:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c154:	2b00      	cmp	r3, #0
 800c156:	d016      	beq.n	800c186 <tcp_write+0x64a>
 800c158:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c15a:	68db      	ldr	r3, [r3, #12]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d012      	beq.n	800c186 <tcp_write+0x64a>
 800c160:	797b      	ldrb	r3, [r7, #5]
 800c162:	f003 0302 	and.w	r3, r3, #2
 800c166:	2b00      	cmp	r3, #0
 800c168:	d10d      	bne.n	800c186 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800c16a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c16c:	68db      	ldr	r3, [r3, #12]
 800c16e:	899b      	ldrh	r3, [r3, #12]
 800c170:	b29c      	uxth	r4, r3
 800c172:	2008      	movs	r0, #8
 800c174:	f7f9 fcaa 	bl	8005acc <lwip_htons>
 800c178:	4603      	mov	r3, r0
 800c17a:	461a      	mov	r2, r3
 800c17c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c17e:	68db      	ldr	r3, [r3, #12]
 800c180:	4322      	orrs	r2, r4
 800c182:	b292      	uxth	r2, r2
 800c184:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800c186:	2300      	movs	r3, #0
 800c188:	e031      	b.n	800c1ee <tcp_write+0x6b2>
          goto memerr;
 800c18a:	bf00      	nop
 800c18c:	e006      	b.n	800c19c <tcp_write+0x660>
            goto memerr;
 800c18e:	bf00      	nop
 800c190:	e004      	b.n	800c19c <tcp_write+0x660>
        goto memerr;
 800c192:	bf00      	nop
 800c194:	e002      	b.n	800c19c <tcp_write+0x660>
        goto memerr;
 800c196:	bf00      	nop
 800c198:	e000      	b.n	800c19c <tcp_write+0x660>
      goto memerr;
 800c19a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	8b5b      	ldrh	r3, [r3, #26]
 800c1a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1a4:	b29a      	uxth	r2, r3
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800c1aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d002      	beq.n	800c1b6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800c1b0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c1b2:	f7fa ffe9 	bl	8007188 <pbuf_free>
  }
  if (queue != NULL) {
 800c1b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d002      	beq.n	800c1c2 <tcp_write+0x686>
    tcp_segs_free(queue);
 800c1bc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c1be:	f7fc fbfd 	bl	80089bc <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d00e      	beq.n	800c1ea <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d10a      	bne.n	800c1ea <tcp_write+0x6ae>
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d106      	bne.n	800c1ea <tcp_write+0x6ae>
 800c1dc:	4b06      	ldr	r3, [pc, #24]	@ (800c1f8 <tcp_write+0x6bc>)
 800c1de:	f240 3227 	movw	r2, #807	@ 0x327
 800c1e2:	4906      	ldr	r1, [pc, #24]	@ (800c1fc <tcp_write+0x6c0>)
 800c1e4:	4806      	ldr	r0, [pc, #24]	@ (800c200 <tcp_write+0x6c4>)
 800c1e6:	f005 fbe5 	bl	80119b4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800c1ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	375c      	adds	r7, #92	@ 0x5c
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd90      	pop	{r4, r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	080142b8 	.word	0x080142b8
 800c1fc:	0801462c 	.word	0x0801462c
 800c200:	0801430c 	.word	0x0801430c

0800c204 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800c204:	b590      	push	{r4, r7, lr}
 800c206:	b08b      	sub	sp, #44	@ 0x2c
 800c208:	af02      	add	r7, sp, #8
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	460b      	mov	r3, r1
 800c20e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800c210:	2300      	movs	r3, #0
 800c212:	61fb      	str	r3, [r7, #28]
 800c214:	2300      	movs	r3, #0
 800c216:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c218:	2300      	movs	r3, #0
 800c21a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d106      	bne.n	800c230 <tcp_split_unsent_seg+0x2c>
 800c222:	4b95      	ldr	r3, [pc, #596]	@ (800c478 <tcp_split_unsent_seg+0x274>)
 800c224:	f240 324b 	movw	r2, #843	@ 0x34b
 800c228:	4994      	ldr	r1, [pc, #592]	@ (800c47c <tcp_split_unsent_seg+0x278>)
 800c22a:	4895      	ldr	r0, [pc, #596]	@ (800c480 <tcp_split_unsent_seg+0x27c>)
 800c22c:	f005 fbc2 	bl	80119b4 <iprintf>

  useg = pcb->unsent;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c234:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d102      	bne.n	800c242 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800c23c:	f04f 33ff 	mov.w	r3, #4294967295
 800c240:	e116      	b.n	800c470 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800c242:	887b      	ldrh	r3, [r7, #2]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d109      	bne.n	800c25c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c248:	4b8b      	ldr	r3, [pc, #556]	@ (800c478 <tcp_split_unsent_seg+0x274>)
 800c24a:	f240 3253 	movw	r2, #851	@ 0x353
 800c24e:	498d      	ldr	r1, [pc, #564]	@ (800c484 <tcp_split_unsent_seg+0x280>)
 800c250:	488b      	ldr	r0, [pc, #556]	@ (800c480 <tcp_split_unsent_seg+0x27c>)
 800c252:	f005 fbaf 	bl	80119b4 <iprintf>
    return ERR_VAL;
 800c256:	f06f 0305 	mvn.w	r3, #5
 800c25a:	e109      	b.n	800c470 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	891b      	ldrh	r3, [r3, #8]
 800c260:	887a      	ldrh	r2, [r7, #2]
 800c262:	429a      	cmp	r2, r3
 800c264:	d301      	bcc.n	800c26a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800c266:	2300      	movs	r3, #0
 800c268:	e102      	b.n	800c470 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c26e:	887a      	ldrh	r2, [r7, #2]
 800c270:	429a      	cmp	r2, r3
 800c272:	d906      	bls.n	800c282 <tcp_split_unsent_seg+0x7e>
 800c274:	4b80      	ldr	r3, [pc, #512]	@ (800c478 <tcp_split_unsent_seg+0x274>)
 800c276:	f240 325b 	movw	r2, #859	@ 0x35b
 800c27a:	4983      	ldr	r1, [pc, #524]	@ (800c488 <tcp_split_unsent_seg+0x284>)
 800c27c:	4880      	ldr	r0, [pc, #512]	@ (800c480 <tcp_split_unsent_seg+0x27c>)
 800c27e:	f005 fb99 	bl	80119b4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	891b      	ldrh	r3, [r3, #8]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d106      	bne.n	800c298 <tcp_split_unsent_seg+0x94>
 800c28a:	4b7b      	ldr	r3, [pc, #492]	@ (800c478 <tcp_split_unsent_seg+0x274>)
 800c28c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800c290:	497e      	ldr	r1, [pc, #504]	@ (800c48c <tcp_split_unsent_seg+0x288>)
 800c292:	487b      	ldr	r0, [pc, #492]	@ (800c480 <tcp_split_unsent_seg+0x27c>)
 800c294:	f005 fb8e 	bl	80119b4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	7a9b      	ldrb	r3, [r3, #10]
 800c29c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c29e:	7bfb      	ldrb	r3, [r7, #15]
 800c2a0:	009b      	lsls	r3, r3, #2
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	f003 0304 	and.w	r3, r3, #4
 800c2a8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	891a      	ldrh	r2, [r3, #8]
 800c2ae:	887b      	ldrh	r3, [r7, #2]
 800c2b0:	1ad3      	subs	r3, r2, r3
 800c2b2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c2b4:	7bbb      	ldrb	r3, [r7, #14]
 800c2b6:	b29a      	uxth	r2, r3
 800c2b8:	89bb      	ldrh	r3, [r7, #12]
 800c2ba:	4413      	add	r3, r2
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	2036      	movs	r0, #54	@ 0x36
 800c2c6:	f7fa fc7b 	bl	8006bc0 <pbuf_alloc>
 800c2ca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	f000 80b7 	beq.w	800c442 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	685b      	ldr	r3, [r3, #4]
 800c2d8:	891a      	ldrh	r2, [r3, #8]
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	891b      	ldrh	r3, [r3, #8]
 800c2de:	1ad3      	subs	r3, r2, r3
 800c2e0:	b29a      	uxth	r2, r3
 800c2e2:	887b      	ldrh	r3, [r7, #2]
 800c2e4:	4413      	add	r3, r2
 800c2e6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	6858      	ldr	r0, [r3, #4]
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	685a      	ldr	r2, [r3, #4]
 800c2f0:	7bbb      	ldrb	r3, [r7, #14]
 800c2f2:	18d1      	adds	r1, r2, r3
 800c2f4:	897b      	ldrh	r3, [r7, #10]
 800c2f6:	89ba      	ldrh	r2, [r7, #12]
 800c2f8:	f7fb f930 	bl	800755c <pbuf_copy_partial>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	461a      	mov	r2, r3
 800c300:	89bb      	ldrh	r3, [r7, #12]
 800c302:	4293      	cmp	r3, r2
 800c304:	f040 809f 	bne.w	800c446 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	68db      	ldr	r3, [r3, #12]
 800c30c:	899b      	ldrh	r3, [r3, #12]
 800c30e:	b29b      	uxth	r3, r3
 800c310:	4618      	mov	r0, r3
 800c312:	f7f9 fbdb 	bl	8005acc <lwip_htons>
 800c316:	4603      	mov	r3, r0
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c31e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c320:	2300      	movs	r3, #0
 800c322:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800c324:	7efb      	ldrb	r3, [r7, #27]
 800c326:	f003 0308 	and.w	r3, r3, #8
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d007      	beq.n	800c33e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800c32e:	7efb      	ldrb	r3, [r7, #27]
 800c330:	f023 0308 	bic.w	r3, r3, #8
 800c334:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800c336:	7ebb      	ldrb	r3, [r7, #26]
 800c338:	f043 0308 	orr.w	r3, r3, #8
 800c33c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800c33e:	7efb      	ldrb	r3, [r7, #27]
 800c340:	f003 0301 	and.w	r3, r3, #1
 800c344:	2b00      	cmp	r3, #0
 800c346:	d007      	beq.n	800c358 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800c348:	7efb      	ldrb	r3, [r7, #27]
 800c34a:	f023 0301 	bic.w	r3, r3, #1
 800c34e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800c350:	7ebb      	ldrb	r3, [r7, #26]
 800c352:	f043 0301 	orr.w	r3, r3, #1
 800c356:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	4618      	mov	r0, r3
 800c360:	f7f9 fbca 	bl	8005af8 <lwip_htonl>
 800c364:	4602      	mov	r2, r0
 800c366:	887b      	ldrh	r3, [r7, #2]
 800c368:	18d1      	adds	r1, r2, r3
 800c36a:	7eba      	ldrb	r2, [r7, #26]
 800c36c:	7bfb      	ldrb	r3, [r7, #15]
 800c36e:	9300      	str	r3, [sp, #0]
 800c370:	460b      	mov	r3, r1
 800c372:	6939      	ldr	r1, [r7, #16]
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f7ff fa51 	bl	800b81c <tcp_create_segment>
 800c37a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800c37c:	69fb      	ldr	r3, [r7, #28]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d063      	beq.n	800c44a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	4618      	mov	r0, r3
 800c388:	f7fa ff86 	bl	8007298 <pbuf_clen>
 800c38c:	4603      	mov	r3, r0
 800c38e:	461a      	mov	r2, r3
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c396:	1a9b      	subs	r3, r3, r2
 800c398:	b29a      	uxth	r2, r3
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	6858      	ldr	r0, [r3, #4]
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	891a      	ldrh	r2, [r3, #8]
 800c3aa:	89bb      	ldrh	r3, [r7, #12]
 800c3ac:	1ad3      	subs	r3, r2, r3
 800c3ae:	b29b      	uxth	r3, r3
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	f7fa fd63 	bl	8006e7c <pbuf_realloc>
  useg->len -= remainder;
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	891a      	ldrh	r2, [r3, #8]
 800c3ba:	89bb      	ldrh	r3, [r7, #12]
 800c3bc:	1ad3      	subs	r3, r2, r3
 800c3be:	b29a      	uxth	r2, r3
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	68db      	ldr	r3, [r3, #12]
 800c3c8:	899b      	ldrh	r3, [r3, #12]
 800c3ca:	b29c      	uxth	r4, r3
 800c3cc:	7efb      	ldrb	r3, [r7, #27]
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f7f9 fb7b 	bl	8005acc <lwip_htons>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	461a      	mov	r2, r3
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	68db      	ldr	r3, [r3, #12]
 800c3de:	4322      	orrs	r2, r4
 800c3e0:	b292      	uxth	r2, r2
 800c3e2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7fa ff55 	bl	8007298 <pbuf_clen>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c3f8:	4413      	add	r3, r2
 800c3fa:	b29a      	uxth	r2, r3
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c402:	69fb      	ldr	r3, [r7, #28]
 800c404:	685b      	ldr	r3, [r3, #4]
 800c406:	4618      	mov	r0, r3
 800c408:	f7fa ff46 	bl	8007298 <pbuf_clen>
 800c40c:	4603      	mov	r3, r0
 800c40e:	461a      	mov	r2, r3
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c416:	4413      	add	r3, r2
 800c418:	b29a      	uxth	r2, r3
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	681a      	ldr	r2, [r3, #0]
 800c424:	69fb      	ldr	r3, [r7, #28]
 800c426:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800c428:	697b      	ldr	r3, [r7, #20]
 800c42a:	69fa      	ldr	r2, [r7, #28]
 800c42c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d103      	bne.n	800c43e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2200      	movs	r2, #0
 800c43a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800c43e:	2300      	movs	r3, #0
 800c440:	e016      	b.n	800c470 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800c442:	bf00      	nop
 800c444:	e002      	b.n	800c44c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c446:	bf00      	nop
 800c448:	e000      	b.n	800c44c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c44a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800c44c:	69fb      	ldr	r3, [r7, #28]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d006      	beq.n	800c460 <tcp_split_unsent_seg+0x25c>
 800c452:	4b09      	ldr	r3, [pc, #36]	@ (800c478 <tcp_split_unsent_seg+0x274>)
 800c454:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800c458:	490d      	ldr	r1, [pc, #52]	@ (800c490 <tcp_split_unsent_seg+0x28c>)
 800c45a:	4809      	ldr	r0, [pc, #36]	@ (800c480 <tcp_split_unsent_seg+0x27c>)
 800c45c:	f005 faaa 	bl	80119b4 <iprintf>
  if (p != NULL) {
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d002      	beq.n	800c46c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800c466:	6938      	ldr	r0, [r7, #16]
 800c468:	f7fa fe8e 	bl	8007188 <pbuf_free>
  }

  return ERR_MEM;
 800c46c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c470:	4618      	mov	r0, r3
 800c472:	3724      	adds	r7, #36	@ 0x24
 800c474:	46bd      	mov	sp, r7
 800c476:	bd90      	pop	{r4, r7, pc}
 800c478:	080142b8 	.word	0x080142b8
 800c47c:	0801464c 	.word	0x0801464c
 800c480:	0801430c 	.word	0x0801430c
 800c484:	08014670 	.word	0x08014670
 800c488:	08014694 	.word	0x08014694
 800c48c:	080146a4 	.word	0x080146a4
 800c490:	080146b4 	.word	0x080146b4

0800c494 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c494:	b590      	push	{r4, r7, lr}
 800c496:	b085      	sub	sp, #20
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d106      	bne.n	800c4b0 <tcp_send_fin+0x1c>
 800c4a2:	4b21      	ldr	r3, [pc, #132]	@ (800c528 <tcp_send_fin+0x94>)
 800c4a4:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800c4a8:	4920      	ldr	r1, [pc, #128]	@ (800c52c <tcp_send_fin+0x98>)
 800c4aa:	4821      	ldr	r0, [pc, #132]	@ (800c530 <tcp_send_fin+0x9c>)
 800c4ac:	f005 fa82 	bl	80119b4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d02e      	beq.n	800c516 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4bc:	60fb      	str	r3, [r7, #12]
 800c4be:	e002      	b.n	800c4c6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d1f8      	bne.n	800c4c0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	899b      	ldrh	r3, [r3, #12]
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f7f9 faf8 	bl	8005acc <lwip_htons>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	b2db      	uxtb	r3, r3
 800c4e0:	f003 0307 	and.w	r3, r3, #7
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d116      	bne.n	800c516 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	68db      	ldr	r3, [r3, #12]
 800c4ec:	899b      	ldrh	r3, [r3, #12]
 800c4ee:	b29c      	uxth	r4, r3
 800c4f0:	2001      	movs	r0, #1
 800c4f2:	f7f9 faeb 	bl	8005acc <lwip_htons>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	461a      	mov	r2, r3
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	68db      	ldr	r3, [r3, #12]
 800c4fe:	4322      	orrs	r2, r4
 800c500:	b292      	uxth	r2, r2
 800c502:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	8b5b      	ldrh	r3, [r3, #26]
 800c508:	f043 0320 	orr.w	r3, r3, #32
 800c50c:	b29a      	uxth	r2, r3
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800c512:	2300      	movs	r3, #0
 800c514:	e004      	b.n	800c520 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c516:	2101      	movs	r1, #1
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f000 f80b 	bl	800c534 <tcp_enqueue_flags>
 800c51e:	4603      	mov	r3, r0
}
 800c520:	4618      	mov	r0, r3
 800c522:	3714      	adds	r7, #20
 800c524:	46bd      	mov	sp, r7
 800c526:	bd90      	pop	{r4, r7, pc}
 800c528:	080142b8 	.word	0x080142b8
 800c52c:	080146c0 	.word	0x080146c0
 800c530:	0801430c 	.word	0x0801430c

0800c534 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b08a      	sub	sp, #40	@ 0x28
 800c538:	af02      	add	r7, sp, #8
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	460b      	mov	r3, r1
 800c53e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c540:	2300      	movs	r3, #0
 800c542:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c544:	2300      	movs	r3, #0
 800c546:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c548:	78fb      	ldrb	r3, [r7, #3]
 800c54a:	f003 0303 	and.w	r3, r3, #3
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d106      	bne.n	800c560 <tcp_enqueue_flags+0x2c>
 800c552:	4b67      	ldr	r3, [pc, #412]	@ (800c6f0 <tcp_enqueue_flags+0x1bc>)
 800c554:	f240 4211 	movw	r2, #1041	@ 0x411
 800c558:	4966      	ldr	r1, [pc, #408]	@ (800c6f4 <tcp_enqueue_flags+0x1c0>)
 800c55a:	4867      	ldr	r0, [pc, #412]	@ (800c6f8 <tcp_enqueue_flags+0x1c4>)
 800c55c:	f005 fa2a 	bl	80119b4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d106      	bne.n	800c574 <tcp_enqueue_flags+0x40>
 800c566:	4b62      	ldr	r3, [pc, #392]	@ (800c6f0 <tcp_enqueue_flags+0x1bc>)
 800c568:	f240 4213 	movw	r2, #1043	@ 0x413
 800c56c:	4963      	ldr	r1, [pc, #396]	@ (800c6fc <tcp_enqueue_flags+0x1c8>)
 800c56e:	4862      	ldr	r0, [pc, #392]	@ (800c6f8 <tcp_enqueue_flags+0x1c4>)
 800c570:	f005 fa20 	bl	80119b4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c574:	78fb      	ldrb	r3, [r7, #3]
 800c576:	f003 0302 	and.w	r3, r3, #2
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d001      	beq.n	800c582 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800c57e:	2301      	movs	r3, #1
 800c580:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c582:	7ffb      	ldrb	r3, [r7, #31]
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	b2db      	uxtb	r3, r3
 800c588:	f003 0304 	and.w	r3, r3, #4
 800c58c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c58e:	7dfb      	ldrb	r3, [r7, #23]
 800c590:	b29b      	uxth	r3, r3
 800c592:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c596:	4619      	mov	r1, r3
 800c598:	2036      	movs	r0, #54	@ 0x36
 800c59a:	f7fa fb11 	bl	8006bc0 <pbuf_alloc>
 800c59e:	6138      	str	r0, [r7, #16]
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d109      	bne.n	800c5ba <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	8b5b      	ldrh	r3, [r3, #26]
 800c5aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5ae:	b29a      	uxth	r2, r3
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c5b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c5b8:	e095      	b.n	800c6e6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	895a      	ldrh	r2, [r3, #10]
 800c5be:	7dfb      	ldrb	r3, [r7, #23]
 800c5c0:	b29b      	uxth	r3, r3
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d206      	bcs.n	800c5d4 <tcp_enqueue_flags+0xa0>
 800c5c6:	4b4a      	ldr	r3, [pc, #296]	@ (800c6f0 <tcp_enqueue_flags+0x1bc>)
 800c5c8:	f240 4239 	movw	r2, #1081	@ 0x439
 800c5cc:	494c      	ldr	r1, [pc, #304]	@ (800c700 <tcp_enqueue_flags+0x1cc>)
 800c5ce:	484a      	ldr	r0, [pc, #296]	@ (800c6f8 <tcp_enqueue_flags+0x1c4>)
 800c5d0:	f005 f9f0 	bl	80119b4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800c5d8:	78fa      	ldrb	r2, [r7, #3]
 800c5da:	7ffb      	ldrb	r3, [r7, #31]
 800c5dc:	9300      	str	r3, [sp, #0]
 800c5de:	460b      	mov	r3, r1
 800c5e0:	6939      	ldr	r1, [r7, #16]
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f7ff f91a 	bl	800b81c <tcp_create_segment>
 800c5e8:	60f8      	str	r0, [r7, #12]
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d109      	bne.n	800c604 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	8b5b      	ldrh	r3, [r3, #26]
 800c5f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5f8:	b29a      	uxth	r2, r3
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c5fe:	f04f 33ff 	mov.w	r3, #4294967295
 800c602:	e070      	b.n	800c6e6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	68db      	ldr	r3, [r3, #12]
 800c608:	f003 0303 	and.w	r3, r3, #3
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d006      	beq.n	800c61e <tcp_enqueue_flags+0xea>
 800c610:	4b37      	ldr	r3, [pc, #220]	@ (800c6f0 <tcp_enqueue_flags+0x1bc>)
 800c612:	f240 4242 	movw	r2, #1090	@ 0x442
 800c616:	493b      	ldr	r1, [pc, #236]	@ (800c704 <tcp_enqueue_flags+0x1d0>)
 800c618:	4837      	ldr	r0, [pc, #220]	@ (800c6f8 <tcp_enqueue_flags+0x1c4>)
 800c61a:	f005 f9cb 	bl	80119b4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	891b      	ldrh	r3, [r3, #8]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d006      	beq.n	800c634 <tcp_enqueue_flags+0x100>
 800c626:	4b32      	ldr	r3, [pc, #200]	@ (800c6f0 <tcp_enqueue_flags+0x1bc>)
 800c628:	f240 4243 	movw	r2, #1091	@ 0x443
 800c62c:	4936      	ldr	r1, [pc, #216]	@ (800c708 <tcp_enqueue_flags+0x1d4>)
 800c62e:	4832      	ldr	r0, [pc, #200]	@ (800c6f8 <tcp_enqueue_flags+0x1c4>)
 800c630:	f005 f9c0 	bl	80119b4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d103      	bne.n	800c644 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	68fa      	ldr	r2, [r7, #12]
 800c640:	66da      	str	r2, [r3, #108]	@ 0x6c
 800c642:	e00d      	b.n	800c660 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c648:	61bb      	str	r3, [r7, #24]
 800c64a:	e002      	b.n	800c652 <tcp_enqueue_flags+0x11e>
 800c64c:	69bb      	ldr	r3, [r7, #24]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	61bb      	str	r3, [r7, #24]
 800c652:	69bb      	ldr	r3, [r7, #24]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d1f8      	bne.n	800c64c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800c65a:	69bb      	ldr	r3, [r7, #24]
 800c65c:	68fa      	ldr	r2, [r7, #12]
 800c65e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2200      	movs	r2, #0
 800c664:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c668:	78fb      	ldrb	r3, [r7, #3]
 800c66a:	f003 0302 	and.w	r3, r3, #2
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d104      	bne.n	800c67c <tcp_enqueue_flags+0x148>
 800c672:	78fb      	ldrb	r3, [r7, #3]
 800c674:	f003 0301 	and.w	r3, r3, #1
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d004      	beq.n	800c686 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c680:	1c5a      	adds	r2, r3, #1
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c686:	78fb      	ldrb	r3, [r7, #3]
 800c688:	f003 0301 	and.w	r3, r3, #1
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d006      	beq.n	800c69e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	8b5b      	ldrh	r3, [r3, #26]
 800c694:	f043 0320 	orr.w	r3, r3, #32
 800c698:	b29a      	uxth	r2, r3
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7fa fdf8 	bl	8007298 <pbuf_clen>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c6b2:	4413      	add	r3, r2
 800c6b4:	b29a      	uxth	r2, r3
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d00e      	beq.n	800c6e4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d10a      	bne.n	800c6e4 <tcp_enqueue_flags+0x1b0>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d106      	bne.n	800c6e4 <tcp_enqueue_flags+0x1b0>
 800c6d6:	4b06      	ldr	r3, [pc, #24]	@ (800c6f0 <tcp_enqueue_flags+0x1bc>)
 800c6d8:	f240 4265 	movw	r2, #1125	@ 0x465
 800c6dc:	490b      	ldr	r1, [pc, #44]	@ (800c70c <tcp_enqueue_flags+0x1d8>)
 800c6de:	4806      	ldr	r0, [pc, #24]	@ (800c6f8 <tcp_enqueue_flags+0x1c4>)
 800c6e0:	f005 f968 	bl	80119b4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c6e4:	2300      	movs	r3, #0
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3720      	adds	r7, #32
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	080142b8 	.word	0x080142b8
 800c6f4:	080146dc 	.word	0x080146dc
 800c6f8:	0801430c 	.word	0x0801430c
 800c6fc:	08014734 	.word	0x08014734
 800c700:	08014754 	.word	0x08014754
 800c704:	08014790 	.word	0x08014790
 800c708:	080147a8 	.word	0x080147a8
 800c70c:	080147d4 	.word	0x080147d4

0800c710 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c710:	b5b0      	push	{r4, r5, r7, lr}
 800c712:	b08a      	sub	sp, #40	@ 0x28
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d106      	bne.n	800c72c <tcp_output+0x1c>
 800c71e:	4b8a      	ldr	r3, [pc, #552]	@ (800c948 <tcp_output+0x238>)
 800c720:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800c724:	4989      	ldr	r1, [pc, #548]	@ (800c94c <tcp_output+0x23c>)
 800c726:	488a      	ldr	r0, [pc, #552]	@ (800c950 <tcp_output+0x240>)
 800c728:	f005 f944 	bl	80119b4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	7d1b      	ldrb	r3, [r3, #20]
 800c730:	2b01      	cmp	r3, #1
 800c732:	d106      	bne.n	800c742 <tcp_output+0x32>
 800c734:	4b84      	ldr	r3, [pc, #528]	@ (800c948 <tcp_output+0x238>)
 800c736:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800c73a:	4986      	ldr	r1, [pc, #536]	@ (800c954 <tcp_output+0x244>)
 800c73c:	4884      	ldr	r0, [pc, #528]	@ (800c950 <tcp_output+0x240>)
 800c73e:	f005 f939 	bl	80119b4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c742:	4b85      	ldr	r3, [pc, #532]	@ (800c958 <tcp_output+0x248>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	687a      	ldr	r2, [r7, #4]
 800c748:	429a      	cmp	r2, r3
 800c74a:	d101      	bne.n	800c750 <tcp_output+0x40>
    return ERR_OK;
 800c74c:	2300      	movs	r3, #0
 800c74e:	e1ce      	b.n	800caee <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c75c:	4293      	cmp	r3, r2
 800c75e:	bf28      	it	cs
 800c760:	4613      	movcs	r3, r2
 800c762:	b29b      	uxth	r3, r3
 800c764:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c76a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800c76c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d10b      	bne.n	800c78a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	8b5b      	ldrh	r3, [r3, #26]
 800c776:	f003 0302 	and.w	r3, r3, #2
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	f000 81aa 	beq.w	800cad4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 fdcb 	bl	800d31c <tcp_send_empty_ack>
 800c786:	4603      	mov	r3, r0
 800c788:	e1b1      	b.n	800caee <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c78a:	6879      	ldr	r1, [r7, #4]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	3304      	adds	r3, #4
 800c790:	461a      	mov	r2, r3
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f7ff f826 	bl	800b7e4 <tcp_route>
 800c798:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d102      	bne.n	800c7a6 <tcp_output+0x96>
    return ERR_RTE;
 800c7a0:	f06f 0303 	mvn.w	r3, #3
 800c7a4:	e1a3      	b.n	800caee <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d003      	beq.n	800c7b4 <tcp_output+0xa4>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d111      	bne.n	800c7d8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d002      	beq.n	800c7c0 <tcp_output+0xb0>
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	3304      	adds	r3, #4
 800c7be:	e000      	b.n	800c7c2 <tcp_output+0xb2>
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d102      	bne.n	800c7d0 <tcp_output+0xc0>
      return ERR_RTE;
 800c7ca:	f06f 0303 	mvn.w	r3, #3
 800c7ce:	e18e      	b.n	800caee <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c7d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7da:	68db      	ldr	r3, [r3, #12]
 800c7dc:	685b      	ldr	r3, [r3, #4]
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f7f9 f98a 	bl	8005af8 <lwip_htonl>
 800c7e4:	4602      	mov	r2, r0
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7ea:	1ad3      	subs	r3, r2, r3
 800c7ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7ee:	8912      	ldrh	r2, [r2, #8]
 800c7f0:	4413      	add	r3, r2
 800c7f2:	69ba      	ldr	r2, [r7, #24]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d227      	bcs.n	800c848 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c7fe:	461a      	mov	r2, r3
 800c800:	69bb      	ldr	r3, [r7, #24]
 800c802:	4293      	cmp	r3, r2
 800c804:	d114      	bne.n	800c830 <tcp_output+0x120>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d110      	bne.n	800c830 <tcp_output+0x120>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c814:	2b00      	cmp	r3, #0
 800c816:	d10b      	bne.n	800c830 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2200      	movs	r2, #0
 800c81c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2201      	movs	r2, #1
 800c824:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	8b5b      	ldrh	r3, [r3, #26]
 800c834:	f003 0302 	and.w	r3, r3, #2
 800c838:	2b00      	cmp	r3, #0
 800c83a:	f000 814d 	beq.w	800cad8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f000 fd6c 	bl	800d31c <tcp_send_empty_ack>
 800c844:	4603      	mov	r3, r0
 800c846:	e152      	b.n	800caee <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2200      	movs	r2, #0
 800c84c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c854:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c856:	6a3b      	ldr	r3, [r7, #32]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	f000 811c 	beq.w	800ca96 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800c85e:	e002      	b.n	800c866 <tcp_output+0x156>
 800c860:	6a3b      	ldr	r3, [r7, #32]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	623b      	str	r3, [r7, #32]
 800c866:	6a3b      	ldr	r3, [r7, #32]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d1f8      	bne.n	800c860 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c86e:	e112      	b.n	800ca96 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c872:	68db      	ldr	r3, [r3, #12]
 800c874:	899b      	ldrh	r3, [r3, #12]
 800c876:	b29b      	uxth	r3, r3
 800c878:	4618      	mov	r0, r3
 800c87a:	f7f9 f927 	bl	8005acc <lwip_htons>
 800c87e:	4603      	mov	r3, r0
 800c880:	b2db      	uxtb	r3, r3
 800c882:	f003 0304 	and.w	r3, r3, #4
 800c886:	2b00      	cmp	r3, #0
 800c888:	d006      	beq.n	800c898 <tcp_output+0x188>
 800c88a:	4b2f      	ldr	r3, [pc, #188]	@ (800c948 <tcp_output+0x238>)
 800c88c:	f240 5236 	movw	r2, #1334	@ 0x536
 800c890:	4932      	ldr	r1, [pc, #200]	@ (800c95c <tcp_output+0x24c>)
 800c892:	482f      	ldr	r0, [pc, #188]	@ (800c950 <tcp_output+0x240>)
 800c894:	f005 f88e 	bl	80119b4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d01f      	beq.n	800c8e0 <tcp_output+0x1d0>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	8b5b      	ldrh	r3, [r3, #26]
 800c8a4:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d119      	bne.n	800c8e0 <tcp_output+0x1d0>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d00b      	beq.n	800c8cc <tcp_output+0x1bc>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d110      	bne.n	800c8e0 <tcp_output+0x1d0>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8c2:	891a      	ldrh	r2, [r3, #8]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d209      	bcs.n	800c8e0 <tcp_output+0x1d0>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d004      	beq.n	800c8e0 <tcp_output+0x1d0>
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c8dc:	2b08      	cmp	r3, #8
 800c8de:	d901      	bls.n	800c8e4 <tcp_output+0x1d4>
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	e000      	b.n	800c8e6 <tcp_output+0x1d6>
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d106      	bne.n	800c8f8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	8b5b      	ldrh	r3, [r3, #26]
 800c8ee:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	f000 80e4 	beq.w	800cac0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	7d1b      	ldrb	r3, [r3, #20]
 800c8fc:	2b02      	cmp	r3, #2
 800c8fe:	d00d      	beq.n	800c91c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c902:	68db      	ldr	r3, [r3, #12]
 800c904:	899b      	ldrh	r3, [r3, #12]
 800c906:	b29c      	uxth	r4, r3
 800c908:	2010      	movs	r0, #16
 800c90a:	f7f9 f8df 	bl	8005acc <lwip_htons>
 800c90e:	4603      	mov	r3, r0
 800c910:	461a      	mov	r2, r3
 800c912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c914:	68db      	ldr	r3, [r3, #12]
 800c916:	4322      	orrs	r2, r4
 800c918:	b292      	uxth	r2, r2
 800c91a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c91c:	697a      	ldr	r2, [r7, #20]
 800c91e:	6879      	ldr	r1, [r7, #4]
 800c920:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c922:	f000 f909 	bl	800cb38 <tcp_output_segment>
 800c926:	4603      	mov	r3, r0
 800c928:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c92a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d016      	beq.n	800c960 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	8b5b      	ldrh	r3, [r3, #26]
 800c936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c93a:	b29a      	uxth	r2, r3
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	835a      	strh	r2, [r3, #26]
      return err;
 800c940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c944:	e0d3      	b.n	800caee <tcp_output+0x3de>
 800c946:	bf00      	nop
 800c948:	080142b8 	.word	0x080142b8
 800c94c:	080147fc 	.word	0x080147fc
 800c950:	0801430c 	.word	0x0801430c
 800c954:	08014814 	.word	0x08014814
 800c958:	20008424 	.word	0x20008424
 800c95c:	0801483c 	.word	0x0801483c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c962:	681a      	ldr	r2, [r3, #0]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	7d1b      	ldrb	r3, [r3, #20]
 800c96c:	2b02      	cmp	r3, #2
 800c96e:	d006      	beq.n	800c97e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	8b5b      	ldrh	r3, [r3, #26]
 800c974:	f023 0303 	bic.w	r3, r3, #3
 800c978:	b29a      	uxth	r2, r3
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c980:	68db      	ldr	r3, [r3, #12]
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	4618      	mov	r0, r3
 800c986:	f7f9 f8b7 	bl	8005af8 <lwip_htonl>
 800c98a:	4604      	mov	r4, r0
 800c98c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c98e:	891b      	ldrh	r3, [r3, #8]
 800c990:	461d      	mov	r5, r3
 800c992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c994:	68db      	ldr	r3, [r3, #12]
 800c996:	899b      	ldrh	r3, [r3, #12]
 800c998:	b29b      	uxth	r3, r3
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7f9 f896 	bl	8005acc <lwip_htons>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	b2db      	uxtb	r3, r3
 800c9a4:	f003 0303 	and.w	r3, r3, #3
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d001      	beq.n	800c9b0 <tcp_output+0x2a0>
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	e000      	b.n	800c9b2 <tcp_output+0x2a2>
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	442b      	add	r3, r5
 800c9b4:	4423      	add	r3, r4
 800c9b6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	1ad3      	subs	r3, r2, r3
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	da02      	bge.n	800c9ca <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	68ba      	ldr	r2, [r7, #8]
 800c9c8:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9cc:	891b      	ldrh	r3, [r3, #8]
 800c9ce:	461c      	mov	r4, r3
 800c9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d2:	68db      	ldr	r3, [r3, #12]
 800c9d4:	899b      	ldrh	r3, [r3, #12]
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7f9 f877 	bl	8005acc <lwip_htons>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	b2db      	uxtb	r3, r3
 800c9e2:	f003 0303 	and.w	r3, r3, #3
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d001      	beq.n	800c9ee <tcp_output+0x2de>
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	e000      	b.n	800c9f0 <tcp_output+0x2e0>
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	4423      	add	r3, r4
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d049      	beq.n	800ca8a <tcp_output+0x37a>
      seg->next = NULL;
 800c9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d105      	bne.n	800ca10 <tcp_output+0x300>
        pcb->unacked = seg;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca08:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800ca0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca0c:	623b      	str	r3, [r7, #32]
 800ca0e:	e03f      	b.n	800ca90 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ca10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca12:	68db      	ldr	r3, [r3, #12]
 800ca14:	685b      	ldr	r3, [r3, #4]
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7f9 f86e 	bl	8005af8 <lwip_htonl>
 800ca1c:	4604      	mov	r4, r0
 800ca1e:	6a3b      	ldr	r3, [r7, #32]
 800ca20:	68db      	ldr	r3, [r3, #12]
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	4618      	mov	r0, r3
 800ca26:	f7f9 f867 	bl	8005af8 <lwip_htonl>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	1ae3      	subs	r3, r4, r3
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	da24      	bge.n	800ca7c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	3370      	adds	r3, #112	@ 0x70
 800ca36:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ca38:	e002      	b.n	800ca40 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800ca3a:	69fb      	ldr	r3, [r7, #28]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ca40:	69fb      	ldr	r3, [r7, #28]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d011      	beq.n	800ca6c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ca48:	69fb      	ldr	r3, [r7, #28]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	68db      	ldr	r3, [r3, #12]
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	4618      	mov	r0, r3
 800ca52:	f7f9 f851 	bl	8005af8 <lwip_htonl>
 800ca56:	4604      	mov	r4, r0
 800ca58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca5a:	68db      	ldr	r3, [r3, #12]
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f7f9 f84a 	bl	8005af8 <lwip_htonl>
 800ca64:	4603      	mov	r3, r0
 800ca66:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	dbe6      	blt.n	800ca3a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800ca6c:	69fb      	ldr	r3, [r7, #28]
 800ca6e:	681a      	ldr	r2, [r3, #0]
 800ca70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca72:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ca74:	69fb      	ldr	r3, [r7, #28]
 800ca76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca78:	601a      	str	r2, [r3, #0]
 800ca7a:	e009      	b.n	800ca90 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ca7c:	6a3b      	ldr	r3, [r7, #32]
 800ca7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca80:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ca82:	6a3b      	ldr	r3, [r7, #32]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	623b      	str	r3, [r7, #32]
 800ca88:	e002      	b.n	800ca90 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ca8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ca8c:	f7fb ffab 	bl	80089e6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca94:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800ca96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d012      	beq.n	800cac2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ca9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	685b      	ldr	r3, [r3, #4]
 800caa2:	4618      	mov	r0, r3
 800caa4:	f7f9 f828 	bl	8005af8 <lwip_htonl>
 800caa8:	4602      	mov	r2, r0
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800caae:	1ad3      	subs	r3, r2, r3
 800cab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cab2:	8912      	ldrh	r2, [r2, #8]
 800cab4:	4413      	add	r3, r2
  while (seg != NULL &&
 800cab6:	69ba      	ldr	r2, [r7, #24]
 800cab8:	429a      	cmp	r2, r3
 800caba:	f4bf aed9 	bcs.w	800c870 <tcp_output+0x160>
 800cabe:	e000      	b.n	800cac2 <tcp_output+0x3b2>
      break;
 800cac0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d108      	bne.n	800cadc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2200      	movs	r2, #0
 800cace:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800cad2:	e004      	b.n	800cade <tcp_output+0x3ce>
    goto output_done;
 800cad4:	bf00      	nop
 800cad6:	e002      	b.n	800cade <tcp_output+0x3ce>
    goto output_done;
 800cad8:	bf00      	nop
 800cada:	e000      	b.n	800cade <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800cadc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	8b5b      	ldrh	r3, [r3, #26]
 800cae2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cae6:	b29a      	uxth	r2, r3
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800caec:	2300      	movs	r3, #0
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3728      	adds	r7, #40	@ 0x28
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bdb0      	pop	{r4, r5, r7, pc}
 800caf6:	bf00      	nop

0800caf8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b082      	sub	sp, #8
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d106      	bne.n	800cb14 <tcp_output_segment_busy+0x1c>
 800cb06:	4b09      	ldr	r3, [pc, #36]	@ (800cb2c <tcp_output_segment_busy+0x34>)
 800cb08:	f240 529a 	movw	r2, #1434	@ 0x59a
 800cb0c:	4908      	ldr	r1, [pc, #32]	@ (800cb30 <tcp_output_segment_busy+0x38>)
 800cb0e:	4809      	ldr	r0, [pc, #36]	@ (800cb34 <tcp_output_segment_busy+0x3c>)
 800cb10:	f004 ff50 	bl	80119b4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	7b9b      	ldrb	r3, [r3, #14]
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	d001      	beq.n	800cb22 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800cb1e:	2301      	movs	r3, #1
 800cb20:	e000      	b.n	800cb24 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800cb22:	2300      	movs	r3, #0
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3708      	adds	r7, #8
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}
 800cb2c:	080142b8 	.word	0x080142b8
 800cb30:	08014854 	.word	0x08014854
 800cb34:	0801430c 	.word	0x0801430c

0800cb38 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800cb38:	b5b0      	push	{r4, r5, r7, lr}
 800cb3a:	b08c      	sub	sp, #48	@ 0x30
 800cb3c:	af04      	add	r7, sp, #16
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	60b9      	str	r1, [r7, #8]
 800cb42:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d106      	bne.n	800cb58 <tcp_output_segment+0x20>
 800cb4a:	4b64      	ldr	r3, [pc, #400]	@ (800ccdc <tcp_output_segment+0x1a4>)
 800cb4c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800cb50:	4963      	ldr	r1, [pc, #396]	@ (800cce0 <tcp_output_segment+0x1a8>)
 800cb52:	4864      	ldr	r0, [pc, #400]	@ (800cce4 <tcp_output_segment+0x1ac>)
 800cb54:	f004 ff2e 	bl	80119b4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d106      	bne.n	800cb6c <tcp_output_segment+0x34>
 800cb5e:	4b5f      	ldr	r3, [pc, #380]	@ (800ccdc <tcp_output_segment+0x1a4>)
 800cb60:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800cb64:	4960      	ldr	r1, [pc, #384]	@ (800cce8 <tcp_output_segment+0x1b0>)
 800cb66:	485f      	ldr	r0, [pc, #380]	@ (800cce4 <tcp_output_segment+0x1ac>)
 800cb68:	f004 ff24 	bl	80119b4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d106      	bne.n	800cb80 <tcp_output_segment+0x48>
 800cb72:	4b5a      	ldr	r3, [pc, #360]	@ (800ccdc <tcp_output_segment+0x1a4>)
 800cb74:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800cb78:	495c      	ldr	r1, [pc, #368]	@ (800ccec <tcp_output_segment+0x1b4>)
 800cb7a:	485a      	ldr	r0, [pc, #360]	@ (800cce4 <tcp_output_segment+0x1ac>)
 800cb7c:	f004 ff1a 	bl	80119b4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800cb80:	68f8      	ldr	r0, [r7, #12]
 800cb82:	f7ff ffb9 	bl	800caf8 <tcp_output_segment_busy>
 800cb86:	4603      	mov	r3, r0
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d001      	beq.n	800cb90 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	e0a1      	b.n	800ccd4 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	68dc      	ldr	r4, [r3, #12]
 800cb98:	4610      	mov	r0, r2
 800cb9a:	f7f8 ffad 	bl	8005af8 <lwip_htonl>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	68dc      	ldr	r4, [r3, #12]
 800cbaa:	4610      	mov	r0, r2
 800cbac:	f7f8 ff8e 	bl	8005acc <lwip_htons>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbb8:	68ba      	ldr	r2, [r7, #8]
 800cbba:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800cbbc:	441a      	add	r2, r3
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	68db      	ldr	r3, [r3, #12]
 800cbc6:	3314      	adds	r3, #20
 800cbc8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	7a9b      	ldrb	r3, [r3, #10]
 800cbce:	f003 0301 	and.w	r3, r3, #1
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d015      	beq.n	800cc02 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	3304      	adds	r3, #4
 800cbda:	461a      	mov	r2, r3
 800cbdc:	6879      	ldr	r1, [r7, #4]
 800cbde:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800cbe2:	f7fc fa39 	bl	8009058 <tcp_eff_send_mss_netif>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800cbea:	8b7b      	ldrh	r3, [r7, #26]
 800cbec:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f7f8 ff81 	bl	8005af8 <lwip_htonl>
 800cbf6:	4602      	mov	r2, r0
 800cbf8:	69fb      	ldr	r3, [r7, #28]
 800cbfa:	601a      	str	r2, [r3, #0]
    opts += 1;
 800cbfc:	69fb      	ldr	r3, [r7, #28]
 800cbfe:	3304      	adds	r3, #4
 800cc00:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	da02      	bge.n	800cc12 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d10c      	bne.n	800cc34 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800cc1a:	4b35      	ldr	r3, [pc, #212]	@ (800ccf0 <tcp_output_segment+0x1b8>)
 800cc1c:	681a      	ldr	r2, [r3, #0]
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	68db      	ldr	r3, [r3, #12]
 800cc26:	685b      	ldr	r3, [r3, #4]
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f7f8 ff65 	bl	8005af8 <lwip_htonl>
 800cc2e:	4602      	mov	r2, r0
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	68da      	ldr	r2, [r3, #12]
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	685b      	ldr	r3, [r3, #4]
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	1ad3      	subs	r3, r2, r3
 800cc40:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	685b      	ldr	r3, [r3, #4]
 800cc46:	8959      	ldrh	r1, [r3, #10]
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	8b3a      	ldrh	r2, [r7, #24]
 800cc4e:	1a8a      	subs	r2, r1, r2
 800cc50:	b292      	uxth	r2, r2
 800cc52:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	8919      	ldrh	r1, [r3, #8]
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	8b3a      	ldrh	r2, [r7, #24]
 800cc60:	1a8a      	subs	r2, r1, r2
 800cc62:	b292      	uxth	r2, r2
 800cc64:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	685b      	ldr	r3, [r3, #4]
 800cc6a:	68fa      	ldr	r2, [r7, #12]
 800cc6c:	68d2      	ldr	r2, [r2, #12]
 800cc6e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	68db      	ldr	r3, [r3, #12]
 800cc74:	2200      	movs	r2, #0
 800cc76:	741a      	strb	r2, [r3, #16]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	68da      	ldr	r2, [r3, #12]
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	7a9b      	ldrb	r3, [r3, #10]
 800cc84:	f003 0301 	and.w	r3, r3, #1
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d001      	beq.n	800cc90 <tcp_output_segment+0x158>
 800cc8c:	2318      	movs	r3, #24
 800cc8e:	e000      	b.n	800cc92 <tcp_output_segment+0x15a>
 800cc90:	2314      	movs	r3, #20
 800cc92:	4413      	add	r3, r2
 800cc94:	69fa      	ldr	r2, [r7, #28]
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d006      	beq.n	800cca8 <tcp_output_segment+0x170>
 800cc9a:	4b10      	ldr	r3, [pc, #64]	@ (800ccdc <tcp_output_segment+0x1a4>)
 800cc9c:	f240 621c 	movw	r2, #1564	@ 0x61c
 800cca0:	4914      	ldr	r1, [pc, #80]	@ (800ccf4 <tcp_output_segment+0x1bc>)
 800cca2:	4810      	ldr	r0, [pc, #64]	@ (800cce4 <tcp_output_segment+0x1ac>)
 800cca4:	f004 fe86 	bl	80119b4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	6858      	ldr	r0, [r3, #4]
 800ccac:	68b9      	ldr	r1, [r7, #8]
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	1d1c      	adds	r4, r3, #4
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	7add      	ldrb	r5, [r3, #11]
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	7a9b      	ldrb	r3, [r3, #10]
 800ccba:	687a      	ldr	r2, [r7, #4]
 800ccbc:	9202      	str	r2, [sp, #8]
 800ccbe:	2206      	movs	r2, #6
 800ccc0:	9201      	str	r2, [sp, #4]
 800ccc2:	9300      	str	r3, [sp, #0]
 800ccc4:	462b      	mov	r3, r5
 800ccc6:	4622      	mov	r2, r4
 800ccc8:	f002 fa34 	bl	800f134 <ip4_output_if>
 800cccc:	4603      	mov	r3, r0
 800ccce:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ccd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3720      	adds	r7, #32
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bdb0      	pop	{r4, r5, r7, pc}
 800ccdc:	080142b8 	.word	0x080142b8
 800cce0:	0801487c 	.word	0x0801487c
 800cce4:	0801430c 	.word	0x0801430c
 800cce8:	0801489c 	.word	0x0801489c
 800ccec:	080148bc 	.word	0x080148bc
 800ccf0:	200083d8 	.word	0x200083d8
 800ccf4:	080148e0 	.word	0x080148e0

0800ccf8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800ccf8:	b5b0      	push	{r4, r5, r7, lr}
 800ccfa:	b084      	sub	sp, #16
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d106      	bne.n	800cd14 <tcp_rexmit_rto_prepare+0x1c>
 800cd06:	4b31      	ldr	r3, [pc, #196]	@ (800cdcc <tcp_rexmit_rto_prepare+0xd4>)
 800cd08:	f240 6263 	movw	r2, #1635	@ 0x663
 800cd0c:	4930      	ldr	r1, [pc, #192]	@ (800cdd0 <tcp_rexmit_rto_prepare+0xd8>)
 800cd0e:	4831      	ldr	r0, [pc, #196]	@ (800cdd4 <tcp_rexmit_rto_prepare+0xdc>)
 800cd10:	f004 fe50 	bl	80119b4 <iprintf>

  if (pcb->unacked == NULL) {
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d102      	bne.n	800cd22 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800cd1c:	f06f 0305 	mvn.w	r3, #5
 800cd20:	e050      	b.n	800cdc4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd26:	60fb      	str	r3, [r7, #12]
 800cd28:	e00b      	b.n	800cd42 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800cd2a:	68f8      	ldr	r0, [r7, #12]
 800cd2c:	f7ff fee4 	bl	800caf8 <tcp_output_segment_busy>
 800cd30:	4603      	mov	r3, r0
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d002      	beq.n	800cd3c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800cd36:	f06f 0305 	mvn.w	r3, #5
 800cd3a:	e043      	b.n	800cdc4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	60fb      	str	r3, [r7, #12]
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d1ef      	bne.n	800cd2a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800cd4a:	68f8      	ldr	r0, [r7, #12]
 800cd4c:	f7ff fed4 	bl	800caf8 <tcp_output_segment_busy>
 800cd50:	4603      	mov	r3, r0
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d002      	beq.n	800cd5c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800cd56:	f06f 0305 	mvn.w	r3, #5
 800cd5a:	e033      	b.n	800cdc4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2200      	movs	r2, #0
 800cd70:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	8b5b      	ldrh	r3, [r3, #26]
 800cd76:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800cd7a:	b29a      	uxth	r2, r3
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	68db      	ldr	r3, [r3, #12]
 800cd84:	685b      	ldr	r3, [r3, #4]
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7f8 feb6 	bl	8005af8 <lwip_htonl>
 800cd8c:	4604      	mov	r4, r0
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	891b      	ldrh	r3, [r3, #8]
 800cd92:	461d      	mov	r5, r3
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	68db      	ldr	r3, [r3, #12]
 800cd98:	899b      	ldrh	r3, [r3, #12]
 800cd9a:	b29b      	uxth	r3, r3
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7f8 fe95 	bl	8005acc <lwip_htons>
 800cda2:	4603      	mov	r3, r0
 800cda4:	b2db      	uxtb	r3, r3
 800cda6:	f003 0303 	and.w	r3, r3, #3
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d001      	beq.n	800cdb2 <tcp_rexmit_rto_prepare+0xba>
 800cdae:	2301      	movs	r3, #1
 800cdb0:	e000      	b.n	800cdb4 <tcp_rexmit_rto_prepare+0xbc>
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	442b      	add	r3, r5
 800cdb6:	18e2      	adds	r2, r4, r3
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800cdc2:	2300      	movs	r3, #0
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3710      	adds	r7, #16
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bdb0      	pop	{r4, r5, r7, pc}
 800cdcc:	080142b8 	.word	0x080142b8
 800cdd0:	080148f4 	.word	0x080148f4
 800cdd4:	0801430c 	.word	0x0801430c

0800cdd8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d106      	bne.n	800cdf4 <tcp_rexmit_rto_commit+0x1c>
 800cde6:	4b0d      	ldr	r3, [pc, #52]	@ (800ce1c <tcp_rexmit_rto_commit+0x44>)
 800cde8:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800cdec:	490c      	ldr	r1, [pc, #48]	@ (800ce20 <tcp_rexmit_rto_commit+0x48>)
 800cdee:	480d      	ldr	r0, [pc, #52]	@ (800ce24 <tcp_rexmit_rto_commit+0x4c>)
 800cdf0:	f004 fde0 	bl	80119b4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cdfa:	2bff      	cmp	r3, #255	@ 0xff
 800cdfc:	d007      	beq.n	800ce0e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ce04:	3301      	adds	r3, #1
 800ce06:	b2da      	uxtb	r2, r3
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f7ff fc7e 	bl	800c710 <tcp_output>
}
 800ce14:	bf00      	nop
 800ce16:	3708      	adds	r7, #8
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	080142b8 	.word	0x080142b8
 800ce20:	08014918 	.word	0x08014918
 800ce24:	0801430c 	.word	0x0801430c

0800ce28 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b082      	sub	sp, #8
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d106      	bne.n	800ce44 <tcp_rexmit_rto+0x1c>
 800ce36:	4b0a      	ldr	r3, [pc, #40]	@ (800ce60 <tcp_rexmit_rto+0x38>)
 800ce38:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800ce3c:	4909      	ldr	r1, [pc, #36]	@ (800ce64 <tcp_rexmit_rto+0x3c>)
 800ce3e:	480a      	ldr	r0, [pc, #40]	@ (800ce68 <tcp_rexmit_rto+0x40>)
 800ce40:	f004 fdb8 	bl	80119b4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f7ff ff57 	bl	800ccf8 <tcp_rexmit_rto_prepare>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d102      	bne.n	800ce56 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f7ff ffc1 	bl	800cdd8 <tcp_rexmit_rto_commit>
  }
}
 800ce56:	bf00      	nop
 800ce58:	3708      	adds	r7, #8
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}
 800ce5e:	bf00      	nop
 800ce60:	080142b8 	.word	0x080142b8
 800ce64:	0801493c 	.word	0x0801493c
 800ce68:	0801430c 	.word	0x0801430c

0800ce6c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ce6c:	b590      	push	{r4, r7, lr}
 800ce6e:	b085      	sub	sp, #20
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d106      	bne.n	800ce88 <tcp_rexmit+0x1c>
 800ce7a:	4b2f      	ldr	r3, [pc, #188]	@ (800cf38 <tcp_rexmit+0xcc>)
 800ce7c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800ce80:	492e      	ldr	r1, [pc, #184]	@ (800cf3c <tcp_rexmit+0xd0>)
 800ce82:	482f      	ldr	r0, [pc, #188]	@ (800cf40 <tcp_rexmit+0xd4>)
 800ce84:	f004 fd96 	bl	80119b4 <iprintf>

  if (pcb->unacked == NULL) {
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d102      	bne.n	800ce96 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800ce90:	f06f 0305 	mvn.w	r3, #5
 800ce94:	e04c      	b.n	800cf30 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce9a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800ce9c:	68b8      	ldr	r0, [r7, #8]
 800ce9e:	f7ff fe2b 	bl	800caf8 <tcp_output_segment_busy>
 800cea2:	4603      	mov	r3, r0
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d002      	beq.n	800ceae <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800cea8:	f06f 0305 	mvn.w	r3, #5
 800ceac:	e040      	b.n	800cf30 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	681a      	ldr	r2, [r3, #0]
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	336c      	adds	r3, #108	@ 0x6c
 800ceba:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cebc:	e002      	b.n	800cec4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d011      	beq.n	800cef0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	68db      	ldr	r3, [r3, #12]
 800ced2:	685b      	ldr	r3, [r3, #4]
 800ced4:	4618      	mov	r0, r3
 800ced6:	f7f8 fe0f 	bl	8005af8 <lwip_htonl>
 800ceda:	4604      	mov	r4, r0
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	68db      	ldr	r3, [r3, #12]
 800cee0:	685b      	ldr	r3, [r3, #4]
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7f8 fe08 	bl	8005af8 <lwip_htonl>
 800cee8:	4603      	mov	r3, r0
 800ceea:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	dbe6      	blt.n	800cebe <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	681a      	ldr	r2, [r3, #0]
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	68ba      	ldr	r2, [r7, #8]
 800cefc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d103      	bne.n	800cf0e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cf14:	2bff      	cmp	r3, #255	@ 0xff
 800cf16:	d007      	beq.n	800cf28 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cf1e:	3301      	adds	r3, #1
 800cf20:	b2da      	uxtb	r2, r3
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800cf2e:	2300      	movs	r3, #0
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3714      	adds	r7, #20
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd90      	pop	{r4, r7, pc}
 800cf38:	080142b8 	.word	0x080142b8
 800cf3c:	08014958 	.word	0x08014958
 800cf40:	0801430c 	.word	0x0801430c

0800cf44 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b082      	sub	sp, #8
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d106      	bne.n	800cf60 <tcp_rexmit_fast+0x1c>
 800cf52:	4b2a      	ldr	r3, [pc, #168]	@ (800cffc <tcp_rexmit_fast+0xb8>)
 800cf54:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800cf58:	4929      	ldr	r1, [pc, #164]	@ (800d000 <tcp_rexmit_fast+0xbc>)
 800cf5a:	482a      	ldr	r0, [pc, #168]	@ (800d004 <tcp_rexmit_fast+0xc0>)
 800cf5c:	f004 fd2a 	bl	80119b4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d044      	beq.n	800cff2 <tcp_rexmit_fast+0xae>
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	8b5b      	ldrh	r3, [r3, #26]
 800cf6c:	f003 0304 	and.w	r3, r3, #4
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d13e      	bne.n	800cff2 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f7ff ff79 	bl	800ce6c <tcp_rexmit>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d138      	bne.n	800cff2 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	bf28      	it	cs
 800cf90:	4613      	movcs	r3, r2
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	0fda      	lsrs	r2, r3, #31
 800cf96:	4413      	add	r3, r2
 800cf98:	105b      	asrs	r3, r3, #1
 800cf9a:	b29a      	uxth	r2, r3
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800cfa8:	461a      	mov	r2, r3
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cfae:	005b      	lsls	r3, r3, #1
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d206      	bcs.n	800cfc2 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cfb8:	005b      	lsls	r3, r3, #1
 800cfba:	b29a      	uxth	r2, r3
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cfcc:	4619      	mov	r1, r3
 800cfce:	0049      	lsls	r1, r1, #1
 800cfd0:	440b      	add	r3, r1
 800cfd2:	b29b      	uxth	r3, r3
 800cfd4:	4413      	add	r3, r2
 800cfd6:	b29a      	uxth	r2, r3
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	8b5b      	ldrh	r3, [r3, #26]
 800cfe2:	f043 0304 	orr.w	r3, r3, #4
 800cfe6:	b29a      	uxth	r2, r3
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2200      	movs	r2, #0
 800cff0:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800cff2:	bf00      	nop
 800cff4:	3708      	adds	r7, #8
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
 800cffa:	bf00      	nop
 800cffc:	080142b8 	.word	0x080142b8
 800d000:	08014970 	.word	0x08014970
 800d004:	0801430c 	.word	0x0801430c

0800d008 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b086      	sub	sp, #24
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	60f8      	str	r0, [r7, #12]
 800d010:	607b      	str	r3, [r7, #4]
 800d012:	460b      	mov	r3, r1
 800d014:	817b      	strh	r3, [r7, #10]
 800d016:	4613      	mov	r3, r2
 800d018:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d01a:	897a      	ldrh	r2, [r7, #10]
 800d01c:	893b      	ldrh	r3, [r7, #8]
 800d01e:	4413      	add	r3, r2
 800d020:	b29b      	uxth	r3, r3
 800d022:	3314      	adds	r3, #20
 800d024:	b29b      	uxth	r3, r3
 800d026:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d02a:	4619      	mov	r1, r3
 800d02c:	2022      	movs	r0, #34	@ 0x22
 800d02e:	f7f9 fdc7 	bl	8006bc0 <pbuf_alloc>
 800d032:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d04d      	beq.n	800d0d6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d03a:	897b      	ldrh	r3, [r7, #10]
 800d03c:	3313      	adds	r3, #19
 800d03e:	697a      	ldr	r2, [r7, #20]
 800d040:	8952      	ldrh	r2, [r2, #10]
 800d042:	4293      	cmp	r3, r2
 800d044:	db06      	blt.n	800d054 <tcp_output_alloc_header_common+0x4c>
 800d046:	4b26      	ldr	r3, [pc, #152]	@ (800d0e0 <tcp_output_alloc_header_common+0xd8>)
 800d048:	f240 7223 	movw	r2, #1827	@ 0x723
 800d04c:	4925      	ldr	r1, [pc, #148]	@ (800d0e4 <tcp_output_alloc_header_common+0xdc>)
 800d04e:	4826      	ldr	r0, [pc, #152]	@ (800d0e8 <tcp_output_alloc_header_common+0xe0>)
 800d050:	f004 fcb0 	bl	80119b4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	685b      	ldr	r3, [r3, #4]
 800d058:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d05a:	8c3b      	ldrh	r3, [r7, #32]
 800d05c:	4618      	mov	r0, r3
 800d05e:	f7f8 fd35 	bl	8005acc <lwip_htons>
 800d062:	4603      	mov	r3, r0
 800d064:	461a      	mov	r2, r3
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d06a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d06c:	4618      	mov	r0, r3
 800d06e:	f7f8 fd2d 	bl	8005acc <lwip_htons>
 800d072:	4603      	mov	r3, r0
 800d074:	461a      	mov	r2, r3
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	687a      	ldr	r2, [r7, #4]
 800d07e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d080:	68f8      	ldr	r0, [r7, #12]
 800d082:	f7f8 fd39 	bl	8005af8 <lwip_htonl>
 800d086:	4602      	mov	r2, r0
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d08c:	897b      	ldrh	r3, [r7, #10]
 800d08e:	089b      	lsrs	r3, r3, #2
 800d090:	b29b      	uxth	r3, r3
 800d092:	3305      	adds	r3, #5
 800d094:	b29b      	uxth	r3, r3
 800d096:	031b      	lsls	r3, r3, #12
 800d098:	b29a      	uxth	r2, r3
 800d09a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d09e:	b29b      	uxth	r3, r3
 800d0a0:	4313      	orrs	r3, r2
 800d0a2:	b29b      	uxth	r3, r3
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f7f8 fd11 	bl	8005acc <lwip_htons>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	461a      	mov	r2, r3
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d0b2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7f8 fd09 	bl	8005acc <lwip_htons>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	461a      	mov	r2, r3
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d0c2:	693b      	ldr	r3, [r7, #16]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	741a      	strb	r2, [r3, #16]
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d0cc:	693b      	ldr	r3, [r7, #16]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	749a      	strb	r2, [r3, #18]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800d0d6:	697b      	ldr	r3, [r7, #20]
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3718      	adds	r7, #24
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}
 800d0e0:	080142b8 	.word	0x080142b8
 800d0e4:	08014990 	.word	0x08014990
 800d0e8:	0801430c 	.word	0x0801430c

0800d0ec <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800d0ec:	b5b0      	push	{r4, r5, r7, lr}
 800d0ee:	b08a      	sub	sp, #40	@ 0x28
 800d0f0:	af04      	add	r7, sp, #16
 800d0f2:	60f8      	str	r0, [r7, #12]
 800d0f4:	607b      	str	r3, [r7, #4]
 800d0f6:	460b      	mov	r3, r1
 800d0f8:	817b      	strh	r3, [r7, #10]
 800d0fa:	4613      	mov	r3, r2
 800d0fc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d106      	bne.n	800d112 <tcp_output_alloc_header+0x26>
 800d104:	4b15      	ldr	r3, [pc, #84]	@ (800d15c <tcp_output_alloc_header+0x70>)
 800d106:	f240 7242 	movw	r2, #1858	@ 0x742
 800d10a:	4915      	ldr	r1, [pc, #84]	@ (800d160 <tcp_output_alloc_header+0x74>)
 800d10c:	4815      	ldr	r0, [pc, #84]	@ (800d164 <tcp_output_alloc_header+0x78>)
 800d10e:	f004 fc51 	bl	80119b4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	8adb      	ldrh	r3, [r3, #22]
 800d11a:	68fa      	ldr	r2, [r7, #12]
 800d11c:	8b12      	ldrh	r2, [r2, #24]
 800d11e:	68f9      	ldr	r1, [r7, #12]
 800d120:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800d122:	893d      	ldrh	r5, [r7, #8]
 800d124:	897c      	ldrh	r4, [r7, #10]
 800d126:	9103      	str	r1, [sp, #12]
 800d128:	2110      	movs	r1, #16
 800d12a:	9102      	str	r1, [sp, #8]
 800d12c:	9201      	str	r2, [sp, #4]
 800d12e:	9300      	str	r3, [sp, #0]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	462a      	mov	r2, r5
 800d134:	4621      	mov	r1, r4
 800d136:	f7ff ff67 	bl	800d008 <tcp_output_alloc_header_common>
 800d13a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d006      	beq.n	800d150 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d146:	68fa      	ldr	r2, [r7, #12]
 800d148:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800d14a:	441a      	add	r2, r3
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800d150:	697b      	ldr	r3, [r7, #20]
}
 800d152:	4618      	mov	r0, r3
 800d154:	3718      	adds	r7, #24
 800d156:	46bd      	mov	sp, r7
 800d158:	bdb0      	pop	{r4, r5, r7, pc}
 800d15a:	bf00      	nop
 800d15c:	080142b8 	.word	0x080142b8
 800d160:	080149c0 	.word	0x080149c0
 800d164:	0801430c 	.word	0x0801430c

0800d168 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b088      	sub	sp, #32
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	60f8      	str	r0, [r7, #12]
 800d170:	60b9      	str	r1, [r7, #8]
 800d172:	4611      	mov	r1, r2
 800d174:	461a      	mov	r2, r3
 800d176:	460b      	mov	r3, r1
 800d178:	71fb      	strb	r3, [r7, #7]
 800d17a:	4613      	mov	r3, r2
 800d17c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d17e:	2300      	movs	r3, #0
 800d180:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d106      	bne.n	800d196 <tcp_output_fill_options+0x2e>
 800d188:	4b12      	ldr	r3, [pc, #72]	@ (800d1d4 <tcp_output_fill_options+0x6c>)
 800d18a:	f240 7256 	movw	r2, #1878	@ 0x756
 800d18e:	4912      	ldr	r1, [pc, #72]	@ (800d1d8 <tcp_output_fill_options+0x70>)
 800d190:	4812      	ldr	r0, [pc, #72]	@ (800d1dc <tcp_output_fill_options+0x74>)
 800d192:	f004 fc0f 	bl	80119b4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	685b      	ldr	r3, [r3, #4]
 800d19a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d19c:	69bb      	ldr	r3, [r7, #24]
 800d19e:	3314      	adds	r3, #20
 800d1a0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d1a2:	8bfb      	ldrh	r3, [r7, #30]
 800d1a4:	009b      	lsls	r3, r3, #2
 800d1a6:	461a      	mov	r2, r3
 800d1a8:	79fb      	ldrb	r3, [r7, #7]
 800d1aa:	009b      	lsls	r3, r3, #2
 800d1ac:	f003 0304 	and.w	r3, r3, #4
 800d1b0:	4413      	add	r3, r2
 800d1b2:	3314      	adds	r3, #20
 800d1b4:	69ba      	ldr	r2, [r7, #24]
 800d1b6:	4413      	add	r3, r2
 800d1b8:	697a      	ldr	r2, [r7, #20]
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d006      	beq.n	800d1cc <tcp_output_fill_options+0x64>
 800d1be:	4b05      	ldr	r3, [pc, #20]	@ (800d1d4 <tcp_output_fill_options+0x6c>)
 800d1c0:	f240 7275 	movw	r2, #1909	@ 0x775
 800d1c4:	4906      	ldr	r1, [pc, #24]	@ (800d1e0 <tcp_output_fill_options+0x78>)
 800d1c6:	4805      	ldr	r0, [pc, #20]	@ (800d1dc <tcp_output_fill_options+0x74>)
 800d1c8:	f004 fbf4 	bl	80119b4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d1cc:	bf00      	nop
 800d1ce:	3720      	adds	r7, #32
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}
 800d1d4:	080142b8 	.word	0x080142b8
 800d1d8:	080149e8 	.word	0x080149e8
 800d1dc:	0801430c 	.word	0x0801430c
 800d1e0:	080148e0 	.word	0x080148e0

0800d1e4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b08a      	sub	sp, #40	@ 0x28
 800d1e8:	af04      	add	r7, sp, #16
 800d1ea:	60f8      	str	r0, [r7, #12]
 800d1ec:	60b9      	str	r1, [r7, #8]
 800d1ee:	607a      	str	r2, [r7, #4]
 800d1f0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d106      	bne.n	800d206 <tcp_output_control_segment+0x22>
 800d1f8:	4b1c      	ldr	r3, [pc, #112]	@ (800d26c <tcp_output_control_segment+0x88>)
 800d1fa:	f240 7287 	movw	r2, #1927	@ 0x787
 800d1fe:	491c      	ldr	r1, [pc, #112]	@ (800d270 <tcp_output_control_segment+0x8c>)
 800d200:	481c      	ldr	r0, [pc, #112]	@ (800d274 <tcp_output_control_segment+0x90>)
 800d202:	f004 fbd7 	bl	80119b4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800d206:	683a      	ldr	r2, [r7, #0]
 800d208:	6879      	ldr	r1, [r7, #4]
 800d20a:	68f8      	ldr	r0, [r7, #12]
 800d20c:	f7fe faea 	bl	800b7e4 <tcp_route>
 800d210:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d102      	bne.n	800d21e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800d218:	23fc      	movs	r3, #252	@ 0xfc
 800d21a:	75fb      	strb	r3, [r7, #23]
 800d21c:	e01c      	b.n	800d258 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d006      	beq.n	800d232 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	7adb      	ldrb	r3, [r3, #11]
 800d228:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	7a9b      	ldrb	r3, [r3, #10]
 800d22e:	757b      	strb	r3, [r7, #21]
 800d230:	e003      	b.n	800d23a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800d232:	23ff      	movs	r3, #255	@ 0xff
 800d234:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800d236:	2300      	movs	r3, #0
 800d238:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d23a:	7dba      	ldrb	r2, [r7, #22]
 800d23c:	693b      	ldr	r3, [r7, #16]
 800d23e:	9302      	str	r3, [sp, #8]
 800d240:	2306      	movs	r3, #6
 800d242:	9301      	str	r3, [sp, #4]
 800d244:	7d7b      	ldrb	r3, [r7, #21]
 800d246:	9300      	str	r3, [sp, #0]
 800d248:	4613      	mov	r3, r2
 800d24a:	683a      	ldr	r2, [r7, #0]
 800d24c:	6879      	ldr	r1, [r7, #4]
 800d24e:	68b8      	ldr	r0, [r7, #8]
 800d250:	f001 ff70 	bl	800f134 <ip4_output_if>
 800d254:	4603      	mov	r3, r0
 800d256:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d258:	68b8      	ldr	r0, [r7, #8]
 800d25a:	f7f9 ff95 	bl	8007188 <pbuf_free>
  return err;
 800d25e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d262:	4618      	mov	r0, r3
 800d264:	3718      	adds	r7, #24
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
 800d26a:	bf00      	nop
 800d26c:	080142b8 	.word	0x080142b8
 800d270:	08014a10 	.word	0x08014a10
 800d274:	0801430c 	.word	0x0801430c

0800d278 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d278:	b590      	push	{r4, r7, lr}
 800d27a:	b08b      	sub	sp, #44	@ 0x2c
 800d27c:	af04      	add	r7, sp, #16
 800d27e:	60f8      	str	r0, [r7, #12]
 800d280:	60b9      	str	r1, [r7, #8]
 800d282:	607a      	str	r2, [r7, #4]
 800d284:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d106      	bne.n	800d29a <tcp_rst+0x22>
 800d28c:	4b1f      	ldr	r3, [pc, #124]	@ (800d30c <tcp_rst+0x94>)
 800d28e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800d292:	491f      	ldr	r1, [pc, #124]	@ (800d310 <tcp_rst+0x98>)
 800d294:	481f      	ldr	r0, [pc, #124]	@ (800d314 <tcp_rst+0x9c>)
 800d296:	f004 fb8d 	bl	80119b4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d29a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d106      	bne.n	800d2ae <tcp_rst+0x36>
 800d2a0:	4b1a      	ldr	r3, [pc, #104]	@ (800d30c <tcp_rst+0x94>)
 800d2a2:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800d2a6:	491c      	ldr	r1, [pc, #112]	@ (800d318 <tcp_rst+0xa0>)
 800d2a8:	481a      	ldr	r0, [pc, #104]	@ (800d314 <tcp_rst+0x9c>)
 800d2aa:	f004 fb83 	bl	80119b4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d2b2:	f246 0308 	movw	r3, #24584	@ 0x6008
 800d2b6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d2b8:	7dfb      	ldrb	r3, [r7, #23]
 800d2ba:	b29c      	uxth	r4, r3
 800d2bc:	68b8      	ldr	r0, [r7, #8]
 800d2be:	f7f8 fc1b 	bl	8005af8 <lwip_htonl>
 800d2c2:	4602      	mov	r2, r0
 800d2c4:	8abb      	ldrh	r3, [r7, #20]
 800d2c6:	9303      	str	r3, [sp, #12]
 800d2c8:	2314      	movs	r3, #20
 800d2ca:	9302      	str	r3, [sp, #8]
 800d2cc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800d2ce:	9301      	str	r3, [sp, #4]
 800d2d0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d2d2:	9300      	str	r3, [sp, #0]
 800d2d4:	4613      	mov	r3, r2
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	4621      	mov	r1, r4
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f7ff fe94 	bl	800d008 <tcp_output_alloc_header_common>
 800d2e0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d00c      	beq.n	800d302 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d2e8:	7dfb      	ldrb	r3, [r7, #23]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	6939      	ldr	r1, [r7, #16]
 800d2ee:	68f8      	ldr	r0, [r7, #12]
 800d2f0:	f7ff ff3a 	bl	800d168 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2f6:	683a      	ldr	r2, [r7, #0]
 800d2f8:	6939      	ldr	r1, [r7, #16]
 800d2fa:	68f8      	ldr	r0, [r7, #12]
 800d2fc:	f7ff ff72 	bl	800d1e4 <tcp_output_control_segment>
 800d300:	e000      	b.n	800d304 <tcp_rst+0x8c>
    return;
 800d302:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d304:	371c      	adds	r7, #28
 800d306:	46bd      	mov	sp, r7
 800d308:	bd90      	pop	{r4, r7, pc}
 800d30a:	bf00      	nop
 800d30c:	080142b8 	.word	0x080142b8
 800d310:	08014a3c 	.word	0x08014a3c
 800d314:	0801430c 	.word	0x0801430c
 800d318:	08014a58 	.word	0x08014a58

0800d31c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d31c:	b590      	push	{r4, r7, lr}
 800d31e:	b087      	sub	sp, #28
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d324:	2300      	movs	r3, #0
 800d326:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d328:	2300      	movs	r3, #0
 800d32a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d106      	bne.n	800d340 <tcp_send_empty_ack+0x24>
 800d332:	4b28      	ldr	r3, [pc, #160]	@ (800d3d4 <tcp_send_empty_ack+0xb8>)
 800d334:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800d338:	4927      	ldr	r1, [pc, #156]	@ (800d3d8 <tcp_send_empty_ack+0xbc>)
 800d33a:	4828      	ldr	r0, [pc, #160]	@ (800d3dc <tcp_send_empty_ack+0xc0>)
 800d33c:	f004 fb3a 	bl	80119b4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d340:	7dfb      	ldrb	r3, [r7, #23]
 800d342:	009b      	lsls	r3, r3, #2
 800d344:	b2db      	uxtb	r3, r3
 800d346:	f003 0304 	and.w	r3, r3, #4
 800d34a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d34c:	7d7b      	ldrb	r3, [r7, #21]
 800d34e:	b29c      	uxth	r4, r3
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d354:	4618      	mov	r0, r3
 800d356:	f7f8 fbcf 	bl	8005af8 <lwip_htonl>
 800d35a:	4603      	mov	r3, r0
 800d35c:	2200      	movs	r2, #0
 800d35e:	4621      	mov	r1, r4
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	f7ff fec3 	bl	800d0ec <tcp_output_alloc_header>
 800d366:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d109      	bne.n	800d382 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	8b5b      	ldrh	r3, [r3, #26]
 800d372:	f043 0303 	orr.w	r3, r3, #3
 800d376:	b29a      	uxth	r2, r3
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d37c:	f06f 0301 	mvn.w	r3, #1
 800d380:	e023      	b.n	800d3ca <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d382:	7dbb      	ldrb	r3, [r7, #22]
 800d384:	7dfa      	ldrb	r2, [r7, #23]
 800d386:	6939      	ldr	r1, [r7, #16]
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f7ff feed 	bl	800d168 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d38e:	687a      	ldr	r2, [r7, #4]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	3304      	adds	r3, #4
 800d394:	6939      	ldr	r1, [r7, #16]
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f7ff ff24 	bl	800d1e4 <tcp_output_control_segment>
 800d39c:	4603      	mov	r3, r0
 800d39e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d3a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d007      	beq.n	800d3b8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	8b5b      	ldrh	r3, [r3, #26]
 800d3ac:	f043 0303 	orr.w	r3, r3, #3
 800d3b0:	b29a      	uxth	r2, r3
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	835a      	strh	r2, [r3, #26]
 800d3b6:	e006      	b.n	800d3c6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	8b5b      	ldrh	r3, [r3, #26]
 800d3bc:	f023 0303 	bic.w	r3, r3, #3
 800d3c0:	b29a      	uxth	r2, r3
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d3c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	371c      	adds	r7, #28
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd90      	pop	{r4, r7, pc}
 800d3d2:	bf00      	nop
 800d3d4:	080142b8 	.word	0x080142b8
 800d3d8:	08014a74 	.word	0x08014a74
 800d3dc:	0801430c 	.word	0x0801430c

0800d3e0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d3e0:	b590      	push	{r4, r7, lr}
 800d3e2:	b087      	sub	sp, #28
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d106      	bne.n	800d400 <tcp_keepalive+0x20>
 800d3f2:	4b18      	ldr	r3, [pc, #96]	@ (800d454 <tcp_keepalive+0x74>)
 800d3f4:	f640 0224 	movw	r2, #2084	@ 0x824
 800d3f8:	4917      	ldr	r1, [pc, #92]	@ (800d458 <tcp_keepalive+0x78>)
 800d3fa:	4818      	ldr	r0, [pc, #96]	@ (800d45c <tcp_keepalive+0x7c>)
 800d3fc:	f004 fada 	bl	80119b4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d400:	7dfb      	ldrb	r3, [r7, #23]
 800d402:	b29c      	uxth	r4, r3
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d408:	3b01      	subs	r3, #1
 800d40a:	4618      	mov	r0, r3
 800d40c:	f7f8 fb74 	bl	8005af8 <lwip_htonl>
 800d410:	4603      	mov	r3, r0
 800d412:	2200      	movs	r2, #0
 800d414:	4621      	mov	r1, r4
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f7ff fe68 	bl	800d0ec <tcp_output_alloc_header>
 800d41c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d102      	bne.n	800d42a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d424:	f04f 33ff 	mov.w	r3, #4294967295
 800d428:	e010      	b.n	800d44c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d42a:	7dfb      	ldrb	r3, [r7, #23]
 800d42c:	2200      	movs	r2, #0
 800d42e:	6939      	ldr	r1, [r7, #16]
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f7ff fe99 	bl	800d168 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d436:	687a      	ldr	r2, [r7, #4]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	3304      	adds	r3, #4
 800d43c:	6939      	ldr	r1, [r7, #16]
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f7ff fed0 	bl	800d1e4 <tcp_output_control_segment>
 800d444:	4603      	mov	r3, r0
 800d446:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d448:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	371c      	adds	r7, #28
 800d450:	46bd      	mov	sp, r7
 800d452:	bd90      	pop	{r4, r7, pc}
 800d454:	080142b8 	.word	0x080142b8
 800d458:	08014a94 	.word	0x08014a94
 800d45c:	0801430c 	.word	0x0801430c

0800d460 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d460:	b590      	push	{r4, r7, lr}
 800d462:	b08b      	sub	sp, #44	@ 0x2c
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d468:	2300      	movs	r3, #0
 800d46a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d106      	bne.n	800d482 <tcp_zero_window_probe+0x22>
 800d474:	4b4c      	ldr	r3, [pc, #304]	@ (800d5a8 <tcp_zero_window_probe+0x148>)
 800d476:	f640 024f 	movw	r2, #2127	@ 0x84f
 800d47a:	494c      	ldr	r1, [pc, #304]	@ (800d5ac <tcp_zero_window_probe+0x14c>)
 800d47c:	484c      	ldr	r0, [pc, #304]	@ (800d5b0 <tcp_zero_window_probe+0x150>)
 800d47e:	f004 fa99 	bl	80119b4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d486:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d488:	6a3b      	ldr	r3, [r7, #32]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d101      	bne.n	800d492 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d48e:	2300      	movs	r3, #0
 800d490:	e086      	b.n	800d5a0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800d498:	2bff      	cmp	r3, #255	@ 0xff
 800d49a:	d007      	beq.n	800d4ac <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	b2da      	uxtb	r2, r3
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d4ac:	6a3b      	ldr	r3, [r7, #32]
 800d4ae:	68db      	ldr	r3, [r3, #12]
 800d4b0:	899b      	ldrh	r3, [r3, #12]
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f7f8 fb09 	bl	8005acc <lwip_htons>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	b2db      	uxtb	r3, r3
 800d4be:	f003 0301 	and.w	r3, r3, #1
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d005      	beq.n	800d4d2 <tcp_zero_window_probe+0x72>
 800d4c6:	6a3b      	ldr	r3, [r7, #32]
 800d4c8:	891b      	ldrh	r3, [r3, #8]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d101      	bne.n	800d4d2 <tcp_zero_window_probe+0x72>
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	e000      	b.n	800d4d4 <tcp_zero_window_probe+0x74>
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d4d6:	7ffb      	ldrb	r3, [r7, #31]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	bf0c      	ite	eq
 800d4dc:	2301      	moveq	r3, #1
 800d4de:	2300      	movne	r3, #0
 800d4e0:	b2db      	uxtb	r3, r3
 800d4e2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d4e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d4e8:	b299      	uxth	r1, r3
 800d4ea:	6a3b      	ldr	r3, [r7, #32]
 800d4ec:	68db      	ldr	r3, [r3, #12]
 800d4ee:	685b      	ldr	r3, [r3, #4]
 800d4f0:	8bba      	ldrh	r2, [r7, #28]
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f7ff fdfa 	bl	800d0ec <tcp_output_alloc_header>
 800d4f8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d4fa:	69bb      	ldr	r3, [r7, #24]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d102      	bne.n	800d506 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d500:	f04f 33ff 	mov.w	r3, #4294967295
 800d504:	e04c      	b.n	800d5a0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d506:	69bb      	ldr	r3, [r7, #24]
 800d508:	685b      	ldr	r3, [r3, #4]
 800d50a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d50c:	7ffb      	ldrb	r3, [r7, #31]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d011      	beq.n	800d536 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	899b      	ldrh	r3, [r3, #12]
 800d516:	b29b      	uxth	r3, r3
 800d518:	b21b      	sxth	r3, r3
 800d51a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d51e:	b21c      	sxth	r4, r3
 800d520:	2011      	movs	r0, #17
 800d522:	f7f8 fad3 	bl	8005acc <lwip_htons>
 800d526:	4603      	mov	r3, r0
 800d528:	b21b      	sxth	r3, r3
 800d52a:	4323      	orrs	r3, r4
 800d52c:	b21b      	sxth	r3, r3
 800d52e:	b29a      	uxth	r2, r3
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	819a      	strh	r2, [r3, #12]
 800d534:	e010      	b.n	800d558 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d536:	69bb      	ldr	r3, [r7, #24]
 800d538:	685b      	ldr	r3, [r3, #4]
 800d53a:	3314      	adds	r3, #20
 800d53c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d53e:	6a3b      	ldr	r3, [r7, #32]
 800d540:	6858      	ldr	r0, [r3, #4]
 800d542:	6a3b      	ldr	r3, [r7, #32]
 800d544:	685b      	ldr	r3, [r3, #4]
 800d546:	891a      	ldrh	r2, [r3, #8]
 800d548:	6a3b      	ldr	r3, [r7, #32]
 800d54a:	891b      	ldrh	r3, [r3, #8]
 800d54c:	1ad3      	subs	r3, r2, r3
 800d54e:	b29b      	uxth	r3, r3
 800d550:	2201      	movs	r2, #1
 800d552:	6939      	ldr	r1, [r7, #16]
 800d554:	f7fa f802 	bl	800755c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d558:	6a3b      	ldr	r3, [r7, #32]
 800d55a:	68db      	ldr	r3, [r3, #12]
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	4618      	mov	r0, r3
 800d560:	f7f8 faca 	bl	8005af8 <lwip_htonl>
 800d564:	4603      	mov	r3, r0
 800d566:	3301      	adds	r3, #1
 800d568:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	1ad3      	subs	r3, r2, r3
 800d572:	2b00      	cmp	r3, #0
 800d574:	da02      	bge.n	800d57c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	68fa      	ldr	r2, [r7, #12]
 800d57a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d57c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d580:	2200      	movs	r2, #0
 800d582:	69b9      	ldr	r1, [r7, #24]
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f7ff fdef 	bl	800d168 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d58a:	687a      	ldr	r2, [r7, #4]
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	3304      	adds	r3, #4
 800d590:	69b9      	ldr	r1, [r7, #24]
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f7ff fe26 	bl	800d1e4 <tcp_output_control_segment>
 800d598:	4603      	mov	r3, r0
 800d59a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d59c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	372c      	adds	r7, #44	@ 0x2c
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd90      	pop	{r4, r7, pc}
 800d5a8:	080142b8 	.word	0x080142b8
 800d5ac:	08014ab0 	.word	0x08014ab0
 800d5b0:	0801430c 	.word	0x0801430c

0800d5b4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b082      	sub	sp, #8
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d5bc:	f7fa f8bc 	bl	8007738 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d5c0:	4b0a      	ldr	r3, [pc, #40]	@ (800d5ec <tcpip_tcp_timer+0x38>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d103      	bne.n	800d5d0 <tcpip_tcp_timer+0x1c>
 800d5c8:	4b09      	ldr	r3, [pc, #36]	@ (800d5f0 <tcpip_tcp_timer+0x3c>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d005      	beq.n	800d5dc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	4908      	ldr	r1, [pc, #32]	@ (800d5f4 <tcpip_tcp_timer+0x40>)
 800d5d4:	20fa      	movs	r0, #250	@ 0xfa
 800d5d6:	f000 f8f3 	bl	800d7c0 <sys_timeout>
 800d5da:	e003      	b.n	800d5e4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d5dc:	4b06      	ldr	r3, [pc, #24]	@ (800d5f8 <tcpip_tcp_timer+0x44>)
 800d5de:	2200      	movs	r2, #0
 800d5e0:	601a      	str	r2, [r3, #0]
  }
}
 800d5e2:	bf00      	nop
 800d5e4:	bf00      	nop
 800d5e6:	3708      	adds	r7, #8
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	200083e4 	.word	0x200083e4
 800d5f0:	200083e8 	.word	0x200083e8
 800d5f4:	0800d5b5 	.word	0x0800d5b5
 800d5f8:	20008430 	.word	0x20008430

0800d5fc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d600:	4b0a      	ldr	r3, [pc, #40]	@ (800d62c <tcp_timer_needed+0x30>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d10f      	bne.n	800d628 <tcp_timer_needed+0x2c>
 800d608:	4b09      	ldr	r3, [pc, #36]	@ (800d630 <tcp_timer_needed+0x34>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d103      	bne.n	800d618 <tcp_timer_needed+0x1c>
 800d610:	4b08      	ldr	r3, [pc, #32]	@ (800d634 <tcp_timer_needed+0x38>)
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d007      	beq.n	800d628 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d618:	4b04      	ldr	r3, [pc, #16]	@ (800d62c <tcp_timer_needed+0x30>)
 800d61a:	2201      	movs	r2, #1
 800d61c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d61e:	2200      	movs	r2, #0
 800d620:	4905      	ldr	r1, [pc, #20]	@ (800d638 <tcp_timer_needed+0x3c>)
 800d622:	20fa      	movs	r0, #250	@ 0xfa
 800d624:	f000 f8cc 	bl	800d7c0 <sys_timeout>
  }
}
 800d628:	bf00      	nop
 800d62a:	bd80      	pop	{r7, pc}
 800d62c:	20008430 	.word	0x20008430
 800d630:	200083e4 	.word	0x200083e4
 800d634:	200083e8 	.word	0x200083e8
 800d638:	0800d5b5 	.word	0x0800d5b5

0800d63c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b086      	sub	sp, #24
 800d640:	af00      	add	r7, sp, #0
 800d642:	60f8      	str	r0, [r7, #12]
 800d644:	60b9      	str	r1, [r7, #8]
 800d646:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d648:	2006      	movs	r0, #6
 800d64a:	f7f8 feb7 	bl	80063bc <memp_malloc>
 800d64e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d109      	bne.n	800d66a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d151      	bne.n	800d700 <sys_timeout_abs+0xc4>
 800d65c:	4b2a      	ldr	r3, [pc, #168]	@ (800d708 <sys_timeout_abs+0xcc>)
 800d65e:	22be      	movs	r2, #190	@ 0xbe
 800d660:	492a      	ldr	r1, [pc, #168]	@ (800d70c <sys_timeout_abs+0xd0>)
 800d662:	482b      	ldr	r0, [pc, #172]	@ (800d710 <sys_timeout_abs+0xd4>)
 800d664:	f004 f9a6 	bl	80119b4 <iprintf>
    return;
 800d668:	e04a      	b.n	800d700 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	2200      	movs	r2, #0
 800d66e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	68ba      	ldr	r2, [r7, #8]
 800d674:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d676:	693b      	ldr	r3, [r7, #16]
 800d678:	687a      	ldr	r2, [r7, #4]
 800d67a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d67c:	693b      	ldr	r3, [r7, #16]
 800d67e:	68fa      	ldr	r2, [r7, #12]
 800d680:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d682:	4b24      	ldr	r3, [pc, #144]	@ (800d714 <sys_timeout_abs+0xd8>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d103      	bne.n	800d692 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800d68a:	4a22      	ldr	r2, [pc, #136]	@ (800d714 <sys_timeout_abs+0xd8>)
 800d68c:	693b      	ldr	r3, [r7, #16]
 800d68e:	6013      	str	r3, [r2, #0]
    return;
 800d690:	e037      	b.n	800d702 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d692:	693b      	ldr	r3, [r7, #16]
 800d694:	685a      	ldr	r2, [r3, #4]
 800d696:	4b1f      	ldr	r3, [pc, #124]	@ (800d714 <sys_timeout_abs+0xd8>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	685b      	ldr	r3, [r3, #4]
 800d69c:	1ad3      	subs	r3, r2, r3
 800d69e:	0fdb      	lsrs	r3, r3, #31
 800d6a0:	f003 0301 	and.w	r3, r3, #1
 800d6a4:	b2db      	uxtb	r3, r3
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d007      	beq.n	800d6ba <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d6aa:	4b1a      	ldr	r3, [pc, #104]	@ (800d714 <sys_timeout_abs+0xd8>)
 800d6ac:	681a      	ldr	r2, [r3, #0]
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d6b2:	4a18      	ldr	r2, [pc, #96]	@ (800d714 <sys_timeout_abs+0xd8>)
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	6013      	str	r3, [r2, #0]
 800d6b8:	e023      	b.n	800d702 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d6ba:	4b16      	ldr	r3, [pc, #88]	@ (800d714 <sys_timeout_abs+0xd8>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	617b      	str	r3, [r7, #20]
 800d6c0:	e01a      	b.n	800d6f8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d00b      	beq.n	800d6e2 <sys_timeout_abs+0xa6>
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	685a      	ldr	r2, [r3, #4]
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	685b      	ldr	r3, [r3, #4]
 800d6d4:	1ad3      	subs	r3, r2, r3
 800d6d6:	0fdb      	lsrs	r3, r3, #31
 800d6d8:	f003 0301 	and.w	r3, r3, #1
 800d6dc:	b2db      	uxtb	r3, r3
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d007      	beq.n	800d6f2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	681a      	ldr	r2, [r3, #0]
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	693a      	ldr	r2, [r7, #16]
 800d6ee:	601a      	str	r2, [r3, #0]
        break;
 800d6f0:	e007      	b.n	800d702 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	617b      	str	r3, [r7, #20]
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d1e1      	bne.n	800d6c2 <sys_timeout_abs+0x86>
 800d6fe:	e000      	b.n	800d702 <sys_timeout_abs+0xc6>
    return;
 800d700:	bf00      	nop
      }
    }
  }
}
 800d702:	3718      	adds	r7, #24
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}
 800d708:	08014ad4 	.word	0x08014ad4
 800d70c:	08014b08 	.word	0x08014b08
 800d710:	08014b48 	.word	0x08014b48
 800d714:	20008428 	.word	0x20008428

0800d718 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b086      	sub	sp, #24
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	685b      	ldr	r3, [r3, #4]
 800d728:	4798      	blx	r3

  now = sys_now();
 800d72a:	f7f7 ffcf 	bl	80056cc <sys_now>
 800d72e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	681a      	ldr	r2, [r3, #0]
 800d734:	4b0f      	ldr	r3, [pc, #60]	@ (800d774 <lwip_cyclic_timer+0x5c>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4413      	add	r3, r2
 800d73a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d73c:	68fa      	ldr	r2, [r7, #12]
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	1ad3      	subs	r3, r2, r3
 800d742:	0fdb      	lsrs	r3, r3, #31
 800d744:	f003 0301 	and.w	r3, r3, #1
 800d748:	b2db      	uxtb	r3, r3
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d009      	beq.n	800d762 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	681a      	ldr	r2, [r3, #0]
 800d752:	693b      	ldr	r3, [r7, #16]
 800d754:	4413      	add	r3, r2
 800d756:	687a      	ldr	r2, [r7, #4]
 800d758:	4907      	ldr	r1, [pc, #28]	@ (800d778 <lwip_cyclic_timer+0x60>)
 800d75a:	4618      	mov	r0, r3
 800d75c:	f7ff ff6e 	bl	800d63c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d760:	e004      	b.n	800d76c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d762:	687a      	ldr	r2, [r7, #4]
 800d764:	4904      	ldr	r1, [pc, #16]	@ (800d778 <lwip_cyclic_timer+0x60>)
 800d766:	68f8      	ldr	r0, [r7, #12]
 800d768:	f7ff ff68 	bl	800d63c <sys_timeout_abs>
}
 800d76c:	bf00      	nop
 800d76e:	3718      	adds	r7, #24
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}
 800d774:	2000842c 	.word	0x2000842c
 800d778:	0800d719 	.word	0x0800d719

0800d77c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b082      	sub	sp, #8
 800d780:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d782:	2301      	movs	r3, #1
 800d784:	607b      	str	r3, [r7, #4]
 800d786:	e00e      	b.n	800d7a6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d788:	4a0b      	ldr	r2, [pc, #44]	@ (800d7b8 <sys_timeouts_init+0x3c>)
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	00db      	lsls	r3, r3, #3
 800d794:	4a08      	ldr	r2, [pc, #32]	@ (800d7b8 <sys_timeouts_init+0x3c>)
 800d796:	4413      	add	r3, r2
 800d798:	461a      	mov	r2, r3
 800d79a:	4908      	ldr	r1, [pc, #32]	@ (800d7bc <sys_timeouts_init+0x40>)
 800d79c:	f000 f810 	bl	800d7c0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	607b      	str	r3, [r7, #4]
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2b02      	cmp	r3, #2
 800d7aa:	d9ed      	bls.n	800d788 <sys_timeouts_init+0xc>
  }
}
 800d7ac:	bf00      	nop
 800d7ae:	bf00      	nop
 800d7b0:	3708      	adds	r7, #8
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
 800d7b6:	bf00      	nop
 800d7b8:	08015814 	.word	0x08015814
 800d7bc:	0800d719 	.word	0x0800d719

0800d7c0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b086      	sub	sp, #24
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	60f8      	str	r0, [r7, #12]
 800d7c8:	60b9      	str	r1, [r7, #8]
 800d7ca:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7d2:	d306      	bcc.n	800d7e2 <sys_timeout+0x22>
 800d7d4:	4b0a      	ldr	r3, [pc, #40]	@ (800d800 <sys_timeout+0x40>)
 800d7d6:	f240 1229 	movw	r2, #297	@ 0x129
 800d7da:	490a      	ldr	r1, [pc, #40]	@ (800d804 <sys_timeout+0x44>)
 800d7dc:	480a      	ldr	r0, [pc, #40]	@ (800d808 <sys_timeout+0x48>)
 800d7de:	f004 f8e9 	bl	80119b4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d7e2:	f7f7 ff73 	bl	80056cc <sys_now>
 800d7e6:	4602      	mov	r2, r0
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	4413      	add	r3, r2
 800d7ec:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d7ee:	687a      	ldr	r2, [r7, #4]
 800d7f0:	68b9      	ldr	r1, [r7, #8]
 800d7f2:	6978      	ldr	r0, [r7, #20]
 800d7f4:	f7ff ff22 	bl	800d63c <sys_timeout_abs>
#endif
}
 800d7f8:	bf00      	nop
 800d7fa:	3718      	adds	r7, #24
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}
 800d800:	08014ad4 	.word	0x08014ad4
 800d804:	08014b70 	.word	0x08014b70
 800d808:	08014b48 	.word	0x08014b48

0800d80c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b084      	sub	sp, #16
 800d810:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d812:	f7f7 ff5b 	bl	80056cc <sys_now>
 800d816:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800d818:	4b1a      	ldr	r3, [pc, #104]	@ (800d884 <sys_check_timeouts+0x78>)
 800d81a:	781b      	ldrb	r3, [r3, #0]
 800d81c:	b2db      	uxtb	r3, r3
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d001      	beq.n	800d826 <sys_check_timeouts+0x1a>
 800d822:	f7f9 f977 	bl	8006b14 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800d826:	4b18      	ldr	r3, [pc, #96]	@ (800d888 <sys_check_timeouts+0x7c>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d022      	beq.n	800d878 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	685b      	ldr	r3, [r3, #4]
 800d836:	68fa      	ldr	r2, [r7, #12]
 800d838:	1ad3      	subs	r3, r2, r3
 800d83a:	0fdb      	lsrs	r3, r3, #31
 800d83c:	f003 0301 	and.w	r3, r3, #1
 800d840:	b2db      	uxtb	r3, r3
 800d842:	2b00      	cmp	r3, #0
 800d844:	d11a      	bne.n	800d87c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	4a0f      	ldr	r2, [pc, #60]	@ (800d888 <sys_check_timeouts+0x7c>)
 800d84c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	689b      	ldr	r3, [r3, #8]
 800d852:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	68db      	ldr	r3, [r3, #12]
 800d858:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	685b      	ldr	r3, [r3, #4]
 800d85e:	4a0b      	ldr	r2, [pc, #44]	@ (800d88c <sys_check_timeouts+0x80>)
 800d860:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d862:	68b9      	ldr	r1, [r7, #8]
 800d864:	2006      	movs	r0, #6
 800d866:	f7f8 fe19 	bl	800649c <memp_free>
    if (handler != NULL) {
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d0d3      	beq.n	800d818 <sys_check_timeouts+0xc>
      handler(arg);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	6838      	ldr	r0, [r7, #0]
 800d874:	4798      	blx	r3
  do {
 800d876:	e7cf      	b.n	800d818 <sys_check_timeouts+0xc>
      return;
 800d878:	bf00      	nop
 800d87a:	e000      	b.n	800d87e <sys_check_timeouts+0x72>
      return;
 800d87c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d87e:	3710      	adds	r7, #16
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}
 800d884:	200083d5 	.word	0x200083d5
 800d888:	20008428 	.word	0x20008428
 800d88c:	2000842c 	.word	0x2000842c

0800d890 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d894:	f003 ff7c 	bl	8011790 <rand>
 800d898:	4603      	mov	r3, r0
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d8a0:	b29b      	uxth	r3, r3
 800d8a2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800d8a6:	b29a      	uxth	r2, r3
 800d8a8:	4b01      	ldr	r3, [pc, #4]	@ (800d8b0 <udp_init+0x20>)
 800d8aa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d8ac:	bf00      	nop
 800d8ae:	bd80      	pop	{r7, pc}
 800d8b0:	20000028 	.word	0x20000028

0800d8b4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b084      	sub	sp, #16
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	60f8      	str	r0, [r7, #12]
 800d8bc:	60b9      	str	r1, [r7, #8]
 800d8be:	4613      	mov	r3, r2
 800d8c0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d105      	bne.n	800d8d4 <udp_input_local_match+0x20>
 800d8c8:	4b27      	ldr	r3, [pc, #156]	@ (800d968 <udp_input_local_match+0xb4>)
 800d8ca:	2287      	movs	r2, #135	@ 0x87
 800d8cc:	4927      	ldr	r1, [pc, #156]	@ (800d96c <udp_input_local_match+0xb8>)
 800d8ce:	4828      	ldr	r0, [pc, #160]	@ (800d970 <udp_input_local_match+0xbc>)
 800d8d0:	f004 f870 	bl	80119b4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d105      	bne.n	800d8e6 <udp_input_local_match+0x32>
 800d8da:	4b23      	ldr	r3, [pc, #140]	@ (800d968 <udp_input_local_match+0xb4>)
 800d8dc:	2288      	movs	r2, #136	@ 0x88
 800d8de:	4925      	ldr	r1, [pc, #148]	@ (800d974 <udp_input_local_match+0xc0>)
 800d8e0:	4823      	ldr	r0, [pc, #140]	@ (800d970 <udp_input_local_match+0xbc>)
 800d8e2:	f004 f867 	bl	80119b4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	7a1b      	ldrb	r3, [r3, #8]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d00b      	beq.n	800d906 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	7a1a      	ldrb	r2, [r3, #8]
 800d8f2:	4b21      	ldr	r3, [pc, #132]	@ (800d978 <udp_input_local_match+0xc4>)
 800d8f4:	685b      	ldr	r3, [r3, #4]
 800d8f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d8fe:	429a      	cmp	r2, r3
 800d900:	d001      	beq.n	800d906 <udp_input_local_match+0x52>
    return 0;
 800d902:	2300      	movs	r3, #0
 800d904:	e02b      	b.n	800d95e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d906:	79fb      	ldrb	r3, [r7, #7]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d018      	beq.n	800d93e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d013      	beq.n	800d93a <udp_input_local_match+0x86>
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d00f      	beq.n	800d93a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d91a:	4b17      	ldr	r3, [pc, #92]	@ (800d978 <udp_input_local_match+0xc4>)
 800d91c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d91e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d922:	d00a      	beq.n	800d93a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	681a      	ldr	r2, [r3, #0]
 800d928:	4b13      	ldr	r3, [pc, #76]	@ (800d978 <udp_input_local_match+0xc4>)
 800d92a:	695b      	ldr	r3, [r3, #20]
 800d92c:	405a      	eors	r2, r3
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	3308      	adds	r3, #8
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d936:	2b00      	cmp	r3, #0
 800d938:	d110      	bne.n	800d95c <udp_input_local_match+0xa8>
          return 1;
 800d93a:	2301      	movs	r3, #1
 800d93c:	e00f      	b.n	800d95e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d009      	beq.n	800d958 <udp_input_local_match+0xa4>
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d005      	beq.n	800d958 <udp_input_local_match+0xa4>
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	681a      	ldr	r2, [r3, #0]
 800d950:	4b09      	ldr	r3, [pc, #36]	@ (800d978 <udp_input_local_match+0xc4>)
 800d952:	695b      	ldr	r3, [r3, #20]
 800d954:	429a      	cmp	r2, r3
 800d956:	d101      	bne.n	800d95c <udp_input_local_match+0xa8>
        return 1;
 800d958:	2301      	movs	r3, #1
 800d95a:	e000      	b.n	800d95e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800d95c:	2300      	movs	r3, #0
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3710      	adds	r7, #16
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}
 800d966:	bf00      	nop
 800d968:	08014bbc 	.word	0x08014bbc
 800d96c:	08014bec 	.word	0x08014bec
 800d970:	08014c10 	.word	0x08014c10
 800d974:	08014c38 	.word	0x08014c38
 800d978:	20004e68 	.word	0x20004e68

0800d97c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d97c:	b590      	push	{r4, r7, lr}
 800d97e:	b08d      	sub	sp, #52	@ 0x34
 800d980:	af02      	add	r7, sp, #8
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800d986:	2300      	movs	r3, #0
 800d988:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d105      	bne.n	800d99c <udp_input+0x20>
 800d990:	4b7c      	ldr	r3, [pc, #496]	@ (800db84 <udp_input+0x208>)
 800d992:	22cf      	movs	r2, #207	@ 0xcf
 800d994:	497c      	ldr	r1, [pc, #496]	@ (800db88 <udp_input+0x20c>)
 800d996:	487d      	ldr	r0, [pc, #500]	@ (800db8c <udp_input+0x210>)
 800d998:	f004 f80c 	bl	80119b4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d105      	bne.n	800d9ae <udp_input+0x32>
 800d9a2:	4b78      	ldr	r3, [pc, #480]	@ (800db84 <udp_input+0x208>)
 800d9a4:	22d0      	movs	r2, #208	@ 0xd0
 800d9a6:	497a      	ldr	r1, [pc, #488]	@ (800db90 <udp_input+0x214>)
 800d9a8:	4878      	ldr	r0, [pc, #480]	@ (800db8c <udp_input+0x210>)
 800d9aa:	f004 f803 	bl	80119b4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	895b      	ldrh	r3, [r3, #10]
 800d9b2:	2b07      	cmp	r3, #7
 800d9b4:	d803      	bhi.n	800d9be <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f7f9 fbe6 	bl	8007188 <pbuf_free>
    goto end;
 800d9bc:	e0de      	b.n	800db7c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	685b      	ldr	r3, [r3, #4]
 800d9c2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d9c4:	4b73      	ldr	r3, [pc, #460]	@ (800db94 <udp_input+0x218>)
 800d9c6:	695b      	ldr	r3, [r3, #20]
 800d9c8:	4a72      	ldr	r2, [pc, #456]	@ (800db94 <udp_input+0x218>)
 800d9ca:	6812      	ldr	r2, [r2, #0]
 800d9cc:	4611      	mov	r1, r2
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f001 fc88 	bl	800f2e4 <ip4_addr_isbroadcast_u32>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	881b      	ldrh	r3, [r3, #0]
 800d9dc:	b29b      	uxth	r3, r3
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f7f8 f874 	bl	8005acc <lwip_htons>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	885b      	ldrh	r3, [r3, #2]
 800d9ec:	b29b      	uxth	r3, r3
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f7f8 f86c 	bl	8005acc <lwip_htons>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800da00:	2300      	movs	r3, #0
 800da02:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800da04:	4b64      	ldr	r3, [pc, #400]	@ (800db98 <udp_input+0x21c>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	627b      	str	r3, [r7, #36]	@ 0x24
 800da0a:	e054      	b.n	800dab6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800da0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da0e:	8a5b      	ldrh	r3, [r3, #18]
 800da10:	89fa      	ldrh	r2, [r7, #14]
 800da12:	429a      	cmp	r2, r3
 800da14:	d14a      	bne.n	800daac <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800da16:	7cfb      	ldrb	r3, [r7, #19]
 800da18:	461a      	mov	r2, r3
 800da1a:	6839      	ldr	r1, [r7, #0]
 800da1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800da1e:	f7ff ff49 	bl	800d8b4 <udp_input_local_match>
 800da22:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800da24:	2b00      	cmp	r3, #0
 800da26:	d041      	beq.n	800daac <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800da28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da2a:	7c1b      	ldrb	r3, [r3, #16]
 800da2c:	f003 0304 	and.w	r3, r3, #4
 800da30:	2b00      	cmp	r3, #0
 800da32:	d11d      	bne.n	800da70 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800da34:	69fb      	ldr	r3, [r7, #28]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d102      	bne.n	800da40 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800da3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da3c:	61fb      	str	r3, [r7, #28]
 800da3e:	e017      	b.n	800da70 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800da40:	7cfb      	ldrb	r3, [r7, #19]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d014      	beq.n	800da70 <udp_input+0xf4>
 800da46:	4b53      	ldr	r3, [pc, #332]	@ (800db94 <udp_input+0x218>)
 800da48:	695b      	ldr	r3, [r3, #20]
 800da4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da4e:	d10f      	bne.n	800da70 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800da50:	69fb      	ldr	r3, [r7, #28]
 800da52:	681a      	ldr	r2, [r3, #0]
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	3304      	adds	r3, #4
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	429a      	cmp	r2, r3
 800da5c:	d008      	beq.n	800da70 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800da5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da60:	681a      	ldr	r2, [r3, #0]
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	3304      	adds	r3, #4
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	429a      	cmp	r2, r3
 800da6a:	d101      	bne.n	800da70 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800da6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da6e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800da70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da72:	8a9b      	ldrh	r3, [r3, #20]
 800da74:	8a3a      	ldrh	r2, [r7, #16]
 800da76:	429a      	cmp	r2, r3
 800da78:	d118      	bne.n	800daac <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800da7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da7c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d005      	beq.n	800da8e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800da82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da84:	685a      	ldr	r2, [r3, #4]
 800da86:	4b43      	ldr	r3, [pc, #268]	@ (800db94 <udp_input+0x218>)
 800da88:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d10e      	bne.n	800daac <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800da8e:	6a3b      	ldr	r3, [r7, #32]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d014      	beq.n	800dabe <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800da94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da96:	68da      	ldr	r2, [r3, #12]
 800da98:	6a3b      	ldr	r3, [r7, #32]
 800da9a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800da9c:	4b3e      	ldr	r3, [pc, #248]	@ (800db98 <udp_input+0x21c>)
 800da9e:	681a      	ldr	r2, [r3, #0]
 800daa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daa2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800daa4:	4a3c      	ldr	r2, [pc, #240]	@ (800db98 <udp_input+0x21c>)
 800daa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daa8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800daaa:	e008      	b.n	800dabe <udp_input+0x142>
      }
    }

    prev = pcb;
 800daac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daae:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dab2:	68db      	ldr	r3, [r3, #12]
 800dab4:	627b      	str	r3, [r7, #36]	@ 0x24
 800dab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d1a7      	bne.n	800da0c <udp_input+0x90>
 800dabc:	e000      	b.n	800dac0 <udp_input+0x144>
        break;
 800dabe:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800dac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d101      	bne.n	800daca <udp_input+0x14e>
    pcb = uncon_pcb;
 800dac6:	69fb      	ldr	r3, [r7, #28]
 800dac8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800daca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d002      	beq.n	800dad6 <udp_input+0x15a>
    for_us = 1;
 800dad0:	2301      	movs	r3, #1
 800dad2:	76fb      	strb	r3, [r7, #27]
 800dad4:	e00a      	b.n	800daec <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	3304      	adds	r3, #4
 800dada:	681a      	ldr	r2, [r3, #0]
 800dadc:	4b2d      	ldr	r3, [pc, #180]	@ (800db94 <udp_input+0x218>)
 800dade:	695b      	ldr	r3, [r3, #20]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	bf0c      	ite	eq
 800dae4:	2301      	moveq	r3, #1
 800dae6:	2300      	movne	r3, #0
 800dae8:	b2db      	uxtb	r3, r3
 800daea:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800daec:	7efb      	ldrb	r3, [r7, #27]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d041      	beq.n	800db76 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800daf2:	2108      	movs	r1, #8
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f7f9 fac1 	bl	800707c <pbuf_remove_header>
 800dafa:	4603      	mov	r3, r0
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d00a      	beq.n	800db16 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800db00:	4b20      	ldr	r3, [pc, #128]	@ (800db84 <udp_input+0x208>)
 800db02:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800db06:	4925      	ldr	r1, [pc, #148]	@ (800db9c <udp_input+0x220>)
 800db08:	4820      	ldr	r0, [pc, #128]	@ (800db8c <udp_input+0x210>)
 800db0a:	f003 ff53 	bl	80119b4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f7f9 fb3a 	bl	8007188 <pbuf_free>
      goto end;
 800db14:	e032      	b.n	800db7c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800db16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d012      	beq.n	800db42 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800db1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db1e:	699b      	ldr	r3, [r3, #24]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d00a      	beq.n	800db3a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800db24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db26:	699c      	ldr	r4, [r3, #24]
 800db28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db2a:	69d8      	ldr	r0, [r3, #28]
 800db2c:	8a3b      	ldrh	r3, [r7, #16]
 800db2e:	9300      	str	r3, [sp, #0]
 800db30:	4b1b      	ldr	r3, [pc, #108]	@ (800dba0 <udp_input+0x224>)
 800db32:	687a      	ldr	r2, [r7, #4]
 800db34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800db36:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800db38:	e021      	b.n	800db7e <udp_input+0x202>
        pbuf_free(p);
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f7f9 fb24 	bl	8007188 <pbuf_free>
        goto end;
 800db40:	e01c      	b.n	800db7c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800db42:	7cfb      	ldrb	r3, [r7, #19]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d112      	bne.n	800db6e <udp_input+0x1f2>
 800db48:	4b12      	ldr	r3, [pc, #72]	@ (800db94 <udp_input+0x218>)
 800db4a:	695b      	ldr	r3, [r3, #20]
 800db4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800db50:	2be0      	cmp	r3, #224	@ 0xe0
 800db52:	d00c      	beq.n	800db6e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800db54:	4b0f      	ldr	r3, [pc, #60]	@ (800db94 <udp_input+0x218>)
 800db56:	899b      	ldrh	r3, [r3, #12]
 800db58:	3308      	adds	r3, #8
 800db5a:	b29b      	uxth	r3, r3
 800db5c:	b21b      	sxth	r3, r3
 800db5e:	4619      	mov	r1, r3
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f7f9 fafe 	bl	8007162 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800db66:	2103      	movs	r1, #3
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f001 f89b 	bl	800eca4 <icmp_dest_unreach>
      pbuf_free(p);
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f7f9 fb0a 	bl	8007188 <pbuf_free>
  return;
 800db74:	e003      	b.n	800db7e <udp_input+0x202>
    pbuf_free(p);
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f7f9 fb06 	bl	8007188 <pbuf_free>
  return;
 800db7c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800db7e:	372c      	adds	r7, #44	@ 0x2c
 800db80:	46bd      	mov	sp, r7
 800db82:	bd90      	pop	{r4, r7, pc}
 800db84:	08014bbc 	.word	0x08014bbc
 800db88:	08014c60 	.word	0x08014c60
 800db8c:	08014c10 	.word	0x08014c10
 800db90:	08014c78 	.word	0x08014c78
 800db94:	20004e68 	.word	0x20004e68
 800db98:	20008434 	.word	0x20008434
 800db9c:	08014c94 	.word	0x08014c94
 800dba0:	20004e78 	.word	0x20004e78

0800dba4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dba4:	b480      	push	{r7}
 800dba6:	b085      	sub	sp, #20
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d01e      	beq.n	800dbf2 <udp_netif_ip_addr_changed+0x4e>
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d01a      	beq.n	800dbf2 <udp_netif_ip_addr_changed+0x4e>
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d017      	beq.n	800dbf2 <udp_netif_ip_addr_changed+0x4e>
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d013      	beq.n	800dbf2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800dbca:	4b0d      	ldr	r3, [pc, #52]	@ (800dc00 <udp_netif_ip_addr_changed+0x5c>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	60fb      	str	r3, [r7, #12]
 800dbd0:	e00c      	b.n	800dbec <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	681a      	ldr	r2, [r3, #0]
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d103      	bne.n	800dbe6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	681a      	ldr	r2, [r3, #0]
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	68db      	ldr	r3, [r3, #12]
 800dbea:	60fb      	str	r3, [r7, #12]
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d1ef      	bne.n	800dbd2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800dbf2:	bf00      	nop
 800dbf4:	3714      	adds	r7, #20
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfc:	4770      	bx	lr
 800dbfe:	bf00      	nop
 800dc00:	20008434 	.word	0x20008434

0800dc04 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b082      	sub	sp, #8
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800dc0c:	4915      	ldr	r1, [pc, #84]	@ (800dc64 <etharp_free_entry+0x60>)
 800dc0e:	687a      	ldr	r2, [r7, #4]
 800dc10:	4613      	mov	r3, r2
 800dc12:	005b      	lsls	r3, r3, #1
 800dc14:	4413      	add	r3, r2
 800dc16:	00db      	lsls	r3, r3, #3
 800dc18:	440b      	add	r3, r1
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d013      	beq.n	800dc48 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800dc20:	4910      	ldr	r1, [pc, #64]	@ (800dc64 <etharp_free_entry+0x60>)
 800dc22:	687a      	ldr	r2, [r7, #4]
 800dc24:	4613      	mov	r3, r2
 800dc26:	005b      	lsls	r3, r3, #1
 800dc28:	4413      	add	r3, r2
 800dc2a:	00db      	lsls	r3, r3, #3
 800dc2c:	440b      	add	r3, r1
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	4618      	mov	r0, r3
 800dc32:	f7f9 faa9 	bl	8007188 <pbuf_free>
    arp_table[i].q = NULL;
 800dc36:	490b      	ldr	r1, [pc, #44]	@ (800dc64 <etharp_free_entry+0x60>)
 800dc38:	687a      	ldr	r2, [r7, #4]
 800dc3a:	4613      	mov	r3, r2
 800dc3c:	005b      	lsls	r3, r3, #1
 800dc3e:	4413      	add	r3, r2
 800dc40:	00db      	lsls	r3, r3, #3
 800dc42:	440b      	add	r3, r1
 800dc44:	2200      	movs	r2, #0
 800dc46:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800dc48:	4906      	ldr	r1, [pc, #24]	@ (800dc64 <etharp_free_entry+0x60>)
 800dc4a:	687a      	ldr	r2, [r7, #4]
 800dc4c:	4613      	mov	r3, r2
 800dc4e:	005b      	lsls	r3, r3, #1
 800dc50:	4413      	add	r3, r2
 800dc52:	00db      	lsls	r3, r3, #3
 800dc54:	440b      	add	r3, r1
 800dc56:	3314      	adds	r3, #20
 800dc58:	2200      	movs	r2, #0
 800dc5a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800dc5c:	bf00      	nop
 800dc5e:	3708      	adds	r7, #8
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}
 800dc64:	20008438 	.word	0x20008438

0800dc68 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b082      	sub	sp, #8
 800dc6c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dc6e:	2300      	movs	r3, #0
 800dc70:	607b      	str	r3, [r7, #4]
 800dc72:	e096      	b.n	800dda2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800dc74:	494f      	ldr	r1, [pc, #316]	@ (800ddb4 <etharp_tmr+0x14c>)
 800dc76:	687a      	ldr	r2, [r7, #4]
 800dc78:	4613      	mov	r3, r2
 800dc7a:	005b      	lsls	r3, r3, #1
 800dc7c:	4413      	add	r3, r2
 800dc7e:	00db      	lsls	r3, r3, #3
 800dc80:	440b      	add	r3, r1
 800dc82:	3314      	adds	r3, #20
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800dc88:	78fb      	ldrb	r3, [r7, #3]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	f000 8086 	beq.w	800dd9c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800dc90:	4948      	ldr	r1, [pc, #288]	@ (800ddb4 <etharp_tmr+0x14c>)
 800dc92:	687a      	ldr	r2, [r7, #4]
 800dc94:	4613      	mov	r3, r2
 800dc96:	005b      	lsls	r3, r3, #1
 800dc98:	4413      	add	r3, r2
 800dc9a:	00db      	lsls	r3, r3, #3
 800dc9c:	440b      	add	r3, r1
 800dc9e:	3312      	adds	r3, #18
 800dca0:	881b      	ldrh	r3, [r3, #0]
 800dca2:	3301      	adds	r3, #1
 800dca4:	b298      	uxth	r0, r3
 800dca6:	4943      	ldr	r1, [pc, #268]	@ (800ddb4 <etharp_tmr+0x14c>)
 800dca8:	687a      	ldr	r2, [r7, #4]
 800dcaa:	4613      	mov	r3, r2
 800dcac:	005b      	lsls	r3, r3, #1
 800dcae:	4413      	add	r3, r2
 800dcb0:	00db      	lsls	r3, r3, #3
 800dcb2:	440b      	add	r3, r1
 800dcb4:	3312      	adds	r3, #18
 800dcb6:	4602      	mov	r2, r0
 800dcb8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800dcba:	493e      	ldr	r1, [pc, #248]	@ (800ddb4 <etharp_tmr+0x14c>)
 800dcbc:	687a      	ldr	r2, [r7, #4]
 800dcbe:	4613      	mov	r3, r2
 800dcc0:	005b      	lsls	r3, r3, #1
 800dcc2:	4413      	add	r3, r2
 800dcc4:	00db      	lsls	r3, r3, #3
 800dcc6:	440b      	add	r3, r1
 800dcc8:	3312      	adds	r3, #18
 800dcca:	881b      	ldrh	r3, [r3, #0]
 800dccc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800dcd0:	d215      	bcs.n	800dcfe <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800dcd2:	4938      	ldr	r1, [pc, #224]	@ (800ddb4 <etharp_tmr+0x14c>)
 800dcd4:	687a      	ldr	r2, [r7, #4]
 800dcd6:	4613      	mov	r3, r2
 800dcd8:	005b      	lsls	r3, r3, #1
 800dcda:	4413      	add	r3, r2
 800dcdc:	00db      	lsls	r3, r3, #3
 800dcde:	440b      	add	r3, r1
 800dce0:	3314      	adds	r3, #20
 800dce2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800dce4:	2b01      	cmp	r3, #1
 800dce6:	d10e      	bne.n	800dd06 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800dce8:	4932      	ldr	r1, [pc, #200]	@ (800ddb4 <etharp_tmr+0x14c>)
 800dcea:	687a      	ldr	r2, [r7, #4]
 800dcec:	4613      	mov	r3, r2
 800dcee:	005b      	lsls	r3, r3, #1
 800dcf0:	4413      	add	r3, r2
 800dcf2:	00db      	lsls	r3, r3, #3
 800dcf4:	440b      	add	r3, r1
 800dcf6:	3312      	adds	r3, #18
 800dcf8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800dcfa:	2b04      	cmp	r3, #4
 800dcfc:	d903      	bls.n	800dd06 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f7ff ff80 	bl	800dc04 <etharp_free_entry>
 800dd04:	e04a      	b.n	800dd9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800dd06:	492b      	ldr	r1, [pc, #172]	@ (800ddb4 <etharp_tmr+0x14c>)
 800dd08:	687a      	ldr	r2, [r7, #4]
 800dd0a:	4613      	mov	r3, r2
 800dd0c:	005b      	lsls	r3, r3, #1
 800dd0e:	4413      	add	r3, r2
 800dd10:	00db      	lsls	r3, r3, #3
 800dd12:	440b      	add	r3, r1
 800dd14:	3314      	adds	r3, #20
 800dd16:	781b      	ldrb	r3, [r3, #0]
 800dd18:	2b03      	cmp	r3, #3
 800dd1a:	d10a      	bne.n	800dd32 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800dd1c:	4925      	ldr	r1, [pc, #148]	@ (800ddb4 <etharp_tmr+0x14c>)
 800dd1e:	687a      	ldr	r2, [r7, #4]
 800dd20:	4613      	mov	r3, r2
 800dd22:	005b      	lsls	r3, r3, #1
 800dd24:	4413      	add	r3, r2
 800dd26:	00db      	lsls	r3, r3, #3
 800dd28:	440b      	add	r3, r1
 800dd2a:	3314      	adds	r3, #20
 800dd2c:	2204      	movs	r2, #4
 800dd2e:	701a      	strb	r2, [r3, #0]
 800dd30:	e034      	b.n	800dd9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800dd32:	4920      	ldr	r1, [pc, #128]	@ (800ddb4 <etharp_tmr+0x14c>)
 800dd34:	687a      	ldr	r2, [r7, #4]
 800dd36:	4613      	mov	r3, r2
 800dd38:	005b      	lsls	r3, r3, #1
 800dd3a:	4413      	add	r3, r2
 800dd3c:	00db      	lsls	r3, r3, #3
 800dd3e:	440b      	add	r3, r1
 800dd40:	3314      	adds	r3, #20
 800dd42:	781b      	ldrb	r3, [r3, #0]
 800dd44:	2b04      	cmp	r3, #4
 800dd46:	d10a      	bne.n	800dd5e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800dd48:	491a      	ldr	r1, [pc, #104]	@ (800ddb4 <etharp_tmr+0x14c>)
 800dd4a:	687a      	ldr	r2, [r7, #4]
 800dd4c:	4613      	mov	r3, r2
 800dd4e:	005b      	lsls	r3, r3, #1
 800dd50:	4413      	add	r3, r2
 800dd52:	00db      	lsls	r3, r3, #3
 800dd54:	440b      	add	r3, r1
 800dd56:	3314      	adds	r3, #20
 800dd58:	2202      	movs	r2, #2
 800dd5a:	701a      	strb	r2, [r3, #0]
 800dd5c:	e01e      	b.n	800dd9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800dd5e:	4915      	ldr	r1, [pc, #84]	@ (800ddb4 <etharp_tmr+0x14c>)
 800dd60:	687a      	ldr	r2, [r7, #4]
 800dd62:	4613      	mov	r3, r2
 800dd64:	005b      	lsls	r3, r3, #1
 800dd66:	4413      	add	r3, r2
 800dd68:	00db      	lsls	r3, r3, #3
 800dd6a:	440b      	add	r3, r1
 800dd6c:	3314      	adds	r3, #20
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	2b01      	cmp	r3, #1
 800dd72:	d113      	bne.n	800dd9c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800dd74:	490f      	ldr	r1, [pc, #60]	@ (800ddb4 <etharp_tmr+0x14c>)
 800dd76:	687a      	ldr	r2, [r7, #4]
 800dd78:	4613      	mov	r3, r2
 800dd7a:	005b      	lsls	r3, r3, #1
 800dd7c:	4413      	add	r3, r2
 800dd7e:	00db      	lsls	r3, r3, #3
 800dd80:	440b      	add	r3, r1
 800dd82:	3308      	adds	r3, #8
 800dd84:	6818      	ldr	r0, [r3, #0]
 800dd86:	687a      	ldr	r2, [r7, #4]
 800dd88:	4613      	mov	r3, r2
 800dd8a:	005b      	lsls	r3, r3, #1
 800dd8c:	4413      	add	r3, r2
 800dd8e:	00db      	lsls	r3, r3, #3
 800dd90:	4a08      	ldr	r2, [pc, #32]	@ (800ddb4 <etharp_tmr+0x14c>)
 800dd92:	4413      	add	r3, r2
 800dd94:	3304      	adds	r3, #4
 800dd96:	4619      	mov	r1, r3
 800dd98:	f000 fe6e 	bl	800ea78 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	3301      	adds	r3, #1
 800dda0:	607b      	str	r3, [r7, #4]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2b09      	cmp	r3, #9
 800dda6:	f77f af65 	ble.w	800dc74 <etharp_tmr+0xc>
      }
    }
  }
}
 800ddaa:	bf00      	nop
 800ddac:	bf00      	nop
 800ddae:	3708      	adds	r7, #8
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}
 800ddb4:	20008438 	.word	0x20008438

0800ddb8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b08a      	sub	sp, #40	@ 0x28
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	60f8      	str	r0, [r7, #12]
 800ddc0:	460b      	mov	r3, r1
 800ddc2:	607a      	str	r2, [r7, #4]
 800ddc4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ddc6:	230a      	movs	r3, #10
 800ddc8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ddca:	230a      	movs	r3, #10
 800ddcc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800ddce:	230a      	movs	r3, #10
 800ddd0:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800ddd6:	230a      	movs	r3, #10
 800ddd8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ddda:	2300      	movs	r3, #0
 800dddc:	83bb      	strh	r3, [r7, #28]
 800ddde:	2300      	movs	r3, #0
 800dde0:	837b      	strh	r3, [r7, #26]
 800dde2:	2300      	movs	r3, #0
 800dde4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dde6:	2300      	movs	r3, #0
 800dde8:	843b      	strh	r3, [r7, #32]
 800ddea:	e0ae      	b.n	800df4a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800ddec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ddf0:	49a6      	ldr	r1, [pc, #664]	@ (800e08c <etharp_find_entry+0x2d4>)
 800ddf2:	4613      	mov	r3, r2
 800ddf4:	005b      	lsls	r3, r3, #1
 800ddf6:	4413      	add	r3, r2
 800ddf8:	00db      	lsls	r3, r3, #3
 800ddfa:	440b      	add	r3, r1
 800ddfc:	3314      	adds	r3, #20
 800ddfe:	781b      	ldrb	r3, [r3, #0]
 800de00:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800de02:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800de06:	2b0a      	cmp	r3, #10
 800de08:	d105      	bne.n	800de16 <etharp_find_entry+0x5e>
 800de0a:	7dfb      	ldrb	r3, [r7, #23]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d102      	bne.n	800de16 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800de10:	8c3b      	ldrh	r3, [r7, #32]
 800de12:	847b      	strh	r3, [r7, #34]	@ 0x22
 800de14:	e095      	b.n	800df42 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800de16:	7dfb      	ldrb	r3, [r7, #23]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	f000 8092 	beq.w	800df42 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800de1e:	7dfb      	ldrb	r3, [r7, #23]
 800de20:	2b01      	cmp	r3, #1
 800de22:	d009      	beq.n	800de38 <etharp_find_entry+0x80>
 800de24:	7dfb      	ldrb	r3, [r7, #23]
 800de26:	2b01      	cmp	r3, #1
 800de28:	d806      	bhi.n	800de38 <etharp_find_entry+0x80>
 800de2a:	4b99      	ldr	r3, [pc, #612]	@ (800e090 <etharp_find_entry+0x2d8>)
 800de2c:	f240 1223 	movw	r2, #291	@ 0x123
 800de30:	4998      	ldr	r1, [pc, #608]	@ (800e094 <etharp_find_entry+0x2dc>)
 800de32:	4899      	ldr	r0, [pc, #612]	@ (800e098 <etharp_find_entry+0x2e0>)
 800de34:	f003 fdbe 	bl	80119b4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d020      	beq.n	800de80 <etharp_find_entry+0xc8>
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	6819      	ldr	r1, [r3, #0]
 800de42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800de46:	4891      	ldr	r0, [pc, #580]	@ (800e08c <etharp_find_entry+0x2d4>)
 800de48:	4613      	mov	r3, r2
 800de4a:	005b      	lsls	r3, r3, #1
 800de4c:	4413      	add	r3, r2
 800de4e:	00db      	lsls	r3, r3, #3
 800de50:	4403      	add	r3, r0
 800de52:	3304      	adds	r3, #4
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	4299      	cmp	r1, r3
 800de58:	d112      	bne.n	800de80 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d00c      	beq.n	800de7a <etharp_find_entry+0xc2>
 800de60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800de64:	4989      	ldr	r1, [pc, #548]	@ (800e08c <etharp_find_entry+0x2d4>)
 800de66:	4613      	mov	r3, r2
 800de68:	005b      	lsls	r3, r3, #1
 800de6a:	4413      	add	r3, r2
 800de6c:	00db      	lsls	r3, r3, #3
 800de6e:	440b      	add	r3, r1
 800de70:	3308      	adds	r3, #8
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	687a      	ldr	r2, [r7, #4]
 800de76:	429a      	cmp	r2, r3
 800de78:	d102      	bne.n	800de80 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800de7a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800de7e:	e100      	b.n	800e082 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800de80:	7dfb      	ldrb	r3, [r7, #23]
 800de82:	2b01      	cmp	r3, #1
 800de84:	d140      	bne.n	800df08 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800de86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800de8a:	4980      	ldr	r1, [pc, #512]	@ (800e08c <etharp_find_entry+0x2d4>)
 800de8c:	4613      	mov	r3, r2
 800de8e:	005b      	lsls	r3, r3, #1
 800de90:	4413      	add	r3, r2
 800de92:	00db      	lsls	r3, r3, #3
 800de94:	440b      	add	r3, r1
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d01a      	beq.n	800ded2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800de9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dea0:	497a      	ldr	r1, [pc, #488]	@ (800e08c <etharp_find_entry+0x2d4>)
 800dea2:	4613      	mov	r3, r2
 800dea4:	005b      	lsls	r3, r3, #1
 800dea6:	4413      	add	r3, r2
 800dea8:	00db      	lsls	r3, r3, #3
 800deaa:	440b      	add	r3, r1
 800deac:	3312      	adds	r3, #18
 800deae:	881b      	ldrh	r3, [r3, #0]
 800deb0:	8bba      	ldrh	r2, [r7, #28]
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d845      	bhi.n	800df42 <etharp_find_entry+0x18a>
            old_queue = i;
 800deb6:	8c3b      	ldrh	r3, [r7, #32]
 800deb8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800deba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800debe:	4973      	ldr	r1, [pc, #460]	@ (800e08c <etharp_find_entry+0x2d4>)
 800dec0:	4613      	mov	r3, r2
 800dec2:	005b      	lsls	r3, r3, #1
 800dec4:	4413      	add	r3, r2
 800dec6:	00db      	lsls	r3, r3, #3
 800dec8:	440b      	add	r3, r1
 800deca:	3312      	adds	r3, #18
 800decc:	881b      	ldrh	r3, [r3, #0]
 800dece:	83bb      	strh	r3, [r7, #28]
 800ded0:	e037      	b.n	800df42 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ded2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ded6:	496d      	ldr	r1, [pc, #436]	@ (800e08c <etharp_find_entry+0x2d4>)
 800ded8:	4613      	mov	r3, r2
 800deda:	005b      	lsls	r3, r3, #1
 800dedc:	4413      	add	r3, r2
 800dede:	00db      	lsls	r3, r3, #3
 800dee0:	440b      	add	r3, r1
 800dee2:	3312      	adds	r3, #18
 800dee4:	881b      	ldrh	r3, [r3, #0]
 800dee6:	8b7a      	ldrh	r2, [r7, #26]
 800dee8:	429a      	cmp	r2, r3
 800deea:	d82a      	bhi.n	800df42 <etharp_find_entry+0x18a>
            old_pending = i;
 800deec:	8c3b      	ldrh	r3, [r7, #32]
 800deee:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800def0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800def4:	4965      	ldr	r1, [pc, #404]	@ (800e08c <etharp_find_entry+0x2d4>)
 800def6:	4613      	mov	r3, r2
 800def8:	005b      	lsls	r3, r3, #1
 800defa:	4413      	add	r3, r2
 800defc:	00db      	lsls	r3, r3, #3
 800defe:	440b      	add	r3, r1
 800df00:	3312      	adds	r3, #18
 800df02:	881b      	ldrh	r3, [r3, #0]
 800df04:	837b      	strh	r3, [r7, #26]
 800df06:	e01c      	b.n	800df42 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800df08:	7dfb      	ldrb	r3, [r7, #23]
 800df0a:	2b01      	cmp	r3, #1
 800df0c:	d919      	bls.n	800df42 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800df0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800df12:	495e      	ldr	r1, [pc, #376]	@ (800e08c <etharp_find_entry+0x2d4>)
 800df14:	4613      	mov	r3, r2
 800df16:	005b      	lsls	r3, r3, #1
 800df18:	4413      	add	r3, r2
 800df1a:	00db      	lsls	r3, r3, #3
 800df1c:	440b      	add	r3, r1
 800df1e:	3312      	adds	r3, #18
 800df20:	881b      	ldrh	r3, [r3, #0]
 800df22:	8b3a      	ldrh	r2, [r7, #24]
 800df24:	429a      	cmp	r2, r3
 800df26:	d80c      	bhi.n	800df42 <etharp_find_entry+0x18a>
            old_stable = i;
 800df28:	8c3b      	ldrh	r3, [r7, #32]
 800df2a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800df2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800df30:	4956      	ldr	r1, [pc, #344]	@ (800e08c <etharp_find_entry+0x2d4>)
 800df32:	4613      	mov	r3, r2
 800df34:	005b      	lsls	r3, r3, #1
 800df36:	4413      	add	r3, r2
 800df38:	00db      	lsls	r3, r3, #3
 800df3a:	440b      	add	r3, r1
 800df3c:	3312      	adds	r3, #18
 800df3e:	881b      	ldrh	r3, [r3, #0]
 800df40:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800df42:	8c3b      	ldrh	r3, [r7, #32]
 800df44:	3301      	adds	r3, #1
 800df46:	b29b      	uxth	r3, r3
 800df48:	843b      	strh	r3, [r7, #32]
 800df4a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800df4e:	2b09      	cmp	r3, #9
 800df50:	f77f af4c 	ble.w	800ddec <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800df54:	7afb      	ldrb	r3, [r7, #11]
 800df56:	f003 0302 	and.w	r3, r3, #2
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d108      	bne.n	800df70 <etharp_find_entry+0x1b8>
 800df5e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800df62:	2b0a      	cmp	r3, #10
 800df64:	d107      	bne.n	800df76 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800df66:	7afb      	ldrb	r3, [r7, #11]
 800df68:	f003 0301 	and.w	r3, r3, #1
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d102      	bne.n	800df76 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800df70:	f04f 33ff 	mov.w	r3, #4294967295
 800df74:	e085      	b.n	800e082 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800df76:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800df7a:	2b09      	cmp	r3, #9
 800df7c:	dc02      	bgt.n	800df84 <etharp_find_entry+0x1cc>
    i = empty;
 800df7e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800df80:	843b      	strh	r3, [r7, #32]
 800df82:	e039      	b.n	800dff8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800df84:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800df88:	2b09      	cmp	r3, #9
 800df8a:	dc14      	bgt.n	800dfb6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800df8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800df8e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800df90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800df94:	493d      	ldr	r1, [pc, #244]	@ (800e08c <etharp_find_entry+0x2d4>)
 800df96:	4613      	mov	r3, r2
 800df98:	005b      	lsls	r3, r3, #1
 800df9a:	4413      	add	r3, r2
 800df9c:	00db      	lsls	r3, r3, #3
 800df9e:	440b      	add	r3, r1
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d018      	beq.n	800dfd8 <etharp_find_entry+0x220>
 800dfa6:	4b3a      	ldr	r3, [pc, #232]	@ (800e090 <etharp_find_entry+0x2d8>)
 800dfa8:	f240 126d 	movw	r2, #365	@ 0x16d
 800dfac:	493b      	ldr	r1, [pc, #236]	@ (800e09c <etharp_find_entry+0x2e4>)
 800dfae:	483a      	ldr	r0, [pc, #232]	@ (800e098 <etharp_find_entry+0x2e0>)
 800dfb0:	f003 fd00 	bl	80119b4 <iprintf>
 800dfb4:	e010      	b.n	800dfd8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800dfb6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800dfba:	2b09      	cmp	r3, #9
 800dfbc:	dc02      	bgt.n	800dfc4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800dfbe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dfc0:	843b      	strh	r3, [r7, #32]
 800dfc2:	e009      	b.n	800dfd8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800dfc4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800dfc8:	2b09      	cmp	r3, #9
 800dfca:	dc02      	bgt.n	800dfd2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800dfcc:	8bfb      	ldrh	r3, [r7, #30]
 800dfce:	843b      	strh	r3, [r7, #32]
 800dfd0:	e002      	b.n	800dfd8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800dfd2:	f04f 33ff 	mov.w	r3, #4294967295
 800dfd6:	e054      	b.n	800e082 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800dfd8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dfdc:	2b09      	cmp	r3, #9
 800dfde:	dd06      	ble.n	800dfee <etharp_find_entry+0x236>
 800dfe0:	4b2b      	ldr	r3, [pc, #172]	@ (800e090 <etharp_find_entry+0x2d8>)
 800dfe2:	f240 127f 	movw	r2, #383	@ 0x17f
 800dfe6:	492e      	ldr	r1, [pc, #184]	@ (800e0a0 <etharp_find_entry+0x2e8>)
 800dfe8:	482b      	ldr	r0, [pc, #172]	@ (800e098 <etharp_find_entry+0x2e0>)
 800dfea:	f003 fce3 	bl	80119b4 <iprintf>
    etharp_free_entry(i);
 800dfee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dff2:	4618      	mov	r0, r3
 800dff4:	f7ff fe06 	bl	800dc04 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800dff8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dffc:	2b09      	cmp	r3, #9
 800dffe:	dd06      	ble.n	800e00e <etharp_find_entry+0x256>
 800e000:	4b23      	ldr	r3, [pc, #140]	@ (800e090 <etharp_find_entry+0x2d8>)
 800e002:	f240 1283 	movw	r2, #387	@ 0x183
 800e006:	4926      	ldr	r1, [pc, #152]	@ (800e0a0 <etharp_find_entry+0x2e8>)
 800e008:	4823      	ldr	r0, [pc, #140]	@ (800e098 <etharp_find_entry+0x2e0>)
 800e00a:	f003 fcd3 	bl	80119b4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800e00e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e012:	491e      	ldr	r1, [pc, #120]	@ (800e08c <etharp_find_entry+0x2d4>)
 800e014:	4613      	mov	r3, r2
 800e016:	005b      	lsls	r3, r3, #1
 800e018:	4413      	add	r3, r2
 800e01a:	00db      	lsls	r3, r3, #3
 800e01c:	440b      	add	r3, r1
 800e01e:	3314      	adds	r3, #20
 800e020:	781b      	ldrb	r3, [r3, #0]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d006      	beq.n	800e034 <etharp_find_entry+0x27c>
 800e026:	4b1a      	ldr	r3, [pc, #104]	@ (800e090 <etharp_find_entry+0x2d8>)
 800e028:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800e02c:	491d      	ldr	r1, [pc, #116]	@ (800e0a4 <etharp_find_entry+0x2ec>)
 800e02e:	481a      	ldr	r0, [pc, #104]	@ (800e098 <etharp_find_entry+0x2e0>)
 800e030:	f003 fcc0 	bl	80119b4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d00b      	beq.n	800e052 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800e03a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	6819      	ldr	r1, [r3, #0]
 800e042:	4812      	ldr	r0, [pc, #72]	@ (800e08c <etharp_find_entry+0x2d4>)
 800e044:	4613      	mov	r3, r2
 800e046:	005b      	lsls	r3, r3, #1
 800e048:	4413      	add	r3, r2
 800e04a:	00db      	lsls	r3, r3, #3
 800e04c:	4403      	add	r3, r0
 800e04e:	3304      	adds	r3, #4
 800e050:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800e052:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e056:	490d      	ldr	r1, [pc, #52]	@ (800e08c <etharp_find_entry+0x2d4>)
 800e058:	4613      	mov	r3, r2
 800e05a:	005b      	lsls	r3, r3, #1
 800e05c:	4413      	add	r3, r2
 800e05e:	00db      	lsls	r3, r3, #3
 800e060:	440b      	add	r3, r1
 800e062:	3312      	adds	r3, #18
 800e064:	2200      	movs	r2, #0
 800e066:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800e068:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e06c:	4907      	ldr	r1, [pc, #28]	@ (800e08c <etharp_find_entry+0x2d4>)
 800e06e:	4613      	mov	r3, r2
 800e070:	005b      	lsls	r3, r3, #1
 800e072:	4413      	add	r3, r2
 800e074:	00db      	lsls	r3, r3, #3
 800e076:	440b      	add	r3, r1
 800e078:	3308      	adds	r3, #8
 800e07a:	687a      	ldr	r2, [r7, #4]
 800e07c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800e07e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800e082:	4618      	mov	r0, r3
 800e084:	3728      	adds	r7, #40	@ 0x28
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}
 800e08a:	bf00      	nop
 800e08c:	20008438 	.word	0x20008438
 800e090:	08014f20 	.word	0x08014f20
 800e094:	08014f58 	.word	0x08014f58
 800e098:	08014f98 	.word	0x08014f98
 800e09c:	08014fc0 	.word	0x08014fc0
 800e0a0:	08014fd8 	.word	0x08014fd8
 800e0a4:	08014fec 	.word	0x08014fec

0800e0a8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b088      	sub	sp, #32
 800e0ac:	af02      	add	r7, sp, #8
 800e0ae:	60f8      	str	r0, [r7, #12]
 800e0b0:	60b9      	str	r1, [r7, #8]
 800e0b2:	607a      	str	r2, [r7, #4]
 800e0b4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e0bc:	2b06      	cmp	r3, #6
 800e0be:	d006      	beq.n	800e0ce <etharp_update_arp_entry+0x26>
 800e0c0:	4b48      	ldr	r3, [pc, #288]	@ (800e1e4 <etharp_update_arp_entry+0x13c>)
 800e0c2:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800e0c6:	4948      	ldr	r1, [pc, #288]	@ (800e1e8 <etharp_update_arp_entry+0x140>)
 800e0c8:	4848      	ldr	r0, [pc, #288]	@ (800e1ec <etharp_update_arp_entry+0x144>)
 800e0ca:	f003 fc73 	bl	80119b4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d012      	beq.n	800e0fa <etharp_update_arp_entry+0x52>
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d00e      	beq.n	800e0fa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	68f9      	ldr	r1, [r7, #12]
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f001 f8fe 	bl	800f2e4 <ip4_addr_isbroadcast_u32>
 800e0e8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d105      	bne.n	800e0fa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e0f6:	2be0      	cmp	r3, #224	@ 0xe0
 800e0f8:	d102      	bne.n	800e100 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e0fa:	f06f 030f 	mvn.w	r3, #15
 800e0fe:	e06c      	b.n	800e1da <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800e100:	78fb      	ldrb	r3, [r7, #3]
 800e102:	68fa      	ldr	r2, [r7, #12]
 800e104:	4619      	mov	r1, r3
 800e106:	68b8      	ldr	r0, [r7, #8]
 800e108:	f7ff fe56 	bl	800ddb8 <etharp_find_entry>
 800e10c:	4603      	mov	r3, r0
 800e10e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800e110:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e114:	2b00      	cmp	r3, #0
 800e116:	da02      	bge.n	800e11e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800e118:	8afb      	ldrh	r3, [r7, #22]
 800e11a:	b25b      	sxtb	r3, r3
 800e11c:	e05d      	b.n	800e1da <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e11e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e122:	4933      	ldr	r1, [pc, #204]	@ (800e1f0 <etharp_update_arp_entry+0x148>)
 800e124:	4613      	mov	r3, r2
 800e126:	005b      	lsls	r3, r3, #1
 800e128:	4413      	add	r3, r2
 800e12a:	00db      	lsls	r3, r3, #3
 800e12c:	440b      	add	r3, r1
 800e12e:	3314      	adds	r3, #20
 800e130:	2202      	movs	r2, #2
 800e132:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800e134:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e138:	492d      	ldr	r1, [pc, #180]	@ (800e1f0 <etharp_update_arp_entry+0x148>)
 800e13a:	4613      	mov	r3, r2
 800e13c:	005b      	lsls	r3, r3, #1
 800e13e:	4413      	add	r3, r2
 800e140:	00db      	lsls	r3, r3, #3
 800e142:	440b      	add	r3, r1
 800e144:	3308      	adds	r3, #8
 800e146:	68fa      	ldr	r2, [r7, #12]
 800e148:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e14a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e14e:	4613      	mov	r3, r2
 800e150:	005b      	lsls	r3, r3, #1
 800e152:	4413      	add	r3, r2
 800e154:	00db      	lsls	r3, r3, #3
 800e156:	3308      	adds	r3, #8
 800e158:	4a25      	ldr	r2, [pc, #148]	@ (800e1f0 <etharp_update_arp_entry+0x148>)
 800e15a:	4413      	add	r3, r2
 800e15c:	3304      	adds	r3, #4
 800e15e:	2206      	movs	r2, #6
 800e160:	6879      	ldr	r1, [r7, #4]
 800e162:	4618      	mov	r0, r3
 800e164:	f003 fd51 	bl	8011c0a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800e168:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e16c:	4920      	ldr	r1, [pc, #128]	@ (800e1f0 <etharp_update_arp_entry+0x148>)
 800e16e:	4613      	mov	r3, r2
 800e170:	005b      	lsls	r3, r3, #1
 800e172:	4413      	add	r3, r2
 800e174:	00db      	lsls	r3, r3, #3
 800e176:	440b      	add	r3, r1
 800e178:	3312      	adds	r3, #18
 800e17a:	2200      	movs	r2, #0
 800e17c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e17e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e182:	491b      	ldr	r1, [pc, #108]	@ (800e1f0 <etharp_update_arp_entry+0x148>)
 800e184:	4613      	mov	r3, r2
 800e186:	005b      	lsls	r3, r3, #1
 800e188:	4413      	add	r3, r2
 800e18a:	00db      	lsls	r3, r3, #3
 800e18c:	440b      	add	r3, r1
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d021      	beq.n	800e1d8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800e194:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e198:	4915      	ldr	r1, [pc, #84]	@ (800e1f0 <etharp_update_arp_entry+0x148>)
 800e19a:	4613      	mov	r3, r2
 800e19c:	005b      	lsls	r3, r3, #1
 800e19e:	4413      	add	r3, r2
 800e1a0:	00db      	lsls	r3, r3, #3
 800e1a2:	440b      	add	r3, r1
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800e1a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e1ac:	4910      	ldr	r1, [pc, #64]	@ (800e1f0 <etharp_update_arp_entry+0x148>)
 800e1ae:	4613      	mov	r3, r2
 800e1b0:	005b      	lsls	r3, r3, #1
 800e1b2:	4413      	add	r3, r2
 800e1b4:	00db      	lsls	r3, r3, #3
 800e1b6:	440b      	add	r3, r1
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800e1c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e1c6:	9300      	str	r3, [sp, #0]
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	6939      	ldr	r1, [r7, #16]
 800e1cc:	68f8      	ldr	r0, [r7, #12]
 800e1ce:	f001 ff97 	bl	8010100 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800e1d2:	6938      	ldr	r0, [r7, #16]
 800e1d4:	f7f8 ffd8 	bl	8007188 <pbuf_free>
  }
  return ERR_OK;
 800e1d8:	2300      	movs	r3, #0
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	3718      	adds	r7, #24
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}
 800e1e2:	bf00      	nop
 800e1e4:	08014f20 	.word	0x08014f20
 800e1e8:	08015018 	.word	0x08015018
 800e1ec:	08014f98 	.word	0x08014f98
 800e1f0:	20008438 	.word	0x20008438

0800e1f4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b084      	sub	sp, #16
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	60fb      	str	r3, [r7, #12]
 800e200:	e01e      	b.n	800e240 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800e202:	4913      	ldr	r1, [pc, #76]	@ (800e250 <etharp_cleanup_netif+0x5c>)
 800e204:	68fa      	ldr	r2, [r7, #12]
 800e206:	4613      	mov	r3, r2
 800e208:	005b      	lsls	r3, r3, #1
 800e20a:	4413      	add	r3, r2
 800e20c:	00db      	lsls	r3, r3, #3
 800e20e:	440b      	add	r3, r1
 800e210:	3314      	adds	r3, #20
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e216:	7afb      	ldrb	r3, [r7, #11]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d00e      	beq.n	800e23a <etharp_cleanup_netif+0x46>
 800e21c:	490c      	ldr	r1, [pc, #48]	@ (800e250 <etharp_cleanup_netif+0x5c>)
 800e21e:	68fa      	ldr	r2, [r7, #12]
 800e220:	4613      	mov	r3, r2
 800e222:	005b      	lsls	r3, r3, #1
 800e224:	4413      	add	r3, r2
 800e226:	00db      	lsls	r3, r3, #3
 800e228:	440b      	add	r3, r1
 800e22a:	3308      	adds	r3, #8
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	687a      	ldr	r2, [r7, #4]
 800e230:	429a      	cmp	r2, r3
 800e232:	d102      	bne.n	800e23a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800e234:	68f8      	ldr	r0, [r7, #12]
 800e236:	f7ff fce5 	bl	800dc04 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	3301      	adds	r3, #1
 800e23e:	60fb      	str	r3, [r7, #12]
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2b09      	cmp	r3, #9
 800e244:	dddd      	ble.n	800e202 <etharp_cleanup_netif+0xe>
    }
  }
}
 800e246:	bf00      	nop
 800e248:	bf00      	nop
 800e24a:	3710      	adds	r7, #16
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}
 800e250:	20008438 	.word	0x20008438

0800e254 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800e254:	b5b0      	push	{r4, r5, r7, lr}
 800e256:	b08a      	sub	sp, #40	@ 0x28
 800e258:	af04      	add	r7, sp, #16
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d107      	bne.n	800e274 <etharp_input+0x20>
 800e264:	4b3d      	ldr	r3, [pc, #244]	@ (800e35c <etharp_input+0x108>)
 800e266:	f240 228a 	movw	r2, #650	@ 0x28a
 800e26a:	493d      	ldr	r1, [pc, #244]	@ (800e360 <etharp_input+0x10c>)
 800e26c:	483d      	ldr	r0, [pc, #244]	@ (800e364 <etharp_input+0x110>)
 800e26e:	f003 fba1 	bl	80119b4 <iprintf>
 800e272:	e06f      	b.n	800e354 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	685b      	ldr	r3, [r3, #4]
 800e278:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	881b      	ldrh	r3, [r3, #0]
 800e27e:	b29b      	uxth	r3, r3
 800e280:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e284:	d10c      	bne.n	800e2a0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e286:	693b      	ldr	r3, [r7, #16]
 800e288:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e28a:	2b06      	cmp	r3, #6
 800e28c:	d108      	bne.n	800e2a0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e28e:	693b      	ldr	r3, [r7, #16]
 800e290:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e292:	2b04      	cmp	r3, #4
 800e294:	d104      	bne.n	800e2a0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	885b      	ldrh	r3, [r3, #2]
 800e29a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e29c:	2b08      	cmp	r3, #8
 800e29e:	d003      	beq.n	800e2a8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	f7f8 ff71 	bl	8007188 <pbuf_free>
    return;
 800e2a6:	e055      	b.n	800e354 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e2a8:	693b      	ldr	r3, [r7, #16]
 800e2aa:	330e      	adds	r3, #14
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	3318      	adds	r3, #24
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	3304      	adds	r3, #4
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d102      	bne.n	800e2c8 <etharp_input+0x74>
    for_us = 0;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	75fb      	strb	r3, [r7, #23]
 800e2c6:	e009      	b.n	800e2dc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e2c8:	68ba      	ldr	r2, [r7, #8]
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	3304      	adds	r3, #4
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	bf0c      	ite	eq
 800e2d4:	2301      	moveq	r3, #1
 800e2d6:	2300      	movne	r3, #0
 800e2d8:	b2db      	uxtb	r3, r3
 800e2da:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	f103 0208 	add.w	r2, r3, #8
 800e2e2:	7dfb      	ldrb	r3, [r7, #23]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d001      	beq.n	800e2ec <etharp_input+0x98>
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	e000      	b.n	800e2ee <etharp_input+0x9a>
 800e2ec:	2302      	movs	r3, #2
 800e2ee:	f107 010c 	add.w	r1, r7, #12
 800e2f2:	6838      	ldr	r0, [r7, #0]
 800e2f4:	f7ff fed8 	bl	800e0a8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	88db      	ldrh	r3, [r3, #6]
 800e2fc:	b29b      	uxth	r3, r3
 800e2fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e302:	d003      	beq.n	800e30c <etharp_input+0xb8>
 800e304:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e308:	d01e      	beq.n	800e348 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800e30a:	e020      	b.n	800e34e <etharp_input+0xfa>
      if (for_us) {
 800e30c:	7dfb      	ldrb	r3, [r7, #23]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d01c      	beq.n	800e34c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800e318:	693b      	ldr	r3, [r7, #16]
 800e31a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800e328:	693a      	ldr	r2, [r7, #16]
 800e32a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800e32c:	2102      	movs	r1, #2
 800e32e:	9103      	str	r1, [sp, #12]
 800e330:	f107 010c 	add.w	r1, r7, #12
 800e334:	9102      	str	r1, [sp, #8]
 800e336:	9201      	str	r2, [sp, #4]
 800e338:	9300      	str	r3, [sp, #0]
 800e33a:	462b      	mov	r3, r5
 800e33c:	4622      	mov	r2, r4
 800e33e:	4601      	mov	r1, r0
 800e340:	6838      	ldr	r0, [r7, #0]
 800e342:	f000 faeb 	bl	800e91c <etharp_raw>
      break;
 800e346:	e001      	b.n	800e34c <etharp_input+0xf8>
      break;
 800e348:	bf00      	nop
 800e34a:	e000      	b.n	800e34e <etharp_input+0xfa>
      break;
 800e34c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f7f8 ff1a 	bl	8007188 <pbuf_free>
}
 800e354:	3718      	adds	r7, #24
 800e356:	46bd      	mov	sp, r7
 800e358:	bdb0      	pop	{r4, r5, r7, pc}
 800e35a:	bf00      	nop
 800e35c:	08014f20 	.word	0x08014f20
 800e360:	08015070 	.word	0x08015070
 800e364:	08014f98 	.word	0x08014f98

0800e368 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b086      	sub	sp, #24
 800e36c:	af02      	add	r7, sp, #8
 800e36e:	60f8      	str	r0, [r7, #12]
 800e370:	60b9      	str	r1, [r7, #8]
 800e372:	4613      	mov	r3, r2
 800e374:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e376:	79fa      	ldrb	r2, [r7, #7]
 800e378:	4944      	ldr	r1, [pc, #272]	@ (800e48c <etharp_output_to_arp_index+0x124>)
 800e37a:	4613      	mov	r3, r2
 800e37c:	005b      	lsls	r3, r3, #1
 800e37e:	4413      	add	r3, r2
 800e380:	00db      	lsls	r3, r3, #3
 800e382:	440b      	add	r3, r1
 800e384:	3314      	adds	r3, #20
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	2b01      	cmp	r3, #1
 800e38a:	d806      	bhi.n	800e39a <etharp_output_to_arp_index+0x32>
 800e38c:	4b40      	ldr	r3, [pc, #256]	@ (800e490 <etharp_output_to_arp_index+0x128>)
 800e38e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800e392:	4940      	ldr	r1, [pc, #256]	@ (800e494 <etharp_output_to_arp_index+0x12c>)
 800e394:	4840      	ldr	r0, [pc, #256]	@ (800e498 <etharp_output_to_arp_index+0x130>)
 800e396:	f003 fb0d 	bl	80119b4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e39a:	79fa      	ldrb	r2, [r7, #7]
 800e39c:	493b      	ldr	r1, [pc, #236]	@ (800e48c <etharp_output_to_arp_index+0x124>)
 800e39e:	4613      	mov	r3, r2
 800e3a0:	005b      	lsls	r3, r3, #1
 800e3a2:	4413      	add	r3, r2
 800e3a4:	00db      	lsls	r3, r3, #3
 800e3a6:	440b      	add	r3, r1
 800e3a8:	3314      	adds	r3, #20
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	2b02      	cmp	r3, #2
 800e3ae:	d153      	bne.n	800e458 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800e3b0:	79fa      	ldrb	r2, [r7, #7]
 800e3b2:	4936      	ldr	r1, [pc, #216]	@ (800e48c <etharp_output_to_arp_index+0x124>)
 800e3b4:	4613      	mov	r3, r2
 800e3b6:	005b      	lsls	r3, r3, #1
 800e3b8:	4413      	add	r3, r2
 800e3ba:	00db      	lsls	r3, r3, #3
 800e3bc:	440b      	add	r3, r1
 800e3be:	3312      	adds	r3, #18
 800e3c0:	881b      	ldrh	r3, [r3, #0]
 800e3c2:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800e3c6:	d919      	bls.n	800e3fc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e3c8:	79fa      	ldrb	r2, [r7, #7]
 800e3ca:	4613      	mov	r3, r2
 800e3cc:	005b      	lsls	r3, r3, #1
 800e3ce:	4413      	add	r3, r2
 800e3d0:	00db      	lsls	r3, r3, #3
 800e3d2:	4a2e      	ldr	r2, [pc, #184]	@ (800e48c <etharp_output_to_arp_index+0x124>)
 800e3d4:	4413      	add	r3, r2
 800e3d6:	3304      	adds	r3, #4
 800e3d8:	4619      	mov	r1, r3
 800e3da:	68f8      	ldr	r0, [r7, #12]
 800e3dc:	f000 fb4c 	bl	800ea78 <etharp_request>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d138      	bne.n	800e458 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e3e6:	79fa      	ldrb	r2, [r7, #7]
 800e3e8:	4928      	ldr	r1, [pc, #160]	@ (800e48c <etharp_output_to_arp_index+0x124>)
 800e3ea:	4613      	mov	r3, r2
 800e3ec:	005b      	lsls	r3, r3, #1
 800e3ee:	4413      	add	r3, r2
 800e3f0:	00db      	lsls	r3, r3, #3
 800e3f2:	440b      	add	r3, r1
 800e3f4:	3314      	adds	r3, #20
 800e3f6:	2203      	movs	r2, #3
 800e3f8:	701a      	strb	r2, [r3, #0]
 800e3fa:	e02d      	b.n	800e458 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e3fc:	79fa      	ldrb	r2, [r7, #7]
 800e3fe:	4923      	ldr	r1, [pc, #140]	@ (800e48c <etharp_output_to_arp_index+0x124>)
 800e400:	4613      	mov	r3, r2
 800e402:	005b      	lsls	r3, r3, #1
 800e404:	4413      	add	r3, r2
 800e406:	00db      	lsls	r3, r3, #3
 800e408:	440b      	add	r3, r1
 800e40a:	3312      	adds	r3, #18
 800e40c:	881b      	ldrh	r3, [r3, #0]
 800e40e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800e412:	d321      	bcc.n	800e458 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e414:	79fa      	ldrb	r2, [r7, #7]
 800e416:	4613      	mov	r3, r2
 800e418:	005b      	lsls	r3, r3, #1
 800e41a:	4413      	add	r3, r2
 800e41c:	00db      	lsls	r3, r3, #3
 800e41e:	4a1b      	ldr	r2, [pc, #108]	@ (800e48c <etharp_output_to_arp_index+0x124>)
 800e420:	4413      	add	r3, r2
 800e422:	1d19      	adds	r1, r3, #4
 800e424:	79fa      	ldrb	r2, [r7, #7]
 800e426:	4613      	mov	r3, r2
 800e428:	005b      	lsls	r3, r3, #1
 800e42a:	4413      	add	r3, r2
 800e42c:	00db      	lsls	r3, r3, #3
 800e42e:	3308      	adds	r3, #8
 800e430:	4a16      	ldr	r2, [pc, #88]	@ (800e48c <etharp_output_to_arp_index+0x124>)
 800e432:	4413      	add	r3, r2
 800e434:	3304      	adds	r3, #4
 800e436:	461a      	mov	r2, r3
 800e438:	68f8      	ldr	r0, [r7, #12]
 800e43a:	f000 fafb 	bl	800ea34 <etharp_request_dst>
 800e43e:	4603      	mov	r3, r0
 800e440:	2b00      	cmp	r3, #0
 800e442:	d109      	bne.n	800e458 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e444:	79fa      	ldrb	r2, [r7, #7]
 800e446:	4911      	ldr	r1, [pc, #68]	@ (800e48c <etharp_output_to_arp_index+0x124>)
 800e448:	4613      	mov	r3, r2
 800e44a:	005b      	lsls	r3, r3, #1
 800e44c:	4413      	add	r3, r2
 800e44e:	00db      	lsls	r3, r3, #3
 800e450:	440b      	add	r3, r1
 800e452:	3314      	adds	r3, #20
 800e454:	2203      	movs	r2, #3
 800e456:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800e45e:	79fa      	ldrb	r2, [r7, #7]
 800e460:	4613      	mov	r3, r2
 800e462:	005b      	lsls	r3, r3, #1
 800e464:	4413      	add	r3, r2
 800e466:	00db      	lsls	r3, r3, #3
 800e468:	3308      	adds	r3, #8
 800e46a:	4a08      	ldr	r2, [pc, #32]	@ (800e48c <etharp_output_to_arp_index+0x124>)
 800e46c:	4413      	add	r3, r2
 800e46e:	3304      	adds	r3, #4
 800e470:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e474:	9200      	str	r2, [sp, #0]
 800e476:	460a      	mov	r2, r1
 800e478:	68b9      	ldr	r1, [r7, #8]
 800e47a:	68f8      	ldr	r0, [r7, #12]
 800e47c:	f001 fe40 	bl	8010100 <ethernet_output>
 800e480:	4603      	mov	r3, r0
}
 800e482:	4618      	mov	r0, r3
 800e484:	3710      	adds	r7, #16
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	20008438 	.word	0x20008438
 800e490:	08014f20 	.word	0x08014f20
 800e494:	08015090 	.word	0x08015090
 800e498:	08014f98 	.word	0x08014f98

0800e49c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b08a      	sub	sp, #40	@ 0x28
 800e4a0:	af02      	add	r7, sp, #8
 800e4a2:	60f8      	str	r0, [r7, #12]
 800e4a4:	60b9      	str	r1, [r7, #8]
 800e4a6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d106      	bne.n	800e4c0 <etharp_output+0x24>
 800e4b2:	4b73      	ldr	r3, [pc, #460]	@ (800e680 <etharp_output+0x1e4>)
 800e4b4:	f240 321e 	movw	r2, #798	@ 0x31e
 800e4b8:	4972      	ldr	r1, [pc, #456]	@ (800e684 <etharp_output+0x1e8>)
 800e4ba:	4873      	ldr	r0, [pc, #460]	@ (800e688 <etharp_output+0x1ec>)
 800e4bc:	f003 fa7a 	bl	80119b4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d106      	bne.n	800e4d4 <etharp_output+0x38>
 800e4c6:	4b6e      	ldr	r3, [pc, #440]	@ (800e680 <etharp_output+0x1e4>)
 800e4c8:	f240 321f 	movw	r2, #799	@ 0x31f
 800e4cc:	496f      	ldr	r1, [pc, #444]	@ (800e68c <etharp_output+0x1f0>)
 800e4ce:	486e      	ldr	r0, [pc, #440]	@ (800e688 <etharp_output+0x1ec>)
 800e4d0:	f003 fa70 	bl	80119b4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d106      	bne.n	800e4e8 <etharp_output+0x4c>
 800e4da:	4b69      	ldr	r3, [pc, #420]	@ (800e680 <etharp_output+0x1e4>)
 800e4dc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800e4e0:	496b      	ldr	r1, [pc, #428]	@ (800e690 <etharp_output+0x1f4>)
 800e4e2:	4869      	ldr	r0, [pc, #420]	@ (800e688 <etharp_output+0x1ec>)
 800e4e4:	f003 fa66 	bl	80119b4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	68f9      	ldr	r1, [r7, #12]
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f000 fef8 	bl	800f2e4 <ip4_addr_isbroadcast_u32>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d002      	beq.n	800e500 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e4fa:	4b66      	ldr	r3, [pc, #408]	@ (800e694 <etharp_output+0x1f8>)
 800e4fc:	61fb      	str	r3, [r7, #28]
 800e4fe:	e0af      	b.n	800e660 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e508:	2be0      	cmp	r3, #224	@ 0xe0
 800e50a:	d118      	bne.n	800e53e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e50c:	2301      	movs	r3, #1
 800e50e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e510:	2300      	movs	r3, #0
 800e512:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e514:	235e      	movs	r3, #94	@ 0x5e
 800e516:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	3301      	adds	r3, #1
 800e51c:	781b      	ldrb	r3, [r3, #0]
 800e51e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e522:	b2db      	uxtb	r3, r3
 800e524:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	3302      	adds	r3, #2
 800e52a:	781b      	ldrb	r3, [r3, #0]
 800e52c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	3303      	adds	r3, #3
 800e532:	781b      	ldrb	r3, [r3, #0]
 800e534:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e536:	f107 0310 	add.w	r3, r7, #16
 800e53a:	61fb      	str	r3, [r7, #28]
 800e53c:	e090      	b.n	800e660 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681a      	ldr	r2, [r3, #0]
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	3304      	adds	r3, #4
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	405a      	eors	r2, r3
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	3308      	adds	r3, #8
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	4013      	ands	r3, r2
 800e552:	2b00      	cmp	r3, #0
 800e554:	d012      	beq.n	800e57c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e55c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800e560:	4293      	cmp	r3, r2
 800e562:	d00b      	beq.n	800e57c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	330c      	adds	r3, #12
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d003      	beq.n	800e576 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	330c      	adds	r3, #12
 800e572:	61bb      	str	r3, [r7, #24]
 800e574:	e002      	b.n	800e57c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e576:	f06f 0303 	mvn.w	r3, #3
 800e57a:	e07d      	b.n	800e678 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e57c:	4b46      	ldr	r3, [pc, #280]	@ (800e698 <etharp_output+0x1fc>)
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	4619      	mov	r1, r3
 800e582:	4a46      	ldr	r2, [pc, #280]	@ (800e69c <etharp_output+0x200>)
 800e584:	460b      	mov	r3, r1
 800e586:	005b      	lsls	r3, r3, #1
 800e588:	440b      	add	r3, r1
 800e58a:	00db      	lsls	r3, r3, #3
 800e58c:	4413      	add	r3, r2
 800e58e:	3314      	adds	r3, #20
 800e590:	781b      	ldrb	r3, [r3, #0]
 800e592:	2b01      	cmp	r3, #1
 800e594:	d925      	bls.n	800e5e2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e596:	4b40      	ldr	r3, [pc, #256]	@ (800e698 <etharp_output+0x1fc>)
 800e598:	781b      	ldrb	r3, [r3, #0]
 800e59a:	4619      	mov	r1, r3
 800e59c:	4a3f      	ldr	r2, [pc, #252]	@ (800e69c <etharp_output+0x200>)
 800e59e:	460b      	mov	r3, r1
 800e5a0:	005b      	lsls	r3, r3, #1
 800e5a2:	440b      	add	r3, r1
 800e5a4:	00db      	lsls	r3, r3, #3
 800e5a6:	4413      	add	r3, r2
 800e5a8:	3308      	adds	r3, #8
 800e5aa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e5ac:	68fa      	ldr	r2, [r7, #12]
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	d117      	bne.n	800e5e2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e5b2:	69bb      	ldr	r3, [r7, #24]
 800e5b4:	681a      	ldr	r2, [r3, #0]
 800e5b6:	4b38      	ldr	r3, [pc, #224]	@ (800e698 <etharp_output+0x1fc>)
 800e5b8:	781b      	ldrb	r3, [r3, #0]
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	4937      	ldr	r1, [pc, #220]	@ (800e69c <etharp_output+0x200>)
 800e5be:	4603      	mov	r3, r0
 800e5c0:	005b      	lsls	r3, r3, #1
 800e5c2:	4403      	add	r3, r0
 800e5c4:	00db      	lsls	r3, r3, #3
 800e5c6:	440b      	add	r3, r1
 800e5c8:	3304      	adds	r3, #4
 800e5ca:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d108      	bne.n	800e5e2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e5d0:	4b31      	ldr	r3, [pc, #196]	@ (800e698 <etharp_output+0x1fc>)
 800e5d2:	781b      	ldrb	r3, [r3, #0]
 800e5d4:	461a      	mov	r2, r3
 800e5d6:	68b9      	ldr	r1, [r7, #8]
 800e5d8:	68f8      	ldr	r0, [r7, #12]
 800e5da:	f7ff fec5 	bl	800e368 <etharp_output_to_arp_index>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	e04a      	b.n	800e678 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	75fb      	strb	r3, [r7, #23]
 800e5e6:	e031      	b.n	800e64c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e5e8:	7dfa      	ldrb	r2, [r7, #23]
 800e5ea:	492c      	ldr	r1, [pc, #176]	@ (800e69c <etharp_output+0x200>)
 800e5ec:	4613      	mov	r3, r2
 800e5ee:	005b      	lsls	r3, r3, #1
 800e5f0:	4413      	add	r3, r2
 800e5f2:	00db      	lsls	r3, r3, #3
 800e5f4:	440b      	add	r3, r1
 800e5f6:	3314      	adds	r3, #20
 800e5f8:	781b      	ldrb	r3, [r3, #0]
 800e5fa:	2b01      	cmp	r3, #1
 800e5fc:	d923      	bls.n	800e646 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800e5fe:	7dfa      	ldrb	r2, [r7, #23]
 800e600:	4926      	ldr	r1, [pc, #152]	@ (800e69c <etharp_output+0x200>)
 800e602:	4613      	mov	r3, r2
 800e604:	005b      	lsls	r3, r3, #1
 800e606:	4413      	add	r3, r2
 800e608:	00db      	lsls	r3, r3, #3
 800e60a:	440b      	add	r3, r1
 800e60c:	3308      	adds	r3, #8
 800e60e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e610:	68fa      	ldr	r2, [r7, #12]
 800e612:	429a      	cmp	r2, r3
 800e614:	d117      	bne.n	800e646 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e616:	69bb      	ldr	r3, [r7, #24]
 800e618:	6819      	ldr	r1, [r3, #0]
 800e61a:	7dfa      	ldrb	r2, [r7, #23]
 800e61c:	481f      	ldr	r0, [pc, #124]	@ (800e69c <etharp_output+0x200>)
 800e61e:	4613      	mov	r3, r2
 800e620:	005b      	lsls	r3, r3, #1
 800e622:	4413      	add	r3, r2
 800e624:	00db      	lsls	r3, r3, #3
 800e626:	4403      	add	r3, r0
 800e628:	3304      	adds	r3, #4
 800e62a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800e62c:	4299      	cmp	r1, r3
 800e62e:	d10a      	bne.n	800e646 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800e630:	4a19      	ldr	r2, [pc, #100]	@ (800e698 <etharp_output+0x1fc>)
 800e632:	7dfb      	ldrb	r3, [r7, #23]
 800e634:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e636:	7dfb      	ldrb	r3, [r7, #23]
 800e638:	461a      	mov	r2, r3
 800e63a:	68b9      	ldr	r1, [r7, #8]
 800e63c:	68f8      	ldr	r0, [r7, #12]
 800e63e:	f7ff fe93 	bl	800e368 <etharp_output_to_arp_index>
 800e642:	4603      	mov	r3, r0
 800e644:	e018      	b.n	800e678 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e646:	7dfb      	ldrb	r3, [r7, #23]
 800e648:	3301      	adds	r3, #1
 800e64a:	75fb      	strb	r3, [r7, #23]
 800e64c:	7dfb      	ldrb	r3, [r7, #23]
 800e64e:	2b09      	cmp	r3, #9
 800e650:	d9ca      	bls.n	800e5e8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e652:	68ba      	ldr	r2, [r7, #8]
 800e654:	69b9      	ldr	r1, [r7, #24]
 800e656:	68f8      	ldr	r0, [r7, #12]
 800e658:	f000 f822 	bl	800e6a0 <etharp_query>
 800e65c:	4603      	mov	r3, r0
 800e65e:	e00b      	b.n	800e678 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800e666:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e66a:	9300      	str	r3, [sp, #0]
 800e66c:	69fb      	ldr	r3, [r7, #28]
 800e66e:	68b9      	ldr	r1, [r7, #8]
 800e670:	68f8      	ldr	r0, [r7, #12]
 800e672:	f001 fd45 	bl	8010100 <ethernet_output>
 800e676:	4603      	mov	r3, r0
}
 800e678:	4618      	mov	r0, r3
 800e67a:	3720      	adds	r7, #32
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}
 800e680:	08014f20 	.word	0x08014f20
 800e684:	08015070 	.word	0x08015070
 800e688:	08014f98 	.word	0x08014f98
 800e68c:	080150c0 	.word	0x080150c0
 800e690:	08015060 	.word	0x08015060
 800e694:	08015830 	.word	0x08015830
 800e698:	20008528 	.word	0x20008528
 800e69c:	20008438 	.word	0x20008438

0800e6a0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b08c      	sub	sp, #48	@ 0x30
 800e6a4:	af02      	add	r7, sp, #8
 800e6a6:	60f8      	str	r0, [r7, #12]
 800e6a8:	60b9      	str	r1, [r7, #8]
 800e6aa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	3326      	adds	r3, #38	@ 0x26
 800e6b0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e6b2:	23ff      	movs	r3, #255	@ 0xff
 800e6b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e6bc:	68bb      	ldr	r3, [r7, #8]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	68f9      	ldr	r1, [r7, #12]
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f000 fe0e 	bl	800f2e4 <ip4_addr_isbroadcast_u32>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d10c      	bne.n	800e6e8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e6d6:	2be0      	cmp	r3, #224	@ 0xe0
 800e6d8:	d006      	beq.n	800e6e8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d003      	beq.n	800e6e8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d102      	bne.n	800e6ee <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e6e8:	f06f 030f 	mvn.w	r3, #15
 800e6ec:	e101      	b.n	800e8f2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e6ee:	68fa      	ldr	r2, [r7, #12]
 800e6f0:	2101      	movs	r1, #1
 800e6f2:	68b8      	ldr	r0, [r7, #8]
 800e6f4:	f7ff fb60 	bl	800ddb8 <etharp_find_entry>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800e6fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e700:	2b00      	cmp	r3, #0
 800e702:	da02      	bge.n	800e70a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800e704:	8a7b      	ldrh	r3, [r7, #18]
 800e706:	b25b      	sxtb	r3, r3
 800e708:	e0f3      	b.n	800e8f2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800e70a:	8a7b      	ldrh	r3, [r7, #18]
 800e70c:	2b7e      	cmp	r3, #126	@ 0x7e
 800e70e:	d906      	bls.n	800e71e <etharp_query+0x7e>
 800e710:	4b7a      	ldr	r3, [pc, #488]	@ (800e8fc <etharp_query+0x25c>)
 800e712:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800e716:	497a      	ldr	r1, [pc, #488]	@ (800e900 <etharp_query+0x260>)
 800e718:	487a      	ldr	r0, [pc, #488]	@ (800e904 <etharp_query+0x264>)
 800e71a:	f003 f94b 	bl	80119b4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800e71e:	8a7b      	ldrh	r3, [r7, #18]
 800e720:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e722:	7c7a      	ldrb	r2, [r7, #17]
 800e724:	4978      	ldr	r1, [pc, #480]	@ (800e908 <etharp_query+0x268>)
 800e726:	4613      	mov	r3, r2
 800e728:	005b      	lsls	r3, r3, #1
 800e72a:	4413      	add	r3, r2
 800e72c:	00db      	lsls	r3, r3, #3
 800e72e:	440b      	add	r3, r1
 800e730:	3314      	adds	r3, #20
 800e732:	781b      	ldrb	r3, [r3, #0]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d115      	bne.n	800e764 <etharp_query+0xc4>
    is_new_entry = 1;
 800e738:	2301      	movs	r3, #1
 800e73a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e73c:	7c7a      	ldrb	r2, [r7, #17]
 800e73e:	4972      	ldr	r1, [pc, #456]	@ (800e908 <etharp_query+0x268>)
 800e740:	4613      	mov	r3, r2
 800e742:	005b      	lsls	r3, r3, #1
 800e744:	4413      	add	r3, r2
 800e746:	00db      	lsls	r3, r3, #3
 800e748:	440b      	add	r3, r1
 800e74a:	3314      	adds	r3, #20
 800e74c:	2201      	movs	r2, #1
 800e74e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e750:	7c7a      	ldrb	r2, [r7, #17]
 800e752:	496d      	ldr	r1, [pc, #436]	@ (800e908 <etharp_query+0x268>)
 800e754:	4613      	mov	r3, r2
 800e756:	005b      	lsls	r3, r3, #1
 800e758:	4413      	add	r3, r2
 800e75a:	00db      	lsls	r3, r3, #3
 800e75c:	440b      	add	r3, r1
 800e75e:	3308      	adds	r3, #8
 800e760:	68fa      	ldr	r2, [r7, #12]
 800e762:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e764:	7c7a      	ldrb	r2, [r7, #17]
 800e766:	4968      	ldr	r1, [pc, #416]	@ (800e908 <etharp_query+0x268>)
 800e768:	4613      	mov	r3, r2
 800e76a:	005b      	lsls	r3, r3, #1
 800e76c:	4413      	add	r3, r2
 800e76e:	00db      	lsls	r3, r3, #3
 800e770:	440b      	add	r3, r1
 800e772:	3314      	adds	r3, #20
 800e774:	781b      	ldrb	r3, [r3, #0]
 800e776:	2b01      	cmp	r3, #1
 800e778:	d011      	beq.n	800e79e <etharp_query+0xfe>
 800e77a:	7c7a      	ldrb	r2, [r7, #17]
 800e77c:	4962      	ldr	r1, [pc, #392]	@ (800e908 <etharp_query+0x268>)
 800e77e:	4613      	mov	r3, r2
 800e780:	005b      	lsls	r3, r3, #1
 800e782:	4413      	add	r3, r2
 800e784:	00db      	lsls	r3, r3, #3
 800e786:	440b      	add	r3, r1
 800e788:	3314      	adds	r3, #20
 800e78a:	781b      	ldrb	r3, [r3, #0]
 800e78c:	2b01      	cmp	r3, #1
 800e78e:	d806      	bhi.n	800e79e <etharp_query+0xfe>
 800e790:	4b5a      	ldr	r3, [pc, #360]	@ (800e8fc <etharp_query+0x25c>)
 800e792:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800e796:	495d      	ldr	r1, [pc, #372]	@ (800e90c <etharp_query+0x26c>)
 800e798:	485a      	ldr	r0, [pc, #360]	@ (800e904 <etharp_query+0x264>)
 800e79a:	f003 f90b 	bl	80119b4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e79e:	6a3b      	ldr	r3, [r7, #32]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d102      	bne.n	800e7aa <etharp_query+0x10a>
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d10c      	bne.n	800e7c4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e7aa:	68b9      	ldr	r1, [r7, #8]
 800e7ac:	68f8      	ldr	r0, [r7, #12]
 800e7ae:	f000 f963 	bl	800ea78 <etharp_request>
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d102      	bne.n	800e7c4 <etharp_query+0x124>
      return result;
 800e7be:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e7c2:	e096      	b.n	800e8f2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d106      	bne.n	800e7d8 <etharp_query+0x138>
 800e7ca:	4b4c      	ldr	r3, [pc, #304]	@ (800e8fc <etharp_query+0x25c>)
 800e7cc:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800e7d0:	494f      	ldr	r1, [pc, #316]	@ (800e910 <etharp_query+0x270>)
 800e7d2:	484c      	ldr	r0, [pc, #304]	@ (800e904 <etharp_query+0x264>)
 800e7d4:	f003 f8ee 	bl	80119b4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e7d8:	7c7a      	ldrb	r2, [r7, #17]
 800e7da:	494b      	ldr	r1, [pc, #300]	@ (800e908 <etharp_query+0x268>)
 800e7dc:	4613      	mov	r3, r2
 800e7de:	005b      	lsls	r3, r3, #1
 800e7e0:	4413      	add	r3, r2
 800e7e2:	00db      	lsls	r3, r3, #3
 800e7e4:	440b      	add	r3, r1
 800e7e6:	3314      	adds	r3, #20
 800e7e8:	781b      	ldrb	r3, [r3, #0]
 800e7ea:	2b01      	cmp	r3, #1
 800e7ec:	d917      	bls.n	800e81e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800e7ee:	4a49      	ldr	r2, [pc, #292]	@ (800e914 <etharp_query+0x274>)
 800e7f0:	7c7b      	ldrb	r3, [r7, #17]
 800e7f2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e7f4:	7c7a      	ldrb	r2, [r7, #17]
 800e7f6:	4613      	mov	r3, r2
 800e7f8:	005b      	lsls	r3, r3, #1
 800e7fa:	4413      	add	r3, r2
 800e7fc:	00db      	lsls	r3, r3, #3
 800e7fe:	3308      	adds	r3, #8
 800e800:	4a41      	ldr	r2, [pc, #260]	@ (800e908 <etharp_query+0x268>)
 800e802:	4413      	add	r3, r2
 800e804:	3304      	adds	r3, #4
 800e806:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e80a:	9200      	str	r2, [sp, #0]
 800e80c:	697a      	ldr	r2, [r7, #20]
 800e80e:	6879      	ldr	r1, [r7, #4]
 800e810:	68f8      	ldr	r0, [r7, #12]
 800e812:	f001 fc75 	bl	8010100 <ethernet_output>
 800e816:	4603      	mov	r3, r0
 800e818:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e81c:	e067      	b.n	800e8ee <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e81e:	7c7a      	ldrb	r2, [r7, #17]
 800e820:	4939      	ldr	r1, [pc, #228]	@ (800e908 <etharp_query+0x268>)
 800e822:	4613      	mov	r3, r2
 800e824:	005b      	lsls	r3, r3, #1
 800e826:	4413      	add	r3, r2
 800e828:	00db      	lsls	r3, r3, #3
 800e82a:	440b      	add	r3, r1
 800e82c:	3314      	adds	r3, #20
 800e82e:	781b      	ldrb	r3, [r3, #0]
 800e830:	2b01      	cmp	r3, #1
 800e832:	d15c      	bne.n	800e8ee <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e834:	2300      	movs	r3, #0
 800e836:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e83c:	e01c      	b.n	800e878 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e83e:	69fb      	ldr	r3, [r7, #28]
 800e840:	895a      	ldrh	r2, [r3, #10]
 800e842:	69fb      	ldr	r3, [r7, #28]
 800e844:	891b      	ldrh	r3, [r3, #8]
 800e846:	429a      	cmp	r2, r3
 800e848:	d10a      	bne.n	800e860 <etharp_query+0x1c0>
 800e84a:	69fb      	ldr	r3, [r7, #28]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d006      	beq.n	800e860 <etharp_query+0x1c0>
 800e852:	4b2a      	ldr	r3, [pc, #168]	@ (800e8fc <etharp_query+0x25c>)
 800e854:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800e858:	492f      	ldr	r1, [pc, #188]	@ (800e918 <etharp_query+0x278>)
 800e85a:	482a      	ldr	r0, [pc, #168]	@ (800e904 <etharp_query+0x264>)
 800e85c:	f003 f8aa 	bl	80119b4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800e860:	69fb      	ldr	r3, [r7, #28]
 800e862:	7b1b      	ldrb	r3, [r3, #12]
 800e864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d002      	beq.n	800e872 <etharp_query+0x1d2>
        copy_needed = 1;
 800e86c:	2301      	movs	r3, #1
 800e86e:	61bb      	str	r3, [r7, #24]
        break;
 800e870:	e005      	b.n	800e87e <etharp_query+0x1de>
      }
      p = p->next;
 800e872:	69fb      	ldr	r3, [r7, #28]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e878:	69fb      	ldr	r3, [r7, #28]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d1df      	bne.n	800e83e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800e87e:	69bb      	ldr	r3, [r7, #24]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d007      	beq.n	800e894 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e884:	687a      	ldr	r2, [r7, #4]
 800e886:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800e88a:	200e      	movs	r0, #14
 800e88c:	f7f8 fed8 	bl	8007640 <pbuf_clone>
 800e890:	61f8      	str	r0, [r7, #28]
 800e892:	e004      	b.n	800e89e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e898:	69f8      	ldr	r0, [r7, #28]
 800e89a:	f7f8 fd15 	bl	80072c8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e89e:	69fb      	ldr	r3, [r7, #28]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d021      	beq.n	800e8e8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e8a4:	7c7a      	ldrb	r2, [r7, #17]
 800e8a6:	4918      	ldr	r1, [pc, #96]	@ (800e908 <etharp_query+0x268>)
 800e8a8:	4613      	mov	r3, r2
 800e8aa:	005b      	lsls	r3, r3, #1
 800e8ac:	4413      	add	r3, r2
 800e8ae:	00db      	lsls	r3, r3, #3
 800e8b0:	440b      	add	r3, r1
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d00a      	beq.n	800e8ce <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e8b8:	7c7a      	ldrb	r2, [r7, #17]
 800e8ba:	4913      	ldr	r1, [pc, #76]	@ (800e908 <etharp_query+0x268>)
 800e8bc:	4613      	mov	r3, r2
 800e8be:	005b      	lsls	r3, r3, #1
 800e8c0:	4413      	add	r3, r2
 800e8c2:	00db      	lsls	r3, r3, #3
 800e8c4:	440b      	add	r3, r1
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7f8 fc5d 	bl	8007188 <pbuf_free>
      }
      arp_table[i].q = p;
 800e8ce:	7c7a      	ldrb	r2, [r7, #17]
 800e8d0:	490d      	ldr	r1, [pc, #52]	@ (800e908 <etharp_query+0x268>)
 800e8d2:	4613      	mov	r3, r2
 800e8d4:	005b      	lsls	r3, r3, #1
 800e8d6:	4413      	add	r3, r2
 800e8d8:	00db      	lsls	r3, r3, #3
 800e8da:	440b      	add	r3, r1
 800e8dc:	69fa      	ldr	r2, [r7, #28]
 800e8de:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e8e6:	e002      	b.n	800e8ee <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e8e8:	23ff      	movs	r3, #255	@ 0xff
 800e8ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800e8ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	3728      	adds	r7, #40	@ 0x28
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}
 800e8fa:	bf00      	nop
 800e8fc:	08014f20 	.word	0x08014f20
 800e900:	080150cc 	.word	0x080150cc
 800e904:	08014f98 	.word	0x08014f98
 800e908:	20008438 	.word	0x20008438
 800e90c:	080150dc 	.word	0x080150dc
 800e910:	080150c0 	.word	0x080150c0
 800e914:	20008528 	.word	0x20008528
 800e918:	08015104 	.word	0x08015104

0800e91c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b08a      	sub	sp, #40	@ 0x28
 800e920:	af02      	add	r7, sp, #8
 800e922:	60f8      	str	r0, [r7, #12]
 800e924:	60b9      	str	r1, [r7, #8]
 800e926:	607a      	str	r2, [r7, #4]
 800e928:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e92a:	2300      	movs	r3, #0
 800e92c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d106      	bne.n	800e942 <etharp_raw+0x26>
 800e934:	4b3a      	ldr	r3, [pc, #232]	@ (800ea20 <etharp_raw+0x104>)
 800e936:	f240 4257 	movw	r2, #1111	@ 0x457
 800e93a:	493a      	ldr	r1, [pc, #232]	@ (800ea24 <etharp_raw+0x108>)
 800e93c:	483a      	ldr	r0, [pc, #232]	@ (800ea28 <etharp_raw+0x10c>)
 800e93e:	f003 f839 	bl	80119b4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e942:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e946:	211c      	movs	r1, #28
 800e948:	200e      	movs	r0, #14
 800e94a:	f7f8 f939 	bl	8006bc0 <pbuf_alloc>
 800e94e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e950:	69bb      	ldr	r3, [r7, #24]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d102      	bne.n	800e95c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e956:	f04f 33ff 	mov.w	r3, #4294967295
 800e95a:	e05d      	b.n	800ea18 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e95c:	69bb      	ldr	r3, [r7, #24]
 800e95e:	895b      	ldrh	r3, [r3, #10]
 800e960:	2b1b      	cmp	r3, #27
 800e962:	d806      	bhi.n	800e972 <etharp_raw+0x56>
 800e964:	4b2e      	ldr	r3, [pc, #184]	@ (800ea20 <etharp_raw+0x104>)
 800e966:	f240 4262 	movw	r2, #1122	@ 0x462
 800e96a:	4930      	ldr	r1, [pc, #192]	@ (800ea2c <etharp_raw+0x110>)
 800e96c:	482e      	ldr	r0, [pc, #184]	@ (800ea28 <etharp_raw+0x10c>)
 800e96e:	f003 f821 	bl	80119b4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e972:	69bb      	ldr	r3, [r7, #24]
 800e974:	685b      	ldr	r3, [r3, #4]
 800e976:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e978:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800e97a:	4618      	mov	r0, r3
 800e97c:	f7f7 f8a6 	bl	8005acc <lwip_htons>
 800e980:	4603      	mov	r3, r0
 800e982:	461a      	mov	r2, r3
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e98e:	2b06      	cmp	r3, #6
 800e990:	d006      	beq.n	800e9a0 <etharp_raw+0x84>
 800e992:	4b23      	ldr	r3, [pc, #140]	@ (800ea20 <etharp_raw+0x104>)
 800e994:	f240 4269 	movw	r2, #1129	@ 0x469
 800e998:	4925      	ldr	r1, [pc, #148]	@ (800ea30 <etharp_raw+0x114>)
 800e99a:	4823      	ldr	r0, [pc, #140]	@ (800ea28 <etharp_raw+0x10c>)
 800e99c:	f003 f80a 	bl	80119b4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e9a0:	697b      	ldr	r3, [r7, #20]
 800e9a2:	3308      	adds	r3, #8
 800e9a4:	2206      	movs	r2, #6
 800e9a6:	6839      	ldr	r1, [r7, #0]
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f003 f92e 	bl	8011c0a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e9ae:	697b      	ldr	r3, [r7, #20]
 800e9b0:	3312      	adds	r3, #18
 800e9b2:	2206      	movs	r2, #6
 800e9b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f003 f927 	bl	8011c0a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e9bc:	697b      	ldr	r3, [r7, #20]
 800e9be:	330e      	adds	r3, #14
 800e9c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e9c2:	6812      	ldr	r2, [r2, #0]
 800e9c4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	3318      	adds	r3, #24
 800e9ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e9cc:	6812      	ldr	r2, [r2, #0]
 800e9ce:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	701a      	strb	r2, [r3, #0]
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	f042 0201 	orr.w	r2, r2, #1
 800e9dc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e9de:	697b      	ldr	r3, [r7, #20]
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	f042 0208 	orr.w	r2, r2, #8
 800e9e6:	709a      	strb	r2, [r3, #2]
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e9ec:	697b      	ldr	r3, [r7, #20]
 800e9ee:	2206      	movs	r2, #6
 800e9f0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	2204      	movs	r2, #4
 800e9f6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e9f8:	f640 0306 	movw	r3, #2054	@ 0x806
 800e9fc:	9300      	str	r3, [sp, #0]
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	68ba      	ldr	r2, [r7, #8]
 800ea02:	69b9      	ldr	r1, [r7, #24]
 800ea04:	68f8      	ldr	r0, [r7, #12]
 800ea06:	f001 fb7b 	bl	8010100 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ea0a:	69b8      	ldr	r0, [r7, #24]
 800ea0c:	f7f8 fbbc 	bl	8007188 <pbuf_free>
  p = NULL;
 800ea10:	2300      	movs	r3, #0
 800ea12:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800ea14:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3720      	adds	r7, #32
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}
 800ea20:	08014f20 	.word	0x08014f20
 800ea24:	08015070 	.word	0x08015070
 800ea28:	08014f98 	.word	0x08014f98
 800ea2c:	08015120 	.word	0x08015120
 800ea30:	08015154 	.word	0x08015154

0800ea34 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b088      	sub	sp, #32
 800ea38:	af04      	add	r7, sp, #16
 800ea3a:	60f8      	str	r0, [r7, #12]
 800ea3c:	60b9      	str	r1, [r7, #8]
 800ea3e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ea50:	2201      	movs	r2, #1
 800ea52:	9203      	str	r2, [sp, #12]
 800ea54:	68ba      	ldr	r2, [r7, #8]
 800ea56:	9202      	str	r2, [sp, #8]
 800ea58:	4a06      	ldr	r2, [pc, #24]	@ (800ea74 <etharp_request_dst+0x40>)
 800ea5a:	9201      	str	r2, [sp, #4]
 800ea5c:	9300      	str	r3, [sp, #0]
 800ea5e:	4603      	mov	r3, r0
 800ea60:	687a      	ldr	r2, [r7, #4]
 800ea62:	68f8      	ldr	r0, [r7, #12]
 800ea64:	f7ff ff5a 	bl	800e91c <etharp_raw>
 800ea68:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	3710      	adds	r7, #16
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}
 800ea72:	bf00      	nop
 800ea74:	08015838 	.word	0x08015838

0800ea78 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b082      	sub	sp, #8
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800ea82:	4a05      	ldr	r2, [pc, #20]	@ (800ea98 <etharp_request+0x20>)
 800ea84:	6839      	ldr	r1, [r7, #0]
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f7ff ffd4 	bl	800ea34 <etharp_request_dst>
 800ea8c:	4603      	mov	r3, r0
}
 800ea8e:	4618      	mov	r0, r3
 800ea90:	3708      	adds	r7, #8
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}
 800ea96:	bf00      	nop
 800ea98:	08015830 	.word	0x08015830

0800ea9c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b08e      	sub	sp, #56	@ 0x38
 800eaa0:	af04      	add	r7, sp, #16
 800eaa2:	6078      	str	r0, [r7, #4]
 800eaa4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800eaa6:	4b79      	ldr	r3, [pc, #484]	@ (800ec8c <icmp_input+0x1f0>)
 800eaa8:	689b      	ldr	r3, [r3, #8]
 800eaaa:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800eaac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaae:	781b      	ldrb	r3, [r3, #0]
 800eab0:	f003 030f 	and.w	r3, r3, #15
 800eab4:	b2db      	uxtb	r3, r3
 800eab6:	009b      	lsls	r3, r3, #2
 800eab8:	b2db      	uxtb	r3, r3
 800eaba:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800eabc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800eabe:	2b13      	cmp	r3, #19
 800eac0:	f240 80cd 	bls.w	800ec5e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	895b      	ldrh	r3, [r3, #10]
 800eac8:	2b03      	cmp	r3, #3
 800eaca:	f240 80ca 	bls.w	800ec62 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	685b      	ldr	r3, [r3, #4]
 800ead2:	781b      	ldrb	r3, [r3, #0]
 800ead4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800ead8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800eadc:	2b00      	cmp	r3, #0
 800eade:	f000 80b7 	beq.w	800ec50 <icmp_input+0x1b4>
 800eae2:	2b08      	cmp	r3, #8
 800eae4:	f040 80b7 	bne.w	800ec56 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800eae8:	4b69      	ldr	r3, [pc, #420]	@ (800ec90 <icmp_input+0x1f4>)
 800eaea:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800eaec:	4b67      	ldr	r3, [pc, #412]	@ (800ec8c <icmp_input+0x1f0>)
 800eaee:	695b      	ldr	r3, [r3, #20]
 800eaf0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800eaf4:	2be0      	cmp	r3, #224	@ 0xe0
 800eaf6:	f000 80bb 	beq.w	800ec70 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800eafa:	4b64      	ldr	r3, [pc, #400]	@ (800ec8c <icmp_input+0x1f0>)
 800eafc:	695b      	ldr	r3, [r3, #20]
 800eafe:	4a63      	ldr	r2, [pc, #396]	@ (800ec8c <icmp_input+0x1f0>)
 800eb00:	6812      	ldr	r2, [r2, #0]
 800eb02:	4611      	mov	r1, r2
 800eb04:	4618      	mov	r0, r3
 800eb06:	f000 fbed 	bl	800f2e4 <ip4_addr_isbroadcast_u32>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	f040 80b1 	bne.w	800ec74 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	891b      	ldrh	r3, [r3, #8]
 800eb16:	2b07      	cmp	r3, #7
 800eb18:	f240 80a5 	bls.w	800ec66 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800eb1c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800eb1e:	330e      	adds	r3, #14
 800eb20:	4619      	mov	r1, r3
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	f7f8 fa9a 	bl	800705c <pbuf_add_header>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d04b      	beq.n	800ebc6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	891a      	ldrh	r2, [r3, #8]
 800eb32:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800eb34:	4413      	add	r3, r2
 800eb36:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	891b      	ldrh	r3, [r3, #8]
 800eb3c:	8b7a      	ldrh	r2, [r7, #26]
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	f0c0 809a 	bcc.w	800ec78 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800eb44:	8b7b      	ldrh	r3, [r7, #26]
 800eb46:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800eb4a:	4619      	mov	r1, r3
 800eb4c:	200e      	movs	r0, #14
 800eb4e:	f7f8 f837 	bl	8006bc0 <pbuf_alloc>
 800eb52:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	f000 8090 	beq.w	800ec7c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800eb5c:	697b      	ldr	r3, [r7, #20]
 800eb5e:	895b      	ldrh	r3, [r3, #10]
 800eb60:	461a      	mov	r2, r3
 800eb62:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800eb64:	3308      	adds	r3, #8
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d203      	bcs.n	800eb72 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800eb6a:	6978      	ldr	r0, [r7, #20]
 800eb6c:	f7f8 fb0c 	bl	8007188 <pbuf_free>
          goto icmperr;
 800eb70:	e085      	b.n	800ec7e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	685b      	ldr	r3, [r3, #4]
 800eb76:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800eb78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f003 f845 	bl	8011c0a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800eb80:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800eb82:	4619      	mov	r1, r3
 800eb84:	6978      	ldr	r0, [r7, #20]
 800eb86:	f7f8 fa79 	bl	800707c <pbuf_remove_header>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d009      	beq.n	800eba4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800eb90:	4b40      	ldr	r3, [pc, #256]	@ (800ec94 <icmp_input+0x1f8>)
 800eb92:	22b6      	movs	r2, #182	@ 0xb6
 800eb94:	4940      	ldr	r1, [pc, #256]	@ (800ec98 <icmp_input+0x1fc>)
 800eb96:	4841      	ldr	r0, [pc, #260]	@ (800ec9c <icmp_input+0x200>)
 800eb98:	f002 ff0c 	bl	80119b4 <iprintf>
          pbuf_free(r);
 800eb9c:	6978      	ldr	r0, [r7, #20]
 800eb9e:	f7f8 faf3 	bl	8007188 <pbuf_free>
          goto icmperr;
 800eba2:	e06c      	b.n	800ec7e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800eba4:	6879      	ldr	r1, [r7, #4]
 800eba6:	6978      	ldr	r0, [r7, #20]
 800eba8:	f7f8 fc06 	bl	80073b8 <pbuf_copy>
 800ebac:	4603      	mov	r3, r0
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d003      	beq.n	800ebba <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800ebb2:	6978      	ldr	r0, [r7, #20]
 800ebb4:	f7f8 fae8 	bl	8007188 <pbuf_free>
          goto icmperr;
 800ebb8:	e061      	b.n	800ec7e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f7f8 fae4 	bl	8007188 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	607b      	str	r3, [r7, #4]
 800ebc4:	e00f      	b.n	800ebe6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ebc6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ebc8:	330e      	adds	r3, #14
 800ebca:	4619      	mov	r1, r3
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f7f8 fa55 	bl	800707c <pbuf_remove_header>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d006      	beq.n	800ebe6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800ebd8:	4b2e      	ldr	r3, [pc, #184]	@ (800ec94 <icmp_input+0x1f8>)
 800ebda:	22c7      	movs	r2, #199	@ 0xc7
 800ebdc:	4930      	ldr	r1, [pc, #192]	@ (800eca0 <icmp_input+0x204>)
 800ebde:	482f      	ldr	r0, [pc, #188]	@ (800ec9c <icmp_input+0x200>)
 800ebe0:	f002 fee8 	bl	80119b4 <iprintf>
          goto icmperr;
 800ebe4:	e04b      	b.n	800ec7e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	685b      	ldr	r3, [r3, #4]
 800ebea:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800ebec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ebee:	4619      	mov	r1, r3
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	f7f8 fa33 	bl	800705c <pbuf_add_header>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d12b      	bne.n	800ec54 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	685b      	ldr	r3, [r3, #4]
 800ec00:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800ec02:	69fb      	ldr	r3, [r7, #28]
 800ec04:	681a      	ldr	r2, [r3, #0]
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800ec0a:	4b20      	ldr	r3, [pc, #128]	@ (800ec8c <icmp_input+0x1f0>)
 800ec0c:	691a      	ldr	r2, [r3, #16]
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800ec12:	693b      	ldr	r3, [r7, #16]
 800ec14:	2200      	movs	r2, #0
 800ec16:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800ec18:	693b      	ldr	r3, [r7, #16]
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	709a      	strb	r2, [r3, #2]
 800ec1e:	2200      	movs	r2, #0
 800ec20:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	22ff      	movs	r2, #255	@ 0xff
 800ec26:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	729a      	strb	r2, [r3, #10]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	9302      	str	r3, [sp, #8]
 800ec36:	2301      	movs	r3, #1
 800ec38:	9301      	str	r3, [sp, #4]
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	9300      	str	r3, [sp, #0]
 800ec3e:	23ff      	movs	r3, #255	@ 0xff
 800ec40:	2200      	movs	r2, #0
 800ec42:	69f9      	ldr	r1, [r7, #28]
 800ec44:	6878      	ldr	r0, [r7, #4]
 800ec46:	f000 fa75 	bl	800f134 <ip4_output_if>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800ec4e:	e001      	b.n	800ec54 <icmp_input+0x1b8>
      break;
 800ec50:	bf00      	nop
 800ec52:	e000      	b.n	800ec56 <icmp_input+0x1ba>
      break;
 800ec54:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f7f8 fa96 	bl	8007188 <pbuf_free>
  return;
 800ec5c:	e013      	b.n	800ec86 <icmp_input+0x1ea>
    goto lenerr;
 800ec5e:	bf00      	nop
 800ec60:	e002      	b.n	800ec68 <icmp_input+0x1cc>
    goto lenerr;
 800ec62:	bf00      	nop
 800ec64:	e000      	b.n	800ec68 <icmp_input+0x1cc>
        goto lenerr;
 800ec66:	bf00      	nop
lenerr:
  pbuf_free(p);
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f7f8 fa8d 	bl	8007188 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ec6e:	e00a      	b.n	800ec86 <icmp_input+0x1ea>
        goto icmperr;
 800ec70:	bf00      	nop
 800ec72:	e004      	b.n	800ec7e <icmp_input+0x1e2>
        goto icmperr;
 800ec74:	bf00      	nop
 800ec76:	e002      	b.n	800ec7e <icmp_input+0x1e2>
          goto icmperr;
 800ec78:	bf00      	nop
 800ec7a:	e000      	b.n	800ec7e <icmp_input+0x1e2>
          goto icmperr;
 800ec7c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	f7f8 fa82 	bl	8007188 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ec84:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800ec86:	3728      	adds	r7, #40	@ 0x28
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}
 800ec8c:	20004e68 	.word	0x20004e68
 800ec90:	20004e7c 	.word	0x20004e7c
 800ec94:	08015198 	.word	0x08015198
 800ec98:	080151d0 	.word	0x080151d0
 800ec9c:	08015208 	.word	0x08015208
 800eca0:	08015230 	.word	0x08015230

0800eca4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b082      	sub	sp, #8
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
 800ecac:	460b      	mov	r3, r1
 800ecae:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ecb0:	78fb      	ldrb	r3, [r7, #3]
 800ecb2:	461a      	mov	r2, r3
 800ecb4:	2103      	movs	r1, #3
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f000 f814 	bl	800ece4 <icmp_send_response>
}
 800ecbc:	bf00      	nop
 800ecbe:	3708      	adds	r7, #8
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}

0800ecc4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b082      	sub	sp, #8
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	460b      	mov	r3, r1
 800ecce:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800ecd0:	78fb      	ldrb	r3, [r7, #3]
 800ecd2:	461a      	mov	r2, r3
 800ecd4:	210b      	movs	r1, #11
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	f000 f804 	bl	800ece4 <icmp_send_response>
}
 800ecdc:	bf00      	nop
 800ecde:	3708      	adds	r7, #8
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}

0800ece4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b08c      	sub	sp, #48	@ 0x30
 800ece8:	af04      	add	r7, sp, #16
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	460b      	mov	r3, r1
 800ecee:	70fb      	strb	r3, [r7, #3]
 800ecf0:	4613      	mov	r3, r2
 800ecf2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ecf4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ecf8:	2124      	movs	r1, #36	@ 0x24
 800ecfa:	2022      	movs	r0, #34	@ 0x22
 800ecfc:	f7f7 ff60 	bl	8006bc0 <pbuf_alloc>
 800ed00:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800ed02:	69fb      	ldr	r3, [r7, #28]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d04c      	beq.n	800eda2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ed08:	69fb      	ldr	r3, [r7, #28]
 800ed0a:	895b      	ldrh	r3, [r3, #10]
 800ed0c:	2b23      	cmp	r3, #35	@ 0x23
 800ed0e:	d806      	bhi.n	800ed1e <icmp_send_response+0x3a>
 800ed10:	4b26      	ldr	r3, [pc, #152]	@ (800edac <icmp_send_response+0xc8>)
 800ed12:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800ed16:	4926      	ldr	r1, [pc, #152]	@ (800edb0 <icmp_send_response+0xcc>)
 800ed18:	4826      	ldr	r0, [pc, #152]	@ (800edb4 <icmp_send_response+0xd0>)
 800ed1a:	f002 fe4b 	bl	80119b4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	685b      	ldr	r3, [r3, #4]
 800ed22:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ed24:	69fb      	ldr	r3, [r7, #28]
 800ed26:	685b      	ldr	r3, [r3, #4]
 800ed28:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800ed2a:	697b      	ldr	r3, [r7, #20]
 800ed2c:	78fa      	ldrb	r2, [r7, #3]
 800ed2e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800ed30:	697b      	ldr	r3, [r7, #20]
 800ed32:	78ba      	ldrb	r2, [r7, #2]
 800ed34:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ed36:	697b      	ldr	r3, [r7, #20]
 800ed38:	2200      	movs	r2, #0
 800ed3a:	711a      	strb	r2, [r3, #4]
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800ed40:	697b      	ldr	r3, [r7, #20]
 800ed42:	2200      	movs	r2, #0
 800ed44:	719a      	strb	r2, [r3, #6]
 800ed46:	2200      	movs	r2, #0
 800ed48:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ed4a:	69fb      	ldr	r3, [r7, #28]
 800ed4c:	685b      	ldr	r3, [r3, #4]
 800ed4e:	f103 0008 	add.w	r0, r3, #8
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	685b      	ldr	r3, [r3, #4]
 800ed56:	221c      	movs	r2, #28
 800ed58:	4619      	mov	r1, r3
 800ed5a:	f002 ff56 	bl	8011c0a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800ed5e:	69bb      	ldr	r3, [r7, #24]
 800ed60:	68db      	ldr	r3, [r3, #12]
 800ed62:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800ed64:	f107 030c 	add.w	r3, r7, #12
 800ed68:	4618      	mov	r0, r3
 800ed6a:	f000 f825 	bl	800edb8 <ip4_route>
 800ed6e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d011      	beq.n	800ed9a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	2200      	movs	r2, #0
 800ed7a:	709a      	strb	r2, [r3, #2]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ed80:	f107 020c 	add.w	r2, r7, #12
 800ed84:	693b      	ldr	r3, [r7, #16]
 800ed86:	9302      	str	r3, [sp, #8]
 800ed88:	2301      	movs	r3, #1
 800ed8a:	9301      	str	r3, [sp, #4]
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	9300      	str	r3, [sp, #0]
 800ed90:	23ff      	movs	r3, #255	@ 0xff
 800ed92:	2100      	movs	r1, #0
 800ed94:	69f8      	ldr	r0, [r7, #28]
 800ed96:	f000 f9cd 	bl	800f134 <ip4_output_if>
  }
  pbuf_free(q);
 800ed9a:	69f8      	ldr	r0, [r7, #28]
 800ed9c:	f7f8 f9f4 	bl	8007188 <pbuf_free>
 800eda0:	e000      	b.n	800eda4 <icmp_send_response+0xc0>
    return;
 800eda2:	bf00      	nop
}
 800eda4:	3720      	adds	r7, #32
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}
 800edaa:	bf00      	nop
 800edac:	08015198 	.word	0x08015198
 800edb0:	08015264 	.word	0x08015264
 800edb4:	08015208 	.word	0x08015208

0800edb8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800edb8:	b480      	push	{r7}
 800edba:	b085      	sub	sp, #20
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800edc0:	4b33      	ldr	r3, [pc, #204]	@ (800ee90 <ip4_route+0xd8>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	60fb      	str	r3, [r7, #12]
 800edc6:	e036      	b.n	800ee36 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800edce:	f003 0301 	and.w	r3, r3, #1
 800edd2:	b2db      	uxtb	r3, r3
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d02b      	beq.n	800ee30 <ip4_route+0x78>
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800edde:	089b      	lsrs	r3, r3, #2
 800ede0:	f003 0301 	and.w	r3, r3, #1
 800ede4:	b2db      	uxtb	r3, r3
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d022      	beq.n	800ee30 <ip4_route+0x78>
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	3304      	adds	r3, #4
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d01d      	beq.n	800ee30 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681a      	ldr	r2, [r3, #0]
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	3304      	adds	r3, #4
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	405a      	eors	r2, r3
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	3308      	adds	r3, #8
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	4013      	ands	r3, r2
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d101      	bne.n	800ee10 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	e038      	b.n	800ee82 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ee16:	f003 0302 	and.w	r3, r3, #2
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d108      	bne.n	800ee30 <ip4_route+0x78>
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681a      	ldr	r2, [r3, #0]
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	330c      	adds	r3, #12
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	429a      	cmp	r2, r3
 800ee2a:	d101      	bne.n	800ee30 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	e028      	b.n	800ee82 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	60fb      	str	r3, [r7, #12]
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d1c5      	bne.n	800edc8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ee3c:	4b15      	ldr	r3, [pc, #84]	@ (800ee94 <ip4_route+0xdc>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d01a      	beq.n	800ee7a <ip4_route+0xc2>
 800ee44:	4b13      	ldr	r3, [pc, #76]	@ (800ee94 <ip4_route+0xdc>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ee4c:	f003 0301 	and.w	r3, r3, #1
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d012      	beq.n	800ee7a <ip4_route+0xc2>
 800ee54:	4b0f      	ldr	r3, [pc, #60]	@ (800ee94 <ip4_route+0xdc>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ee5c:	f003 0304 	and.w	r3, r3, #4
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d00a      	beq.n	800ee7a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ee64:	4b0b      	ldr	r3, [pc, #44]	@ (800ee94 <ip4_route+0xdc>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	3304      	adds	r3, #4
 800ee6a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d004      	beq.n	800ee7a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	b2db      	uxtb	r3, r3
 800ee76:	2b7f      	cmp	r3, #127	@ 0x7f
 800ee78:	d101      	bne.n	800ee7e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	e001      	b.n	800ee82 <ip4_route+0xca>
  }

  return netif_default;
 800ee7e:	4b05      	ldr	r3, [pc, #20]	@ (800ee94 <ip4_route+0xdc>)
 800ee80:	681b      	ldr	r3, [r3, #0]
}
 800ee82:	4618      	mov	r0, r3
 800ee84:	3714      	adds	r7, #20
 800ee86:	46bd      	mov	sp, r7
 800ee88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8c:	4770      	bx	lr
 800ee8e:	bf00      	nop
 800ee90:	200083cc 	.word	0x200083cc
 800ee94:	200083d0 	.word	0x200083d0

0800ee98 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b082      	sub	sp, #8
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800eea6:	f003 0301 	and.w	r3, r3, #1
 800eeaa:	b2db      	uxtb	r3, r3
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d016      	beq.n	800eede <ip4_input_accept+0x46>
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	3304      	adds	r3, #4
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d011      	beq.n	800eede <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800eeba:	4b0b      	ldr	r3, [pc, #44]	@ (800eee8 <ip4_input_accept+0x50>)
 800eebc:	695a      	ldr	r2, [r3, #20]
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	3304      	adds	r3, #4
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	429a      	cmp	r2, r3
 800eec6:	d008      	beq.n	800eeda <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800eec8:	4b07      	ldr	r3, [pc, #28]	@ (800eee8 <ip4_input_accept+0x50>)
 800eeca:	695b      	ldr	r3, [r3, #20]
 800eecc:	6879      	ldr	r1, [r7, #4]
 800eece:	4618      	mov	r0, r3
 800eed0:	f000 fa08 	bl	800f2e4 <ip4_addr_isbroadcast_u32>
 800eed4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d001      	beq.n	800eede <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800eeda:	2301      	movs	r3, #1
 800eedc:	e000      	b.n	800eee0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800eede:	2300      	movs	r3, #0
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	3708      	adds	r7, #8
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}
 800eee8:	20004e68 	.word	0x20004e68

0800eeec <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b086      	sub	sp, #24
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
 800eef4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	685b      	ldr	r3, [r3, #4]
 800eefa:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800eefc:	697b      	ldr	r3, [r7, #20]
 800eefe:	781b      	ldrb	r3, [r3, #0]
 800ef00:	091b      	lsrs	r3, r3, #4
 800ef02:	b2db      	uxtb	r3, r3
 800ef04:	2b04      	cmp	r3, #4
 800ef06:	d004      	beq.n	800ef12 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800ef08:	6878      	ldr	r0, [r7, #4]
 800ef0a:	f7f8 f93d 	bl	8007188 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	e107      	b.n	800f122 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	781b      	ldrb	r3, [r3, #0]
 800ef16:	f003 030f 	and.w	r3, r3, #15
 800ef1a:	b2db      	uxtb	r3, r3
 800ef1c:	009b      	lsls	r3, r3, #2
 800ef1e:	b2db      	uxtb	r3, r3
 800ef20:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	885b      	ldrh	r3, [r3, #2]
 800ef26:	b29b      	uxth	r3, r3
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f7f6 fdcf 	bl	8005acc <lwip_htons>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	891b      	ldrh	r3, [r3, #8]
 800ef36:	89ba      	ldrh	r2, [r7, #12]
 800ef38:	429a      	cmp	r2, r3
 800ef3a:	d204      	bcs.n	800ef46 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800ef3c:	89bb      	ldrh	r3, [r7, #12]
 800ef3e:	4619      	mov	r1, r3
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f7f7 ff9b 	bl	8006e7c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	895b      	ldrh	r3, [r3, #10]
 800ef4a:	89fa      	ldrh	r2, [r7, #14]
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	d807      	bhi.n	800ef60 <ip4_input+0x74>
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	891b      	ldrh	r3, [r3, #8]
 800ef54:	89ba      	ldrh	r2, [r7, #12]
 800ef56:	429a      	cmp	r2, r3
 800ef58:	d802      	bhi.n	800ef60 <ip4_input+0x74>
 800ef5a:	89fb      	ldrh	r3, [r7, #14]
 800ef5c:	2b13      	cmp	r3, #19
 800ef5e:	d804      	bhi.n	800ef6a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800ef60:	6878      	ldr	r0, [r7, #4]
 800ef62:	f7f8 f911 	bl	8007188 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800ef66:	2300      	movs	r3, #0
 800ef68:	e0db      	b.n	800f122 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800ef6a:	697b      	ldr	r3, [r7, #20]
 800ef6c:	691b      	ldr	r3, [r3, #16]
 800ef6e:	4a6f      	ldr	r2, [pc, #444]	@ (800f12c <ip4_input+0x240>)
 800ef70:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ef72:	697b      	ldr	r3, [r7, #20]
 800ef74:	68db      	ldr	r3, [r3, #12]
 800ef76:	4a6d      	ldr	r2, [pc, #436]	@ (800f12c <ip4_input+0x240>)
 800ef78:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ef7a:	4b6c      	ldr	r3, [pc, #432]	@ (800f12c <ip4_input+0x240>)
 800ef7c:	695b      	ldr	r3, [r3, #20]
 800ef7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ef82:	2be0      	cmp	r3, #224	@ 0xe0
 800ef84:	d112      	bne.n	800efac <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ef8c:	f003 0301 	and.w	r3, r3, #1
 800ef90:	b2db      	uxtb	r3, r3
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d007      	beq.n	800efa6 <ip4_input+0xba>
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	3304      	adds	r3, #4
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d002      	beq.n	800efa6 <ip4_input+0xba>
      netif = inp;
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	613b      	str	r3, [r7, #16]
 800efa4:	e02a      	b.n	800effc <ip4_input+0x110>
    } else {
      netif = NULL;
 800efa6:	2300      	movs	r3, #0
 800efa8:	613b      	str	r3, [r7, #16]
 800efaa:	e027      	b.n	800effc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800efac:	6838      	ldr	r0, [r7, #0]
 800efae:	f7ff ff73 	bl	800ee98 <ip4_input_accept>
 800efb2:	4603      	mov	r3, r0
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d002      	beq.n	800efbe <ip4_input+0xd2>
      netif = inp;
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	613b      	str	r3, [r7, #16]
 800efbc:	e01e      	b.n	800effc <ip4_input+0x110>
    } else {
      netif = NULL;
 800efbe:	2300      	movs	r3, #0
 800efc0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800efc2:	4b5a      	ldr	r3, [pc, #360]	@ (800f12c <ip4_input+0x240>)
 800efc4:	695b      	ldr	r3, [r3, #20]
 800efc6:	b2db      	uxtb	r3, r3
 800efc8:	2b7f      	cmp	r3, #127	@ 0x7f
 800efca:	d017      	beq.n	800effc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800efcc:	4b58      	ldr	r3, [pc, #352]	@ (800f130 <ip4_input+0x244>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	613b      	str	r3, [r7, #16]
 800efd2:	e00e      	b.n	800eff2 <ip4_input+0x106>
          if (netif == inp) {
 800efd4:	693a      	ldr	r2, [r7, #16]
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	429a      	cmp	r2, r3
 800efda:	d006      	beq.n	800efea <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800efdc:	6938      	ldr	r0, [r7, #16]
 800efde:	f7ff ff5b 	bl	800ee98 <ip4_input_accept>
 800efe2:	4603      	mov	r3, r0
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d108      	bne.n	800effa <ip4_input+0x10e>
 800efe8:	e000      	b.n	800efec <ip4_input+0x100>
            continue;
 800efea:	bf00      	nop
        NETIF_FOREACH(netif) {
 800efec:	693b      	ldr	r3, [r7, #16]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	613b      	str	r3, [r7, #16]
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d1ed      	bne.n	800efd4 <ip4_input+0xe8>
 800eff8:	e000      	b.n	800effc <ip4_input+0x110>
            break;
 800effa:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800effc:	4b4b      	ldr	r3, [pc, #300]	@ (800f12c <ip4_input+0x240>)
 800effe:	691b      	ldr	r3, [r3, #16]
 800f000:	6839      	ldr	r1, [r7, #0]
 800f002:	4618      	mov	r0, r3
 800f004:	f000 f96e 	bl	800f2e4 <ip4_addr_isbroadcast_u32>
 800f008:	4603      	mov	r3, r0
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d105      	bne.n	800f01a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800f00e:	4b47      	ldr	r3, [pc, #284]	@ (800f12c <ip4_input+0x240>)
 800f010:	691b      	ldr	r3, [r3, #16]
 800f012:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f016:	2be0      	cmp	r3, #224	@ 0xe0
 800f018:	d104      	bne.n	800f024 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f7f8 f8b4 	bl	8007188 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800f020:	2300      	movs	r3, #0
 800f022:	e07e      	b.n	800f122 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800f024:	693b      	ldr	r3, [r7, #16]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d104      	bne.n	800f034 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800f02a:	6878      	ldr	r0, [r7, #4]
 800f02c:	f7f8 f8ac 	bl	8007188 <pbuf_free>
    return ERR_OK;
 800f030:	2300      	movs	r3, #0
 800f032:	e076      	b.n	800f122 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800f034:	697b      	ldr	r3, [r7, #20]
 800f036:	88db      	ldrh	r3, [r3, #6]
 800f038:	b29b      	uxth	r3, r3
 800f03a:	461a      	mov	r2, r3
 800f03c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800f040:	4013      	ands	r3, r2
 800f042:	2b00      	cmp	r3, #0
 800f044:	d00b      	beq.n	800f05e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f000 fc92 	bl	800f970 <ip4_reass>
 800f04c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d101      	bne.n	800f058 <ip4_input+0x16c>
      return ERR_OK;
 800f054:	2300      	movs	r3, #0
 800f056:	e064      	b.n	800f122 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	685b      	ldr	r3, [r3, #4]
 800f05c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800f05e:	4a33      	ldr	r2, [pc, #204]	@ (800f12c <ip4_input+0x240>)
 800f060:	693b      	ldr	r3, [r7, #16]
 800f062:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800f064:	4a31      	ldr	r2, [pc, #196]	@ (800f12c <ip4_input+0x240>)
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800f06a:	4a30      	ldr	r2, [pc, #192]	@ (800f12c <ip4_input+0x240>)
 800f06c:	697b      	ldr	r3, [r7, #20]
 800f06e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800f070:	697b      	ldr	r3, [r7, #20]
 800f072:	781b      	ldrb	r3, [r3, #0]
 800f074:	f003 030f 	and.w	r3, r3, #15
 800f078:	b2db      	uxtb	r3, r3
 800f07a:	009b      	lsls	r3, r3, #2
 800f07c:	b2db      	uxtb	r3, r3
 800f07e:	461a      	mov	r2, r3
 800f080:	4b2a      	ldr	r3, [pc, #168]	@ (800f12c <ip4_input+0x240>)
 800f082:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800f084:	89fb      	ldrh	r3, [r7, #14]
 800f086:	4619      	mov	r1, r3
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f7f7 fff7 	bl	800707c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	7a5b      	ldrb	r3, [r3, #9]
 800f092:	2b11      	cmp	r3, #17
 800f094:	d006      	beq.n	800f0a4 <ip4_input+0x1b8>
 800f096:	2b11      	cmp	r3, #17
 800f098:	dc13      	bgt.n	800f0c2 <ip4_input+0x1d6>
 800f09a:	2b01      	cmp	r3, #1
 800f09c:	d00c      	beq.n	800f0b8 <ip4_input+0x1cc>
 800f09e:	2b06      	cmp	r3, #6
 800f0a0:	d005      	beq.n	800f0ae <ip4_input+0x1c2>
 800f0a2:	e00e      	b.n	800f0c2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800f0a4:	6839      	ldr	r1, [r7, #0]
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f7fe fc68 	bl	800d97c <udp_input>
        break;
 800f0ac:	e026      	b.n	800f0fc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800f0ae:	6839      	ldr	r1, [r7, #0]
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f7fa f88f 	bl	80091d4 <tcp_input>
        break;
 800f0b6:	e021      	b.n	800f0fc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800f0b8:	6839      	ldr	r1, [r7, #0]
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f7ff fcee 	bl	800ea9c <icmp_input>
        break;
 800f0c0:	e01c      	b.n	800f0fc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f0c2:	4b1a      	ldr	r3, [pc, #104]	@ (800f12c <ip4_input+0x240>)
 800f0c4:	695b      	ldr	r3, [r3, #20]
 800f0c6:	6939      	ldr	r1, [r7, #16]
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f000 f90b 	bl	800f2e4 <ip4_addr_isbroadcast_u32>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d10f      	bne.n	800f0f4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f0d4:	4b15      	ldr	r3, [pc, #84]	@ (800f12c <ip4_input+0x240>)
 800f0d6:	695b      	ldr	r3, [r3, #20]
 800f0d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f0dc:	2be0      	cmp	r3, #224	@ 0xe0
 800f0de:	d009      	beq.n	800f0f4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800f0e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f0e4:	4619      	mov	r1, r3
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f7f8 f83b 	bl	8007162 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800f0ec:	2102      	movs	r1, #2
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f7ff fdd8 	bl	800eca4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	f7f8 f847 	bl	8007188 <pbuf_free>
        break;
 800f0fa:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800f0fc:	4b0b      	ldr	r3, [pc, #44]	@ (800f12c <ip4_input+0x240>)
 800f0fe:	2200      	movs	r2, #0
 800f100:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800f102:	4b0a      	ldr	r3, [pc, #40]	@ (800f12c <ip4_input+0x240>)
 800f104:	2200      	movs	r2, #0
 800f106:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800f108:	4b08      	ldr	r3, [pc, #32]	@ (800f12c <ip4_input+0x240>)
 800f10a:	2200      	movs	r2, #0
 800f10c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800f10e:	4b07      	ldr	r3, [pc, #28]	@ (800f12c <ip4_input+0x240>)
 800f110:	2200      	movs	r2, #0
 800f112:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800f114:	4b05      	ldr	r3, [pc, #20]	@ (800f12c <ip4_input+0x240>)
 800f116:	2200      	movs	r2, #0
 800f118:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800f11a:	4b04      	ldr	r3, [pc, #16]	@ (800f12c <ip4_input+0x240>)
 800f11c:	2200      	movs	r2, #0
 800f11e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800f120:	2300      	movs	r3, #0
}
 800f122:	4618      	mov	r0, r3
 800f124:	3718      	adds	r7, #24
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}
 800f12a:	bf00      	nop
 800f12c:	20004e68 	.word	0x20004e68
 800f130:	200083cc 	.word	0x200083cc

0800f134 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b08a      	sub	sp, #40	@ 0x28
 800f138:	af04      	add	r7, sp, #16
 800f13a:	60f8      	str	r0, [r7, #12]
 800f13c:	60b9      	str	r1, [r7, #8]
 800f13e:	607a      	str	r2, [r7, #4]
 800f140:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d009      	beq.n	800f160 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d003      	beq.n	800f15a <ip4_output_if+0x26>
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d102      	bne.n	800f160 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800f15a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f15c:	3304      	adds	r3, #4
 800f15e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800f160:	78fa      	ldrb	r2, [r7, #3]
 800f162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f164:	9302      	str	r3, [sp, #8]
 800f166:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f16a:	9301      	str	r3, [sp, #4]
 800f16c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f170:	9300      	str	r3, [sp, #0]
 800f172:	4613      	mov	r3, r2
 800f174:	687a      	ldr	r2, [r7, #4]
 800f176:	6979      	ldr	r1, [r7, #20]
 800f178:	68f8      	ldr	r0, [r7, #12]
 800f17a:	f000 f805 	bl	800f188 <ip4_output_if_src>
 800f17e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800f180:	4618      	mov	r0, r3
 800f182:	3718      	adds	r7, #24
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}

0800f188 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b088      	sub	sp, #32
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	60f8      	str	r0, [r7, #12]
 800f190:	60b9      	str	r1, [r7, #8]
 800f192:	607a      	str	r2, [r7, #4]
 800f194:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	7b9b      	ldrb	r3, [r3, #14]
 800f19a:	2b01      	cmp	r3, #1
 800f19c:	d006      	beq.n	800f1ac <ip4_output_if_src+0x24>
 800f19e:	4b4b      	ldr	r3, [pc, #300]	@ (800f2cc <ip4_output_if_src+0x144>)
 800f1a0:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800f1a4:	494a      	ldr	r1, [pc, #296]	@ (800f2d0 <ip4_output_if_src+0x148>)
 800f1a6:	484b      	ldr	r0, [pc, #300]	@ (800f2d4 <ip4_output_if_src+0x14c>)
 800f1a8:	f002 fc04 	bl	80119b4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d060      	beq.n	800f274 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800f1b2:	2314      	movs	r3, #20
 800f1b4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800f1b6:	2114      	movs	r1, #20
 800f1b8:	68f8      	ldr	r0, [r7, #12]
 800f1ba:	f7f7 ff4f 	bl	800705c <pbuf_add_header>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d002      	beq.n	800f1ca <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f1c4:	f06f 0301 	mvn.w	r3, #1
 800f1c8:	e07c      	b.n	800f2c4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	685b      	ldr	r3, [r3, #4]
 800f1ce:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	895b      	ldrh	r3, [r3, #10]
 800f1d4:	2b13      	cmp	r3, #19
 800f1d6:	d806      	bhi.n	800f1e6 <ip4_output_if_src+0x5e>
 800f1d8:	4b3c      	ldr	r3, [pc, #240]	@ (800f2cc <ip4_output_if_src+0x144>)
 800f1da:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800f1de:	493e      	ldr	r1, [pc, #248]	@ (800f2d8 <ip4_output_if_src+0x150>)
 800f1e0:	483c      	ldr	r0, [pc, #240]	@ (800f2d4 <ip4_output_if_src+0x14c>)
 800f1e2:	f002 fbe7 	bl	80119b4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800f1e6:	69fb      	ldr	r3, [r7, #28]
 800f1e8:	78fa      	ldrb	r2, [r7, #3]
 800f1ea:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800f1ec:	69fb      	ldr	r3, [r7, #28]
 800f1ee:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800f1f2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681a      	ldr	r2, [r3, #0]
 800f1f8:	69fb      	ldr	r3, [r7, #28]
 800f1fa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800f1fc:	8b7b      	ldrh	r3, [r7, #26]
 800f1fe:	089b      	lsrs	r3, r3, #2
 800f200:	b29b      	uxth	r3, r3
 800f202:	b2db      	uxtb	r3, r3
 800f204:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f208:	b2da      	uxtb	r2, r3
 800f20a:	69fb      	ldr	r3, [r7, #28]
 800f20c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800f20e:	69fb      	ldr	r3, [r7, #28]
 800f210:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800f214:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	891b      	ldrh	r3, [r3, #8]
 800f21a:	4618      	mov	r0, r3
 800f21c:	f7f6 fc56 	bl	8005acc <lwip_htons>
 800f220:	4603      	mov	r3, r0
 800f222:	461a      	mov	r2, r3
 800f224:	69fb      	ldr	r3, [r7, #28]
 800f226:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f228:	69fb      	ldr	r3, [r7, #28]
 800f22a:	2200      	movs	r2, #0
 800f22c:	719a      	strb	r2, [r3, #6]
 800f22e:	2200      	movs	r2, #0
 800f230:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f232:	4b2a      	ldr	r3, [pc, #168]	@ (800f2dc <ip4_output_if_src+0x154>)
 800f234:	881b      	ldrh	r3, [r3, #0]
 800f236:	4618      	mov	r0, r3
 800f238:	f7f6 fc48 	bl	8005acc <lwip_htons>
 800f23c:	4603      	mov	r3, r0
 800f23e:	461a      	mov	r2, r3
 800f240:	69fb      	ldr	r3, [r7, #28]
 800f242:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f244:	4b25      	ldr	r3, [pc, #148]	@ (800f2dc <ip4_output_if_src+0x154>)
 800f246:	881b      	ldrh	r3, [r3, #0]
 800f248:	3301      	adds	r3, #1
 800f24a:	b29a      	uxth	r2, r3
 800f24c:	4b23      	ldr	r3, [pc, #140]	@ (800f2dc <ip4_output_if_src+0x154>)
 800f24e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d104      	bne.n	800f260 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f256:	4b22      	ldr	r3, [pc, #136]	@ (800f2e0 <ip4_output_if_src+0x158>)
 800f258:	681a      	ldr	r2, [r3, #0]
 800f25a:	69fb      	ldr	r3, [r7, #28]
 800f25c:	60da      	str	r2, [r3, #12]
 800f25e:	e003      	b.n	800f268 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	681a      	ldr	r2, [r3, #0]
 800f264:	69fb      	ldr	r3, [r7, #28]
 800f266:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f268:	69fb      	ldr	r3, [r7, #28]
 800f26a:	2200      	movs	r2, #0
 800f26c:	729a      	strb	r2, [r3, #10]
 800f26e:	2200      	movs	r2, #0
 800f270:	72da      	strb	r2, [r3, #11]
 800f272:	e00f      	b.n	800f294 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	895b      	ldrh	r3, [r3, #10]
 800f278:	2b13      	cmp	r3, #19
 800f27a:	d802      	bhi.n	800f282 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f27c:	f06f 0301 	mvn.w	r3, #1
 800f280:	e020      	b.n	800f2c4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	685b      	ldr	r3, [r3, #4]
 800f286:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f288:	69fb      	ldr	r3, [r7, #28]
 800f28a:	691b      	ldr	r3, [r3, #16]
 800f28c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800f28e:	f107 0314 	add.w	r3, r7, #20
 800f292:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f296:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d00c      	beq.n	800f2b6 <ip4_output_if_src+0x12e>
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	891a      	ldrh	r2, [r3, #8]
 800f2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2a2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f2a4:	429a      	cmp	r2, r3
 800f2a6:	d906      	bls.n	800f2b6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800f2a8:	687a      	ldr	r2, [r7, #4]
 800f2aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f2ac:	68f8      	ldr	r0, [r7, #12]
 800f2ae:	f000 fd53 	bl	800fd58 <ip4_frag>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	e006      	b.n	800f2c4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800f2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2b8:	695b      	ldr	r3, [r3, #20]
 800f2ba:	687a      	ldr	r2, [r7, #4]
 800f2bc:	68f9      	ldr	r1, [r7, #12]
 800f2be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f2c0:	4798      	blx	r3
 800f2c2:	4603      	mov	r3, r0
}
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	3720      	adds	r7, #32
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}
 800f2cc:	08015290 	.word	0x08015290
 800f2d0:	080152c4 	.word	0x080152c4
 800f2d4:	080152d0 	.word	0x080152d0
 800f2d8:	080152f8 	.word	0x080152f8
 800f2dc:	2000852a 	.word	0x2000852a
 800f2e0:	0801582c 	.word	0x0801582c

0800f2e4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b085      	sub	sp, #20
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2f8:	d002      	beq.n	800f300 <ip4_addr_isbroadcast_u32+0x1c>
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d101      	bne.n	800f304 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800f300:	2301      	movs	r3, #1
 800f302:	e02a      	b.n	800f35a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f30a:	f003 0302 	and.w	r3, r3, #2
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d101      	bne.n	800f316 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800f312:	2300      	movs	r3, #0
 800f314:	e021      	b.n	800f35a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	3304      	adds	r3, #4
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	687a      	ldr	r2, [r7, #4]
 800f31e:	429a      	cmp	r2, r3
 800f320:	d101      	bne.n	800f326 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800f322:	2300      	movs	r3, #0
 800f324:	e019      	b.n	800f35a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f326:	68fa      	ldr	r2, [r7, #12]
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	3304      	adds	r3, #4
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	405a      	eors	r2, r3
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	3308      	adds	r3, #8
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	4013      	ands	r3, r2
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d10d      	bne.n	800f358 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	3308      	adds	r3, #8
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	43da      	mvns	r2, r3
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	3308      	adds	r3, #8
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f350:	429a      	cmp	r2, r3
 800f352:	d101      	bne.n	800f358 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800f354:	2301      	movs	r3, #1
 800f356:	e000      	b.n	800f35a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800f358:	2300      	movs	r3, #0
  }
}
 800f35a:	4618      	mov	r0, r3
 800f35c:	3714      	adds	r7, #20
 800f35e:	46bd      	mov	sp, r7
 800f360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f364:	4770      	bx	lr
	...

0800f368 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b084      	sub	sp, #16
 800f36c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800f36e:	2300      	movs	r3, #0
 800f370:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800f372:	4b12      	ldr	r3, [pc, #72]	@ (800f3bc <ip_reass_tmr+0x54>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800f378:	e018      	b.n	800f3ac <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	7fdb      	ldrb	r3, [r3, #31]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d00b      	beq.n	800f39a <ip_reass_tmr+0x32>
      r->timer--;
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	7fdb      	ldrb	r3, [r3, #31]
 800f386:	3b01      	subs	r3, #1
 800f388:	b2da      	uxtb	r2, r3
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	60fb      	str	r3, [r7, #12]
 800f398:	e008      	b.n	800f3ac <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800f3a4:	68b9      	ldr	r1, [r7, #8]
 800f3a6:	6878      	ldr	r0, [r7, #4]
 800f3a8:	f000 f80a 	bl	800f3c0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d1e3      	bne.n	800f37a <ip_reass_tmr+0x12>
    }
  }
}
 800f3b2:	bf00      	nop
 800f3b4:	bf00      	nop
 800f3b6:	3710      	adds	r7, #16
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}
 800f3bc:	2000852c 	.word	0x2000852c

0800f3c0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b088      	sub	sp, #32
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
 800f3c8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f3ce:	683a      	ldr	r2, [r7, #0]
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d105      	bne.n	800f3e2 <ip_reass_free_complete_datagram+0x22>
 800f3d6:	4b45      	ldr	r3, [pc, #276]	@ (800f4ec <ip_reass_free_complete_datagram+0x12c>)
 800f3d8:	22ab      	movs	r2, #171	@ 0xab
 800f3da:	4945      	ldr	r1, [pc, #276]	@ (800f4f0 <ip_reass_free_complete_datagram+0x130>)
 800f3dc:	4845      	ldr	r0, [pc, #276]	@ (800f4f4 <ip_reass_free_complete_datagram+0x134>)
 800f3de:	f002 fae9 	bl	80119b4 <iprintf>
  if (prev != NULL) {
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d00a      	beq.n	800f3fe <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	687a      	ldr	r2, [r7, #4]
 800f3ee:	429a      	cmp	r2, r3
 800f3f0:	d005      	beq.n	800f3fe <ip_reass_free_complete_datagram+0x3e>
 800f3f2:	4b3e      	ldr	r3, [pc, #248]	@ (800f4ec <ip_reass_free_complete_datagram+0x12c>)
 800f3f4:	22ad      	movs	r2, #173	@ 0xad
 800f3f6:	4940      	ldr	r1, [pc, #256]	@ (800f4f8 <ip_reass_free_complete_datagram+0x138>)
 800f3f8:	483e      	ldr	r0, [pc, #248]	@ (800f4f4 <ip_reass_free_complete_datagram+0x134>)
 800f3fa:	f002 fadb 	bl	80119b4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	685b      	ldr	r3, [r3, #4]
 800f402:	685b      	ldr	r3, [r3, #4]
 800f404:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f406:	697b      	ldr	r3, [r7, #20]
 800f408:	889b      	ldrh	r3, [r3, #4]
 800f40a:	b29b      	uxth	r3, r3
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d12a      	bne.n	800f466 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	685b      	ldr	r3, [r3, #4]
 800f414:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f416:	697b      	ldr	r3, [r7, #20]
 800f418:	681a      	ldr	r2, [r3, #0]
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f41e:	69bb      	ldr	r3, [r7, #24]
 800f420:	6858      	ldr	r0, [r3, #4]
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	3308      	adds	r3, #8
 800f426:	2214      	movs	r2, #20
 800f428:	4619      	mov	r1, r3
 800f42a:	f002 fbee 	bl	8011c0a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f42e:	2101      	movs	r1, #1
 800f430:	69b8      	ldr	r0, [r7, #24]
 800f432:	f7ff fc47 	bl	800ecc4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f436:	69b8      	ldr	r0, [r7, #24]
 800f438:	f7f7 ff2e 	bl	8007298 <pbuf_clen>
 800f43c:	4603      	mov	r3, r0
 800f43e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f440:	8bfa      	ldrh	r2, [r7, #30]
 800f442:	8a7b      	ldrh	r3, [r7, #18]
 800f444:	4413      	add	r3, r2
 800f446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f44a:	db05      	blt.n	800f458 <ip_reass_free_complete_datagram+0x98>
 800f44c:	4b27      	ldr	r3, [pc, #156]	@ (800f4ec <ip_reass_free_complete_datagram+0x12c>)
 800f44e:	22bc      	movs	r2, #188	@ 0xbc
 800f450:	492a      	ldr	r1, [pc, #168]	@ (800f4fc <ip_reass_free_complete_datagram+0x13c>)
 800f452:	4828      	ldr	r0, [pc, #160]	@ (800f4f4 <ip_reass_free_complete_datagram+0x134>)
 800f454:	f002 faae 	bl	80119b4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f458:	8bfa      	ldrh	r2, [r7, #30]
 800f45a:	8a7b      	ldrh	r3, [r7, #18]
 800f45c:	4413      	add	r3, r2
 800f45e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f460:	69b8      	ldr	r0, [r7, #24]
 800f462:	f7f7 fe91 	bl	8007188 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	685b      	ldr	r3, [r3, #4]
 800f46a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f46c:	e01f      	b.n	800f4ae <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f46e:	69bb      	ldr	r3, [r7, #24]
 800f470:	685b      	ldr	r3, [r3, #4]
 800f472:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f474:	69bb      	ldr	r3, [r7, #24]
 800f476:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f47e:	68f8      	ldr	r0, [r7, #12]
 800f480:	f7f7 ff0a 	bl	8007298 <pbuf_clen>
 800f484:	4603      	mov	r3, r0
 800f486:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f488:	8bfa      	ldrh	r2, [r7, #30]
 800f48a:	8a7b      	ldrh	r3, [r7, #18]
 800f48c:	4413      	add	r3, r2
 800f48e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f492:	db05      	blt.n	800f4a0 <ip_reass_free_complete_datagram+0xe0>
 800f494:	4b15      	ldr	r3, [pc, #84]	@ (800f4ec <ip_reass_free_complete_datagram+0x12c>)
 800f496:	22cc      	movs	r2, #204	@ 0xcc
 800f498:	4918      	ldr	r1, [pc, #96]	@ (800f4fc <ip_reass_free_complete_datagram+0x13c>)
 800f49a:	4816      	ldr	r0, [pc, #88]	@ (800f4f4 <ip_reass_free_complete_datagram+0x134>)
 800f49c:	f002 fa8a 	bl	80119b4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f4a0:	8bfa      	ldrh	r2, [r7, #30]
 800f4a2:	8a7b      	ldrh	r3, [r7, #18]
 800f4a4:	4413      	add	r3, r2
 800f4a6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f4a8:	68f8      	ldr	r0, [r7, #12]
 800f4aa:	f7f7 fe6d 	bl	8007188 <pbuf_free>
  while (p != NULL) {
 800f4ae:	69bb      	ldr	r3, [r7, #24]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d1dc      	bne.n	800f46e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f4b4:	6839      	ldr	r1, [r7, #0]
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f000 f8c2 	bl	800f640 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f4bc:	4b10      	ldr	r3, [pc, #64]	@ (800f500 <ip_reass_free_complete_datagram+0x140>)
 800f4be:	881b      	ldrh	r3, [r3, #0]
 800f4c0:	8bfa      	ldrh	r2, [r7, #30]
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d905      	bls.n	800f4d2 <ip_reass_free_complete_datagram+0x112>
 800f4c6:	4b09      	ldr	r3, [pc, #36]	@ (800f4ec <ip_reass_free_complete_datagram+0x12c>)
 800f4c8:	22d2      	movs	r2, #210	@ 0xd2
 800f4ca:	490e      	ldr	r1, [pc, #56]	@ (800f504 <ip_reass_free_complete_datagram+0x144>)
 800f4cc:	4809      	ldr	r0, [pc, #36]	@ (800f4f4 <ip_reass_free_complete_datagram+0x134>)
 800f4ce:	f002 fa71 	bl	80119b4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f4d2:	4b0b      	ldr	r3, [pc, #44]	@ (800f500 <ip_reass_free_complete_datagram+0x140>)
 800f4d4:	881a      	ldrh	r2, [r3, #0]
 800f4d6:	8bfb      	ldrh	r3, [r7, #30]
 800f4d8:	1ad3      	subs	r3, r2, r3
 800f4da:	b29a      	uxth	r2, r3
 800f4dc:	4b08      	ldr	r3, [pc, #32]	@ (800f500 <ip_reass_free_complete_datagram+0x140>)
 800f4de:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f4e0:	8bfb      	ldrh	r3, [r7, #30]
}
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	3720      	adds	r7, #32
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}
 800f4ea:	bf00      	nop
 800f4ec:	08015328 	.word	0x08015328
 800f4f0:	08015364 	.word	0x08015364
 800f4f4:	08015370 	.word	0x08015370
 800f4f8:	08015398 	.word	0x08015398
 800f4fc:	080153ac 	.word	0x080153ac
 800f500:	20008530 	.word	0x20008530
 800f504:	080153cc 	.word	0x080153cc

0800f508 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b08a      	sub	sp, #40	@ 0x28
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f512:	2300      	movs	r3, #0
 800f514:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f516:	2300      	movs	r3, #0
 800f518:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f51a:	2300      	movs	r3, #0
 800f51c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f51e:	2300      	movs	r3, #0
 800f520:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f522:	2300      	movs	r3, #0
 800f524:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f526:	4b28      	ldr	r3, [pc, #160]	@ (800f5c8 <ip_reass_remove_oldest_datagram+0xc0>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800f52c:	e030      	b.n	800f590 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f52e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f530:	695a      	ldr	r2, [r3, #20]
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	68db      	ldr	r3, [r3, #12]
 800f536:	429a      	cmp	r2, r3
 800f538:	d10c      	bne.n	800f554 <ip_reass_remove_oldest_datagram+0x4c>
 800f53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f53c:	699a      	ldr	r2, [r3, #24]
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	691b      	ldr	r3, [r3, #16]
 800f542:	429a      	cmp	r2, r3
 800f544:	d106      	bne.n	800f554 <ip_reass_remove_oldest_datagram+0x4c>
 800f546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f548:	899a      	ldrh	r2, [r3, #12]
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	889b      	ldrh	r3, [r3, #4]
 800f54e:	b29b      	uxth	r3, r3
 800f550:	429a      	cmp	r2, r3
 800f552:	d014      	beq.n	800f57e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f554:	693b      	ldr	r3, [r7, #16]
 800f556:	3301      	adds	r3, #1
 800f558:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f55a:	6a3b      	ldr	r3, [r7, #32]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d104      	bne.n	800f56a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f562:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f564:	69fb      	ldr	r3, [r7, #28]
 800f566:	61bb      	str	r3, [r7, #24]
 800f568:	e009      	b.n	800f57e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f56c:	7fda      	ldrb	r2, [r3, #31]
 800f56e:	6a3b      	ldr	r3, [r7, #32]
 800f570:	7fdb      	ldrb	r3, [r3, #31]
 800f572:	429a      	cmp	r2, r3
 800f574:	d803      	bhi.n	800f57e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f578:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f57a:	69fb      	ldr	r3, [r7, #28]
 800f57c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d001      	beq.n	800f58a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f588:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800f590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f592:	2b00      	cmp	r3, #0
 800f594:	d1cb      	bne.n	800f52e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f596:	6a3b      	ldr	r3, [r7, #32]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d008      	beq.n	800f5ae <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f59c:	69b9      	ldr	r1, [r7, #24]
 800f59e:	6a38      	ldr	r0, [r7, #32]
 800f5a0:	f7ff ff0e 	bl	800f3c0 <ip_reass_free_complete_datagram>
 800f5a4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f5a6:	697a      	ldr	r2, [r7, #20]
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	4413      	add	r3, r2
 800f5ac:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f5ae:	697a      	ldr	r2, [r7, #20]
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	da02      	bge.n	800f5bc <ip_reass_remove_oldest_datagram+0xb4>
 800f5b6:	693b      	ldr	r3, [r7, #16]
 800f5b8:	2b01      	cmp	r3, #1
 800f5ba:	dcac      	bgt.n	800f516 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f5bc:	697b      	ldr	r3, [r7, #20]
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3728      	adds	r7, #40	@ 0x28
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
 800f5c6:	bf00      	nop
 800f5c8:	2000852c 	.word	0x2000852c

0800f5cc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b084      	sub	sp, #16
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
 800f5d4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f5d6:	2004      	movs	r0, #4
 800f5d8:	f7f6 fef0 	bl	80063bc <memp_malloc>
 800f5dc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d110      	bne.n	800f606 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f5e4:	6839      	ldr	r1, [r7, #0]
 800f5e6:	6878      	ldr	r0, [r7, #4]
 800f5e8:	f7ff ff8e 	bl	800f508 <ip_reass_remove_oldest_datagram>
 800f5ec:	4602      	mov	r2, r0
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	4293      	cmp	r3, r2
 800f5f2:	dc03      	bgt.n	800f5fc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f5f4:	2004      	movs	r0, #4
 800f5f6:	f7f6 fee1 	bl	80063bc <memp_malloc>
 800f5fa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d101      	bne.n	800f606 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800f602:	2300      	movs	r3, #0
 800f604:	e016      	b.n	800f634 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f606:	2220      	movs	r2, #32
 800f608:	2100      	movs	r1, #0
 800f60a:	68f8      	ldr	r0, [r7, #12]
 800f60c:	f002 fa87 	bl	8011b1e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	220f      	movs	r2, #15
 800f614:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f616:	4b09      	ldr	r3, [pc, #36]	@ (800f63c <ip_reass_enqueue_new_datagram+0x70>)
 800f618:	681a      	ldr	r2, [r3, #0]
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f61e:	4a07      	ldr	r2, [pc, #28]	@ (800f63c <ip_reass_enqueue_new_datagram+0x70>)
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	3308      	adds	r3, #8
 800f628:	2214      	movs	r2, #20
 800f62a:	6879      	ldr	r1, [r7, #4]
 800f62c:	4618      	mov	r0, r3
 800f62e:	f002 faec 	bl	8011c0a <memcpy>
  return ipr;
 800f632:	68fb      	ldr	r3, [r7, #12]
}
 800f634:	4618      	mov	r0, r3
 800f636:	3710      	adds	r7, #16
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}
 800f63c:	2000852c 	.word	0x2000852c

0800f640 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b082      	sub	sp, #8
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f64a:	4b10      	ldr	r3, [pc, #64]	@ (800f68c <ip_reass_dequeue_datagram+0x4c>)
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	687a      	ldr	r2, [r7, #4]
 800f650:	429a      	cmp	r2, r3
 800f652:	d104      	bne.n	800f65e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	4a0c      	ldr	r2, [pc, #48]	@ (800f68c <ip_reass_dequeue_datagram+0x4c>)
 800f65a:	6013      	str	r3, [r2, #0]
 800f65c:	e00d      	b.n	800f67a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d106      	bne.n	800f672 <ip_reass_dequeue_datagram+0x32>
 800f664:	4b0a      	ldr	r3, [pc, #40]	@ (800f690 <ip_reass_dequeue_datagram+0x50>)
 800f666:	f240 1245 	movw	r2, #325	@ 0x145
 800f66a:	490a      	ldr	r1, [pc, #40]	@ (800f694 <ip_reass_dequeue_datagram+0x54>)
 800f66c:	480a      	ldr	r0, [pc, #40]	@ (800f698 <ip_reass_dequeue_datagram+0x58>)
 800f66e:	f002 f9a1 	bl	80119b4 <iprintf>
    prev->next = ipr->next;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681a      	ldr	r2, [r3, #0]
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f67a:	6879      	ldr	r1, [r7, #4]
 800f67c:	2004      	movs	r0, #4
 800f67e:	f7f6 ff0d 	bl	800649c <memp_free>
}
 800f682:	bf00      	nop
 800f684:	3708      	adds	r7, #8
 800f686:	46bd      	mov	sp, r7
 800f688:	bd80      	pop	{r7, pc}
 800f68a:	bf00      	nop
 800f68c:	2000852c 	.word	0x2000852c
 800f690:	08015328 	.word	0x08015328
 800f694:	080153f0 	.word	0x080153f0
 800f698:	08015370 	.word	0x08015370

0800f69c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b08c      	sub	sp, #48	@ 0x30
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	60f8      	str	r0, [r7, #12]
 800f6a4:	60b9      	str	r1, [r7, #8]
 800f6a6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f6ac:	2301      	movs	r3, #1
 800f6ae:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	685b      	ldr	r3, [r3, #4]
 800f6b4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f6b6:	69fb      	ldr	r3, [r7, #28]
 800f6b8:	885b      	ldrh	r3, [r3, #2]
 800f6ba:	b29b      	uxth	r3, r3
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f7f6 fa05 	bl	8005acc <lwip_htons>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f6c6:	69fb      	ldr	r3, [r7, #28]
 800f6c8:	781b      	ldrb	r3, [r3, #0]
 800f6ca:	f003 030f 	and.w	r3, r3, #15
 800f6ce:	b2db      	uxtb	r3, r3
 800f6d0:	009b      	lsls	r3, r3, #2
 800f6d2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f6d4:	7e7b      	ldrb	r3, [r7, #25]
 800f6d6:	b29b      	uxth	r3, r3
 800f6d8:	8b7a      	ldrh	r2, [r7, #26]
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d202      	bcs.n	800f6e4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f6de:	f04f 33ff 	mov.w	r3, #4294967295
 800f6e2:	e135      	b.n	800f950 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f6e4:	7e7b      	ldrb	r3, [r7, #25]
 800f6e6:	b29b      	uxth	r3, r3
 800f6e8:	8b7a      	ldrh	r2, [r7, #26]
 800f6ea:	1ad3      	subs	r3, r2, r3
 800f6ec:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f6ee:	69fb      	ldr	r3, [r7, #28]
 800f6f0:	88db      	ldrh	r3, [r3, #6]
 800f6f2:	b29b      	uxth	r3, r3
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f7f6 f9e9 	bl	8005acc <lwip_htons>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f700:	b29b      	uxth	r3, r3
 800f702:	00db      	lsls	r3, r3, #3
 800f704:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f706:	68bb      	ldr	r3, [r7, #8]
 800f708:	685b      	ldr	r3, [r3, #4]
 800f70a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800f70c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f70e:	2200      	movs	r2, #0
 800f710:	701a      	strb	r2, [r3, #0]
 800f712:	2200      	movs	r2, #0
 800f714:	705a      	strb	r2, [r3, #1]
 800f716:	2200      	movs	r2, #0
 800f718:	709a      	strb	r2, [r3, #2]
 800f71a:	2200      	movs	r2, #0
 800f71c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f71e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f720:	8afa      	ldrh	r2, [r7, #22]
 800f722:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f724:	8afa      	ldrh	r2, [r7, #22]
 800f726:	8b7b      	ldrh	r3, [r7, #26]
 800f728:	4413      	add	r3, r2
 800f72a:	b29a      	uxth	r2, r3
 800f72c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f72e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f732:	88db      	ldrh	r3, [r3, #6]
 800f734:	b29b      	uxth	r3, r3
 800f736:	8afa      	ldrh	r2, [r7, #22]
 800f738:	429a      	cmp	r2, r3
 800f73a:	d902      	bls.n	800f742 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f73c:	f04f 33ff 	mov.w	r3, #4294967295
 800f740:	e106      	b.n	800f950 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	685b      	ldr	r3, [r3, #4]
 800f746:	627b      	str	r3, [r7, #36]	@ 0x24
 800f748:	e068      	b.n	800f81c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f74c:	685b      	ldr	r3, [r3, #4]
 800f74e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f752:	889b      	ldrh	r3, [r3, #4]
 800f754:	b29a      	uxth	r2, r3
 800f756:	693b      	ldr	r3, [r7, #16]
 800f758:	889b      	ldrh	r3, [r3, #4]
 800f75a:	b29b      	uxth	r3, r3
 800f75c:	429a      	cmp	r2, r3
 800f75e:	d235      	bcs.n	800f7cc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f762:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f764:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d020      	beq.n	800f7ae <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f76c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f76e:	889b      	ldrh	r3, [r3, #4]
 800f770:	b29a      	uxth	r2, r3
 800f772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f774:	88db      	ldrh	r3, [r3, #6]
 800f776:	b29b      	uxth	r3, r3
 800f778:	429a      	cmp	r2, r3
 800f77a:	d307      	bcc.n	800f78c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f77c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f77e:	88db      	ldrh	r3, [r3, #6]
 800f780:	b29a      	uxth	r2, r3
 800f782:	693b      	ldr	r3, [r7, #16]
 800f784:	889b      	ldrh	r3, [r3, #4]
 800f786:	b29b      	uxth	r3, r3
 800f788:	429a      	cmp	r2, r3
 800f78a:	d902      	bls.n	800f792 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f78c:	f04f 33ff 	mov.w	r3, #4294967295
 800f790:	e0de      	b.n	800f950 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f794:	68ba      	ldr	r2, [r7, #8]
 800f796:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f79a:	88db      	ldrh	r3, [r3, #6]
 800f79c:	b29a      	uxth	r2, r3
 800f79e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7a0:	889b      	ldrh	r3, [r3, #4]
 800f7a2:	b29b      	uxth	r3, r3
 800f7a4:	429a      	cmp	r2, r3
 800f7a6:	d03d      	beq.n	800f824 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f7ac:	e03a      	b.n	800f824 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f7ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7b0:	88db      	ldrh	r3, [r3, #6]
 800f7b2:	b29a      	uxth	r2, r3
 800f7b4:	693b      	ldr	r3, [r7, #16]
 800f7b6:	889b      	ldrh	r3, [r3, #4]
 800f7b8:	b29b      	uxth	r3, r3
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	d902      	bls.n	800f7c4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f7be:	f04f 33ff 	mov.w	r3, #4294967295
 800f7c2:	e0c5      	b.n	800f950 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	68ba      	ldr	r2, [r7, #8]
 800f7c8:	605a      	str	r2, [r3, #4]
      break;
 800f7ca:	e02b      	b.n	800f824 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f7cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7ce:	889b      	ldrh	r3, [r3, #4]
 800f7d0:	b29a      	uxth	r2, r3
 800f7d2:	693b      	ldr	r3, [r7, #16]
 800f7d4:	889b      	ldrh	r3, [r3, #4]
 800f7d6:	b29b      	uxth	r3, r3
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	d102      	bne.n	800f7e2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f7dc:	f04f 33ff 	mov.w	r3, #4294967295
 800f7e0:	e0b6      	b.n	800f950 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f7e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7e4:	889b      	ldrh	r3, [r3, #4]
 800f7e6:	b29a      	uxth	r2, r3
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	88db      	ldrh	r3, [r3, #6]
 800f7ec:	b29b      	uxth	r3, r3
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	d202      	bcs.n	800f7f8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f7f2:	f04f 33ff 	mov.w	r3, #4294967295
 800f7f6:	e0ab      	b.n	800f950 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f7f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d009      	beq.n	800f812 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f800:	88db      	ldrh	r3, [r3, #6]
 800f802:	b29a      	uxth	r2, r3
 800f804:	693b      	ldr	r3, [r7, #16]
 800f806:	889b      	ldrh	r3, [r3, #4]
 800f808:	b29b      	uxth	r3, r3
 800f80a:	429a      	cmp	r2, r3
 800f80c:	d001      	beq.n	800f812 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f80e:	2300      	movs	r3, #0
 800f810:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f812:	693b      	ldr	r3, [r7, #16]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800f81c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d193      	bne.n	800f74a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800f822:	e000      	b.n	800f826 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800f824:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d12d      	bne.n	800f888 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800f82c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d01c      	beq.n	800f86c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f834:	88db      	ldrh	r3, [r3, #6]
 800f836:	b29a      	uxth	r2, r3
 800f838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f83a:	889b      	ldrh	r3, [r3, #4]
 800f83c:	b29b      	uxth	r3, r3
 800f83e:	429a      	cmp	r2, r3
 800f840:	d906      	bls.n	800f850 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800f842:	4b45      	ldr	r3, [pc, #276]	@ (800f958 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f844:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800f848:	4944      	ldr	r1, [pc, #272]	@ (800f95c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f84a:	4845      	ldr	r0, [pc, #276]	@ (800f960 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f84c:	f002 f8b2 	bl	80119b4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f852:	68ba      	ldr	r2, [r7, #8]
 800f854:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f858:	88db      	ldrh	r3, [r3, #6]
 800f85a:	b29a      	uxth	r2, r3
 800f85c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f85e:	889b      	ldrh	r3, [r3, #4]
 800f860:	b29b      	uxth	r3, r3
 800f862:	429a      	cmp	r2, r3
 800f864:	d010      	beq.n	800f888 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f866:	2300      	movs	r3, #0
 800f868:	623b      	str	r3, [r7, #32]
 800f86a:	e00d      	b.n	800f888 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	685b      	ldr	r3, [r3, #4]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d006      	beq.n	800f882 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f874:	4b38      	ldr	r3, [pc, #224]	@ (800f958 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f876:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800f87a:	493a      	ldr	r1, [pc, #232]	@ (800f964 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f87c:	4838      	ldr	r0, [pc, #224]	@ (800f960 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f87e:	f002 f899 	bl	80119b4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	68ba      	ldr	r2, [r7, #8]
 800f886:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d105      	bne.n	800f89a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	7f9b      	ldrb	r3, [r3, #30]
 800f892:	f003 0301 	and.w	r3, r3, #1
 800f896:	2b00      	cmp	r3, #0
 800f898:	d059      	beq.n	800f94e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f89a:	6a3b      	ldr	r3, [r7, #32]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d04f      	beq.n	800f940 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	685b      	ldr	r3, [r3, #4]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d006      	beq.n	800f8b6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	685b      	ldr	r3, [r3, #4]
 800f8ac:	685b      	ldr	r3, [r3, #4]
 800f8ae:	889b      	ldrh	r3, [r3, #4]
 800f8b0:	b29b      	uxth	r3, r3
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d002      	beq.n	800f8bc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	623b      	str	r3, [r7, #32]
 800f8ba:	e041      	b.n	800f940 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f8bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8be:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800f8c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800f8c6:	e012      	b.n	800f8ee <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8ca:	685b      	ldr	r3, [r3, #4]
 800f8cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800f8ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8d0:	88db      	ldrh	r3, [r3, #6]
 800f8d2:	b29a      	uxth	r2, r3
 800f8d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8d6:	889b      	ldrh	r3, [r3, #4]
 800f8d8:	b29b      	uxth	r3, r3
 800f8da:	429a      	cmp	r2, r3
 800f8dc:	d002      	beq.n	800f8e4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f8de:	2300      	movs	r3, #0
 800f8e0:	623b      	str	r3, [r7, #32]
            break;
 800f8e2:	e007      	b.n	800f8f4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f8e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8e6:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800f8e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800f8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d1e9      	bne.n	800f8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f8f4:	6a3b      	ldr	r3, [r7, #32]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d022      	beq.n	800f940 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	685b      	ldr	r3, [r3, #4]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d106      	bne.n	800f910 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f902:	4b15      	ldr	r3, [pc, #84]	@ (800f958 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f904:	f240 12df 	movw	r2, #479	@ 0x1df
 800f908:	4917      	ldr	r1, [pc, #92]	@ (800f968 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f90a:	4815      	ldr	r0, [pc, #84]	@ (800f960 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f90c:	f002 f852 	bl	80119b4 <iprintf>
          LWIP_ASSERT("sanity check",
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	685b      	ldr	r3, [r3, #4]
 800f914:	685b      	ldr	r3, [r3, #4]
 800f916:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f918:	429a      	cmp	r2, r3
 800f91a:	d106      	bne.n	800f92a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f91c:	4b0e      	ldr	r3, [pc, #56]	@ (800f958 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f91e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800f922:	4911      	ldr	r1, [pc, #68]	@ (800f968 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f924:	480e      	ldr	r0, [pc, #56]	@ (800f960 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f926:	f002 f845 	bl	80119b4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f92a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d006      	beq.n	800f940 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f932:	4b09      	ldr	r3, [pc, #36]	@ (800f958 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f934:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800f938:	490c      	ldr	r1, [pc, #48]	@ (800f96c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f93a:	4809      	ldr	r0, [pc, #36]	@ (800f960 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f93c:	f002 f83a 	bl	80119b4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f940:	6a3b      	ldr	r3, [r7, #32]
 800f942:	2b00      	cmp	r3, #0
 800f944:	bf14      	ite	ne
 800f946:	2301      	movne	r3, #1
 800f948:	2300      	moveq	r3, #0
 800f94a:	b2db      	uxtb	r3, r3
 800f94c:	e000      	b.n	800f950 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f94e:	2300      	movs	r3, #0
}
 800f950:	4618      	mov	r0, r3
 800f952:	3730      	adds	r7, #48	@ 0x30
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}
 800f958:	08015328 	.word	0x08015328
 800f95c:	0801540c 	.word	0x0801540c
 800f960:	08015370 	.word	0x08015370
 800f964:	0801542c 	.word	0x0801542c
 800f968:	08015464 	.word	0x08015464
 800f96c:	08015474 	.word	0x08015474

0800f970 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b08e      	sub	sp, #56	@ 0x38
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	685b      	ldr	r3, [r3, #4]
 800f97c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f97e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f980:	781b      	ldrb	r3, [r3, #0]
 800f982:	f003 030f 	and.w	r3, r3, #15
 800f986:	b2db      	uxtb	r3, r3
 800f988:	009b      	lsls	r3, r3, #2
 800f98a:	b2db      	uxtb	r3, r3
 800f98c:	2b14      	cmp	r3, #20
 800f98e:	f040 8171 	bne.w	800fc74 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f994:	88db      	ldrh	r3, [r3, #6]
 800f996:	b29b      	uxth	r3, r3
 800f998:	4618      	mov	r0, r3
 800f99a:	f7f6 f897 	bl	8005acc <lwip_htons>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f9a4:	b29b      	uxth	r3, r3
 800f9a6:	00db      	lsls	r3, r3, #3
 800f9a8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f9aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9ac:	885b      	ldrh	r3, [r3, #2]
 800f9ae:	b29b      	uxth	r3, r3
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f7f6 f88b 	bl	8005acc <lwip_htons>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f9ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9bc:	781b      	ldrb	r3, [r3, #0]
 800f9be:	f003 030f 	and.w	r3, r3, #15
 800f9c2:	b2db      	uxtb	r3, r3
 800f9c4:	009b      	lsls	r3, r3, #2
 800f9c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800f9ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f9ce:	b29b      	uxth	r3, r3
 800f9d0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	f0c0 8150 	bcc.w	800fc78 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f9d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f9dc:	b29b      	uxth	r3, r3
 800f9de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f9e0:	1ad3      	subs	r3, r2, r3
 800f9e2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f7f7 fc57 	bl	8007298 <pbuf_clen>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f9ee:	4b8c      	ldr	r3, [pc, #560]	@ (800fc20 <ip4_reass+0x2b0>)
 800f9f0:	881b      	ldrh	r3, [r3, #0]
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	8c3b      	ldrh	r3, [r7, #32]
 800f9f6:	4413      	add	r3, r2
 800f9f8:	2b0a      	cmp	r3, #10
 800f9fa:	dd10      	ble.n	800fa1e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f9fc:	8c3b      	ldrh	r3, [r7, #32]
 800f9fe:	4619      	mov	r1, r3
 800fa00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa02:	f7ff fd81 	bl	800f508 <ip_reass_remove_oldest_datagram>
 800fa06:	4603      	mov	r3, r0
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	f000 8137 	beq.w	800fc7c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800fa0e:	4b84      	ldr	r3, [pc, #528]	@ (800fc20 <ip4_reass+0x2b0>)
 800fa10:	881b      	ldrh	r3, [r3, #0]
 800fa12:	461a      	mov	r2, r3
 800fa14:	8c3b      	ldrh	r3, [r7, #32]
 800fa16:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fa18:	2b0a      	cmp	r3, #10
 800fa1a:	f300 812f 	bgt.w	800fc7c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fa1e:	4b81      	ldr	r3, [pc, #516]	@ (800fc24 <ip4_reass+0x2b4>)
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	633b      	str	r3, [r7, #48]	@ 0x30
 800fa24:	e015      	b.n	800fa52 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800fa26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa28:	695a      	ldr	r2, [r3, #20]
 800fa2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa2c:	68db      	ldr	r3, [r3, #12]
 800fa2e:	429a      	cmp	r2, r3
 800fa30:	d10c      	bne.n	800fa4c <ip4_reass+0xdc>
 800fa32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa34:	699a      	ldr	r2, [r3, #24]
 800fa36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa38:	691b      	ldr	r3, [r3, #16]
 800fa3a:	429a      	cmp	r2, r3
 800fa3c:	d106      	bne.n	800fa4c <ip4_reass+0xdc>
 800fa3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa40:	899a      	ldrh	r2, [r3, #12]
 800fa42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa44:	889b      	ldrh	r3, [r3, #4]
 800fa46:	b29b      	uxth	r3, r3
 800fa48:	429a      	cmp	r2, r3
 800fa4a:	d006      	beq.n	800fa5a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fa4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	633b      	str	r3, [r7, #48]	@ 0x30
 800fa52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d1e6      	bne.n	800fa26 <ip4_reass+0xb6>
 800fa58:	e000      	b.n	800fa5c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800fa5a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800fa5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d109      	bne.n	800fa76 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800fa62:	8c3b      	ldrh	r3, [r7, #32]
 800fa64:	4619      	mov	r1, r3
 800fa66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa68:	f7ff fdb0 	bl	800f5cc <ip_reass_enqueue_new_datagram>
 800fa6c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800fa6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d11c      	bne.n	800faae <ip4_reass+0x13e>
      goto nullreturn;
 800fa74:	e105      	b.n	800fc82 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800fa76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa78:	88db      	ldrh	r3, [r3, #6]
 800fa7a:	b29b      	uxth	r3, r3
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	f7f6 f825 	bl	8005acc <lwip_htons>
 800fa82:	4603      	mov	r3, r0
 800fa84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d110      	bne.n	800faae <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800fa8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa8e:	89db      	ldrh	r3, [r3, #14]
 800fa90:	4618      	mov	r0, r3
 800fa92:	f7f6 f81b 	bl	8005acc <lwip_htons>
 800fa96:	4603      	mov	r3, r0
 800fa98:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d006      	beq.n	800faae <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800faa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800faa2:	3308      	adds	r3, #8
 800faa4:	2214      	movs	r2, #20
 800faa6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800faa8:	4618      	mov	r0, r3
 800faaa:	f002 f8ae 	bl	8011c0a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800faae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fab0:	88db      	ldrh	r3, [r3, #6]
 800fab2:	b29b      	uxth	r3, r3
 800fab4:	f003 0320 	and.w	r3, r3, #32
 800fab8:	2b00      	cmp	r3, #0
 800faba:	bf0c      	ite	eq
 800fabc:	2301      	moveq	r3, #1
 800fabe:	2300      	movne	r3, #0
 800fac0:	b2db      	uxtb	r3, r3
 800fac2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800fac4:	69fb      	ldr	r3, [r7, #28]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d00e      	beq.n	800fae8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800faca:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800facc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800face:	4413      	add	r3, r2
 800fad0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800fad2:	8b7a      	ldrh	r2, [r7, #26]
 800fad4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fad6:	429a      	cmp	r2, r3
 800fad8:	f0c0 80a0 	bcc.w	800fc1c <ip4_reass+0x2ac>
 800fadc:	8b7b      	ldrh	r3, [r7, #26]
 800fade:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800fae2:	4293      	cmp	r3, r2
 800fae4:	f200 809a 	bhi.w	800fc1c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800fae8:	69fa      	ldr	r2, [r7, #28]
 800faea:	6879      	ldr	r1, [r7, #4]
 800faec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800faee:	f7ff fdd5 	bl	800f69c <ip_reass_chain_frag_into_datagram_and_validate>
 800faf2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800faf4:	697b      	ldr	r3, [r7, #20]
 800faf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fafa:	f000 809b 	beq.w	800fc34 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800fafe:	4b48      	ldr	r3, [pc, #288]	@ (800fc20 <ip4_reass+0x2b0>)
 800fb00:	881a      	ldrh	r2, [r3, #0]
 800fb02:	8c3b      	ldrh	r3, [r7, #32]
 800fb04:	4413      	add	r3, r2
 800fb06:	b29a      	uxth	r2, r3
 800fb08:	4b45      	ldr	r3, [pc, #276]	@ (800fc20 <ip4_reass+0x2b0>)
 800fb0a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800fb0c:	69fb      	ldr	r3, [r7, #28]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d00d      	beq.n	800fb2e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800fb12:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800fb14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fb16:	4413      	add	r3, r2
 800fb18:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800fb1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb1c:	8a7a      	ldrh	r2, [r7, #18]
 800fb1e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800fb20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb22:	7f9b      	ldrb	r3, [r3, #30]
 800fb24:	f043 0301 	orr.w	r3, r3, #1
 800fb28:	b2da      	uxtb	r2, r3
 800fb2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb2c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800fb2e:	697b      	ldr	r3, [r7, #20]
 800fb30:	2b01      	cmp	r3, #1
 800fb32:	d171      	bne.n	800fc18 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800fb34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb36:	8b9b      	ldrh	r3, [r3, #28]
 800fb38:	3314      	adds	r3, #20
 800fb3a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800fb3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb3e:	685b      	ldr	r3, [r3, #4]
 800fb40:	685b      	ldr	r3, [r3, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800fb46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb48:	685b      	ldr	r3, [r3, #4]
 800fb4a:	685b      	ldr	r3, [r3, #4]
 800fb4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800fb4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb50:	3308      	adds	r3, #8
 800fb52:	2214      	movs	r2, #20
 800fb54:	4619      	mov	r1, r3
 800fb56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fb58:	f002 f857 	bl	8011c0a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800fb5c:	8a3b      	ldrh	r3, [r7, #16]
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7f5 ffb4 	bl	8005acc <lwip_htons>
 800fb64:	4603      	mov	r3, r0
 800fb66:	461a      	mov	r2, r3
 800fb68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb6a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800fb6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb6e:	2200      	movs	r2, #0
 800fb70:	719a      	strb	r2, [r3, #6]
 800fb72:	2200      	movs	r2, #0
 800fb74:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800fb76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb78:	2200      	movs	r2, #0
 800fb7a:	729a      	strb	r2, [r3, #10]
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800fb80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb82:	685b      	ldr	r3, [r3, #4]
 800fb84:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800fb86:	e00d      	b.n	800fba4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800fb88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb8a:	685b      	ldr	r3, [r3, #4]
 800fb8c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800fb8e:	2114      	movs	r1, #20
 800fb90:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800fb92:	f7f7 fa73 	bl	800707c <pbuf_remove_header>
      pbuf_cat(p, r);
 800fb96:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f7f7 fbb7 	bl	800730c <pbuf_cat>
      r = iprh->next_pbuf;
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800fba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d1ee      	bne.n	800fb88 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800fbaa:	4b1e      	ldr	r3, [pc, #120]	@ (800fc24 <ip4_reass+0x2b4>)
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fbb0:	429a      	cmp	r2, r3
 800fbb2:	d102      	bne.n	800fbba <ip4_reass+0x24a>
      ipr_prev = NULL;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fbb8:	e010      	b.n	800fbdc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fbba:	4b1a      	ldr	r3, [pc, #104]	@ (800fc24 <ip4_reass+0x2b4>)
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fbc0:	e007      	b.n	800fbd2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800fbc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fbc8:	429a      	cmp	r2, r3
 800fbca:	d006      	beq.n	800fbda <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fbcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fbd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d1f4      	bne.n	800fbc2 <ip4_reass+0x252>
 800fbd8:	e000      	b.n	800fbdc <ip4_reass+0x26c>
          break;
 800fbda:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800fbdc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fbde:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fbe0:	f7ff fd2e 	bl	800f640 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800fbe4:	6878      	ldr	r0, [r7, #4]
 800fbe6:	f7f7 fb57 	bl	8007298 <pbuf_clen>
 800fbea:	4603      	mov	r3, r0
 800fbec:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800fbee:	4b0c      	ldr	r3, [pc, #48]	@ (800fc20 <ip4_reass+0x2b0>)
 800fbf0:	881b      	ldrh	r3, [r3, #0]
 800fbf2:	8c3a      	ldrh	r2, [r7, #32]
 800fbf4:	429a      	cmp	r2, r3
 800fbf6:	d906      	bls.n	800fc06 <ip4_reass+0x296>
 800fbf8:	4b0b      	ldr	r3, [pc, #44]	@ (800fc28 <ip4_reass+0x2b8>)
 800fbfa:	f240 229b 	movw	r2, #667	@ 0x29b
 800fbfe:	490b      	ldr	r1, [pc, #44]	@ (800fc2c <ip4_reass+0x2bc>)
 800fc00:	480b      	ldr	r0, [pc, #44]	@ (800fc30 <ip4_reass+0x2c0>)
 800fc02:	f001 fed7 	bl	80119b4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800fc06:	4b06      	ldr	r3, [pc, #24]	@ (800fc20 <ip4_reass+0x2b0>)
 800fc08:	881a      	ldrh	r2, [r3, #0]
 800fc0a:	8c3b      	ldrh	r3, [r7, #32]
 800fc0c:	1ad3      	subs	r3, r2, r3
 800fc0e:	b29a      	uxth	r2, r3
 800fc10:	4b03      	ldr	r3, [pc, #12]	@ (800fc20 <ip4_reass+0x2b0>)
 800fc12:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	e038      	b.n	800fc8a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800fc18:	2300      	movs	r3, #0
 800fc1a:	e036      	b.n	800fc8a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800fc1c:	bf00      	nop
 800fc1e:	e00a      	b.n	800fc36 <ip4_reass+0x2c6>
 800fc20:	20008530 	.word	0x20008530
 800fc24:	2000852c 	.word	0x2000852c
 800fc28:	08015328 	.word	0x08015328
 800fc2c:	08015498 	.word	0x08015498
 800fc30:	08015370 	.word	0x08015370
    goto nullreturn_ipr;
 800fc34:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800fc36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d106      	bne.n	800fc4a <ip4_reass+0x2da>
 800fc3c:	4b15      	ldr	r3, [pc, #84]	@ (800fc94 <ip4_reass+0x324>)
 800fc3e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800fc42:	4915      	ldr	r1, [pc, #84]	@ (800fc98 <ip4_reass+0x328>)
 800fc44:	4815      	ldr	r0, [pc, #84]	@ (800fc9c <ip4_reass+0x32c>)
 800fc46:	f001 feb5 	bl	80119b4 <iprintf>
  if (ipr->p == NULL) {
 800fc4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc4c:	685b      	ldr	r3, [r3, #4]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d116      	bne.n	800fc80 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800fc52:	4b13      	ldr	r3, [pc, #76]	@ (800fca0 <ip4_reass+0x330>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc58:	429a      	cmp	r2, r3
 800fc5a:	d006      	beq.n	800fc6a <ip4_reass+0x2fa>
 800fc5c:	4b0d      	ldr	r3, [pc, #52]	@ (800fc94 <ip4_reass+0x324>)
 800fc5e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800fc62:	4910      	ldr	r1, [pc, #64]	@ (800fca4 <ip4_reass+0x334>)
 800fc64:	480d      	ldr	r0, [pc, #52]	@ (800fc9c <ip4_reass+0x32c>)
 800fc66:	f001 fea5 	bl	80119b4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800fc6a:	2100      	movs	r1, #0
 800fc6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fc6e:	f7ff fce7 	bl	800f640 <ip_reass_dequeue_datagram>
 800fc72:	e006      	b.n	800fc82 <ip4_reass+0x312>
    goto nullreturn;
 800fc74:	bf00      	nop
 800fc76:	e004      	b.n	800fc82 <ip4_reass+0x312>
    goto nullreturn;
 800fc78:	bf00      	nop
 800fc7a:	e002      	b.n	800fc82 <ip4_reass+0x312>
      goto nullreturn;
 800fc7c:	bf00      	nop
 800fc7e:	e000      	b.n	800fc82 <ip4_reass+0x312>
  }

nullreturn:
 800fc80:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	f7f7 fa80 	bl	8007188 <pbuf_free>
  return NULL;
 800fc88:	2300      	movs	r3, #0
}
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	3738      	adds	r7, #56	@ 0x38
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}
 800fc92:	bf00      	nop
 800fc94:	08015328 	.word	0x08015328
 800fc98:	080154b4 	.word	0x080154b4
 800fc9c:	08015370 	.word	0x08015370
 800fca0:	2000852c 	.word	0x2000852c
 800fca4:	080154c0 	.word	0x080154c0

0800fca8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800fcac:	2005      	movs	r0, #5
 800fcae:	f7f6 fb85 	bl	80063bc <memp_malloc>
 800fcb2:	4603      	mov	r3, r0
}
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	bd80      	pop	{r7, pc}

0800fcb8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b082      	sub	sp, #8
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d106      	bne.n	800fcd4 <ip_frag_free_pbuf_custom_ref+0x1c>
 800fcc6:	4b07      	ldr	r3, [pc, #28]	@ (800fce4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800fcc8:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800fccc:	4906      	ldr	r1, [pc, #24]	@ (800fce8 <ip_frag_free_pbuf_custom_ref+0x30>)
 800fcce:	4807      	ldr	r0, [pc, #28]	@ (800fcec <ip_frag_free_pbuf_custom_ref+0x34>)
 800fcd0:	f001 fe70 	bl	80119b4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800fcd4:	6879      	ldr	r1, [r7, #4]
 800fcd6:	2005      	movs	r0, #5
 800fcd8:	f7f6 fbe0 	bl	800649c <memp_free>
}
 800fcdc:	bf00      	nop
 800fcde:	3708      	adds	r7, #8
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}
 800fce4:	08015328 	.word	0x08015328
 800fce8:	080154e0 	.word	0x080154e0
 800fcec:	08015370 	.word	0x08015370

0800fcf0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b084      	sub	sp, #16
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d106      	bne.n	800fd10 <ipfrag_free_pbuf_custom+0x20>
 800fd02:	4b11      	ldr	r3, [pc, #68]	@ (800fd48 <ipfrag_free_pbuf_custom+0x58>)
 800fd04:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800fd08:	4910      	ldr	r1, [pc, #64]	@ (800fd4c <ipfrag_free_pbuf_custom+0x5c>)
 800fd0a:	4811      	ldr	r0, [pc, #68]	@ (800fd50 <ipfrag_free_pbuf_custom+0x60>)
 800fd0c:	f001 fe52 	bl	80119b4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800fd10:	68fa      	ldr	r2, [r7, #12]
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	429a      	cmp	r2, r3
 800fd16:	d006      	beq.n	800fd26 <ipfrag_free_pbuf_custom+0x36>
 800fd18:	4b0b      	ldr	r3, [pc, #44]	@ (800fd48 <ipfrag_free_pbuf_custom+0x58>)
 800fd1a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800fd1e:	490d      	ldr	r1, [pc, #52]	@ (800fd54 <ipfrag_free_pbuf_custom+0x64>)
 800fd20:	480b      	ldr	r0, [pc, #44]	@ (800fd50 <ipfrag_free_pbuf_custom+0x60>)
 800fd22:	f001 fe47 	bl	80119b4 <iprintf>
  if (pcr->original != NULL) {
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	695b      	ldr	r3, [r3, #20]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d004      	beq.n	800fd38 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	695b      	ldr	r3, [r3, #20]
 800fd32:	4618      	mov	r0, r3
 800fd34:	f7f7 fa28 	bl	8007188 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800fd38:	68f8      	ldr	r0, [r7, #12]
 800fd3a:	f7ff ffbd 	bl	800fcb8 <ip_frag_free_pbuf_custom_ref>
}
 800fd3e:	bf00      	nop
 800fd40:	3710      	adds	r7, #16
 800fd42:	46bd      	mov	sp, r7
 800fd44:	bd80      	pop	{r7, pc}
 800fd46:	bf00      	nop
 800fd48:	08015328 	.word	0x08015328
 800fd4c:	080154ec 	.word	0x080154ec
 800fd50:	08015370 	.word	0x08015370
 800fd54:	080154f8 	.word	0x080154f8

0800fd58 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b094      	sub	sp, #80	@ 0x50
 800fd5c:	af02      	add	r7, sp, #8
 800fd5e:	60f8      	str	r0, [r7, #12]
 800fd60:	60b9      	str	r1, [r7, #8]
 800fd62:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800fd64:	2300      	movs	r3, #0
 800fd66:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800fd6e:	3b14      	subs	r3, #20
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	da00      	bge.n	800fd76 <ip4_frag+0x1e>
 800fd74:	3307      	adds	r3, #7
 800fd76:	10db      	asrs	r3, r3, #3
 800fd78:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800fd7a:	2314      	movs	r3, #20
 800fd7c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	685b      	ldr	r3, [r3, #4]
 800fd82:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800fd84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd86:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800fd88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd8a:	781b      	ldrb	r3, [r3, #0]
 800fd8c:	f003 030f 	and.w	r3, r3, #15
 800fd90:	b2db      	uxtb	r3, r3
 800fd92:	009b      	lsls	r3, r3, #2
 800fd94:	b2db      	uxtb	r3, r3
 800fd96:	2b14      	cmp	r3, #20
 800fd98:	d002      	beq.n	800fda0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800fd9a:	f06f 0305 	mvn.w	r3, #5
 800fd9e:	e110      	b.n	800ffc2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	895b      	ldrh	r3, [r3, #10]
 800fda4:	2b13      	cmp	r3, #19
 800fda6:	d809      	bhi.n	800fdbc <ip4_frag+0x64>
 800fda8:	4b88      	ldr	r3, [pc, #544]	@ (800ffcc <ip4_frag+0x274>)
 800fdaa:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800fdae:	4988      	ldr	r1, [pc, #544]	@ (800ffd0 <ip4_frag+0x278>)
 800fdb0:	4888      	ldr	r0, [pc, #544]	@ (800ffd4 <ip4_frag+0x27c>)
 800fdb2:	f001 fdff 	bl	80119b4 <iprintf>
 800fdb6:	f06f 0305 	mvn.w	r3, #5
 800fdba:	e102      	b.n	800ffc2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800fdbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdbe:	88db      	ldrh	r3, [r3, #6]
 800fdc0:	b29b      	uxth	r3, r3
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f7f5 fe82 	bl	8005acc <lwip_htons>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800fdcc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800fdce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fdd2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800fdd6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800fdd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fddc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	891b      	ldrh	r3, [r3, #8]
 800fde2:	3b14      	subs	r3, #20
 800fde4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800fde8:	e0e1      	b.n	800ffae <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800fdea:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800fdec:	00db      	lsls	r3, r3, #3
 800fdee:	b29b      	uxth	r3, r3
 800fdf0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800fdf4:	4293      	cmp	r3, r2
 800fdf6:	bf28      	it	cs
 800fdf8:	4613      	movcs	r3, r2
 800fdfa:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800fdfc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fe00:	2114      	movs	r1, #20
 800fe02:	200e      	movs	r0, #14
 800fe04:	f7f6 fedc 	bl	8006bc0 <pbuf_alloc>
 800fe08:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800fe0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	f000 80d5 	beq.w	800ffbc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800fe12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe14:	895b      	ldrh	r3, [r3, #10]
 800fe16:	2b13      	cmp	r3, #19
 800fe18:	d806      	bhi.n	800fe28 <ip4_frag+0xd0>
 800fe1a:	4b6c      	ldr	r3, [pc, #432]	@ (800ffcc <ip4_frag+0x274>)
 800fe1c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800fe20:	496d      	ldr	r1, [pc, #436]	@ (800ffd8 <ip4_frag+0x280>)
 800fe22:	486c      	ldr	r0, [pc, #432]	@ (800ffd4 <ip4_frag+0x27c>)
 800fe24:	f001 fdc6 	bl	80119b4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800fe28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe2a:	685b      	ldr	r3, [r3, #4]
 800fe2c:	2214      	movs	r2, #20
 800fe2e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800fe30:	4618      	mov	r0, r3
 800fe32:	f001 feea 	bl	8011c0a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800fe36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe38:	685b      	ldr	r3, [r3, #4]
 800fe3a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800fe3c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fe3e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800fe42:	e064      	b.n	800ff0e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	895a      	ldrh	r2, [r3, #10]
 800fe48:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800fe4a:	1ad3      	subs	r3, r2, r3
 800fe4c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	895b      	ldrh	r3, [r3, #10]
 800fe52:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800fe54:	429a      	cmp	r2, r3
 800fe56:	d906      	bls.n	800fe66 <ip4_frag+0x10e>
 800fe58:	4b5c      	ldr	r3, [pc, #368]	@ (800ffcc <ip4_frag+0x274>)
 800fe5a:	f240 322d 	movw	r2, #813	@ 0x32d
 800fe5e:	495f      	ldr	r1, [pc, #380]	@ (800ffdc <ip4_frag+0x284>)
 800fe60:	485c      	ldr	r0, [pc, #368]	@ (800ffd4 <ip4_frag+0x27c>)
 800fe62:	f001 fda7 	bl	80119b4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800fe66:	8bfa      	ldrh	r2, [r7, #30]
 800fe68:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800fe6c:	4293      	cmp	r3, r2
 800fe6e:	bf28      	it	cs
 800fe70:	4613      	movcs	r3, r2
 800fe72:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800fe76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d105      	bne.n	800fe8a <ip4_frag+0x132>
        poff = 0;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	60fb      	str	r3, [r7, #12]
        continue;
 800fe88:	e041      	b.n	800ff0e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800fe8a:	f7ff ff0d 	bl	800fca8 <ip_frag_alloc_pbuf_custom_ref>
 800fe8e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800fe90:	69bb      	ldr	r3, [r7, #24]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d103      	bne.n	800fe9e <ip4_frag+0x146>
        pbuf_free(rambuf);
 800fe96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fe98:	f7f7 f976 	bl	8007188 <pbuf_free>
        goto memerr;
 800fe9c:	e08f      	b.n	800ffbe <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fe9e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fea4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800fea6:	4413      	add	r3, r2
 800fea8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800feac:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800feb0:	9201      	str	r2, [sp, #4]
 800feb2:	9300      	str	r3, [sp, #0]
 800feb4:	4603      	mov	r3, r0
 800feb6:	2241      	movs	r2, #65	@ 0x41
 800feb8:	2000      	movs	r0, #0
 800feba:	f7f6 ffab 	bl	8006e14 <pbuf_alloced_custom>
 800febe:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d106      	bne.n	800fed4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800fec6:	69b8      	ldr	r0, [r7, #24]
 800fec8:	f7ff fef6 	bl	800fcb8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800fecc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fece:	f7f7 f95b 	bl	8007188 <pbuf_free>
        goto memerr;
 800fed2:	e074      	b.n	800ffbe <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800fed4:	68f8      	ldr	r0, [r7, #12]
 800fed6:	f7f7 f9f7 	bl	80072c8 <pbuf_ref>
      pcr->original = p;
 800feda:	69bb      	ldr	r3, [r7, #24]
 800fedc:	68fa      	ldr	r2, [r7, #12]
 800fede:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800fee0:	69bb      	ldr	r3, [r7, #24]
 800fee2:	4a3f      	ldr	r2, [pc, #252]	@ (800ffe0 <ip4_frag+0x288>)
 800fee4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800fee6:	6979      	ldr	r1, [r7, #20]
 800fee8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800feea:	f7f7 fa0f 	bl	800730c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800feee:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800fef2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800fef6:	1ad3      	subs	r3, r2, r3
 800fef8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800fefc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d004      	beq.n	800ff0e <ip4_frag+0x1b6>
        poff = 0;
 800ff04:	2300      	movs	r3, #0
 800ff06:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ff0e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d196      	bne.n	800fe44 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800ff16:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800ff18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ff1c:	4413      	add	r3, r2
 800ff1e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ff20:	68bb      	ldr	r3, [r7, #8]
 800ff22:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ff24:	f1a3 0213 	sub.w	r2, r3, #19
 800ff28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	bfcc      	ite	gt
 800ff30:	2301      	movgt	r3, #1
 800ff32:	2300      	movle	r3, #0
 800ff34:	b2db      	uxtb	r3, r3
 800ff36:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800ff38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ff3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ff40:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800ff42:	6a3b      	ldr	r3, [r7, #32]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d002      	beq.n	800ff4e <ip4_frag+0x1f6>
 800ff48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d003      	beq.n	800ff56 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800ff4e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ff50:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ff54:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800ff56:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ff58:	4618      	mov	r0, r3
 800ff5a:	f7f5 fdb7 	bl	8005acc <lwip_htons>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	461a      	mov	r2, r3
 800ff62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff64:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800ff66:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ff68:	3314      	adds	r3, #20
 800ff6a:	b29b      	uxth	r3, r3
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	f7f5 fdad 	bl	8005acc <lwip_htons>
 800ff72:	4603      	mov	r3, r0
 800ff74:	461a      	mov	r2, r3
 800ff76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff78:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800ff7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	729a      	strb	r2, [r3, #10]
 800ff80:	2200      	movs	r2, #0
 800ff82:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	695b      	ldr	r3, [r3, #20]
 800ff88:	687a      	ldr	r2, [r7, #4]
 800ff8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ff8c:	68b8      	ldr	r0, [r7, #8]
 800ff8e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800ff90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ff92:	f7f7 f8f9 	bl	8007188 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800ff96:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ff9a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ff9c:	1ad3      	subs	r3, r2, r3
 800ff9e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800ffa2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800ffa6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ffa8:	4413      	add	r3, r2
 800ffaa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800ffae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	f47f af19 	bne.w	800fdea <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ffb8:	2300      	movs	r3, #0
 800ffba:	e002      	b.n	800ffc2 <ip4_frag+0x26a>
      goto memerr;
 800ffbc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800ffbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	3748      	adds	r7, #72	@ 0x48
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}
 800ffca:	bf00      	nop
 800ffcc:	08015328 	.word	0x08015328
 800ffd0:	08015504 	.word	0x08015504
 800ffd4:	08015370 	.word	0x08015370
 800ffd8:	08015520 	.word	0x08015520
 800ffdc:	08015540 	.word	0x08015540
 800ffe0:	0800fcf1 	.word	0x0800fcf1

0800ffe4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b086      	sub	sp, #24
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
 800ffec:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800ffee:	230e      	movs	r3, #14
 800fff0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	895b      	ldrh	r3, [r3, #10]
 800fff6:	2b0e      	cmp	r3, #14
 800fff8:	d96e      	bls.n	80100d8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	7bdb      	ldrb	r3, [r3, #15]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d106      	bne.n	8010010 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010002:	683b      	ldr	r3, [r7, #0]
 8010004:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010008:	3301      	adds	r3, #1
 801000a:	b2da      	uxtb	r2, r3
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	685b      	ldr	r3, [r3, #4]
 8010014:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8010016:	693b      	ldr	r3, [r7, #16]
 8010018:	7b1a      	ldrb	r2, [r3, #12]
 801001a:	7b5b      	ldrb	r3, [r3, #13]
 801001c:	021b      	lsls	r3, r3, #8
 801001e:	4313      	orrs	r3, r2
 8010020:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010022:	693b      	ldr	r3, [r7, #16]
 8010024:	781b      	ldrb	r3, [r3, #0]
 8010026:	f003 0301 	and.w	r3, r3, #1
 801002a:	2b00      	cmp	r3, #0
 801002c:	d023      	beq.n	8010076 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801002e:	693b      	ldr	r3, [r7, #16]
 8010030:	781b      	ldrb	r3, [r3, #0]
 8010032:	2b01      	cmp	r3, #1
 8010034:	d10f      	bne.n	8010056 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010036:	693b      	ldr	r3, [r7, #16]
 8010038:	785b      	ldrb	r3, [r3, #1]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d11b      	bne.n	8010076 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801003e:	693b      	ldr	r3, [r7, #16]
 8010040:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010042:	2b5e      	cmp	r3, #94	@ 0x5e
 8010044:	d117      	bne.n	8010076 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	7b5b      	ldrb	r3, [r3, #13]
 801004a:	f043 0310 	orr.w	r3, r3, #16
 801004e:	b2da      	uxtb	r2, r3
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	735a      	strb	r2, [r3, #13]
 8010054:	e00f      	b.n	8010076 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010056:	693b      	ldr	r3, [r7, #16]
 8010058:	2206      	movs	r2, #6
 801005a:	4928      	ldr	r1, [pc, #160]	@ (80100fc <ethernet_input+0x118>)
 801005c:	4618      	mov	r0, r3
 801005e:	f001 fd34 	bl	8011aca <memcmp>
 8010062:	4603      	mov	r3, r0
 8010064:	2b00      	cmp	r3, #0
 8010066:	d106      	bne.n	8010076 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	7b5b      	ldrb	r3, [r3, #13]
 801006c:	f043 0308 	orr.w	r3, r3, #8
 8010070:	b2da      	uxtb	r2, r3
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010076:	89fb      	ldrh	r3, [r7, #14]
 8010078:	2b08      	cmp	r3, #8
 801007a:	d003      	beq.n	8010084 <ethernet_input+0xa0>
 801007c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8010080:	d014      	beq.n	80100ac <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8010082:	e032      	b.n	80100ea <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010084:	683b      	ldr	r3, [r7, #0]
 8010086:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801008a:	f003 0308 	and.w	r3, r3, #8
 801008e:	2b00      	cmp	r3, #0
 8010090:	d024      	beq.n	80100dc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010092:	8afb      	ldrh	r3, [r7, #22]
 8010094:	4619      	mov	r1, r3
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f7f6 fff0 	bl	800707c <pbuf_remove_header>
 801009c:	4603      	mov	r3, r0
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d11e      	bne.n	80100e0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80100a2:	6839      	ldr	r1, [r7, #0]
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f7fe ff21 	bl	800eeec <ip4_input>
      break;
 80100aa:	e013      	b.n	80100d4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80100b2:	f003 0308 	and.w	r3, r3, #8
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d014      	beq.n	80100e4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80100ba:	8afb      	ldrh	r3, [r7, #22]
 80100bc:	4619      	mov	r1, r3
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f7f6 ffdc 	bl	800707c <pbuf_remove_header>
 80100c4:	4603      	mov	r3, r0
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d10e      	bne.n	80100e8 <ethernet_input+0x104>
        etharp_input(p, netif);
 80100ca:	6839      	ldr	r1, [r7, #0]
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f7fe f8c1 	bl	800e254 <etharp_input>
      break;
 80100d2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80100d4:	2300      	movs	r3, #0
 80100d6:	e00c      	b.n	80100f2 <ethernet_input+0x10e>
    goto free_and_return;
 80100d8:	bf00      	nop
 80100da:	e006      	b.n	80100ea <ethernet_input+0x106>
        goto free_and_return;
 80100dc:	bf00      	nop
 80100de:	e004      	b.n	80100ea <ethernet_input+0x106>
        goto free_and_return;
 80100e0:	bf00      	nop
 80100e2:	e002      	b.n	80100ea <ethernet_input+0x106>
        goto free_and_return;
 80100e4:	bf00      	nop
 80100e6:	e000      	b.n	80100ea <ethernet_input+0x106>
        goto free_and_return;
 80100e8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	f7f7 f84c 	bl	8007188 <pbuf_free>
  return ERR_OK;
 80100f0:	2300      	movs	r3, #0
}
 80100f2:	4618      	mov	r0, r3
 80100f4:	3718      	adds	r7, #24
 80100f6:	46bd      	mov	sp, r7
 80100f8:	bd80      	pop	{r7, pc}
 80100fa:	bf00      	nop
 80100fc:	08015830 	.word	0x08015830

08010100 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010100:	b580      	push	{r7, lr}
 8010102:	b086      	sub	sp, #24
 8010104:	af00      	add	r7, sp, #0
 8010106:	60f8      	str	r0, [r7, #12]
 8010108:	60b9      	str	r1, [r7, #8]
 801010a:	607a      	str	r2, [r7, #4]
 801010c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801010e:	8c3b      	ldrh	r3, [r7, #32]
 8010110:	4618      	mov	r0, r3
 8010112:	f7f5 fcdb 	bl	8005acc <lwip_htons>
 8010116:	4603      	mov	r3, r0
 8010118:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801011a:	210e      	movs	r1, #14
 801011c:	68b8      	ldr	r0, [r7, #8]
 801011e:	f7f6 ff9d 	bl	800705c <pbuf_add_header>
 8010122:	4603      	mov	r3, r0
 8010124:	2b00      	cmp	r3, #0
 8010126:	d125      	bne.n	8010174 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010128:	68bb      	ldr	r3, [r7, #8]
 801012a:	685b      	ldr	r3, [r3, #4]
 801012c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801012e:	693b      	ldr	r3, [r7, #16]
 8010130:	8afa      	ldrh	r2, [r7, #22]
 8010132:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010134:	693b      	ldr	r3, [r7, #16]
 8010136:	2206      	movs	r2, #6
 8010138:	6839      	ldr	r1, [r7, #0]
 801013a:	4618      	mov	r0, r3
 801013c:	f001 fd65 	bl	8011c0a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010140:	693b      	ldr	r3, [r7, #16]
 8010142:	3306      	adds	r3, #6
 8010144:	2206      	movs	r2, #6
 8010146:	6879      	ldr	r1, [r7, #4]
 8010148:	4618      	mov	r0, r3
 801014a:	f001 fd5e 	bl	8011c0a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8010154:	2b06      	cmp	r3, #6
 8010156:	d006      	beq.n	8010166 <ethernet_output+0x66>
 8010158:	4b0a      	ldr	r3, [pc, #40]	@ (8010184 <ethernet_output+0x84>)
 801015a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801015e:	490a      	ldr	r1, [pc, #40]	@ (8010188 <ethernet_output+0x88>)
 8010160:	480a      	ldr	r0, [pc, #40]	@ (801018c <ethernet_output+0x8c>)
 8010162:	f001 fc27 	bl	80119b4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	699b      	ldr	r3, [r3, #24]
 801016a:	68b9      	ldr	r1, [r7, #8]
 801016c:	68f8      	ldr	r0, [r7, #12]
 801016e:	4798      	blx	r3
 8010170:	4603      	mov	r3, r0
 8010172:	e002      	b.n	801017a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010174:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010176:	f06f 0301 	mvn.w	r3, #1
}
 801017a:	4618      	mov	r0, r3
 801017c:	3718      	adds	r7, #24
 801017e:	46bd      	mov	sp, r7
 8010180:	bd80      	pop	{r7, pc}
 8010182:	bf00      	nop
 8010184:	08015550 	.word	0x08015550
 8010188:	08015588 	.word	0x08015588
 801018c:	080155bc 	.word	0x080155bc

08010190 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b086      	sub	sp, #24
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
 8010198:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 801019a:	2300      	movs	r3, #0
 801019c:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	881b      	ldrh	r3, [r3, #0]
 80101a2:	2b05      	cmp	r3, #5
 80101a4:	d16a      	bne.n	801027c <eMBFuncReadCoils+0xec>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	3301      	adds	r3, #1
 80101aa:	781b      	ldrb	r3, [r3, #0]
 80101ac:	021b      	lsls	r3, r3, #8
 80101ae:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	3302      	adds	r3, #2
 80101b4:	781b      	ldrb	r3, [r3, #0]
 80101b6:	461a      	mov	r2, r3
 80101b8:	8abb      	ldrh	r3, [r7, #20]
 80101ba:	4313      	orrs	r3, r2
 80101bc:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80101be:	8abb      	ldrh	r3, [r7, #20]
 80101c0:	3301      	adds	r3, #1
 80101c2:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	3303      	adds	r3, #3
 80101c8:	781b      	ldrb	r3, [r3, #0]
 80101ca:	021b      	lsls	r3, r3, #8
 80101cc:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	3304      	adds	r3, #4
 80101d2:	781b      	ldrb	r3, [r3, #0]
 80101d4:	461a      	mov	r2, r3
 80101d6:	8a7b      	ldrh	r3, [r7, #18]
 80101d8:	4313      	orrs	r3, r2
 80101da:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 80101dc:	8a7b      	ldrh	r3, [r7, #18]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d049      	beq.n	8010276 <eMBFuncReadCoils+0xe6>
 80101e2:	8a7b      	ldrh	r3, [r7, #18]
 80101e4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80101e8:	d245      	bcs.n	8010276 <eMBFuncReadCoils+0xe6>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80101ee:	683b      	ldr	r3, [r7, #0]
 80101f0:	2200      	movs	r2, #0
 80101f2:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	1c5a      	adds	r2, r3, #1
 80101f8:	60fa      	str	r2, [r7, #12]
 80101fa:	2201      	movs	r2, #1
 80101fc:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	881b      	ldrh	r3, [r3, #0]
 8010202:	3301      	adds	r3, #1
 8010204:	b29a      	uxth	r2, r3
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 801020a:	8a7b      	ldrh	r3, [r7, #18]
 801020c:	f003 0307 	and.w	r3, r3, #7
 8010210:	2b00      	cmp	r3, #0
 8010212:	d006      	beq.n	8010222 <eMBFuncReadCoils+0x92>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8010214:	8a7b      	ldrh	r3, [r7, #18]
 8010216:	08db      	lsrs	r3, r3, #3
 8010218:	b29b      	uxth	r3, r3
 801021a:	b2db      	uxtb	r3, r3
 801021c:	3301      	adds	r3, #1
 801021e:	75fb      	strb	r3, [r7, #23]
 8010220:	e003      	b.n	801022a <eMBFuncReadCoils+0x9a>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8010222:	8a7b      	ldrh	r3, [r7, #18]
 8010224:	08db      	lsrs	r3, r3, #3
 8010226:	b29b      	uxth	r3, r3
 8010228:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	1c5a      	adds	r2, r3, #1
 801022e:	60fa      	str	r2, [r7, #12]
 8010230:	7dfa      	ldrb	r2, [r7, #23]
 8010232:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	881b      	ldrh	r3, [r3, #0]
 8010238:	3301      	adds	r3, #1
 801023a:	b29a      	uxth	r2, r3
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8010240:	8a7a      	ldrh	r2, [r7, #18]
 8010242:	8ab9      	ldrh	r1, [r7, #20]
 8010244:	2300      	movs	r3, #0
 8010246:	68f8      	ldr	r0, [r7, #12]
 8010248:	f000 fdae 	bl	8010da8 <eMBRegCoilsCB>
 801024c:	4603      	mov	r3, r0
 801024e:	72fb      	strb	r3, [r7, #11]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8010250:	7afb      	ldrb	r3, [r7, #11]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d006      	beq.n	8010264 <eMBFuncReadCoils+0xd4>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8010256:	7afb      	ldrb	r3, [r7, #11]
 8010258:	4618      	mov	r0, r3
 801025a:	f000 fb77 	bl	801094c <prveMBError2Exception>
 801025e:	4603      	mov	r3, r0
 8010260:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8010262:	e00d      	b.n	8010280 <eMBFuncReadCoils+0xf0>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8010264:	683b      	ldr	r3, [r7, #0]
 8010266:	881a      	ldrh	r2, [r3, #0]
 8010268:	7dfb      	ldrb	r3, [r7, #23]
 801026a:	b29b      	uxth	r3, r3
 801026c:	4413      	add	r3, r2
 801026e:	b29a      	uxth	r2, r3
 8010270:	683b      	ldr	r3, [r7, #0]
 8010272:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8010274:	e004      	b.n	8010280 <eMBFuncReadCoils+0xf0>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8010276:	2303      	movs	r3, #3
 8010278:	75bb      	strb	r3, [r7, #22]
 801027a:	e001      	b.n	8010280 <eMBFuncReadCoils+0xf0>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801027c:	2303      	movs	r3, #3
 801027e:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8010280:	7dbb      	ldrb	r3, [r7, #22]
}
 8010282:	4618      	mov	r0, r3
 8010284:	3718      	adds	r7, #24
 8010286:	46bd      	mov	sp, r7
 8010288:	bd80      	pop	{r7, pc}

0801028a <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 801028a:	b580      	push	{r7, lr}
 801028c:	b084      	sub	sp, #16
 801028e:	af00      	add	r7, sp, #0
 8010290:	6078      	str	r0, [r7, #4]
 8010292:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 8010294:	2300      	movs	r3, #0
 8010296:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8010298:	683b      	ldr	r3, [r7, #0]
 801029a:	881b      	ldrh	r3, [r3, #0]
 801029c:	2b05      	cmp	r3, #5
 801029e:	d13f      	bne.n	8010320 <eMBFuncWriteCoil+0x96>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	3301      	adds	r3, #1
 80102a4:	781b      	ldrb	r3, [r3, #0]
 80102a6:	021b      	lsls	r3, r3, #8
 80102a8:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	3302      	adds	r3, #2
 80102ae:	781b      	ldrb	r3, [r3, #0]
 80102b0:	461a      	mov	r2, r3
 80102b2:	89bb      	ldrh	r3, [r7, #12]
 80102b4:	4313      	orrs	r3, r2
 80102b6:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80102b8:	89bb      	ldrh	r3, [r7, #12]
 80102ba:	3301      	adds	r3, #1
 80102bc:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	3304      	adds	r3, #4
 80102c2:	781b      	ldrb	r3, [r3, #0]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d128      	bne.n	801031a <eMBFuncWriteCoil+0x90>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	3303      	adds	r3, #3
 80102cc:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80102ce:	2bff      	cmp	r3, #255	@ 0xff
 80102d0:	d004      	beq.n	80102dc <eMBFuncWriteCoil+0x52>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	3303      	adds	r3, #3
 80102d6:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d11e      	bne.n	801031a <eMBFuncWriteCoil+0x90>
        {
            ucBuf[1] = 0;
 80102dc:	2300      	movs	r3, #0
 80102de:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	3303      	adds	r3, #3
 80102e4:	781b      	ldrb	r3, [r3, #0]
 80102e6:	2bff      	cmp	r3, #255	@ 0xff
 80102e8:	d102      	bne.n	80102f0 <eMBFuncWriteCoil+0x66>
            {
                ucBuf[0] = 1;
 80102ea:	2301      	movs	r3, #1
 80102ec:	723b      	strb	r3, [r7, #8]
 80102ee:	e001      	b.n	80102f4 <eMBFuncWriteCoil+0x6a>
            }
            else
            {
                ucBuf[0] = 0;
 80102f0:	2300      	movs	r3, #0
 80102f2:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 80102f4:	89b9      	ldrh	r1, [r7, #12]
 80102f6:	f107 0008 	add.w	r0, r7, #8
 80102fa:	2301      	movs	r3, #1
 80102fc:	2201      	movs	r2, #1
 80102fe:	f000 fd53 	bl	8010da8 <eMBRegCoilsCB>
 8010302:	4603      	mov	r3, r0
 8010304:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8010306:	7afb      	ldrb	r3, [r7, #11]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d00b      	beq.n	8010324 <eMBFuncWriteCoil+0x9a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 801030c:	7afb      	ldrb	r3, [r7, #11]
 801030e:	4618      	mov	r0, r3
 8010310:	f000 fb1c 	bl	801094c <prveMBError2Exception>
 8010314:	4603      	mov	r3, r0
 8010316:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8010318:	e004      	b.n	8010324 <eMBFuncWriteCoil+0x9a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801031a:	2303      	movs	r3, #3
 801031c:	73fb      	strb	r3, [r7, #15]
 801031e:	e001      	b.n	8010324 <eMBFuncWriteCoil+0x9a>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8010320:	2303      	movs	r3, #3
 8010322:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8010324:	7bfb      	ldrb	r3, [r7, #15]
}
 8010326:	4618      	mov	r0, r3
 8010328:	3710      	adds	r7, #16
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}

0801032e <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 801032e:	b580      	push	{r7, lr}
 8010330:	b084      	sub	sp, #16
 8010332:	af00      	add	r7, sp, #0
 8010334:	6078      	str	r0, [r7, #4]
 8010336:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 8010338:	2300      	movs	r3, #0
 801033a:	73bb      	strb	r3, [r7, #14]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 801033c:	683b      	ldr	r3, [r7, #0]
 801033e:	881b      	ldrh	r3, [r3, #0]
 8010340:	2b05      	cmp	r3, #5
 8010342:	d952      	bls.n	80103ea <eMBFuncWriteMultipleCoils+0xbc>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	3301      	adds	r3, #1
 8010348:	781b      	ldrb	r3, [r3, #0]
 801034a:	021b      	lsls	r3, r3, #8
 801034c:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	3302      	adds	r3, #2
 8010352:	781b      	ldrb	r3, [r3, #0]
 8010354:	461a      	mov	r2, r3
 8010356:	89bb      	ldrh	r3, [r7, #12]
 8010358:	4313      	orrs	r3, r2
 801035a:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 801035c:	89bb      	ldrh	r3, [r7, #12]
 801035e:	3301      	adds	r3, #1
 8010360:	81bb      	strh	r3, [r7, #12]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	3303      	adds	r3, #3
 8010366:	781b      	ldrb	r3, [r3, #0]
 8010368:	021b      	lsls	r3, r3, #8
 801036a:	817b      	strh	r3, [r7, #10]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	3304      	adds	r3, #4
 8010370:	781b      	ldrb	r3, [r3, #0]
 8010372:	461a      	mov	r2, r3
 8010374:	897b      	ldrh	r3, [r7, #10]
 8010376:	4313      	orrs	r3, r2
 8010378:	817b      	strh	r3, [r7, #10]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	795b      	ldrb	r3, [r3, #5]
 801037e:	727b      	strb	r3, [r7, #9]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8010380:	897b      	ldrh	r3, [r7, #10]
 8010382:	f003 0307 	and.w	r3, r3, #7
 8010386:	2b00      	cmp	r3, #0
 8010388:	d006      	beq.n	8010398 <eMBFuncWriteMultipleCoils+0x6a>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 801038a:	897b      	ldrh	r3, [r7, #10]
 801038c:	08db      	lsrs	r3, r3, #3
 801038e:	b29b      	uxth	r3, r3
 8010390:	b2db      	uxtb	r3, r3
 8010392:	3301      	adds	r3, #1
 8010394:	73fb      	strb	r3, [r7, #15]
 8010396:	e003      	b.n	80103a0 <eMBFuncWriteMultipleCoils+0x72>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8010398:	897b      	ldrh	r3, [r7, #10]
 801039a:	08db      	lsrs	r3, r3, #3
 801039c:	b29b      	uxth	r3, r3
 801039e:	73fb      	strb	r3, [r7, #15]
        }

        if( ( usCoilCnt >= 1 ) &&
 80103a0:	897b      	ldrh	r3, [r7, #10]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d01e      	beq.n	80103e4 <eMBFuncWriteMultipleCoils+0xb6>
 80103a6:	897b      	ldrh	r3, [r7, #10]
 80103a8:	f5b3 6ff6 	cmp.w	r3, #1968	@ 0x7b0
 80103ac:	d81a      	bhi.n	80103e4 <eMBFuncWriteMultipleCoils+0xb6>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 80103ae:	7bfa      	ldrb	r2, [r7, #15]
 80103b0:	7a7b      	ldrb	r3, [r7, #9]
 80103b2:	429a      	cmp	r2, r3
 80103b4:	d116      	bne.n	80103e4 <eMBFuncWriteMultipleCoils+0xb6>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	1d98      	adds	r0, r3, #6
 80103ba:	897a      	ldrh	r2, [r7, #10]
 80103bc:	89b9      	ldrh	r1, [r7, #12]
 80103be:	2301      	movs	r3, #1
 80103c0:	f000 fcf2 	bl	8010da8 <eMBRegCoilsCB>
 80103c4:	4603      	mov	r3, r0
 80103c6:	723b      	strb	r3, [r7, #8]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80103c8:	7a3b      	ldrb	r3, [r7, #8]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d006      	beq.n	80103dc <eMBFuncWriteMultipleCoils+0xae>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80103ce:	7a3b      	ldrb	r3, [r7, #8]
 80103d0:	4618      	mov	r0, r3
 80103d2:	f000 fabb 	bl	801094c <prveMBError2Exception>
 80103d6:	4603      	mov	r3, r0
 80103d8:	73bb      	strb	r3, [r7, #14]
            if( eRegStatus != MB_ENOERR )
 80103da:	e008      	b.n	80103ee <eMBFuncWriteMultipleCoils+0xc0>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	2205      	movs	r2, #5
 80103e0:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 80103e2:	e004      	b.n	80103ee <eMBFuncWriteMultipleCoils+0xc0>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80103e4:	2303      	movs	r3, #3
 80103e6:	73bb      	strb	r3, [r7, #14]
 80103e8:	e001      	b.n	80103ee <eMBFuncWriteMultipleCoils+0xc0>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80103ea:	2303      	movs	r3, #3
 80103ec:	73bb      	strb	r3, [r7, #14]
    }
    return eStatus;
 80103ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80103f0:	4618      	mov	r0, r3
 80103f2:	3710      	adds	r7, #16
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}

080103f8 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b086      	sub	sp, #24
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
 8010400:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8010402:	2300      	movs	r3, #0
 8010404:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	881b      	ldrh	r3, [r3, #0]
 801040a:	2b05      	cmp	r3, #5
 801040c:	d16a      	bne.n	80104e4 <eMBFuncReadDiscreteInputs+0xec>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	3301      	adds	r3, #1
 8010412:	781b      	ldrb	r3, [r3, #0]
 8010414:	021b      	lsls	r3, r3, #8
 8010416:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	3302      	adds	r3, #2
 801041c:	781b      	ldrb	r3, [r3, #0]
 801041e:	461a      	mov	r2, r3
 8010420:	8abb      	ldrh	r3, [r7, #20]
 8010422:	4313      	orrs	r3, r2
 8010424:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8010426:	8abb      	ldrh	r3, [r7, #20]
 8010428:	3301      	adds	r3, #1
 801042a:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	3303      	adds	r3, #3
 8010430:	781b      	ldrb	r3, [r3, #0]
 8010432:	021b      	lsls	r3, r3, #8
 8010434:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	3304      	adds	r3, #4
 801043a:	781b      	ldrb	r3, [r3, #0]
 801043c:	461a      	mov	r2, r3
 801043e:	8a7b      	ldrh	r3, [r7, #18]
 8010440:	4313      	orrs	r3, r2
 8010442:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8010444:	8a7b      	ldrh	r3, [r7, #18]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d049      	beq.n	80104de <eMBFuncReadDiscreteInputs+0xe6>
 801044a:	8a7b      	ldrh	r3, [r7, #18]
 801044c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8010450:	d245      	bcs.n	80104de <eMBFuncReadDiscreteInputs+0xe6>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	2200      	movs	r2, #0
 801045a:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	1c5a      	adds	r2, r3, #1
 8010460:	60fa      	str	r2, [r7, #12]
 8010462:	2202      	movs	r2, #2
 8010464:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8010466:	683b      	ldr	r3, [r7, #0]
 8010468:	881b      	ldrh	r3, [r3, #0]
 801046a:	3301      	adds	r3, #1
 801046c:	b29a      	uxth	r2, r3
 801046e:	683b      	ldr	r3, [r7, #0]
 8010470:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8010472:	8a7b      	ldrh	r3, [r7, #18]
 8010474:	f003 0307 	and.w	r3, r3, #7
 8010478:	2b00      	cmp	r3, #0
 801047a:	d006      	beq.n	801048a <eMBFuncReadDiscreteInputs+0x92>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 801047c:	8a7b      	ldrh	r3, [r7, #18]
 801047e:	08db      	lsrs	r3, r3, #3
 8010480:	b29b      	uxth	r3, r3
 8010482:	b2db      	uxtb	r3, r3
 8010484:	3301      	adds	r3, #1
 8010486:	75fb      	strb	r3, [r7, #23]
 8010488:	e003      	b.n	8010492 <eMBFuncReadDiscreteInputs+0x9a>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 801048a:	8a7b      	ldrh	r3, [r7, #18]
 801048c:	08db      	lsrs	r3, r3, #3
 801048e:	b29b      	uxth	r3, r3
 8010490:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	1c5a      	adds	r2, r3, #1
 8010496:	60fa      	str	r2, [r7, #12]
 8010498:	7dfa      	ldrb	r2, [r7, #23]
 801049a:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 801049c:	683b      	ldr	r3, [r7, #0]
 801049e:	881b      	ldrh	r3, [r3, #0]
 80104a0:	3301      	adds	r3, #1
 80104a2:	b29a      	uxth	r2, r3
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 80104a8:	8a7a      	ldrh	r2, [r7, #18]
 80104aa:	8abb      	ldrh	r3, [r7, #20]
 80104ac:	4619      	mov	r1, r3
 80104ae:	68f8      	ldr	r0, [r7, #12]
 80104b0:	f000 fd6e 	bl	8010f90 <eMBRegDiscreteCB>
 80104b4:	4603      	mov	r3, r0
 80104b6:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80104b8:	7afb      	ldrb	r3, [r7, #11]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d006      	beq.n	80104cc <eMBFuncReadDiscreteInputs+0xd4>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80104be:	7afb      	ldrb	r3, [r7, #11]
 80104c0:	4618      	mov	r0, r3
 80104c2:	f000 fa43 	bl	801094c <prveMBError2Exception>
 80104c6:	4603      	mov	r3, r0
 80104c8:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 80104ca:	e00d      	b.n	80104e8 <eMBFuncReadDiscreteInputs+0xf0>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	881a      	ldrh	r2, [r3, #0]
 80104d0:	7dfb      	ldrb	r3, [r7, #23]
 80104d2:	b29b      	uxth	r3, r3
 80104d4:	4413      	add	r3, r2
 80104d6:	b29a      	uxth	r2, r3
 80104d8:	683b      	ldr	r3, [r7, #0]
 80104da:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 80104dc:	e004      	b.n	80104e8 <eMBFuncReadDiscreteInputs+0xf0>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80104de:	2303      	movs	r3, #3
 80104e0:	75bb      	strb	r3, [r7, #22]
 80104e2:	e001      	b.n	80104e8 <eMBFuncReadDiscreteInputs+0xf0>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80104e4:	2303      	movs	r3, #3
 80104e6:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 80104e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	3718      	adds	r7, #24
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}

080104f2 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80104f2:	b580      	push	{r7, lr}
 80104f4:	b084      	sub	sp, #16
 80104f6:	af00      	add	r7, sp, #0
 80104f8:	6078      	str	r0, [r7, #4]
 80104fa:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 80104fc:	2300      	movs	r3, #0
 80104fe:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	881b      	ldrh	r3, [r3, #0]
 8010504:	2b05      	cmp	r3, #5
 8010506:	d121      	bne.n	801054c <eMBFuncWriteHoldingRegister+0x5a>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	3301      	adds	r3, #1
 801050c:	781b      	ldrb	r3, [r3, #0]
 801050e:	021b      	lsls	r3, r3, #8
 8010510:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	3302      	adds	r3, #2
 8010516:	781b      	ldrb	r3, [r3, #0]
 8010518:	461a      	mov	r2, r3
 801051a:	89bb      	ldrh	r3, [r7, #12]
 801051c:	4313      	orrs	r3, r2
 801051e:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8010520:	89bb      	ldrh	r3, [r7, #12]
 8010522:	3301      	adds	r3, #1
 8010524:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	1cd8      	adds	r0, r3, #3
 801052a:	89b9      	ldrh	r1, [r7, #12]
 801052c:	2301      	movs	r3, #1
 801052e:	2201      	movs	r2, #1
 8010530:	f000 fbc4 	bl	8010cbc <eMBRegHoldingCB>
 8010534:	4603      	mov	r3, r0
 8010536:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8010538:	7afb      	ldrb	r3, [r7, #11]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d008      	beq.n	8010550 <eMBFuncWriteHoldingRegister+0x5e>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 801053e:	7afb      	ldrb	r3, [r7, #11]
 8010540:	4618      	mov	r0, r3
 8010542:	f000 fa03 	bl	801094c <prveMBError2Exception>
 8010546:	4603      	mov	r3, r0
 8010548:	73fb      	strb	r3, [r7, #15]
 801054a:	e001      	b.n	8010550 <eMBFuncWriteHoldingRegister+0x5e>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801054c:	2303      	movs	r3, #3
 801054e:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8010550:	7bfb      	ldrb	r3, [r7, #15]
}
 8010552:	4618      	mov	r0, r3
 8010554:	3710      	adds	r7, #16
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}

0801055a <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 801055a:	b580      	push	{r7, lr}
 801055c:	b084      	sub	sp, #16
 801055e:	af00      	add	r7, sp, #0
 8010560:	6078      	str	r0, [r7, #4]
 8010562:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8010564:	2300      	movs	r3, #0
 8010566:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8010568:	683b      	ldr	r3, [r7, #0]
 801056a:	881b      	ldrh	r3, [r3, #0]
 801056c:	2b05      	cmp	r3, #5
 801056e:	d944      	bls.n	80105fa <eMBFuncWriteMultipleHoldingRegister+0xa0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	3301      	adds	r3, #1
 8010574:	781b      	ldrb	r3, [r3, #0]
 8010576:	021b      	lsls	r3, r3, #8
 8010578:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	3302      	adds	r3, #2
 801057e:	781b      	ldrb	r3, [r3, #0]
 8010580:	461a      	mov	r2, r3
 8010582:	89bb      	ldrh	r3, [r7, #12]
 8010584:	4313      	orrs	r3, r2
 8010586:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8010588:	89bb      	ldrh	r3, [r7, #12]
 801058a:	3301      	adds	r3, #1
 801058c:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	3303      	adds	r3, #3
 8010592:	781b      	ldrb	r3, [r3, #0]
 8010594:	021b      	lsls	r3, r3, #8
 8010596:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	3304      	adds	r3, #4
 801059c:	781b      	ldrb	r3, [r3, #0]
 801059e:	461a      	mov	r2, r3
 80105a0:	897b      	ldrh	r3, [r7, #10]
 80105a2:	4313      	orrs	r3, r2
 80105a4:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	795b      	ldrb	r3, [r3, #5]
 80105aa:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 80105ac:	897b      	ldrh	r3, [r7, #10]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d020      	beq.n	80105f4 <eMBFuncWriteMultipleHoldingRegister+0x9a>
 80105b2:	897b      	ldrh	r3, [r7, #10]
 80105b4:	2b78      	cmp	r3, #120	@ 0x78
 80105b6:	d81d      	bhi.n	80105f4 <eMBFuncWriteMultipleHoldingRegister+0x9a>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 80105b8:	897b      	ldrh	r3, [r7, #10]
 80105ba:	b2db      	uxtb	r3, r3
 80105bc:	005b      	lsls	r3, r3, #1
 80105be:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 80105c0:	7a7a      	ldrb	r2, [r7, #9]
 80105c2:	429a      	cmp	r2, r3
 80105c4:	d116      	bne.n	80105f4 <eMBFuncWriteMultipleHoldingRegister+0x9a>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	1d98      	adds	r0, r3, #6
 80105ca:	897a      	ldrh	r2, [r7, #10]
 80105cc:	89b9      	ldrh	r1, [r7, #12]
 80105ce:	2301      	movs	r3, #1
 80105d0:	f000 fb74 	bl	8010cbc <eMBRegHoldingCB>
 80105d4:	4603      	mov	r3, r0
 80105d6:	723b      	strb	r3, [r7, #8]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80105d8:	7a3b      	ldrb	r3, [r7, #8]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d006      	beq.n	80105ec <eMBFuncWriteMultipleHoldingRegister+0x92>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80105de:	7a3b      	ldrb	r3, [r7, #8]
 80105e0:	4618      	mov	r0, r3
 80105e2:	f000 f9b3 	bl	801094c <prveMBError2Exception>
 80105e6:	4603      	mov	r3, r0
 80105e8:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 80105ea:	e008      	b.n	80105fe <eMBFuncWriteMultipleHoldingRegister+0xa4>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	2205      	movs	r2, #5
 80105f0:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 80105f2:	e004      	b.n	80105fe <eMBFuncWriteMultipleHoldingRegister+0xa4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80105f4:	2303      	movs	r3, #3
 80105f6:	73fb      	strb	r3, [r7, #15]
 80105f8:	e001      	b.n	80105fe <eMBFuncWriteMultipleHoldingRegister+0xa4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80105fa:	2303      	movs	r3, #3
 80105fc:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 80105fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010600:	4618      	mov	r0, r3
 8010602:	3710      	adds	r7, #16
 8010604:	46bd      	mov	sp, r7
 8010606:	bd80      	pop	{r7, pc}

08010608 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b086      	sub	sp, #24
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
 8010610:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8010612:	2300      	movs	r3, #0
 8010614:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8010616:	683b      	ldr	r3, [r7, #0]
 8010618:	881b      	ldrh	r3, [r3, #0]
 801061a:	2b05      	cmp	r3, #5
 801061c:	d15d      	bne.n	80106da <eMBFuncReadHoldingRegister+0xd2>
    {
        usRegAddress  = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	3301      	adds	r3, #1
 8010622:	781b      	ldrb	r3, [r3, #0]
 8010624:	021b      	lsls	r3, r3, #8
 8010626:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	3302      	adds	r3, #2
 801062c:	781b      	ldrb	r3, [r3, #0]
 801062e:	461a      	mov	r2, r3
 8010630:	8abb      	ldrh	r3, [r7, #20]
 8010632:	4313      	orrs	r3, r2
 8010634:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8010636:	8abb      	ldrh	r3, [r7, #20]
 8010638:	3301      	adds	r3, #1
 801063a:	82bb      	strh	r3, [r7, #20]

        usRegCount  = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	3303      	adds	r3, #3
 8010640:	781b      	ldrb	r3, [r3, #0]
 8010642:	021b      	lsls	r3, r3, #8
 8010644:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	3304      	adds	r3, #4
 801064a:	781b      	ldrb	r3, [r3, #0]
 801064c:	461a      	mov	r2, r3
 801064e:	8a7b      	ldrh	r3, [r7, #18]
 8010650:	4313      	orrs	r3, r2
 8010652:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8010654:	8a7b      	ldrh	r3, [r7, #18]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d03c      	beq.n	80106d4 <eMBFuncReadHoldingRegister+0xcc>
 801065a:	8a7b      	ldrh	r3, [r7, #18]
 801065c:	2b7d      	cmp	r3, #125	@ 0x7d
 801065e:	d839      	bhi.n	80106d4 <eMBFuncReadHoldingRegister+0xcc>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	2200      	movs	r2, #0
 8010668:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	1c5a      	adds	r2, r3, #1
 801066e:	60fa      	str	r2, [r7, #12]
 8010670:	2203      	movs	r2, #3
 8010672:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8010674:	683b      	ldr	r3, [r7, #0]
 8010676:	881b      	ldrh	r3, [r3, #0]
 8010678:	3301      	adds	r3, #1
 801067a:	b29a      	uxth	r2, r3
 801067c:	683b      	ldr	r3, [r7, #0]
 801067e:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8010680:	8a7b      	ldrh	r3, [r7, #18]
 8010682:	b2da      	uxtb	r2, r3
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	1c59      	adds	r1, r3, #1
 8010688:	60f9      	str	r1, [r7, #12]
 801068a:	0052      	lsls	r2, r2, #1
 801068c:	b2d2      	uxtb	r2, r2
 801068e:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	881b      	ldrh	r3, [r3, #0]
 8010694:	3301      	adds	r3, #1
 8010696:	b29a      	uxth	r2, r3
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 801069c:	8a7a      	ldrh	r2, [r7, #18]
 801069e:	8ab9      	ldrh	r1, [r7, #20]
 80106a0:	2300      	movs	r3, #0
 80106a2:	68f8      	ldr	r0, [r7, #12]
 80106a4:	f000 fb0a 	bl	8010cbc <eMBRegHoldingCB>
 80106a8:	4603      	mov	r3, r0
 80106aa:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80106ac:	7afb      	ldrb	r3, [r7, #11]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d006      	beq.n	80106c0 <eMBFuncReadHoldingRegister+0xb8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80106b2:	7afb      	ldrb	r3, [r7, #11]
 80106b4:	4618      	mov	r0, r3
 80106b6:	f000 f949 	bl	801094c <prveMBError2Exception>
 80106ba:	4603      	mov	r3, r0
 80106bc:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 80106be:	e00e      	b.n	80106de <eMBFuncReadHoldingRegister+0xd6>
            }
            else
            {
                *usLen += usRegCount * 2;
 80106c0:	683b      	ldr	r3, [r7, #0]
 80106c2:	881a      	ldrh	r2, [r3, #0]
 80106c4:	8a7b      	ldrh	r3, [r7, #18]
 80106c6:	005b      	lsls	r3, r3, #1
 80106c8:	b29b      	uxth	r3, r3
 80106ca:	4413      	add	r3, r2
 80106cc:	b29a      	uxth	r2, r3
 80106ce:	683b      	ldr	r3, [r7, #0]
 80106d0:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 80106d2:	e004      	b.n	80106de <eMBFuncReadHoldingRegister+0xd6>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80106d4:	2303      	movs	r3, #3
 80106d6:	75fb      	strb	r3, [r7, #23]
 80106d8:	e001      	b.n	80106de <eMBFuncReadHoldingRegister+0xd6>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80106da:	2303      	movs	r3, #3
 80106dc:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 80106de:	7dfb      	ldrb	r3, [r7, #23]
}
 80106e0:	4618      	mov	r0, r3
 80106e2:	3718      	adds	r7, #24
 80106e4:	46bd      	mov	sp, r7
 80106e6:	bd80      	pop	{r7, pc}

080106e8 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b086      	sub	sp, #24
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
 80106f0:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 80106f2:	2300      	movs	r3, #0
 80106f4:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 80106f6:	683b      	ldr	r3, [r7, #0]
 80106f8:	881b      	ldrh	r3, [r3, #0]
 80106fa:	2b09      	cmp	r3, #9
 80106fc:	f240 8095 	bls.w	801082a <eMBFuncReadWriteMultipleHoldingRegister+0x142>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	3301      	adds	r3, #1
 8010704:	781b      	ldrb	r3, [r3, #0]
 8010706:	021b      	lsls	r3, r3, #8
 8010708:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	3302      	adds	r3, #2
 801070e:	781b      	ldrb	r3, [r3, #0]
 8010710:	461a      	mov	r2, r3
 8010712:	8abb      	ldrh	r3, [r7, #20]
 8010714:	4313      	orrs	r3, r2
 8010716:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 8010718:	8abb      	ldrh	r3, [r7, #20]
 801071a:	3301      	adds	r3, #1
 801071c:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	3303      	adds	r3, #3
 8010722:	781b      	ldrb	r3, [r3, #0]
 8010724:	021b      	lsls	r3, r3, #8
 8010726:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	3304      	adds	r3, #4
 801072c:	781b      	ldrb	r3, [r3, #0]
 801072e:	461a      	mov	r2, r3
 8010730:	8a7b      	ldrh	r3, [r7, #18]
 8010732:	4313      	orrs	r3, r2
 8010734:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	3305      	adds	r3, #5
 801073a:	781b      	ldrb	r3, [r3, #0]
 801073c:	021b      	lsls	r3, r3, #8
 801073e:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	3306      	adds	r3, #6
 8010744:	781b      	ldrb	r3, [r3, #0]
 8010746:	461a      	mov	r2, r3
 8010748:	8a3b      	ldrh	r3, [r7, #16]
 801074a:	4313      	orrs	r3, r2
 801074c:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 801074e:	8a3b      	ldrh	r3, [r7, #16]
 8010750:	3301      	adds	r3, #1
 8010752:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	3307      	adds	r3, #7
 8010758:	781b      	ldrb	r3, [r3, #0]
 801075a:	021b      	lsls	r3, r3, #8
 801075c:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	3308      	adds	r3, #8
 8010762:	781b      	ldrb	r3, [r3, #0]
 8010764:	461a      	mov	r2, r3
 8010766:	89fb      	ldrh	r3, [r7, #14]
 8010768:	4313      	orrs	r3, r2
 801076a:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	7a5b      	ldrb	r3, [r3, #9]
 8010770:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8010772:	8a7b      	ldrh	r3, [r7, #18]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d056      	beq.n	8010826 <eMBFuncReadWriteMultipleHoldingRegister+0x13e>
 8010778:	8a7b      	ldrh	r3, [r7, #18]
 801077a:	2b7d      	cmp	r3, #125	@ 0x7d
 801077c:	d853      	bhi.n	8010826 <eMBFuncReadWriteMultipleHoldingRegister+0x13e>
 801077e:	89fb      	ldrh	r3, [r7, #14]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d050      	beq.n	8010826 <eMBFuncReadWriteMultipleHoldingRegister+0x13e>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8010784:	89fb      	ldrh	r3, [r7, #14]
 8010786:	2b79      	cmp	r3, #121	@ 0x79
 8010788:	d84d      	bhi.n	8010826 <eMBFuncReadWriteMultipleHoldingRegister+0x13e>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 801078a:	89fb      	ldrh	r3, [r7, #14]
 801078c:	005a      	lsls	r2, r3, #1
 801078e:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8010790:	429a      	cmp	r2, r3
 8010792:	d148      	bne.n	8010826 <eMBFuncReadWriteMultipleHoldingRegister+0x13e>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f103 000a 	add.w	r0, r3, #10
 801079a:	89fa      	ldrh	r2, [r7, #14]
 801079c:	8a39      	ldrh	r1, [r7, #16]
 801079e:	2301      	movs	r3, #1
 80107a0:	f000 fa8c 	bl	8010cbc <eMBRegHoldingCB>
 80107a4:	4603      	mov	r3, r0
 80107a6:	75bb      	strb	r3, [r7, #22]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 80107a8:	7dbb      	ldrb	r3, [r7, #22]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d131      	bne.n	8010812 <eMBFuncReadWriteMultipleHoldingRegister+0x12a>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	2200      	movs	r2, #0
 80107b6:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	1c5a      	adds	r2, r3, #1
 80107bc:	60ba      	str	r2, [r7, #8]
 80107be:	2217      	movs	r2, #23
 80107c0:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 80107c2:	683b      	ldr	r3, [r7, #0]
 80107c4:	881b      	ldrh	r3, [r3, #0]
 80107c6:	3301      	adds	r3, #1
 80107c8:	b29a      	uxth	r2, r3
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 80107ce:	8a7b      	ldrh	r3, [r7, #18]
 80107d0:	b2da      	uxtb	r2, r3
 80107d2:	68bb      	ldr	r3, [r7, #8]
 80107d4:	1c59      	adds	r1, r3, #1
 80107d6:	60b9      	str	r1, [r7, #8]
 80107d8:	0052      	lsls	r2, r2, #1
 80107da:	b2d2      	uxtb	r2, r2
 80107dc:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 80107de:	683b      	ldr	r3, [r7, #0]
 80107e0:	881b      	ldrh	r3, [r3, #0]
 80107e2:	3301      	adds	r3, #1
 80107e4:	b29a      	uxth	r2, r3
 80107e6:	683b      	ldr	r3, [r7, #0]
 80107e8:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 80107ea:	8a7a      	ldrh	r2, [r7, #18]
 80107ec:	8ab9      	ldrh	r1, [r7, #20]
 80107ee:	2300      	movs	r3, #0
 80107f0:	68b8      	ldr	r0, [r7, #8]
 80107f2:	f000 fa63 	bl	8010cbc <eMBRegHoldingCB>
 80107f6:	4603      	mov	r3, r0
 80107f8:	75bb      	strb	r3, [r7, #22]
                if( eRegStatus == MB_ENOERR )
 80107fa:	7dbb      	ldrb	r3, [r7, #22]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d108      	bne.n	8010812 <eMBFuncReadWriteMultipleHoldingRegister+0x12a>
                {
                    *usLen += 2 * usRegReadCount;
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	881a      	ldrh	r2, [r3, #0]
 8010804:	8a7b      	ldrh	r3, [r7, #18]
 8010806:	005b      	lsls	r3, r3, #1
 8010808:	b29b      	uxth	r3, r3
 801080a:	4413      	add	r3, r2
 801080c:	b29a      	uxth	r2, r3
 801080e:	683b      	ldr	r3, [r7, #0]
 8010810:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 8010812:	7dbb      	ldrb	r3, [r7, #22]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d008      	beq.n	801082a <eMBFuncReadWriteMultipleHoldingRegister+0x142>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8010818:	7dbb      	ldrb	r3, [r7, #22]
 801081a:	4618      	mov	r0, r3
 801081c:	f000 f896 	bl	801094c <prveMBError2Exception>
 8010820:	4603      	mov	r3, r0
 8010822:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8010824:	e001      	b.n	801082a <eMBFuncReadWriteMultipleHoldingRegister+0x142>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8010826:	2303      	movs	r3, #3
 8010828:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 801082a:	7dfb      	ldrb	r3, [r7, #23]
}
 801082c:	4618      	mov	r0, r3
 801082e:	3718      	adds	r7, #24
 8010830:	46bd      	mov	sp, r7
 8010832:	bd80      	pop	{r7, pc}

08010834 <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8010834:	b580      	push	{r7, lr}
 8010836:	b086      	sub	sp, #24
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
 801083c:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 801083e:	2300      	movs	r3, #0
 8010840:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8010842:	683b      	ldr	r3, [r7, #0]
 8010844:	881b      	ldrh	r3, [r3, #0]
 8010846:	2b05      	cmp	r3, #5
 8010848:	d15d      	bne.n	8010906 <eMBFuncReadInputRegister+0xd2>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	3301      	adds	r3, #1
 801084e:	781b      	ldrb	r3, [r3, #0]
 8010850:	021b      	lsls	r3, r3, #8
 8010852:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	3302      	adds	r3, #2
 8010858:	781b      	ldrb	r3, [r3, #0]
 801085a:	461a      	mov	r2, r3
 801085c:	8abb      	ldrh	r3, [r7, #20]
 801085e:	4313      	orrs	r3, r2
 8010860:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8010862:	8abb      	ldrh	r3, [r7, #20]
 8010864:	3301      	adds	r3, #1
 8010866:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	3303      	adds	r3, #3
 801086c:	781b      	ldrb	r3, [r3, #0]
 801086e:	021b      	lsls	r3, r3, #8
 8010870:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	3304      	adds	r3, #4
 8010876:	781b      	ldrb	r3, [r3, #0]
 8010878:	461a      	mov	r2, r3
 801087a:	8a7b      	ldrh	r3, [r7, #18]
 801087c:	4313      	orrs	r3, r2
 801087e:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 8010880:	8a7b      	ldrh	r3, [r7, #18]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d03c      	beq.n	8010900 <eMBFuncReadInputRegister+0xcc>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8010886:	8a7b      	ldrh	r3, [r7, #18]
 8010888:	2b7c      	cmp	r3, #124	@ 0x7c
 801088a:	d839      	bhi.n	8010900 <eMBFuncReadInputRegister+0xcc>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	2200      	movs	r2, #0
 8010894:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	1c5a      	adds	r2, r3, #1
 801089a:	60fa      	str	r2, [r7, #12]
 801089c:	2204      	movs	r2, #4
 801089e:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80108a0:	683b      	ldr	r3, [r7, #0]
 80108a2:	881b      	ldrh	r3, [r3, #0]
 80108a4:	3301      	adds	r3, #1
 80108a6:	b29a      	uxth	r2, r3
 80108a8:	683b      	ldr	r3, [r7, #0]
 80108aa:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 80108ac:	8a7b      	ldrh	r3, [r7, #18]
 80108ae:	b2da      	uxtb	r2, r3
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	1c59      	adds	r1, r3, #1
 80108b4:	60f9      	str	r1, [r7, #12]
 80108b6:	0052      	lsls	r2, r2, #1
 80108b8:	b2d2      	uxtb	r2, r2
 80108ba:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80108bc:	683b      	ldr	r3, [r7, #0]
 80108be:	881b      	ldrh	r3, [r3, #0]
 80108c0:	3301      	adds	r3, #1
 80108c2:	b29a      	uxth	r2, r3
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 80108c8:	8a7a      	ldrh	r2, [r7, #18]
 80108ca:	8abb      	ldrh	r3, [r7, #20]
 80108cc:	4619      	mov	r1, r3
 80108ce:	68f8      	ldr	r0, [r7, #12]
 80108d0:	f000 fb20 	bl	8010f14 <eMBRegInputCB>
 80108d4:	4603      	mov	r3, r0
 80108d6:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80108d8:	7afb      	ldrb	r3, [r7, #11]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d006      	beq.n	80108ec <eMBFuncReadInputRegister+0xb8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80108de:	7afb      	ldrb	r3, [r7, #11]
 80108e0:	4618      	mov	r0, r3
 80108e2:	f000 f833 	bl	801094c <prveMBError2Exception>
 80108e6:	4603      	mov	r3, r0
 80108e8:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 80108ea:	e00e      	b.n	801090a <eMBFuncReadInputRegister+0xd6>
            }
            else
            {
                *usLen += usRegCount * 2;
 80108ec:	683b      	ldr	r3, [r7, #0]
 80108ee:	881a      	ldrh	r2, [r3, #0]
 80108f0:	8a7b      	ldrh	r3, [r7, #18]
 80108f2:	005b      	lsls	r3, r3, #1
 80108f4:	b29b      	uxth	r3, r3
 80108f6:	4413      	add	r3, r2
 80108f8:	b29a      	uxth	r2, r3
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 80108fe:	e004      	b.n	801090a <eMBFuncReadInputRegister+0xd6>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8010900:	2303      	movs	r3, #3
 8010902:	75fb      	strb	r3, [r7, #23]
 8010904:	e001      	b.n	801090a <eMBFuncReadInputRegister+0xd6>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8010906:	2303      	movs	r3, #3
 8010908:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 801090a:	7dfb      	ldrb	r3, [r7, #23]
}
 801090c:	4618      	mov	r0, r3
 801090e:	3718      	adds	r7, #24
 8010910:	46bd      	mov	sp, r7
 8010912:	bd80      	pop	{r7, pc}

08010914 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b082      	sub	sp, #8
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
 801091c:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	3301      	adds	r3, #1
 8010922:	4a08      	ldr	r2, [pc, #32]	@ (8010944 <eMBFuncReportSlaveID+0x30>)
 8010924:	8812      	ldrh	r2, [r2, #0]
 8010926:	4908      	ldr	r1, [pc, #32]	@ (8010948 <eMBFuncReportSlaveID+0x34>)
 8010928:	4618      	mov	r0, r3
 801092a:	f001 f96e 	bl	8011c0a <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 801092e:	4b05      	ldr	r3, [pc, #20]	@ (8010944 <eMBFuncReportSlaveID+0x30>)
 8010930:	881b      	ldrh	r3, [r3, #0]
 8010932:	3301      	adds	r3, #1
 8010934:	b29a      	uxth	r2, r3
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 801093a:	2300      	movs	r3, #0
}
 801093c:	4618      	mov	r0, r3
 801093e:	3708      	adds	r7, #8
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}
 8010944:	20008554 	.word	0x20008554
 8010948:	20008534 	.word	0x20008534

0801094c <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 801094c:	b480      	push	{r7}
 801094e:	b085      	sub	sp, #20
 8010950:	af00      	add	r7, sp, #0
 8010952:	4603      	mov	r3, r0
 8010954:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 8010956:	79fb      	ldrb	r3, [r7, #7]
 8010958:	2b07      	cmp	r3, #7
 801095a:	d00c      	beq.n	8010976 <prveMBError2Exception+0x2a>
 801095c:	2b07      	cmp	r3, #7
 801095e:	dc0d      	bgt.n	801097c <prveMBError2Exception+0x30>
 8010960:	2b00      	cmp	r3, #0
 8010962:	d002      	beq.n	801096a <prveMBError2Exception+0x1e>
 8010964:	2b01      	cmp	r3, #1
 8010966:	d003      	beq.n	8010970 <prveMBError2Exception+0x24>
 8010968:	e008      	b.n	801097c <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 801096a:	2300      	movs	r3, #0
 801096c:	73fb      	strb	r3, [r7, #15]
            break;
 801096e:	e008      	b.n	8010982 <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 8010970:	2302      	movs	r3, #2
 8010972:	73fb      	strb	r3, [r7, #15]
            break;
 8010974:	e005      	b.n	8010982 <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 8010976:	2306      	movs	r3, #6
 8010978:	73fb      	strb	r3, [r7, #15]
            break;
 801097a:	e002      	b.n	8010982 <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 801097c:	2304      	movs	r3, #4
 801097e:	73fb      	strb	r3, [r7, #15]
            break;
 8010980:	bf00      	nop
    }

    return eStatus;
 8010982:	7bfb      	ldrb	r3, [r7, #15]
}
 8010984:	4618      	mov	r0, r3
 8010986:	3714      	adds	r7, #20
 8010988:	46bd      	mov	sp, r7
 801098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098e:	4770      	bx	lr

08010990 <eMBTCPInit>:
}

#if MB_TCP_ENABLED > 0
eMBErrorCode
eMBTCPInit( USHORT ucTCPPort )
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b084      	sub	sp, #16
 8010994:	af00      	add	r7, sp, #0
 8010996:	4603      	mov	r3, r0
 8010998:	80fb      	strh	r3, [r7, #6]
    eMBErrorCode    eStatus = MB_ENOERR;
 801099a:	2300      	movs	r3, #0
 801099c:	73fb      	strb	r3, [r7, #15]

    if( ( eStatus = eMBTCPDoInit( ucTCPPort ) ) != MB_ENOERR )
 801099e:	88fb      	ldrh	r3, [r7, #6]
 80109a0:	4618      	mov	r0, r3
 80109a2:	f000 fe4f 	bl	8011644 <eMBTCPDoInit>
 80109a6:	4603      	mov	r3, r0
 80109a8:	73fb      	strb	r3, [r7, #15]
 80109aa:	7bfb      	ldrb	r3, [r7, #15]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d003      	beq.n	80109b8 <eMBTCPInit+0x28>
    {
        eMBState = STATE_DISABLED;
 80109b0:	4b14      	ldr	r3, [pc, #80]	@ (8010a04 <eMBTCPInit+0x74>)
 80109b2:	2201      	movs	r2, #1
 80109b4:	701a      	strb	r2, [r3, #0]
 80109b6:	e01f      	b.n	80109f8 <eMBTCPInit+0x68>
    }
    else if( !xMBPortEventInit(  ) )
 80109b8:	f000 fb5a 	bl	8011070 <xMBPortEventInit>
 80109bc:	4603      	mov	r3, r0
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d102      	bne.n	80109c8 <eMBTCPInit+0x38>
    {
        /* Port dependent event module initalization failed. */
        eStatus = MB_EPORTERR;
 80109c2:	2303      	movs	r3, #3
 80109c4:	73fb      	strb	r3, [r7, #15]
 80109c6:	e017      	b.n	80109f8 <eMBTCPInit+0x68>
    }
    else
    {
        pvMBFrameStartCur = eMBTCPStart;
 80109c8:	4b0f      	ldr	r3, [pc, #60]	@ (8010a08 <eMBTCPInit+0x78>)
 80109ca:	4a10      	ldr	r2, [pc, #64]	@ (8010a0c <eMBTCPInit+0x7c>)
 80109cc:	601a      	str	r2, [r3, #0]
        pvMBFrameStopCur = eMBTCPStop;
 80109ce:	4b10      	ldr	r3, [pc, #64]	@ (8010a10 <eMBTCPInit+0x80>)
 80109d0:	4a10      	ldr	r2, [pc, #64]	@ (8010a14 <eMBTCPInit+0x84>)
 80109d2:	601a      	str	r2, [r3, #0]
        peMBFrameReceiveCur = eMBTCPReceive;
 80109d4:	4b10      	ldr	r3, [pc, #64]	@ (8010a18 <eMBTCPInit+0x88>)
 80109d6:	4a11      	ldr	r2, [pc, #68]	@ (8010a1c <eMBTCPInit+0x8c>)
 80109d8:	601a      	str	r2, [r3, #0]
        peMBFrameSendCur = eMBTCPSend;
 80109da:	4b11      	ldr	r3, [pc, #68]	@ (8010a20 <eMBTCPInit+0x90>)
 80109dc:	4a11      	ldr	r2, [pc, #68]	@ (8010a24 <eMBTCPInit+0x94>)
 80109de:	601a      	str	r2, [r3, #0]
        pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBTCPPortClose : NULL;
 80109e0:	4b11      	ldr	r3, [pc, #68]	@ (8010a28 <eMBTCPInit+0x98>)
 80109e2:	2200      	movs	r2, #0
 80109e4:	601a      	str	r2, [r3, #0]
        ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
 80109e6:	4b11      	ldr	r3, [pc, #68]	@ (8010a2c <eMBTCPInit+0x9c>)
 80109e8:	22ff      	movs	r2, #255	@ 0xff
 80109ea:	701a      	strb	r2, [r3, #0]
        eMBCurrentMode = MB_TCP;
 80109ec:	4b10      	ldr	r3, [pc, #64]	@ (8010a30 <eMBTCPInit+0xa0>)
 80109ee:	2202      	movs	r2, #2
 80109f0:	701a      	strb	r2, [r3, #0]
        eMBState = STATE_DISABLED;
 80109f2:	4b04      	ldr	r3, [pc, #16]	@ (8010a04 <eMBTCPInit+0x74>)
 80109f4:	2201      	movs	r2, #1
 80109f6:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 80109f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80109fa:	4618      	mov	r0, r3
 80109fc:	3710      	adds	r7, #16
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bd80      	pop	{r7, pc}
 8010a02:	bf00      	nop
 8010a04:	2000002a 	.word	0x2000002a
 8010a08:	2000855c 	.word	0x2000855c
 8010a0c:	0801166f 	.word	0x0801166f
 8010a10:	20008560 	.word	0x20008560
 8010a14:	0801167d 	.word	0x0801167d
 8010a18:	20008564 	.word	0x20008564
 8010a1c:	08011689 	.word	0x08011689
 8010a20:	20008558 	.word	0x20008558
 8010a24:	080116f9 	.word	0x080116f9
 8010a28:	20008568 	.word	0x20008568
 8010a2c:	20008556 	.word	0x20008556
 8010a30:	20008557 	.word	0x20008557

08010a34 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b082      	sub	sp, #8
 8010a38:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 8010a3e:	4b09      	ldr	r3, [pc, #36]	@ (8010a64 <eMBEnable+0x30>)
 8010a40:	781b      	ldrb	r3, [r3, #0]
 8010a42:	2b01      	cmp	r3, #1
 8010a44:	d106      	bne.n	8010a54 <eMBEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 8010a46:	4b08      	ldr	r3, [pc, #32]	@ (8010a68 <eMBEnable+0x34>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8010a4c:	4b05      	ldr	r3, [pc, #20]	@ (8010a64 <eMBEnable+0x30>)
 8010a4e:	2200      	movs	r2, #0
 8010a50:	701a      	strb	r2, [r3, #0]
 8010a52:	e001      	b.n	8010a58 <eMBEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8010a54:	2306      	movs	r3, #6
 8010a56:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 8010a58:	79fb      	ldrb	r3, [r7, #7]
}
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	3708      	adds	r7, #8
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	bd80      	pop	{r7, pc}
 8010a62:	bf00      	nop
 8010a64:	2000002a 	.word	0x2000002a
 8010a68:	2000855c 	.word	0x2000855c

08010a6c <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 8010a6c:	b590      	push	{r4, r7, lr}
 8010a6e:	b083      	sub	sp, #12
 8010a70:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 8010a72:	2300      	movs	r3, #0
 8010a74:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8010a76:	4b50      	ldr	r3, [pc, #320]	@ (8010bb8 <eMBPoll+0x14c>)
 8010a78:	781b      	ldrb	r3, [r3, #0]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d001      	beq.n	8010a82 <eMBPoll+0x16>
    {
        return MB_EILLSTATE;
 8010a7e:	2306      	movs	r3, #6
 8010a80:	e095      	b.n	8010bae <eMBPoll+0x142>

    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 8010a82:	1cbb      	adds	r3, r7, #2
 8010a84:	4618      	mov	r0, r3
 8010a86:	f000 fb3b 	bl	8011100 <xMBPortEventGet>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	2b01      	cmp	r3, #1
 8010a8e:	f040 808d 	bne.w	8010bac <eMBPoll+0x140>
    {
        switch ( eEvent )
 8010a92:	78bb      	ldrb	r3, [r7, #2]
 8010a94:	2b03      	cmp	r3, #3
 8010a96:	f200 8089 	bhi.w	8010bac <eMBPoll+0x140>
 8010a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8010aa0 <eMBPoll+0x34>)
 8010a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010aa0:	08010bad 	.word	0x08010bad
 8010aa4:	08010ab1 	.word	0x08010ab1
 8010aa8:	08010ae3 	.word	0x08010ae3
 8010aac:	08010bad 	.word	0x08010bad
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8010ab0:	4b42      	ldr	r3, [pc, #264]	@ (8010bbc <eMBPoll+0x150>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	4a42      	ldr	r2, [pc, #264]	@ (8010bc0 <eMBPoll+0x154>)
 8010ab6:	4943      	ldr	r1, [pc, #268]	@ (8010bc4 <eMBPoll+0x158>)
 8010ab8:	4843      	ldr	r0, [pc, #268]	@ (8010bc8 <eMBPoll+0x15c>)
 8010aba:	4798      	blx	r3
 8010abc:	4603      	mov	r3, r0
 8010abe:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 8010ac0:	78fb      	ldrb	r3, [r7, #3]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d16f      	bne.n	8010ba6 <eMBPoll+0x13a>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8010ac6:	4b40      	ldr	r3, [pc, #256]	@ (8010bc8 <eMBPoll+0x15c>)
 8010ac8:	781a      	ldrb	r2, [r3, #0]
 8010aca:	4b40      	ldr	r3, [pc, #256]	@ (8010bcc <eMBPoll+0x160>)
 8010acc:	781b      	ldrb	r3, [r3, #0]
 8010ace:	429a      	cmp	r2, r3
 8010ad0:	d003      	beq.n	8010ada <eMBPoll+0x6e>
 8010ad2:	4b3d      	ldr	r3, [pc, #244]	@ (8010bc8 <eMBPoll+0x15c>)
 8010ad4:	781b      	ldrb	r3, [r3, #0]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d165      	bne.n	8010ba6 <eMBPoll+0x13a>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8010ada:	2002      	movs	r0, #2
 8010adc:	f000 fade 	bl	801109c <xMBPortEventPost>
                }
            }
            break;
 8010ae0:	e061      	b.n	8010ba6 <eMBPoll+0x13a>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8010ae2:	4b38      	ldr	r3, [pc, #224]	@ (8010bc4 <eMBPoll+0x158>)
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	781a      	ldrb	r2, [r3, #0]
 8010ae8:	4b39      	ldr	r3, [pc, #228]	@ (8010bd0 <eMBPoll+0x164>)
 8010aea:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8010aec:	4b39      	ldr	r3, [pc, #228]	@ (8010bd4 <eMBPoll+0x168>)
 8010aee:	2201      	movs	r2, #1
 8010af0:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8010af2:	2300      	movs	r3, #0
 8010af4:	607b      	str	r3, [r7, #4]
 8010af6:	e01f      	b.n	8010b38 <eMBPoll+0xcc>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8010af8:	4a37      	ldr	r2, [pc, #220]	@ (8010bd8 <eMBPoll+0x16c>)
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d01d      	beq.n	8010b40 <eMBPoll+0xd4>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8010b04:	4a34      	ldr	r2, [pc, #208]	@ (8010bd8 <eMBPoll+0x16c>)
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8010b0c:	4b30      	ldr	r3, [pc, #192]	@ (8010bd0 <eMBPoll+0x164>)
 8010b0e:	781b      	ldrb	r3, [r3, #0]
 8010b10:	429a      	cmp	r2, r3
 8010b12:	d10e      	bne.n	8010b32 <eMBPoll+0xc6>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8010b14:	4a30      	ldr	r2, [pc, #192]	@ (8010bd8 <eMBPoll+0x16c>)
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	00db      	lsls	r3, r3, #3
 8010b1a:	4413      	add	r3, r2
 8010b1c:	685b      	ldr	r3, [r3, #4]
 8010b1e:	4a29      	ldr	r2, [pc, #164]	@ (8010bc4 <eMBPoll+0x158>)
 8010b20:	6812      	ldr	r2, [r2, #0]
 8010b22:	4927      	ldr	r1, [pc, #156]	@ (8010bc0 <eMBPoll+0x154>)
 8010b24:	4610      	mov	r0, r2
 8010b26:	4798      	blx	r3
 8010b28:	4603      	mov	r3, r0
 8010b2a:	461a      	mov	r2, r3
 8010b2c:	4b29      	ldr	r3, [pc, #164]	@ (8010bd4 <eMBPoll+0x168>)
 8010b2e:	701a      	strb	r2, [r3, #0]
                    break;
 8010b30:	e007      	b.n	8010b42 <eMBPoll+0xd6>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	3301      	adds	r3, #1
 8010b36:	607b      	str	r3, [r7, #4]
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	2b0f      	cmp	r3, #15
 8010b3c:	dddc      	ble.n	8010af8 <eMBPoll+0x8c>
 8010b3e:	e000      	b.n	8010b42 <eMBPoll+0xd6>
                    break;
 8010b40:	bf00      	nop
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8010b42:	4b21      	ldr	r3, [pc, #132]	@ (8010bc8 <eMBPoll+0x15c>)
 8010b44:	781b      	ldrb	r3, [r3, #0]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d02f      	beq.n	8010baa <eMBPoll+0x13e>
            {
                if( eException != MB_EX_NONE )
 8010b4a:	4b22      	ldr	r3, [pc, #136]	@ (8010bd4 <eMBPoll+0x168>)
 8010b4c:	781b      	ldrb	r3, [r3, #0]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d01d      	beq.n	8010b8e <eMBPoll+0x122>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 8010b52:	4b1b      	ldr	r3, [pc, #108]	@ (8010bc0 <eMBPoll+0x154>)
 8010b54:	2200      	movs	r2, #0
 8010b56:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8010b58:	4b1d      	ldr	r3, [pc, #116]	@ (8010bd0 <eMBPoll+0x164>)
 8010b5a:	781a      	ldrb	r2, [r3, #0]
 8010b5c:	4b19      	ldr	r3, [pc, #100]	@ (8010bc4 <eMBPoll+0x158>)
 8010b5e:	6819      	ldr	r1, [r3, #0]
 8010b60:	4b17      	ldr	r3, [pc, #92]	@ (8010bc0 <eMBPoll+0x154>)
 8010b62:	881b      	ldrh	r3, [r3, #0]
 8010b64:	1c58      	adds	r0, r3, #1
 8010b66:	b284      	uxth	r4, r0
 8010b68:	4815      	ldr	r0, [pc, #84]	@ (8010bc0 <eMBPoll+0x154>)
 8010b6a:	8004      	strh	r4, [r0, #0]
 8010b6c:	440b      	add	r3, r1
 8010b6e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8010b72:	b2d2      	uxtb	r2, r2
 8010b74:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 8010b76:	4b13      	ldr	r3, [pc, #76]	@ (8010bc4 <eMBPoll+0x158>)
 8010b78:	681a      	ldr	r2, [r3, #0]
 8010b7a:	4b11      	ldr	r3, [pc, #68]	@ (8010bc0 <eMBPoll+0x154>)
 8010b7c:	881b      	ldrh	r3, [r3, #0]
 8010b7e:	1c59      	adds	r1, r3, #1
 8010b80:	b288      	uxth	r0, r1
 8010b82:	490f      	ldr	r1, [pc, #60]	@ (8010bc0 <eMBPoll+0x154>)
 8010b84:	8008      	strh	r0, [r1, #0]
 8010b86:	4413      	add	r3, r2
 8010b88:	4a12      	ldr	r2, [pc, #72]	@ (8010bd4 <eMBPoll+0x168>)
 8010b8a:	7812      	ldrb	r2, [r2, #0]
 8010b8c:	701a      	strb	r2, [r3, #0]
                if ( ( eMBCurrentMode == MB_RTU ) && MB_RTU_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_RTU_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }
#endif
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8010b8e:	4b13      	ldr	r3, [pc, #76]	@ (8010bdc <eMBPoll+0x170>)
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	4a0e      	ldr	r2, [pc, #56]	@ (8010bcc <eMBPoll+0x160>)
 8010b94:	7810      	ldrb	r0, [r2, #0]
 8010b96:	4a0b      	ldr	r2, [pc, #44]	@ (8010bc4 <eMBPoll+0x158>)
 8010b98:	6811      	ldr	r1, [r2, #0]
 8010b9a:	4a09      	ldr	r2, [pc, #36]	@ (8010bc0 <eMBPoll+0x154>)
 8010b9c:	8812      	ldrh	r2, [r2, #0]
 8010b9e:	4798      	blx	r3
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	70fb      	strb	r3, [r7, #3]
            }
            break;
 8010ba4:	e001      	b.n	8010baa <eMBPoll+0x13e>
            break;
 8010ba6:	bf00      	nop
 8010ba8:	e000      	b.n	8010bac <eMBPoll+0x140>
            break;
 8010baa:	bf00      	nop

        case EV_FRAME_SENT:
            break;
        }
    }
    return eStatus;
 8010bac:	78fb      	ldrb	r3, [r7, #3]
}
 8010bae:	4618      	mov	r0, r3
 8010bb0:	370c      	adds	r7, #12
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	bd90      	pop	{r4, r7, pc}
 8010bb6:	bf00      	nop
 8010bb8:	2000002a 	.word	0x2000002a
 8010bbc:	20008564 	.word	0x20008564
 8010bc0:	20008574 	.word	0x20008574
 8010bc4:	20008570 	.word	0x20008570
 8010bc8:	2000856c 	.word	0x2000856c
 8010bcc:	20008556 	.word	0x20008556
 8010bd0:	20008576 	.word	0x20008576
 8010bd4:	20008577 	.word	0x20008577
 8010bd8:	2000002c 	.word	0x2000002c
 8010bdc:	20008558 	.word	0x20008558

08010be0 <apply_led_from_coil>:
static USHORT usInputRegs[REG_INPUT_NREGS];
static UCHAR  ucDiscreteInputs[REG_DISC_NDISCRETES];

/* ---- Helpers ---- */
static void apply_led_from_coil(USHORT coilIndex, UCHAR val)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b084      	sub	sp, #16
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	4603      	mov	r3, r0
 8010be8:	460a      	mov	r2, r1
 8010bea:	80fb      	strh	r3, [r7, #6]
 8010bec:	4613      	mov	r3, r2
 8010bee:	717b      	strb	r3, [r7, #5]
    /* coilIndex is 0-based index into ucCoils (0..3) */
    GPIO_PinState state = (val ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8010bf0:	797b      	ldrb	r3, [r7, #5]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	bf14      	ite	ne
 8010bf6:	2301      	movne	r3, #1
 8010bf8:	2300      	moveq	r3, #0
 8010bfa:	b2db      	uxtb	r3, r3
 8010bfc:	73fb      	strb	r3, [r7, #15]
    switch (coilIndex) {
 8010bfe:	88fb      	ldrh	r3, [r7, #6]
 8010c00:	2b03      	cmp	r3, #3
 8010c02:	d82b      	bhi.n	8010c5c <apply_led_from_coil+0x7c>
 8010c04:	a201      	add	r2, pc, #4	@ (adr r2, 8010c0c <apply_led_from_coil+0x2c>)
 8010c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c0a:	bf00      	nop
 8010c0c:	08010c1d 	.word	0x08010c1d
 8010c10:	08010c2d 	.word	0x08010c2d
 8010c14:	08010c3d 	.word	0x08010c3d
 8010c18:	08010c4d 	.word	0x08010c4d
        case 0:
            HAL_GPIO_WritePin(LED_PORT, LED_GREEN_PIN, state);
 8010c1c:	7bfb      	ldrb	r3, [r7, #15]
 8010c1e:	461a      	mov	r2, r3
 8010c20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8010c24:	4810      	ldr	r0, [pc, #64]	@ (8010c68 <apply_led_from_coil+0x88>)
 8010c26:	f7f2 fe77 	bl	8003918 <HAL_GPIO_WritePin>
            break;
 8010c2a:	e018      	b.n	8010c5e <apply_led_from_coil+0x7e>
        case 1:
            HAL_GPIO_WritePin(LED_PORT, LED_ORANGE_PIN, state);
 8010c2c:	7bfb      	ldrb	r3, [r7, #15]
 8010c2e:	461a      	mov	r2, r3
 8010c30:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8010c34:	480c      	ldr	r0, [pc, #48]	@ (8010c68 <apply_led_from_coil+0x88>)
 8010c36:	f7f2 fe6f 	bl	8003918 <HAL_GPIO_WritePin>
            break;
 8010c3a:	e010      	b.n	8010c5e <apply_led_from_coil+0x7e>
        case 2:
            HAL_GPIO_WritePin(LED_PORT, LED_RED_PIN, state);
 8010c3c:	7bfb      	ldrb	r3, [r7, #15]
 8010c3e:	461a      	mov	r2, r3
 8010c40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8010c44:	4808      	ldr	r0, [pc, #32]	@ (8010c68 <apply_led_from_coil+0x88>)
 8010c46:	f7f2 fe67 	bl	8003918 <HAL_GPIO_WritePin>
            break;
 8010c4a:	e008      	b.n	8010c5e <apply_led_from_coil+0x7e>
        case 3:
            HAL_GPIO_WritePin(LED_PORT, LED_BLUE_PIN, state);
 8010c4c:	7bfb      	ldrb	r3, [r7, #15]
 8010c4e:	461a      	mov	r2, r3
 8010c50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8010c54:	4804      	ldr	r0, [pc, #16]	@ (8010c68 <apply_led_from_coil+0x88>)
 8010c56:	f7f2 fe5f 	bl	8003918 <HAL_GPIO_WritePin>
            break;
 8010c5a:	e000      	b.n	8010c5e <apply_led_from_coil+0x7e>
        default:
            /* nothing */
            break;
 8010c5c:	bf00      	nop
    }
}
 8010c5e:	bf00      	nop
 8010c60:	3710      	adds	r7, #16
 8010c62:	46bd      	mov	sp, r7
 8010c64:	bd80      	pop	{r7, pc}
 8010c66:	bf00      	nop
 8010c68:	40020c00 	.word	0x40020c00

08010c6c <Modbus_InitCallbacks>:

void Modbus_InitCallbacks(void)
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b082      	sub	sp, #8
 8010c70:	af00      	add	r7, sp, #0
    /* initialise storage and apply LEDs to the current coil values (0) */
    memset(usHoldingRegs, 0, sizeof(usHoldingRegs));
 8010c72:	2204      	movs	r2, #4
 8010c74:	2100      	movs	r1, #0
 8010c76:	480f      	ldr	r0, [pc, #60]	@ (8010cb4 <Modbus_InitCallbacks+0x48>)
 8010c78:	f000 ff51 	bl	8011b1e <memset>
    memset(ucCoils, 0, sizeof(ucCoils));
 8010c7c:	2204      	movs	r2, #4
 8010c7e:	2100      	movs	r1, #0
 8010c80:	480d      	ldr	r0, [pc, #52]	@ (8010cb8 <Modbus_InitCallbacks+0x4c>)
 8010c82:	f000 ff4c 	bl	8011b1e <memset>
    for (USHORT i = 0; i < REG_COIL_NCOILS; i++) {
 8010c86:	2300      	movs	r3, #0
 8010c88:	80fb      	strh	r3, [r7, #6]
 8010c8a:	e00a      	b.n	8010ca2 <Modbus_InitCallbacks+0x36>
        apply_led_from_coil(i, ucCoils[i]);
 8010c8c:	88fb      	ldrh	r3, [r7, #6]
 8010c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8010cb8 <Modbus_InitCallbacks+0x4c>)
 8010c90:	5cd2      	ldrb	r2, [r2, r3]
 8010c92:	88fb      	ldrh	r3, [r7, #6]
 8010c94:	4611      	mov	r1, r2
 8010c96:	4618      	mov	r0, r3
 8010c98:	f7ff ffa2 	bl	8010be0 <apply_led_from_coil>
    for (USHORT i = 0; i < REG_COIL_NCOILS; i++) {
 8010c9c:	88fb      	ldrh	r3, [r7, #6]
 8010c9e:	3301      	adds	r3, #1
 8010ca0:	80fb      	strh	r3, [r7, #6]
 8010ca2:	88fb      	ldrh	r3, [r7, #6]
 8010ca4:	2b03      	cmp	r3, #3
 8010ca6:	d9f1      	bls.n	8010c8c <Modbus_InitCallbacks+0x20>
    }
}
 8010ca8:	bf00      	nop
 8010caa:	bf00      	nop
 8010cac:	3708      	adds	r7, #8
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	bd80      	pop	{r7, pc}
 8010cb2:	bf00      	nop
 8010cb4:	20008578 	.word	0x20008578
 8010cb8:	2000857c 	.word	0x2000857c

08010cbc <eMBRegHoldingCB>:
 * Holding registers callback
 * usAddress is 1-based (FreeModbus calls with address +1 in many flows)
 * ------------------------------------------------------------------*/
eMBErrorCode
eMBRegHoldingCB( UCHAR *pucBuffer, USHORT usAddress, USHORT usNRegs, eMBRegisterMode eMode )
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b088      	sub	sp, #32
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	60f8      	str	r0, [r7, #12]
 8010cc4:	4608      	mov	r0, r1
 8010cc6:	4611      	mov	r1, r2
 8010cc8:	461a      	mov	r2, r3
 8010cca:	4603      	mov	r3, r0
 8010ccc:	817b      	strh	r3, [r7, #10]
 8010cce:	460b      	mov	r3, r1
 8010cd0:	813b      	strh	r3, [r7, #8]
 8010cd2:	4613      	mov	r3, r2
 8010cd4:	71fb      	strb	r3, [r7, #7]
	LED_ON(LED_GREEN_PIN);
 8010cd6:	2201      	movs	r2, #1
 8010cd8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8010cdc:	4830      	ldr	r0, [pc, #192]	@ (8010da0 <eMBRegHoldingCB+0xe4>)
 8010cde:	f7f2 fe1b 	bl	8003918 <HAL_GPIO_WritePin>
    /* range check */
    if ((usAddress < REG_HOLDING_START) ||
 8010ce2:	897b      	ldrh	r3, [r7, #10]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d004      	beq.n	8010cf2 <eMBRegHoldingCB+0x36>
        (usAddress + usNRegs - 1) > (REG_HOLDING_START + REG_HOLDING_NREGS - 1)) {
 8010ce8:	897a      	ldrh	r2, [r7, #10]
 8010cea:	893b      	ldrh	r3, [r7, #8]
 8010cec:	4413      	add	r3, r2
    if ((usAddress < REG_HOLDING_START) ||
 8010cee:	2b03      	cmp	r3, #3
 8010cf0:	dd01      	ble.n	8010cf6 <eMBRegHoldingCB+0x3a>
        return MB_ENOREG;
 8010cf2:	2301      	movs	r3, #1
 8010cf4:	e04f      	b.n	8010d96 <eMBRegHoldingCB+0xda>
    }

    USHORT iRegIndex = (USHORT)(usAddress - REG_HOLDING_START);
 8010cf6:	897b      	ldrh	r3, [r7, #10]
 8010cf8:	3b01      	subs	r3, #1
 8010cfa:	837b      	strh	r3, [r7, #26]

    if (eMode == MB_REG_READ) {
 8010cfc:	79fb      	ldrb	r3, [r7, #7]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d11f      	bne.n	8010d42 <eMBRegHoldingCB+0x86>
        /* copy register(s) to buffer (big-endian: high byte first) */
        for (USHORT i = 0; i < usNRegs; i++) {
 8010d02:	2300      	movs	r3, #0
 8010d04:	83fb      	strh	r3, [r7, #30]
 8010d06:	e017      	b.n	8010d38 <eMBRegHoldingCB+0x7c>
            USHORT val = usHoldingRegs[iRegIndex + i];
 8010d08:	8b7a      	ldrh	r2, [r7, #26]
 8010d0a:	8bfb      	ldrh	r3, [r7, #30]
 8010d0c:	4413      	add	r3, r2
 8010d0e:	4a25      	ldr	r2, [pc, #148]	@ (8010da4 <eMBRegHoldingCB+0xe8>)
 8010d10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d14:	82bb      	strh	r3, [r7, #20]
            *pucBuffer++ = (UCHAR)(val >> 8);
 8010d16:	8abb      	ldrh	r3, [r7, #20]
 8010d18:	0a1b      	lsrs	r3, r3, #8
 8010d1a:	b299      	uxth	r1, r3
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	1c5a      	adds	r2, r3, #1
 8010d20:	60fa      	str	r2, [r7, #12]
 8010d22:	b2ca      	uxtb	r2, r1
 8010d24:	701a      	strb	r2, [r3, #0]
            *pucBuffer++ = (UCHAR)(val & 0xFF);
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	1c5a      	adds	r2, r3, #1
 8010d2a:	60fa      	str	r2, [r7, #12]
 8010d2c:	8aba      	ldrh	r2, [r7, #20]
 8010d2e:	b2d2      	uxtb	r2, r2
 8010d30:	701a      	strb	r2, [r3, #0]
        for (USHORT i = 0; i < usNRegs; i++) {
 8010d32:	8bfb      	ldrh	r3, [r7, #30]
 8010d34:	3301      	adds	r3, #1
 8010d36:	83fb      	strh	r3, [r7, #30]
 8010d38:	8bfa      	ldrh	r2, [r7, #30]
 8010d3a:	893b      	ldrh	r3, [r7, #8]
 8010d3c:	429a      	cmp	r2, r3
 8010d3e:	d3e3      	bcc.n	8010d08 <eMBRegHoldingCB+0x4c>
 8010d40:	e028      	b.n	8010d94 <eMBRegHoldingCB+0xd8>
        }
    } else if (eMode == MB_REG_WRITE) {
 8010d42:	79fb      	ldrb	r3, [r7, #7]
 8010d44:	2b01      	cmp	r3, #1
 8010d46:	d123      	bne.n	8010d90 <eMBRegHoldingCB+0xd4>
        /* write register(s) from buffer */
        for (USHORT i = 0; i < usNRegs; i++) {
 8010d48:	2300      	movs	r3, #0
 8010d4a:	83bb      	strh	r3, [r7, #28]
 8010d4c:	e01b      	b.n	8010d86 <eMBRegHoldingCB+0xca>
            USHORT hi = (USHORT)(*pucBuffer++);
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	1c5a      	adds	r2, r3, #1
 8010d52:	60fa      	str	r2, [r7, #12]
 8010d54:	781b      	ldrb	r3, [r3, #0]
 8010d56:	833b      	strh	r3, [r7, #24]
            USHORT lo = (USHORT)(*pucBuffer++);
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	1c5a      	adds	r2, r3, #1
 8010d5c:	60fa      	str	r2, [r7, #12]
 8010d5e:	781b      	ldrb	r3, [r3, #0]
 8010d60:	82fb      	strh	r3, [r7, #22]
            usHoldingRegs[iRegIndex + i] = (USHORT)((hi << 8) | lo);
 8010d62:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8010d66:	021b      	lsls	r3, r3, #8
 8010d68:	b21a      	sxth	r2, r3
 8010d6a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010d6e:	4313      	orrs	r3, r2
 8010d70:	b219      	sxth	r1, r3
 8010d72:	8b7a      	ldrh	r2, [r7, #26]
 8010d74:	8bbb      	ldrh	r3, [r7, #28]
 8010d76:	4413      	add	r3, r2
 8010d78:	b289      	uxth	r1, r1
 8010d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8010da4 <eMBRegHoldingCB+0xe8>)
 8010d7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (USHORT i = 0; i < usNRegs; i++) {
 8010d80:	8bbb      	ldrh	r3, [r7, #28]
 8010d82:	3301      	adds	r3, #1
 8010d84:	83bb      	strh	r3, [r7, #28]
 8010d86:	8bba      	ldrh	r2, [r7, #28]
 8010d88:	893b      	ldrh	r3, [r7, #8]
 8010d8a:	429a      	cmp	r2, r3
 8010d8c:	d3df      	bcc.n	8010d4e <eMBRegHoldingCB+0x92>
 8010d8e:	e001      	b.n	8010d94 <eMBRegHoldingCB+0xd8>
        }
    } else {
        return MB_ENOREG;
 8010d90:	2301      	movs	r3, #1
 8010d92:	e000      	b.n	8010d96 <eMBRegHoldingCB+0xda>
    }

    return MB_ENOERR;
 8010d94:	2300      	movs	r3, #0
}
 8010d96:	4618      	mov	r0, r3
 8010d98:	3720      	adds	r7, #32
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd80      	pop	{r7, pc}
 8010d9e:	bf00      	nop
 8010da0:	40020c00 	.word	0x40020c00
 8010da4:	20008578 	.word	0x20008578

08010da8 <eMBRegCoilsCB>:
 * usAddress is 1-based
 * Note: Modbus coils are bit-packed in pucBuffer LSB-first.
 * ------------------------------------------------------------------*/
eMBErrorCode
eMBRegCoilsCB( UCHAR *pucBuffer, USHORT usAddress, USHORT usNCoils, eMBRegisterMode eMode )
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b08c      	sub	sp, #48	@ 0x30
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	60f8      	str	r0, [r7, #12]
 8010db0:	4608      	mov	r0, r1
 8010db2:	4611      	mov	r1, r2
 8010db4:	461a      	mov	r2, r3
 8010db6:	4603      	mov	r3, r0
 8010db8:	817b      	strh	r3, [r7, #10]
 8010dba:	460b      	mov	r3, r1
 8010dbc:	813b      	strh	r3, [r7, #8]
 8010dbe:	4613      	mov	r3, r2
 8010dc0:	71fb      	strb	r3, [r7, #7]
    if ((usAddress < REG_COIL_START) ||
 8010dc2:	897b      	ldrh	r3, [r7, #10]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d004      	beq.n	8010dd2 <eMBRegCoilsCB+0x2a>
        (usAddress + usNCoils - 1) > (REG_COIL_START + REG_COIL_NCOILS - 1)) {
 8010dc8:	897a      	ldrh	r2, [r7, #10]
 8010dca:	893b      	ldrh	r3, [r7, #8]
 8010dcc:	4413      	add	r3, r2
    if ((usAddress < REG_COIL_START) ||
 8010dce:	2b05      	cmp	r3, #5
 8010dd0:	dd01      	ble.n	8010dd6 <eMBRegCoilsCB+0x2e>
        return MB_ENOREG;
 8010dd2:	2301      	movs	r3, #1
 8010dd4:	e097      	b.n	8010f06 <eMBRegCoilsCB+0x15e>
    }

    USHORT iCoilIndex = (USHORT)(usAddress - REG_COIL_START);
 8010dd6:	897b      	ldrh	r3, [r7, #10]
 8010dd8:	3b01      	subs	r3, #1
 8010dda:	83fb      	strh	r3, [r7, #30]

    if (eMode == MB_REG_READ) {
 8010ddc:	79fb      	ldrb	r3, [r7, #7]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d145      	bne.n	8010e6e <eMBRegCoilsCB+0xc6>
        /* pack coils into pucBuffer, LSB-first per byte */
        UCHAR currentByte = 0;
 8010de2:	2300      	movs	r3, #0
 8010de4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        UCHAR bitPos = 0;
 8010de8:	2300      	movs	r3, #0
 8010dea:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        UCHAR *pOut = pucBuffer;
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	62bb      	str	r3, [r7, #40]	@ 0x28

        for (USHORT i = 0; i < usNCoils; i++) {
 8010df2:	2300      	movs	r3, #0
 8010df4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010df6:	e02b      	b.n	8010e50 <eMBRegCoilsCB+0xa8>
            UCHAR val = (ucCoils[iCoilIndex + i] & 0x01) ? 1 : 0;
 8010df8:	8bfa      	ldrh	r2, [r7, #30]
 8010dfa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010dfc:	4413      	add	r3, r2
 8010dfe:	4a44      	ldr	r2, [pc, #272]	@ (8010f10 <eMBRegCoilsCB+0x168>)
 8010e00:	5cd3      	ldrb	r3, [r2, r3]
 8010e02:	f003 0301 	and.w	r3, r3, #1
 8010e06:	757b      	strb	r3, [r7, #21]
            currentByte |= (val << bitPos);
 8010e08:	7d7a      	ldrb	r2, [r7, #21]
 8010e0a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8010e12:	b25a      	sxtb	r2, r3
 8010e14:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8010e18:	4313      	orrs	r3, r2
 8010e1a:	b25b      	sxtb	r3, r3
 8010e1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            bitPos++;
 8010e20:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010e24:	3301      	adds	r3, #1
 8010e26:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            if (bitPos == 8) {
 8010e2a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010e2e:	2b08      	cmp	r3, #8
 8010e30:	d10b      	bne.n	8010e4a <eMBRegCoilsCB+0xa2>
                *pOut++ = currentByte;
 8010e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e34:	1c5a      	adds	r2, r3, #1
 8010e36:	62ba      	str	r2, [r7, #40]	@ 0x28
 8010e38:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8010e3c:	701a      	strb	r2, [r3, #0]
                currentByte = 0;
 8010e3e:	2300      	movs	r3, #0
 8010e40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                bitPos = 0;
 8010e44:	2300      	movs	r3, #0
 8010e46:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        for (USHORT i = 0; i < usNCoils; i++) {
 8010e4a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010e4c:	3301      	adds	r3, #1
 8010e4e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010e50:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010e52:	893b      	ldrh	r3, [r7, #8]
 8010e54:	429a      	cmp	r2, r3
 8010e56:	d3cf      	bcc.n	8010df8 <eMBRegCoilsCB+0x50>
            }
        }
        /* any remaining partial byte */
        if (bitPos != 0) {
 8010e58:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d051      	beq.n	8010f04 <eMBRegCoilsCB+0x15c>
            *pOut++ = currentByte;
 8010e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e62:	1c5a      	adds	r2, r3, #1
 8010e64:	62ba      	str	r2, [r7, #40]	@ 0x28
 8010e66:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8010e6a:	701a      	strb	r2, [r3, #0]
 8010e6c:	e04a      	b.n	8010f04 <eMBRegCoilsCB+0x15c>
        }
    } else if (eMode == MB_REG_WRITE) {
 8010e6e:	79fb      	ldrb	r3, [r7, #7]
 8010e70:	2b01      	cmp	r3, #1
 8010e72:	d145      	bne.n	8010f00 <eMBRegCoilsCB+0x158>
        /* unpack pucBuffer and write to coil storage and LEDs */
        UCHAR *pIn = pucBuffer;
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	61bb      	str	r3, [r7, #24]
        USHORT byteIndex = 0;
 8010e78:	2300      	movs	r3, #0
 8010e7a:	84bb      	strh	r3, [r7, #36]	@ 0x24
        UCHAR bitIndex = 0;
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        for (USHORT i = 0; i < usNCoils; i++) {
 8010e82:	2300      	movs	r3, #0
 8010e84:	843b      	strh	r3, [r7, #32]
 8010e86:	e036      	b.n	8010ef6 <eMBRegCoilsCB+0x14e>
            /* ensure we read correct byte */
            UCHAR byte = pIn[byteIndex];
 8010e88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e8a:	69ba      	ldr	r2, [r7, #24]
 8010e8c:	4413      	add	r3, r2
 8010e8e:	781b      	ldrb	r3, [r3, #0]
 8010e90:	75fb      	strb	r3, [r7, #23]
            UCHAR bit = (byte >> bitIndex) & 0x01;
 8010e92:	7dfa      	ldrb	r2, [r7, #23]
 8010e94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010e98:	fa42 f303 	asr.w	r3, r2, r3
 8010e9c:	b2db      	uxtb	r3, r3
 8010e9e:	f003 0301 	and.w	r3, r3, #1
 8010ea2:	75bb      	strb	r3, [r7, #22]
            ucCoils[iCoilIndex + i] = bit ? 1 : 0;
 8010ea4:	7dbb      	ldrb	r3, [r7, #22]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	bf14      	ite	ne
 8010eaa:	2301      	movne	r3, #1
 8010eac:	2300      	moveq	r3, #0
 8010eae:	b2d9      	uxtb	r1, r3
 8010eb0:	8bfa      	ldrh	r2, [r7, #30]
 8010eb2:	8c3b      	ldrh	r3, [r7, #32]
 8010eb4:	4413      	add	r3, r2
 8010eb6:	4a16      	ldr	r2, [pc, #88]	@ (8010f10 <eMBRegCoilsCB+0x168>)
 8010eb8:	54d1      	strb	r1, [r2, r3]
            apply_led_from_coil(iCoilIndex + i, ucCoils[iCoilIndex + i]);
 8010eba:	8bfa      	ldrh	r2, [r7, #30]
 8010ebc:	8c3b      	ldrh	r3, [r7, #32]
 8010ebe:	4413      	add	r3, r2
 8010ec0:	b298      	uxth	r0, r3
 8010ec2:	8bfa      	ldrh	r2, [r7, #30]
 8010ec4:	8c3b      	ldrh	r3, [r7, #32]
 8010ec6:	4413      	add	r3, r2
 8010ec8:	4a11      	ldr	r2, [pc, #68]	@ (8010f10 <eMBRegCoilsCB+0x168>)
 8010eca:	5cd3      	ldrb	r3, [r2, r3]
 8010ecc:	4619      	mov	r1, r3
 8010ece:	f7ff fe87 	bl	8010be0 <apply_led_from_coil>

            bitIndex++;
 8010ed2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010ed6:	3301      	adds	r3, #1
 8010ed8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            if (bitIndex == 8) {
 8010edc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010ee0:	2b08      	cmp	r3, #8
 8010ee2:	d105      	bne.n	8010ef0 <eMBRegCoilsCB+0x148>
                bitIndex = 0;
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                byteIndex++;
 8010eea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010eec:	3301      	adds	r3, #1
 8010eee:	84bb      	strh	r3, [r7, #36]	@ 0x24
        for (USHORT i = 0; i < usNCoils; i++) {
 8010ef0:	8c3b      	ldrh	r3, [r7, #32]
 8010ef2:	3301      	adds	r3, #1
 8010ef4:	843b      	strh	r3, [r7, #32]
 8010ef6:	8c3a      	ldrh	r2, [r7, #32]
 8010ef8:	893b      	ldrh	r3, [r7, #8]
 8010efa:	429a      	cmp	r2, r3
 8010efc:	d3c4      	bcc.n	8010e88 <eMBRegCoilsCB+0xe0>
 8010efe:	e001      	b.n	8010f04 <eMBRegCoilsCB+0x15c>
            }
        }
    } else {
        return MB_ENOREG;
 8010f00:	2301      	movs	r3, #1
 8010f02:	e000      	b.n	8010f06 <eMBRegCoilsCB+0x15e>
    }

    return MB_ENOERR;
 8010f04:	2300      	movs	r3, #0
}
 8010f06:	4618      	mov	r0, r3
 8010f08:	3730      	adds	r7, #48	@ 0x30
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}
 8010f0e:	bf00      	nop
 8010f10:	2000857c 	.word	0x2000857c

08010f14 <eMBRegInputCB>:
 * Input registers callback
 * usAddress is 1-based
 * ------------------------------------------------------------------*/
eMBErrorCode
eMBRegInputCB( UCHAR *pucBuffer, USHORT usAddress, USHORT usNRegs )
{
 8010f14:	b480      	push	{r7}
 8010f16:	b085      	sub	sp, #20
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
 8010f1c:	460b      	mov	r3, r1
 8010f1e:	807b      	strh	r3, [r7, #2]
 8010f20:	4613      	mov	r3, r2
 8010f22:	803b      	strh	r3, [r7, #0]
    if ((usAddress < REG_INPUT_START) ||
 8010f24:	887b      	ldrh	r3, [r7, #2]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d004      	beq.n	8010f34 <eMBRegInputCB+0x20>
        (usAddress + usNRegs - 1) > (REG_INPUT_START + REG_INPUT_NREGS - 1)) {
 8010f2a:	887a      	ldrh	r2, [r7, #2]
 8010f2c:	883b      	ldrh	r3, [r7, #0]
 8010f2e:	4413      	add	r3, r2
    if ((usAddress < REG_INPUT_START) ||
 8010f30:	2b03      	cmp	r3, #3
 8010f32:	dd01      	ble.n	8010f38 <eMBRegInputCB+0x24>
        return MB_ENOREG;
 8010f34:	2301      	movs	r3, #1
 8010f36:	e022      	b.n	8010f7e <eMBRegInputCB+0x6a>
    }

    USHORT iRegIndex = (USHORT)(usAddress - REG_INPUT_START);
 8010f38:	887b      	ldrh	r3, [r7, #2]
 8010f3a:	3b01      	subs	r3, #1
 8010f3c:	81bb      	strh	r3, [r7, #12]

    /* copy register(s) to buffer (big-endian) */
    for (USHORT i = 0; i < usNRegs; i++) {
 8010f3e:	2300      	movs	r3, #0
 8010f40:	81fb      	strh	r3, [r7, #14]
 8010f42:	e017      	b.n	8010f74 <eMBRegInputCB+0x60>
        USHORT val = usInputRegs[iRegIndex + i];
 8010f44:	89ba      	ldrh	r2, [r7, #12]
 8010f46:	89fb      	ldrh	r3, [r7, #14]
 8010f48:	4413      	add	r3, r2
 8010f4a:	4a10      	ldr	r2, [pc, #64]	@ (8010f8c <eMBRegInputCB+0x78>)
 8010f4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f50:	817b      	strh	r3, [r7, #10]
        *pucBuffer++ = (UCHAR)(val >> 8);
 8010f52:	897b      	ldrh	r3, [r7, #10]
 8010f54:	0a1b      	lsrs	r3, r3, #8
 8010f56:	b299      	uxth	r1, r3
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	1c5a      	adds	r2, r3, #1
 8010f5c:	607a      	str	r2, [r7, #4]
 8010f5e:	b2ca      	uxtb	r2, r1
 8010f60:	701a      	strb	r2, [r3, #0]
        *pucBuffer++ = (UCHAR)(val & 0xFF);
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	1c5a      	adds	r2, r3, #1
 8010f66:	607a      	str	r2, [r7, #4]
 8010f68:	897a      	ldrh	r2, [r7, #10]
 8010f6a:	b2d2      	uxtb	r2, r2
 8010f6c:	701a      	strb	r2, [r3, #0]
    for (USHORT i = 0; i < usNRegs; i++) {
 8010f6e:	89fb      	ldrh	r3, [r7, #14]
 8010f70:	3301      	adds	r3, #1
 8010f72:	81fb      	strh	r3, [r7, #14]
 8010f74:	89fa      	ldrh	r2, [r7, #14]
 8010f76:	883b      	ldrh	r3, [r7, #0]
 8010f78:	429a      	cmp	r2, r3
 8010f7a:	d3e3      	bcc.n	8010f44 <eMBRegInputCB+0x30>
    }

    return MB_ENOERR;
 8010f7c:	2300      	movs	r3, #0
}
 8010f7e:	4618      	mov	r0, r3
 8010f80:	3714      	adds	r7, #20
 8010f82:	46bd      	mov	sp, r7
 8010f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f88:	4770      	bx	lr
 8010f8a:	bf00      	nop
 8010f8c:	20008580 	.word	0x20008580

08010f90 <eMBRegDiscreteCB>:
 * usAddress is 1-based
 * Note: packed into pucBuffer LSB-first per byte
 * ------------------------------------------------------------------*/
eMBErrorCode
eMBRegDiscreteCB( UCHAR *pucBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 8010f90:	b480      	push	{r7}
 8010f92:	b087      	sub	sp, #28
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
 8010f98:	460b      	mov	r3, r1
 8010f9a:	807b      	strh	r3, [r7, #2]
 8010f9c:	4613      	mov	r3, r2
 8010f9e:	803b      	strh	r3, [r7, #0]
    if ((usAddress < REG_DISC_START) ||
 8010fa0:	887b      	ldrh	r3, [r7, #2]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d004      	beq.n	8010fb0 <eMBRegDiscreteCB+0x20>
        (usAddress + usNDiscrete - 1) > (REG_DISC_START + REG_DISC_NDISCRETES - 1)) {
 8010fa6:	887a      	ldrh	r2, [r7, #2]
 8010fa8:	883b      	ldrh	r3, [r7, #0]
 8010faa:	4413      	add	r3, r2
    if ((usAddress < REG_DISC_START) ||
 8010fac:	2b05      	cmp	r3, #5
 8010fae:	dd01      	ble.n	8010fb4 <eMBRegDiscreteCB+0x24>
        return MB_ENOREG;
 8010fb0:	2301      	movs	r3, #1
 8010fb2:	e03c      	b.n	801102e <eMBRegDiscreteCB+0x9e>
    }

    USHORT iDiscIndex = (USHORT)(usAddress - REG_DISC_START);
 8010fb4:	887b      	ldrh	r3, [r7, #2]
 8010fb6:	3b01      	subs	r3, #1
 8010fb8:	81bb      	strh	r3, [r7, #12]

    UCHAR currentByte = 0;
 8010fba:	2300      	movs	r3, #0
 8010fbc:	75fb      	strb	r3, [r7, #23]
    UCHAR bitPos = 0;
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	75bb      	strb	r3, [r7, #22]
    UCHAR *pOut = pucBuffer;
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	613b      	str	r3, [r7, #16]

    for (USHORT i = 0; i < usNDiscrete; i++) {
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	81fb      	strh	r3, [r7, #14]
 8010fca:	e023      	b.n	8011014 <eMBRegDiscreteCB+0x84>
        UCHAR val = (ucDiscreteInputs[iDiscIndex + i] & 0x01) ? 1 : 0;
 8010fcc:	89ba      	ldrh	r2, [r7, #12]
 8010fce:	89fb      	ldrh	r3, [r7, #14]
 8010fd0:	4413      	add	r3, r2
 8010fd2:	4a1a      	ldr	r2, [pc, #104]	@ (801103c <eMBRegDiscreteCB+0xac>)
 8010fd4:	5cd3      	ldrb	r3, [r2, r3]
 8010fd6:	f003 0301 	and.w	r3, r3, #1
 8010fda:	72fb      	strb	r3, [r7, #11]
        currentByte |= (val << bitPos);
 8010fdc:	7afa      	ldrb	r2, [r7, #11]
 8010fde:	7dbb      	ldrb	r3, [r7, #22]
 8010fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8010fe4:	b25a      	sxtb	r2, r3
 8010fe6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010fea:	4313      	orrs	r3, r2
 8010fec:	b25b      	sxtb	r3, r3
 8010fee:	75fb      	strb	r3, [r7, #23]
        bitPos++;
 8010ff0:	7dbb      	ldrb	r3, [r7, #22]
 8010ff2:	3301      	adds	r3, #1
 8010ff4:	75bb      	strb	r3, [r7, #22]
        if (bitPos == 8) {
 8010ff6:	7dbb      	ldrb	r3, [r7, #22]
 8010ff8:	2b08      	cmp	r3, #8
 8010ffa:	d108      	bne.n	801100e <eMBRegDiscreteCB+0x7e>
            *pOut++ = currentByte;
 8010ffc:	693b      	ldr	r3, [r7, #16]
 8010ffe:	1c5a      	adds	r2, r3, #1
 8011000:	613a      	str	r2, [r7, #16]
 8011002:	7dfa      	ldrb	r2, [r7, #23]
 8011004:	701a      	strb	r2, [r3, #0]
            currentByte = 0;
 8011006:	2300      	movs	r3, #0
 8011008:	75fb      	strb	r3, [r7, #23]
            bitPos = 0;
 801100a:	2300      	movs	r3, #0
 801100c:	75bb      	strb	r3, [r7, #22]
    for (USHORT i = 0; i < usNDiscrete; i++) {
 801100e:	89fb      	ldrh	r3, [r7, #14]
 8011010:	3301      	adds	r3, #1
 8011012:	81fb      	strh	r3, [r7, #14]
 8011014:	89fa      	ldrh	r2, [r7, #14]
 8011016:	883b      	ldrh	r3, [r7, #0]
 8011018:	429a      	cmp	r2, r3
 801101a:	d3d7      	bcc.n	8010fcc <eMBRegDiscreteCB+0x3c>
        }
    }

    /* flush last partial byte */
    if (bitPos != 0) {
 801101c:	7dbb      	ldrb	r3, [r7, #22]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d004      	beq.n	801102c <eMBRegDiscreteCB+0x9c>
        *pOut++ = currentByte;
 8011022:	693b      	ldr	r3, [r7, #16]
 8011024:	1c5a      	adds	r2, r3, #1
 8011026:	613a      	str	r2, [r7, #16]
 8011028:	7dfa      	ldrb	r2, [r7, #23]
 801102a:	701a      	strb	r2, [r3, #0]
    }

    return MB_ENOERR;
 801102c:	2300      	movs	r3, #0
}
 801102e:	4618      	mov	r0, r3
 8011030:	371c      	adds	r7, #28
 8011032:	46bd      	mov	sp, r7
 8011034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011038:	4770      	bx	lr
 801103a:	bf00      	nop
 801103c:	20008584 	.word	0x20008584

08011040 <Modbus_SetHolding>:
    }
    return 0; /* out-of-range safe default */
}

void Modbus_SetHolding(USHORT index, USHORT value)
{
 8011040:	b480      	push	{r7}
 8011042:	b083      	sub	sp, #12
 8011044:	af00      	add	r7, sp, #0
 8011046:	4603      	mov	r3, r0
 8011048:	460a      	mov	r2, r1
 801104a:	80fb      	strh	r3, [r7, #6]
 801104c:	4613      	mov	r3, r2
 801104e:	80bb      	strh	r3, [r7, #4]
    if (index < REG_HOLDING_NREGS) {
 8011050:	88fb      	ldrh	r3, [r7, #6]
 8011052:	2b01      	cmp	r3, #1
 8011054:	d804      	bhi.n	8011060 <Modbus_SetHolding+0x20>
        usHoldingRegs[index] = value;
 8011056:	88fb      	ldrh	r3, [r7, #6]
 8011058:	4904      	ldr	r1, [pc, #16]	@ (801106c <Modbus_SetHolding+0x2c>)
 801105a:	88ba      	ldrh	r2, [r7, #4]
 801105c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }
}
 8011060:	bf00      	nop
 8011062:	370c      	adds	r7, #12
 8011064:	46bd      	mov	sp, r7
 8011066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106a:	4770      	bx	lr
 801106c:	20008578 	.word	0x20008578

08011070 <xMBPortEventInit>:
static volatile BOOL         s_event_pending = FALSE;
static volatile eMBEventType s_event_queued  = EV_READY;

/* ----------------------- TCP functions ---------------------- */
BOOL xMBPortEventInit(void)
{
 8011070:	b480      	push	{r7}
 8011072:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8011074:	b672      	cpsid	i
}
 8011076:	bf00      	nop
    __disable_irq();
    s_event_pending = FALSE;
 8011078:	4b06      	ldr	r3, [pc, #24]	@ (8011094 <xMBPortEventInit+0x24>)
 801107a:	2200      	movs	r2, #0
 801107c:	701a      	strb	r2, [r3, #0]
    s_event_queued  = EV_READY;
 801107e:	4b06      	ldr	r3, [pc, #24]	@ (8011098 <xMBPortEventInit+0x28>)
 8011080:	2200      	movs	r2, #0
 8011082:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8011084:	b662      	cpsie	i
}
 8011086:	bf00      	nop
    __enable_irq();
    return TRUE;
 8011088:	2301      	movs	r3, #1
}
 801108a:	4618      	mov	r0, r3
 801108c:	46bd      	mov	sp, r7
 801108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011092:	4770      	bx	lr
 8011094:	20008594 	.word	0x20008594
 8011098:	20008595 	.word	0x20008595

0801109c <xMBPortEventPost>:

BOOL xMBPortEventPost(eMBEventType eEvent)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b086      	sub	sp, #24
 80110a0:	af02      	add	r7, sp, #8
 80110a2:	4603      	mov	r3, r0
 80110a4:	71fb      	strb	r3, [r7, #7]
    DEBUG_PRINTF("%s -> post event=%d\r\n", __func__, eEvent);
 80110a6:	79fb      	ldrb	r3, [r7, #7]
 80110a8:	9300      	str	r3, [sp, #0]
 80110aa:	4b0f      	ldr	r3, [pc, #60]	@ (80110e8 <xMBPortEventPost+0x4c>)
 80110ac:	4a0f      	ldr	r2, [pc, #60]	@ (80110ec <xMBPortEventPost+0x50>)
 80110ae:	2140      	movs	r1, #64	@ 0x40
 80110b0:	480f      	ldr	r0, [pc, #60]	@ (80110f0 <xMBPortEventPost+0x54>)
 80110b2:	f000 fc91 	bl	80119d8 <sniprintf>
 80110b6:	60f8      	str	r0, [r7, #12]
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	b29a      	uxth	r2, r3
 80110bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80110c0:	490b      	ldr	r1, [pc, #44]	@ (80110f0 <xMBPortEventPost+0x54>)
 80110c2:	480c      	ldr	r0, [pc, #48]	@ (80110f4 <xMBPortEventPost+0x58>)
 80110c4:	f7f3 fc4a 	bl	800495c <HAL_UART_Transmit>
  __ASM volatile ("cpsid i" : : : "memory");
 80110c8:	b672      	cpsid	i
}
 80110ca:	bf00      	nop
    __disable_irq();
    s_event_queued  = eEvent;
 80110cc:	4a0a      	ldr	r2, [pc, #40]	@ (80110f8 <xMBPortEventPost+0x5c>)
 80110ce:	79fb      	ldrb	r3, [r7, #7]
 80110d0:	7013      	strb	r3, [r2, #0]
    s_event_pending = TRUE;
 80110d2:	4b0a      	ldr	r3, [pc, #40]	@ (80110fc <xMBPortEventPost+0x60>)
 80110d4:	2201      	movs	r2, #1
 80110d6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80110d8:	b662      	cpsie	i
}
 80110da:	bf00      	nop
    __enable_irq();

    return TRUE;
 80110dc:	2301      	movs	r3, #1
}
 80110de:	4618      	mov	r0, r3
 80110e0:	3710      	adds	r7, #16
 80110e2:	46bd      	mov	sp, r7
 80110e4:	bd80      	pop	{r7, pc}
 80110e6:	bf00      	nop
 80110e8:	08015840 	.word	0x08015840
 80110ec:	080155e4 	.word	0x080155e4
 80110f0:	200001fc 	.word	0x200001fc
 80110f4:	200001b4 	.word	0x200001b4
 80110f8:	20008595 	.word	0x20008595
 80110fc:	20008594 	.word	0x20008594

08011100 <xMBPortEventGet>:

BOOL xMBPortEventGet(eMBEventType *eEvent)
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b084      	sub	sp, #16
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
    if (!eEvent) return FALSE;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d101      	bne.n	8011112 <xMBPortEventGet+0x12>
 801110e:	2300      	movs	r3, #0
 8011110:	e025      	b.n	801115e <xMBPortEventGet+0x5e>
  __ASM volatile ("cpsid i" : : : "memory");
 8011112:	b672      	cpsid	i
}
 8011114:	bf00      	nop

    __disable_irq();
    if (s_event_pending) {
 8011116:	4b14      	ldr	r3, [pc, #80]	@ (8011168 <xMBPortEventGet+0x68>)
 8011118:	781b      	ldrb	r3, [r3, #0]
 801111a:	b2db      	uxtb	r3, r3
 801111c:	2b00      	cmp	r3, #0
 801111e:	d01b      	beq.n	8011158 <xMBPortEventGet+0x58>
        *eEvent        = s_event_queued;
 8011120:	4b12      	ldr	r3, [pc, #72]	@ (801116c <xMBPortEventGet+0x6c>)
 8011122:	781b      	ldrb	r3, [r3, #0]
 8011124:	b2da      	uxtb	r2, r3
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	701a      	strb	r2, [r3, #0]
        s_event_pending = FALSE;
 801112a:	4b0f      	ldr	r3, [pc, #60]	@ (8011168 <xMBPortEventGet+0x68>)
 801112c:	2200      	movs	r2, #0
 801112e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8011130:	b662      	cpsie	i
}
 8011132:	bf00      	nop
        __enable_irq();

        DEBUG_PRINTF(" -> got event=%d\r\n", *eEvent);
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	781b      	ldrb	r3, [r3, #0]
 8011138:	4a0d      	ldr	r2, [pc, #52]	@ (8011170 <xMBPortEventGet+0x70>)
 801113a:	2140      	movs	r1, #64	@ 0x40
 801113c:	480d      	ldr	r0, [pc, #52]	@ (8011174 <xMBPortEventGet+0x74>)
 801113e:	f000 fc4b 	bl	80119d8 <sniprintf>
 8011142:	60f8      	str	r0, [r7, #12]
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	b29a      	uxth	r2, r3
 8011148:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801114c:	4909      	ldr	r1, [pc, #36]	@ (8011174 <xMBPortEventGet+0x74>)
 801114e:	480a      	ldr	r0, [pc, #40]	@ (8011178 <xMBPortEventGet+0x78>)
 8011150:	f7f3 fc04 	bl	800495c <HAL_UART_Transmit>
        return TRUE;
 8011154:	2301      	movs	r3, #1
 8011156:	e002      	b.n	801115e <xMBPortEventGet+0x5e>
  __ASM volatile ("cpsie i" : : : "memory");
 8011158:	b662      	cpsie	i
}
 801115a:	bf00      	nop
    }
    __enable_irq();
    return FALSE;
 801115c:	2300      	movs	r3, #0
}
 801115e:	4618      	mov	r0, r3
 8011160:	3710      	adds	r7, #16
 8011162:	46bd      	mov	sp, r7
 8011164:	bd80      	pop	{r7, pc}
 8011166:	bf00      	nop
 8011168:	20008594 	.word	0x20008594
 801116c:	20008595 	.word	0x20008595
 8011170:	080155fc 	.word	0x080155fc
 8011174:	200001fc 	.word	0x200001fc
 8011178:	200001b4 	.word	0x200001b4

0801117c <xMBTCPPortInit>:

/* ----------------------- TCP functions ---------------------- */
BOOL xMBTCPPortInit(USHORT usTCPPort)
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b084      	sub	sp, #16
 8011180:	af00      	add	r7, sp, #0
 8011182:	4603      	mov	r3, r0
 8011184:	80fb      	strh	r3, [r7, #6]
    DEBUG_PRINTF("%s\r\n", __func__);
 8011186:	4b24      	ldr	r3, [pc, #144]	@ (8011218 <xMBTCPPortInit+0x9c>)
 8011188:	4a24      	ldr	r2, [pc, #144]	@ (801121c <xMBTCPPortInit+0xa0>)
 801118a:	2140      	movs	r1, #64	@ 0x40
 801118c:	4824      	ldr	r0, [pc, #144]	@ (8011220 <xMBTCPPortInit+0xa4>)
 801118e:	f000 fc23 	bl	80119d8 <sniprintf>
 8011192:	60f8      	str	r0, [r7, #12]
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	b29a      	uxth	r2, r3
 8011198:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801119c:	4920      	ldr	r1, [pc, #128]	@ (8011220 <xMBTCPPortInit+0xa4>)
 801119e:	4821      	ldr	r0, [pc, #132]	@ (8011224 <xMBTCPPortInit+0xa8>)
 80111a0:	f7f3 fbdc 	bl	800495c <HAL_UART_Transmit>
    mb_listener = tcp_new();
 80111a4:	f7f7 fe0c 	bl	8008dc0 <tcp_new>
 80111a8:	4603      	mov	r3, r0
 80111aa:	4a1f      	ldr	r2, [pc, #124]	@ (8011228 <xMBTCPPortInit+0xac>)
 80111ac:	6013      	str	r3, [r2, #0]
    if (!mb_listener) return FALSE;
 80111ae:	4b1e      	ldr	r3, [pc, #120]	@ (8011228 <xMBTCPPortInit+0xac>)
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d101      	bne.n	80111ba <xMBTCPPortInit+0x3e>
 80111b6:	2300      	movs	r3, #0
 80111b8:	e02a      	b.n	8011210 <xMBTCPPortInit+0x94>

    if (tcp_bind(mb_listener, IP_ADDR_ANY, usTCPPort) != ERR_OK)
 80111ba:	4b1b      	ldr	r3, [pc, #108]	@ (8011228 <xMBTCPPortInit+0xac>)
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	88fa      	ldrh	r2, [r7, #6]
 80111c0:	491a      	ldr	r1, [pc, #104]	@ (801122c <xMBTCPPortInit+0xb0>)
 80111c2:	4618      	mov	r0, r3
 80111c4:	f7f6 fd74 	bl	8007cb0 <tcp_bind>
 80111c8:	4603      	mov	r3, r0
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d001      	beq.n	80111d2 <xMBTCPPortInit+0x56>
        return FALSE;
 80111ce:	2300      	movs	r3, #0
 80111d0:	e01e      	b.n	8011210 <xMBTCPPortInit+0x94>

    mb_listener = tcp_listen(mb_listener);
 80111d2:	4b15      	ldr	r3, [pc, #84]	@ (8011228 <xMBTCPPortInit+0xac>)
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	21ff      	movs	r1, #255	@ 0xff
 80111d8:	4618      	mov	r0, r3
 80111da:	f7f6 fe21 	bl	8007e20 <tcp_listen_with_backlog>
 80111de:	4603      	mov	r3, r0
 80111e0:	4a11      	ldr	r2, [pc, #68]	@ (8011228 <xMBTCPPortInit+0xac>)
 80111e2:	6013      	str	r3, [r2, #0]
    tcp_accept(mb_listener, mb_accept);
 80111e4:	4b10      	ldr	r3, [pc, #64]	@ (8011228 <xMBTCPPortInit+0xac>)
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	4911      	ldr	r1, [pc, #68]	@ (8011230 <xMBTCPPortInit+0xb4>)
 80111ea:	4618      	mov	r0, r3
 80111ec:	f7f7 fe12 	bl	8008e14 <tcp_accept>

    DEBUG_PRINTF(" -> listening on TCP port %u\r\n", (unsigned)usTCPPort);
 80111f0:	88fb      	ldrh	r3, [r7, #6]
 80111f2:	4a10      	ldr	r2, [pc, #64]	@ (8011234 <xMBTCPPortInit+0xb8>)
 80111f4:	2140      	movs	r1, #64	@ 0x40
 80111f6:	480a      	ldr	r0, [pc, #40]	@ (8011220 <xMBTCPPortInit+0xa4>)
 80111f8:	f000 fbee 	bl	80119d8 <sniprintf>
 80111fc:	60b8      	str	r0, [r7, #8]
 80111fe:	68bb      	ldr	r3, [r7, #8]
 8011200:	b29a      	uxth	r2, r3
 8011202:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011206:	4906      	ldr	r1, [pc, #24]	@ (8011220 <xMBTCPPortInit+0xa4>)
 8011208:	4806      	ldr	r0, [pc, #24]	@ (8011224 <xMBTCPPortInit+0xa8>)
 801120a:	f7f3 fba7 	bl	800495c <HAL_UART_Transmit>
    return TRUE;
 801120e:	2301      	movs	r3, #1
}
 8011210:	4618      	mov	r0, r3
 8011212:	3710      	adds	r7, #16
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}
 8011218:	08015854 	.word	0x08015854
 801121c:	08015610 	.word	0x08015610
 8011220:	200001fc 	.word	0x200001fc
 8011224:	200001b4 	.word	0x200001b4
 8011228:	20008588 	.word	0x20008588
 801122c:	0801582c 	.word	0x0801582c
 8011230:	08011401 	.word	0x08011401
 8011234:	08015618 	.word	0x08015618

08011238 <vMBTCPPortDisable>:
        mb_listener = NULL;
    }
}

void vMBTCPPortDisable(void)
{
 8011238:	b580      	push	{r7, lr}
 801123a:	b082      	sub	sp, #8
 801123c:	af00      	add	r7, sp, #0
    DEBUG_PRINTF("%s\r\n", __func__);
 801123e:	4b15      	ldr	r3, [pc, #84]	@ (8011294 <vMBTCPPortDisable+0x5c>)
 8011240:	4a15      	ldr	r2, [pc, #84]	@ (8011298 <vMBTCPPortDisable+0x60>)
 8011242:	2140      	movs	r1, #64	@ 0x40
 8011244:	4815      	ldr	r0, [pc, #84]	@ (801129c <vMBTCPPortDisable+0x64>)
 8011246:	f000 fbc7 	bl	80119d8 <sniprintf>
 801124a:	6078      	str	r0, [r7, #4]
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	b29a      	uxth	r2, r3
 8011250:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011254:	4911      	ldr	r1, [pc, #68]	@ (801129c <vMBTCPPortDisable+0x64>)
 8011256:	4812      	ldr	r0, [pc, #72]	@ (80112a0 <vMBTCPPortDisable+0x68>)
 8011258:	f7f3 fb80 	bl	800495c <HAL_UART_Transmit>
    if (mb_client) {
 801125c:	4b11      	ldr	r3, [pc, #68]	@ (80112a4 <vMBTCPPortDisable+0x6c>)
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d007      	beq.n	8011274 <vMBTCPPortDisable+0x3c>
        tcp_close(mb_client);
 8011264:	4b0f      	ldr	r3, [pc, #60]	@ (80112a4 <vMBTCPPortDisable+0x6c>)
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	4618      	mov	r0, r3
 801126a:	f7f6 fc2b 	bl	8007ac4 <tcp_close>
        mb_client = NULL;
 801126e:	4b0d      	ldr	r3, [pc, #52]	@ (80112a4 <vMBTCPPortDisable+0x6c>)
 8011270:	2200      	movs	r2, #0
 8011272:	601a      	str	r2, [r3, #0]
    }
    if (rx_pbuf) {
 8011274:	4b0c      	ldr	r3, [pc, #48]	@ (80112a8 <vMBTCPPortDisable+0x70>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d007      	beq.n	801128c <vMBTCPPortDisable+0x54>
        pbuf_free(rx_pbuf);
 801127c:	4b0a      	ldr	r3, [pc, #40]	@ (80112a8 <vMBTCPPortDisable+0x70>)
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	4618      	mov	r0, r3
 8011282:	f7f5 ff81 	bl	8007188 <pbuf_free>
        rx_pbuf = NULL;
 8011286:	4b08      	ldr	r3, [pc, #32]	@ (80112a8 <vMBTCPPortDisable+0x70>)
 8011288:	2200      	movs	r2, #0
 801128a:	601a      	str	r2, [r3, #0]
    }
}
 801128c:	bf00      	nop
 801128e:	3708      	adds	r7, #8
 8011290:	46bd      	mov	sp, r7
 8011292:	bd80      	pop	{r7, pc}
 8011294:	08015864 	.word	0x08015864
 8011298:	08015610 	.word	0x08015610
 801129c:	200001fc 	.word	0x200001fc
 80112a0:	200001b4 	.word	0x200001b4
 80112a4:	2000858c 	.word	0x2000858c
 80112a8:	20008590 	.word	0x20008590

080112ac <xMBTCPPortGetRequest>:

BOOL xMBTCPPortGetRequest(UCHAR **ppucMBTCPFrame, USHORT *pusLength)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b084      	sub	sp, #16
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
 80112b4:	6039      	str	r1, [r7, #0]
    DEBUG_PRINTF("%s\r\n", __func__);
 80112b6:	4b1e      	ldr	r3, [pc, #120]	@ (8011330 <xMBTCPPortGetRequest+0x84>)
 80112b8:	4a1e      	ldr	r2, [pc, #120]	@ (8011334 <xMBTCPPortGetRequest+0x88>)
 80112ba:	2140      	movs	r1, #64	@ 0x40
 80112bc:	481e      	ldr	r0, [pc, #120]	@ (8011338 <xMBTCPPortGetRequest+0x8c>)
 80112be:	f000 fb8b 	bl	80119d8 <sniprintf>
 80112c2:	60f8      	str	r0, [r7, #12]
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	b29a      	uxth	r2, r3
 80112c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80112cc:	491a      	ldr	r1, [pc, #104]	@ (8011338 <xMBTCPPortGetRequest+0x8c>)
 80112ce:	481b      	ldr	r0, [pc, #108]	@ (801133c <xMBTCPPortGetRequest+0x90>)
 80112d0:	f7f3 fb44 	bl	800495c <HAL_UART_Transmit>
    if (!rx_pbuf) return FALSE;
 80112d4:	4b1a      	ldr	r3, [pc, #104]	@ (8011340 <xMBTCPPortGetRequest+0x94>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d101      	bne.n	80112e0 <xMBTCPPortGetRequest+0x34>
 80112dc:	2300      	movs	r3, #0
 80112de:	e022      	b.n	8011326 <xMBTCPPortGetRequest+0x7a>

    *ppucMBTCPFrame = rx_pbuf->payload;
 80112e0:	4b17      	ldr	r3, [pc, #92]	@ (8011340 <xMBTCPPortGetRequest+0x94>)
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	685a      	ldr	r2, [r3, #4]
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	601a      	str	r2, [r3, #0]
    *pusLength      = rx_pbuf->len;
 80112ea:	4b15      	ldr	r3, [pc, #84]	@ (8011340 <xMBTCPPortGetRequest+0x94>)
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	895a      	ldrh	r2, [r3, #10]
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	801a      	strh	r2, [r3, #0]

    DEBUG_PRINTF(" -> handing out %u bytes\r\n", (unsigned)*pusLength);
 80112f4:	683b      	ldr	r3, [r7, #0]
 80112f6:	881b      	ldrh	r3, [r3, #0]
 80112f8:	4a12      	ldr	r2, [pc, #72]	@ (8011344 <xMBTCPPortGetRequest+0x98>)
 80112fa:	2140      	movs	r1, #64	@ 0x40
 80112fc:	480e      	ldr	r0, [pc, #56]	@ (8011338 <xMBTCPPortGetRequest+0x8c>)
 80112fe:	f000 fb6b 	bl	80119d8 <sniprintf>
 8011302:	60b8      	str	r0, [r7, #8]
 8011304:	68bb      	ldr	r3, [r7, #8]
 8011306:	b29a      	uxth	r2, r3
 8011308:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801130c:	490a      	ldr	r1, [pc, #40]	@ (8011338 <xMBTCPPortGetRequest+0x8c>)
 801130e:	480b      	ldr	r0, [pc, #44]	@ (801133c <xMBTCPPortGetRequest+0x90>)
 8011310:	f7f3 fb24 	bl	800495c <HAL_UART_Transmit>

    pbuf_free(rx_pbuf);
 8011314:	4b0a      	ldr	r3, [pc, #40]	@ (8011340 <xMBTCPPortGetRequest+0x94>)
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	4618      	mov	r0, r3
 801131a:	f7f5 ff35 	bl	8007188 <pbuf_free>
    rx_pbuf = NULL;
 801131e:	4b08      	ldr	r3, [pc, #32]	@ (8011340 <xMBTCPPortGetRequest+0x94>)
 8011320:	2200      	movs	r2, #0
 8011322:	601a      	str	r2, [r3, #0]
    return TRUE;
 8011324:	2301      	movs	r3, #1
}
 8011326:	4618      	mov	r0, r3
 8011328:	3710      	adds	r7, #16
 801132a:	46bd      	mov	sp, r7
 801132c:	bd80      	pop	{r7, pc}
 801132e:	bf00      	nop
 8011330:	08015878 	.word	0x08015878
 8011334:	08015610 	.word	0x08015610
 8011338:	200001fc 	.word	0x200001fc
 801133c:	200001b4 	.word	0x200001b4
 8011340:	20008590 	.word	0x20008590
 8011344:	08015638 	.word	0x08015638

08011348 <xMBTCPPortSendResponse>:

BOOL xMBTCPPortSendResponse(const UCHAR *pucMBTCPFrame, USHORT usLength)
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b086      	sub	sp, #24
 801134c:	af00      	add	r7, sp, #0
 801134e:	6078      	str	r0, [r7, #4]
 8011350:	460b      	mov	r3, r1
 8011352:	807b      	strh	r3, [r7, #2]
    DEBUG_PRINTF("%s\r\n", __func__);
 8011354:	4b23      	ldr	r3, [pc, #140]	@ (80113e4 <xMBTCPPortSendResponse+0x9c>)
 8011356:	4a24      	ldr	r2, [pc, #144]	@ (80113e8 <xMBTCPPortSendResponse+0xa0>)
 8011358:	2140      	movs	r1, #64	@ 0x40
 801135a:	4824      	ldr	r0, [pc, #144]	@ (80113ec <xMBTCPPortSendResponse+0xa4>)
 801135c:	f000 fb3c 	bl	80119d8 <sniprintf>
 8011360:	6178      	str	r0, [r7, #20]
 8011362:	697b      	ldr	r3, [r7, #20]
 8011364:	b29a      	uxth	r2, r3
 8011366:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801136a:	4920      	ldr	r1, [pc, #128]	@ (80113ec <xMBTCPPortSendResponse+0xa4>)
 801136c:	4820      	ldr	r0, [pc, #128]	@ (80113f0 <xMBTCPPortSendResponse+0xa8>)
 801136e:	f7f3 faf5 	bl	800495c <HAL_UART_Transmit>
    if (!mb_client) {
 8011372:	4b20      	ldr	r3, [pc, #128]	@ (80113f4 <xMBTCPPortSendResponse+0xac>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d10f      	bne.n	801139a <xMBTCPPortSendResponse+0x52>
        DEBUG_PRINTF(" -> no client\r\n");
 801137a:	4a1f      	ldr	r2, [pc, #124]	@ (80113f8 <xMBTCPPortSendResponse+0xb0>)
 801137c:	2140      	movs	r1, #64	@ 0x40
 801137e:	481b      	ldr	r0, [pc, #108]	@ (80113ec <xMBTCPPortSendResponse+0xa4>)
 8011380:	f000 fb2a 	bl	80119d8 <sniprintf>
 8011384:	60f8      	str	r0, [r7, #12]
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	b29a      	uxth	r2, r3
 801138a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801138e:	4917      	ldr	r1, [pc, #92]	@ (80113ec <xMBTCPPortSendResponse+0xa4>)
 8011390:	4817      	ldr	r0, [pc, #92]	@ (80113f0 <xMBTCPPortSendResponse+0xa8>)
 8011392:	f7f3 fae3 	bl	800495c <HAL_UART_Transmit>
        return FALSE;
 8011396:	2300      	movs	r3, #0
 8011398:	e020      	b.n	80113dc <xMBTCPPortSendResponse+0x94>
    }

    if (tcp_write(mb_client, pucMBTCPFrame, usLength, TCP_WRITE_FLAG_COPY) != ERR_OK)
 801139a:	4b16      	ldr	r3, [pc, #88]	@ (80113f4 <xMBTCPPortSendResponse+0xac>)
 801139c:	6818      	ldr	r0, [r3, #0]
 801139e:	887a      	ldrh	r2, [r7, #2]
 80113a0:	2301      	movs	r3, #1
 80113a2:	6879      	ldr	r1, [r7, #4]
 80113a4:	f7fa fbca 	bl	800bb3c <tcp_write>
 80113a8:	4603      	mov	r3, r0
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d001      	beq.n	80113b2 <xMBTCPPortSendResponse+0x6a>
        return FALSE;
 80113ae:	2300      	movs	r3, #0
 80113b0:	e014      	b.n	80113dc <xMBTCPPortSendResponse+0x94>

    tcp_output(mb_client);
 80113b2:	4b10      	ldr	r3, [pc, #64]	@ (80113f4 <xMBTCPPortSendResponse+0xac>)
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	4618      	mov	r0, r3
 80113b8:	f7fb f9aa 	bl	800c710 <tcp_output>

    DEBUG_PRINTF(" -> sent %u bytes\r\n", (unsigned)usLength);
 80113bc:	887b      	ldrh	r3, [r7, #2]
 80113be:	4a0f      	ldr	r2, [pc, #60]	@ (80113fc <xMBTCPPortSendResponse+0xb4>)
 80113c0:	2140      	movs	r1, #64	@ 0x40
 80113c2:	480a      	ldr	r0, [pc, #40]	@ (80113ec <xMBTCPPortSendResponse+0xa4>)
 80113c4:	f000 fb08 	bl	80119d8 <sniprintf>
 80113c8:	6138      	str	r0, [r7, #16]
 80113ca:	693b      	ldr	r3, [r7, #16]
 80113cc:	b29a      	uxth	r2, r3
 80113ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80113d2:	4906      	ldr	r1, [pc, #24]	@ (80113ec <xMBTCPPortSendResponse+0xa4>)
 80113d4:	4806      	ldr	r0, [pc, #24]	@ (80113f0 <xMBTCPPortSendResponse+0xa8>)
 80113d6:	f7f3 fac1 	bl	800495c <HAL_UART_Transmit>
    return TRUE;
 80113da:	2301      	movs	r3, #1
}
 80113dc:	4618      	mov	r0, r3
 80113de:	3718      	adds	r7, #24
 80113e0:	46bd      	mov	sp, r7
 80113e2:	bd80      	pop	{r7, pc}
 80113e4:	08015890 	.word	0x08015890
 80113e8:	08015610 	.word	0x08015610
 80113ec:	200001fc 	.word	0x200001fc
 80113f0:	200001b4 	.word	0x200001b4
 80113f4:	2000858c 	.word	0x2000858c
 80113f8:	08015654 	.word	0x08015654
 80113fc:	08015664 	.word	0x08015664

08011400 <mb_accept>:

/* ----------------------- lwIP callbacks ---------------------- */
static err_t mb_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8011400:	b580      	push	{r7, lr}
 8011402:	b086      	sub	sp, #24
 8011404:	af00      	add	r7, sp, #0
 8011406:	60f8      	str	r0, [r7, #12]
 8011408:	60b9      	str	r1, [r7, #8]
 801140a:	4613      	mov	r3, r2
 801140c:	71fb      	strb	r3, [r7, #7]
    DEBUG_PRINTF("%s\r\n", __func__);
 801140e:	4b17      	ldr	r3, [pc, #92]	@ (801146c <mb_accept+0x6c>)
 8011410:	4a17      	ldr	r2, [pc, #92]	@ (8011470 <mb_accept+0x70>)
 8011412:	2140      	movs	r1, #64	@ 0x40
 8011414:	4817      	ldr	r0, [pc, #92]	@ (8011474 <mb_accept+0x74>)
 8011416:	f000 fadf 	bl	80119d8 <sniprintf>
 801141a:	6178      	str	r0, [r7, #20]
 801141c:	697b      	ldr	r3, [r7, #20]
 801141e:	b29a      	uxth	r2, r3
 8011420:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011424:	4913      	ldr	r1, [pc, #76]	@ (8011474 <mb_accept+0x74>)
 8011426:	4814      	ldr	r0, [pc, #80]	@ (8011478 <mb_accept+0x78>)
 8011428:	f7f3 fa98 	bl	800495c <HAL_UART_Transmit>
    (void)arg; (void)err;

    mb_client = newpcb;
 801142c:	4a13      	ldr	r2, [pc, #76]	@ (801147c <mb_accept+0x7c>)
 801142e:	68bb      	ldr	r3, [r7, #8]
 8011430:	6013      	str	r3, [r2, #0]
    tcp_recv(mb_client, mb_recv);
 8011432:	4b12      	ldr	r3, [pc, #72]	@ (801147c <mb_accept+0x7c>)
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	4912      	ldr	r1, [pc, #72]	@ (8011480 <mb_accept+0x80>)
 8011438:	4618      	mov	r0, r3
 801143a:	f7f7 fcc9 	bl	8008dd0 <tcp_recv>

    DEBUG_PRINTF(" -> client connected\r\n");
 801143e:	4a11      	ldr	r2, [pc, #68]	@ (8011484 <mb_accept+0x84>)
 8011440:	2140      	movs	r1, #64	@ 0x40
 8011442:	480c      	ldr	r0, [pc, #48]	@ (8011474 <mb_accept+0x74>)
 8011444:	f000 fac8 	bl	80119d8 <sniprintf>
 8011448:	6138      	str	r0, [r7, #16]
 801144a:	693b      	ldr	r3, [r7, #16]
 801144c:	b29a      	uxth	r2, r3
 801144e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011452:	4908      	ldr	r1, [pc, #32]	@ (8011474 <mb_accept+0x74>)
 8011454:	4808      	ldr	r0, [pc, #32]	@ (8011478 <mb_accept+0x78>)
 8011456:	f7f3 fa81 	bl	800495c <HAL_UART_Transmit>

    xMBPortEventPost(EV_READY);
 801145a:	2000      	movs	r0, #0
 801145c:	f7ff fe1e 	bl	801109c <xMBPortEventPost>
    return ERR_OK;
 8011460:	2300      	movs	r3, #0
}
 8011462:	4618      	mov	r0, r3
 8011464:	3718      	adds	r7, #24
 8011466:	46bd      	mov	sp, r7
 8011468:	bd80      	pop	{r7, pc}
 801146a:	bf00      	nop
 801146c:	080158a8 	.word	0x080158a8
 8011470:	08015610 	.word	0x08015610
 8011474:	200001fc 	.word	0x200001fc
 8011478:	200001b4 	.word	0x200001b4
 801147c:	2000858c 	.word	0x2000858c
 8011480:	08011489 	.word	0x08011489
 8011484:	08015678 	.word	0x08015678

08011488 <mb_recv>:

static err_t mb_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8011488:	b5f0      	push	{r4, r5, r6, r7, lr}
 801148a:	b095      	sub	sp, #84	@ 0x54
 801148c:	af08      	add	r7, sp, #32
 801148e:	60f8      	str	r0, [r7, #12]
 8011490:	60b9      	str	r1, [r7, #8]
 8011492:	607a      	str	r2, [r7, #4]
 8011494:	70fb      	strb	r3, [r7, #3]
    DEBUG_PRINTF("%s\r\n", __func__);
 8011496:	4b60      	ldr	r3, [pc, #384]	@ (8011618 <mb_recv+0x190>)
 8011498:	4a60      	ldr	r2, [pc, #384]	@ (801161c <mb_recv+0x194>)
 801149a:	2140      	movs	r1, #64	@ 0x40
 801149c:	4860      	ldr	r0, [pc, #384]	@ (8011620 <mb_recv+0x198>)
 801149e:	f000 fa9b 	bl	80119d8 <sniprintf>
 80114a2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80114a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114a6:	b29a      	uxth	r2, r3
 80114a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80114ac:	495c      	ldr	r1, [pc, #368]	@ (8011620 <mb_recv+0x198>)
 80114ae:	485d      	ldr	r0, [pc, #372]	@ (8011624 <mb_recv+0x19c>)
 80114b0:	f7f3 fa54 	bl	800495c <HAL_UART_Transmit>
    (void)arg; (void)tpcb;

    if (!p) {
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d12f      	bne.n	801151a <mb_recv+0x92>
        err_t cerr = tcp_close(tpcb);
 80114ba:	68b8      	ldr	r0, [r7, #8]
 80114bc:	f7f6 fb02 	bl	8007ac4 <tcp_close>
 80114c0:	4603      	mov	r3, r0
 80114c2:	76fb      	strb	r3, [r7, #27]
        if (cerr != ERR_OK) {
 80114c4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d013      	beq.n	80114f4 <mb_recv+0x6c>
            tcp_abort(tpcb);
 80114cc:	68b8      	ldr	r0, [r7, #8]
 80114ce:	f7f6 fbe3 	bl	8007c98 <tcp_abort>
            DEBUG_PRINTF(" -> remote closed, pcb aborted (err=%d)\r\n", cerr);
 80114d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80114d6:	4a54      	ldr	r2, [pc, #336]	@ (8011628 <mb_recv+0x1a0>)
 80114d8:	2140      	movs	r1, #64	@ 0x40
 80114da:	4851      	ldr	r0, [pc, #324]	@ (8011620 <mb_recv+0x198>)
 80114dc:	f000 fa7c 	bl	80119d8 <sniprintf>
 80114e0:	6138      	str	r0, [r7, #16]
 80114e2:	693b      	ldr	r3, [r7, #16]
 80114e4:	b29a      	uxth	r2, r3
 80114e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80114ea:	494d      	ldr	r1, [pc, #308]	@ (8011620 <mb_recv+0x198>)
 80114ec:	484d      	ldr	r0, [pc, #308]	@ (8011624 <mb_recv+0x19c>)
 80114ee:	f7f3 fa35 	bl	800495c <HAL_UART_Transmit>
 80114f2:	e00d      	b.n	8011510 <mb_recv+0x88>
        } else {
            DEBUG_PRINTF(" -> remote closed, pcb closed\r\n");
 80114f4:	4a4d      	ldr	r2, [pc, #308]	@ (801162c <mb_recv+0x1a4>)
 80114f6:	2140      	movs	r1, #64	@ 0x40
 80114f8:	4849      	ldr	r0, [pc, #292]	@ (8011620 <mb_recv+0x198>)
 80114fa:	f000 fa6d 	bl	80119d8 <sniprintf>
 80114fe:	6178      	str	r0, [r7, #20]
 8011500:	697b      	ldr	r3, [r7, #20]
 8011502:	b29a      	uxth	r2, r3
 8011504:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011508:	4945      	ldr	r1, [pc, #276]	@ (8011620 <mb_recv+0x198>)
 801150a:	4846      	ldr	r0, [pc, #280]	@ (8011624 <mb_recv+0x19c>)
 801150c:	f7f3 fa26 	bl	800495c <HAL_UART_Transmit>
        }
        mb_client = NULL;
 8011510:	4b47      	ldr	r3, [pc, #284]	@ (8011630 <mb_recv+0x1a8>)
 8011512:	2200      	movs	r2, #0
 8011514:	601a      	str	r2, [r3, #0]
        return ERR_OK;
 8011516:	2300      	movs	r3, #0
 8011518:	e07a      	b.n	8011610 <mb_recv+0x188>
    }

    if (err != ERR_OK) {
 801151a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d015      	beq.n	801154e <mb_recv+0xc6>
        pbuf_free(p);
 8011522:	6878      	ldr	r0, [r7, #4]
 8011524:	f7f5 fe30 	bl	8007188 <pbuf_free>
        DEBUG_PRINTF(" -> error %d\r\n", (int)err);
 8011528:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801152c:	4a41      	ldr	r2, [pc, #260]	@ (8011634 <mb_recv+0x1ac>)
 801152e:	2140      	movs	r1, #64	@ 0x40
 8011530:	483b      	ldr	r0, [pc, #236]	@ (8011620 <mb_recv+0x198>)
 8011532:	f000 fa51 	bl	80119d8 <sniprintf>
 8011536:	61f8      	str	r0, [r7, #28]
 8011538:	69fb      	ldr	r3, [r7, #28]
 801153a:	b29a      	uxth	r2, r3
 801153c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011540:	4937      	ldr	r1, [pc, #220]	@ (8011620 <mb_recv+0x198>)
 8011542:	4838      	ldr	r0, [pc, #224]	@ (8011624 <mb_recv+0x19c>)
 8011544:	f7f3 fa0a 	bl	800495c <HAL_UART_Transmit>
        return err;
 8011548:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801154c:	e060      	b.n	8011610 <mb_recv+0x188>
    }

    if (rx_pbuf) pbuf_free(rx_pbuf);
 801154e:	4b3a      	ldr	r3, [pc, #232]	@ (8011638 <mb_recv+0x1b0>)
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d004      	beq.n	8011560 <mb_recv+0xd8>
 8011556:	4b38      	ldr	r3, [pc, #224]	@ (8011638 <mb_recv+0x1b0>)
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	4618      	mov	r0, r3
 801155c:	f7f5 fe14 	bl	8007188 <pbuf_free>
    rx_pbuf = p;
 8011560:	4a35      	ldr	r2, [pc, #212]	@ (8011638 <mb_recv+0x1b0>)
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	6013      	str	r3, [r2, #0]

    tcp_recved(tpcb, p->tot_len);
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	891b      	ldrh	r3, [r3, #8]
 801156a:	4619      	mov	r1, r3
 801156c:	68b8      	ldr	r0, [r7, #8]
 801156e:	f7f6 fd6d 	bl	800804c <tcp_recved>

    DEBUG_PRINTF(" -> received %u bytes\r\n", (unsigned)p->tot_len);
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	891b      	ldrh	r3, [r3, #8]
 8011576:	4a31      	ldr	r2, [pc, #196]	@ (801163c <mb_recv+0x1b4>)
 8011578:	2140      	movs	r1, #64	@ 0x40
 801157a:	4829      	ldr	r0, [pc, #164]	@ (8011620 <mb_recv+0x198>)
 801157c:	f000 fa2c 	bl	80119d8 <sniprintf>
 8011580:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011584:	b29a      	uxth	r2, r3
 8011586:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801158a:	4925      	ldr	r1, [pc, #148]	@ (8011620 <mb_recv+0x198>)
 801158c:	4825      	ldr	r0, [pc, #148]	@ (8011624 <mb_recv+0x19c>)
 801158e:	f7f3 f9e5 	bl	800495c <HAL_UART_Transmit>
    if (p->len >= 8) {
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	895b      	ldrh	r3, [r3, #10]
 8011596:	2b07      	cmp	r3, #7
 8011598:	d936      	bls.n	8011608 <mb_recv+0x180>
        uint8_t *b = (uint8_t*)p->payload;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	685b      	ldr	r3, [r3, #4]
 801159e:	627b      	str	r3, [r7, #36]	@ 0x24
        DEBUG_PRINTF(" MBAP: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 80115a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115a2:	781b      	ldrb	r3, [r3, #0]
 80115a4:	469c      	mov	ip, r3
 80115a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115a8:	3301      	adds	r3, #1
 80115aa:	781b      	ldrb	r3, [r3, #0]
 80115ac:	461a      	mov	r2, r3
 80115ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115b0:	3302      	adds	r3, #2
 80115b2:	781b      	ldrb	r3, [r3, #0]
 80115b4:	4619      	mov	r1, r3
 80115b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115b8:	3303      	adds	r3, #3
 80115ba:	781b      	ldrb	r3, [r3, #0]
 80115bc:	4618      	mov	r0, r3
 80115be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115c0:	3304      	adds	r3, #4
 80115c2:	781b      	ldrb	r3, [r3, #0]
 80115c4:	461c      	mov	r4, r3
 80115c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115c8:	3305      	adds	r3, #5
 80115ca:	781b      	ldrb	r3, [r3, #0]
 80115cc:	461d      	mov	r5, r3
 80115ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115d0:	3306      	adds	r3, #6
 80115d2:	781b      	ldrb	r3, [r3, #0]
 80115d4:	461e      	mov	r6, r3
 80115d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115d8:	3307      	adds	r3, #7
 80115da:	781b      	ldrb	r3, [r3, #0]
 80115dc:	9306      	str	r3, [sp, #24]
 80115de:	9605      	str	r6, [sp, #20]
 80115e0:	9504      	str	r5, [sp, #16]
 80115e2:	9403      	str	r4, [sp, #12]
 80115e4:	9002      	str	r0, [sp, #8]
 80115e6:	9101      	str	r1, [sp, #4]
 80115e8:	9200      	str	r2, [sp, #0]
 80115ea:	4663      	mov	r3, ip
 80115ec:	4a14      	ldr	r2, [pc, #80]	@ (8011640 <mb_recv+0x1b8>)
 80115ee:	2140      	movs	r1, #64	@ 0x40
 80115f0:	480b      	ldr	r0, [pc, #44]	@ (8011620 <mb_recv+0x198>)
 80115f2:	f000 f9f1 	bl	80119d8 <sniprintf>
 80115f6:	6238      	str	r0, [r7, #32]
 80115f8:	6a3b      	ldr	r3, [r7, #32]
 80115fa:	b29a      	uxth	r2, r3
 80115fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011600:	4907      	ldr	r1, [pc, #28]	@ (8011620 <mb_recv+0x198>)
 8011602:	4808      	ldr	r0, [pc, #32]	@ (8011624 <mb_recv+0x19c>)
 8011604:	f7f3 f9aa 	bl	800495c <HAL_UART_Transmit>
                     b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7]);
    }

    xMBPortEventPost(EV_FRAME_RECEIVED);
 8011608:	2001      	movs	r0, #1
 801160a:	f7ff fd47 	bl	801109c <xMBPortEventPost>
    return ERR_OK;
 801160e:	2300      	movs	r3, #0
}
 8011610:	4618      	mov	r0, r3
 8011612:	3734      	adds	r7, #52	@ 0x34
 8011614:	46bd      	mov	sp, r7
 8011616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011618:	080158b4 	.word	0x080158b4
 801161c:	08015610 	.word	0x08015610
 8011620:	200001fc 	.word	0x200001fc
 8011624:	200001b4 	.word	0x200001b4
 8011628:	08015690 	.word	0x08015690
 801162c:	080156bc 	.word	0x080156bc
 8011630:	2000858c 	.word	0x2000858c
 8011634:	080156dc 	.word	0x080156dc
 8011638:	20008590 	.word	0x20008590
 801163c:	080156ec 	.word	0x080156ec
 8011640:	08015704 	.word	0x08015704

08011644 <eMBTCPDoInit>:


/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBTCPDoInit( USHORT ucTCPPort )
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b084      	sub	sp, #16
 8011648:	af00      	add	r7, sp, #0
 801164a:	4603      	mov	r3, r0
 801164c:	80fb      	strh	r3, [r7, #6]
    eMBErrorCode    eStatus = MB_ENOERR;
 801164e:	2300      	movs	r3, #0
 8011650:	73fb      	strb	r3, [r7, #15]

    if( xMBTCPPortInit( ucTCPPort ) == FALSE )
 8011652:	88fb      	ldrh	r3, [r7, #6]
 8011654:	4618      	mov	r0, r3
 8011656:	f7ff fd91 	bl	801117c <xMBTCPPortInit>
 801165a:	4603      	mov	r3, r0
 801165c:	2b00      	cmp	r3, #0
 801165e:	d101      	bne.n	8011664 <eMBTCPDoInit+0x20>
    {
        eStatus = MB_EPORTERR;
 8011660:	2303      	movs	r3, #3
 8011662:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8011664:	7bfb      	ldrb	r3, [r7, #15]
}
 8011666:	4618      	mov	r0, r3
 8011668:	3710      	adds	r7, #16
 801166a:	46bd      	mov	sp, r7
 801166c:	bd80      	pop	{r7, pc}

0801166e <eMBTCPStart>:

void
eMBTCPStart( void )
{
 801166e:	b480      	push	{r7}
 8011670:	af00      	add	r7, sp, #0
}
 8011672:	bf00      	nop
 8011674:	46bd      	mov	sp, r7
 8011676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167a:	4770      	bx	lr

0801167c <eMBTCPStop>:

void
eMBTCPStop( void )
{
 801167c:	b580      	push	{r7, lr}
 801167e:	af00      	add	r7, sp, #0
    /* Make sure that no more clients are connected. */
    vMBTCPPortDisable( );
 8011680:	f7ff fdda 	bl	8011238 <vMBTCPPortDisable>
}
 8011684:	bf00      	nop
 8011686:	bd80      	pop	{r7, pc}

08011688 <eMBTCPReceive>:

eMBErrorCode
eMBTCPReceive( UCHAR * pucRcvAddress, UCHAR ** ppucFrame, USHORT * pusLength )
{
 8011688:	b580      	push	{r7, lr}
 801168a:	b088      	sub	sp, #32
 801168c:	af00      	add	r7, sp, #0
 801168e:	60f8      	str	r0, [r7, #12]
 8011690:	60b9      	str	r1, [r7, #8]
 8011692:	607a      	str	r2, [r7, #4]
    eMBErrorCode    eStatus = MB_EIO;
 8011694:	2305      	movs	r3, #5
 8011696:	77fb      	strb	r3, [r7, #31]
    UCHAR          *pucMBTCPFrame;
    USHORT          usLength;
    USHORT          usPID;

    if( xMBTCPPortGetRequest( &pucMBTCPFrame, &usLength ) != FALSE )
 8011698:	f107 0216 	add.w	r2, r7, #22
 801169c:	f107 0318 	add.w	r3, r7, #24
 80116a0:	4611      	mov	r1, r2
 80116a2:	4618      	mov	r0, r3
 80116a4:	f7ff fe02 	bl	80112ac <xMBTCPPortGetRequest>
 80116a8:	4603      	mov	r3, r0
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d01d      	beq.n	80116ea <eMBTCPReceive+0x62>
    {
        usPID = pucMBTCPFrame[MB_TCP_PID] << 8U;
 80116ae:	69bb      	ldr	r3, [r7, #24]
 80116b0:	3302      	adds	r3, #2
 80116b2:	781b      	ldrb	r3, [r3, #0]
 80116b4:	021b      	lsls	r3, r3, #8
 80116b6:	83bb      	strh	r3, [r7, #28]
        usPID |= pucMBTCPFrame[MB_TCP_PID + 1];
 80116b8:	69bb      	ldr	r3, [r7, #24]
 80116ba:	3303      	adds	r3, #3
 80116bc:	781b      	ldrb	r3, [r3, #0]
 80116be:	461a      	mov	r2, r3
 80116c0:	8bbb      	ldrh	r3, [r7, #28]
 80116c2:	4313      	orrs	r3, r2
 80116c4:	83bb      	strh	r3, [r7, #28]

        if( usPID == MB_TCP_PROTOCOL_ID )
 80116c6:	8bbb      	ldrh	r3, [r7, #28]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d110      	bne.n	80116ee <eMBTCPReceive+0x66>
        {
            *ppucFrame = &pucMBTCPFrame[MB_TCP_FUNC];
 80116cc:	69bb      	ldr	r3, [r7, #24]
 80116ce:	1dda      	adds	r2, r3, #7
 80116d0:	68bb      	ldr	r3, [r7, #8]
 80116d2:	601a      	str	r2, [r3, #0]
            *pusLength = usLength - MB_TCP_FUNC;
 80116d4:	8afb      	ldrh	r3, [r7, #22]
 80116d6:	3b07      	subs	r3, #7
 80116d8:	b29a      	uxth	r2, r3
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	801a      	strh	r2, [r3, #0]
            eStatus = MB_ENOERR;
 80116de:	2300      	movs	r3, #0
 80116e0:	77fb      	strb	r3, [r7, #31]

            /* Modbus TCP does not use any addresses. Fake the source address such
             * that the processing part deals with this frame.
             */
            *pucRcvAddress = MB_TCP_PSEUDO_ADDRESS;
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	22ff      	movs	r2, #255	@ 0xff
 80116e6:	701a      	strb	r2, [r3, #0]
 80116e8:	e001      	b.n	80116ee <eMBTCPReceive+0x66>
        }
    }
    else
    {
        eStatus = MB_EIO;
 80116ea:	2305      	movs	r3, #5
 80116ec:	77fb      	strb	r3, [r7, #31]
    }
    return eStatus;
 80116ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80116f0:	4618      	mov	r0, r3
 80116f2:	3720      	adds	r7, #32
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd80      	pop	{r7, pc}

080116f8 <eMBTCPSend>:

eMBErrorCode
eMBTCPSend( UCHAR _unused, const UCHAR * pucFrame, USHORT usLength )
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b086      	sub	sp, #24
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	4603      	mov	r3, r0
 8011700:	6039      	str	r1, [r7, #0]
 8011702:	71fb      	strb	r3, [r7, #7]
 8011704:	4613      	mov	r3, r2
 8011706:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 8011708:	2300      	movs	r3, #0
 801170a:	75fb      	strb	r3, [r7, #23]
    UCHAR          *pucMBTCPFrame = ( UCHAR * ) pucFrame - MB_TCP_FUNC;
 801170c:	683b      	ldr	r3, [r7, #0]
 801170e:	3b07      	subs	r3, #7
 8011710:	613b      	str	r3, [r7, #16]
    USHORT          usTCPLength = usLength + MB_TCP_FUNC;
 8011712:	88bb      	ldrh	r3, [r7, #4]
 8011714:	3307      	adds	r3, #7
 8011716:	81fb      	strh	r3, [r7, #14]
     * function with the buffer returned by the previous call. Therefore we 
     * only have to update the length in the header. Note that the length 
     * header includes the size of the Modbus PDU and the UID Byte. Therefore 
     * the length is usLength plus one.
     */
    pucMBTCPFrame[MB_TCP_LEN] = ( usLength + 1 ) >> 8U;
 8011718:	88bb      	ldrh	r3, [r7, #4]
 801171a:	3301      	adds	r3, #1
 801171c:	121a      	asrs	r2, r3, #8
 801171e:	693b      	ldr	r3, [r7, #16]
 8011720:	3304      	adds	r3, #4
 8011722:	b2d2      	uxtb	r2, r2
 8011724:	701a      	strb	r2, [r3, #0]
    pucMBTCPFrame[MB_TCP_LEN + 1] = ( usLength + 1 ) & 0xFF;
 8011726:	88bb      	ldrh	r3, [r7, #4]
 8011728:	b2da      	uxtb	r2, r3
 801172a:	693b      	ldr	r3, [r7, #16]
 801172c:	3305      	adds	r3, #5
 801172e:	3201      	adds	r2, #1
 8011730:	b2d2      	uxtb	r2, r2
 8011732:	701a      	strb	r2, [r3, #0]
    if( xMBTCPPortSendResponse( pucMBTCPFrame, usTCPLength ) == FALSE )
 8011734:	89fb      	ldrh	r3, [r7, #14]
 8011736:	4619      	mov	r1, r3
 8011738:	6938      	ldr	r0, [r7, #16]
 801173a:	f7ff fe05 	bl	8011348 <xMBTCPPortSendResponse>
 801173e:	4603      	mov	r3, r0
 8011740:	2b00      	cmp	r3, #0
 8011742:	d101      	bne.n	8011748 <eMBTCPSend+0x50>
    {
        eStatus = MB_EIO;
 8011744:	2305      	movs	r3, #5
 8011746:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8011748:	7dfb      	ldrb	r3, [r7, #23]
}
 801174a:	4618      	mov	r0, r3
 801174c:	3718      	adds	r7, #24
 801174e:	46bd      	mov	sp, r7
 8011750:	bd80      	pop	{r7, pc}
	...

08011754 <__assert_func>:
 8011754:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011756:	4614      	mov	r4, r2
 8011758:	461a      	mov	r2, r3
 801175a:	4b09      	ldr	r3, [pc, #36]	@ (8011780 <__assert_func+0x2c>)
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	4605      	mov	r5, r0
 8011760:	68d8      	ldr	r0, [r3, #12]
 8011762:	b14c      	cbz	r4, 8011778 <__assert_func+0x24>
 8011764:	4b07      	ldr	r3, [pc, #28]	@ (8011784 <__assert_func+0x30>)
 8011766:	9100      	str	r1, [sp, #0]
 8011768:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801176c:	4906      	ldr	r1, [pc, #24]	@ (8011788 <__assert_func+0x34>)
 801176e:	462b      	mov	r3, r5
 8011770:	f000 f8f0 	bl	8011954 <fiprintf>
 8011774:	f000 fa57 	bl	8011c26 <abort>
 8011778:	4b04      	ldr	r3, [pc, #16]	@ (801178c <__assert_func+0x38>)
 801177a:	461c      	mov	r4, r3
 801177c:	e7f3      	b.n	8011766 <__assert_func+0x12>
 801177e:	bf00      	nop
 8011780:	200000b8 	.word	0x200000b8
 8011784:	080158bc 	.word	0x080158bc
 8011788:	080158c9 	.word	0x080158c9
 801178c:	080158f7 	.word	0x080158f7

08011790 <rand>:
 8011790:	4b16      	ldr	r3, [pc, #88]	@ (80117ec <rand+0x5c>)
 8011792:	b510      	push	{r4, lr}
 8011794:	681c      	ldr	r4, [r3, #0]
 8011796:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011798:	b9b3      	cbnz	r3, 80117c8 <rand+0x38>
 801179a:	2018      	movs	r0, #24
 801179c:	f000 fa94 	bl	8011cc8 <malloc>
 80117a0:	4602      	mov	r2, r0
 80117a2:	6320      	str	r0, [r4, #48]	@ 0x30
 80117a4:	b920      	cbnz	r0, 80117b0 <rand+0x20>
 80117a6:	4b12      	ldr	r3, [pc, #72]	@ (80117f0 <rand+0x60>)
 80117a8:	4812      	ldr	r0, [pc, #72]	@ (80117f4 <rand+0x64>)
 80117aa:	2152      	movs	r1, #82	@ 0x52
 80117ac:	f7ff ffd2 	bl	8011754 <__assert_func>
 80117b0:	4911      	ldr	r1, [pc, #68]	@ (80117f8 <rand+0x68>)
 80117b2:	4b12      	ldr	r3, [pc, #72]	@ (80117fc <rand+0x6c>)
 80117b4:	e9c0 1300 	strd	r1, r3, [r0]
 80117b8:	4b11      	ldr	r3, [pc, #68]	@ (8011800 <rand+0x70>)
 80117ba:	6083      	str	r3, [r0, #8]
 80117bc:	230b      	movs	r3, #11
 80117be:	8183      	strh	r3, [r0, #12]
 80117c0:	2100      	movs	r1, #0
 80117c2:	2001      	movs	r0, #1
 80117c4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80117c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80117ca:	480e      	ldr	r0, [pc, #56]	@ (8011804 <rand+0x74>)
 80117cc:	690b      	ldr	r3, [r1, #16]
 80117ce:	694c      	ldr	r4, [r1, #20]
 80117d0:	4a0d      	ldr	r2, [pc, #52]	@ (8011808 <rand+0x78>)
 80117d2:	4358      	muls	r0, r3
 80117d4:	fb02 0004 	mla	r0, r2, r4, r0
 80117d8:	fba3 3202 	umull	r3, r2, r3, r2
 80117dc:	3301      	adds	r3, #1
 80117de:	eb40 0002 	adc.w	r0, r0, r2
 80117e2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80117e6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80117ea:	bd10      	pop	{r4, pc}
 80117ec:	200000b8 	.word	0x200000b8
 80117f0:	080158f8 	.word	0x080158f8
 80117f4:	0801590f 	.word	0x0801590f
 80117f8:	abcd330e 	.word	0xabcd330e
 80117fc:	e66d1234 	.word	0xe66d1234
 8011800:	0005deec 	.word	0x0005deec
 8011804:	5851f42d 	.word	0x5851f42d
 8011808:	4c957f2d 	.word	0x4c957f2d

0801180c <std>:
 801180c:	2300      	movs	r3, #0
 801180e:	b510      	push	{r4, lr}
 8011810:	4604      	mov	r4, r0
 8011812:	e9c0 3300 	strd	r3, r3, [r0]
 8011816:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801181a:	6083      	str	r3, [r0, #8]
 801181c:	8181      	strh	r1, [r0, #12]
 801181e:	6643      	str	r3, [r0, #100]	@ 0x64
 8011820:	81c2      	strh	r2, [r0, #14]
 8011822:	6183      	str	r3, [r0, #24]
 8011824:	4619      	mov	r1, r3
 8011826:	2208      	movs	r2, #8
 8011828:	305c      	adds	r0, #92	@ 0x5c
 801182a:	f000 f978 	bl	8011b1e <memset>
 801182e:	4b0d      	ldr	r3, [pc, #52]	@ (8011864 <std+0x58>)
 8011830:	6263      	str	r3, [r4, #36]	@ 0x24
 8011832:	4b0d      	ldr	r3, [pc, #52]	@ (8011868 <std+0x5c>)
 8011834:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011836:	4b0d      	ldr	r3, [pc, #52]	@ (801186c <std+0x60>)
 8011838:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801183a:	4b0d      	ldr	r3, [pc, #52]	@ (8011870 <std+0x64>)
 801183c:	6323      	str	r3, [r4, #48]	@ 0x30
 801183e:	4b0d      	ldr	r3, [pc, #52]	@ (8011874 <std+0x68>)
 8011840:	6224      	str	r4, [r4, #32]
 8011842:	429c      	cmp	r4, r3
 8011844:	d006      	beq.n	8011854 <std+0x48>
 8011846:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801184a:	4294      	cmp	r4, r2
 801184c:	d002      	beq.n	8011854 <std+0x48>
 801184e:	33d0      	adds	r3, #208	@ 0xd0
 8011850:	429c      	cmp	r4, r3
 8011852:	d105      	bne.n	8011860 <std+0x54>
 8011854:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801185c:	f000 b9d2 	b.w	8011c04 <__retarget_lock_init_recursive>
 8011860:	bd10      	pop	{r4, pc}
 8011862:	bf00      	nop
 8011864:	08011a45 	.word	0x08011a45
 8011868:	08011a67 	.word	0x08011a67
 801186c:	08011a9f 	.word	0x08011a9f
 8011870:	08011ac3 	.word	0x08011ac3
 8011874:	20008598 	.word	0x20008598

08011878 <stdio_exit_handler>:
 8011878:	4a02      	ldr	r2, [pc, #8]	@ (8011884 <stdio_exit_handler+0xc>)
 801187a:	4903      	ldr	r1, [pc, #12]	@ (8011888 <stdio_exit_handler+0x10>)
 801187c:	4803      	ldr	r0, [pc, #12]	@ (801188c <stdio_exit_handler+0x14>)
 801187e:	f000 b87b 	b.w	8011978 <_fwalk_sglue>
 8011882:	bf00      	nop
 8011884:	200000ac 	.word	0x200000ac
 8011888:	08012789 	.word	0x08012789
 801188c:	200000bc 	.word	0x200000bc

08011890 <cleanup_stdio>:
 8011890:	6841      	ldr	r1, [r0, #4]
 8011892:	4b0c      	ldr	r3, [pc, #48]	@ (80118c4 <cleanup_stdio+0x34>)
 8011894:	4299      	cmp	r1, r3
 8011896:	b510      	push	{r4, lr}
 8011898:	4604      	mov	r4, r0
 801189a:	d001      	beq.n	80118a0 <cleanup_stdio+0x10>
 801189c:	f000 ff74 	bl	8012788 <_fflush_r>
 80118a0:	68a1      	ldr	r1, [r4, #8]
 80118a2:	4b09      	ldr	r3, [pc, #36]	@ (80118c8 <cleanup_stdio+0x38>)
 80118a4:	4299      	cmp	r1, r3
 80118a6:	d002      	beq.n	80118ae <cleanup_stdio+0x1e>
 80118a8:	4620      	mov	r0, r4
 80118aa:	f000 ff6d 	bl	8012788 <_fflush_r>
 80118ae:	68e1      	ldr	r1, [r4, #12]
 80118b0:	4b06      	ldr	r3, [pc, #24]	@ (80118cc <cleanup_stdio+0x3c>)
 80118b2:	4299      	cmp	r1, r3
 80118b4:	d004      	beq.n	80118c0 <cleanup_stdio+0x30>
 80118b6:	4620      	mov	r0, r4
 80118b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118bc:	f000 bf64 	b.w	8012788 <_fflush_r>
 80118c0:	bd10      	pop	{r4, pc}
 80118c2:	bf00      	nop
 80118c4:	20008598 	.word	0x20008598
 80118c8:	20008600 	.word	0x20008600
 80118cc:	20008668 	.word	0x20008668

080118d0 <global_stdio_init.part.0>:
 80118d0:	b510      	push	{r4, lr}
 80118d2:	4b0b      	ldr	r3, [pc, #44]	@ (8011900 <global_stdio_init.part.0+0x30>)
 80118d4:	4c0b      	ldr	r4, [pc, #44]	@ (8011904 <global_stdio_init.part.0+0x34>)
 80118d6:	4a0c      	ldr	r2, [pc, #48]	@ (8011908 <global_stdio_init.part.0+0x38>)
 80118d8:	601a      	str	r2, [r3, #0]
 80118da:	4620      	mov	r0, r4
 80118dc:	2200      	movs	r2, #0
 80118de:	2104      	movs	r1, #4
 80118e0:	f7ff ff94 	bl	801180c <std>
 80118e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80118e8:	2201      	movs	r2, #1
 80118ea:	2109      	movs	r1, #9
 80118ec:	f7ff ff8e 	bl	801180c <std>
 80118f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80118f4:	2202      	movs	r2, #2
 80118f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118fa:	2112      	movs	r1, #18
 80118fc:	f7ff bf86 	b.w	801180c <std>
 8011900:	200086d0 	.word	0x200086d0
 8011904:	20008598 	.word	0x20008598
 8011908:	08011879 	.word	0x08011879

0801190c <__sfp_lock_acquire>:
 801190c:	4801      	ldr	r0, [pc, #4]	@ (8011914 <__sfp_lock_acquire+0x8>)
 801190e:	f000 b97a 	b.w	8011c06 <__retarget_lock_acquire_recursive>
 8011912:	bf00      	nop
 8011914:	200086d9 	.word	0x200086d9

08011918 <__sfp_lock_release>:
 8011918:	4801      	ldr	r0, [pc, #4]	@ (8011920 <__sfp_lock_release+0x8>)
 801191a:	f000 b975 	b.w	8011c08 <__retarget_lock_release_recursive>
 801191e:	bf00      	nop
 8011920:	200086d9 	.word	0x200086d9

08011924 <__sinit>:
 8011924:	b510      	push	{r4, lr}
 8011926:	4604      	mov	r4, r0
 8011928:	f7ff fff0 	bl	801190c <__sfp_lock_acquire>
 801192c:	6a23      	ldr	r3, [r4, #32]
 801192e:	b11b      	cbz	r3, 8011938 <__sinit+0x14>
 8011930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011934:	f7ff bff0 	b.w	8011918 <__sfp_lock_release>
 8011938:	4b04      	ldr	r3, [pc, #16]	@ (801194c <__sinit+0x28>)
 801193a:	6223      	str	r3, [r4, #32]
 801193c:	4b04      	ldr	r3, [pc, #16]	@ (8011950 <__sinit+0x2c>)
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d1f5      	bne.n	8011930 <__sinit+0xc>
 8011944:	f7ff ffc4 	bl	80118d0 <global_stdio_init.part.0>
 8011948:	e7f2      	b.n	8011930 <__sinit+0xc>
 801194a:	bf00      	nop
 801194c:	08011891 	.word	0x08011891
 8011950:	200086d0 	.word	0x200086d0

08011954 <fiprintf>:
 8011954:	b40e      	push	{r1, r2, r3}
 8011956:	b503      	push	{r0, r1, lr}
 8011958:	4601      	mov	r1, r0
 801195a:	ab03      	add	r3, sp, #12
 801195c:	4805      	ldr	r0, [pc, #20]	@ (8011974 <fiprintf+0x20>)
 801195e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011962:	6800      	ldr	r0, [r0, #0]
 8011964:	9301      	str	r3, [sp, #4]
 8011966:	f000 fbe7 	bl	8012138 <_vfiprintf_r>
 801196a:	b002      	add	sp, #8
 801196c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011970:	b003      	add	sp, #12
 8011972:	4770      	bx	lr
 8011974:	200000b8 	.word	0x200000b8

08011978 <_fwalk_sglue>:
 8011978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801197c:	4607      	mov	r7, r0
 801197e:	4688      	mov	r8, r1
 8011980:	4614      	mov	r4, r2
 8011982:	2600      	movs	r6, #0
 8011984:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011988:	f1b9 0901 	subs.w	r9, r9, #1
 801198c:	d505      	bpl.n	801199a <_fwalk_sglue+0x22>
 801198e:	6824      	ldr	r4, [r4, #0]
 8011990:	2c00      	cmp	r4, #0
 8011992:	d1f7      	bne.n	8011984 <_fwalk_sglue+0xc>
 8011994:	4630      	mov	r0, r6
 8011996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801199a:	89ab      	ldrh	r3, [r5, #12]
 801199c:	2b01      	cmp	r3, #1
 801199e:	d907      	bls.n	80119b0 <_fwalk_sglue+0x38>
 80119a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80119a4:	3301      	adds	r3, #1
 80119a6:	d003      	beq.n	80119b0 <_fwalk_sglue+0x38>
 80119a8:	4629      	mov	r1, r5
 80119aa:	4638      	mov	r0, r7
 80119ac:	47c0      	blx	r8
 80119ae:	4306      	orrs	r6, r0
 80119b0:	3568      	adds	r5, #104	@ 0x68
 80119b2:	e7e9      	b.n	8011988 <_fwalk_sglue+0x10>

080119b4 <iprintf>:
 80119b4:	b40f      	push	{r0, r1, r2, r3}
 80119b6:	b507      	push	{r0, r1, r2, lr}
 80119b8:	4906      	ldr	r1, [pc, #24]	@ (80119d4 <iprintf+0x20>)
 80119ba:	ab04      	add	r3, sp, #16
 80119bc:	6808      	ldr	r0, [r1, #0]
 80119be:	f853 2b04 	ldr.w	r2, [r3], #4
 80119c2:	6881      	ldr	r1, [r0, #8]
 80119c4:	9301      	str	r3, [sp, #4]
 80119c6:	f000 fbb7 	bl	8012138 <_vfiprintf_r>
 80119ca:	b003      	add	sp, #12
 80119cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80119d0:	b004      	add	sp, #16
 80119d2:	4770      	bx	lr
 80119d4:	200000b8 	.word	0x200000b8

080119d8 <sniprintf>:
 80119d8:	b40c      	push	{r2, r3}
 80119da:	b530      	push	{r4, r5, lr}
 80119dc:	4b18      	ldr	r3, [pc, #96]	@ (8011a40 <sniprintf+0x68>)
 80119de:	1e0c      	subs	r4, r1, #0
 80119e0:	681d      	ldr	r5, [r3, #0]
 80119e2:	b09d      	sub	sp, #116	@ 0x74
 80119e4:	da08      	bge.n	80119f8 <sniprintf+0x20>
 80119e6:	238b      	movs	r3, #139	@ 0x8b
 80119e8:	602b      	str	r3, [r5, #0]
 80119ea:	f04f 30ff 	mov.w	r0, #4294967295
 80119ee:	b01d      	add	sp, #116	@ 0x74
 80119f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80119f4:	b002      	add	sp, #8
 80119f6:	4770      	bx	lr
 80119f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80119fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011a00:	f04f 0300 	mov.w	r3, #0
 8011a04:	931b      	str	r3, [sp, #108]	@ 0x6c
 8011a06:	bf14      	ite	ne
 8011a08:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011a0c:	4623      	moveq	r3, r4
 8011a0e:	9304      	str	r3, [sp, #16]
 8011a10:	9307      	str	r3, [sp, #28]
 8011a12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011a16:	9002      	str	r0, [sp, #8]
 8011a18:	9006      	str	r0, [sp, #24]
 8011a1a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011a1e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011a20:	ab21      	add	r3, sp, #132	@ 0x84
 8011a22:	a902      	add	r1, sp, #8
 8011a24:	4628      	mov	r0, r5
 8011a26:	9301      	str	r3, [sp, #4]
 8011a28:	f000 fa60 	bl	8011eec <_svfiprintf_r>
 8011a2c:	1c43      	adds	r3, r0, #1
 8011a2e:	bfbc      	itt	lt
 8011a30:	238b      	movlt	r3, #139	@ 0x8b
 8011a32:	602b      	strlt	r3, [r5, #0]
 8011a34:	2c00      	cmp	r4, #0
 8011a36:	d0da      	beq.n	80119ee <sniprintf+0x16>
 8011a38:	9b02      	ldr	r3, [sp, #8]
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	701a      	strb	r2, [r3, #0]
 8011a3e:	e7d6      	b.n	80119ee <sniprintf+0x16>
 8011a40:	200000b8 	.word	0x200000b8

08011a44 <__sread>:
 8011a44:	b510      	push	{r4, lr}
 8011a46:	460c      	mov	r4, r1
 8011a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a4c:	f000 f892 	bl	8011b74 <_read_r>
 8011a50:	2800      	cmp	r0, #0
 8011a52:	bfab      	itete	ge
 8011a54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011a56:	89a3      	ldrhlt	r3, [r4, #12]
 8011a58:	181b      	addge	r3, r3, r0
 8011a5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011a5e:	bfac      	ite	ge
 8011a60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011a62:	81a3      	strhlt	r3, [r4, #12]
 8011a64:	bd10      	pop	{r4, pc}

08011a66 <__swrite>:
 8011a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a6a:	461f      	mov	r7, r3
 8011a6c:	898b      	ldrh	r3, [r1, #12]
 8011a6e:	05db      	lsls	r3, r3, #23
 8011a70:	4605      	mov	r5, r0
 8011a72:	460c      	mov	r4, r1
 8011a74:	4616      	mov	r6, r2
 8011a76:	d505      	bpl.n	8011a84 <__swrite+0x1e>
 8011a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a7c:	2302      	movs	r3, #2
 8011a7e:	2200      	movs	r2, #0
 8011a80:	f000 f866 	bl	8011b50 <_lseek_r>
 8011a84:	89a3      	ldrh	r3, [r4, #12]
 8011a86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011a8e:	81a3      	strh	r3, [r4, #12]
 8011a90:	4632      	mov	r2, r6
 8011a92:	463b      	mov	r3, r7
 8011a94:	4628      	mov	r0, r5
 8011a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a9a:	f000 b87d 	b.w	8011b98 <_write_r>

08011a9e <__sseek>:
 8011a9e:	b510      	push	{r4, lr}
 8011aa0:	460c      	mov	r4, r1
 8011aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011aa6:	f000 f853 	bl	8011b50 <_lseek_r>
 8011aaa:	1c43      	adds	r3, r0, #1
 8011aac:	89a3      	ldrh	r3, [r4, #12]
 8011aae:	bf15      	itete	ne
 8011ab0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011ab2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011ab6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011aba:	81a3      	strheq	r3, [r4, #12]
 8011abc:	bf18      	it	ne
 8011abe:	81a3      	strhne	r3, [r4, #12]
 8011ac0:	bd10      	pop	{r4, pc}

08011ac2 <__sclose>:
 8011ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ac6:	f000 b833 	b.w	8011b30 <_close_r>

08011aca <memcmp>:
 8011aca:	b510      	push	{r4, lr}
 8011acc:	3901      	subs	r1, #1
 8011ace:	4402      	add	r2, r0
 8011ad0:	4290      	cmp	r0, r2
 8011ad2:	d101      	bne.n	8011ad8 <memcmp+0xe>
 8011ad4:	2000      	movs	r0, #0
 8011ad6:	e005      	b.n	8011ae4 <memcmp+0x1a>
 8011ad8:	7803      	ldrb	r3, [r0, #0]
 8011ada:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011ade:	42a3      	cmp	r3, r4
 8011ae0:	d001      	beq.n	8011ae6 <memcmp+0x1c>
 8011ae2:	1b18      	subs	r0, r3, r4
 8011ae4:	bd10      	pop	{r4, pc}
 8011ae6:	3001      	adds	r0, #1
 8011ae8:	e7f2      	b.n	8011ad0 <memcmp+0x6>

08011aea <memmove>:
 8011aea:	4288      	cmp	r0, r1
 8011aec:	b510      	push	{r4, lr}
 8011aee:	eb01 0402 	add.w	r4, r1, r2
 8011af2:	d902      	bls.n	8011afa <memmove+0x10>
 8011af4:	4284      	cmp	r4, r0
 8011af6:	4623      	mov	r3, r4
 8011af8:	d807      	bhi.n	8011b0a <memmove+0x20>
 8011afa:	1e43      	subs	r3, r0, #1
 8011afc:	42a1      	cmp	r1, r4
 8011afe:	d008      	beq.n	8011b12 <memmove+0x28>
 8011b00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011b04:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011b08:	e7f8      	b.n	8011afc <memmove+0x12>
 8011b0a:	4402      	add	r2, r0
 8011b0c:	4601      	mov	r1, r0
 8011b0e:	428a      	cmp	r2, r1
 8011b10:	d100      	bne.n	8011b14 <memmove+0x2a>
 8011b12:	bd10      	pop	{r4, pc}
 8011b14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011b18:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011b1c:	e7f7      	b.n	8011b0e <memmove+0x24>

08011b1e <memset>:
 8011b1e:	4402      	add	r2, r0
 8011b20:	4603      	mov	r3, r0
 8011b22:	4293      	cmp	r3, r2
 8011b24:	d100      	bne.n	8011b28 <memset+0xa>
 8011b26:	4770      	bx	lr
 8011b28:	f803 1b01 	strb.w	r1, [r3], #1
 8011b2c:	e7f9      	b.n	8011b22 <memset+0x4>
	...

08011b30 <_close_r>:
 8011b30:	b538      	push	{r3, r4, r5, lr}
 8011b32:	4d06      	ldr	r5, [pc, #24]	@ (8011b4c <_close_r+0x1c>)
 8011b34:	2300      	movs	r3, #0
 8011b36:	4604      	mov	r4, r0
 8011b38:	4608      	mov	r0, r1
 8011b3a:	602b      	str	r3, [r5, #0]
 8011b3c:	f7ef fb2e 	bl	800119c <_close>
 8011b40:	1c43      	adds	r3, r0, #1
 8011b42:	d102      	bne.n	8011b4a <_close_r+0x1a>
 8011b44:	682b      	ldr	r3, [r5, #0]
 8011b46:	b103      	cbz	r3, 8011b4a <_close_r+0x1a>
 8011b48:	6023      	str	r3, [r4, #0]
 8011b4a:	bd38      	pop	{r3, r4, r5, pc}
 8011b4c:	200086d4 	.word	0x200086d4

08011b50 <_lseek_r>:
 8011b50:	b538      	push	{r3, r4, r5, lr}
 8011b52:	4d07      	ldr	r5, [pc, #28]	@ (8011b70 <_lseek_r+0x20>)
 8011b54:	4604      	mov	r4, r0
 8011b56:	4608      	mov	r0, r1
 8011b58:	4611      	mov	r1, r2
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	602a      	str	r2, [r5, #0]
 8011b5e:	461a      	mov	r2, r3
 8011b60:	f7ef fb43 	bl	80011ea <_lseek>
 8011b64:	1c43      	adds	r3, r0, #1
 8011b66:	d102      	bne.n	8011b6e <_lseek_r+0x1e>
 8011b68:	682b      	ldr	r3, [r5, #0]
 8011b6a:	b103      	cbz	r3, 8011b6e <_lseek_r+0x1e>
 8011b6c:	6023      	str	r3, [r4, #0]
 8011b6e:	bd38      	pop	{r3, r4, r5, pc}
 8011b70:	200086d4 	.word	0x200086d4

08011b74 <_read_r>:
 8011b74:	b538      	push	{r3, r4, r5, lr}
 8011b76:	4d07      	ldr	r5, [pc, #28]	@ (8011b94 <_read_r+0x20>)
 8011b78:	4604      	mov	r4, r0
 8011b7a:	4608      	mov	r0, r1
 8011b7c:	4611      	mov	r1, r2
 8011b7e:	2200      	movs	r2, #0
 8011b80:	602a      	str	r2, [r5, #0]
 8011b82:	461a      	mov	r2, r3
 8011b84:	f7ef fad1 	bl	800112a <_read>
 8011b88:	1c43      	adds	r3, r0, #1
 8011b8a:	d102      	bne.n	8011b92 <_read_r+0x1e>
 8011b8c:	682b      	ldr	r3, [r5, #0]
 8011b8e:	b103      	cbz	r3, 8011b92 <_read_r+0x1e>
 8011b90:	6023      	str	r3, [r4, #0]
 8011b92:	bd38      	pop	{r3, r4, r5, pc}
 8011b94:	200086d4 	.word	0x200086d4

08011b98 <_write_r>:
 8011b98:	b538      	push	{r3, r4, r5, lr}
 8011b9a:	4d07      	ldr	r5, [pc, #28]	@ (8011bb8 <_write_r+0x20>)
 8011b9c:	4604      	mov	r4, r0
 8011b9e:	4608      	mov	r0, r1
 8011ba0:	4611      	mov	r1, r2
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	602a      	str	r2, [r5, #0]
 8011ba6:	461a      	mov	r2, r3
 8011ba8:	f7ef fadc 	bl	8001164 <_write>
 8011bac:	1c43      	adds	r3, r0, #1
 8011bae:	d102      	bne.n	8011bb6 <_write_r+0x1e>
 8011bb0:	682b      	ldr	r3, [r5, #0]
 8011bb2:	b103      	cbz	r3, 8011bb6 <_write_r+0x1e>
 8011bb4:	6023      	str	r3, [r4, #0]
 8011bb6:	bd38      	pop	{r3, r4, r5, pc}
 8011bb8:	200086d4 	.word	0x200086d4

08011bbc <__libc_init_array>:
 8011bbc:	b570      	push	{r4, r5, r6, lr}
 8011bbe:	4d0d      	ldr	r5, [pc, #52]	@ (8011bf4 <__libc_init_array+0x38>)
 8011bc0:	4c0d      	ldr	r4, [pc, #52]	@ (8011bf8 <__libc_init_array+0x3c>)
 8011bc2:	1b64      	subs	r4, r4, r5
 8011bc4:	10a4      	asrs	r4, r4, #2
 8011bc6:	2600      	movs	r6, #0
 8011bc8:	42a6      	cmp	r6, r4
 8011bca:	d109      	bne.n	8011be0 <__libc_init_array+0x24>
 8011bcc:	4d0b      	ldr	r5, [pc, #44]	@ (8011bfc <__libc_init_array+0x40>)
 8011bce:	4c0c      	ldr	r4, [pc, #48]	@ (8011c00 <__libc_init_array+0x44>)
 8011bd0:	f000 ffa4 	bl	8012b1c <_init>
 8011bd4:	1b64      	subs	r4, r4, r5
 8011bd6:	10a4      	asrs	r4, r4, #2
 8011bd8:	2600      	movs	r6, #0
 8011bda:	42a6      	cmp	r6, r4
 8011bdc:	d105      	bne.n	8011bea <__libc_init_array+0x2e>
 8011bde:	bd70      	pop	{r4, r5, r6, pc}
 8011be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8011be4:	4798      	blx	r3
 8011be6:	3601      	adds	r6, #1
 8011be8:	e7ee      	b.n	8011bc8 <__libc_init_array+0xc>
 8011bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8011bee:	4798      	blx	r3
 8011bf0:	3601      	adds	r6, #1
 8011bf2:	e7f2      	b.n	8011bda <__libc_init_array+0x1e>
 8011bf4:	080159a4 	.word	0x080159a4
 8011bf8:	080159a4 	.word	0x080159a4
 8011bfc:	080159a4 	.word	0x080159a4
 8011c00:	080159a8 	.word	0x080159a8

08011c04 <__retarget_lock_init_recursive>:
 8011c04:	4770      	bx	lr

08011c06 <__retarget_lock_acquire_recursive>:
 8011c06:	4770      	bx	lr

08011c08 <__retarget_lock_release_recursive>:
 8011c08:	4770      	bx	lr

08011c0a <memcpy>:
 8011c0a:	440a      	add	r2, r1
 8011c0c:	4291      	cmp	r1, r2
 8011c0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8011c12:	d100      	bne.n	8011c16 <memcpy+0xc>
 8011c14:	4770      	bx	lr
 8011c16:	b510      	push	{r4, lr}
 8011c18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011c1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011c20:	4291      	cmp	r1, r2
 8011c22:	d1f9      	bne.n	8011c18 <memcpy+0xe>
 8011c24:	bd10      	pop	{r4, pc}

08011c26 <abort>:
 8011c26:	b508      	push	{r3, lr}
 8011c28:	2006      	movs	r0, #6
 8011c2a:	f000 fe91 	bl	8012950 <raise>
 8011c2e:	2001      	movs	r0, #1
 8011c30:	f7ef fa70 	bl	8001114 <_exit>

08011c34 <_free_r>:
 8011c34:	b538      	push	{r3, r4, r5, lr}
 8011c36:	4605      	mov	r5, r0
 8011c38:	2900      	cmp	r1, #0
 8011c3a:	d041      	beq.n	8011cc0 <_free_r+0x8c>
 8011c3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c40:	1f0c      	subs	r4, r1, #4
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	bfb8      	it	lt
 8011c46:	18e4      	addlt	r4, r4, r3
 8011c48:	f000 f8e8 	bl	8011e1c <__malloc_lock>
 8011c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8011cc4 <_free_r+0x90>)
 8011c4e:	6813      	ldr	r3, [r2, #0]
 8011c50:	b933      	cbnz	r3, 8011c60 <_free_r+0x2c>
 8011c52:	6063      	str	r3, [r4, #4]
 8011c54:	6014      	str	r4, [r2, #0]
 8011c56:	4628      	mov	r0, r5
 8011c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c5c:	f000 b8e4 	b.w	8011e28 <__malloc_unlock>
 8011c60:	42a3      	cmp	r3, r4
 8011c62:	d908      	bls.n	8011c76 <_free_r+0x42>
 8011c64:	6820      	ldr	r0, [r4, #0]
 8011c66:	1821      	adds	r1, r4, r0
 8011c68:	428b      	cmp	r3, r1
 8011c6a:	bf01      	itttt	eq
 8011c6c:	6819      	ldreq	r1, [r3, #0]
 8011c6e:	685b      	ldreq	r3, [r3, #4]
 8011c70:	1809      	addeq	r1, r1, r0
 8011c72:	6021      	streq	r1, [r4, #0]
 8011c74:	e7ed      	b.n	8011c52 <_free_r+0x1e>
 8011c76:	461a      	mov	r2, r3
 8011c78:	685b      	ldr	r3, [r3, #4]
 8011c7a:	b10b      	cbz	r3, 8011c80 <_free_r+0x4c>
 8011c7c:	42a3      	cmp	r3, r4
 8011c7e:	d9fa      	bls.n	8011c76 <_free_r+0x42>
 8011c80:	6811      	ldr	r1, [r2, #0]
 8011c82:	1850      	adds	r0, r2, r1
 8011c84:	42a0      	cmp	r0, r4
 8011c86:	d10b      	bne.n	8011ca0 <_free_r+0x6c>
 8011c88:	6820      	ldr	r0, [r4, #0]
 8011c8a:	4401      	add	r1, r0
 8011c8c:	1850      	adds	r0, r2, r1
 8011c8e:	4283      	cmp	r3, r0
 8011c90:	6011      	str	r1, [r2, #0]
 8011c92:	d1e0      	bne.n	8011c56 <_free_r+0x22>
 8011c94:	6818      	ldr	r0, [r3, #0]
 8011c96:	685b      	ldr	r3, [r3, #4]
 8011c98:	6053      	str	r3, [r2, #4]
 8011c9a:	4408      	add	r0, r1
 8011c9c:	6010      	str	r0, [r2, #0]
 8011c9e:	e7da      	b.n	8011c56 <_free_r+0x22>
 8011ca0:	d902      	bls.n	8011ca8 <_free_r+0x74>
 8011ca2:	230c      	movs	r3, #12
 8011ca4:	602b      	str	r3, [r5, #0]
 8011ca6:	e7d6      	b.n	8011c56 <_free_r+0x22>
 8011ca8:	6820      	ldr	r0, [r4, #0]
 8011caa:	1821      	adds	r1, r4, r0
 8011cac:	428b      	cmp	r3, r1
 8011cae:	bf04      	itt	eq
 8011cb0:	6819      	ldreq	r1, [r3, #0]
 8011cb2:	685b      	ldreq	r3, [r3, #4]
 8011cb4:	6063      	str	r3, [r4, #4]
 8011cb6:	bf04      	itt	eq
 8011cb8:	1809      	addeq	r1, r1, r0
 8011cba:	6021      	streq	r1, [r4, #0]
 8011cbc:	6054      	str	r4, [r2, #4]
 8011cbe:	e7ca      	b.n	8011c56 <_free_r+0x22>
 8011cc0:	bd38      	pop	{r3, r4, r5, pc}
 8011cc2:	bf00      	nop
 8011cc4:	200086e0 	.word	0x200086e0

08011cc8 <malloc>:
 8011cc8:	4b02      	ldr	r3, [pc, #8]	@ (8011cd4 <malloc+0xc>)
 8011cca:	4601      	mov	r1, r0
 8011ccc:	6818      	ldr	r0, [r3, #0]
 8011cce:	f000 b825 	b.w	8011d1c <_malloc_r>
 8011cd2:	bf00      	nop
 8011cd4:	200000b8 	.word	0x200000b8

08011cd8 <sbrk_aligned>:
 8011cd8:	b570      	push	{r4, r5, r6, lr}
 8011cda:	4e0f      	ldr	r6, [pc, #60]	@ (8011d18 <sbrk_aligned+0x40>)
 8011cdc:	460c      	mov	r4, r1
 8011cde:	6831      	ldr	r1, [r6, #0]
 8011ce0:	4605      	mov	r5, r0
 8011ce2:	b911      	cbnz	r1, 8011cea <sbrk_aligned+0x12>
 8011ce4:	f000 fe50 	bl	8012988 <_sbrk_r>
 8011ce8:	6030      	str	r0, [r6, #0]
 8011cea:	4621      	mov	r1, r4
 8011cec:	4628      	mov	r0, r5
 8011cee:	f000 fe4b 	bl	8012988 <_sbrk_r>
 8011cf2:	1c43      	adds	r3, r0, #1
 8011cf4:	d103      	bne.n	8011cfe <sbrk_aligned+0x26>
 8011cf6:	f04f 34ff 	mov.w	r4, #4294967295
 8011cfa:	4620      	mov	r0, r4
 8011cfc:	bd70      	pop	{r4, r5, r6, pc}
 8011cfe:	1cc4      	adds	r4, r0, #3
 8011d00:	f024 0403 	bic.w	r4, r4, #3
 8011d04:	42a0      	cmp	r0, r4
 8011d06:	d0f8      	beq.n	8011cfa <sbrk_aligned+0x22>
 8011d08:	1a21      	subs	r1, r4, r0
 8011d0a:	4628      	mov	r0, r5
 8011d0c:	f000 fe3c 	bl	8012988 <_sbrk_r>
 8011d10:	3001      	adds	r0, #1
 8011d12:	d1f2      	bne.n	8011cfa <sbrk_aligned+0x22>
 8011d14:	e7ef      	b.n	8011cf6 <sbrk_aligned+0x1e>
 8011d16:	bf00      	nop
 8011d18:	200086dc 	.word	0x200086dc

08011d1c <_malloc_r>:
 8011d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d20:	1ccd      	adds	r5, r1, #3
 8011d22:	f025 0503 	bic.w	r5, r5, #3
 8011d26:	3508      	adds	r5, #8
 8011d28:	2d0c      	cmp	r5, #12
 8011d2a:	bf38      	it	cc
 8011d2c:	250c      	movcc	r5, #12
 8011d2e:	2d00      	cmp	r5, #0
 8011d30:	4606      	mov	r6, r0
 8011d32:	db01      	blt.n	8011d38 <_malloc_r+0x1c>
 8011d34:	42a9      	cmp	r1, r5
 8011d36:	d904      	bls.n	8011d42 <_malloc_r+0x26>
 8011d38:	230c      	movs	r3, #12
 8011d3a:	6033      	str	r3, [r6, #0]
 8011d3c:	2000      	movs	r0, #0
 8011d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011e18 <_malloc_r+0xfc>
 8011d46:	f000 f869 	bl	8011e1c <__malloc_lock>
 8011d4a:	f8d8 3000 	ldr.w	r3, [r8]
 8011d4e:	461c      	mov	r4, r3
 8011d50:	bb44      	cbnz	r4, 8011da4 <_malloc_r+0x88>
 8011d52:	4629      	mov	r1, r5
 8011d54:	4630      	mov	r0, r6
 8011d56:	f7ff ffbf 	bl	8011cd8 <sbrk_aligned>
 8011d5a:	1c43      	adds	r3, r0, #1
 8011d5c:	4604      	mov	r4, r0
 8011d5e:	d158      	bne.n	8011e12 <_malloc_r+0xf6>
 8011d60:	f8d8 4000 	ldr.w	r4, [r8]
 8011d64:	4627      	mov	r7, r4
 8011d66:	2f00      	cmp	r7, #0
 8011d68:	d143      	bne.n	8011df2 <_malloc_r+0xd6>
 8011d6a:	2c00      	cmp	r4, #0
 8011d6c:	d04b      	beq.n	8011e06 <_malloc_r+0xea>
 8011d6e:	6823      	ldr	r3, [r4, #0]
 8011d70:	4639      	mov	r1, r7
 8011d72:	4630      	mov	r0, r6
 8011d74:	eb04 0903 	add.w	r9, r4, r3
 8011d78:	f000 fe06 	bl	8012988 <_sbrk_r>
 8011d7c:	4581      	cmp	r9, r0
 8011d7e:	d142      	bne.n	8011e06 <_malloc_r+0xea>
 8011d80:	6821      	ldr	r1, [r4, #0]
 8011d82:	1a6d      	subs	r5, r5, r1
 8011d84:	4629      	mov	r1, r5
 8011d86:	4630      	mov	r0, r6
 8011d88:	f7ff ffa6 	bl	8011cd8 <sbrk_aligned>
 8011d8c:	3001      	adds	r0, #1
 8011d8e:	d03a      	beq.n	8011e06 <_malloc_r+0xea>
 8011d90:	6823      	ldr	r3, [r4, #0]
 8011d92:	442b      	add	r3, r5
 8011d94:	6023      	str	r3, [r4, #0]
 8011d96:	f8d8 3000 	ldr.w	r3, [r8]
 8011d9a:	685a      	ldr	r2, [r3, #4]
 8011d9c:	bb62      	cbnz	r2, 8011df8 <_malloc_r+0xdc>
 8011d9e:	f8c8 7000 	str.w	r7, [r8]
 8011da2:	e00f      	b.n	8011dc4 <_malloc_r+0xa8>
 8011da4:	6822      	ldr	r2, [r4, #0]
 8011da6:	1b52      	subs	r2, r2, r5
 8011da8:	d420      	bmi.n	8011dec <_malloc_r+0xd0>
 8011daa:	2a0b      	cmp	r2, #11
 8011dac:	d917      	bls.n	8011dde <_malloc_r+0xc2>
 8011dae:	1961      	adds	r1, r4, r5
 8011db0:	42a3      	cmp	r3, r4
 8011db2:	6025      	str	r5, [r4, #0]
 8011db4:	bf18      	it	ne
 8011db6:	6059      	strne	r1, [r3, #4]
 8011db8:	6863      	ldr	r3, [r4, #4]
 8011dba:	bf08      	it	eq
 8011dbc:	f8c8 1000 	streq.w	r1, [r8]
 8011dc0:	5162      	str	r2, [r4, r5]
 8011dc2:	604b      	str	r3, [r1, #4]
 8011dc4:	4630      	mov	r0, r6
 8011dc6:	f000 f82f 	bl	8011e28 <__malloc_unlock>
 8011dca:	f104 000b 	add.w	r0, r4, #11
 8011dce:	1d23      	adds	r3, r4, #4
 8011dd0:	f020 0007 	bic.w	r0, r0, #7
 8011dd4:	1ac2      	subs	r2, r0, r3
 8011dd6:	bf1c      	itt	ne
 8011dd8:	1a1b      	subne	r3, r3, r0
 8011dda:	50a3      	strne	r3, [r4, r2]
 8011ddc:	e7af      	b.n	8011d3e <_malloc_r+0x22>
 8011dde:	6862      	ldr	r2, [r4, #4]
 8011de0:	42a3      	cmp	r3, r4
 8011de2:	bf0c      	ite	eq
 8011de4:	f8c8 2000 	streq.w	r2, [r8]
 8011de8:	605a      	strne	r2, [r3, #4]
 8011dea:	e7eb      	b.n	8011dc4 <_malloc_r+0xa8>
 8011dec:	4623      	mov	r3, r4
 8011dee:	6864      	ldr	r4, [r4, #4]
 8011df0:	e7ae      	b.n	8011d50 <_malloc_r+0x34>
 8011df2:	463c      	mov	r4, r7
 8011df4:	687f      	ldr	r7, [r7, #4]
 8011df6:	e7b6      	b.n	8011d66 <_malloc_r+0x4a>
 8011df8:	461a      	mov	r2, r3
 8011dfa:	685b      	ldr	r3, [r3, #4]
 8011dfc:	42a3      	cmp	r3, r4
 8011dfe:	d1fb      	bne.n	8011df8 <_malloc_r+0xdc>
 8011e00:	2300      	movs	r3, #0
 8011e02:	6053      	str	r3, [r2, #4]
 8011e04:	e7de      	b.n	8011dc4 <_malloc_r+0xa8>
 8011e06:	230c      	movs	r3, #12
 8011e08:	6033      	str	r3, [r6, #0]
 8011e0a:	4630      	mov	r0, r6
 8011e0c:	f000 f80c 	bl	8011e28 <__malloc_unlock>
 8011e10:	e794      	b.n	8011d3c <_malloc_r+0x20>
 8011e12:	6005      	str	r5, [r0, #0]
 8011e14:	e7d6      	b.n	8011dc4 <_malloc_r+0xa8>
 8011e16:	bf00      	nop
 8011e18:	200086e0 	.word	0x200086e0

08011e1c <__malloc_lock>:
 8011e1c:	4801      	ldr	r0, [pc, #4]	@ (8011e24 <__malloc_lock+0x8>)
 8011e1e:	f7ff bef2 	b.w	8011c06 <__retarget_lock_acquire_recursive>
 8011e22:	bf00      	nop
 8011e24:	200086d8 	.word	0x200086d8

08011e28 <__malloc_unlock>:
 8011e28:	4801      	ldr	r0, [pc, #4]	@ (8011e30 <__malloc_unlock+0x8>)
 8011e2a:	f7ff beed 	b.w	8011c08 <__retarget_lock_release_recursive>
 8011e2e:	bf00      	nop
 8011e30:	200086d8 	.word	0x200086d8

08011e34 <__ssputs_r>:
 8011e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e38:	688e      	ldr	r6, [r1, #8]
 8011e3a:	461f      	mov	r7, r3
 8011e3c:	42be      	cmp	r6, r7
 8011e3e:	680b      	ldr	r3, [r1, #0]
 8011e40:	4682      	mov	sl, r0
 8011e42:	460c      	mov	r4, r1
 8011e44:	4690      	mov	r8, r2
 8011e46:	d82d      	bhi.n	8011ea4 <__ssputs_r+0x70>
 8011e48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011e4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011e50:	d026      	beq.n	8011ea0 <__ssputs_r+0x6c>
 8011e52:	6965      	ldr	r5, [r4, #20]
 8011e54:	6909      	ldr	r1, [r1, #16]
 8011e56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011e5a:	eba3 0901 	sub.w	r9, r3, r1
 8011e5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011e62:	1c7b      	adds	r3, r7, #1
 8011e64:	444b      	add	r3, r9
 8011e66:	106d      	asrs	r5, r5, #1
 8011e68:	429d      	cmp	r5, r3
 8011e6a:	bf38      	it	cc
 8011e6c:	461d      	movcc	r5, r3
 8011e6e:	0553      	lsls	r3, r2, #21
 8011e70:	d527      	bpl.n	8011ec2 <__ssputs_r+0x8e>
 8011e72:	4629      	mov	r1, r5
 8011e74:	f7ff ff52 	bl	8011d1c <_malloc_r>
 8011e78:	4606      	mov	r6, r0
 8011e7a:	b360      	cbz	r0, 8011ed6 <__ssputs_r+0xa2>
 8011e7c:	6921      	ldr	r1, [r4, #16]
 8011e7e:	464a      	mov	r2, r9
 8011e80:	f7ff fec3 	bl	8011c0a <memcpy>
 8011e84:	89a3      	ldrh	r3, [r4, #12]
 8011e86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011e8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e8e:	81a3      	strh	r3, [r4, #12]
 8011e90:	6126      	str	r6, [r4, #16]
 8011e92:	6165      	str	r5, [r4, #20]
 8011e94:	444e      	add	r6, r9
 8011e96:	eba5 0509 	sub.w	r5, r5, r9
 8011e9a:	6026      	str	r6, [r4, #0]
 8011e9c:	60a5      	str	r5, [r4, #8]
 8011e9e:	463e      	mov	r6, r7
 8011ea0:	42be      	cmp	r6, r7
 8011ea2:	d900      	bls.n	8011ea6 <__ssputs_r+0x72>
 8011ea4:	463e      	mov	r6, r7
 8011ea6:	6820      	ldr	r0, [r4, #0]
 8011ea8:	4632      	mov	r2, r6
 8011eaa:	4641      	mov	r1, r8
 8011eac:	f7ff fe1d 	bl	8011aea <memmove>
 8011eb0:	68a3      	ldr	r3, [r4, #8]
 8011eb2:	1b9b      	subs	r3, r3, r6
 8011eb4:	60a3      	str	r3, [r4, #8]
 8011eb6:	6823      	ldr	r3, [r4, #0]
 8011eb8:	4433      	add	r3, r6
 8011eba:	6023      	str	r3, [r4, #0]
 8011ebc:	2000      	movs	r0, #0
 8011ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ec2:	462a      	mov	r2, r5
 8011ec4:	f000 fd70 	bl	80129a8 <_realloc_r>
 8011ec8:	4606      	mov	r6, r0
 8011eca:	2800      	cmp	r0, #0
 8011ecc:	d1e0      	bne.n	8011e90 <__ssputs_r+0x5c>
 8011ece:	6921      	ldr	r1, [r4, #16]
 8011ed0:	4650      	mov	r0, sl
 8011ed2:	f7ff feaf 	bl	8011c34 <_free_r>
 8011ed6:	230c      	movs	r3, #12
 8011ed8:	f8ca 3000 	str.w	r3, [sl]
 8011edc:	89a3      	ldrh	r3, [r4, #12]
 8011ede:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ee2:	81a3      	strh	r3, [r4, #12]
 8011ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ee8:	e7e9      	b.n	8011ebe <__ssputs_r+0x8a>
	...

08011eec <_svfiprintf_r>:
 8011eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ef0:	4698      	mov	r8, r3
 8011ef2:	898b      	ldrh	r3, [r1, #12]
 8011ef4:	061b      	lsls	r3, r3, #24
 8011ef6:	b09d      	sub	sp, #116	@ 0x74
 8011ef8:	4607      	mov	r7, r0
 8011efa:	460d      	mov	r5, r1
 8011efc:	4614      	mov	r4, r2
 8011efe:	d510      	bpl.n	8011f22 <_svfiprintf_r+0x36>
 8011f00:	690b      	ldr	r3, [r1, #16]
 8011f02:	b973      	cbnz	r3, 8011f22 <_svfiprintf_r+0x36>
 8011f04:	2140      	movs	r1, #64	@ 0x40
 8011f06:	f7ff ff09 	bl	8011d1c <_malloc_r>
 8011f0a:	6028      	str	r0, [r5, #0]
 8011f0c:	6128      	str	r0, [r5, #16]
 8011f0e:	b930      	cbnz	r0, 8011f1e <_svfiprintf_r+0x32>
 8011f10:	230c      	movs	r3, #12
 8011f12:	603b      	str	r3, [r7, #0]
 8011f14:	f04f 30ff 	mov.w	r0, #4294967295
 8011f18:	b01d      	add	sp, #116	@ 0x74
 8011f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f1e:	2340      	movs	r3, #64	@ 0x40
 8011f20:	616b      	str	r3, [r5, #20]
 8011f22:	2300      	movs	r3, #0
 8011f24:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f26:	2320      	movs	r3, #32
 8011f28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011f2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f30:	2330      	movs	r3, #48	@ 0x30
 8011f32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80120d0 <_svfiprintf_r+0x1e4>
 8011f36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011f3a:	f04f 0901 	mov.w	r9, #1
 8011f3e:	4623      	mov	r3, r4
 8011f40:	469a      	mov	sl, r3
 8011f42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f46:	b10a      	cbz	r2, 8011f4c <_svfiprintf_r+0x60>
 8011f48:	2a25      	cmp	r2, #37	@ 0x25
 8011f4a:	d1f9      	bne.n	8011f40 <_svfiprintf_r+0x54>
 8011f4c:	ebba 0b04 	subs.w	fp, sl, r4
 8011f50:	d00b      	beq.n	8011f6a <_svfiprintf_r+0x7e>
 8011f52:	465b      	mov	r3, fp
 8011f54:	4622      	mov	r2, r4
 8011f56:	4629      	mov	r1, r5
 8011f58:	4638      	mov	r0, r7
 8011f5a:	f7ff ff6b 	bl	8011e34 <__ssputs_r>
 8011f5e:	3001      	adds	r0, #1
 8011f60:	f000 80a7 	beq.w	80120b2 <_svfiprintf_r+0x1c6>
 8011f64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011f66:	445a      	add	r2, fp
 8011f68:	9209      	str	r2, [sp, #36]	@ 0x24
 8011f6a:	f89a 3000 	ldrb.w	r3, [sl]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	f000 809f 	beq.w	80120b2 <_svfiprintf_r+0x1c6>
 8011f74:	2300      	movs	r3, #0
 8011f76:	f04f 32ff 	mov.w	r2, #4294967295
 8011f7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f7e:	f10a 0a01 	add.w	sl, sl, #1
 8011f82:	9304      	str	r3, [sp, #16]
 8011f84:	9307      	str	r3, [sp, #28]
 8011f86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011f8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8011f8c:	4654      	mov	r4, sl
 8011f8e:	2205      	movs	r2, #5
 8011f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f94:	484e      	ldr	r0, [pc, #312]	@ (80120d0 <_svfiprintf_r+0x1e4>)
 8011f96:	f7ee f91b 	bl	80001d0 <memchr>
 8011f9a:	9a04      	ldr	r2, [sp, #16]
 8011f9c:	b9d8      	cbnz	r0, 8011fd6 <_svfiprintf_r+0xea>
 8011f9e:	06d0      	lsls	r0, r2, #27
 8011fa0:	bf44      	itt	mi
 8011fa2:	2320      	movmi	r3, #32
 8011fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011fa8:	0711      	lsls	r1, r2, #28
 8011faa:	bf44      	itt	mi
 8011fac:	232b      	movmi	r3, #43	@ 0x2b
 8011fae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011fb2:	f89a 3000 	ldrb.w	r3, [sl]
 8011fb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8011fb8:	d015      	beq.n	8011fe6 <_svfiprintf_r+0xfa>
 8011fba:	9a07      	ldr	r2, [sp, #28]
 8011fbc:	4654      	mov	r4, sl
 8011fbe:	2000      	movs	r0, #0
 8011fc0:	f04f 0c0a 	mov.w	ip, #10
 8011fc4:	4621      	mov	r1, r4
 8011fc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011fca:	3b30      	subs	r3, #48	@ 0x30
 8011fcc:	2b09      	cmp	r3, #9
 8011fce:	d94b      	bls.n	8012068 <_svfiprintf_r+0x17c>
 8011fd0:	b1b0      	cbz	r0, 8012000 <_svfiprintf_r+0x114>
 8011fd2:	9207      	str	r2, [sp, #28]
 8011fd4:	e014      	b.n	8012000 <_svfiprintf_r+0x114>
 8011fd6:	eba0 0308 	sub.w	r3, r0, r8
 8011fda:	fa09 f303 	lsl.w	r3, r9, r3
 8011fde:	4313      	orrs	r3, r2
 8011fe0:	9304      	str	r3, [sp, #16]
 8011fe2:	46a2      	mov	sl, r4
 8011fe4:	e7d2      	b.n	8011f8c <_svfiprintf_r+0xa0>
 8011fe6:	9b03      	ldr	r3, [sp, #12]
 8011fe8:	1d19      	adds	r1, r3, #4
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	9103      	str	r1, [sp, #12]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	bfbb      	ittet	lt
 8011ff2:	425b      	neglt	r3, r3
 8011ff4:	f042 0202 	orrlt.w	r2, r2, #2
 8011ff8:	9307      	strge	r3, [sp, #28]
 8011ffa:	9307      	strlt	r3, [sp, #28]
 8011ffc:	bfb8      	it	lt
 8011ffe:	9204      	strlt	r2, [sp, #16]
 8012000:	7823      	ldrb	r3, [r4, #0]
 8012002:	2b2e      	cmp	r3, #46	@ 0x2e
 8012004:	d10a      	bne.n	801201c <_svfiprintf_r+0x130>
 8012006:	7863      	ldrb	r3, [r4, #1]
 8012008:	2b2a      	cmp	r3, #42	@ 0x2a
 801200a:	d132      	bne.n	8012072 <_svfiprintf_r+0x186>
 801200c:	9b03      	ldr	r3, [sp, #12]
 801200e:	1d1a      	adds	r2, r3, #4
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	9203      	str	r2, [sp, #12]
 8012014:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012018:	3402      	adds	r4, #2
 801201a:	9305      	str	r3, [sp, #20]
 801201c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80120e0 <_svfiprintf_r+0x1f4>
 8012020:	7821      	ldrb	r1, [r4, #0]
 8012022:	2203      	movs	r2, #3
 8012024:	4650      	mov	r0, sl
 8012026:	f7ee f8d3 	bl	80001d0 <memchr>
 801202a:	b138      	cbz	r0, 801203c <_svfiprintf_r+0x150>
 801202c:	9b04      	ldr	r3, [sp, #16]
 801202e:	eba0 000a 	sub.w	r0, r0, sl
 8012032:	2240      	movs	r2, #64	@ 0x40
 8012034:	4082      	lsls	r2, r0
 8012036:	4313      	orrs	r3, r2
 8012038:	3401      	adds	r4, #1
 801203a:	9304      	str	r3, [sp, #16]
 801203c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012040:	4824      	ldr	r0, [pc, #144]	@ (80120d4 <_svfiprintf_r+0x1e8>)
 8012042:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012046:	2206      	movs	r2, #6
 8012048:	f7ee f8c2 	bl	80001d0 <memchr>
 801204c:	2800      	cmp	r0, #0
 801204e:	d036      	beq.n	80120be <_svfiprintf_r+0x1d2>
 8012050:	4b21      	ldr	r3, [pc, #132]	@ (80120d8 <_svfiprintf_r+0x1ec>)
 8012052:	bb1b      	cbnz	r3, 801209c <_svfiprintf_r+0x1b0>
 8012054:	9b03      	ldr	r3, [sp, #12]
 8012056:	3307      	adds	r3, #7
 8012058:	f023 0307 	bic.w	r3, r3, #7
 801205c:	3308      	adds	r3, #8
 801205e:	9303      	str	r3, [sp, #12]
 8012060:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012062:	4433      	add	r3, r6
 8012064:	9309      	str	r3, [sp, #36]	@ 0x24
 8012066:	e76a      	b.n	8011f3e <_svfiprintf_r+0x52>
 8012068:	fb0c 3202 	mla	r2, ip, r2, r3
 801206c:	460c      	mov	r4, r1
 801206e:	2001      	movs	r0, #1
 8012070:	e7a8      	b.n	8011fc4 <_svfiprintf_r+0xd8>
 8012072:	2300      	movs	r3, #0
 8012074:	3401      	adds	r4, #1
 8012076:	9305      	str	r3, [sp, #20]
 8012078:	4619      	mov	r1, r3
 801207a:	f04f 0c0a 	mov.w	ip, #10
 801207e:	4620      	mov	r0, r4
 8012080:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012084:	3a30      	subs	r2, #48	@ 0x30
 8012086:	2a09      	cmp	r2, #9
 8012088:	d903      	bls.n	8012092 <_svfiprintf_r+0x1a6>
 801208a:	2b00      	cmp	r3, #0
 801208c:	d0c6      	beq.n	801201c <_svfiprintf_r+0x130>
 801208e:	9105      	str	r1, [sp, #20]
 8012090:	e7c4      	b.n	801201c <_svfiprintf_r+0x130>
 8012092:	fb0c 2101 	mla	r1, ip, r1, r2
 8012096:	4604      	mov	r4, r0
 8012098:	2301      	movs	r3, #1
 801209a:	e7f0      	b.n	801207e <_svfiprintf_r+0x192>
 801209c:	ab03      	add	r3, sp, #12
 801209e:	9300      	str	r3, [sp, #0]
 80120a0:	462a      	mov	r2, r5
 80120a2:	4b0e      	ldr	r3, [pc, #56]	@ (80120dc <_svfiprintf_r+0x1f0>)
 80120a4:	a904      	add	r1, sp, #16
 80120a6:	4638      	mov	r0, r7
 80120a8:	f3af 8000 	nop.w
 80120ac:	1c42      	adds	r2, r0, #1
 80120ae:	4606      	mov	r6, r0
 80120b0:	d1d6      	bne.n	8012060 <_svfiprintf_r+0x174>
 80120b2:	89ab      	ldrh	r3, [r5, #12]
 80120b4:	065b      	lsls	r3, r3, #25
 80120b6:	f53f af2d 	bmi.w	8011f14 <_svfiprintf_r+0x28>
 80120ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80120bc:	e72c      	b.n	8011f18 <_svfiprintf_r+0x2c>
 80120be:	ab03      	add	r3, sp, #12
 80120c0:	9300      	str	r3, [sp, #0]
 80120c2:	462a      	mov	r2, r5
 80120c4:	4b05      	ldr	r3, [pc, #20]	@ (80120dc <_svfiprintf_r+0x1f0>)
 80120c6:	a904      	add	r1, sp, #16
 80120c8:	4638      	mov	r0, r7
 80120ca:	f000 f9bb 	bl	8012444 <_printf_i>
 80120ce:	e7ed      	b.n	80120ac <_svfiprintf_r+0x1c0>
 80120d0:	08015967 	.word	0x08015967
 80120d4:	08015971 	.word	0x08015971
 80120d8:	00000000 	.word	0x00000000
 80120dc:	08011e35 	.word	0x08011e35
 80120e0:	0801596d 	.word	0x0801596d

080120e4 <__sfputc_r>:
 80120e4:	6893      	ldr	r3, [r2, #8]
 80120e6:	3b01      	subs	r3, #1
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	b410      	push	{r4}
 80120ec:	6093      	str	r3, [r2, #8]
 80120ee:	da08      	bge.n	8012102 <__sfputc_r+0x1e>
 80120f0:	6994      	ldr	r4, [r2, #24]
 80120f2:	42a3      	cmp	r3, r4
 80120f4:	db01      	blt.n	80120fa <__sfputc_r+0x16>
 80120f6:	290a      	cmp	r1, #10
 80120f8:	d103      	bne.n	8012102 <__sfputc_r+0x1e>
 80120fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120fe:	f000 bb6b 	b.w	80127d8 <__swbuf_r>
 8012102:	6813      	ldr	r3, [r2, #0]
 8012104:	1c58      	adds	r0, r3, #1
 8012106:	6010      	str	r0, [r2, #0]
 8012108:	7019      	strb	r1, [r3, #0]
 801210a:	4608      	mov	r0, r1
 801210c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012110:	4770      	bx	lr

08012112 <__sfputs_r>:
 8012112:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012114:	4606      	mov	r6, r0
 8012116:	460f      	mov	r7, r1
 8012118:	4614      	mov	r4, r2
 801211a:	18d5      	adds	r5, r2, r3
 801211c:	42ac      	cmp	r4, r5
 801211e:	d101      	bne.n	8012124 <__sfputs_r+0x12>
 8012120:	2000      	movs	r0, #0
 8012122:	e007      	b.n	8012134 <__sfputs_r+0x22>
 8012124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012128:	463a      	mov	r2, r7
 801212a:	4630      	mov	r0, r6
 801212c:	f7ff ffda 	bl	80120e4 <__sfputc_r>
 8012130:	1c43      	adds	r3, r0, #1
 8012132:	d1f3      	bne.n	801211c <__sfputs_r+0xa>
 8012134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012138 <_vfiprintf_r>:
 8012138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801213c:	460d      	mov	r5, r1
 801213e:	b09d      	sub	sp, #116	@ 0x74
 8012140:	4614      	mov	r4, r2
 8012142:	4698      	mov	r8, r3
 8012144:	4606      	mov	r6, r0
 8012146:	b118      	cbz	r0, 8012150 <_vfiprintf_r+0x18>
 8012148:	6a03      	ldr	r3, [r0, #32]
 801214a:	b90b      	cbnz	r3, 8012150 <_vfiprintf_r+0x18>
 801214c:	f7ff fbea 	bl	8011924 <__sinit>
 8012150:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012152:	07d9      	lsls	r1, r3, #31
 8012154:	d405      	bmi.n	8012162 <_vfiprintf_r+0x2a>
 8012156:	89ab      	ldrh	r3, [r5, #12]
 8012158:	059a      	lsls	r2, r3, #22
 801215a:	d402      	bmi.n	8012162 <_vfiprintf_r+0x2a>
 801215c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801215e:	f7ff fd52 	bl	8011c06 <__retarget_lock_acquire_recursive>
 8012162:	89ab      	ldrh	r3, [r5, #12]
 8012164:	071b      	lsls	r3, r3, #28
 8012166:	d501      	bpl.n	801216c <_vfiprintf_r+0x34>
 8012168:	692b      	ldr	r3, [r5, #16]
 801216a:	b99b      	cbnz	r3, 8012194 <_vfiprintf_r+0x5c>
 801216c:	4629      	mov	r1, r5
 801216e:	4630      	mov	r0, r6
 8012170:	f000 fb70 	bl	8012854 <__swsetup_r>
 8012174:	b170      	cbz	r0, 8012194 <_vfiprintf_r+0x5c>
 8012176:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012178:	07dc      	lsls	r4, r3, #31
 801217a:	d504      	bpl.n	8012186 <_vfiprintf_r+0x4e>
 801217c:	f04f 30ff 	mov.w	r0, #4294967295
 8012180:	b01d      	add	sp, #116	@ 0x74
 8012182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012186:	89ab      	ldrh	r3, [r5, #12]
 8012188:	0598      	lsls	r0, r3, #22
 801218a:	d4f7      	bmi.n	801217c <_vfiprintf_r+0x44>
 801218c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801218e:	f7ff fd3b 	bl	8011c08 <__retarget_lock_release_recursive>
 8012192:	e7f3      	b.n	801217c <_vfiprintf_r+0x44>
 8012194:	2300      	movs	r3, #0
 8012196:	9309      	str	r3, [sp, #36]	@ 0x24
 8012198:	2320      	movs	r3, #32
 801219a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801219e:	f8cd 800c 	str.w	r8, [sp, #12]
 80121a2:	2330      	movs	r3, #48	@ 0x30
 80121a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012354 <_vfiprintf_r+0x21c>
 80121a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80121ac:	f04f 0901 	mov.w	r9, #1
 80121b0:	4623      	mov	r3, r4
 80121b2:	469a      	mov	sl, r3
 80121b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80121b8:	b10a      	cbz	r2, 80121be <_vfiprintf_r+0x86>
 80121ba:	2a25      	cmp	r2, #37	@ 0x25
 80121bc:	d1f9      	bne.n	80121b2 <_vfiprintf_r+0x7a>
 80121be:	ebba 0b04 	subs.w	fp, sl, r4
 80121c2:	d00b      	beq.n	80121dc <_vfiprintf_r+0xa4>
 80121c4:	465b      	mov	r3, fp
 80121c6:	4622      	mov	r2, r4
 80121c8:	4629      	mov	r1, r5
 80121ca:	4630      	mov	r0, r6
 80121cc:	f7ff ffa1 	bl	8012112 <__sfputs_r>
 80121d0:	3001      	adds	r0, #1
 80121d2:	f000 80a7 	beq.w	8012324 <_vfiprintf_r+0x1ec>
 80121d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80121d8:	445a      	add	r2, fp
 80121da:	9209      	str	r2, [sp, #36]	@ 0x24
 80121dc:	f89a 3000 	ldrb.w	r3, [sl]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	f000 809f 	beq.w	8012324 <_vfiprintf_r+0x1ec>
 80121e6:	2300      	movs	r3, #0
 80121e8:	f04f 32ff 	mov.w	r2, #4294967295
 80121ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80121f0:	f10a 0a01 	add.w	sl, sl, #1
 80121f4:	9304      	str	r3, [sp, #16]
 80121f6:	9307      	str	r3, [sp, #28]
 80121f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80121fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80121fe:	4654      	mov	r4, sl
 8012200:	2205      	movs	r2, #5
 8012202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012206:	4853      	ldr	r0, [pc, #332]	@ (8012354 <_vfiprintf_r+0x21c>)
 8012208:	f7ed ffe2 	bl	80001d0 <memchr>
 801220c:	9a04      	ldr	r2, [sp, #16]
 801220e:	b9d8      	cbnz	r0, 8012248 <_vfiprintf_r+0x110>
 8012210:	06d1      	lsls	r1, r2, #27
 8012212:	bf44      	itt	mi
 8012214:	2320      	movmi	r3, #32
 8012216:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801221a:	0713      	lsls	r3, r2, #28
 801221c:	bf44      	itt	mi
 801221e:	232b      	movmi	r3, #43	@ 0x2b
 8012220:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012224:	f89a 3000 	ldrb.w	r3, [sl]
 8012228:	2b2a      	cmp	r3, #42	@ 0x2a
 801222a:	d015      	beq.n	8012258 <_vfiprintf_r+0x120>
 801222c:	9a07      	ldr	r2, [sp, #28]
 801222e:	4654      	mov	r4, sl
 8012230:	2000      	movs	r0, #0
 8012232:	f04f 0c0a 	mov.w	ip, #10
 8012236:	4621      	mov	r1, r4
 8012238:	f811 3b01 	ldrb.w	r3, [r1], #1
 801223c:	3b30      	subs	r3, #48	@ 0x30
 801223e:	2b09      	cmp	r3, #9
 8012240:	d94b      	bls.n	80122da <_vfiprintf_r+0x1a2>
 8012242:	b1b0      	cbz	r0, 8012272 <_vfiprintf_r+0x13a>
 8012244:	9207      	str	r2, [sp, #28]
 8012246:	e014      	b.n	8012272 <_vfiprintf_r+0x13a>
 8012248:	eba0 0308 	sub.w	r3, r0, r8
 801224c:	fa09 f303 	lsl.w	r3, r9, r3
 8012250:	4313      	orrs	r3, r2
 8012252:	9304      	str	r3, [sp, #16]
 8012254:	46a2      	mov	sl, r4
 8012256:	e7d2      	b.n	80121fe <_vfiprintf_r+0xc6>
 8012258:	9b03      	ldr	r3, [sp, #12]
 801225a:	1d19      	adds	r1, r3, #4
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	9103      	str	r1, [sp, #12]
 8012260:	2b00      	cmp	r3, #0
 8012262:	bfbb      	ittet	lt
 8012264:	425b      	neglt	r3, r3
 8012266:	f042 0202 	orrlt.w	r2, r2, #2
 801226a:	9307      	strge	r3, [sp, #28]
 801226c:	9307      	strlt	r3, [sp, #28]
 801226e:	bfb8      	it	lt
 8012270:	9204      	strlt	r2, [sp, #16]
 8012272:	7823      	ldrb	r3, [r4, #0]
 8012274:	2b2e      	cmp	r3, #46	@ 0x2e
 8012276:	d10a      	bne.n	801228e <_vfiprintf_r+0x156>
 8012278:	7863      	ldrb	r3, [r4, #1]
 801227a:	2b2a      	cmp	r3, #42	@ 0x2a
 801227c:	d132      	bne.n	80122e4 <_vfiprintf_r+0x1ac>
 801227e:	9b03      	ldr	r3, [sp, #12]
 8012280:	1d1a      	adds	r2, r3, #4
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	9203      	str	r2, [sp, #12]
 8012286:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801228a:	3402      	adds	r4, #2
 801228c:	9305      	str	r3, [sp, #20]
 801228e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012364 <_vfiprintf_r+0x22c>
 8012292:	7821      	ldrb	r1, [r4, #0]
 8012294:	2203      	movs	r2, #3
 8012296:	4650      	mov	r0, sl
 8012298:	f7ed ff9a 	bl	80001d0 <memchr>
 801229c:	b138      	cbz	r0, 80122ae <_vfiprintf_r+0x176>
 801229e:	9b04      	ldr	r3, [sp, #16]
 80122a0:	eba0 000a 	sub.w	r0, r0, sl
 80122a4:	2240      	movs	r2, #64	@ 0x40
 80122a6:	4082      	lsls	r2, r0
 80122a8:	4313      	orrs	r3, r2
 80122aa:	3401      	adds	r4, #1
 80122ac:	9304      	str	r3, [sp, #16]
 80122ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122b2:	4829      	ldr	r0, [pc, #164]	@ (8012358 <_vfiprintf_r+0x220>)
 80122b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80122b8:	2206      	movs	r2, #6
 80122ba:	f7ed ff89 	bl	80001d0 <memchr>
 80122be:	2800      	cmp	r0, #0
 80122c0:	d03f      	beq.n	8012342 <_vfiprintf_r+0x20a>
 80122c2:	4b26      	ldr	r3, [pc, #152]	@ (801235c <_vfiprintf_r+0x224>)
 80122c4:	bb1b      	cbnz	r3, 801230e <_vfiprintf_r+0x1d6>
 80122c6:	9b03      	ldr	r3, [sp, #12]
 80122c8:	3307      	adds	r3, #7
 80122ca:	f023 0307 	bic.w	r3, r3, #7
 80122ce:	3308      	adds	r3, #8
 80122d0:	9303      	str	r3, [sp, #12]
 80122d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122d4:	443b      	add	r3, r7
 80122d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80122d8:	e76a      	b.n	80121b0 <_vfiprintf_r+0x78>
 80122da:	fb0c 3202 	mla	r2, ip, r2, r3
 80122de:	460c      	mov	r4, r1
 80122e0:	2001      	movs	r0, #1
 80122e2:	e7a8      	b.n	8012236 <_vfiprintf_r+0xfe>
 80122e4:	2300      	movs	r3, #0
 80122e6:	3401      	adds	r4, #1
 80122e8:	9305      	str	r3, [sp, #20]
 80122ea:	4619      	mov	r1, r3
 80122ec:	f04f 0c0a 	mov.w	ip, #10
 80122f0:	4620      	mov	r0, r4
 80122f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122f6:	3a30      	subs	r2, #48	@ 0x30
 80122f8:	2a09      	cmp	r2, #9
 80122fa:	d903      	bls.n	8012304 <_vfiprintf_r+0x1cc>
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d0c6      	beq.n	801228e <_vfiprintf_r+0x156>
 8012300:	9105      	str	r1, [sp, #20]
 8012302:	e7c4      	b.n	801228e <_vfiprintf_r+0x156>
 8012304:	fb0c 2101 	mla	r1, ip, r1, r2
 8012308:	4604      	mov	r4, r0
 801230a:	2301      	movs	r3, #1
 801230c:	e7f0      	b.n	80122f0 <_vfiprintf_r+0x1b8>
 801230e:	ab03      	add	r3, sp, #12
 8012310:	9300      	str	r3, [sp, #0]
 8012312:	462a      	mov	r2, r5
 8012314:	4b12      	ldr	r3, [pc, #72]	@ (8012360 <_vfiprintf_r+0x228>)
 8012316:	a904      	add	r1, sp, #16
 8012318:	4630      	mov	r0, r6
 801231a:	f3af 8000 	nop.w
 801231e:	4607      	mov	r7, r0
 8012320:	1c78      	adds	r0, r7, #1
 8012322:	d1d6      	bne.n	80122d2 <_vfiprintf_r+0x19a>
 8012324:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012326:	07d9      	lsls	r1, r3, #31
 8012328:	d405      	bmi.n	8012336 <_vfiprintf_r+0x1fe>
 801232a:	89ab      	ldrh	r3, [r5, #12]
 801232c:	059a      	lsls	r2, r3, #22
 801232e:	d402      	bmi.n	8012336 <_vfiprintf_r+0x1fe>
 8012330:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012332:	f7ff fc69 	bl	8011c08 <__retarget_lock_release_recursive>
 8012336:	89ab      	ldrh	r3, [r5, #12]
 8012338:	065b      	lsls	r3, r3, #25
 801233a:	f53f af1f 	bmi.w	801217c <_vfiprintf_r+0x44>
 801233e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012340:	e71e      	b.n	8012180 <_vfiprintf_r+0x48>
 8012342:	ab03      	add	r3, sp, #12
 8012344:	9300      	str	r3, [sp, #0]
 8012346:	462a      	mov	r2, r5
 8012348:	4b05      	ldr	r3, [pc, #20]	@ (8012360 <_vfiprintf_r+0x228>)
 801234a:	a904      	add	r1, sp, #16
 801234c:	4630      	mov	r0, r6
 801234e:	f000 f879 	bl	8012444 <_printf_i>
 8012352:	e7e4      	b.n	801231e <_vfiprintf_r+0x1e6>
 8012354:	08015967 	.word	0x08015967
 8012358:	08015971 	.word	0x08015971
 801235c:	00000000 	.word	0x00000000
 8012360:	08012113 	.word	0x08012113
 8012364:	0801596d 	.word	0x0801596d

08012368 <_printf_common>:
 8012368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801236c:	4616      	mov	r6, r2
 801236e:	4698      	mov	r8, r3
 8012370:	688a      	ldr	r2, [r1, #8]
 8012372:	690b      	ldr	r3, [r1, #16]
 8012374:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012378:	4293      	cmp	r3, r2
 801237a:	bfb8      	it	lt
 801237c:	4613      	movlt	r3, r2
 801237e:	6033      	str	r3, [r6, #0]
 8012380:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012384:	4607      	mov	r7, r0
 8012386:	460c      	mov	r4, r1
 8012388:	b10a      	cbz	r2, 801238e <_printf_common+0x26>
 801238a:	3301      	adds	r3, #1
 801238c:	6033      	str	r3, [r6, #0]
 801238e:	6823      	ldr	r3, [r4, #0]
 8012390:	0699      	lsls	r1, r3, #26
 8012392:	bf42      	ittt	mi
 8012394:	6833      	ldrmi	r3, [r6, #0]
 8012396:	3302      	addmi	r3, #2
 8012398:	6033      	strmi	r3, [r6, #0]
 801239a:	6825      	ldr	r5, [r4, #0]
 801239c:	f015 0506 	ands.w	r5, r5, #6
 80123a0:	d106      	bne.n	80123b0 <_printf_common+0x48>
 80123a2:	f104 0a19 	add.w	sl, r4, #25
 80123a6:	68e3      	ldr	r3, [r4, #12]
 80123a8:	6832      	ldr	r2, [r6, #0]
 80123aa:	1a9b      	subs	r3, r3, r2
 80123ac:	42ab      	cmp	r3, r5
 80123ae:	dc26      	bgt.n	80123fe <_printf_common+0x96>
 80123b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80123b4:	6822      	ldr	r2, [r4, #0]
 80123b6:	3b00      	subs	r3, #0
 80123b8:	bf18      	it	ne
 80123ba:	2301      	movne	r3, #1
 80123bc:	0692      	lsls	r2, r2, #26
 80123be:	d42b      	bmi.n	8012418 <_printf_common+0xb0>
 80123c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80123c4:	4641      	mov	r1, r8
 80123c6:	4638      	mov	r0, r7
 80123c8:	47c8      	blx	r9
 80123ca:	3001      	adds	r0, #1
 80123cc:	d01e      	beq.n	801240c <_printf_common+0xa4>
 80123ce:	6823      	ldr	r3, [r4, #0]
 80123d0:	6922      	ldr	r2, [r4, #16]
 80123d2:	f003 0306 	and.w	r3, r3, #6
 80123d6:	2b04      	cmp	r3, #4
 80123d8:	bf02      	ittt	eq
 80123da:	68e5      	ldreq	r5, [r4, #12]
 80123dc:	6833      	ldreq	r3, [r6, #0]
 80123de:	1aed      	subeq	r5, r5, r3
 80123e0:	68a3      	ldr	r3, [r4, #8]
 80123e2:	bf0c      	ite	eq
 80123e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80123e8:	2500      	movne	r5, #0
 80123ea:	4293      	cmp	r3, r2
 80123ec:	bfc4      	itt	gt
 80123ee:	1a9b      	subgt	r3, r3, r2
 80123f0:	18ed      	addgt	r5, r5, r3
 80123f2:	2600      	movs	r6, #0
 80123f4:	341a      	adds	r4, #26
 80123f6:	42b5      	cmp	r5, r6
 80123f8:	d11a      	bne.n	8012430 <_printf_common+0xc8>
 80123fa:	2000      	movs	r0, #0
 80123fc:	e008      	b.n	8012410 <_printf_common+0xa8>
 80123fe:	2301      	movs	r3, #1
 8012400:	4652      	mov	r2, sl
 8012402:	4641      	mov	r1, r8
 8012404:	4638      	mov	r0, r7
 8012406:	47c8      	blx	r9
 8012408:	3001      	adds	r0, #1
 801240a:	d103      	bne.n	8012414 <_printf_common+0xac>
 801240c:	f04f 30ff 	mov.w	r0, #4294967295
 8012410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012414:	3501      	adds	r5, #1
 8012416:	e7c6      	b.n	80123a6 <_printf_common+0x3e>
 8012418:	18e1      	adds	r1, r4, r3
 801241a:	1c5a      	adds	r2, r3, #1
 801241c:	2030      	movs	r0, #48	@ 0x30
 801241e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012422:	4422      	add	r2, r4
 8012424:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012428:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801242c:	3302      	adds	r3, #2
 801242e:	e7c7      	b.n	80123c0 <_printf_common+0x58>
 8012430:	2301      	movs	r3, #1
 8012432:	4622      	mov	r2, r4
 8012434:	4641      	mov	r1, r8
 8012436:	4638      	mov	r0, r7
 8012438:	47c8      	blx	r9
 801243a:	3001      	adds	r0, #1
 801243c:	d0e6      	beq.n	801240c <_printf_common+0xa4>
 801243e:	3601      	adds	r6, #1
 8012440:	e7d9      	b.n	80123f6 <_printf_common+0x8e>
	...

08012444 <_printf_i>:
 8012444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012448:	7e0f      	ldrb	r7, [r1, #24]
 801244a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801244c:	2f78      	cmp	r7, #120	@ 0x78
 801244e:	4691      	mov	r9, r2
 8012450:	4680      	mov	r8, r0
 8012452:	460c      	mov	r4, r1
 8012454:	469a      	mov	sl, r3
 8012456:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801245a:	d807      	bhi.n	801246c <_printf_i+0x28>
 801245c:	2f62      	cmp	r7, #98	@ 0x62
 801245e:	d80a      	bhi.n	8012476 <_printf_i+0x32>
 8012460:	2f00      	cmp	r7, #0
 8012462:	f000 80d1 	beq.w	8012608 <_printf_i+0x1c4>
 8012466:	2f58      	cmp	r7, #88	@ 0x58
 8012468:	f000 80b8 	beq.w	80125dc <_printf_i+0x198>
 801246c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012470:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012474:	e03a      	b.n	80124ec <_printf_i+0xa8>
 8012476:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801247a:	2b15      	cmp	r3, #21
 801247c:	d8f6      	bhi.n	801246c <_printf_i+0x28>
 801247e:	a101      	add	r1, pc, #4	@ (adr r1, 8012484 <_printf_i+0x40>)
 8012480:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012484:	080124dd 	.word	0x080124dd
 8012488:	080124f1 	.word	0x080124f1
 801248c:	0801246d 	.word	0x0801246d
 8012490:	0801246d 	.word	0x0801246d
 8012494:	0801246d 	.word	0x0801246d
 8012498:	0801246d 	.word	0x0801246d
 801249c:	080124f1 	.word	0x080124f1
 80124a0:	0801246d 	.word	0x0801246d
 80124a4:	0801246d 	.word	0x0801246d
 80124a8:	0801246d 	.word	0x0801246d
 80124ac:	0801246d 	.word	0x0801246d
 80124b0:	080125ef 	.word	0x080125ef
 80124b4:	0801251b 	.word	0x0801251b
 80124b8:	080125a9 	.word	0x080125a9
 80124bc:	0801246d 	.word	0x0801246d
 80124c0:	0801246d 	.word	0x0801246d
 80124c4:	08012611 	.word	0x08012611
 80124c8:	0801246d 	.word	0x0801246d
 80124cc:	0801251b 	.word	0x0801251b
 80124d0:	0801246d 	.word	0x0801246d
 80124d4:	0801246d 	.word	0x0801246d
 80124d8:	080125b1 	.word	0x080125b1
 80124dc:	6833      	ldr	r3, [r6, #0]
 80124de:	1d1a      	adds	r2, r3, #4
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	6032      	str	r2, [r6, #0]
 80124e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80124e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80124ec:	2301      	movs	r3, #1
 80124ee:	e09c      	b.n	801262a <_printf_i+0x1e6>
 80124f0:	6833      	ldr	r3, [r6, #0]
 80124f2:	6820      	ldr	r0, [r4, #0]
 80124f4:	1d19      	adds	r1, r3, #4
 80124f6:	6031      	str	r1, [r6, #0]
 80124f8:	0606      	lsls	r6, r0, #24
 80124fa:	d501      	bpl.n	8012500 <_printf_i+0xbc>
 80124fc:	681d      	ldr	r5, [r3, #0]
 80124fe:	e003      	b.n	8012508 <_printf_i+0xc4>
 8012500:	0645      	lsls	r5, r0, #25
 8012502:	d5fb      	bpl.n	80124fc <_printf_i+0xb8>
 8012504:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012508:	2d00      	cmp	r5, #0
 801250a:	da03      	bge.n	8012514 <_printf_i+0xd0>
 801250c:	232d      	movs	r3, #45	@ 0x2d
 801250e:	426d      	negs	r5, r5
 8012510:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012514:	4858      	ldr	r0, [pc, #352]	@ (8012678 <_printf_i+0x234>)
 8012516:	230a      	movs	r3, #10
 8012518:	e011      	b.n	801253e <_printf_i+0xfa>
 801251a:	6821      	ldr	r1, [r4, #0]
 801251c:	6833      	ldr	r3, [r6, #0]
 801251e:	0608      	lsls	r0, r1, #24
 8012520:	f853 5b04 	ldr.w	r5, [r3], #4
 8012524:	d402      	bmi.n	801252c <_printf_i+0xe8>
 8012526:	0649      	lsls	r1, r1, #25
 8012528:	bf48      	it	mi
 801252a:	b2ad      	uxthmi	r5, r5
 801252c:	2f6f      	cmp	r7, #111	@ 0x6f
 801252e:	4852      	ldr	r0, [pc, #328]	@ (8012678 <_printf_i+0x234>)
 8012530:	6033      	str	r3, [r6, #0]
 8012532:	bf14      	ite	ne
 8012534:	230a      	movne	r3, #10
 8012536:	2308      	moveq	r3, #8
 8012538:	2100      	movs	r1, #0
 801253a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801253e:	6866      	ldr	r6, [r4, #4]
 8012540:	60a6      	str	r6, [r4, #8]
 8012542:	2e00      	cmp	r6, #0
 8012544:	db05      	blt.n	8012552 <_printf_i+0x10e>
 8012546:	6821      	ldr	r1, [r4, #0]
 8012548:	432e      	orrs	r6, r5
 801254a:	f021 0104 	bic.w	r1, r1, #4
 801254e:	6021      	str	r1, [r4, #0]
 8012550:	d04b      	beq.n	80125ea <_printf_i+0x1a6>
 8012552:	4616      	mov	r6, r2
 8012554:	fbb5 f1f3 	udiv	r1, r5, r3
 8012558:	fb03 5711 	mls	r7, r3, r1, r5
 801255c:	5dc7      	ldrb	r7, [r0, r7]
 801255e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012562:	462f      	mov	r7, r5
 8012564:	42bb      	cmp	r3, r7
 8012566:	460d      	mov	r5, r1
 8012568:	d9f4      	bls.n	8012554 <_printf_i+0x110>
 801256a:	2b08      	cmp	r3, #8
 801256c:	d10b      	bne.n	8012586 <_printf_i+0x142>
 801256e:	6823      	ldr	r3, [r4, #0]
 8012570:	07df      	lsls	r7, r3, #31
 8012572:	d508      	bpl.n	8012586 <_printf_i+0x142>
 8012574:	6923      	ldr	r3, [r4, #16]
 8012576:	6861      	ldr	r1, [r4, #4]
 8012578:	4299      	cmp	r1, r3
 801257a:	bfde      	ittt	le
 801257c:	2330      	movle	r3, #48	@ 0x30
 801257e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012582:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012586:	1b92      	subs	r2, r2, r6
 8012588:	6122      	str	r2, [r4, #16]
 801258a:	f8cd a000 	str.w	sl, [sp]
 801258e:	464b      	mov	r3, r9
 8012590:	aa03      	add	r2, sp, #12
 8012592:	4621      	mov	r1, r4
 8012594:	4640      	mov	r0, r8
 8012596:	f7ff fee7 	bl	8012368 <_printf_common>
 801259a:	3001      	adds	r0, #1
 801259c:	d14a      	bne.n	8012634 <_printf_i+0x1f0>
 801259e:	f04f 30ff 	mov.w	r0, #4294967295
 80125a2:	b004      	add	sp, #16
 80125a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125a8:	6823      	ldr	r3, [r4, #0]
 80125aa:	f043 0320 	orr.w	r3, r3, #32
 80125ae:	6023      	str	r3, [r4, #0]
 80125b0:	4832      	ldr	r0, [pc, #200]	@ (801267c <_printf_i+0x238>)
 80125b2:	2778      	movs	r7, #120	@ 0x78
 80125b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80125b8:	6823      	ldr	r3, [r4, #0]
 80125ba:	6831      	ldr	r1, [r6, #0]
 80125bc:	061f      	lsls	r7, r3, #24
 80125be:	f851 5b04 	ldr.w	r5, [r1], #4
 80125c2:	d402      	bmi.n	80125ca <_printf_i+0x186>
 80125c4:	065f      	lsls	r7, r3, #25
 80125c6:	bf48      	it	mi
 80125c8:	b2ad      	uxthmi	r5, r5
 80125ca:	6031      	str	r1, [r6, #0]
 80125cc:	07d9      	lsls	r1, r3, #31
 80125ce:	bf44      	itt	mi
 80125d0:	f043 0320 	orrmi.w	r3, r3, #32
 80125d4:	6023      	strmi	r3, [r4, #0]
 80125d6:	b11d      	cbz	r5, 80125e0 <_printf_i+0x19c>
 80125d8:	2310      	movs	r3, #16
 80125da:	e7ad      	b.n	8012538 <_printf_i+0xf4>
 80125dc:	4826      	ldr	r0, [pc, #152]	@ (8012678 <_printf_i+0x234>)
 80125de:	e7e9      	b.n	80125b4 <_printf_i+0x170>
 80125e0:	6823      	ldr	r3, [r4, #0]
 80125e2:	f023 0320 	bic.w	r3, r3, #32
 80125e6:	6023      	str	r3, [r4, #0]
 80125e8:	e7f6      	b.n	80125d8 <_printf_i+0x194>
 80125ea:	4616      	mov	r6, r2
 80125ec:	e7bd      	b.n	801256a <_printf_i+0x126>
 80125ee:	6833      	ldr	r3, [r6, #0]
 80125f0:	6825      	ldr	r5, [r4, #0]
 80125f2:	6961      	ldr	r1, [r4, #20]
 80125f4:	1d18      	adds	r0, r3, #4
 80125f6:	6030      	str	r0, [r6, #0]
 80125f8:	062e      	lsls	r6, r5, #24
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	d501      	bpl.n	8012602 <_printf_i+0x1be>
 80125fe:	6019      	str	r1, [r3, #0]
 8012600:	e002      	b.n	8012608 <_printf_i+0x1c4>
 8012602:	0668      	lsls	r0, r5, #25
 8012604:	d5fb      	bpl.n	80125fe <_printf_i+0x1ba>
 8012606:	8019      	strh	r1, [r3, #0]
 8012608:	2300      	movs	r3, #0
 801260a:	6123      	str	r3, [r4, #16]
 801260c:	4616      	mov	r6, r2
 801260e:	e7bc      	b.n	801258a <_printf_i+0x146>
 8012610:	6833      	ldr	r3, [r6, #0]
 8012612:	1d1a      	adds	r2, r3, #4
 8012614:	6032      	str	r2, [r6, #0]
 8012616:	681e      	ldr	r6, [r3, #0]
 8012618:	6862      	ldr	r2, [r4, #4]
 801261a:	2100      	movs	r1, #0
 801261c:	4630      	mov	r0, r6
 801261e:	f7ed fdd7 	bl	80001d0 <memchr>
 8012622:	b108      	cbz	r0, 8012628 <_printf_i+0x1e4>
 8012624:	1b80      	subs	r0, r0, r6
 8012626:	6060      	str	r0, [r4, #4]
 8012628:	6863      	ldr	r3, [r4, #4]
 801262a:	6123      	str	r3, [r4, #16]
 801262c:	2300      	movs	r3, #0
 801262e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012632:	e7aa      	b.n	801258a <_printf_i+0x146>
 8012634:	6923      	ldr	r3, [r4, #16]
 8012636:	4632      	mov	r2, r6
 8012638:	4649      	mov	r1, r9
 801263a:	4640      	mov	r0, r8
 801263c:	47d0      	blx	sl
 801263e:	3001      	adds	r0, #1
 8012640:	d0ad      	beq.n	801259e <_printf_i+0x15a>
 8012642:	6823      	ldr	r3, [r4, #0]
 8012644:	079b      	lsls	r3, r3, #30
 8012646:	d413      	bmi.n	8012670 <_printf_i+0x22c>
 8012648:	68e0      	ldr	r0, [r4, #12]
 801264a:	9b03      	ldr	r3, [sp, #12]
 801264c:	4298      	cmp	r0, r3
 801264e:	bfb8      	it	lt
 8012650:	4618      	movlt	r0, r3
 8012652:	e7a6      	b.n	80125a2 <_printf_i+0x15e>
 8012654:	2301      	movs	r3, #1
 8012656:	4632      	mov	r2, r6
 8012658:	4649      	mov	r1, r9
 801265a:	4640      	mov	r0, r8
 801265c:	47d0      	blx	sl
 801265e:	3001      	adds	r0, #1
 8012660:	d09d      	beq.n	801259e <_printf_i+0x15a>
 8012662:	3501      	adds	r5, #1
 8012664:	68e3      	ldr	r3, [r4, #12]
 8012666:	9903      	ldr	r1, [sp, #12]
 8012668:	1a5b      	subs	r3, r3, r1
 801266a:	42ab      	cmp	r3, r5
 801266c:	dcf2      	bgt.n	8012654 <_printf_i+0x210>
 801266e:	e7eb      	b.n	8012648 <_printf_i+0x204>
 8012670:	2500      	movs	r5, #0
 8012672:	f104 0619 	add.w	r6, r4, #25
 8012676:	e7f5      	b.n	8012664 <_printf_i+0x220>
 8012678:	08015978 	.word	0x08015978
 801267c:	08015989 	.word	0x08015989

08012680 <__sflush_r>:
 8012680:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012688:	0716      	lsls	r6, r2, #28
 801268a:	4605      	mov	r5, r0
 801268c:	460c      	mov	r4, r1
 801268e:	d454      	bmi.n	801273a <__sflush_r+0xba>
 8012690:	684b      	ldr	r3, [r1, #4]
 8012692:	2b00      	cmp	r3, #0
 8012694:	dc02      	bgt.n	801269c <__sflush_r+0x1c>
 8012696:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012698:	2b00      	cmp	r3, #0
 801269a:	dd48      	ble.n	801272e <__sflush_r+0xae>
 801269c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801269e:	2e00      	cmp	r6, #0
 80126a0:	d045      	beq.n	801272e <__sflush_r+0xae>
 80126a2:	2300      	movs	r3, #0
 80126a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80126a8:	682f      	ldr	r7, [r5, #0]
 80126aa:	6a21      	ldr	r1, [r4, #32]
 80126ac:	602b      	str	r3, [r5, #0]
 80126ae:	d030      	beq.n	8012712 <__sflush_r+0x92>
 80126b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80126b2:	89a3      	ldrh	r3, [r4, #12]
 80126b4:	0759      	lsls	r1, r3, #29
 80126b6:	d505      	bpl.n	80126c4 <__sflush_r+0x44>
 80126b8:	6863      	ldr	r3, [r4, #4]
 80126ba:	1ad2      	subs	r2, r2, r3
 80126bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80126be:	b10b      	cbz	r3, 80126c4 <__sflush_r+0x44>
 80126c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80126c2:	1ad2      	subs	r2, r2, r3
 80126c4:	2300      	movs	r3, #0
 80126c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80126c8:	6a21      	ldr	r1, [r4, #32]
 80126ca:	4628      	mov	r0, r5
 80126cc:	47b0      	blx	r6
 80126ce:	1c43      	adds	r3, r0, #1
 80126d0:	89a3      	ldrh	r3, [r4, #12]
 80126d2:	d106      	bne.n	80126e2 <__sflush_r+0x62>
 80126d4:	6829      	ldr	r1, [r5, #0]
 80126d6:	291d      	cmp	r1, #29
 80126d8:	d82b      	bhi.n	8012732 <__sflush_r+0xb2>
 80126da:	4a2a      	ldr	r2, [pc, #168]	@ (8012784 <__sflush_r+0x104>)
 80126dc:	40ca      	lsrs	r2, r1
 80126de:	07d6      	lsls	r6, r2, #31
 80126e0:	d527      	bpl.n	8012732 <__sflush_r+0xb2>
 80126e2:	2200      	movs	r2, #0
 80126e4:	6062      	str	r2, [r4, #4]
 80126e6:	04d9      	lsls	r1, r3, #19
 80126e8:	6922      	ldr	r2, [r4, #16]
 80126ea:	6022      	str	r2, [r4, #0]
 80126ec:	d504      	bpl.n	80126f8 <__sflush_r+0x78>
 80126ee:	1c42      	adds	r2, r0, #1
 80126f0:	d101      	bne.n	80126f6 <__sflush_r+0x76>
 80126f2:	682b      	ldr	r3, [r5, #0]
 80126f4:	b903      	cbnz	r3, 80126f8 <__sflush_r+0x78>
 80126f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80126f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80126fa:	602f      	str	r7, [r5, #0]
 80126fc:	b1b9      	cbz	r1, 801272e <__sflush_r+0xae>
 80126fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012702:	4299      	cmp	r1, r3
 8012704:	d002      	beq.n	801270c <__sflush_r+0x8c>
 8012706:	4628      	mov	r0, r5
 8012708:	f7ff fa94 	bl	8011c34 <_free_r>
 801270c:	2300      	movs	r3, #0
 801270e:	6363      	str	r3, [r4, #52]	@ 0x34
 8012710:	e00d      	b.n	801272e <__sflush_r+0xae>
 8012712:	2301      	movs	r3, #1
 8012714:	4628      	mov	r0, r5
 8012716:	47b0      	blx	r6
 8012718:	4602      	mov	r2, r0
 801271a:	1c50      	adds	r0, r2, #1
 801271c:	d1c9      	bne.n	80126b2 <__sflush_r+0x32>
 801271e:	682b      	ldr	r3, [r5, #0]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d0c6      	beq.n	80126b2 <__sflush_r+0x32>
 8012724:	2b1d      	cmp	r3, #29
 8012726:	d001      	beq.n	801272c <__sflush_r+0xac>
 8012728:	2b16      	cmp	r3, #22
 801272a:	d11e      	bne.n	801276a <__sflush_r+0xea>
 801272c:	602f      	str	r7, [r5, #0]
 801272e:	2000      	movs	r0, #0
 8012730:	e022      	b.n	8012778 <__sflush_r+0xf8>
 8012732:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012736:	b21b      	sxth	r3, r3
 8012738:	e01b      	b.n	8012772 <__sflush_r+0xf2>
 801273a:	690f      	ldr	r7, [r1, #16]
 801273c:	2f00      	cmp	r7, #0
 801273e:	d0f6      	beq.n	801272e <__sflush_r+0xae>
 8012740:	0793      	lsls	r3, r2, #30
 8012742:	680e      	ldr	r6, [r1, #0]
 8012744:	bf08      	it	eq
 8012746:	694b      	ldreq	r3, [r1, #20]
 8012748:	600f      	str	r7, [r1, #0]
 801274a:	bf18      	it	ne
 801274c:	2300      	movne	r3, #0
 801274e:	eba6 0807 	sub.w	r8, r6, r7
 8012752:	608b      	str	r3, [r1, #8]
 8012754:	f1b8 0f00 	cmp.w	r8, #0
 8012758:	dde9      	ble.n	801272e <__sflush_r+0xae>
 801275a:	6a21      	ldr	r1, [r4, #32]
 801275c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801275e:	4643      	mov	r3, r8
 8012760:	463a      	mov	r2, r7
 8012762:	4628      	mov	r0, r5
 8012764:	47b0      	blx	r6
 8012766:	2800      	cmp	r0, #0
 8012768:	dc08      	bgt.n	801277c <__sflush_r+0xfc>
 801276a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801276e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012772:	81a3      	strh	r3, [r4, #12]
 8012774:	f04f 30ff 	mov.w	r0, #4294967295
 8012778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801277c:	4407      	add	r7, r0
 801277e:	eba8 0800 	sub.w	r8, r8, r0
 8012782:	e7e7      	b.n	8012754 <__sflush_r+0xd4>
 8012784:	20400001 	.word	0x20400001

08012788 <_fflush_r>:
 8012788:	b538      	push	{r3, r4, r5, lr}
 801278a:	690b      	ldr	r3, [r1, #16]
 801278c:	4605      	mov	r5, r0
 801278e:	460c      	mov	r4, r1
 8012790:	b913      	cbnz	r3, 8012798 <_fflush_r+0x10>
 8012792:	2500      	movs	r5, #0
 8012794:	4628      	mov	r0, r5
 8012796:	bd38      	pop	{r3, r4, r5, pc}
 8012798:	b118      	cbz	r0, 80127a2 <_fflush_r+0x1a>
 801279a:	6a03      	ldr	r3, [r0, #32]
 801279c:	b90b      	cbnz	r3, 80127a2 <_fflush_r+0x1a>
 801279e:	f7ff f8c1 	bl	8011924 <__sinit>
 80127a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d0f3      	beq.n	8012792 <_fflush_r+0xa>
 80127aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80127ac:	07d0      	lsls	r0, r2, #31
 80127ae:	d404      	bmi.n	80127ba <_fflush_r+0x32>
 80127b0:	0599      	lsls	r1, r3, #22
 80127b2:	d402      	bmi.n	80127ba <_fflush_r+0x32>
 80127b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80127b6:	f7ff fa26 	bl	8011c06 <__retarget_lock_acquire_recursive>
 80127ba:	4628      	mov	r0, r5
 80127bc:	4621      	mov	r1, r4
 80127be:	f7ff ff5f 	bl	8012680 <__sflush_r>
 80127c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80127c4:	07da      	lsls	r2, r3, #31
 80127c6:	4605      	mov	r5, r0
 80127c8:	d4e4      	bmi.n	8012794 <_fflush_r+0xc>
 80127ca:	89a3      	ldrh	r3, [r4, #12]
 80127cc:	059b      	lsls	r3, r3, #22
 80127ce:	d4e1      	bmi.n	8012794 <_fflush_r+0xc>
 80127d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80127d2:	f7ff fa19 	bl	8011c08 <__retarget_lock_release_recursive>
 80127d6:	e7dd      	b.n	8012794 <_fflush_r+0xc>

080127d8 <__swbuf_r>:
 80127d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127da:	460e      	mov	r6, r1
 80127dc:	4614      	mov	r4, r2
 80127de:	4605      	mov	r5, r0
 80127e0:	b118      	cbz	r0, 80127ea <__swbuf_r+0x12>
 80127e2:	6a03      	ldr	r3, [r0, #32]
 80127e4:	b90b      	cbnz	r3, 80127ea <__swbuf_r+0x12>
 80127e6:	f7ff f89d 	bl	8011924 <__sinit>
 80127ea:	69a3      	ldr	r3, [r4, #24]
 80127ec:	60a3      	str	r3, [r4, #8]
 80127ee:	89a3      	ldrh	r3, [r4, #12]
 80127f0:	071a      	lsls	r2, r3, #28
 80127f2:	d501      	bpl.n	80127f8 <__swbuf_r+0x20>
 80127f4:	6923      	ldr	r3, [r4, #16]
 80127f6:	b943      	cbnz	r3, 801280a <__swbuf_r+0x32>
 80127f8:	4621      	mov	r1, r4
 80127fa:	4628      	mov	r0, r5
 80127fc:	f000 f82a 	bl	8012854 <__swsetup_r>
 8012800:	b118      	cbz	r0, 801280a <__swbuf_r+0x32>
 8012802:	f04f 37ff 	mov.w	r7, #4294967295
 8012806:	4638      	mov	r0, r7
 8012808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801280a:	6823      	ldr	r3, [r4, #0]
 801280c:	6922      	ldr	r2, [r4, #16]
 801280e:	1a98      	subs	r0, r3, r2
 8012810:	6963      	ldr	r3, [r4, #20]
 8012812:	b2f6      	uxtb	r6, r6
 8012814:	4283      	cmp	r3, r0
 8012816:	4637      	mov	r7, r6
 8012818:	dc05      	bgt.n	8012826 <__swbuf_r+0x4e>
 801281a:	4621      	mov	r1, r4
 801281c:	4628      	mov	r0, r5
 801281e:	f7ff ffb3 	bl	8012788 <_fflush_r>
 8012822:	2800      	cmp	r0, #0
 8012824:	d1ed      	bne.n	8012802 <__swbuf_r+0x2a>
 8012826:	68a3      	ldr	r3, [r4, #8]
 8012828:	3b01      	subs	r3, #1
 801282a:	60a3      	str	r3, [r4, #8]
 801282c:	6823      	ldr	r3, [r4, #0]
 801282e:	1c5a      	adds	r2, r3, #1
 8012830:	6022      	str	r2, [r4, #0]
 8012832:	701e      	strb	r6, [r3, #0]
 8012834:	6962      	ldr	r2, [r4, #20]
 8012836:	1c43      	adds	r3, r0, #1
 8012838:	429a      	cmp	r2, r3
 801283a:	d004      	beq.n	8012846 <__swbuf_r+0x6e>
 801283c:	89a3      	ldrh	r3, [r4, #12]
 801283e:	07db      	lsls	r3, r3, #31
 8012840:	d5e1      	bpl.n	8012806 <__swbuf_r+0x2e>
 8012842:	2e0a      	cmp	r6, #10
 8012844:	d1df      	bne.n	8012806 <__swbuf_r+0x2e>
 8012846:	4621      	mov	r1, r4
 8012848:	4628      	mov	r0, r5
 801284a:	f7ff ff9d 	bl	8012788 <_fflush_r>
 801284e:	2800      	cmp	r0, #0
 8012850:	d0d9      	beq.n	8012806 <__swbuf_r+0x2e>
 8012852:	e7d6      	b.n	8012802 <__swbuf_r+0x2a>

08012854 <__swsetup_r>:
 8012854:	b538      	push	{r3, r4, r5, lr}
 8012856:	4b29      	ldr	r3, [pc, #164]	@ (80128fc <__swsetup_r+0xa8>)
 8012858:	4605      	mov	r5, r0
 801285a:	6818      	ldr	r0, [r3, #0]
 801285c:	460c      	mov	r4, r1
 801285e:	b118      	cbz	r0, 8012868 <__swsetup_r+0x14>
 8012860:	6a03      	ldr	r3, [r0, #32]
 8012862:	b90b      	cbnz	r3, 8012868 <__swsetup_r+0x14>
 8012864:	f7ff f85e 	bl	8011924 <__sinit>
 8012868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801286c:	0719      	lsls	r1, r3, #28
 801286e:	d422      	bmi.n	80128b6 <__swsetup_r+0x62>
 8012870:	06da      	lsls	r2, r3, #27
 8012872:	d407      	bmi.n	8012884 <__swsetup_r+0x30>
 8012874:	2209      	movs	r2, #9
 8012876:	602a      	str	r2, [r5, #0]
 8012878:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801287c:	81a3      	strh	r3, [r4, #12]
 801287e:	f04f 30ff 	mov.w	r0, #4294967295
 8012882:	e033      	b.n	80128ec <__swsetup_r+0x98>
 8012884:	0758      	lsls	r0, r3, #29
 8012886:	d512      	bpl.n	80128ae <__swsetup_r+0x5a>
 8012888:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801288a:	b141      	cbz	r1, 801289e <__swsetup_r+0x4a>
 801288c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012890:	4299      	cmp	r1, r3
 8012892:	d002      	beq.n	801289a <__swsetup_r+0x46>
 8012894:	4628      	mov	r0, r5
 8012896:	f7ff f9cd 	bl	8011c34 <_free_r>
 801289a:	2300      	movs	r3, #0
 801289c:	6363      	str	r3, [r4, #52]	@ 0x34
 801289e:	89a3      	ldrh	r3, [r4, #12]
 80128a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80128a4:	81a3      	strh	r3, [r4, #12]
 80128a6:	2300      	movs	r3, #0
 80128a8:	6063      	str	r3, [r4, #4]
 80128aa:	6923      	ldr	r3, [r4, #16]
 80128ac:	6023      	str	r3, [r4, #0]
 80128ae:	89a3      	ldrh	r3, [r4, #12]
 80128b0:	f043 0308 	orr.w	r3, r3, #8
 80128b4:	81a3      	strh	r3, [r4, #12]
 80128b6:	6923      	ldr	r3, [r4, #16]
 80128b8:	b94b      	cbnz	r3, 80128ce <__swsetup_r+0x7a>
 80128ba:	89a3      	ldrh	r3, [r4, #12]
 80128bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80128c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80128c4:	d003      	beq.n	80128ce <__swsetup_r+0x7a>
 80128c6:	4621      	mov	r1, r4
 80128c8:	4628      	mov	r0, r5
 80128ca:	f000 f8c1 	bl	8012a50 <__smakebuf_r>
 80128ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128d2:	f013 0201 	ands.w	r2, r3, #1
 80128d6:	d00a      	beq.n	80128ee <__swsetup_r+0x9a>
 80128d8:	2200      	movs	r2, #0
 80128da:	60a2      	str	r2, [r4, #8]
 80128dc:	6962      	ldr	r2, [r4, #20]
 80128de:	4252      	negs	r2, r2
 80128e0:	61a2      	str	r2, [r4, #24]
 80128e2:	6922      	ldr	r2, [r4, #16]
 80128e4:	b942      	cbnz	r2, 80128f8 <__swsetup_r+0xa4>
 80128e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80128ea:	d1c5      	bne.n	8012878 <__swsetup_r+0x24>
 80128ec:	bd38      	pop	{r3, r4, r5, pc}
 80128ee:	0799      	lsls	r1, r3, #30
 80128f0:	bf58      	it	pl
 80128f2:	6962      	ldrpl	r2, [r4, #20]
 80128f4:	60a2      	str	r2, [r4, #8]
 80128f6:	e7f4      	b.n	80128e2 <__swsetup_r+0x8e>
 80128f8:	2000      	movs	r0, #0
 80128fa:	e7f7      	b.n	80128ec <__swsetup_r+0x98>
 80128fc:	200000b8 	.word	0x200000b8

08012900 <_raise_r>:
 8012900:	291f      	cmp	r1, #31
 8012902:	b538      	push	{r3, r4, r5, lr}
 8012904:	4605      	mov	r5, r0
 8012906:	460c      	mov	r4, r1
 8012908:	d904      	bls.n	8012914 <_raise_r+0x14>
 801290a:	2316      	movs	r3, #22
 801290c:	6003      	str	r3, [r0, #0]
 801290e:	f04f 30ff 	mov.w	r0, #4294967295
 8012912:	bd38      	pop	{r3, r4, r5, pc}
 8012914:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012916:	b112      	cbz	r2, 801291e <_raise_r+0x1e>
 8012918:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801291c:	b94b      	cbnz	r3, 8012932 <_raise_r+0x32>
 801291e:	4628      	mov	r0, r5
 8012920:	f000 f830 	bl	8012984 <_getpid_r>
 8012924:	4622      	mov	r2, r4
 8012926:	4601      	mov	r1, r0
 8012928:	4628      	mov	r0, r5
 801292a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801292e:	f000 b817 	b.w	8012960 <_kill_r>
 8012932:	2b01      	cmp	r3, #1
 8012934:	d00a      	beq.n	801294c <_raise_r+0x4c>
 8012936:	1c59      	adds	r1, r3, #1
 8012938:	d103      	bne.n	8012942 <_raise_r+0x42>
 801293a:	2316      	movs	r3, #22
 801293c:	6003      	str	r3, [r0, #0]
 801293e:	2001      	movs	r0, #1
 8012940:	e7e7      	b.n	8012912 <_raise_r+0x12>
 8012942:	2100      	movs	r1, #0
 8012944:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012948:	4620      	mov	r0, r4
 801294a:	4798      	blx	r3
 801294c:	2000      	movs	r0, #0
 801294e:	e7e0      	b.n	8012912 <_raise_r+0x12>

08012950 <raise>:
 8012950:	4b02      	ldr	r3, [pc, #8]	@ (801295c <raise+0xc>)
 8012952:	4601      	mov	r1, r0
 8012954:	6818      	ldr	r0, [r3, #0]
 8012956:	f7ff bfd3 	b.w	8012900 <_raise_r>
 801295a:	bf00      	nop
 801295c:	200000b8 	.word	0x200000b8

08012960 <_kill_r>:
 8012960:	b538      	push	{r3, r4, r5, lr}
 8012962:	4d07      	ldr	r5, [pc, #28]	@ (8012980 <_kill_r+0x20>)
 8012964:	2300      	movs	r3, #0
 8012966:	4604      	mov	r4, r0
 8012968:	4608      	mov	r0, r1
 801296a:	4611      	mov	r1, r2
 801296c:	602b      	str	r3, [r5, #0]
 801296e:	f7ee fbbf 	bl	80010f0 <_kill>
 8012972:	1c43      	adds	r3, r0, #1
 8012974:	d102      	bne.n	801297c <_kill_r+0x1c>
 8012976:	682b      	ldr	r3, [r5, #0]
 8012978:	b103      	cbz	r3, 801297c <_kill_r+0x1c>
 801297a:	6023      	str	r3, [r4, #0]
 801297c:	bd38      	pop	{r3, r4, r5, pc}
 801297e:	bf00      	nop
 8012980:	200086d4 	.word	0x200086d4

08012984 <_getpid_r>:
 8012984:	f7ee bbac 	b.w	80010e0 <_getpid>

08012988 <_sbrk_r>:
 8012988:	b538      	push	{r3, r4, r5, lr}
 801298a:	4d06      	ldr	r5, [pc, #24]	@ (80129a4 <_sbrk_r+0x1c>)
 801298c:	2300      	movs	r3, #0
 801298e:	4604      	mov	r4, r0
 8012990:	4608      	mov	r0, r1
 8012992:	602b      	str	r3, [r5, #0]
 8012994:	f7ee fc36 	bl	8001204 <_sbrk>
 8012998:	1c43      	adds	r3, r0, #1
 801299a:	d102      	bne.n	80129a2 <_sbrk_r+0x1a>
 801299c:	682b      	ldr	r3, [r5, #0]
 801299e:	b103      	cbz	r3, 80129a2 <_sbrk_r+0x1a>
 80129a0:	6023      	str	r3, [r4, #0]
 80129a2:	bd38      	pop	{r3, r4, r5, pc}
 80129a4:	200086d4 	.word	0x200086d4

080129a8 <_realloc_r>:
 80129a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129ac:	4607      	mov	r7, r0
 80129ae:	4614      	mov	r4, r2
 80129b0:	460d      	mov	r5, r1
 80129b2:	b921      	cbnz	r1, 80129be <_realloc_r+0x16>
 80129b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80129b8:	4611      	mov	r1, r2
 80129ba:	f7ff b9af 	b.w	8011d1c <_malloc_r>
 80129be:	b92a      	cbnz	r2, 80129cc <_realloc_r+0x24>
 80129c0:	f7ff f938 	bl	8011c34 <_free_r>
 80129c4:	4625      	mov	r5, r4
 80129c6:	4628      	mov	r0, r5
 80129c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129cc:	f000 f89e 	bl	8012b0c <_malloc_usable_size_r>
 80129d0:	4284      	cmp	r4, r0
 80129d2:	4606      	mov	r6, r0
 80129d4:	d802      	bhi.n	80129dc <_realloc_r+0x34>
 80129d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80129da:	d8f4      	bhi.n	80129c6 <_realloc_r+0x1e>
 80129dc:	4621      	mov	r1, r4
 80129de:	4638      	mov	r0, r7
 80129e0:	f7ff f99c 	bl	8011d1c <_malloc_r>
 80129e4:	4680      	mov	r8, r0
 80129e6:	b908      	cbnz	r0, 80129ec <_realloc_r+0x44>
 80129e8:	4645      	mov	r5, r8
 80129ea:	e7ec      	b.n	80129c6 <_realloc_r+0x1e>
 80129ec:	42b4      	cmp	r4, r6
 80129ee:	4622      	mov	r2, r4
 80129f0:	4629      	mov	r1, r5
 80129f2:	bf28      	it	cs
 80129f4:	4632      	movcs	r2, r6
 80129f6:	f7ff f908 	bl	8011c0a <memcpy>
 80129fa:	4629      	mov	r1, r5
 80129fc:	4638      	mov	r0, r7
 80129fe:	f7ff f919 	bl	8011c34 <_free_r>
 8012a02:	e7f1      	b.n	80129e8 <_realloc_r+0x40>

08012a04 <__swhatbuf_r>:
 8012a04:	b570      	push	{r4, r5, r6, lr}
 8012a06:	460c      	mov	r4, r1
 8012a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a0c:	2900      	cmp	r1, #0
 8012a0e:	b096      	sub	sp, #88	@ 0x58
 8012a10:	4615      	mov	r5, r2
 8012a12:	461e      	mov	r6, r3
 8012a14:	da0d      	bge.n	8012a32 <__swhatbuf_r+0x2e>
 8012a16:	89a3      	ldrh	r3, [r4, #12]
 8012a18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012a1c:	f04f 0100 	mov.w	r1, #0
 8012a20:	bf14      	ite	ne
 8012a22:	2340      	movne	r3, #64	@ 0x40
 8012a24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012a28:	2000      	movs	r0, #0
 8012a2a:	6031      	str	r1, [r6, #0]
 8012a2c:	602b      	str	r3, [r5, #0]
 8012a2e:	b016      	add	sp, #88	@ 0x58
 8012a30:	bd70      	pop	{r4, r5, r6, pc}
 8012a32:	466a      	mov	r2, sp
 8012a34:	f000 f848 	bl	8012ac8 <_fstat_r>
 8012a38:	2800      	cmp	r0, #0
 8012a3a:	dbec      	blt.n	8012a16 <__swhatbuf_r+0x12>
 8012a3c:	9901      	ldr	r1, [sp, #4]
 8012a3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012a42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012a46:	4259      	negs	r1, r3
 8012a48:	4159      	adcs	r1, r3
 8012a4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012a4e:	e7eb      	b.n	8012a28 <__swhatbuf_r+0x24>

08012a50 <__smakebuf_r>:
 8012a50:	898b      	ldrh	r3, [r1, #12]
 8012a52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012a54:	079d      	lsls	r5, r3, #30
 8012a56:	4606      	mov	r6, r0
 8012a58:	460c      	mov	r4, r1
 8012a5a:	d507      	bpl.n	8012a6c <__smakebuf_r+0x1c>
 8012a5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012a60:	6023      	str	r3, [r4, #0]
 8012a62:	6123      	str	r3, [r4, #16]
 8012a64:	2301      	movs	r3, #1
 8012a66:	6163      	str	r3, [r4, #20]
 8012a68:	b003      	add	sp, #12
 8012a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a6c:	ab01      	add	r3, sp, #4
 8012a6e:	466a      	mov	r2, sp
 8012a70:	f7ff ffc8 	bl	8012a04 <__swhatbuf_r>
 8012a74:	9f00      	ldr	r7, [sp, #0]
 8012a76:	4605      	mov	r5, r0
 8012a78:	4639      	mov	r1, r7
 8012a7a:	4630      	mov	r0, r6
 8012a7c:	f7ff f94e 	bl	8011d1c <_malloc_r>
 8012a80:	b948      	cbnz	r0, 8012a96 <__smakebuf_r+0x46>
 8012a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a86:	059a      	lsls	r2, r3, #22
 8012a88:	d4ee      	bmi.n	8012a68 <__smakebuf_r+0x18>
 8012a8a:	f023 0303 	bic.w	r3, r3, #3
 8012a8e:	f043 0302 	orr.w	r3, r3, #2
 8012a92:	81a3      	strh	r3, [r4, #12]
 8012a94:	e7e2      	b.n	8012a5c <__smakebuf_r+0xc>
 8012a96:	89a3      	ldrh	r3, [r4, #12]
 8012a98:	6020      	str	r0, [r4, #0]
 8012a9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012a9e:	81a3      	strh	r3, [r4, #12]
 8012aa0:	9b01      	ldr	r3, [sp, #4]
 8012aa2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012aa6:	b15b      	cbz	r3, 8012ac0 <__smakebuf_r+0x70>
 8012aa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012aac:	4630      	mov	r0, r6
 8012aae:	f000 f81d 	bl	8012aec <_isatty_r>
 8012ab2:	b128      	cbz	r0, 8012ac0 <__smakebuf_r+0x70>
 8012ab4:	89a3      	ldrh	r3, [r4, #12]
 8012ab6:	f023 0303 	bic.w	r3, r3, #3
 8012aba:	f043 0301 	orr.w	r3, r3, #1
 8012abe:	81a3      	strh	r3, [r4, #12]
 8012ac0:	89a3      	ldrh	r3, [r4, #12]
 8012ac2:	431d      	orrs	r5, r3
 8012ac4:	81a5      	strh	r5, [r4, #12]
 8012ac6:	e7cf      	b.n	8012a68 <__smakebuf_r+0x18>

08012ac8 <_fstat_r>:
 8012ac8:	b538      	push	{r3, r4, r5, lr}
 8012aca:	4d07      	ldr	r5, [pc, #28]	@ (8012ae8 <_fstat_r+0x20>)
 8012acc:	2300      	movs	r3, #0
 8012ace:	4604      	mov	r4, r0
 8012ad0:	4608      	mov	r0, r1
 8012ad2:	4611      	mov	r1, r2
 8012ad4:	602b      	str	r3, [r5, #0]
 8012ad6:	f7ee fb6d 	bl	80011b4 <_fstat>
 8012ada:	1c43      	adds	r3, r0, #1
 8012adc:	d102      	bne.n	8012ae4 <_fstat_r+0x1c>
 8012ade:	682b      	ldr	r3, [r5, #0]
 8012ae0:	b103      	cbz	r3, 8012ae4 <_fstat_r+0x1c>
 8012ae2:	6023      	str	r3, [r4, #0]
 8012ae4:	bd38      	pop	{r3, r4, r5, pc}
 8012ae6:	bf00      	nop
 8012ae8:	200086d4 	.word	0x200086d4

08012aec <_isatty_r>:
 8012aec:	b538      	push	{r3, r4, r5, lr}
 8012aee:	4d06      	ldr	r5, [pc, #24]	@ (8012b08 <_isatty_r+0x1c>)
 8012af0:	2300      	movs	r3, #0
 8012af2:	4604      	mov	r4, r0
 8012af4:	4608      	mov	r0, r1
 8012af6:	602b      	str	r3, [r5, #0]
 8012af8:	f7ee fb6c 	bl	80011d4 <_isatty>
 8012afc:	1c43      	adds	r3, r0, #1
 8012afe:	d102      	bne.n	8012b06 <_isatty_r+0x1a>
 8012b00:	682b      	ldr	r3, [r5, #0]
 8012b02:	b103      	cbz	r3, 8012b06 <_isatty_r+0x1a>
 8012b04:	6023      	str	r3, [r4, #0]
 8012b06:	bd38      	pop	{r3, r4, r5, pc}
 8012b08:	200086d4 	.word	0x200086d4

08012b0c <_malloc_usable_size_r>:
 8012b0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b10:	1f18      	subs	r0, r3, #4
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	bfbc      	itt	lt
 8012b16:	580b      	ldrlt	r3, [r1, r0]
 8012b18:	18c0      	addlt	r0, r0, r3
 8012b1a:	4770      	bx	lr

08012b1c <_init>:
 8012b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b1e:	bf00      	nop
 8012b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b22:	bc08      	pop	{r3}
 8012b24:	469e      	mov	lr, r3
 8012b26:	4770      	bx	lr

08012b28 <_fini>:
 8012b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b2a:	bf00      	nop
 8012b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b2e:	bc08      	pop	{r3}
 8012b30:	469e      	mov	lr, r3
 8012b32:	4770      	bx	lr

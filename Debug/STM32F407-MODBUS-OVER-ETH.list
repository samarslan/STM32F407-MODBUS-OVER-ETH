
STM32F407-MODBUS-OVER-ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000131a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e54  08013330  08013330  00014330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016184  08016184  00018108  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08016184  08016184  00017184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801618c  0801618c  00018108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801618c  0801618c  0001718c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016190  08016190  00017190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000108  20000000  08016194  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00018108  2**0
                  CONTENTS
 10 .bss          00008638  20000108  20000108  00018108  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008740  20008740  00018108  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00018108  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027f0e  00000000  00000000  00018138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006c4e  00000000  00000000  00040046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001fa0  00000000  00000000  00046c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001914  00000000  00000000  00048c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000315fc  00000000  00000000  0004a54c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00032388  00000000  00000000  0007bb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f43a9  00000000  00000000  000aded0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a2279  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008bf4  00000000  00000000  001a22bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  001aaeb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000108 	.word	0x20000108
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013318 	.word	0x08013318

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000010c 	.word	0x2000010c
 80001cc:	08013318 	.word	0x08013318

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 ffe7 	bl	8001584 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f8c1 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 fa27 	bl	8000a0c <MX_GPIO_Init>
  MX_LWIP_Init();
 80005be:	f005 f8dd 	bl	800577c <MX_LWIP_Init>
  MX_UART4_Init();
 80005c2:	f000 f9f9 	bl	80009b8 <MX_UART4_Init>
  MX_ADC1_Init();
 80005c6:	f000 f921 	bl	800080c <MX_ADC1_Init>
  MX_TIM2_Init();
 80005ca:	f000 f9a7 	bl	800091c <MX_TIM2_Init>
  MX_SPI1_Init();
 80005ce:	f000 f96f 	bl	80008b0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80005d2:	484e      	ldr	r0, [pc, #312]	@ (800070c <main+0x160>)
 80005d4:	f004 f9da 	bl	800498c <HAL_TIM_Base_Start>
  HAL_ADC_Start_IT(&hadc1);
 80005d8:	484d      	ldr	r0, [pc, #308]	@ (8000710 <main+0x164>)
 80005da:	f001 f8ad 	bl	8001738 <HAL_ADC_Start_IT>

	eMBErrorCode err;
	err = eMBTCPInit(502);
 80005de:	f44f 70fb 	mov.w	r0, #502	@ 0x1f6
 80005e2:	f010 fd29 	bl	8011038 <eMBTCPInit>
 80005e6:	4603      	mov	r3, r0
 80005e8:	77fb      	strb	r3, [r7, #31]
	if (err != MB_ENOERR) {
 80005ea:	7ffb      	ldrb	r3, [r7, #31]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d016      	beq.n	800061e <main+0x72>
		DEBUG_PRINTF("eMBTCPInit failed: %d\r\n", err);
 80005f0:	7ffb      	ldrb	r3, [r7, #31]
 80005f2:	4a48      	ldr	r2, [pc, #288]	@ (8000714 <main+0x168>)
 80005f4:	2140      	movs	r1, #64	@ 0x40
 80005f6:	4848      	ldr	r0, [pc, #288]	@ (8000718 <main+0x16c>)
 80005f8:	f011 fdc8 	bl	801218c <sniprintf>
 80005fc:	6038      	str	r0, [r7, #0]
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	b29a      	uxth	r2, r3
 8000602:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000606:	4944      	ldr	r1, [pc, #272]	@ (8000718 <main+0x16c>)
 8000608:	4844      	ldr	r0, [pc, #272]	@ (800071c <main+0x170>)
 800060a:	f004 fcfb 	bl	8005004 <HAL_UART_Transmit>
		LED_ON(LED_RED_PIN);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000614:	4842      	ldr	r0, [pc, #264]	@ (8000720 <main+0x174>)
 8000616:	f003 f9c5 	bl	80039a4 <HAL_GPIO_WritePin>
		while (1); // hang on error
 800061a:	bf00      	nop
 800061c:	e7fd      	b.n	800061a <main+0x6e>
	} else {
		DEBUG_PRINTF("eMBTCPInit OK.\r\n");
 800061e:	4a41      	ldr	r2, [pc, #260]	@ (8000724 <main+0x178>)
 8000620:	2140      	movs	r1, #64	@ 0x40
 8000622:	483d      	ldr	r0, [pc, #244]	@ (8000718 <main+0x16c>)
 8000624:	f011 fdb2 	bl	801218c <sniprintf>
 8000628:	61b8      	str	r0, [r7, #24]
 800062a:	69bb      	ldr	r3, [r7, #24]
 800062c:	b29a      	uxth	r2, r3
 800062e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000632:	4939      	ldr	r1, [pc, #228]	@ (8000718 <main+0x16c>)
 8000634:	4839      	ldr	r0, [pc, #228]	@ (800071c <main+0x170>)
 8000636:	f004 fce5 	bl	8005004 <HAL_UART_Transmit>
	}

	err = eMBEnable();
 800063a:	f010 fd4f 	bl	80110dc <eMBEnable>
 800063e:	4603      	mov	r3, r0
 8000640:	77fb      	strb	r3, [r7, #31]
	if (err != MB_ENOERR) {
 8000642:	7ffb      	ldrb	r3, [r7, #31]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d016      	beq.n	8000676 <main+0xca>
		DEBUG_PRINTF("eMBEnable failed: %d\r\n", err);
 8000648:	7ffb      	ldrb	r3, [r7, #31]
 800064a:	4a37      	ldr	r2, [pc, #220]	@ (8000728 <main+0x17c>)
 800064c:	2140      	movs	r1, #64	@ 0x40
 800064e:	4832      	ldr	r0, [pc, #200]	@ (8000718 <main+0x16c>)
 8000650:	f011 fd9c 	bl	801218c <sniprintf>
 8000654:	6078      	str	r0, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	b29a      	uxth	r2, r3
 800065a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800065e:	492e      	ldr	r1, [pc, #184]	@ (8000718 <main+0x16c>)
 8000660:	482e      	ldr	r0, [pc, #184]	@ (800071c <main+0x170>)
 8000662:	f004 fccf 	bl	8005004 <HAL_UART_Transmit>
		LED_ON(LED_RED_PIN);
 8000666:	2201      	movs	r2, #1
 8000668:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800066c:	482c      	ldr	r0, [pc, #176]	@ (8000720 <main+0x174>)
 800066e:	f003 f999 	bl	80039a4 <HAL_GPIO_WritePin>
		while (1);
 8000672:	bf00      	nop
 8000674:	e7fd      	b.n	8000672 <main+0xc6>
	} else {
		DEBUG_PRINTF("eMBEnable OK.\r\n");
 8000676:	4a2d      	ldr	r2, [pc, #180]	@ (800072c <main+0x180>)
 8000678:	2140      	movs	r1, #64	@ 0x40
 800067a:	4827      	ldr	r0, [pc, #156]	@ (8000718 <main+0x16c>)
 800067c:	f011 fd86 	bl	801218c <sniprintf>
 8000680:	6178      	str	r0, [r7, #20]
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	b29a      	uxth	r2, r3
 8000686:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800068a:	4923      	ldr	r1, [pc, #140]	@ (8000718 <main+0x16c>)
 800068c:	4823      	ldr	r0, [pc, #140]	@ (800071c <main+0x170>)
 800068e:	f004 fcb9 	bl	8005004 <HAL_UART_Transmit>
	}
	Modbus_InitCallbacks();
 8000692:	f010 fe5d 	bl	8011350 <Modbus_InitCallbacks>
	DEBUG_PRINTF("Callbacks registered.\r\n");
 8000696:	4a26      	ldr	r2, [pc, #152]	@ (8000730 <main+0x184>)
 8000698:	2140      	movs	r1, #64	@ 0x40
 800069a:	481f      	ldr	r0, [pc, #124]	@ (8000718 <main+0x16c>)
 800069c:	f011 fd76 	bl	801218c <sniprintf>
 80006a0:	6138      	str	r0, [r7, #16]
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006aa:	491b      	ldr	r1, [pc, #108]	@ (8000718 <main+0x16c>)
 80006ac:	481b      	ldr	r0, [pc, #108]	@ (800071c <main+0x170>)
 80006ae:	f004 fca9 	bl	8005004 <HAL_UART_Transmit>

	Modbus_SetHolding(0, 65);
 80006b2:	2141      	movs	r1, #65	@ 0x41
 80006b4:	2000      	movs	r0, #0
 80006b6:	f011 f89d 	bl	80117f4 <Modbus_SetHolding>
	DEBUG_PRINTF("Holding[0] = 65 set.\r\n");
 80006ba:	4a1e      	ldr	r2, [pc, #120]	@ (8000734 <main+0x188>)
 80006bc:	2140      	movs	r1, #64	@ 0x40
 80006be:	4816      	ldr	r0, [pc, #88]	@ (8000718 <main+0x16c>)
 80006c0:	f011 fd64 	bl	801218c <sniprintf>
 80006c4:	60f8      	str	r0, [r7, #12]
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ce:	4912      	ldr	r1, [pc, #72]	@ (8000718 <main+0x16c>)
 80006d0:	4812      	ldr	r0, [pc, #72]	@ (800071c <main+0x170>)
 80006d2:	f004 fc97 	bl	8005004 <HAL_UART_Transmit>

	SPI_Protocol_Init();
 80006d6:	f000 fad3 	bl	8000c80 <SPI_Protocol_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		MX_LWIP_Process();
 80006da:	f005 f98f 	bl	80059fc <MX_LWIP_Process>

		err = eMBPoll();
 80006de:	f010 fd19 	bl	8011114 <eMBPoll>
 80006e2:	4603      	mov	r3, r0
 80006e4:	77fb      	strb	r3, [r7, #31]
		if (err != MB_ENOERR) {
 80006e6:	7ffb      	ldrb	r3, [r7, #31]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d0f6      	beq.n	80006da <main+0x12e>
			DEBUG_PRINTF("eMBPoll error: %d\r\n", err);
 80006ec:	7ffb      	ldrb	r3, [r7, #31]
 80006ee:	4a12      	ldr	r2, [pc, #72]	@ (8000738 <main+0x18c>)
 80006f0:	2140      	movs	r1, #64	@ 0x40
 80006f2:	4809      	ldr	r0, [pc, #36]	@ (8000718 <main+0x16c>)
 80006f4:	f011 fd4a 	bl	801218c <sniprintf>
 80006f8:	60b8      	str	r0, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000702:	4905      	ldr	r1, [pc, #20]	@ (8000718 <main+0x16c>)
 8000704:	4805      	ldr	r0, [pc, #20]	@ (800071c <main+0x170>)
 8000706:	f004 fc7d 	bl	8005004 <HAL_UART_Transmit>
		MX_LWIP_Process();
 800070a:	e7e6      	b.n	80006da <main+0x12e>
 800070c:	200001c4 	.word	0x200001c4
 8000710:	20000124 	.word	0x20000124
 8000714:	08013330 	.word	0x08013330
 8000718:	20000254 	.word	0x20000254
 800071c:	2000020c 	.word	0x2000020c
 8000720:	40020c00 	.word	0x40020c00
 8000724:	08013348 	.word	0x08013348
 8000728:	0801335c 	.word	0x0801335c
 800072c:	08013374 	.word	0x08013374
 8000730:	08013384 	.word	0x08013384
 8000734:	0801339c 	.word	0x0801339c
 8000738:	080133b4 	.word	0x080133b4

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b094      	sub	sp, #80	@ 0x50
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0320 	add.w	r3, r7, #32
 8000746:	2230      	movs	r2, #48	@ 0x30
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f011 fdc1 	bl	80122d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	4b27      	ldr	r3, [pc, #156]	@ (8000804 <SystemClock_Config+0xc8>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000768:	4a26      	ldr	r2, [pc, #152]	@ (8000804 <SystemClock_Config+0xc8>)
 800076a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800076e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000770:	4b24      	ldr	r3, [pc, #144]	@ (8000804 <SystemClock_Config+0xc8>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	4b21      	ldr	r3, [pc, #132]	@ (8000808 <SystemClock_Config+0xcc>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a20      	ldr	r2, [pc, #128]	@ (8000808 <SystemClock_Config+0xcc>)
 8000786:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b1e      	ldr	r3, [pc, #120]	@ (8000808 <SystemClock_Config+0xcc>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000798:	2302      	movs	r3, #2
 800079a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079c:	2301      	movs	r3, #1
 800079e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a0:	2310      	movs	r3, #16
 80007a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a4:	2302      	movs	r3, #2
 80007a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a8:	2300      	movs	r3, #0
 80007aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007ac:	2308      	movs	r3, #8
 80007ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80007b0:	2340      	movs	r3, #64	@ 0x40
 80007b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007b8:	2304      	movs	r3, #4
 80007ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007bc:	f107 0320 	add.w	r3, r7, #32
 80007c0:	4618      	mov	r0, r3
 80007c2:	f003 f92d 	bl	8003a20 <HAL_RCC_OscConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007cc:	f000 f9f2 	bl	8000bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d0:	230f      	movs	r3, #15
 80007d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d4:	2302      	movs	r3, #2
 80007d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80007d8:	2380      	movs	r3, #128	@ 0x80
 80007da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	2101      	movs	r1, #1
 80007ea:	4618      	mov	r0, r3
 80007ec:	f003 fb90 	bl	8003f10 <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80007f6:	f000 f9dd 	bl	8000bb4 <Error_Handler>
  }
}
 80007fa:	bf00      	nop
 80007fc:	3750      	adds	r7, #80	@ 0x50
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40007000 	.word	0x40007000

0800080c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000812:	463b      	mov	r3, r7
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800081e:	4b22      	ldr	r3, [pc, #136]	@ (80008a8 <MX_ADC1_Init+0x9c>)
 8000820:	4a22      	ldr	r2, [pc, #136]	@ (80008ac <MX_ADC1_Init+0xa0>)
 8000822:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000824:	4b20      	ldr	r3, [pc, #128]	@ (80008a8 <MX_ADC1_Init+0x9c>)
 8000826:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800082a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800082c:	4b1e      	ldr	r3, [pc, #120]	@ (80008a8 <MX_ADC1_Init+0x9c>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000832:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <MX_ADC1_Init+0x9c>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000838:	4b1b      	ldr	r3, [pc, #108]	@ (80008a8 <MX_ADC1_Init+0x9c>)
 800083a:	2200      	movs	r2, #0
 800083c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800083e:	4b1a      	ldr	r3, [pc, #104]	@ (80008a8 <MX_ADC1_Init+0x9c>)
 8000840:	2200      	movs	r2, #0
 8000842:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000846:	4b18      	ldr	r3, [pc, #96]	@ (80008a8 <MX_ADC1_Init+0x9c>)
 8000848:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800084c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800084e:	4b16      	ldr	r3, [pc, #88]	@ (80008a8 <MX_ADC1_Init+0x9c>)
 8000850:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000854:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000856:	4b14      	ldr	r3, [pc, #80]	@ (80008a8 <MX_ADC1_Init+0x9c>)
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800085c:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <MX_ADC1_Init+0x9c>)
 800085e:	2201      	movs	r2, #1
 8000860:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000862:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_ADC1_Init+0x9c>)
 8000864:	2200      	movs	r2, #0
 8000866:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800086a:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <MX_ADC1_Init+0x9c>)
 800086c:	2201      	movs	r2, #1
 800086e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000870:	480d      	ldr	r0, [pc, #52]	@ (80008a8 <MX_ADC1_Init+0x9c>)
 8000872:	f000 ff1d 	bl	80016b0 <HAL_ADC_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800087c:	f000 f99a 	bl	8000bb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000880:	2310      	movs	r3, #16
 8000882:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000884:	2301      	movs	r3, #1
 8000886:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000888:	2307      	movs	r3, #7
 800088a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800088c:	463b      	mov	r3, r7
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_ADC1_Init+0x9c>)
 8000892:	f001 f961 	bl	8001b58 <HAL_ADC_ConfigChannel>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800089c:	f000 f98a 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000124 	.word	0x20000124
 80008ac:	40012000 	.word	0x40012000

080008b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008b4:	4b17      	ldr	r3, [pc, #92]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008b6:	4a18      	ldr	r2, [pc, #96]	@ (8000918 <MX_SPI1_Init+0x68>)
 80008b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ba:	4b16      	ldr	r3, [pc, #88]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008c2:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008c8:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ce:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008da:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80008e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008e4:	2220      	movs	r2, #32
 80008e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008f4:	4b07      	ldr	r3, [pc, #28]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008fa:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008fc:	220a      	movs	r2, #10
 80008fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	@ (8000914 <MX_SPI1_Init+0x64>)
 8000902:	f003 fce5 	bl	80042d0 <HAL_SPI_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800090c:	f000 f952 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	2000016c 	.word	0x2000016c
 8000918:	40013000 	.word	0x40013000

0800091c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000930:	463b      	mov	r3, r7
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000938:	4b1e      	ldr	r3, [pc, #120]	@ (80009b4 <MX_TIM2_Init+0x98>)
 800093a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800093e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000-1;
 8000940:	4b1c      	ldr	r3, [pc, #112]	@ (80009b4 <MX_TIM2_Init+0x98>)
 8000942:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8000946:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000948:	4b1a      	ldr	r3, [pc, #104]	@ (80009b4 <MX_TIM2_Init+0x98>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2999;
 800094e:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <MX_TIM2_Init+0x98>)
 8000950:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000954:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000956:	4b17      	ldr	r3, [pc, #92]	@ (80009b4 <MX_TIM2_Init+0x98>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095c:	4b15      	ldr	r3, [pc, #84]	@ (80009b4 <MX_TIM2_Init+0x98>)
 800095e:	2200      	movs	r2, #0
 8000960:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000962:	4814      	ldr	r0, [pc, #80]	@ (80009b4 <MX_TIM2_Init+0x98>)
 8000964:	f003 ffc2 	bl	80048ec <HAL_TIM_Base_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800096e:	f000 f921 	bl	8000bb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000972:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000976:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000978:	f107 0308 	add.w	r3, r7, #8
 800097c:	4619      	mov	r1, r3
 800097e:	480d      	ldr	r0, [pc, #52]	@ (80009b4 <MX_TIM2_Init+0x98>)
 8000980:	f004 f86c 	bl	8004a5c <HAL_TIM_ConfigClockSource>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800098a:	f000 f913 	bl	8000bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800098e:	2320      	movs	r3, #32
 8000990:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000996:	463b      	mov	r3, r7
 8000998:	4619      	mov	r1, r3
 800099a:	4806      	ldr	r0, [pc, #24]	@ (80009b4 <MX_TIM2_Init+0x98>)
 800099c:	f004 fa66 	bl	8004e6c <HAL_TIMEx_MasterConfigSynchronization>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80009a6:	f000 f905 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	3718      	adds	r7, #24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200001c4 	.word	0x200001c4

080009b8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009bc:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <MX_UART4_Init+0x4c>)
 80009be:	4a12      	ldr	r2, [pc, #72]	@ (8000a08 <MX_UART4_Init+0x50>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80009c2:	4b10      	ldr	r3, [pc, #64]	@ (8000a04 <MX_UART4_Init+0x4c>)
 80009c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009c8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000a04 <MX_UART4_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <MX_UART4_Init+0x4c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a04 <MX_UART4_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <MX_UART4_Init+0x4c>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b08      	ldr	r3, [pc, #32]	@ (8000a04 <MX_UART4_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <MX_UART4_Init+0x4c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009ee:	4805      	ldr	r0, [pc, #20]	@ (8000a04 <MX_UART4_Init+0x4c>)
 80009f0:	f004 fab8 	bl	8004f64 <HAL_UART_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80009fa:	f000 f8db 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	2000020c 	.word	0x2000020c
 8000a08:	40004c00 	.word	0x40004c00

08000a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	@ 0x28
 8000a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	4b3b      	ldr	r3, [pc, #236]	@ (8000b14 <MX_GPIO_Init+0x108>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a3a      	ldr	r2, [pc, #232]	@ (8000b14 <MX_GPIO_Init+0x108>)
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b38      	ldr	r3, [pc, #224]	@ (8000b14 <MX_GPIO_Init+0x108>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	4b34      	ldr	r3, [pc, #208]	@ (8000b14 <MX_GPIO_Init+0x108>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a33      	ldr	r2, [pc, #204]	@ (8000b14 <MX_GPIO_Init+0x108>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b31      	ldr	r3, [pc, #196]	@ (8000b14 <MX_GPIO_Init+0x108>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b14 <MX_GPIO_Init+0x108>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	4a2c      	ldr	r2, [pc, #176]	@ (8000b14 <MX_GPIO_Init+0x108>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6a:	4b2a      	ldr	r3, [pc, #168]	@ (8000b14 <MX_GPIO_Init+0x108>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	4b26      	ldr	r3, [pc, #152]	@ (8000b14 <MX_GPIO_Init+0x108>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	4a25      	ldr	r2, [pc, #148]	@ (8000b14 <MX_GPIO_Init+0x108>)
 8000a80:	f043 0308 	orr.w	r3, r3, #8
 8000a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a86:	4b23      	ldr	r3, [pc, #140]	@ (8000b14 <MX_GPIO_Init+0x108>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	f003 0308 	and.w	r3, r3, #8
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	2110      	movs	r1, #16
 8000a96:	4820      	ldr	r0, [pc, #128]	@ (8000b18 <MX_GPIO_Init+0x10c>)
 8000a98:	f002 ff84 	bl	80039a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000aa2:	481e      	ldr	r0, [pc, #120]	@ (8000b1c <MX_GPIO_Init+0x110>)
 8000aa4:	f002 ff7e 	bl	80039a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	4816      	ldr	r0, [pc, #88]	@ (8000b18 <MX_GPIO_Init+0x10c>)
 8000abe:	f002 fdd5 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000ac2:	2310      	movs	r3, #16
 8000ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480f      	ldr	r0, [pc, #60]	@ (8000b18 <MX_GPIO_Init+0x10c>)
 8000ada:	f002 fdc7 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000ade:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	4809      	ldr	r0, [pc, #36]	@ (8000b1c <MX_GPIO_Init+0x110>)
 8000af8:	f002 fdb8 	bl	800366c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2100      	movs	r1, #0
 8000b00:	2006      	movs	r0, #6
 8000b02:	f001 fb2c 	bl	800215e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b06:	2006      	movs	r0, #6
 8000b08:	f001 fb45 	bl	8002196 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b0c:	bf00      	nop
 8000b0e:	3728      	adds	r7, #40	@ 0x28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40020000 	.word	0x40020000
 8000b1c:	40020c00 	.word	0x40020c00

08000b20 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ba0 <HAL_ADC_ConvCpltCallback+0x80>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d132      	bne.n	8000b98 <HAL_ADC_ConvCpltCallback+0x78>
    {
        uint32_t raw = HAL_ADC_GetValue(hadc);
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f000 ffee 	bl	8001b14 <HAL_ADC_GetValue>
 8000b38:	6178      	str	r0, [r7, #20]

        float Vsense = ((float)raw) * 3.3f / 4095.0f;
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	ee07 3a90 	vmov	s15, r3
 8000b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b44:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000ba4 <HAL_ADC_ConvCpltCallback+0x84>
 8000b48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b4c:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000ba8 <HAL_ADC_ConvCpltCallback+0x88>
 8000b50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b54:	edc7 7a04 	vstr	s15, [r7, #16]
        float temperature = ((Vsense - 0.76f) / 0.0025f) + 25.0f;
 8000b58:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b5c:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000bac <HAL_ADC_ConvCpltCallback+0x8c>
 8000b60:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000b64:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8000bb0 <HAL_ADC_ConvCpltCallback+0x90>
 8000b68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b6c:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000b70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b74:	edc7 7a03 	vstr	s15, [r7, #12]

        uint16_t temp_scaled = (uint16_t)(temperature * 10.0f);
 8000b78:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b7c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000b80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b88:	ee17 3a90 	vmov	r3, s15
 8000b8c:	817b      	strh	r3, [r7, #10]

        Modbus_SetHolding(1, temp_scaled);
 8000b8e:	897b      	ldrh	r3, [r7, #10]
 8000b90:	4619      	mov	r1, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	f010 fe2e 	bl	80117f4 <Modbus_SetHolding>
    }
}
 8000b98:	bf00      	nop
 8000b9a:	3718      	adds	r7, #24
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40012000 	.word	0x40012000
 8000ba4:	40533333 	.word	0x40533333
 8000ba8:	457ff000 	.word	0x457ff000
 8000bac:	3f428f5c 	.word	0x3f428f5c
 8000bb0:	3b23d70a 	.word	0x3b23d70a

08000bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb8:	b672      	cpsid	i
}
 8000bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <Error_Handler+0x8>

08000bc0 <SPI_SendCommand>:
static inline void SPI_CS_High(void) {
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
}

/* Send command and receive response */
int SPI_SendCommand(const char *cmd, char *response, size_t maxLen) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b096      	sub	sp, #88	@ 0x58
 8000bc4:	af02      	add	r7, sp, #8
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
    uint8_t txBuf[SPI_TX_BUFFER_SIZE] = {0};
 8000bcc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bd0:	2220      	movs	r2, #32
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f011 fb7c 	bl	80122d2 <memset>
    uint8_t rxBuf[SPI_TX_BUFFER_SIZE] = {0};
 8000bda:	f107 0310 	add.w	r3, r7, #16
 8000bde:	2220      	movs	r2, #32
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f011 fb75 	bl	80122d2 <memset>

    strncpy((char *)txBuf, cmd, SPI_TX_BUFFER_SIZE - 1);
 8000be8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bec:	221f      	movs	r2, #31
 8000bee:	68f9      	ldr	r1, [r7, #12]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f011 fb88 	bl	8012306 <strncpy>

    // Step 1: Send command, ignore response (slave is just receiving now)
    if (HAL_SPI_TransmitReceive(&hspi1, txBuf, rxBuf, SPI_TX_BUFFER_SIZE, HAL_MAX_DELAY) != HAL_OK) {
 8000bf6:	f107 0210 	add.w	r2, r7, #16
 8000bfa:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	2320      	movs	r3, #32
 8000c06:	481d      	ldr	r0, [pc, #116]	@ (8000c7c <SPI_SendCommand+0xbc>)
 8000c08:	f003 fbeb 	bl	80043e2 <HAL_SPI_TransmitReceive>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d002      	beq.n	8000c18 <SPI_SendCommand+0x58>
        return -1;
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	e02d      	b.n	8000c74 <SPI_SendCommand+0xb4>
    }

    // Step 2: Dummy transfer to fetch slave’s prepared response
    memset(txBuf, 0, sizeof(txBuf));
 8000c18:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c1c:	2220      	movs	r2, #32
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f011 fb56 	bl	80122d2 <memset>
    memset(rxBuf, 0, sizeof(rxBuf));
 8000c26:	f107 0310 	add.w	r3, r7, #16
 8000c2a:	2220      	movs	r2, #32
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f011 fb4f 	bl	80122d2 <memset>
    if (HAL_SPI_TransmitReceive(&hspi1, txBuf, rxBuf, SPI_TX_BUFFER_SIZE, HAL_MAX_DELAY) != HAL_OK) {
 8000c34:	f107 0210 	add.w	r2, r7, #16
 8000c38:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	2320      	movs	r3, #32
 8000c44:	480d      	ldr	r0, [pc, #52]	@ (8000c7c <SPI_SendCommand+0xbc>)
 8000c46:	f003 fbcc 	bl	80043e2 <HAL_SPI_TransmitReceive>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d002      	beq.n	8000c56 <SPI_SendCommand+0x96>
        return -1;
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295
 8000c54:	e00e      	b.n	8000c74 <SPI_SendCommand+0xb4>
    }

    strncpy(response, (char *)rxBuf, maxLen - 1);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	1e5a      	subs	r2, r3, #1
 8000c5a:	f107 0310 	add.w	r3, r7, #16
 8000c5e:	4619      	mov	r1, r3
 8000c60:	68b8      	ldr	r0, [r7, #8]
 8000c62:	f011 fb50 	bl	8012306 <strncpy>
    response[maxLen - 1] = '\0';
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]
    return 0;
 8000c72:	2300      	movs	r3, #0
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3750      	adds	r7, #80	@ 0x50
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	2000016c 	.word	0x2000016c

08000c80 <SPI_Protocol_Init>:

/* ----------------------------------------------------------------
 * Public API
 * ----------------------------------------------------------------*/

void SPI_Protocol_Init(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
    /* Initialize CS pin high (inactive) */
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	2110      	movs	r1, #16
 8000c88:	4802      	ldr	r0, [pc, #8]	@ (8000c94 <SPI_Protocol_Init+0x14>)
 8000c8a:	f002 fe8b 	bl	80039a4 <HAL_GPIO_WritePin>
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40020000 	.word	0x40020000

08000c98 <SPI_SetLED>:

SPI_Result SPI_SetLED(SPI_LED_Color color, uint8_t state) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08e      	sub	sp, #56	@ 0x38
 8000c9c:	af02      	add	r7, sp, #8
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	460a      	mov	r2, r1
 8000ca2:	71fb      	strb	r3, [r7, #7]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	71bb      	strb	r3, [r7, #6]
    char cmd[16];
    char response[16];
    char colorChar;

    /* Map color to character */
    switch (color) {
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	2b04      	cmp	r3, #4
 8000cac:	d820      	bhi.n	8000cf0 <SPI_SetLED+0x58>
 8000cae:	a201      	add	r2, pc, #4	@ (adr r2, 8000cb4 <SPI_SetLED+0x1c>)
 8000cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb4:	08000cc9 	.word	0x08000cc9
 8000cb8:	08000cd1 	.word	0x08000cd1
 8000cbc:	08000cd9 	.word	0x08000cd9
 8000cc0:	08000ce1 	.word	0x08000ce1
 8000cc4:	08000ce9 	.word	0x08000ce9
        case SPI_LED_GREEN:  colorChar = 'G'; break;
 8000cc8:	2347      	movs	r3, #71	@ 0x47
 8000cca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000cce:	e011      	b.n	8000cf4 <SPI_SetLED+0x5c>
        case SPI_LED_ORANGE: colorChar = 'O'; break;
 8000cd0:	234f      	movs	r3, #79	@ 0x4f
 8000cd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000cd6:	e00d      	b.n	8000cf4 <SPI_SetLED+0x5c>
        case SPI_LED_RED:    colorChar = 'R'; break;
 8000cd8:	2352      	movs	r3, #82	@ 0x52
 8000cda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000cde:	e009      	b.n	8000cf4 <SPI_SetLED+0x5c>
        case SPI_LED_BLUE:   colorChar = 'B'; break;
 8000ce0:	2342      	movs	r3, #66	@ 0x42
 8000ce2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000ce6:	e005      	b.n	8000cf4 <SPI_SetLED+0x5c>
        case SPI_LED_ALL:    colorChar = 'A'; break;
 8000ce8:	2341      	movs	r3, #65	@ 0x41
 8000cea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000cee:	e001      	b.n	8000cf4 <SPI_SetLED+0x5c>
        default: return SPI_RESULT_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e029      	b.n	8000d48 <SPI_SetLED+0xb0>
    }

    /* Build command: LED:G1\n */
    snprintf(cmd, sizeof(cmd), "LED:%c%d\n", colorChar, state ? 1 : 0);
 8000cf4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000cf8:	79bb      	ldrb	r3, [r7, #6]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	bf14      	ite	ne
 8000cfe:	2301      	movne	r3, #1
 8000d00:	2300      	moveq	r3, #0
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	f107 001c 	add.w	r0, r7, #28
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	4a10      	ldr	r2, [pc, #64]	@ (8000d50 <SPI_SetLED+0xb8>)
 8000d0e:	2110      	movs	r1, #16
 8000d10:	f011 fa3c 	bl	801218c <sniprintf>

    /* Send command */
    if (SPI_SendCommand(cmd, response, sizeof(response)) != HAL_OK) {
 8000d14:	f107 010c 	add.w	r1, r7, #12
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	2210      	movs	r2, #16
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ff4e 	bl	8000bc0 <SPI_SendCommand>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <SPI_SetLED+0x96>
        return SPI_RESULT_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00c      	b.n	8000d48 <SPI_SetLED+0xb0>
    }

    /* Check response */
    if (strncmp(response, "OK", 2) == 0) {
 8000d2e:	f107 030c 	add.w	r3, r7, #12
 8000d32:	2202      	movs	r2, #2
 8000d34:	4907      	ldr	r1, [pc, #28]	@ (8000d54 <SPI_SetLED+0xbc>)
 8000d36:	4618      	mov	r0, r3
 8000d38:	f011 fad3 	bl	80122e2 <strncmp>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d101      	bne.n	8000d46 <SPI_SetLED+0xae>
        return SPI_RESULT_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e000      	b.n	8000d48 <SPI_SetLED+0xb0>
    }

    return SPI_RESULT_ERROR;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3730      	adds	r7, #48	@ 0x30
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	080133c8 	.word	0x080133c8
 8000d54:	080133d4 	.word	0x080133d4

08000d58 <SPI_GetLEDStatus>:

SPI_Result SPI_GetLEDStatus(uint8_t *green, uint8_t *orange, uint8_t *red, uint8_t *blue) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
 8000d64:	603b      	str	r3, [r7, #0]
    char response[16];

    /* Send GET:LED command */
    if (SPI_SendCommand("GET:LED\n", response, sizeof(response)) != HAL_OK) {
 8000d66:	f107 0310 	add.w	r3, r7, #16
 8000d6a:	2210      	movs	r2, #16
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4823      	ldr	r0, [pc, #140]	@ (8000dfc <SPI_GetLEDStatus+0xa4>)
 8000d70:	f7ff ff26 	bl	8000bc0 <SPI_SendCommand>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <SPI_GetLEDStatus+0x26>
        return SPI_RESULT_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e03a      	b.n	8000df4 <SPI_GetLEDStatus+0x9c>
    }

    /* Parse response: STA:GORB\n where each letter is 0 or 1 */
    if (strncmp(response, "STA:", 4) != 0) {
 8000d7e:	f107 0310 	add.w	r3, r7, #16
 8000d82:	2204      	movs	r2, #4
 8000d84:	491e      	ldr	r1, [pc, #120]	@ (8000e00 <SPI_GetLEDStatus+0xa8>)
 8000d86:	4618      	mov	r0, r3
 8000d88:	f011 faab 	bl	80122e2 <strncmp>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <SPI_GetLEDStatus+0x3e>
        return SPI_RESULT_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e02e      	b.n	8000df4 <SPI_GetLEDStatus+0x9c>
    }

    if (strlen(response) < 8) {
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fa18 	bl	80001d0 <strlen>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b07      	cmp	r3, #7
 8000da4:	d801      	bhi.n	8000daa <SPI_GetLEDStatus+0x52>
        return SPI_RESULT_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e024      	b.n	8000df4 <SPI_GetLEDStatus+0x9c>
    }

    /* Extract LED states */
    *green  = (response[4] == '1') ? 1 : 0;
 8000daa:	7d3b      	ldrb	r3, [r7, #20]
 8000dac:	2b31      	cmp	r3, #49	@ 0x31
 8000dae:	bf0c      	ite	eq
 8000db0:	2301      	moveq	r3, #1
 8000db2:	2300      	movne	r3, #0
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	461a      	mov	r2, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	701a      	strb	r2, [r3, #0]
    *orange = (response[5] == '1') ? 1 : 0;
 8000dbc:	7d7b      	ldrb	r3, [r7, #21]
 8000dbe:	2b31      	cmp	r3, #49	@ 0x31
 8000dc0:	bf0c      	ite	eq
 8000dc2:	2301      	moveq	r3, #1
 8000dc4:	2300      	movne	r3, #0
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	461a      	mov	r2, r3
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	701a      	strb	r2, [r3, #0]
    *red    = (response[6] == '1') ? 1 : 0;
 8000dce:	7dbb      	ldrb	r3, [r7, #22]
 8000dd0:	2b31      	cmp	r3, #49	@ 0x31
 8000dd2:	bf0c      	ite	eq
 8000dd4:	2301      	moveq	r3, #1
 8000dd6:	2300      	movne	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	461a      	mov	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	701a      	strb	r2, [r3, #0]
    *blue   = (response[7] == '1') ? 1 : 0;
 8000de0:	7dfb      	ldrb	r3, [r7, #23]
 8000de2:	2b31      	cmp	r3, #49	@ 0x31
 8000de4:	bf0c      	ite	eq
 8000de6:	2301      	moveq	r3, #1
 8000de8:	2300      	movne	r3, #0
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	461a      	mov	r2, r3
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	701a      	strb	r2, [r3, #0]

    return SPI_RESULT_OK;
 8000df2:	2300      	movs	r3, #0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3720      	adds	r7, #32
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	080133d8 	.word	0x080133d8
 8000e00:	080133e4 	.word	0x080133e4

08000e04 <SPI_HandleModbusCoilWrite>:
 * Coils 0-3: Bridge LEDs (local)
 * Coils 4-7: Slave LEDs (via SPI)
 */
#define SPI_COIL_OFFSET 4

void SPI_HandleModbusCoilWrite(USHORT coilIndex, UCHAR value) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	460a      	mov	r2, r1
 8000e0e:	80fb      	strh	r3, [r7, #6]
 8000e10:	4613      	mov	r3, r2
 8000e12:	717b      	strb	r3, [r7, #5]
    if (coilIndex < SPI_COIL_OFFSET || coilIndex >= SPI_COIL_OFFSET + 4) {
 8000e14:	88fb      	ldrh	r3, [r7, #6]
 8000e16:	2b03      	cmp	r3, #3
 8000e18:	d927      	bls.n	8000e6a <SPI_HandleModbusCoilWrite+0x66>
 8000e1a:	88fb      	ldrh	r3, [r7, #6]
 8000e1c:	2b07      	cmp	r3, #7
 8000e1e:	d824      	bhi.n	8000e6a <SPI_HandleModbusCoilWrite+0x66>
        return; // Not an SPI coil
    }

    SPI_LED_Color color;
    USHORT localIndex = coilIndex - SPI_COIL_OFFSET;
 8000e20:	88fb      	ldrh	r3, [r7, #6]
 8000e22:	3b04      	subs	r3, #4
 8000e24:	81bb      	strh	r3, [r7, #12]

    switch (localIndex) {
 8000e26:	89bb      	ldrh	r3, [r7, #12]
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	d820      	bhi.n	8000e6e <SPI_HandleModbusCoilWrite+0x6a>
 8000e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8000e34 <SPI_HandleModbusCoilWrite+0x30>)
 8000e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e32:	bf00      	nop
 8000e34:	08000e45 	.word	0x08000e45
 8000e38:	08000e4b 	.word	0x08000e4b
 8000e3c:	08000e51 	.word	0x08000e51
 8000e40:	08000e57 	.word	0x08000e57
        case 0: color = SPI_LED_GREEN; break;
 8000e44:	2300      	movs	r3, #0
 8000e46:	73fb      	strb	r3, [r7, #15]
 8000e48:	e008      	b.n	8000e5c <SPI_HandleModbusCoilWrite+0x58>
        case 1: color = SPI_LED_ORANGE; break;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	73fb      	strb	r3, [r7, #15]
 8000e4e:	e005      	b.n	8000e5c <SPI_HandleModbusCoilWrite+0x58>
        case 2: color = SPI_LED_RED; break;
 8000e50:	2302      	movs	r3, #2
 8000e52:	73fb      	strb	r3, [r7, #15]
 8000e54:	e002      	b.n	8000e5c <SPI_HandleModbusCoilWrite+0x58>
        case 3: color = SPI_LED_BLUE; break;
 8000e56:	2303      	movs	r3, #3
 8000e58:	73fb      	strb	r3, [r7, #15]
 8000e5a:	bf00      	nop
        default: return;
    }

    SPI_SetLED(color, value);
 8000e5c:	797a      	ldrb	r2, [r7, #5]
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	4611      	mov	r1, r2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ff18 	bl	8000c98 <SPI_SetLED>
 8000e68:	e002      	b.n	8000e70 <SPI_HandleModbusCoilWrite+0x6c>
        return; // Not an SPI coil
 8000e6a:	bf00      	nop
 8000e6c:	e000      	b.n	8000e70 <SPI_HandleModbusCoilWrite+0x6c>
        default: return;
 8000e6e:	bf00      	nop
}
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop

08000e78 <SPI_TurnOffAllLEDs>:
        }
    }
}

/* Special command handler for "turn off all LEDs" via holding register */
void SPI_TurnOffAllLEDs(void) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
    SPI_SetLED(SPI_LED_ALL, 0);
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2004      	movs	r0, #4
 8000e80:	f7ff ff0a 	bl	8000c98 <SPI_SetLED>
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <SPI_TurnOnAllLEDs>:

void SPI_TurnOnAllLEDs(void) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
    SPI_SetLED(SPI_LED_ALL, 1);
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	2004      	movs	r0, #4
 8000e90:	f7ff ff02 	bl	8000c98 <SPI_SetLED>
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <HAL_MspInit+0x4c>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea6:	4a0f      	ldr	r2, [pc, #60]	@ (8000ee4 <HAL_MspInit+0x4c>)
 8000ea8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee4 <HAL_MspInit+0x4c>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	603b      	str	r3, [r7, #0]
 8000ebe:	4b09      	ldr	r3, [pc, #36]	@ (8000ee4 <HAL_MspInit+0x4c>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec2:	4a08      	ldr	r2, [pc, #32]	@ (8000ee4 <HAL_MspInit+0x4c>)
 8000ec4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eca:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <HAL_MspInit+0x4c>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800

08000ee8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0e      	ldr	r2, [pc, #56]	@ (8000f30 <HAL_ADC_MspInit+0x48>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d115      	bne.n	8000f26 <HAL_ADC_MspInit+0x3e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b0d      	ldr	r3, [pc, #52]	@ (8000f34 <HAL_ADC_MspInit+0x4c>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f02:	4a0c      	ldr	r2, [pc, #48]	@ (8000f34 <HAL_ADC_MspInit+0x4c>)
 8000f04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <HAL_ADC_MspInit+0x4c>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2012      	movs	r0, #18
 8000f1c:	f001 f91f 	bl	800215e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f20:	2012      	movs	r0, #18
 8000f22:	f001 f938 	bl	8002196 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40012000 	.word	0x40012000
 8000f34:	40023800 	.word	0x40023800

08000f38 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	@ 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a28      	ldr	r2, [pc, #160]	@ (8000ff8 <HAL_SPI_MspInit+0xc0>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d149      	bne.n	8000fee <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	4b27      	ldr	r3, [pc, #156]	@ (8000ffc <HAL_SPI_MspInit+0xc4>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f62:	4a26      	ldr	r2, [pc, #152]	@ (8000ffc <HAL_SPI_MspInit+0xc4>)
 8000f64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f6a:	4b24      	ldr	r3, [pc, #144]	@ (8000ffc <HAL_SPI_MspInit+0xc4>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	4b20      	ldr	r3, [pc, #128]	@ (8000ffc <HAL_SPI_MspInit+0xc4>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	4a1f      	ldr	r2, [pc, #124]	@ (8000ffc <HAL_SPI_MspInit+0xc4>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f86:	4b1d      	ldr	r3, [pc, #116]	@ (8000ffc <HAL_SPI_MspInit+0xc4>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <HAL_SPI_MspInit+0xc4>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	4a18      	ldr	r2, [pc, #96]	@ (8000ffc <HAL_SPI_MspInit+0xc4>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa2:	4b16      	ldr	r3, [pc, #88]	@ (8000ffc <HAL_SPI_MspInit+0xc4>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000fae:	2360      	movs	r3, #96	@ 0x60
 8000fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fbe:	2305      	movs	r3, #5
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480d      	ldr	r0, [pc, #52]	@ (8001000 <HAL_SPI_MspInit+0xc8>)
 8000fca:	f002 fb4f 	bl	800366c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fce:	2320      	movs	r3, #32
 8000fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fde:	2305      	movs	r3, #5
 8000fe0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4806      	ldr	r0, [pc, #24]	@ (8001004 <HAL_SPI_MspInit+0xcc>)
 8000fea:	f002 fb3f 	bl	800366c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000fee:	bf00      	nop
 8000ff0:	3728      	adds	r7, #40	@ 0x28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40013000 	.word	0x40013000
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020000 	.word	0x40020000
 8001004:	40020400 	.word	0x40020400

08001008 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001018:	d10d      	bne.n	8001036 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <HAL_TIM_Base_MspInit+0x3c>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001022:	4a08      	ldr	r2, [pc, #32]	@ (8001044 <HAL_TIM_Base_MspInit+0x3c>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6413      	str	r3, [r2, #64]	@ 0x40
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <HAL_TIM_Base_MspInit+0x3c>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001036:	bf00      	nop
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800

08001048 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	@ 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a19      	ldr	r2, [pc, #100]	@ (80010cc <HAL_UART_MspInit+0x84>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d12c      	bne.n	80010c4 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	4b18      	ldr	r3, [pc, #96]	@ (80010d0 <HAL_UART_MspInit+0x88>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001072:	4a17      	ldr	r2, [pc, #92]	@ (80010d0 <HAL_UART_MspInit+0x88>)
 8001074:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001078:	6413      	str	r3, [r2, #64]	@ 0x40
 800107a:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <HAL_UART_MspInit+0x88>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <HAL_UART_MspInit+0x88>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a10      	ldr	r2, [pc, #64]	@ (80010d0 <HAL_UART_MspInit+0x88>)
 8001090:	f043 0304 	orr.w	r3, r3, #4
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b0e      	ldr	r3, [pc, #56]	@ (80010d0 <HAL_UART_MspInit+0x88>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f003 0304 	and.w	r3, r3, #4
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010a2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80010b4:	2308      	movs	r3, #8
 80010b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	4805      	ldr	r0, [pc, #20]	@ (80010d4 <HAL_UART_MspInit+0x8c>)
 80010c0:	f002 fad4 	bl	800366c <HAL_GPIO_Init>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 80010c4:	bf00      	nop
 80010c6:	3728      	adds	r7, #40	@ 0x28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40004c00 	.word	0x40004c00
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40020800 	.word	0x40020800

080010d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <NMI_Handler+0x4>

080010e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <HardFault_Handler+0x4>

080010e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <MemManage_Handler+0x4>

080010f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <BusFault_Handler+0x4>

080010f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <UsageFault_Handler+0x4>

08001100 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800112e:	f000 fa7b 	bl	8001628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}

08001136 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800113a:	2001      	movs	r0, #1
 800113c:	f002 fc4c 	bl	80039d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}

08001144 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001148:	4802      	ldr	r0, [pc, #8]	@ (8001154 <ADC_IRQHandler+0x10>)
 800114a:	f000 fbd3 	bl	80018f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000124 	.word	0x20000124

08001158 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800115c:	4802      	ldr	r0, [pc, #8]	@ (8001168 <ETH_IRQHandler+0x10>)
 800115e:	f001 fb97 	bl	8002890 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20004db8 	.word	0x20004db8

0800116c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return 1;
 8001170:	2301      	movs	r3, #1
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <_kill>:

int _kill(int pid, int sig)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001186:	4b05      	ldr	r3, [pc, #20]	@ (800119c <_kill+0x20>)
 8001188:	2216      	movs	r2, #22
 800118a:	601a      	str	r2, [r3, #0]
  return -1;
 800118c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	20008730 	.word	0x20008730

080011a0 <_exit>:

void _exit (int status)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011a8:	f04f 31ff 	mov.w	r1, #4294967295
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ffe5 	bl	800117c <_kill>
  while (1) {}    /* Make sure we hang here */
 80011b2:	bf00      	nop
 80011b4:	e7fd      	b.n	80011b2 <_exit+0x12>

080011b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b086      	sub	sp, #24
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	60f8      	str	r0, [r7, #12]
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
 80011c6:	e00a      	b.n	80011de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011c8:	f3af 8000 	nop.w
 80011cc:	4601      	mov	r1, r0
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	1c5a      	adds	r2, r3, #1
 80011d2:	60ba      	str	r2, [r7, #8]
 80011d4:	b2ca      	uxtb	r2, r1
 80011d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	3301      	adds	r3, #1
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	dbf0      	blt.n	80011c8 <_read+0x12>
  }

  return len;
 80011e6:	687b      	ldr	r3, [r7, #4]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	e009      	b.n	8001216 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	1c5a      	adds	r2, r3, #1
 8001206:	60ba      	str	r2, [r7, #8]
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	3301      	adds	r3, #1
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	429a      	cmp	r2, r3
 800121c:	dbf1      	blt.n	8001202 <_write+0x12>
  }
  return len;
 800121e:	687b      	ldr	r3, [r7, #4]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <_close>:

int _close(int file)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001234:	4618      	mov	r0, r3
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001250:	605a      	str	r2, [r3, #4]
  return 0;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <_isatty>:

int _isatty(int file)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001268:	2301      	movs	r3, #1
}
 800126a:	4618      	mov	r0, r3
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001276:	b480      	push	{r7}
 8001278:	b085      	sub	sp, #20
 800127a:	af00      	add	r7, sp, #0
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001290:	b480      	push	{r7}
 8001292:	b087      	sub	sp, #28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001298:	4a14      	ldr	r2, [pc, #80]	@ (80012ec <_sbrk+0x5c>)
 800129a:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <_sbrk+0x60>)
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a4:	4b13      	ldr	r3, [pc, #76]	@ (80012f4 <_sbrk+0x64>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d102      	bne.n	80012b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012ac:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <_sbrk+0x64>)
 80012ae:	4a12      	ldr	r2, [pc, #72]	@ (80012f8 <_sbrk+0x68>)
 80012b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012b2:	4b10      	ldr	r3, [pc, #64]	@ (80012f4 <_sbrk+0x64>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d205      	bcs.n	80012cc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80012c0:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <_sbrk+0x6c>)
 80012c2:	220c      	movs	r2, #12
 80012c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	e009      	b.n	80012e0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80012cc:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <_sbrk+0x64>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012d2:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <_sbrk+0x64>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	4a06      	ldr	r2, [pc, #24]	@ (80012f4 <_sbrk+0x64>)
 80012dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012de:	68fb      	ldr	r3, [r7, #12]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	371c      	adds	r7, #28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	20020000 	.word	0x20020000
 80012f0:	00000400 	.word	0x00000400
 80012f4:	20000294 	.word	0x20000294
 80012f8:	20008740 	.word	0x20008740
 80012fc:	20008730 	.word	0x20008730

08001300 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <SystemInit+0x20>)
 8001306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800130a:	4a05      	ldr	r2, [pc, #20]	@ (8001320 <SystemInit+0x20>)
 800130c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001310:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001324:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800135c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001328:	f7ff ffea 	bl	8001300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800132c:	480c      	ldr	r0, [pc, #48]	@ (8001360 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800132e:	490d      	ldr	r1, [pc, #52]	@ (8001364 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001330:	4a0d      	ldr	r2, [pc, #52]	@ (8001368 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001334:	e002      	b.n	800133c <LoopCopyDataInit>

08001336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133a:	3304      	adds	r3, #4

0800133c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800133c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001340:	d3f9      	bcc.n	8001336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001342:	4a0a      	ldr	r2, [pc, #40]	@ (800136c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001344:	4c0a      	ldr	r4, [pc, #40]	@ (8001370 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001348:	e001      	b.n	800134e <LoopFillZerobss>

0800134a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800134c:	3204      	adds	r2, #4

0800134e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001350:	d3fb      	bcc.n	800134a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001352:	f011 f831 	bl	80123b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001356:	f7ff f929 	bl	80005ac <main>
  bx  lr    
 800135a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800135c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001364:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8001368:	08016194 	.word	0x08016194
  ldr r2, =_sbss
 800136c:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8001370:	20008740 	.word	0x20008740

08001374 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001374:	e7fe      	b.n	8001374 <CAN1_RX0_IRQHandler>

08001376 <LAN8742_RegisterBusIO>:
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	6039      	str	r1, [r7, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d00b      	beq.n	800139e <LAN8742_RegisterBusIO+0x28>
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d007      	beq.n	800139e <LAN8742_RegisterBusIO+0x28>
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <LAN8742_RegisterBusIO+0x28>
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d102      	bne.n	80013a4 <LAN8742_RegisterBusIO+0x2e>
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	e014      	b.n	80013ce <LAN8742_RegisterBusIO+0x58>
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	68da      	ldr	r2, [r3, #12]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	615a      	str	r2, [r3, #20]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	611a      	str	r2, [r3, #16]
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	691a      	ldr	r2, [r3, #16]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	619a      	str	r2, [r3, #24]
 80013cc:	2300      	movs	r3, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <LAN8742_Init>:
 80013da:	b580      	push	{r7, lr}
 80013dc:	b086      	sub	sp, #24
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d139      	bne.n	800146a <LAN8742_Init+0x90>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d002      	beq.n	8001404 <LAN8742_Init+0x2a>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	4798      	blx	r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2220      	movs	r2, #32
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	e01c      	b.n	800144a <LAN8742_Init+0x70>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	695b      	ldr	r3, [r3, #20]
 8001414:	f107 020c 	add.w	r2, r7, #12
 8001418:	2112      	movs	r1, #18
 800141a:	6978      	ldr	r0, [r7, #20]
 800141c:	4798      	blx	r3
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	da03      	bge.n	800142c <LAN8742_Init+0x52>
 8001424:	f06f 0304 	mvn.w	r3, #4
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	e00b      	b.n	8001444 <LAN8742_Init+0x6a>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 031f 	and.w	r3, r3, #31
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	429a      	cmp	r2, r3
 8001436:	d105      	bne.n	8001444 <LAN8742_Init+0x6a>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	e005      	b.n	8001450 <LAN8742_Init+0x76>
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	3301      	adds	r3, #1
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	2b1f      	cmp	r3, #31
 800144e:	d9df      	bls.n	8001410 <LAN8742_Init+0x36>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b1f      	cmp	r3, #31
 8001456:	d902      	bls.n	800145e <LAN8742_Init+0x84>
 8001458:	f06f 0302 	mvn.w	r3, #2
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d102      	bne.n	800146a <LAN8742_Init+0x90>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4618      	mov	r0, r3
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <LAN8742_GetLinkState>:
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	6810      	ldr	r0, [r2, #0]
 8001488:	f107 020c 	add.w	r2, r7, #12
 800148c:	2101      	movs	r1, #1
 800148e:	4798      	blx	r3
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	da02      	bge.n	800149c <LAN8742_GetLinkState+0x28>
 8001496:	f06f 0304 	mvn.w	r3, #4
 800149a:	e06e      	b.n	800157a <LAN8742_GetLinkState+0x106>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	6810      	ldr	r0, [r2, #0]
 80014a4:	f107 020c 	add.w	r2, r7, #12
 80014a8:	2101      	movs	r1, #1
 80014aa:	4798      	blx	r3
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	da02      	bge.n	80014b8 <LAN8742_GetLinkState+0x44>
 80014b2:	f06f 0304 	mvn.w	r3, #4
 80014b6:	e060      	b.n	800157a <LAN8742_GetLinkState+0x106>
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <LAN8742_GetLinkState+0x52>
 80014c2:	2301      	movs	r3, #1
 80014c4:	e059      	b.n	800157a <LAN8742_GetLinkState+0x106>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	6810      	ldr	r0, [r2, #0]
 80014ce:	f107 020c 	add.w	r2, r7, #12
 80014d2:	2100      	movs	r1, #0
 80014d4:	4798      	blx	r3
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	da02      	bge.n	80014e2 <LAN8742_GetLinkState+0x6e>
 80014dc:	f06f 0304 	mvn.w	r3, #4
 80014e0:	e04b      	b.n	800157a <LAN8742_GetLinkState+0x106>
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d11b      	bne.n	8001524 <LAN8742_GetLinkState+0xb0>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d006      	beq.n	8001504 <LAN8742_GetLinkState+0x90>
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <LAN8742_GetLinkState+0x90>
 8001500:	2302      	movs	r3, #2
 8001502:	e03a      	b.n	800157a <LAN8742_GetLinkState+0x106>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <LAN8742_GetLinkState+0x9e>
 800150e:	2303      	movs	r3, #3
 8001510:	e033      	b.n	800157a <LAN8742_GetLinkState+0x106>
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <LAN8742_GetLinkState+0xac>
 800151c:	2304      	movs	r3, #4
 800151e:	e02c      	b.n	800157a <LAN8742_GetLinkState+0x106>
 8001520:	2305      	movs	r3, #5
 8001522:	e02a      	b.n	800157a <LAN8742_GetLinkState+0x106>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	6810      	ldr	r0, [r2, #0]
 800152c:	f107 020c 	add.w	r2, r7, #12
 8001530:	211f      	movs	r1, #31
 8001532:	4798      	blx	r3
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	da02      	bge.n	8001540 <LAN8742_GetLinkState+0xcc>
 800153a:	f06f 0304 	mvn.w	r3, #4
 800153e:	e01c      	b.n	800157a <LAN8742_GetLinkState+0x106>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <LAN8742_GetLinkState+0xda>
 800154a:	2306      	movs	r3, #6
 800154c:	e015      	b.n	800157a <LAN8742_GetLinkState+0x106>
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f003 031c 	and.w	r3, r3, #28
 8001554:	2b18      	cmp	r3, #24
 8001556:	d101      	bne.n	800155c <LAN8742_GetLinkState+0xe8>
 8001558:	2302      	movs	r3, #2
 800155a:	e00e      	b.n	800157a <LAN8742_GetLinkState+0x106>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 031c 	and.w	r3, r3, #28
 8001562:	2b08      	cmp	r3, #8
 8001564:	d101      	bne.n	800156a <LAN8742_GetLinkState+0xf6>
 8001566:	2303      	movs	r3, #3
 8001568:	e007      	b.n	800157a <LAN8742_GetLinkState+0x106>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f003 031c 	and.w	r3, r3, #28
 8001570:	2b14      	cmp	r3, #20
 8001572:	d101      	bne.n	8001578 <LAN8742_GetLinkState+0x104>
 8001574:	2304      	movs	r3, #4
 8001576:	e000      	b.n	800157a <LAN8742_GetLinkState+0x106>
 8001578:	2305      	movs	r3, #5
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001588:	4b0e      	ldr	r3, [pc, #56]	@ (80015c4 <HAL_Init+0x40>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0d      	ldr	r2, [pc, #52]	@ (80015c4 <HAL_Init+0x40>)
 800158e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001592:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001594:	4b0b      	ldr	r3, [pc, #44]	@ (80015c4 <HAL_Init+0x40>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0a      	ldr	r2, [pc, #40]	@ (80015c4 <HAL_Init+0x40>)
 800159a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800159e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a0:	4b08      	ldr	r3, [pc, #32]	@ (80015c4 <HAL_Init+0x40>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a07      	ldr	r2, [pc, #28]	@ (80015c4 <HAL_Init+0x40>)
 80015a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ac:	2003      	movs	r0, #3
 80015ae:	f000 fdcb 	bl	8002148 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015b2:	200f      	movs	r0, #15
 80015b4:	f000 f808 	bl	80015c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b8:	f7ff fc6e 	bl	8000e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023c00 	.word	0x40023c00

080015c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d0:	4b12      	ldr	r3, [pc, #72]	@ (800161c <HAL_InitTick+0x54>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <HAL_InitTick+0x58>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4619      	mov	r1, r3
 80015da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015de:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 fde3 	bl	80021b2 <HAL_SYSTICK_Config>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e00e      	b.n	8001614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b0f      	cmp	r3, #15
 80015fa:	d80a      	bhi.n	8001612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015fc:	2200      	movs	r2, #0
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	f04f 30ff 	mov.w	r0, #4294967295
 8001604:	f000 fdab 	bl	800215e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001608:	4a06      	ldr	r2, [pc, #24]	@ (8001624 <HAL_InitTick+0x5c>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	e000      	b.n	8001614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
}
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000000 	.word	0x20000000
 8001620:	20000008 	.word	0x20000008
 8001624:	20000004 	.word	0x20000004

08001628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800162c:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <HAL_IncTick+0x20>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	4b06      	ldr	r3, [pc, #24]	@ (800164c <HAL_IncTick+0x24>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4413      	add	r3, r2
 8001638:	4a04      	ldr	r2, [pc, #16]	@ (800164c <HAL_IncTick+0x24>)
 800163a:	6013      	str	r3, [r2, #0]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000008 	.word	0x20000008
 800164c:	20000298 	.word	0x20000298

08001650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return uwTick;
 8001654:	4b03      	ldr	r3, [pc, #12]	@ (8001664 <HAL_GetTick+0x14>)
 8001656:	681b      	ldr	r3, [r3, #0]
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	20000298 	.word	0x20000298

08001668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001670:	f7ff ffee 	bl	8001650 <HAL_GetTick>
 8001674:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001680:	d005      	beq.n	800168e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001682:	4b0a      	ldr	r3, [pc, #40]	@ (80016ac <HAL_Delay+0x44>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4413      	add	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800168e:	bf00      	nop
 8001690:	f7ff ffde 	bl	8001650 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	429a      	cmp	r2, r3
 800169e:	d8f7      	bhi.n	8001690 <HAL_Delay+0x28>
  {
  }
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000008 	.word	0x20000008

080016b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e033      	b.n	800172e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d109      	bne.n	80016e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff fc0a 	bl	8000ee8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	f003 0310 	and.w	r3, r3, #16
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d118      	bne.n	8001720 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016f6:	f023 0302 	bic.w	r3, r3, #2
 80016fa:	f043 0202 	orr.w	r2, r3, #2
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 fb4a 	bl	8001d9c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001712:	f023 0303 	bic.w	r3, r3, #3
 8001716:	f043 0201 	orr.w	r2, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	641a      	str	r2, [r3, #64]	@ 0x40
 800171e:	e001      	b.n	8001724 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800172c:	7bfb      	ldrb	r3, [r7, #15]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800174a:	2b01      	cmp	r3, #1
 800174c:	d101      	bne.n	8001752 <HAL_ADC_Start_IT+0x1a>
 800174e:	2302      	movs	r3, #2
 8001750:	e0bd      	b.n	80018ce <HAL_ADC_Start_IT+0x196>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b01      	cmp	r3, #1
 8001766:	d018      	beq.n	800179a <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f042 0201 	orr.w	r2, r2, #1
 8001776:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001778:	4b58      	ldr	r3, [pc, #352]	@ (80018dc <HAL_ADC_Start_IT+0x1a4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a58      	ldr	r2, [pc, #352]	@ (80018e0 <HAL_ADC_Start_IT+0x1a8>)
 800177e:	fba2 2303 	umull	r2, r3, r2, r3
 8001782:	0c9a      	lsrs	r2, r3, #18
 8001784:	4613      	mov	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800178c:	e002      	b.n	8001794 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	3b01      	subs	r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f9      	bne.n	800178e <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	f040 8085 	bne.w	80018b4 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ae:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80017b2:	f023 0301 	bic.w	r3, r3, #1
 80017b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d007      	beq.n	80017dc <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017d4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017e8:	d106      	bne.n	80017f8 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ee:	f023 0206 	bic.w	r2, r3, #6
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	645a      	str	r2, [r3, #68]	@ 0x44
 80017f6:	e002      	b.n	80017fe <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001806:	4b37      	ldr	r3, [pc, #220]	@ (80018e4 <HAL_ADC_Start_IT+0x1ac>)
 8001808:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001812:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001822:	f043 0320 	orr.w	r3, r3, #32
 8001826:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 031f 	and.w	r3, r3, #31
 8001830:	2b00      	cmp	r3, #0
 8001832:	d12a      	bne.n	800188a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a2b      	ldr	r2, [pc, #172]	@ (80018e8 <HAL_ADC_Start_IT+0x1b0>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d015      	beq.n	800186a <HAL_ADC_Start_IT+0x132>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a2a      	ldr	r2, [pc, #168]	@ (80018ec <HAL_ADC_Start_IT+0x1b4>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d105      	bne.n	8001854 <HAL_ADC_Start_IT+0x11c>
 8001848:	4b26      	ldr	r3, [pc, #152]	@ (80018e4 <HAL_ADC_Start_IT+0x1ac>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 031f 	and.w	r3, r3, #31
 8001850:	2b00      	cmp	r3, #0
 8001852:	d00a      	beq.n	800186a <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a25      	ldr	r2, [pc, #148]	@ (80018f0 <HAL_ADC_Start_IT+0x1b8>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d136      	bne.n	80018cc <HAL_ADC_Start_IT+0x194>
 800185e:	4b21      	ldr	r3, [pc, #132]	@ (80018e4 <HAL_ADC_Start_IT+0x1ac>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 0310 	and.w	r3, r3, #16
 8001866:	2b00      	cmp	r3, #0
 8001868:	d130      	bne.n	80018cc <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d129      	bne.n	80018cc <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	e020      	b.n	80018cc <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a16      	ldr	r2, [pc, #88]	@ (80018e8 <HAL_ADC_Start_IT+0x1b0>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d11b      	bne.n	80018cc <HAL_ADC_Start_IT+0x194>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d114      	bne.n	80018cc <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	e00b      	b.n	80018cc <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b8:	f043 0210 	orr.w	r2, r3, #16
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c4:	f043 0201 	orr.w	r2, r3, #1
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	20000000 	.word	0x20000000
 80018e0:	431bde83 	.word	0x431bde83
 80018e4:	40012300 	.word	0x40012300
 80018e8:	40012000 	.word	0x40012000
 80018ec:	40012100 	.word	0x40012100
 80018f0:	40012200 	.word	0x40012200

080018f4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	2300      	movs	r3, #0
 8001902:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	f003 0320 	and.w	r3, r3, #32
 8001922:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d049      	beq.n	80019be <HAL_ADC_IRQHandler+0xca>
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d046      	beq.n	80019be <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001934:	f003 0310 	and.w	r3, r3, #16
 8001938:	2b00      	cmp	r3, #0
 800193a:	d105      	bne.n	8001948 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001940:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d12b      	bne.n	80019ae <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800195a:	2b00      	cmp	r3, #0
 800195c:	d127      	bne.n	80019ae <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001964:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001968:	2b00      	cmp	r3, #0
 800196a:	d006      	beq.n	800197a <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001976:	2b00      	cmp	r3, #0
 8001978:	d119      	bne.n	80019ae <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0220 	bic.w	r2, r2, #32
 8001988:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d105      	bne.n	80019ae <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a6:	f043 0201 	orr.w	r2, r3, #1
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff f8b6 	bl	8000b20 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f06f 0212 	mvn.w	r2, #18
 80019bc:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019cc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d057      	beq.n	8001a84 <HAL_ADC_IRQHandler+0x190>
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d054      	beq.n	8001a84 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019de:	f003 0310 	and.w	r3, r3, #16
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d105      	bne.n	80019f2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ea:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d139      	bne.n	8001a74 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a06:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d006      	beq.n	8001a1c <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d12b      	bne.n	8001a74 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d124      	bne.n	8001a74 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d11d      	bne.n	8001a74 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d119      	bne.n	8001a74 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a4e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d105      	bne.n	8001a74 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6c:	f043 0201 	orr.w	r2, r3, #1
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 fa8d 	bl	8001f94 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f06f 020c 	mvn.w	r2, #12
 8001a82:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a92:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d017      	beq.n	8001aca <HAL_ADC_IRQHandler+0x1d6>
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d014      	beq.n	8001aca <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d10d      	bne.n	8001aca <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f837 	bl	8001b2e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f06f 0201 	mvn.w	r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f003 0320 	and.w	r3, r3, #32
 8001ad0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ad8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d015      	beq.n	8001b0c <HAL_ADC_IRQHandler+0x218>
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d012      	beq.n	8001b0c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aea:	f043 0202 	orr.w	r2, r3, #2
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f06f 0220 	mvn.w	r2, #32
 8001afa:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 f820 	bl	8001b42 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f06f 0220 	mvn.w	r2, #32
 8001b0a:	601a      	str	r2, [r3, #0]
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d101      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x1c>
 8001b70:	2302      	movs	r3, #2
 8001b72:	e105      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x228>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b09      	cmp	r3, #9
 8001b82:	d925      	bls.n	8001bd0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68d9      	ldr	r1, [r3, #12]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	461a      	mov	r2, r3
 8001b92:	4613      	mov	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	3b1e      	subs	r3, #30
 8001b9a:	2207      	movs	r2, #7
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43da      	mvns	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	400a      	ands	r2, r1
 8001ba8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68d9      	ldr	r1, [r3, #12]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	4618      	mov	r0, r3
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4403      	add	r3, r0
 8001bc2:	3b1e      	subs	r3, #30
 8001bc4:	409a      	lsls	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	e022      	b.n	8001c16 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6919      	ldr	r1, [r3, #16]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4613      	mov	r3, r2
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4413      	add	r3, r2
 8001be4:	2207      	movs	r2, #7
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43da      	mvns	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	400a      	ands	r2, r1
 8001bf2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6919      	ldr	r1, [r3, #16]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	4618      	mov	r0, r3
 8001c06:	4603      	mov	r3, r0
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	4403      	add	r3, r0
 8001c0c:	409a      	lsls	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b06      	cmp	r3, #6
 8001c1c:	d824      	bhi.n	8001c68 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3b05      	subs	r3, #5
 8001c30:	221f      	movs	r2, #31
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43da      	mvns	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	400a      	ands	r2, r1
 8001c3e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	3b05      	subs	r3, #5
 8001c5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c66:	e04c      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b0c      	cmp	r3, #12
 8001c6e:	d824      	bhi.n	8001cba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	3b23      	subs	r3, #35	@ 0x23
 8001c82:	221f      	movs	r2, #31
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43da      	mvns	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	400a      	ands	r2, r1
 8001c90:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	3b23      	subs	r3, #35	@ 0x23
 8001cac:	fa00 f203 	lsl.w	r2, r0, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cb8:	e023      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	3b41      	subs	r3, #65	@ 0x41
 8001ccc:	221f      	movs	r2, #31
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43da      	mvns	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	400a      	ands	r2, r1
 8001cda:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	4618      	mov	r0, r3
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3b41      	subs	r3, #65	@ 0x41
 8001cf6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d02:	4b22      	ldr	r3, [pc, #136]	@ (8001d8c <HAL_ADC_ConfigChannel+0x234>)
 8001d04:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a21      	ldr	r2, [pc, #132]	@ (8001d90 <HAL_ADC_ConfigChannel+0x238>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d109      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x1cc>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b12      	cmp	r3, #18
 8001d16:	d105      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a19      	ldr	r2, [pc, #100]	@ (8001d90 <HAL_ADC_ConfigChannel+0x238>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d123      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x21e>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b10      	cmp	r3, #16
 8001d34:	d003      	beq.n	8001d3e <HAL_ADC_ConfigChannel+0x1e6>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2b11      	cmp	r3, #17
 8001d3c:	d11b      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b10      	cmp	r3, #16
 8001d50:	d111      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d52:	4b10      	ldr	r3, [pc, #64]	@ (8001d94 <HAL_ADC_ConfigChannel+0x23c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a10      	ldr	r2, [pc, #64]	@ (8001d98 <HAL_ADC_ConfigChannel+0x240>)
 8001d58:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5c:	0c9a      	lsrs	r2, r3, #18
 8001d5e:	4613      	mov	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d68:	e002      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f9      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	40012300 	.word	0x40012300
 8001d90:	40012000 	.word	0x40012000
 8001d94:	20000000 	.word	0x20000000
 8001d98:	431bde83 	.word	0x431bde83

08001d9c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001da4:	4b79      	ldr	r3, [pc, #484]	@ (8001f8c <ADC_Init+0x1f0>)
 8001da6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001dd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6859      	ldr	r1, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	021a      	lsls	r2, r3, #8
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001df4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6859      	ldr	r1, [r3, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6899      	ldr	r1, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2e:	4a58      	ldr	r2, [pc, #352]	@ (8001f90 <ADC_Init+0x1f4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d022      	beq.n	8001e7a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e42:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6899      	ldr	r1, [r3, #8]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6899      	ldr	r1, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	e00f      	b.n	8001e9a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e98:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0202 	bic.w	r2, r2, #2
 8001ea8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6899      	ldr	r1, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	7e1b      	ldrb	r3, [r3, #24]
 8001eb4:	005a      	lsls	r2, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d01b      	beq.n	8001f00 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ed6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001ee6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6859      	ldr	r1, [r3, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	035a      	lsls	r2, r3, #13
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	e007      	b.n	8001f10 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f0e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001f1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	051a      	lsls	r2, r3, #20
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6899      	ldr	r1, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f52:	025a      	lsls	r2, r3, #9
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6899      	ldr	r1, [r3, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	029a      	lsls	r2, r3, #10
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	609a      	str	r2, [r3, #8]
}
 8001f80:	bf00      	nop
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	40012300 	.word	0x40012300
 8001f90:	0f000001 	.word	0x0f000001

08001f94 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001fec <__NVIC_SetPriorityGrouping+0x44>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fda:	4a04      	ldr	r2, [pc, #16]	@ (8001fec <__NVIC_SetPriorityGrouping+0x44>)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	60d3      	str	r3, [r2, #12]
}
 8001fe0:	bf00      	nop
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff4:	4b04      	ldr	r3, [pc, #16]	@ (8002008 <__NVIC_GetPriorityGrouping+0x18>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	0a1b      	lsrs	r3, r3, #8
 8001ffa:	f003 0307 	and.w	r3, r3, #7
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	2b00      	cmp	r3, #0
 800201c:	db0b      	blt.n	8002036 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	f003 021f 	and.w	r2, r3, #31
 8002024:	4907      	ldr	r1, [pc, #28]	@ (8002044 <__NVIC_EnableIRQ+0x38>)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	2001      	movs	r0, #1
 800202e:	fa00 f202 	lsl.w	r2, r0, r2
 8002032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	e000e100 	.word	0xe000e100

08002048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	6039      	str	r1, [r7, #0]
 8002052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002058:	2b00      	cmp	r3, #0
 800205a:	db0a      	blt.n	8002072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	b2da      	uxtb	r2, r3
 8002060:	490c      	ldr	r1, [pc, #48]	@ (8002094 <__NVIC_SetPriority+0x4c>)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	0112      	lsls	r2, r2, #4
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	440b      	add	r3, r1
 800206c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002070:	e00a      	b.n	8002088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4908      	ldr	r1, [pc, #32]	@ (8002098 <__NVIC_SetPriority+0x50>)
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	3b04      	subs	r3, #4
 8002080:	0112      	lsls	r2, r2, #4
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	440b      	add	r3, r1
 8002086:	761a      	strb	r2, [r3, #24]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000e100 	.word	0xe000e100
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800209c:	b480      	push	{r7}
 800209e:	b089      	sub	sp, #36	@ 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f1c3 0307 	rsb	r3, r3, #7
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	bf28      	it	cs
 80020ba:	2304      	movcs	r3, #4
 80020bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3304      	adds	r3, #4
 80020c2:	2b06      	cmp	r3, #6
 80020c4:	d902      	bls.n	80020cc <NVIC_EncodePriority+0x30>
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3b03      	subs	r3, #3
 80020ca:	e000      	b.n	80020ce <NVIC_EncodePriority+0x32>
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d0:	f04f 32ff 	mov.w	r2, #4294967295
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43da      	mvns	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	401a      	ands	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e4:	f04f 31ff 	mov.w	r1, #4294967295
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	43d9      	mvns	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f4:	4313      	orrs	r3, r2
         );
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3724      	adds	r7, #36	@ 0x24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3b01      	subs	r3, #1
 8002110:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002114:	d301      	bcc.n	800211a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002116:	2301      	movs	r3, #1
 8002118:	e00f      	b.n	800213a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800211a:	4a0a      	ldr	r2, [pc, #40]	@ (8002144 <SysTick_Config+0x40>)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3b01      	subs	r3, #1
 8002120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002122:	210f      	movs	r1, #15
 8002124:	f04f 30ff 	mov.w	r0, #4294967295
 8002128:	f7ff ff8e 	bl	8002048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800212c:	4b05      	ldr	r3, [pc, #20]	@ (8002144 <SysTick_Config+0x40>)
 800212e:	2200      	movs	r2, #0
 8002130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002132:	4b04      	ldr	r3, [pc, #16]	@ (8002144 <SysTick_Config+0x40>)
 8002134:	2207      	movs	r2, #7
 8002136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	e000e010 	.word	0xe000e010

08002148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff ff29 	bl	8001fa8 <__NVIC_SetPriorityGrouping>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800215e:	b580      	push	{r7, lr}
 8002160:	b086      	sub	sp, #24
 8002162:	af00      	add	r7, sp, #0
 8002164:	4603      	mov	r3, r0
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	607a      	str	r2, [r7, #4]
 800216a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002170:	f7ff ff3e 	bl	8001ff0 <__NVIC_GetPriorityGrouping>
 8002174:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	6978      	ldr	r0, [r7, #20]
 800217c:	f7ff ff8e 	bl	800209c <NVIC_EncodePriority>
 8002180:	4602      	mov	r2, r0
 8002182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002186:	4611      	mov	r1, r2
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff5d 	bl	8002048 <__NVIC_SetPriority>
}
 800218e:	bf00      	nop
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	4603      	mov	r3, r0
 800219e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff ff31 	bl	800200c <__NVIC_EnableIRQ>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff ffa2 	bl	8002104 <SysTick_Config>
 80021c0:	4603      	mov	r3, r0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e08a      	b.n	80022f4 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d106      	bne.n	80021f6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f003 fdc7 	bl	8005d84 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	4b40      	ldr	r3, [pc, #256]	@ (80022fc <HAL_ETH_Init+0x130>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fe:	4a3f      	ldr	r2, [pc, #252]	@ (80022fc <HAL_ETH_Init+0x130>)
 8002200:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002204:	6453      	str	r3, [r2, #68]	@ 0x44
 8002206:	4b3d      	ldr	r3, [pc, #244]	@ (80022fc <HAL_ETH_Init+0x130>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002212:	4b3b      	ldr	r3, [pc, #236]	@ (8002300 <HAL_ETH_Init+0x134>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4a3a      	ldr	r2, [pc, #232]	@ (8002300 <HAL_ETH_Init+0x134>)
 8002218:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800221c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800221e:	4b38      	ldr	r3, [pc, #224]	@ (8002300 <HAL_ETH_Init+0x134>)
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	4936      	ldr	r1, [pc, #216]	@ (8002300 <HAL_ETH_Init+0x134>)
 8002228:	4313      	orrs	r3, r2
 800222a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800222c:	4b34      	ldr	r3, [pc, #208]	@ (8002300 <HAL_ETH_Init+0x134>)
 800222e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6812      	ldr	r2, [r2, #0]
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002246:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002248:	f7ff fa02 	bl	8001650 <HAL_GetTick>
 800224c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800224e:	e011      	b.n	8002274 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002250:	f7ff f9fe 	bl	8001650 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800225e:	d909      	bls.n	8002274 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2204      	movs	r2, #4
 8002264:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	22e0      	movs	r2, #224	@ 0xe0
 800226c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e03f      	b.n	80022f4 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1e4      	bne.n	8002250 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 ff32 	bl	80030f0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 ffdd 	bl	800324c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f001 f833 	bl	80032fe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	461a      	mov	r2, r3
 800229e:	2100      	movs	r1, #0
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 ff9b 	bl	80031dc <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80022b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6812      	ldr	r2, [r2, #0]
 80022c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022c6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80022ca:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80022de:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2210      	movs	r2, #16
 80022ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40023800 	.word	0x40023800
 8002300:	40013800 	.word	0x40013800

08002304 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002312:	2b10      	cmp	r3, #16
 8002314:	d161      	bne.n	80023da <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2220      	movs	r2, #32
 800231a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2204      	movs	r2, #4
 8002328:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 fa2c 	bl	8002788 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002338:	2001      	movs	r0, #1
 800233a:	f7ff f995 	bl	8001668 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002358:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800235c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6812      	ldr	r2, [r2, #0]
 800236c:	f043 0302 	orr.w	r3, r3, #2
 8002370:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002374:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 fd56 	bl	8002e28 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0208 	orr.w	r2, r2, #8
 800238a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002394:	2001      	movs	r0, #1
 8002396:	f7ff f967 	bl	8001668 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f042 0204 	orr.w	r2, r2, #4
 80023b0:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 80023c4:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 80023c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023cc:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2240      	movs	r2, #64	@ 0x40
 80023d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	e000      	b.n	80023dc <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
  }
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023f2:	2b40      	cmp	r3, #64	@ 0x40
 80023f4:	d170      	bne.n	80024d8 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2220      	movs	r2, #32
 80023fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6812      	ldr	r2, [r2, #0]
 800240c:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8002410:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8002414:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002418:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800242c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002430:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	f023 0302 	bic.w	r3, r3, #2
 8002444:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002448:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 0204 	bic.w	r2, r2, #4
 8002458:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002462:	2001      	movs	r0, #1
 8002464:	f7ff f900 	bl	8001668 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 fcd9 	bl	8002e28 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0208 	bic.w	r2, r2, #8
 8002484:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800248e:	2001      	movs	r0, #1
 8002490:	f7ff f8ea 	bl	8001668 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	e00e      	b.n	80024c0 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	3212      	adds	r2, #18
 80024a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ac:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	3301      	adds	r3, #1
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d9ed      	bls.n	80024a2 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2210      	movs	r2, #16
 80024d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	e000      	b.n	80024da <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
  }
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b086      	sub	sp, #24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	60f8      	str	r0, [r7, #12]
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d109      	bne.n	8002508 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fa:	f043 0201 	orr.w	r2, r3, #1
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e07c      	b.n	8002602 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800250e:	2b40      	cmp	r3, #64	@ 0x40
 8002510:	d176      	bne.n	8002600 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002512:	2200      	movs	r2, #0
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 ff60 	bl	80033dc <ETH_Prepare_Tx_Descriptors>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002528:	f043 0202 	orr.w	r2, r3, #2
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e065      	b.n	8002602 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8002536:	f3bf 8f4f 	dsb	sy
}
 800253a:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	3206      	adds	r2, #6
 8002544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002548:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	629a      	str	r2, [r3, #40]	@ 0x28
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002558:	2b03      	cmp	r3, #3
 800255a:	d904      	bls.n	8002566 <HAL_ETH_Transmit+0x84>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002560:	1f1a      	subs	r2, r3, #4
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	3106      	adds	r1, #6
 8002572:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002576:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800257a:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800257c:	f7ff f868 	bl	8001650 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002582:	e037      	b.n	80025f4 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d011      	beq.n	80025ba <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800259c:	f043 0208 	orr.w	r2, r3, #8
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025ae:	695a      	ldr	r2, [r3, #20]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e023      	b.n	8002602 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c0:	d018      	beq.n	80025f4 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025c2:	f7ff f845 	bl	8001650 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d302      	bcc.n	80025d8 <HAL_ETH_Transmit+0xf6>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10d      	bne.n	80025f4 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025de:	f043 0204 	orr.w	r2, r3, #4
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80025ee:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e006      	b.n	8002602 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	dbc3      	blt.n	8002584 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	e000      	b.n	8002602 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
  }
}
 8002602:	4618      	mov	r0, r3
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b088      	sub	sp, #32
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d109      	bne.n	8002636 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002628:	f043 0201 	orr.w	r2, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e0a4      	b.n	8002780 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800263c:	2b40      	cmp	r3, #64	@ 0x40
 800263e:	d001      	beq.n	8002644 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e09d      	b.n	8002780 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002648:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	3212      	adds	r2, #18
 8002650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002654:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800265a:	f1c3 0304 	rsb	r3, r3, #4
 800265e:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002660:	e066      	b.n	8002730 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800266a:	2b00      	cmp	r3, #0
 800266c:	d007      	beq.n	800267e <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	69da      	ldr	r2, [r3, #28]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	699a      	ldr	r2, [r3, #24]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002686:	2b00      	cmp	r3, #0
 8002688:	d103      	bne.n	8002692 <HAL_ETH_ReadData+0x88>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800268e:	2b00      	cmp	r3, #0
 8002690:	d03c      	beq.n	800270c <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800269a:	2b00      	cmp	r3, #0
 800269c:	d005      	beq.n	80026aa <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	0c1b      	lsrs	r3, r3, #16
 80026b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80026b4:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d005      	beq.n	80026ce <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80026ca:	2301      	movs	r3, #1
 80026cc:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80026e6:	461a      	mov	r2, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	f003 fd02 	bl	80060f4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	441a      	add	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	2200      	movs	r2, #0
 800270a:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	3301      	adds	r3, #1
 8002710:	61fb      	str	r3, [r7, #28]
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	2b03      	cmp	r3, #3
 8002716:	d902      	bls.n	800271e <HAL_ETH_ReadData+0x114>
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	3b04      	subs	r3, #4
 800271c:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69fa      	ldr	r2, [r7, #28]
 8002722:	3212      	adds	r2, #18
 8002724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002728:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	3301      	adds	r3, #1
 800272e:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002734:	2b00      	cmp	r3, #0
 8002736:	db06      	blt.n	8002746 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	429a      	cmp	r2, r3
 800273e:	d202      	bcs.n	8002746 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8002740:	7cfb      	ldrb	r3, [r7, #19]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d08d      	beq.n	8002662 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	441a      	add	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f814 	bl	8002788 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69fa      	ldr	r2, [r7, #28]
 8002764:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002766:	7cfb      	ldrb	r3, [r7, #19]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d108      	bne.n	800277e <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	e000      	b.n	8002780 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
}
 8002780:	4618      	mov	r0, r3
 8002782:	3720      	adds	r7, #32
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002790:	2300      	movs	r3, #0
 8002792:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002794:	2301      	movs	r3, #1
 8002796:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800279c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69fa      	ldr	r2, [r7, #28]
 80027a2:	3212      	adds	r2, #18
 80027a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027ae:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80027b0:	e044      	b.n	800283c <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d112      	bne.n	80027e0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80027ba:	f107 0308 	add.w	r3, r7, #8
 80027be:	4618      	mov	r0, r3
 80027c0:	f003 fc68 	bl	8006094 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d102      	bne.n	80027d0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	74fb      	strb	r3, [r7, #19]
 80027ce:	e007      	b.n	80027e0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	461a      	mov	r2, r3
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	461a      	mov	r2, r3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80027e0:	7cfb      	ldrb	r3, [r7, #19]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d02a      	beq.n	800283c <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d108      	bne.n	8002800 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	6053      	str	r3, [r2, #4]
 80027fe:	e005      	b.n	800280c <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	3301      	adds	r3, #1
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	2b03      	cmp	r3, #3
 8002822:	d902      	bls.n	800282a <ETH_UpdateDescriptor+0xa2>
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	3b04      	subs	r3, #4
 8002828:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69fa      	ldr	r2, [r7, #28]
 800282e:	3212      	adds	r2, #18
 8002830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002834:	617b      	str	r3, [r7, #20]
      desccount--;
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	3b01      	subs	r3, #1
 800283a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <ETH_UpdateDescriptor+0xc0>
 8002842:	7cfb      	ldrb	r3, [r7, #19]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1b4      	bne.n	80027b2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	429a      	cmp	r2, r3
 8002850:	d01a      	beq.n	8002888 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3303      	adds	r3, #3
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800285c:	f3bf 8f5f 	dmb	sy
}
 8002860:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6919      	ldr	r1, [r3, #16]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	18ca      	adds	r2, r1, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800287a:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002888:	bf00      	nop
 800288a:	3720      	adds	r7, #32
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800289e:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80028b8:	4b4b      	ldr	r3, [pc, #300]	@ (80029e8 <HAL_ETH_IRQHandler+0x158>)
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00e      	beq.n	80028e6 <HAL_ETH_IRQHandler+0x56>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d009      	beq.n	80028e6 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028da:	461a      	mov	r2, r3
 80028dc:	4b43      	ldr	r3, [pc, #268]	@ (80029ec <HAL_ETH_IRQHandler+0x15c>)
 80028de:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f891 	bl	8002a08 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00f      	beq.n	8002910 <HAL_ETH_IRQHandler+0x80>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00a      	beq.n	8002910 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002902:	461a      	mov	r2, r3
 8002904:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002908:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f872 	bl	80029f4 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d042      	beq.n	80029a0 <HAL_ETH_IRQHandler+0x110>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d03d      	beq.n	80029a0 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800292a:	f043 0208 	orr.w	r2, r3, #8
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d01a      	beq.n	8002974 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002946:	695a      	ldr	r2, [r3, #20]
 8002948:	4b29      	ldr	r3, [pc, #164]	@ (80029f0 <HAL_ETH_IRQHandler+0x160>)
 800294a:	4013      	ands	r3, r2
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002964:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002968:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	22e0      	movs	r2, #224	@ 0xe0
 800296e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002972:	e012      	b.n	800299a <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800297c:	695a      	ldr	r2, [r3, #20]
 800297e:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002982:	4013      	ands	r3, r2
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002992:	461a      	mov	r2, r3
 8002994:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002998:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f83e 	bl	8002a1c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00e      	beq.n	80029c8 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f838 	bl	8002a30 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d006      	beq.n	80029e0 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80029d2:	4b05      	ldr	r3, [pc, #20]	@ (80029e8 <HAL_ETH_IRQHandler+0x158>)
 80029d4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80029d8:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f832 	bl	8002a44 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80029e0:	bf00      	nop
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40013c00 	.word	0x40013c00
 80029ec:	00010040 	.word	0x00010040
 80029f0:	007e2000 	.word	0x007e2000

080029f4 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
 8002a64:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f003 031c 	and.w	r3, r3, #28
 8002a74:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	02db      	lsls	r3, r3, #11
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	019b      	lsls	r3, r3, #6
 8002a86:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	f023 0302 	bic.w	r3, r3, #2
 8002a96:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002aa8:	f7fe fdd2 	bl	8001650 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002aae:	e00d      	b.n	8002acc <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002ab0:	f7fe fdce 	bl	8001650 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002abe:	d301      	bcc.n	8002ac4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e010      	b.n	8002ae6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1ec      	bne.n	8002ab0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	461a      	mov	r2, r3
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b086      	sub	sp, #24
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
 8002afa:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	f003 031c 	and.w	r3, r3, #28
 8002b0a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	02db      	lsls	r3, r3, #11
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	019b      	lsls	r3, r3, #6
 8002b1c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f043 0302 	orr.w	r3, r3, #2
 8002b2c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b48:	f7fe fd82 	bl	8001650 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b4e:	e00d      	b.n	8002b6c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002b50:	f7fe fd7e 	bl	8001650 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b5e:	d301      	bcc.n	8002b64 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e009      	b.n	8002b78 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1ec      	bne.n	8002b50 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0e6      	b.n	8002d62 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0310 	and.w	r3, r3, #16
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	bf14      	ite	ne
 8002ba2:	2301      	movne	r3, #1
 8002ba4:	2300      	moveq	r3, #0
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	461a      	mov	r2, r3
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	bf0c      	ite	eq
 8002bcc:	2301      	moveq	r3, #1
 8002bce:	2300      	movne	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bf14      	ite	ne
 8002be8:	2301      	movne	r3, #1
 8002bea:	2300      	moveq	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	bf0c      	ite	eq
 8002c02:	2301      	moveq	r3, #1
 8002c04:	2300      	movne	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	461a      	mov	r2, r3
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	bf14      	ite	ne
 8002c1c:	2301      	movne	r3, #1
 8002c1e:	2300      	moveq	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	461a      	mov	r2, r3
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	bf0c      	ite	eq
 8002c52:	2301      	moveq	r3, #1
 8002c54:	2300      	movne	r3, #0
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	461a      	mov	r2, r3
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	bf0c      	ite	eq
 8002c6c:	2301      	moveq	r3, #1
 8002c6e:	2300      	movne	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	461a      	mov	r2, r3
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	bf14      	ite	ne
 8002c86:	2301      	movne	r3, #1
 8002c88:	2300      	moveq	r3, #0
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	bf14      	ite	ne
 8002cae:	2301      	movne	r3, #1
 8002cb0:	2300      	moveq	r3, #0
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	bf14      	ite	ne
 8002cc8:	2301      	movne	r3, #1
 8002cca:	2300      	moveq	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	461a      	mov	r2, r3
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	bf14      	ite	ne
 8002ce2:	2301      	movne	r3, #1
 8002ce4:	2300      	moveq	r3, #0
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	461a      	mov	r2, r3
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	bf0c      	ite	eq
 8002cfe:	2301      	moveq	r3, #1
 8002d00:	2300      	movne	r3, #0
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	0c1b      	lsrs	r3, r3, #16
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	f003 0304 	and.w	r3, r3, #4
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	bf14      	ite	ne
 8002d36:	2301      	movne	r3, #1
 8002d38:	2300      	moveq	r3, #0
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	bf14      	ite	ne
 8002d52:	2301      	movne	r3, #1
 8002d54:	2300      	moveq	r3, #0
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e00b      	b.n	8002d9a <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d88:	2b10      	cmp	r3, #16
 8002d8a:	d105      	bne.n	8002d98 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002d8c:	6839      	ldr	r1, [r7, #0]
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f870 	bl	8002e74 <ETH_SetMACConfig>

    return HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	e000      	b.n	8002d9a <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
  }
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f023 031c 	bic.w	r3, r3, #28
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002dbc:	f001 fa54 	bl	8004268 <HAL_RCC_GetHCLKFreq>
 8002dc0:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	4a14      	ldr	r2, [pc, #80]	@ (8002e18 <HAL_ETH_SetMDIOClockRange+0x74>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d804      	bhi.n	8002dd4 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f043 0308 	orr.w	r3, r3, #8
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	e019      	b.n	8002e08 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4a11      	ldr	r2, [pc, #68]	@ (8002e1c <HAL_ETH_SetMDIOClockRange+0x78>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d204      	bcs.n	8002de6 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f043 030c 	orr.w	r3, r3, #12
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	e010      	b.n	8002e08 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	4a0d      	ldr	r2, [pc, #52]	@ (8002e20 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d90c      	bls.n	8002e08 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	4a0c      	ldr	r2, [pc, #48]	@ (8002e24 <HAL_ETH_SetMDIOClockRange+0x80>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d804      	bhi.n	8002e00 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f043 0304 	orr.w	r3, r3, #4
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	e003      	b.n	8002e08 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f043 0310 	orr.w	r3, r3, #16
 8002e06:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	611a      	str	r2, [r3, #16]
}
 8002e10:	bf00      	nop
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	02160ebf 	.word	0x02160ebf
 8002e1c:	03938700 	.word	0x03938700
 8002e20:	05f5e0ff 	.word	0x05f5e0ff
 8002e24:	08f0d17f 	.word	0x08f0d17f

08002e28 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6812      	ldr	r2, [r2, #0]
 8002e42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e46:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e4a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e58:	2001      	movs	r0, #1
 8002e5a:	f7fe fc05 	bl	8001668 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e68:	6193      	str	r3, [r2, #24]
}
 8002e6a:	bf00      	nop
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
	...

08002e74 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	4b53      	ldr	r3, [pc, #332]	@ (8002fd8 <ETH_SetMACConfig+0x164>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	7b9b      	ldrb	r3, [r3, #14]
 8002e92:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	7c12      	ldrb	r2, [r2, #16]
 8002e98:	2a00      	cmp	r2, #0
 8002e9a:	d102      	bne.n	8002ea2 <ETH_SetMACConfig+0x2e>
 8002e9c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002ea0:	e000      	b.n	8002ea4 <ETH_SetMACConfig+0x30>
 8002ea2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002ea4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	7c52      	ldrb	r2, [r2, #17]
 8002eaa:	2a00      	cmp	r2, #0
 8002eac:	d102      	bne.n	8002eb4 <ETH_SetMACConfig+0x40>
 8002eae:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002eb2:	e000      	b.n	8002eb6 <ETH_SetMACConfig+0x42>
 8002eb4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002eb6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ebc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	7fdb      	ldrb	r3, [r3, #31]
 8002ec2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002ec4:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002eca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	7f92      	ldrb	r2, [r2, #30]
 8002ed0:	2a00      	cmp	r2, #0
 8002ed2:	d102      	bne.n	8002eda <ETH_SetMACConfig+0x66>
 8002ed4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ed8:	e000      	b.n	8002edc <ETH_SetMACConfig+0x68>
 8002eda:	2200      	movs	r2, #0
                        macconf->Speed |
 8002edc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	7f1b      	ldrb	r3, [r3, #28]
 8002ee2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ee4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002eea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	791b      	ldrb	r3, [r3, #4]
 8002ef0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002ef2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002efa:	2a00      	cmp	r2, #0
 8002efc:	d102      	bne.n	8002f04 <ETH_SetMACConfig+0x90>
 8002efe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f02:	e000      	b.n	8002f06 <ETH_SetMACConfig+0x92>
 8002f04:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f06:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	7bdb      	ldrb	r3, [r3, #15]
 8002f0c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f0e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002f14:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002f1c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f36:	2001      	movs	r0, #1
 8002f38:	f7fe fb96 	bl	8001668 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002f52:	4013      	ands	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f5a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002f62:	2a00      	cmp	r2, #0
 8002f64:	d101      	bne.n	8002f6a <ETH_SetMACConfig+0xf6>
 8002f66:	2280      	movs	r2, #128	@ 0x80
 8002f68:	e000      	b.n	8002f6c <ETH_SetMACConfig+0xf8>
 8002f6a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f6c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f72:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002f7a:	2a01      	cmp	r2, #1
 8002f7c:	d101      	bne.n	8002f82 <ETH_SetMACConfig+0x10e>
 8002f7e:	2208      	movs	r2, #8
 8002f80:	e000      	b.n	8002f84 <ETH_SetMACConfig+0x110>
 8002f82:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002f84:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002f8c:	2a01      	cmp	r2, #1
 8002f8e:	d101      	bne.n	8002f94 <ETH_SetMACConfig+0x120>
 8002f90:	2204      	movs	r2, #4
 8002f92:	e000      	b.n	8002f96 <ETH_SetMACConfig+0x122>
 8002f94:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f96:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002f9e:	2a01      	cmp	r2, #1
 8002fa0:	d101      	bne.n	8002fa6 <ETH_SetMACConfig+0x132>
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	e000      	b.n	8002fa8 <ETH_SetMACConfig+0x134>
 8002fa6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fc0:	2001      	movs	r0, #1
 8002fc2:	f7fe fb51 	bl	8001668 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	619a      	str	r2, [r3, #24]
}
 8002fce:	bf00      	nop
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	fd20810f 	.word	0xfd20810f

08002fdc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	4b3d      	ldr	r3, [pc, #244]	@ (80030ec <ETH_SetDMAConfig+0x110>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	7b1b      	ldrb	r3, [r3, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d102      	bne.n	8003008 <ETH_SetDMAConfig+0x2c>
 8003002:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003006:	e000      	b.n	800300a <ETH_SetDMAConfig+0x2e>
 8003008:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	7b5b      	ldrb	r3, [r3, #13]
 800300e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003010:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	7f52      	ldrb	r2, [r2, #29]
 8003016:	2a00      	cmp	r2, #0
 8003018:	d102      	bne.n	8003020 <ETH_SetDMAConfig+0x44>
 800301a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800301e:	e000      	b.n	8003022 <ETH_SetDMAConfig+0x46>
 8003020:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003022:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	7b9b      	ldrb	r3, [r3, #14]
 8003028:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800302a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003030:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	7f1b      	ldrb	r3, [r3, #28]
 8003036:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003038:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	7f9b      	ldrb	r3, [r3, #30]
 800303e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003040:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003046:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800304e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003050:	4313      	orrs	r3, r2
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	4313      	orrs	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003060:	461a      	mov	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003072:	2001      	movs	r0, #1
 8003074:	f7fe faf8 	bl	8001668 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003080:	461a      	mov	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	791b      	ldrb	r3, [r3, #4]
 800308a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003090:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003096:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800309c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80030a4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80030a6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ac:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80030ae:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80030b4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6812      	ldr	r2, [r2, #0]
 80030ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80030c2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030d0:	2001      	movs	r0, #1
 80030d2:	f7fe fac9 	bl	8001668 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030de:	461a      	mov	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6013      	str	r3, [r2, #0]
}
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	f8de3f23 	.word	0xf8de3f23

080030f0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b0a6      	sub	sp, #152	@ 0x98
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80030f8:	2301      	movs	r3, #1
 80030fa:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80030fe:	2301      	movs	r3, #1
 8003100:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003104:	2300      	movs	r3, #0
 8003106:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003108:	2300      	movs	r3, #0
 800310a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800310e:	2301      	movs	r3, #1
 8003110:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003114:	2300      	movs	r3, #0
 8003116:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800311a:	2301      	movs	r3, #1
 800311c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003120:	2301      	movs	r3, #1
 8003122:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003126:	2300      	movs	r3, #0
 8003128:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800312c:	2300      	movs	r3, #0
 800312e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003132:	2300      	movs	r3, #0
 8003134:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003136:	2300      	movs	r3, #0
 8003138:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800313c:	2300      	movs	r3, #0
 800313e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003140:	2300      	movs	r3, #0
 8003142:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003146:	2300      	movs	r3, #0
 8003148:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800314c:	2300      	movs	r3, #0
 800314e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003152:	2300      	movs	r3, #0
 8003154:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003158:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800315c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800315e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003162:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003164:	2300      	movs	r3, #0
 8003166:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800316a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800316e:	4619      	mov	r1, r3
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff fe7f 	bl	8002e74 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003176:	2301      	movs	r3, #1
 8003178:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800317a:	2301      	movs	r3, #1
 800317c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800317e:	2301      	movs	r3, #1
 8003180:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003184:	2301      	movs	r3, #1
 8003186:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003188:	2300      	movs	r3, #0
 800318a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800318c:	2300      	movs	r3, #0
 800318e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003192:	2300      	movs	r3, #0
 8003194:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003198:	2300      	movs	r3, #0
 800319a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800319c:	2301      	movs	r3, #1
 800319e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80031a2:	2301      	movs	r3, #1
 80031a4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80031a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80031aa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80031ac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80031b0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80031b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80031b6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80031b8:	2301      	movs	r3, #1
 80031ba:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80031be:	2300      	movs	r3, #0
 80031c0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80031c2:	2300      	movs	r3, #0
 80031c4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80031c6:	f107 0308 	add.w	r3, r7, #8
 80031ca:	4619      	mov	r1, r3
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7ff ff05 	bl	8002fdc <ETH_SetDMAConfig>
}
 80031d2:	bf00      	nop
 80031d4:	3798      	adds	r7, #152	@ 0x98
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80031dc:	b480      	push	{r7}
 80031de:	b087      	sub	sp, #28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3305      	adds	r3, #5
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	021b      	lsls	r3, r3, #8
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	3204      	adds	r2, #4
 80031f4:	7812      	ldrb	r2, [r2, #0]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	4b11      	ldr	r3, [pc, #68]	@ (8003244 <ETH_MACAddressConfig+0x68>)
 80031fe:	4413      	add	r3, r2
 8003200:	461a      	mov	r2, r3
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3303      	adds	r3, #3
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	061a      	lsls	r2, r3, #24
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3302      	adds	r3, #2
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	041b      	lsls	r3, r3, #16
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3301      	adds	r3, #1
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	021b      	lsls	r3, r3, #8
 8003220:	4313      	orrs	r3, r2
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	7812      	ldrb	r2, [r2, #0]
 8003226:	4313      	orrs	r3, r2
 8003228:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	4b06      	ldr	r3, [pc, #24]	@ (8003248 <ETH_MACAddressConfig+0x6c>)
 800322e:	4413      	add	r3, r2
 8003230:	461a      	mov	r2, r3
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	6013      	str	r3, [r2, #0]
}
 8003236:	bf00      	nop
 8003238:	371c      	adds	r7, #28
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40028040 	.word	0x40028040
 8003248:	40028044 	.word	0x40028044

0800324c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	e03e      	b.n	80032d8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68d9      	ldr	r1, [r3, #12]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	440b      	add	r3, r1
 800326a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	2200      	movs	r2, #0
 8003276:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2200      	movs	r2, #0
 800327c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2200      	movs	r2, #0
 8003282:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003284:	68b9      	ldr	r1, [r7, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	3206      	adds	r2, #6
 800328c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d80c      	bhi.n	80032bc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68d9      	ldr	r1, [r3, #12]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	1c5a      	adds	r2, r3, #1
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	440b      	add	r3, r1
 80032b4:	461a      	mov	r2, r3
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	60da      	str	r2, [r3, #12]
 80032ba:	e004      	b.n	80032c6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	461a      	mov	r2, r3
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	3301      	adds	r3, #1
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2b03      	cmp	r3, #3
 80032dc:	d9bd      	bls.n	800325a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032f0:	611a      	str	r2, [r3, #16]
}
 80032f2:	bf00      	nop
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80032fe:	b480      	push	{r7}
 8003300:	b085      	sub	sp, #20
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	e048      	b.n	800339e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6919      	ldr	r1, [r3, #16]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	4613      	mov	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	440b      	add	r3, r1
 800331c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2200      	movs	r2, #0
 8003328:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	2200      	movs	r2, #0
 800332e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2200      	movs	r2, #0
 8003334:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2200      	movs	r2, #0
 800333a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2200      	movs	r2, #0
 8003340:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003348:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003362:	68b9      	ldr	r1, [r7, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	3212      	adds	r2, #18
 800336a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2b02      	cmp	r3, #2
 8003372:	d80c      	bhi.n	800338e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6919      	ldr	r1, [r3, #16]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	1c5a      	adds	r2, r3, #1
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	440b      	add	r3, r1
 8003386:	461a      	mov	r2, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	60da      	str	r2, [r3, #12]
 800338c:	e004      	b.n	8003398 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	461a      	mov	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	3301      	adds	r3, #1
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2b03      	cmp	r3, #3
 80033a2:	d9b3      	bls.n	800330c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691a      	ldr	r2, [r3, #16]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033ce:	60da      	str	r2, [r3, #12]
}
 80033d0:	bf00      	nop
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80033dc:	b480      	push	{r7}
 80033de:	b091      	sub	sp, #68	@ 0x44
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	3318      	adds	r3, #24
 80033ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80033ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80033f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80033fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003400:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003406:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800340e:	2300      	movs	r3, #0
 8003410:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800341a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800341e:	d007      	beq.n	8003430 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003420:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003424:	3304      	adds	r3, #4
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003430:	2302      	movs	r3, #2
 8003432:	e115      	b.n	8003660 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8003434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003436:	3301      	adds	r3, #1
 8003438:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800343a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003442:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 800344c:	f023 031f 	bic.w	r3, r3, #31
 8003450:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003452:	6852      	ldr	r2, [r2, #4]
 8003454:	431a      	orrs	r2, r3
 8003456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003458:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d008      	beq.n	8003478 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	431a      	orrs	r2, r3
 8003474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003476:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	431a      	orrs	r2, r3
 8003492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003494:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d005      	beq.n	80034ae <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80034a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80034aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ac:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80034ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80034b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b8:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80034ba:	e084      	b.n	80035c6 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80034bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80034c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c6:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d006      	beq.n	80034dc <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80034ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80034d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	e005      	b.n	80034e8 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80034dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80034e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e6:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80034e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034ea:	3301      	adds	r3, #1
 80034ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d902      	bls.n	80034fa <ETH_Prepare_Tx_Descriptors+0x11e>
 80034f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034f6:	3b04      	subs	r3, #4
 80034f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80034fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003502:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800350c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003510:	d007      	beq.n	8003522 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003516:	3304      	adds	r3, #4
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d029      	beq.n	8003576 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003528:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800352a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800352e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003530:	2300      	movs	r3, #0
 8003532:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003534:	e019      	b.n	800356a <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8003536:	f3bf 8f5f 	dmb	sy
}
 800353a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800353c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003546:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800354a:	3301      	adds	r3, #1
 800354c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800354e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003550:	2b03      	cmp	r3, #3
 8003552:	d902      	bls.n	800355a <ETH_Prepare_Tx_Descriptors+0x17e>
 8003554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003556:	3b04      	subs	r3, #4
 8003558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800355a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800355e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003562:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003566:	3301      	adds	r3, #1
 8003568:	63bb      	str	r3, [r7, #56]	@ 0x38
 800356a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800356c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800356e:	429a      	cmp	r2, r3
 8003570:	d3e1      	bcc.n	8003536 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8003572:	2302      	movs	r3, #2
 8003574:	e074      	b.n	8003660 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800357e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003580:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8003582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003584:	3301      	adds	r3, #1
 8003586:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800358e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003596:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80035a0:	f023 031f 	bic.w	r3, r3, #31
 80035a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035a6:	6852      	ldr	r2, [r2, #4]
 80035a8:	431a      	orrs	r2, r3
 80035aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ac:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80035ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b0:	3301      	adds	r3, #1
 80035b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80035b4:	f3bf 8f5f 	dmb	sy
}
 80035b8:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80035ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80035c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c4:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80035c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f47f af76 	bne.w	80034bc <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d006      	beq.n	80035e4 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80035d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80035de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	e005      	b.n	80035f0 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80035e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80035ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ee:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80035f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80035f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fa:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80035fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fe:	6a3a      	ldr	r2, [r7, #32]
 8003600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003604:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003606:	f3bf 8f5f 	dmb	sy
}
 800360a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800360c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003616:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800361c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800361e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003620:	3304      	adds	r3, #4
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800362c:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800362e:	f3ef 8310 	mrs	r3, PRIMASK
 8003632:	613b      	str	r3, [r7, #16]
  return(result);
 8003634:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003636:	61fb      	str	r3, [r7, #28]
 8003638:	2301      	movs	r3, #1
 800363a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f383 8810 	msr	PRIMASK, r3
}
 8003642:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003646:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800364a:	4413      	add	r3, r2
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003650:	629a      	str	r2, [r3, #40]	@ 0x28
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	f383 8810 	msr	PRIMASK, r3
}
 800365c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3744      	adds	r7, #68	@ 0x44
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800366c:	b480      	push	{r7}
 800366e:	b089      	sub	sp, #36	@ 0x24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003676:	2300      	movs	r3, #0
 8003678:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800367a:	2300      	movs	r3, #0
 800367c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800367e:	2300      	movs	r3, #0
 8003680:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003682:	2300      	movs	r3, #0
 8003684:	61fb      	str	r3, [r7, #28]
 8003686:	e16b      	b.n	8003960 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003688:	2201      	movs	r2, #1
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	4013      	ands	r3, r2
 800369a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	f040 815a 	bne.w	800395a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d005      	beq.n	80036be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d130      	bne.n	8003720 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	2203      	movs	r2, #3
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	43db      	mvns	r3, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4013      	ands	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036f4:	2201      	movs	r2, #1
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	4013      	ands	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	091b      	lsrs	r3, r3, #4
 800370a:	f003 0201 	and.w	r2, r3, #1
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4313      	orrs	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 0303 	and.w	r3, r3, #3
 8003728:	2b03      	cmp	r3, #3
 800372a:	d017      	beq.n	800375c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	2203      	movs	r2, #3
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4013      	ands	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4313      	orrs	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d123      	bne.n	80037b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	08da      	lsrs	r2, r3, #3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3208      	adds	r2, #8
 8003770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003774:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	220f      	movs	r2, #15
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	43db      	mvns	r3, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4013      	ands	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4313      	orrs	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	08da      	lsrs	r2, r3, #3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3208      	adds	r2, #8
 80037aa:	69b9      	ldr	r1, [r7, #24]
 80037ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	2203      	movs	r2, #3
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	43db      	mvns	r3, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4013      	ands	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 0203 	and.w	r2, r3, #3
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4313      	orrs	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80b4 	beq.w	800395a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037f2:	2300      	movs	r3, #0
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	4b60      	ldr	r3, [pc, #384]	@ (8003978 <HAL_GPIO_Init+0x30c>)
 80037f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fa:	4a5f      	ldr	r2, [pc, #380]	@ (8003978 <HAL_GPIO_Init+0x30c>)
 80037fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003800:	6453      	str	r3, [r2, #68]	@ 0x44
 8003802:	4b5d      	ldr	r3, [pc, #372]	@ (8003978 <HAL_GPIO_Init+0x30c>)
 8003804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003806:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800380e:	4a5b      	ldr	r2, [pc, #364]	@ (800397c <HAL_GPIO_Init+0x310>)
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	089b      	lsrs	r3, r3, #2
 8003814:	3302      	adds	r3, #2
 8003816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800381a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	220f      	movs	r2, #15
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	43db      	mvns	r3, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4013      	ands	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a52      	ldr	r2, [pc, #328]	@ (8003980 <HAL_GPIO_Init+0x314>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d02b      	beq.n	8003892 <HAL_GPIO_Init+0x226>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a51      	ldr	r2, [pc, #324]	@ (8003984 <HAL_GPIO_Init+0x318>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d025      	beq.n	800388e <HAL_GPIO_Init+0x222>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a50      	ldr	r2, [pc, #320]	@ (8003988 <HAL_GPIO_Init+0x31c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d01f      	beq.n	800388a <HAL_GPIO_Init+0x21e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a4f      	ldr	r2, [pc, #316]	@ (800398c <HAL_GPIO_Init+0x320>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d019      	beq.n	8003886 <HAL_GPIO_Init+0x21a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a4e      	ldr	r2, [pc, #312]	@ (8003990 <HAL_GPIO_Init+0x324>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d013      	beq.n	8003882 <HAL_GPIO_Init+0x216>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a4d      	ldr	r2, [pc, #308]	@ (8003994 <HAL_GPIO_Init+0x328>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00d      	beq.n	800387e <HAL_GPIO_Init+0x212>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a4c      	ldr	r2, [pc, #304]	@ (8003998 <HAL_GPIO_Init+0x32c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d007      	beq.n	800387a <HAL_GPIO_Init+0x20e>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a4b      	ldr	r2, [pc, #300]	@ (800399c <HAL_GPIO_Init+0x330>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d101      	bne.n	8003876 <HAL_GPIO_Init+0x20a>
 8003872:	2307      	movs	r3, #7
 8003874:	e00e      	b.n	8003894 <HAL_GPIO_Init+0x228>
 8003876:	2308      	movs	r3, #8
 8003878:	e00c      	b.n	8003894 <HAL_GPIO_Init+0x228>
 800387a:	2306      	movs	r3, #6
 800387c:	e00a      	b.n	8003894 <HAL_GPIO_Init+0x228>
 800387e:	2305      	movs	r3, #5
 8003880:	e008      	b.n	8003894 <HAL_GPIO_Init+0x228>
 8003882:	2304      	movs	r3, #4
 8003884:	e006      	b.n	8003894 <HAL_GPIO_Init+0x228>
 8003886:	2303      	movs	r3, #3
 8003888:	e004      	b.n	8003894 <HAL_GPIO_Init+0x228>
 800388a:	2302      	movs	r3, #2
 800388c:	e002      	b.n	8003894 <HAL_GPIO_Init+0x228>
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <HAL_GPIO_Init+0x228>
 8003892:	2300      	movs	r3, #0
 8003894:	69fa      	ldr	r2, [r7, #28]
 8003896:	f002 0203 	and.w	r2, r2, #3
 800389a:	0092      	lsls	r2, r2, #2
 800389c:	4093      	lsls	r3, r2
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038a4:	4935      	ldr	r1, [pc, #212]	@ (800397c <HAL_GPIO_Init+0x310>)
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	089b      	lsrs	r3, r3, #2
 80038aa:	3302      	adds	r3, #2
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038b2:	4b3b      	ldr	r3, [pc, #236]	@ (80039a0 <HAL_GPIO_Init+0x334>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	43db      	mvns	r3, r3
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	4013      	ands	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038d6:	4a32      	ldr	r2, [pc, #200]	@ (80039a0 <HAL_GPIO_Init+0x334>)
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038dc:	4b30      	ldr	r3, [pc, #192]	@ (80039a0 <HAL_GPIO_Init+0x334>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	43db      	mvns	r3, r3
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4013      	ands	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003900:	4a27      	ldr	r2, [pc, #156]	@ (80039a0 <HAL_GPIO_Init+0x334>)
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003906:	4b26      	ldr	r3, [pc, #152]	@ (80039a0 <HAL_GPIO_Init+0x334>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	43db      	mvns	r3, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4013      	ands	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800392a:	4a1d      	ldr	r2, [pc, #116]	@ (80039a0 <HAL_GPIO_Init+0x334>)
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003930:	4b1b      	ldr	r3, [pc, #108]	@ (80039a0 <HAL_GPIO_Init+0x334>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	43db      	mvns	r3, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4013      	ands	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003954:	4a12      	ldr	r2, [pc, #72]	@ (80039a0 <HAL_GPIO_Init+0x334>)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	3301      	adds	r3, #1
 800395e:	61fb      	str	r3, [r7, #28]
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	2b0f      	cmp	r3, #15
 8003964:	f67f ae90 	bls.w	8003688 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003968:	bf00      	nop
 800396a:	bf00      	nop
 800396c:	3724      	adds	r7, #36	@ 0x24
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	40023800 	.word	0x40023800
 800397c:	40013800 	.word	0x40013800
 8003980:	40020000 	.word	0x40020000
 8003984:	40020400 	.word	0x40020400
 8003988:	40020800 	.word	0x40020800
 800398c:	40020c00 	.word	0x40020c00
 8003990:	40021000 	.word	0x40021000
 8003994:	40021400 	.word	0x40021400
 8003998:	40021800 	.word	0x40021800
 800399c:	40021c00 	.word	0x40021c00
 80039a0:	40013c00 	.word	0x40013c00

080039a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	460b      	mov	r3, r1
 80039ae:	807b      	strh	r3, [r7, #2]
 80039b0:	4613      	mov	r3, r2
 80039b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039b4:	787b      	ldrb	r3, [r7, #1]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039ba:	887a      	ldrh	r2, [r7, #2]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039c0:	e003      	b.n	80039ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039c2:	887b      	ldrh	r3, [r7, #2]
 80039c4:	041a      	lsls	r2, r3, #16
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	619a      	str	r2, [r3, #24]
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
	...

080039d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	4603      	mov	r3, r0
 80039e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80039e2:	4b08      	ldr	r3, [pc, #32]	@ (8003a04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039e4:	695a      	ldr	r2, [r3, #20]
 80039e6:	88fb      	ldrh	r3, [r7, #6]
 80039e8:	4013      	ands	r3, r2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d006      	beq.n	80039fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039ee:	4a05      	ldr	r2, [pc, #20]	@ (8003a04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039f0:	88fb      	ldrh	r3, [r7, #6]
 80039f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039f4:	88fb      	ldrh	r3, [r7, #6]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 f806 	bl	8003a08 <HAL_GPIO_EXTI_Callback>
  }
}
 80039fc:	bf00      	nop
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40013c00 	.word	0x40013c00

08003a08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
	...

08003a20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e267      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d075      	beq.n	8003b2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a3e:	4b88      	ldr	r3, [pc, #544]	@ (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 030c 	and.w	r3, r3, #12
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d00c      	beq.n	8003a64 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a4a:	4b85      	ldr	r3, [pc, #532]	@ (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d112      	bne.n	8003a7c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a56:	4b82      	ldr	r3, [pc, #520]	@ (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a62:	d10b      	bne.n	8003a7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a64:	4b7e      	ldr	r3, [pc, #504]	@ (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d05b      	beq.n	8003b28 <HAL_RCC_OscConfig+0x108>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d157      	bne.n	8003b28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e242      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a84:	d106      	bne.n	8003a94 <HAL_RCC_OscConfig+0x74>
 8003a86:	4b76      	ldr	r3, [pc, #472]	@ (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a75      	ldr	r2, [pc, #468]	@ (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	e01d      	b.n	8003ad0 <HAL_RCC_OscConfig+0xb0>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a9c:	d10c      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x98>
 8003a9e:	4b70      	ldr	r3, [pc, #448]	@ (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a6f      	ldr	r2, [pc, #444]	@ (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003aa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	4b6d      	ldr	r3, [pc, #436]	@ (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a6c      	ldr	r2, [pc, #432]	@ (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	e00b      	b.n	8003ad0 <HAL_RCC_OscConfig+0xb0>
 8003ab8:	4b69      	ldr	r3, [pc, #420]	@ (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a68      	ldr	r2, [pc, #416]	@ (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003abe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	4b66      	ldr	r3, [pc, #408]	@ (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a65      	ldr	r2, [pc, #404]	@ (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003aca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d013      	beq.n	8003b00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad8:	f7fd fdba 	bl	8001650 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ae0:	f7fd fdb6 	bl	8001650 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b64      	cmp	r3, #100	@ 0x64
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e207      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af2:	4b5b      	ldr	r3, [pc, #364]	@ (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0f0      	beq.n	8003ae0 <HAL_RCC_OscConfig+0xc0>
 8003afe:	e014      	b.n	8003b2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b00:	f7fd fda6 	bl	8001650 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b08:	f7fd fda2 	bl	8001650 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b64      	cmp	r3, #100	@ 0x64
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e1f3      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b1a:	4b51      	ldr	r3, [pc, #324]	@ (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f0      	bne.n	8003b08 <HAL_RCC_OscConfig+0xe8>
 8003b26:	e000      	b.n	8003b2a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d063      	beq.n	8003bfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b36:	4b4a      	ldr	r3, [pc, #296]	@ (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 030c 	and.w	r3, r3, #12
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00b      	beq.n	8003b5a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b42:	4b47      	ldr	r3, [pc, #284]	@ (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b4a:	2b08      	cmp	r3, #8
 8003b4c:	d11c      	bne.n	8003b88 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b4e:	4b44      	ldr	r3, [pc, #272]	@ (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d116      	bne.n	8003b88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b5a:	4b41      	ldr	r3, [pc, #260]	@ (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d005      	beq.n	8003b72 <HAL_RCC_OscConfig+0x152>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d001      	beq.n	8003b72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e1c7      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b72:	4b3b      	ldr	r3, [pc, #236]	@ (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	4937      	ldr	r1, [pc, #220]	@ (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b86:	e03a      	b.n	8003bfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d020      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b90:	4b34      	ldr	r3, [pc, #208]	@ (8003c64 <HAL_RCC_OscConfig+0x244>)
 8003b92:	2201      	movs	r2, #1
 8003b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b96:	f7fd fd5b 	bl	8001650 <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b9e:	f7fd fd57 	bl	8001650 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e1a8      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0f0      	beq.n	8003b9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bbc:	4b28      	ldr	r3, [pc, #160]	@ (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	4925      	ldr	r1, [pc, #148]	@ (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	600b      	str	r3, [r1, #0]
 8003bd0:	e015      	b.n	8003bfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bd2:	4b24      	ldr	r3, [pc, #144]	@ (8003c64 <HAL_RCC_OscConfig+0x244>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd8:	f7fd fd3a 	bl	8001650 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003be0:	f7fd fd36 	bl	8001650 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e187      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f0      	bne.n	8003be0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d036      	beq.n	8003c78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d016      	beq.n	8003c40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c12:	4b15      	ldr	r3, [pc, #84]	@ (8003c68 <HAL_RCC_OscConfig+0x248>)
 8003c14:	2201      	movs	r2, #1
 8003c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c18:	f7fd fd1a 	bl	8001650 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c20:	f7fd fd16 	bl	8001650 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e167      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c32:	4b0b      	ldr	r3, [pc, #44]	@ (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0f0      	beq.n	8003c20 <HAL_RCC_OscConfig+0x200>
 8003c3e:	e01b      	b.n	8003c78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c40:	4b09      	ldr	r3, [pc, #36]	@ (8003c68 <HAL_RCC_OscConfig+0x248>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c46:	f7fd fd03 	bl	8001650 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c4c:	e00e      	b.n	8003c6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c4e:	f7fd fcff 	bl	8001650 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d907      	bls.n	8003c6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e150      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
 8003c60:	40023800 	.word	0x40023800
 8003c64:	42470000 	.word	0x42470000
 8003c68:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c6c:	4b88      	ldr	r3, [pc, #544]	@ (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003c6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1ea      	bne.n	8003c4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 8097 	beq.w	8003db4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c86:	2300      	movs	r3, #0
 8003c88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c8a:	4b81      	ldr	r3, [pc, #516]	@ (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10f      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c96:	2300      	movs	r3, #0
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	4b7d      	ldr	r3, [pc, #500]	@ (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9e:	4a7c      	ldr	r2, [pc, #496]	@ (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ca6:	4b7a      	ldr	r3, [pc, #488]	@ (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cae:	60bb      	str	r3, [r7, #8]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb6:	4b77      	ldr	r3, [pc, #476]	@ (8003e94 <HAL_RCC_OscConfig+0x474>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d118      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cc2:	4b74      	ldr	r3, [pc, #464]	@ (8003e94 <HAL_RCC_OscConfig+0x474>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a73      	ldr	r2, [pc, #460]	@ (8003e94 <HAL_RCC_OscConfig+0x474>)
 8003cc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cce:	f7fd fcbf 	bl	8001650 <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd4:	e008      	b.n	8003ce8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd6:	f7fd fcbb 	bl	8001650 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e10c      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce8:	4b6a      	ldr	r3, [pc, #424]	@ (8003e94 <HAL_RCC_OscConfig+0x474>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d0f0      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d106      	bne.n	8003d0a <HAL_RCC_OscConfig+0x2ea>
 8003cfc:	4b64      	ldr	r3, [pc, #400]	@ (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d00:	4a63      	ldr	r2, [pc, #396]	@ (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003d02:	f043 0301 	orr.w	r3, r3, #1
 8003d06:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d08:	e01c      	b.n	8003d44 <HAL_RCC_OscConfig+0x324>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	2b05      	cmp	r3, #5
 8003d10:	d10c      	bne.n	8003d2c <HAL_RCC_OscConfig+0x30c>
 8003d12:	4b5f      	ldr	r3, [pc, #380]	@ (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d16:	4a5e      	ldr	r2, [pc, #376]	@ (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003d18:	f043 0304 	orr.w	r3, r3, #4
 8003d1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d1e:	4b5c      	ldr	r3, [pc, #368]	@ (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d22:	4a5b      	ldr	r2, [pc, #364]	@ (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003d24:	f043 0301 	orr.w	r3, r3, #1
 8003d28:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d2a:	e00b      	b.n	8003d44 <HAL_RCC_OscConfig+0x324>
 8003d2c:	4b58      	ldr	r3, [pc, #352]	@ (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d30:	4a57      	ldr	r2, [pc, #348]	@ (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003d32:	f023 0301 	bic.w	r3, r3, #1
 8003d36:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d38:	4b55      	ldr	r3, [pc, #340]	@ (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3c:	4a54      	ldr	r2, [pc, #336]	@ (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003d3e:	f023 0304 	bic.w	r3, r3, #4
 8003d42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d015      	beq.n	8003d78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4c:	f7fd fc80 	bl	8001650 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d52:	e00a      	b.n	8003d6a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d54:	f7fd fc7c 	bl	8001650 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e0cb      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d6a:	4b49      	ldr	r3, [pc, #292]	@ (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0ee      	beq.n	8003d54 <HAL_RCC_OscConfig+0x334>
 8003d76:	e014      	b.n	8003da2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d78:	f7fd fc6a 	bl	8001650 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d7e:	e00a      	b.n	8003d96 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d80:	f7fd fc66 	bl	8001650 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e0b5      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d96:	4b3e      	ldr	r3, [pc, #248]	@ (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1ee      	bne.n	8003d80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003da2:	7dfb      	ldrb	r3, [r7, #23]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d105      	bne.n	8003db4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003da8:	4b39      	ldr	r3, [pc, #228]	@ (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dac:	4a38      	ldr	r2, [pc, #224]	@ (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003dae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003db2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 80a1 	beq.w	8003f00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dbe:	4b34      	ldr	r3, [pc, #208]	@ (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 030c 	and.w	r3, r3, #12
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	d05c      	beq.n	8003e84 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d141      	bne.n	8003e56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd2:	4b31      	ldr	r3, [pc, #196]	@ (8003e98 <HAL_RCC_OscConfig+0x478>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd8:	f7fd fc3a 	bl	8001650 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de0:	f7fd fc36 	bl	8001650 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e087      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df2:	4b27      	ldr	r3, [pc, #156]	@ (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1f0      	bne.n	8003de0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69da      	ldr	r2, [r3, #28]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0c:	019b      	lsls	r3, r3, #6
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e14:	085b      	lsrs	r3, r3, #1
 8003e16:	3b01      	subs	r3, #1
 8003e18:	041b      	lsls	r3, r3, #16
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e20:	061b      	lsls	r3, r3, #24
 8003e22:	491b      	ldr	r1, [pc, #108]	@ (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e28:	4b1b      	ldr	r3, [pc, #108]	@ (8003e98 <HAL_RCC_OscConfig+0x478>)
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2e:	f7fd fc0f 	bl	8001650 <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e36:	f7fd fc0b 	bl	8001650 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e05c      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e48:	4b11      	ldr	r3, [pc, #68]	@ (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0f0      	beq.n	8003e36 <HAL_RCC_OscConfig+0x416>
 8003e54:	e054      	b.n	8003f00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e56:	4b10      	ldr	r3, [pc, #64]	@ (8003e98 <HAL_RCC_OscConfig+0x478>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5c:	f7fd fbf8 	bl	8001650 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e64:	f7fd fbf4 	bl	8001650 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e045      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e76:	4b06      	ldr	r3, [pc, #24]	@ (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f0      	bne.n	8003e64 <HAL_RCC_OscConfig+0x444>
 8003e82:	e03d      	b.n	8003f00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d107      	bne.n	8003e9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e038      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
 8003e90:	40023800 	.word	0x40023800
 8003e94:	40007000 	.word	0x40007000
 8003e98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8003f0c <HAL_RCC_OscConfig+0x4ec>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d028      	beq.n	8003efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d121      	bne.n	8003efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d11a      	bne.n	8003efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ecc:	4013      	ands	r3, r2
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ed2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d111      	bne.n	8003efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee2:	085b      	lsrs	r3, r3, #1
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d107      	bne.n	8003efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40023800 	.word	0x40023800

08003f10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e0cc      	b.n	80040be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f24:	4b68      	ldr	r3, [pc, #416]	@ (80040c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d90c      	bls.n	8003f4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f32:	4b65      	ldr	r3, [pc, #404]	@ (80040c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3a:	4b63      	ldr	r3, [pc, #396]	@ (80040c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d001      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e0b8      	b.n	80040be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d020      	beq.n	8003f9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d005      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f64:	4b59      	ldr	r3, [pc, #356]	@ (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	4a58      	ldr	r2, [pc, #352]	@ (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8003f6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0308 	and.w	r3, r3, #8
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d005      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f7c:	4b53      	ldr	r3, [pc, #332]	@ (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	4a52      	ldr	r2, [pc, #328]	@ (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8003f82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f88:	4b50      	ldr	r3, [pc, #320]	@ (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	494d      	ldr	r1, [pc, #308]	@ (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d044      	beq.n	8004030 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d107      	bne.n	8003fbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fae:	4b47      	ldr	r3, [pc, #284]	@ (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d119      	bne.n	8003fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e07f      	b.n	80040be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d003      	beq.n	8003fce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	d107      	bne.n	8003fde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fce:	4b3f      	ldr	r3, [pc, #252]	@ (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d109      	bne.n	8003fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e06f      	b.n	80040be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fde:	4b3b      	ldr	r3, [pc, #236]	@ (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e067      	b.n	80040be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fee:	4b37      	ldr	r3, [pc, #220]	@ (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f023 0203 	bic.w	r2, r3, #3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	4934      	ldr	r1, [pc, #208]	@ (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004000:	f7fd fb26 	bl	8001650 <HAL_GetTick>
 8004004:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004006:	e00a      	b.n	800401e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004008:	f7fd fb22 	bl	8001650 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004016:	4293      	cmp	r3, r2
 8004018:	d901      	bls.n	800401e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e04f      	b.n	80040be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401e:	4b2b      	ldr	r3, [pc, #172]	@ (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 020c 	and.w	r2, r3, #12
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	429a      	cmp	r2, r3
 800402e:	d1eb      	bne.n	8004008 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004030:	4b25      	ldr	r3, [pc, #148]	@ (80040c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	429a      	cmp	r2, r3
 800403c:	d20c      	bcs.n	8004058 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800403e:	4b22      	ldr	r3, [pc, #136]	@ (80040c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004046:	4b20      	ldr	r3, [pc, #128]	@ (80040c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d001      	beq.n	8004058 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e032      	b.n	80040be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b00      	cmp	r3, #0
 8004062:	d008      	beq.n	8004076 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004064:	4b19      	ldr	r3, [pc, #100]	@ (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	4916      	ldr	r1, [pc, #88]	@ (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	4313      	orrs	r3, r2
 8004074:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0308 	and.w	r3, r3, #8
 800407e:	2b00      	cmp	r3, #0
 8004080:	d009      	beq.n	8004096 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004082:	4b12      	ldr	r3, [pc, #72]	@ (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	490e      	ldr	r1, [pc, #56]	@ (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8004092:	4313      	orrs	r3, r2
 8004094:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004096:	f000 f821 	bl	80040dc <HAL_RCC_GetSysClockFreq>
 800409a:	4602      	mov	r2, r0
 800409c:	4b0b      	ldr	r3, [pc, #44]	@ (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	091b      	lsrs	r3, r3, #4
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	490a      	ldr	r1, [pc, #40]	@ (80040d0 <HAL_RCC_ClockConfig+0x1c0>)
 80040a8:	5ccb      	ldrb	r3, [r1, r3]
 80040aa:	fa22 f303 	lsr.w	r3, r2, r3
 80040ae:	4a09      	ldr	r2, [pc, #36]	@ (80040d4 <HAL_RCC_ClockConfig+0x1c4>)
 80040b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80040b2:	4b09      	ldr	r3, [pc, #36]	@ (80040d8 <HAL_RCC_ClockConfig+0x1c8>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fd fa86 	bl	80015c8 <HAL_InitTick>

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40023c00 	.word	0x40023c00
 80040cc:	40023800 	.word	0x40023800
 80040d0:	08015f20 	.word	0x08015f20
 80040d4:	20000000 	.word	0x20000000
 80040d8:	20000004 	.word	0x20000004

080040dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040e0:	b090      	sub	sp, #64	@ 0x40
 80040e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040f4:	4b59      	ldr	r3, [pc, #356]	@ (800425c <HAL_RCC_GetSysClockFreq+0x180>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 030c 	and.w	r3, r3, #12
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d00d      	beq.n	800411c <HAL_RCC_GetSysClockFreq+0x40>
 8004100:	2b08      	cmp	r3, #8
 8004102:	f200 80a1 	bhi.w	8004248 <HAL_RCC_GetSysClockFreq+0x16c>
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <HAL_RCC_GetSysClockFreq+0x34>
 800410a:	2b04      	cmp	r3, #4
 800410c:	d003      	beq.n	8004116 <HAL_RCC_GetSysClockFreq+0x3a>
 800410e:	e09b      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004110:	4b53      	ldr	r3, [pc, #332]	@ (8004260 <HAL_RCC_GetSysClockFreq+0x184>)
 8004112:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004114:	e09b      	b.n	800424e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004116:	4b53      	ldr	r3, [pc, #332]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x188>)
 8004118:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800411a:	e098      	b.n	800424e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800411c:	4b4f      	ldr	r3, [pc, #316]	@ (800425c <HAL_RCC_GetSysClockFreq+0x180>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004124:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004126:	4b4d      	ldr	r3, [pc, #308]	@ (800425c <HAL_RCC_GetSysClockFreq+0x180>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d028      	beq.n	8004184 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004132:	4b4a      	ldr	r3, [pc, #296]	@ (800425c <HAL_RCC_GetSysClockFreq+0x180>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	099b      	lsrs	r3, r3, #6
 8004138:	2200      	movs	r2, #0
 800413a:	623b      	str	r3, [r7, #32]
 800413c:	627a      	str	r2, [r7, #36]	@ 0x24
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004144:	2100      	movs	r1, #0
 8004146:	4b47      	ldr	r3, [pc, #284]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x188>)
 8004148:	fb03 f201 	mul.w	r2, r3, r1
 800414c:	2300      	movs	r3, #0
 800414e:	fb00 f303 	mul.w	r3, r0, r3
 8004152:	4413      	add	r3, r2
 8004154:	4a43      	ldr	r2, [pc, #268]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x188>)
 8004156:	fba0 1202 	umull	r1, r2, r0, r2
 800415a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800415c:	460a      	mov	r2, r1
 800415e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004160:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004162:	4413      	add	r3, r2
 8004164:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004168:	2200      	movs	r2, #0
 800416a:	61bb      	str	r3, [r7, #24]
 800416c:	61fa      	str	r2, [r7, #28]
 800416e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004172:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004176:	f7fc f883 	bl	8000280 <__aeabi_uldivmod>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4613      	mov	r3, r2
 8004180:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004182:	e053      	b.n	800422c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004184:	4b35      	ldr	r3, [pc, #212]	@ (800425c <HAL_RCC_GetSysClockFreq+0x180>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	099b      	lsrs	r3, r3, #6
 800418a:	2200      	movs	r2, #0
 800418c:	613b      	str	r3, [r7, #16]
 800418e:	617a      	str	r2, [r7, #20]
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004196:	f04f 0b00 	mov.w	fp, #0
 800419a:	4652      	mov	r2, sl
 800419c:	465b      	mov	r3, fp
 800419e:	f04f 0000 	mov.w	r0, #0
 80041a2:	f04f 0100 	mov.w	r1, #0
 80041a6:	0159      	lsls	r1, r3, #5
 80041a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041ac:	0150      	lsls	r0, r2, #5
 80041ae:	4602      	mov	r2, r0
 80041b0:	460b      	mov	r3, r1
 80041b2:	ebb2 080a 	subs.w	r8, r2, sl
 80041b6:	eb63 090b 	sbc.w	r9, r3, fp
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	f04f 0300 	mov.w	r3, #0
 80041c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80041c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80041ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80041ce:	ebb2 0408 	subs.w	r4, r2, r8
 80041d2:	eb63 0509 	sbc.w	r5, r3, r9
 80041d6:	f04f 0200 	mov.w	r2, #0
 80041da:	f04f 0300 	mov.w	r3, #0
 80041de:	00eb      	lsls	r3, r5, #3
 80041e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041e4:	00e2      	lsls	r2, r4, #3
 80041e6:	4614      	mov	r4, r2
 80041e8:	461d      	mov	r5, r3
 80041ea:	eb14 030a 	adds.w	r3, r4, sl
 80041ee:	603b      	str	r3, [r7, #0]
 80041f0:	eb45 030b 	adc.w	r3, r5, fp
 80041f4:	607b      	str	r3, [r7, #4]
 80041f6:	f04f 0200 	mov.w	r2, #0
 80041fa:	f04f 0300 	mov.w	r3, #0
 80041fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004202:	4629      	mov	r1, r5
 8004204:	028b      	lsls	r3, r1, #10
 8004206:	4621      	mov	r1, r4
 8004208:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800420c:	4621      	mov	r1, r4
 800420e:	028a      	lsls	r2, r1, #10
 8004210:	4610      	mov	r0, r2
 8004212:	4619      	mov	r1, r3
 8004214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004216:	2200      	movs	r2, #0
 8004218:	60bb      	str	r3, [r7, #8]
 800421a:	60fa      	str	r2, [r7, #12]
 800421c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004220:	f7fc f82e 	bl	8000280 <__aeabi_uldivmod>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4613      	mov	r3, r2
 800422a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800422c:	4b0b      	ldr	r3, [pc, #44]	@ (800425c <HAL_RCC_GetSysClockFreq+0x180>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	0c1b      	lsrs	r3, r3, #16
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	3301      	adds	r3, #1
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800423c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800423e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004240:	fbb2 f3f3 	udiv	r3, r2, r3
 8004244:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004246:	e002      	b.n	800424e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004248:	4b05      	ldr	r3, [pc, #20]	@ (8004260 <HAL_RCC_GetSysClockFreq+0x184>)
 800424a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800424c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800424e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004250:	4618      	mov	r0, r3
 8004252:	3740      	adds	r7, #64	@ 0x40
 8004254:	46bd      	mov	sp, r7
 8004256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800425a:	bf00      	nop
 800425c:	40023800 	.word	0x40023800
 8004260:	00f42400 	.word	0x00f42400
 8004264:	017d7840 	.word	0x017d7840

08004268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800426c:	4b03      	ldr	r3, [pc, #12]	@ (800427c <HAL_RCC_GetHCLKFreq+0x14>)
 800426e:	681b      	ldr	r3, [r3, #0]
}
 8004270:	4618      	mov	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	20000000 	.word	0x20000000

08004280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004284:	f7ff fff0 	bl	8004268 <HAL_RCC_GetHCLKFreq>
 8004288:	4602      	mov	r2, r0
 800428a:	4b05      	ldr	r3, [pc, #20]	@ (80042a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	0a9b      	lsrs	r3, r3, #10
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	4903      	ldr	r1, [pc, #12]	@ (80042a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004296:	5ccb      	ldrb	r3, [r1, r3]
 8004298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800429c:	4618      	mov	r0, r3
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40023800 	.word	0x40023800
 80042a4:	08015f30 	.word	0x08015f30

080042a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042ac:	f7ff ffdc 	bl	8004268 <HAL_RCC_GetHCLKFreq>
 80042b0:	4602      	mov	r2, r0
 80042b2:	4b05      	ldr	r3, [pc, #20]	@ (80042c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	0b5b      	lsrs	r3, r3, #13
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	4903      	ldr	r1, [pc, #12]	@ (80042cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80042be:	5ccb      	ldrb	r3, [r1, r3]
 80042c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40023800 	.word	0x40023800
 80042cc:	08015f30 	.word	0x08015f30

080042d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e07b      	b.n	80043da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d108      	bne.n	80042fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042f2:	d009      	beq.n	8004308 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	61da      	str	r2, [r3, #28]
 80042fa:	e005      	b.n	8004308 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d106      	bne.n	8004328 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fc fe08 	bl	8000f38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800433e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004350:	431a      	orrs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	431a      	orrs	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004378:	431a      	orrs	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800438c:	ea42 0103 	orr.w	r1, r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004394:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	0c1b      	lsrs	r3, r3, #16
 80043a6:	f003 0104 	and.w	r1, r3, #4
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ae:	f003 0210 	and.w	r2, r3, #16
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69da      	ldr	r2, [r3, #28]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b08a      	sub	sp, #40	@ 0x28
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	60f8      	str	r0, [r7, #12]
 80043ea:	60b9      	str	r1, [r7, #8]
 80043ec:	607a      	str	r2, [r7, #4]
 80043ee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80043f0:	2301      	movs	r3, #1
 80043f2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043f4:	f7fd f92c 	bl	8001650 <HAL_GetTick>
 80043f8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004400:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004408:	887b      	ldrh	r3, [r7, #2]
 800440a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800440c:	7ffb      	ldrb	r3, [r7, #31]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d00c      	beq.n	800442c <HAL_SPI_TransmitReceive+0x4a>
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004418:	d106      	bne.n	8004428 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d102      	bne.n	8004428 <HAL_SPI_TransmitReceive+0x46>
 8004422:	7ffb      	ldrb	r3, [r7, #31]
 8004424:	2b04      	cmp	r3, #4
 8004426:	d001      	beq.n	800442c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004428:	2302      	movs	r3, #2
 800442a:	e17f      	b.n	800472c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d005      	beq.n	800443e <HAL_SPI_TransmitReceive+0x5c>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d002      	beq.n	800443e <HAL_SPI_TransmitReceive+0x5c>
 8004438:	887b      	ldrh	r3, [r7, #2]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e174      	b.n	800472c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004448:	2b01      	cmp	r3, #1
 800444a:	d101      	bne.n	8004450 <HAL_SPI_TransmitReceive+0x6e>
 800444c:	2302      	movs	r3, #2
 800444e:	e16d      	b.n	800472c <HAL_SPI_TransmitReceive+0x34a>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b04      	cmp	r3, #4
 8004462:	d003      	beq.n	800446c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2205      	movs	r2, #5
 8004468:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	887a      	ldrh	r2, [r7, #2]
 800447c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	887a      	ldrh	r2, [r7, #2]
 8004482:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	887a      	ldrh	r2, [r7, #2]
 800448e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	887a      	ldrh	r2, [r7, #2]
 8004494:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ac:	2b40      	cmp	r3, #64	@ 0x40
 80044ae:	d007      	beq.n	80044c0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044c8:	d17e      	bne.n	80045c8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d002      	beq.n	80044d8 <HAL_SPI_TransmitReceive+0xf6>
 80044d2:	8afb      	ldrh	r3, [r7, #22]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d16c      	bne.n	80045b2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044dc:	881a      	ldrh	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e8:	1c9a      	adds	r2, r3, #2
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044fc:	e059      	b.n	80045b2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b02      	cmp	r3, #2
 800450a:	d11b      	bne.n	8004544 <HAL_SPI_TransmitReceive+0x162>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004510:	b29b      	uxth	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d016      	beq.n	8004544 <HAL_SPI_TransmitReceive+0x162>
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	2b01      	cmp	r3, #1
 800451a:	d113      	bne.n	8004544 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004520:	881a      	ldrh	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800452c:	1c9a      	adds	r2, r3, #2
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004536:	b29b      	uxth	r3, r3
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b01      	cmp	r3, #1
 8004550:	d119      	bne.n	8004586 <HAL_SPI_TransmitReceive+0x1a4>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004556:	b29b      	uxth	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d014      	beq.n	8004586 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004566:	b292      	uxth	r2, r2
 8004568:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800456e:	1c9a      	adds	r2, r3, #2
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004578:	b29b      	uxth	r3, r3
 800457a:	3b01      	subs	r3, #1
 800457c:	b29a      	uxth	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004582:	2301      	movs	r3, #1
 8004584:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004586:	f7fd f863 	bl	8001650 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004592:	429a      	cmp	r2, r3
 8004594:	d80d      	bhi.n	80045b2 <HAL_SPI_TransmitReceive+0x1d0>
 8004596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459c:	d009      	beq.n	80045b2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e0bc      	b.n	800472c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1a0      	bne.n	80044fe <HAL_SPI_TransmitReceive+0x11c>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d19b      	bne.n	80044fe <HAL_SPI_TransmitReceive+0x11c>
 80045c6:	e082      	b.n	80046ce <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d002      	beq.n	80045d6 <HAL_SPI_TransmitReceive+0x1f4>
 80045d0:	8afb      	ldrh	r3, [r7, #22]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d171      	bne.n	80046ba <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	330c      	adds	r3, #12
 80045e0:	7812      	ldrb	r2, [r2, #0]
 80045e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045fc:	e05d      	b.n	80046ba <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b02      	cmp	r3, #2
 800460a:	d11c      	bne.n	8004646 <HAL_SPI_TransmitReceive+0x264>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004610:	b29b      	uxth	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d017      	beq.n	8004646 <HAL_SPI_TransmitReceive+0x264>
 8004616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004618:	2b01      	cmp	r3, #1
 800461a:	d114      	bne.n	8004646 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	330c      	adds	r3, #12
 8004626:	7812      	ldrb	r2, [r2, #0]
 8004628:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004638:	b29b      	uxth	r3, r3
 800463a:	3b01      	subs	r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b01      	cmp	r3, #1
 8004652:	d119      	bne.n	8004688 <HAL_SPI_TransmitReceive+0x2a6>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d014      	beq.n	8004688 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004668:	b2d2      	uxtb	r2, r2
 800466a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800467a:	b29b      	uxth	r3, r3
 800467c:	3b01      	subs	r3, #1
 800467e:	b29a      	uxth	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004684:	2301      	movs	r3, #1
 8004686:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004688:	f7fc ffe2 	bl	8001650 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004694:	429a      	cmp	r2, r3
 8004696:	d803      	bhi.n	80046a0 <HAL_SPI_TransmitReceive+0x2be>
 8004698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469e:	d102      	bne.n	80046a6 <HAL_SPI_TransmitReceive+0x2c4>
 80046a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d109      	bne.n	80046ba <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e038      	b.n	800472c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046be:	b29b      	uxth	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d19c      	bne.n	80045fe <HAL_SPI_TransmitReceive+0x21c>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d197      	bne.n	80045fe <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046ce:	6a3a      	ldr	r2, [r7, #32]
 80046d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 f8b6 	bl	8004844 <SPI_EndRxTxTransaction>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d008      	beq.n	80046f0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2220      	movs	r2, #32
 80046e2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e01d      	b.n	800472c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10a      	bne.n	800470e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046f8:	2300      	movs	r3, #0
 80046fa:	613b      	str	r3, [r7, #16]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	613b      	str	r3, [r7, #16]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	613b      	str	r3, [r7, #16]
 800470c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800472a:	2300      	movs	r3, #0
  }
}
 800472c:	4618      	mov	r0, r3
 800472e:	3728      	adds	r7, #40	@ 0x28
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b088      	sub	sp, #32
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	603b      	str	r3, [r7, #0]
 8004740:	4613      	mov	r3, r2
 8004742:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004744:	f7fc ff84 	bl	8001650 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474c:	1a9b      	subs	r3, r3, r2
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	4413      	add	r3, r2
 8004752:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004754:	f7fc ff7c 	bl	8001650 <HAL_GetTick>
 8004758:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800475a:	4b39      	ldr	r3, [pc, #228]	@ (8004840 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	015b      	lsls	r3, r3, #5
 8004760:	0d1b      	lsrs	r3, r3, #20
 8004762:	69fa      	ldr	r2, [r7, #28]
 8004764:	fb02 f303 	mul.w	r3, r2, r3
 8004768:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800476a:	e055      	b.n	8004818 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004772:	d051      	beq.n	8004818 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004774:	f7fc ff6c 	bl	8001650 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	69fa      	ldr	r2, [r7, #28]
 8004780:	429a      	cmp	r2, r3
 8004782:	d902      	bls.n	800478a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d13d      	bne.n	8004806 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685a      	ldr	r2, [r3, #4]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004798:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047a2:	d111      	bne.n	80047c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047ac:	d004      	beq.n	80047b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047b6:	d107      	bne.n	80047c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047d0:	d10f      	bne.n	80047f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e018      	b.n	8004838 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d102      	bne.n	8004812 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	61fb      	str	r3, [r7, #28]
 8004810:	e002      	b.n	8004818 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	3b01      	subs	r3, #1
 8004816:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689a      	ldr	r2, [r3, #8]
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	4013      	ands	r3, r2
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	429a      	cmp	r2, r3
 8004826:	bf0c      	ite	eq
 8004828:	2301      	moveq	r3, #1
 800482a:	2300      	movne	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	461a      	mov	r2, r3
 8004830:	79fb      	ldrb	r3, [r7, #7]
 8004832:	429a      	cmp	r2, r3
 8004834:	d19a      	bne.n	800476c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3720      	adds	r7, #32
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	20000000 	.word	0x20000000

08004844 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b088      	sub	sp, #32
 8004848:	af02      	add	r7, sp, #8
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2201      	movs	r2, #1
 8004858:	2102      	movs	r1, #2
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f7ff ff6a 	bl	8004734 <SPI_WaitFlagStateUntilTimeout>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d007      	beq.n	8004876 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800486a:	f043 0220 	orr.w	r2, r3, #32
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e032      	b.n	80048dc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004876:	4b1b      	ldr	r3, [pc, #108]	@ (80048e4 <SPI_EndRxTxTransaction+0xa0>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a1b      	ldr	r2, [pc, #108]	@ (80048e8 <SPI_EndRxTxTransaction+0xa4>)
 800487c:	fba2 2303 	umull	r2, r3, r2, r3
 8004880:	0d5b      	lsrs	r3, r3, #21
 8004882:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004886:	fb02 f303 	mul.w	r3, r2, r3
 800488a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004894:	d112      	bne.n	80048bc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2200      	movs	r2, #0
 800489e:	2180      	movs	r1, #128	@ 0x80
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f7ff ff47 	bl	8004734 <SPI_WaitFlagStateUntilTimeout>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d016      	beq.n	80048da <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b0:	f043 0220 	orr.w	r2, r3, #32
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e00f      	b.n	80048dc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00a      	beq.n	80048d8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	3b01      	subs	r3, #1
 80048c6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048d2:	2b80      	cmp	r3, #128	@ 0x80
 80048d4:	d0f2      	beq.n	80048bc <SPI_EndRxTxTransaction+0x78>
 80048d6:	e000      	b.n	80048da <SPI_EndRxTxTransaction+0x96>
        break;
 80048d8:	bf00      	nop
  }

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3718      	adds	r7, #24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	20000000 	.word	0x20000000
 80048e8:	165e9f81 	.word	0x165e9f81

080048ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e041      	b.n	8004982 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d106      	bne.n	8004918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7fc fb78 	bl	8001008 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	3304      	adds	r3, #4
 8004928:	4619      	mov	r1, r3
 800492a:	4610      	mov	r0, r2
 800492c:	f000 f95e 	bl	8004bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
	...

0800498c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b01      	cmp	r3, #1
 800499e:	d001      	beq.n	80049a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e046      	b.n	8004a32 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a23      	ldr	r2, [pc, #140]	@ (8004a40 <HAL_TIM_Base_Start+0xb4>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d022      	beq.n	80049fc <HAL_TIM_Base_Start+0x70>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049be:	d01d      	beq.n	80049fc <HAL_TIM_Base_Start+0x70>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004a44 <HAL_TIM_Base_Start+0xb8>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d018      	beq.n	80049fc <HAL_TIM_Base_Start+0x70>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004a48 <HAL_TIM_Base_Start+0xbc>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d013      	beq.n	80049fc <HAL_TIM_Base_Start+0x70>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a1c      	ldr	r2, [pc, #112]	@ (8004a4c <HAL_TIM_Base_Start+0xc0>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d00e      	beq.n	80049fc <HAL_TIM_Base_Start+0x70>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004a50 <HAL_TIM_Base_Start+0xc4>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d009      	beq.n	80049fc <HAL_TIM_Base_Start+0x70>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a19      	ldr	r2, [pc, #100]	@ (8004a54 <HAL_TIM_Base_Start+0xc8>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d004      	beq.n	80049fc <HAL_TIM_Base_Start+0x70>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a18      	ldr	r2, [pc, #96]	@ (8004a58 <HAL_TIM_Base_Start+0xcc>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d111      	bne.n	8004a20 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 0307 	and.w	r3, r3, #7
 8004a06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2b06      	cmp	r3, #6
 8004a0c:	d010      	beq.n	8004a30 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f042 0201 	orr.w	r2, r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a1e:	e007      	b.n	8004a30 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0201 	orr.w	r2, r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	40010000 	.word	0x40010000
 8004a44:	40000400 	.word	0x40000400
 8004a48:	40000800 	.word	0x40000800
 8004a4c:	40000c00 	.word	0x40000c00
 8004a50:	40010400 	.word	0x40010400
 8004a54:	40014000 	.word	0x40014000
 8004a58:	40001800 	.word	0x40001800

08004a5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d101      	bne.n	8004a78 <HAL_TIM_ConfigClockSource+0x1c>
 8004a74:	2302      	movs	r3, #2
 8004a76:	e0b4      	b.n	8004be2 <HAL_TIM_ConfigClockSource+0x186>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ab0:	d03e      	beq.n	8004b30 <HAL_TIM_ConfigClockSource+0xd4>
 8004ab2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ab6:	f200 8087 	bhi.w	8004bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004aba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004abe:	f000 8086 	beq.w	8004bce <HAL_TIM_ConfigClockSource+0x172>
 8004ac2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ac6:	d87f      	bhi.n	8004bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ac8:	2b70      	cmp	r3, #112	@ 0x70
 8004aca:	d01a      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0xa6>
 8004acc:	2b70      	cmp	r3, #112	@ 0x70
 8004ace:	d87b      	bhi.n	8004bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ad0:	2b60      	cmp	r3, #96	@ 0x60
 8004ad2:	d050      	beq.n	8004b76 <HAL_TIM_ConfigClockSource+0x11a>
 8004ad4:	2b60      	cmp	r3, #96	@ 0x60
 8004ad6:	d877      	bhi.n	8004bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ad8:	2b50      	cmp	r3, #80	@ 0x50
 8004ada:	d03c      	beq.n	8004b56 <HAL_TIM_ConfigClockSource+0xfa>
 8004adc:	2b50      	cmp	r3, #80	@ 0x50
 8004ade:	d873      	bhi.n	8004bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ae0:	2b40      	cmp	r3, #64	@ 0x40
 8004ae2:	d058      	beq.n	8004b96 <HAL_TIM_ConfigClockSource+0x13a>
 8004ae4:	2b40      	cmp	r3, #64	@ 0x40
 8004ae6:	d86f      	bhi.n	8004bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ae8:	2b30      	cmp	r3, #48	@ 0x30
 8004aea:	d064      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004aec:	2b30      	cmp	r3, #48	@ 0x30
 8004aee:	d86b      	bhi.n	8004bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004af0:	2b20      	cmp	r3, #32
 8004af2:	d060      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004af4:	2b20      	cmp	r3, #32
 8004af6:	d867      	bhi.n	8004bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d05c      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004afc:	2b10      	cmp	r3, #16
 8004afe:	d05a      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b00:	e062      	b.n	8004bc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b12:	f000 f98b 	bl	8004e2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	609a      	str	r2, [r3, #8]
      break;
 8004b2e:	e04f      	b.n	8004bd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b40:	f000 f974 	bl	8004e2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689a      	ldr	r2, [r3, #8]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b52:	609a      	str	r2, [r3, #8]
      break;
 8004b54:	e03c      	b.n	8004bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b62:	461a      	mov	r2, r3
 8004b64:	f000 f8e8 	bl	8004d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2150      	movs	r1, #80	@ 0x50
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 f941 	bl	8004df6 <TIM_ITRx_SetConfig>
      break;
 8004b74:	e02c      	b.n	8004bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b82:	461a      	mov	r2, r3
 8004b84:	f000 f907 	bl	8004d96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2160      	movs	r1, #96	@ 0x60
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 f931 	bl	8004df6 <TIM_ITRx_SetConfig>
      break;
 8004b94:	e01c      	b.n	8004bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f000 f8c8 	bl	8004d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2140      	movs	r1, #64	@ 0x40
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 f921 	bl	8004df6 <TIM_ITRx_SetConfig>
      break;
 8004bb4:	e00c      	b.n	8004bd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	f000 f918 	bl	8004df6 <TIM_ITRx_SetConfig>
      break;
 8004bc6:	e003      	b.n	8004bd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	73fb      	strb	r3, [r7, #15]
      break;
 8004bcc:	e000      	b.n	8004bd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004bce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
	...

08004bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a43      	ldr	r2, [pc, #268]	@ (8004d0c <TIM_Base_SetConfig+0x120>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d013      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c0a:	d00f      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a40      	ldr	r2, [pc, #256]	@ (8004d10 <TIM_Base_SetConfig+0x124>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d00b      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a3f      	ldr	r2, [pc, #252]	@ (8004d14 <TIM_Base_SetConfig+0x128>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d007      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a3e      	ldr	r2, [pc, #248]	@ (8004d18 <TIM_Base_SetConfig+0x12c>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d003      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a3d      	ldr	r2, [pc, #244]	@ (8004d1c <TIM_Base_SetConfig+0x130>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d108      	bne.n	8004c3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a32      	ldr	r2, [pc, #200]	@ (8004d0c <TIM_Base_SetConfig+0x120>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d02b      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c4c:	d027      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a2f      	ldr	r2, [pc, #188]	@ (8004d10 <TIM_Base_SetConfig+0x124>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d023      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a2e      	ldr	r2, [pc, #184]	@ (8004d14 <TIM_Base_SetConfig+0x128>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d01f      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a2d      	ldr	r2, [pc, #180]	@ (8004d18 <TIM_Base_SetConfig+0x12c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d01b      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a2c      	ldr	r2, [pc, #176]	@ (8004d1c <TIM_Base_SetConfig+0x130>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d017      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a2b      	ldr	r2, [pc, #172]	@ (8004d20 <TIM_Base_SetConfig+0x134>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d013      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a2a      	ldr	r2, [pc, #168]	@ (8004d24 <TIM_Base_SetConfig+0x138>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d00f      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a29      	ldr	r2, [pc, #164]	@ (8004d28 <TIM_Base_SetConfig+0x13c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d00b      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a28      	ldr	r2, [pc, #160]	@ (8004d2c <TIM_Base_SetConfig+0x140>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d007      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a27      	ldr	r2, [pc, #156]	@ (8004d30 <TIM_Base_SetConfig+0x144>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d003      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a26      	ldr	r2, [pc, #152]	@ (8004d34 <TIM_Base_SetConfig+0x148>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d108      	bne.n	8004cb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	689a      	ldr	r2, [r3, #8]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a0e      	ldr	r2, [pc, #56]	@ (8004d0c <TIM_Base_SetConfig+0x120>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d003      	beq.n	8004cde <TIM_Base_SetConfig+0xf2>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a10      	ldr	r2, [pc, #64]	@ (8004d1c <TIM_Base_SetConfig+0x130>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d103      	bne.n	8004ce6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	691a      	ldr	r2, [r3, #16]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f043 0204 	orr.w	r2, r3, #4
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	601a      	str	r2, [r3, #0]
}
 8004cfe:	bf00      	nop
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	40010000 	.word	0x40010000
 8004d10:	40000400 	.word	0x40000400
 8004d14:	40000800 	.word	0x40000800
 8004d18:	40000c00 	.word	0x40000c00
 8004d1c:	40010400 	.word	0x40010400
 8004d20:	40014000 	.word	0x40014000
 8004d24:	40014400 	.word	0x40014400
 8004d28:	40014800 	.word	0x40014800
 8004d2c:	40001800 	.word	0x40001800
 8004d30:	40001c00 	.word	0x40001c00
 8004d34:	40002000 	.word	0x40002000

08004d38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	f023 0201 	bic.w	r2, r3, #1
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	011b      	lsls	r3, r3, #4
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f023 030a 	bic.w	r3, r3, #10
 8004d74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	621a      	str	r2, [r3, #32]
}
 8004d8a:	bf00      	nop
 8004d8c:	371c      	adds	r7, #28
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b087      	sub	sp, #28
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	60f8      	str	r0, [r7, #12]
 8004d9e:	60b9      	str	r1, [r7, #8]
 8004da0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	f023 0210 	bic.w	r2, r3, #16
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004dc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	031b      	lsls	r3, r3, #12
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004dd2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	011b      	lsls	r3, r3, #4
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	621a      	str	r2, [r3, #32]
}
 8004dea:	bf00      	nop
 8004dec:	371c      	adds	r7, #28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b085      	sub	sp, #20
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
 8004dfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f043 0307 	orr.w	r3, r3, #7
 8004e18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	609a      	str	r2, [r3, #8]
}
 8004e20:	bf00      	nop
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
 8004e38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	021a      	lsls	r2, r3, #8
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	609a      	str	r2, [r3, #8]
}
 8004e60:	bf00      	nop
 8004e62:	371c      	adds	r7, #28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d101      	bne.n	8004e84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e80:	2302      	movs	r3, #2
 8004e82:	e05a      	b.n	8004f3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a21      	ldr	r2, [pc, #132]	@ (8004f48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d022      	beq.n	8004f0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ed0:	d01d      	beq.n	8004f0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8004f4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d018      	beq.n	8004f0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a1b      	ldr	r2, [pc, #108]	@ (8004f50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d013      	beq.n	8004f0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a1a      	ldr	r2, [pc, #104]	@ (8004f54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d00e      	beq.n	8004f0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a18      	ldr	r2, [pc, #96]	@ (8004f58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d009      	beq.n	8004f0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a17      	ldr	r2, [pc, #92]	@ (8004f5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d004      	beq.n	8004f0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a15      	ldr	r2, [pc, #84]	@ (8004f60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d10c      	bne.n	8004f28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	40010000 	.word	0x40010000
 8004f4c:	40000400 	.word	0x40000400
 8004f50:	40000800 	.word	0x40000800
 8004f54:	40000c00 	.word	0x40000c00
 8004f58:	40010400 	.word	0x40010400
 8004f5c:	40014000 	.word	0x40014000
 8004f60:	40001800 	.word	0x40001800

08004f64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e042      	b.n	8004ffc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7fc f85c 	bl	8001048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2224      	movs	r2, #36	@ 0x24
 8004f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68da      	ldr	r2, [r3, #12]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f973 	bl	8005294 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	691a      	ldr	r2, [r3, #16]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	695a      	ldr	r2, [r3, #20]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68da      	ldr	r2, [r3, #12]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b08a      	sub	sp, #40	@ 0x28
 8005008:	af02      	add	r7, sp, #8
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	603b      	str	r3, [r7, #0]
 8005010:	4613      	mov	r3, r2
 8005012:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005014:	2300      	movs	r3, #0
 8005016:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b20      	cmp	r3, #32
 8005022:	d175      	bne.n	8005110 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d002      	beq.n	8005030 <HAL_UART_Transmit+0x2c>
 800502a:	88fb      	ldrh	r3, [r7, #6]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e06e      	b.n	8005112 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2221      	movs	r2, #33	@ 0x21
 800503e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005042:	f7fc fb05 	bl	8001650 <HAL_GetTick>
 8005046:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	88fa      	ldrh	r2, [r7, #6]
 800504c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	88fa      	ldrh	r2, [r7, #6]
 8005052:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800505c:	d108      	bne.n	8005070 <HAL_UART_Transmit+0x6c>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d104      	bne.n	8005070 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005066:	2300      	movs	r3, #0
 8005068:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	61bb      	str	r3, [r7, #24]
 800506e:	e003      	b.n	8005078 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005074:	2300      	movs	r3, #0
 8005076:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005078:	e02e      	b.n	80050d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	2200      	movs	r2, #0
 8005082:	2180      	movs	r1, #128	@ 0x80
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 f848 	bl	800511a <UART_WaitOnFlagUntilTimeout>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d005      	beq.n	800509c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2220      	movs	r2, #32
 8005094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e03a      	b.n	8005112 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10b      	bne.n	80050ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	461a      	mov	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	3302      	adds	r3, #2
 80050b6:	61bb      	str	r3, [r7, #24]
 80050b8:	e007      	b.n	80050ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	781a      	ldrb	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	3301      	adds	r3, #1
 80050c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	3b01      	subs	r3, #1
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050dc:	b29b      	uxth	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1cb      	bne.n	800507a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2200      	movs	r2, #0
 80050ea:	2140      	movs	r1, #64	@ 0x40
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 f814 	bl	800511a <UART_WaitOnFlagUntilTimeout>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d005      	beq.n	8005104 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2220      	movs	r2, #32
 80050fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e006      	b.n	8005112 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2220      	movs	r2, #32
 8005108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800510c:	2300      	movs	r3, #0
 800510e:	e000      	b.n	8005112 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005110:	2302      	movs	r3, #2
  }
}
 8005112:	4618      	mov	r0, r3
 8005114:	3720      	adds	r7, #32
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b086      	sub	sp, #24
 800511e:	af00      	add	r7, sp, #0
 8005120:	60f8      	str	r0, [r7, #12]
 8005122:	60b9      	str	r1, [r7, #8]
 8005124:	603b      	str	r3, [r7, #0]
 8005126:	4613      	mov	r3, r2
 8005128:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800512a:	e03b      	b.n	80051a4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800512c:	6a3b      	ldr	r3, [r7, #32]
 800512e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005132:	d037      	beq.n	80051a4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005134:	f7fc fa8c 	bl	8001650 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	6a3a      	ldr	r2, [r7, #32]
 8005140:	429a      	cmp	r2, r3
 8005142:	d302      	bcc.n	800514a <UART_WaitOnFlagUntilTimeout+0x30>
 8005144:	6a3b      	ldr	r3, [r7, #32]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e03a      	b.n	80051c4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	2b00      	cmp	r3, #0
 800515a:	d023      	beq.n	80051a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2b80      	cmp	r3, #128	@ 0x80
 8005160:	d020      	beq.n	80051a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	2b40      	cmp	r3, #64	@ 0x40
 8005166:	d01d      	beq.n	80051a4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0308 	and.w	r3, r3, #8
 8005172:	2b08      	cmp	r3, #8
 8005174:	d116      	bne.n	80051a4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005176:	2300      	movs	r3, #0
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	617b      	str	r3, [r7, #20]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 f81d 	bl	80051cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2208      	movs	r2, #8
 8005196:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e00f      	b.n	80051c4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	4013      	ands	r3, r2
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	bf0c      	ite	eq
 80051b4:	2301      	moveq	r3, #1
 80051b6:	2300      	movne	r3, #0
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	461a      	mov	r2, r3
 80051bc:	79fb      	ldrb	r3, [r7, #7]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d0b4      	beq.n	800512c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3718      	adds	r7, #24
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b095      	sub	sp, #84	@ 0x54
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	330c      	adds	r3, #12
 80051da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051de:	e853 3f00 	ldrex	r3, [r3]
 80051e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	330c      	adds	r3, #12
 80051f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80051f4:	643a      	str	r2, [r7, #64]	@ 0x40
 80051f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051fc:	e841 2300 	strex	r3, r2, [r1]
 8005200:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1e5      	bne.n	80051d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	3314      	adds	r3, #20
 800520e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	e853 3f00 	ldrex	r3, [r3]
 8005216:	61fb      	str	r3, [r7, #28]
   return(result);
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f023 0301 	bic.w	r3, r3, #1
 800521e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3314      	adds	r3, #20
 8005226:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005228:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800522a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800522e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005230:	e841 2300 	strex	r3, r2, [r1]
 8005234:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1e5      	bne.n	8005208 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005240:	2b01      	cmp	r3, #1
 8005242:	d119      	bne.n	8005278 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	330c      	adds	r3, #12
 800524a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	e853 3f00 	ldrex	r3, [r3]
 8005252:	60bb      	str	r3, [r7, #8]
   return(result);
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f023 0310 	bic.w	r3, r3, #16
 800525a:	647b      	str	r3, [r7, #68]	@ 0x44
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	330c      	adds	r3, #12
 8005262:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005264:	61ba      	str	r2, [r7, #24]
 8005266:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005268:	6979      	ldr	r1, [r7, #20]
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	e841 2300 	strex	r3, r2, [r1]
 8005270:	613b      	str	r3, [r7, #16]
   return(result);
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1e5      	bne.n	8005244 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2220      	movs	r2, #32
 800527c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005286:	bf00      	nop
 8005288:	3754      	adds	r7, #84	@ 0x54
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
	...

08005294 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005298:	b0c0      	sub	sp, #256	@ 0x100
 800529a:	af00      	add	r7, sp, #0
 800529c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80052ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b0:	68d9      	ldr	r1, [r3, #12]
 80052b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	ea40 0301 	orr.w	r3, r0, r1
 80052bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	431a      	orrs	r2, r3
 80052cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	431a      	orrs	r2, r3
 80052d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	4313      	orrs	r3, r2
 80052dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80052ec:	f021 010c 	bic.w	r1, r1, #12
 80052f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80052fa:	430b      	orrs	r3, r1
 80052fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800530a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800530e:	6999      	ldr	r1, [r3, #24]
 8005310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	ea40 0301 	orr.w	r3, r0, r1
 800531a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800531c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	4b8f      	ldr	r3, [pc, #572]	@ (8005560 <UART_SetConfig+0x2cc>)
 8005324:	429a      	cmp	r2, r3
 8005326:	d005      	beq.n	8005334 <UART_SetConfig+0xa0>
 8005328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	4b8d      	ldr	r3, [pc, #564]	@ (8005564 <UART_SetConfig+0x2d0>)
 8005330:	429a      	cmp	r2, r3
 8005332:	d104      	bne.n	800533e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005334:	f7fe ffb8 	bl	80042a8 <HAL_RCC_GetPCLK2Freq>
 8005338:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800533c:	e003      	b.n	8005346 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800533e:	f7fe ff9f 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 8005342:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005350:	f040 810c 	bne.w	800556c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005358:	2200      	movs	r2, #0
 800535a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800535e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005362:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005366:	4622      	mov	r2, r4
 8005368:	462b      	mov	r3, r5
 800536a:	1891      	adds	r1, r2, r2
 800536c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800536e:	415b      	adcs	r3, r3
 8005370:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005372:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005376:	4621      	mov	r1, r4
 8005378:	eb12 0801 	adds.w	r8, r2, r1
 800537c:	4629      	mov	r1, r5
 800537e:	eb43 0901 	adc.w	r9, r3, r1
 8005382:	f04f 0200 	mov.w	r2, #0
 8005386:	f04f 0300 	mov.w	r3, #0
 800538a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800538e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005392:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005396:	4690      	mov	r8, r2
 8005398:	4699      	mov	r9, r3
 800539a:	4623      	mov	r3, r4
 800539c:	eb18 0303 	adds.w	r3, r8, r3
 80053a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80053a4:	462b      	mov	r3, r5
 80053a6:	eb49 0303 	adc.w	r3, r9, r3
 80053aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80053ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80053be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80053c2:	460b      	mov	r3, r1
 80053c4:	18db      	adds	r3, r3, r3
 80053c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80053c8:	4613      	mov	r3, r2
 80053ca:	eb42 0303 	adc.w	r3, r2, r3
 80053ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80053d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80053d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80053d8:	f7fa ff52 	bl	8000280 <__aeabi_uldivmod>
 80053dc:	4602      	mov	r2, r0
 80053de:	460b      	mov	r3, r1
 80053e0:	4b61      	ldr	r3, [pc, #388]	@ (8005568 <UART_SetConfig+0x2d4>)
 80053e2:	fba3 2302 	umull	r2, r3, r3, r2
 80053e6:	095b      	lsrs	r3, r3, #5
 80053e8:	011c      	lsls	r4, r3, #4
 80053ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053ee:	2200      	movs	r2, #0
 80053f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80053f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80053fc:	4642      	mov	r2, r8
 80053fe:	464b      	mov	r3, r9
 8005400:	1891      	adds	r1, r2, r2
 8005402:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005404:	415b      	adcs	r3, r3
 8005406:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005408:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800540c:	4641      	mov	r1, r8
 800540e:	eb12 0a01 	adds.w	sl, r2, r1
 8005412:	4649      	mov	r1, r9
 8005414:	eb43 0b01 	adc.w	fp, r3, r1
 8005418:	f04f 0200 	mov.w	r2, #0
 800541c:	f04f 0300 	mov.w	r3, #0
 8005420:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005424:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005428:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800542c:	4692      	mov	sl, r2
 800542e:	469b      	mov	fp, r3
 8005430:	4643      	mov	r3, r8
 8005432:	eb1a 0303 	adds.w	r3, sl, r3
 8005436:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800543a:	464b      	mov	r3, r9
 800543c:	eb4b 0303 	adc.w	r3, fp, r3
 8005440:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005450:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005454:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005458:	460b      	mov	r3, r1
 800545a:	18db      	adds	r3, r3, r3
 800545c:	643b      	str	r3, [r7, #64]	@ 0x40
 800545e:	4613      	mov	r3, r2
 8005460:	eb42 0303 	adc.w	r3, r2, r3
 8005464:	647b      	str	r3, [r7, #68]	@ 0x44
 8005466:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800546a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800546e:	f7fa ff07 	bl	8000280 <__aeabi_uldivmod>
 8005472:	4602      	mov	r2, r0
 8005474:	460b      	mov	r3, r1
 8005476:	4611      	mov	r1, r2
 8005478:	4b3b      	ldr	r3, [pc, #236]	@ (8005568 <UART_SetConfig+0x2d4>)
 800547a:	fba3 2301 	umull	r2, r3, r3, r1
 800547e:	095b      	lsrs	r3, r3, #5
 8005480:	2264      	movs	r2, #100	@ 0x64
 8005482:	fb02 f303 	mul.w	r3, r2, r3
 8005486:	1acb      	subs	r3, r1, r3
 8005488:	00db      	lsls	r3, r3, #3
 800548a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800548e:	4b36      	ldr	r3, [pc, #216]	@ (8005568 <UART_SetConfig+0x2d4>)
 8005490:	fba3 2302 	umull	r2, r3, r3, r2
 8005494:	095b      	lsrs	r3, r3, #5
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800549c:	441c      	add	r4, r3
 800549e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80054ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80054b0:	4642      	mov	r2, r8
 80054b2:	464b      	mov	r3, r9
 80054b4:	1891      	adds	r1, r2, r2
 80054b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80054b8:	415b      	adcs	r3, r3
 80054ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80054c0:	4641      	mov	r1, r8
 80054c2:	1851      	adds	r1, r2, r1
 80054c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80054c6:	4649      	mov	r1, r9
 80054c8:	414b      	adcs	r3, r1
 80054ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80054cc:	f04f 0200 	mov.w	r2, #0
 80054d0:	f04f 0300 	mov.w	r3, #0
 80054d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80054d8:	4659      	mov	r1, fp
 80054da:	00cb      	lsls	r3, r1, #3
 80054dc:	4651      	mov	r1, sl
 80054de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054e2:	4651      	mov	r1, sl
 80054e4:	00ca      	lsls	r2, r1, #3
 80054e6:	4610      	mov	r0, r2
 80054e8:	4619      	mov	r1, r3
 80054ea:	4603      	mov	r3, r0
 80054ec:	4642      	mov	r2, r8
 80054ee:	189b      	adds	r3, r3, r2
 80054f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054f4:	464b      	mov	r3, r9
 80054f6:	460a      	mov	r2, r1
 80054f8:	eb42 0303 	adc.w	r3, r2, r3
 80054fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800550c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005510:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005514:	460b      	mov	r3, r1
 8005516:	18db      	adds	r3, r3, r3
 8005518:	62bb      	str	r3, [r7, #40]	@ 0x28
 800551a:	4613      	mov	r3, r2
 800551c:	eb42 0303 	adc.w	r3, r2, r3
 8005520:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005522:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005526:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800552a:	f7fa fea9 	bl	8000280 <__aeabi_uldivmod>
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
 8005532:	4b0d      	ldr	r3, [pc, #52]	@ (8005568 <UART_SetConfig+0x2d4>)
 8005534:	fba3 1302 	umull	r1, r3, r3, r2
 8005538:	095b      	lsrs	r3, r3, #5
 800553a:	2164      	movs	r1, #100	@ 0x64
 800553c:	fb01 f303 	mul.w	r3, r1, r3
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	3332      	adds	r3, #50	@ 0x32
 8005546:	4a08      	ldr	r2, [pc, #32]	@ (8005568 <UART_SetConfig+0x2d4>)
 8005548:	fba2 2303 	umull	r2, r3, r2, r3
 800554c:	095b      	lsrs	r3, r3, #5
 800554e:	f003 0207 	and.w	r2, r3, #7
 8005552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4422      	add	r2, r4
 800555a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800555c:	e106      	b.n	800576c <UART_SetConfig+0x4d8>
 800555e:	bf00      	nop
 8005560:	40011000 	.word	0x40011000
 8005564:	40011400 	.word	0x40011400
 8005568:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800556c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005570:	2200      	movs	r2, #0
 8005572:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005576:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800557a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800557e:	4642      	mov	r2, r8
 8005580:	464b      	mov	r3, r9
 8005582:	1891      	adds	r1, r2, r2
 8005584:	6239      	str	r1, [r7, #32]
 8005586:	415b      	adcs	r3, r3
 8005588:	627b      	str	r3, [r7, #36]	@ 0x24
 800558a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800558e:	4641      	mov	r1, r8
 8005590:	1854      	adds	r4, r2, r1
 8005592:	4649      	mov	r1, r9
 8005594:	eb43 0501 	adc.w	r5, r3, r1
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	f04f 0300 	mov.w	r3, #0
 80055a0:	00eb      	lsls	r3, r5, #3
 80055a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055a6:	00e2      	lsls	r2, r4, #3
 80055a8:	4614      	mov	r4, r2
 80055aa:	461d      	mov	r5, r3
 80055ac:	4643      	mov	r3, r8
 80055ae:	18e3      	adds	r3, r4, r3
 80055b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80055b4:	464b      	mov	r3, r9
 80055b6:	eb45 0303 	adc.w	r3, r5, r3
 80055ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80055be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80055ce:	f04f 0200 	mov.w	r2, #0
 80055d2:	f04f 0300 	mov.w	r3, #0
 80055d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80055da:	4629      	mov	r1, r5
 80055dc:	008b      	lsls	r3, r1, #2
 80055de:	4621      	mov	r1, r4
 80055e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055e4:	4621      	mov	r1, r4
 80055e6:	008a      	lsls	r2, r1, #2
 80055e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80055ec:	f7fa fe48 	bl	8000280 <__aeabi_uldivmod>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4b60      	ldr	r3, [pc, #384]	@ (8005778 <UART_SetConfig+0x4e4>)
 80055f6:	fba3 2302 	umull	r2, r3, r3, r2
 80055fa:	095b      	lsrs	r3, r3, #5
 80055fc:	011c      	lsls	r4, r3, #4
 80055fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005602:	2200      	movs	r2, #0
 8005604:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005608:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800560c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005610:	4642      	mov	r2, r8
 8005612:	464b      	mov	r3, r9
 8005614:	1891      	adds	r1, r2, r2
 8005616:	61b9      	str	r1, [r7, #24]
 8005618:	415b      	adcs	r3, r3
 800561a:	61fb      	str	r3, [r7, #28]
 800561c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005620:	4641      	mov	r1, r8
 8005622:	1851      	adds	r1, r2, r1
 8005624:	6139      	str	r1, [r7, #16]
 8005626:	4649      	mov	r1, r9
 8005628:	414b      	adcs	r3, r1
 800562a:	617b      	str	r3, [r7, #20]
 800562c:	f04f 0200 	mov.w	r2, #0
 8005630:	f04f 0300 	mov.w	r3, #0
 8005634:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005638:	4659      	mov	r1, fp
 800563a:	00cb      	lsls	r3, r1, #3
 800563c:	4651      	mov	r1, sl
 800563e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005642:	4651      	mov	r1, sl
 8005644:	00ca      	lsls	r2, r1, #3
 8005646:	4610      	mov	r0, r2
 8005648:	4619      	mov	r1, r3
 800564a:	4603      	mov	r3, r0
 800564c:	4642      	mov	r2, r8
 800564e:	189b      	adds	r3, r3, r2
 8005650:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005654:	464b      	mov	r3, r9
 8005656:	460a      	mov	r2, r1
 8005658:	eb42 0303 	adc.w	r3, r2, r3
 800565c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	67bb      	str	r3, [r7, #120]	@ 0x78
 800566a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800566c:	f04f 0200 	mov.w	r2, #0
 8005670:	f04f 0300 	mov.w	r3, #0
 8005674:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005678:	4649      	mov	r1, r9
 800567a:	008b      	lsls	r3, r1, #2
 800567c:	4641      	mov	r1, r8
 800567e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005682:	4641      	mov	r1, r8
 8005684:	008a      	lsls	r2, r1, #2
 8005686:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800568a:	f7fa fdf9 	bl	8000280 <__aeabi_uldivmod>
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	4611      	mov	r1, r2
 8005694:	4b38      	ldr	r3, [pc, #224]	@ (8005778 <UART_SetConfig+0x4e4>)
 8005696:	fba3 2301 	umull	r2, r3, r3, r1
 800569a:	095b      	lsrs	r3, r3, #5
 800569c:	2264      	movs	r2, #100	@ 0x64
 800569e:	fb02 f303 	mul.w	r3, r2, r3
 80056a2:	1acb      	subs	r3, r1, r3
 80056a4:	011b      	lsls	r3, r3, #4
 80056a6:	3332      	adds	r3, #50	@ 0x32
 80056a8:	4a33      	ldr	r2, [pc, #204]	@ (8005778 <UART_SetConfig+0x4e4>)
 80056aa:	fba2 2303 	umull	r2, r3, r2, r3
 80056ae:	095b      	lsrs	r3, r3, #5
 80056b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056b4:	441c      	add	r4, r3
 80056b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ba:	2200      	movs	r2, #0
 80056bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80056be:	677a      	str	r2, [r7, #116]	@ 0x74
 80056c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80056c4:	4642      	mov	r2, r8
 80056c6:	464b      	mov	r3, r9
 80056c8:	1891      	adds	r1, r2, r2
 80056ca:	60b9      	str	r1, [r7, #8]
 80056cc:	415b      	adcs	r3, r3
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056d4:	4641      	mov	r1, r8
 80056d6:	1851      	adds	r1, r2, r1
 80056d8:	6039      	str	r1, [r7, #0]
 80056da:	4649      	mov	r1, r9
 80056dc:	414b      	adcs	r3, r1
 80056de:	607b      	str	r3, [r7, #4]
 80056e0:	f04f 0200 	mov.w	r2, #0
 80056e4:	f04f 0300 	mov.w	r3, #0
 80056e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056ec:	4659      	mov	r1, fp
 80056ee:	00cb      	lsls	r3, r1, #3
 80056f0:	4651      	mov	r1, sl
 80056f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056f6:	4651      	mov	r1, sl
 80056f8:	00ca      	lsls	r2, r1, #3
 80056fa:	4610      	mov	r0, r2
 80056fc:	4619      	mov	r1, r3
 80056fe:	4603      	mov	r3, r0
 8005700:	4642      	mov	r2, r8
 8005702:	189b      	adds	r3, r3, r2
 8005704:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005706:	464b      	mov	r3, r9
 8005708:	460a      	mov	r2, r1
 800570a:	eb42 0303 	adc.w	r3, r2, r3
 800570e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	663b      	str	r3, [r7, #96]	@ 0x60
 800571a:	667a      	str	r2, [r7, #100]	@ 0x64
 800571c:	f04f 0200 	mov.w	r2, #0
 8005720:	f04f 0300 	mov.w	r3, #0
 8005724:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005728:	4649      	mov	r1, r9
 800572a:	008b      	lsls	r3, r1, #2
 800572c:	4641      	mov	r1, r8
 800572e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005732:	4641      	mov	r1, r8
 8005734:	008a      	lsls	r2, r1, #2
 8005736:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800573a:	f7fa fda1 	bl	8000280 <__aeabi_uldivmod>
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	4b0d      	ldr	r3, [pc, #52]	@ (8005778 <UART_SetConfig+0x4e4>)
 8005744:	fba3 1302 	umull	r1, r3, r3, r2
 8005748:	095b      	lsrs	r3, r3, #5
 800574a:	2164      	movs	r1, #100	@ 0x64
 800574c:	fb01 f303 	mul.w	r3, r1, r3
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	011b      	lsls	r3, r3, #4
 8005754:	3332      	adds	r3, #50	@ 0x32
 8005756:	4a08      	ldr	r2, [pc, #32]	@ (8005778 <UART_SetConfig+0x4e4>)
 8005758:	fba2 2303 	umull	r2, r3, r2, r3
 800575c:	095b      	lsrs	r3, r3, #5
 800575e:	f003 020f 	and.w	r2, r3, #15
 8005762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4422      	add	r2, r4
 800576a:	609a      	str	r2, [r3, #8]
}
 800576c:	bf00      	nop
 800576e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005772:	46bd      	mov	sp, r7
 8005774:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005778:	51eb851f 	.word	0x51eb851f

0800577c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005782:	4b87      	ldr	r3, [pc, #540]	@ (80059a0 <MX_LWIP_Init+0x224>)
 8005784:	22c0      	movs	r2, #192	@ 0xc0
 8005786:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005788:	4b85      	ldr	r3, [pc, #532]	@ (80059a0 <MX_LWIP_Init+0x224>)
 800578a:	22a8      	movs	r2, #168	@ 0xa8
 800578c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800578e:	4b84      	ldr	r3, [pc, #528]	@ (80059a0 <MX_LWIP_Init+0x224>)
 8005790:	2201      	movs	r2, #1
 8005792:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 50;
 8005794:	4b82      	ldr	r3, [pc, #520]	@ (80059a0 <MX_LWIP_Init+0x224>)
 8005796:	2232      	movs	r2, #50	@ 0x32
 8005798:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800579a:	4b82      	ldr	r3, [pc, #520]	@ (80059a4 <MX_LWIP_Init+0x228>)
 800579c:	22ff      	movs	r2, #255	@ 0xff
 800579e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80057a0:	4b80      	ldr	r3, [pc, #512]	@ (80059a4 <MX_LWIP_Init+0x228>)
 80057a2:	22ff      	movs	r2, #255	@ 0xff
 80057a4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80057a6:	4b7f      	ldr	r3, [pc, #508]	@ (80059a4 <MX_LWIP_Init+0x228>)
 80057a8:	22ff      	movs	r2, #255	@ 0xff
 80057aa:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80057ac:	4b7d      	ldr	r3, [pc, #500]	@ (80059a4 <MX_LWIP_Init+0x228>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80057b2:	4b7d      	ldr	r3, [pc, #500]	@ (80059a8 <MX_LWIP_Init+0x22c>)
 80057b4:	22c0      	movs	r2, #192	@ 0xc0
 80057b6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80057b8:	4b7b      	ldr	r3, [pc, #492]	@ (80059a8 <MX_LWIP_Init+0x22c>)
 80057ba:	22a8      	movs	r2, #168	@ 0xa8
 80057bc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80057be:	4b7a      	ldr	r3, [pc, #488]	@ (80059a8 <MX_LWIP_Init+0x22c>)
 80057c0:	2201      	movs	r2, #1
 80057c2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80057c4:	4b78      	ldr	r3, [pc, #480]	@ (80059a8 <MX_LWIP_Init+0x22c>)
 80057c6:	2201      	movs	r2, #1
 80057c8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 80057ca:	f000 fd02 	bl	80061d2 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80057ce:	4b74      	ldr	r3, [pc, #464]	@ (80059a0 <MX_LWIP_Init+0x224>)
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	061a      	lsls	r2, r3, #24
 80057d4:	4b72      	ldr	r3, [pc, #456]	@ (80059a0 <MX_LWIP_Init+0x224>)
 80057d6:	785b      	ldrb	r3, [r3, #1]
 80057d8:	041b      	lsls	r3, r3, #16
 80057da:	431a      	orrs	r2, r3
 80057dc:	4b70      	ldr	r3, [pc, #448]	@ (80059a0 <MX_LWIP_Init+0x224>)
 80057de:	789b      	ldrb	r3, [r3, #2]
 80057e0:	021b      	lsls	r3, r3, #8
 80057e2:	4313      	orrs	r3, r2
 80057e4:	4a6e      	ldr	r2, [pc, #440]	@ (80059a0 <MX_LWIP_Init+0x224>)
 80057e6:	78d2      	ldrb	r2, [r2, #3]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	061a      	lsls	r2, r3, #24
 80057ec:	4b6c      	ldr	r3, [pc, #432]	@ (80059a0 <MX_LWIP_Init+0x224>)
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	0619      	lsls	r1, r3, #24
 80057f2:	4b6b      	ldr	r3, [pc, #428]	@ (80059a0 <MX_LWIP_Init+0x224>)
 80057f4:	785b      	ldrb	r3, [r3, #1]
 80057f6:	041b      	lsls	r3, r3, #16
 80057f8:	4319      	orrs	r1, r3
 80057fa:	4b69      	ldr	r3, [pc, #420]	@ (80059a0 <MX_LWIP_Init+0x224>)
 80057fc:	789b      	ldrb	r3, [r3, #2]
 80057fe:	021b      	lsls	r3, r3, #8
 8005800:	430b      	orrs	r3, r1
 8005802:	4967      	ldr	r1, [pc, #412]	@ (80059a0 <MX_LWIP_Init+0x224>)
 8005804:	78c9      	ldrb	r1, [r1, #3]
 8005806:	430b      	orrs	r3, r1
 8005808:	021b      	lsls	r3, r3, #8
 800580a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800580e:	431a      	orrs	r2, r3
 8005810:	4b63      	ldr	r3, [pc, #396]	@ (80059a0 <MX_LWIP_Init+0x224>)
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	0619      	lsls	r1, r3, #24
 8005816:	4b62      	ldr	r3, [pc, #392]	@ (80059a0 <MX_LWIP_Init+0x224>)
 8005818:	785b      	ldrb	r3, [r3, #1]
 800581a:	041b      	lsls	r3, r3, #16
 800581c:	4319      	orrs	r1, r3
 800581e:	4b60      	ldr	r3, [pc, #384]	@ (80059a0 <MX_LWIP_Init+0x224>)
 8005820:	789b      	ldrb	r3, [r3, #2]
 8005822:	021b      	lsls	r3, r3, #8
 8005824:	430b      	orrs	r3, r1
 8005826:	495e      	ldr	r1, [pc, #376]	@ (80059a0 <MX_LWIP_Init+0x224>)
 8005828:	78c9      	ldrb	r1, [r1, #3]
 800582a:	430b      	orrs	r3, r1
 800582c:	0a1b      	lsrs	r3, r3, #8
 800582e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005832:	431a      	orrs	r2, r3
 8005834:	4b5a      	ldr	r3, [pc, #360]	@ (80059a0 <MX_LWIP_Init+0x224>)
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	0619      	lsls	r1, r3, #24
 800583a:	4b59      	ldr	r3, [pc, #356]	@ (80059a0 <MX_LWIP_Init+0x224>)
 800583c:	785b      	ldrb	r3, [r3, #1]
 800583e:	041b      	lsls	r3, r3, #16
 8005840:	4319      	orrs	r1, r3
 8005842:	4b57      	ldr	r3, [pc, #348]	@ (80059a0 <MX_LWIP_Init+0x224>)
 8005844:	789b      	ldrb	r3, [r3, #2]
 8005846:	021b      	lsls	r3, r3, #8
 8005848:	430b      	orrs	r3, r1
 800584a:	4955      	ldr	r1, [pc, #340]	@ (80059a0 <MX_LWIP_Init+0x224>)
 800584c:	78c9      	ldrb	r1, [r1, #3]
 800584e:	430b      	orrs	r3, r1
 8005850:	0e1b      	lsrs	r3, r3, #24
 8005852:	4313      	orrs	r3, r2
 8005854:	4a55      	ldr	r2, [pc, #340]	@ (80059ac <MX_LWIP_Init+0x230>)
 8005856:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005858:	4b52      	ldr	r3, [pc, #328]	@ (80059a4 <MX_LWIP_Init+0x228>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	061a      	lsls	r2, r3, #24
 800585e:	4b51      	ldr	r3, [pc, #324]	@ (80059a4 <MX_LWIP_Init+0x228>)
 8005860:	785b      	ldrb	r3, [r3, #1]
 8005862:	041b      	lsls	r3, r3, #16
 8005864:	431a      	orrs	r2, r3
 8005866:	4b4f      	ldr	r3, [pc, #316]	@ (80059a4 <MX_LWIP_Init+0x228>)
 8005868:	789b      	ldrb	r3, [r3, #2]
 800586a:	021b      	lsls	r3, r3, #8
 800586c:	4313      	orrs	r3, r2
 800586e:	4a4d      	ldr	r2, [pc, #308]	@ (80059a4 <MX_LWIP_Init+0x228>)
 8005870:	78d2      	ldrb	r2, [r2, #3]
 8005872:	4313      	orrs	r3, r2
 8005874:	061a      	lsls	r2, r3, #24
 8005876:	4b4b      	ldr	r3, [pc, #300]	@ (80059a4 <MX_LWIP_Init+0x228>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	0619      	lsls	r1, r3, #24
 800587c:	4b49      	ldr	r3, [pc, #292]	@ (80059a4 <MX_LWIP_Init+0x228>)
 800587e:	785b      	ldrb	r3, [r3, #1]
 8005880:	041b      	lsls	r3, r3, #16
 8005882:	4319      	orrs	r1, r3
 8005884:	4b47      	ldr	r3, [pc, #284]	@ (80059a4 <MX_LWIP_Init+0x228>)
 8005886:	789b      	ldrb	r3, [r3, #2]
 8005888:	021b      	lsls	r3, r3, #8
 800588a:	430b      	orrs	r3, r1
 800588c:	4945      	ldr	r1, [pc, #276]	@ (80059a4 <MX_LWIP_Init+0x228>)
 800588e:	78c9      	ldrb	r1, [r1, #3]
 8005890:	430b      	orrs	r3, r1
 8005892:	021b      	lsls	r3, r3, #8
 8005894:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005898:	431a      	orrs	r2, r3
 800589a:	4b42      	ldr	r3, [pc, #264]	@ (80059a4 <MX_LWIP_Init+0x228>)
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	0619      	lsls	r1, r3, #24
 80058a0:	4b40      	ldr	r3, [pc, #256]	@ (80059a4 <MX_LWIP_Init+0x228>)
 80058a2:	785b      	ldrb	r3, [r3, #1]
 80058a4:	041b      	lsls	r3, r3, #16
 80058a6:	4319      	orrs	r1, r3
 80058a8:	4b3e      	ldr	r3, [pc, #248]	@ (80059a4 <MX_LWIP_Init+0x228>)
 80058aa:	789b      	ldrb	r3, [r3, #2]
 80058ac:	021b      	lsls	r3, r3, #8
 80058ae:	430b      	orrs	r3, r1
 80058b0:	493c      	ldr	r1, [pc, #240]	@ (80059a4 <MX_LWIP_Init+0x228>)
 80058b2:	78c9      	ldrb	r1, [r1, #3]
 80058b4:	430b      	orrs	r3, r1
 80058b6:	0a1b      	lsrs	r3, r3, #8
 80058b8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80058bc:	431a      	orrs	r2, r3
 80058be:	4b39      	ldr	r3, [pc, #228]	@ (80059a4 <MX_LWIP_Init+0x228>)
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	0619      	lsls	r1, r3, #24
 80058c4:	4b37      	ldr	r3, [pc, #220]	@ (80059a4 <MX_LWIP_Init+0x228>)
 80058c6:	785b      	ldrb	r3, [r3, #1]
 80058c8:	041b      	lsls	r3, r3, #16
 80058ca:	4319      	orrs	r1, r3
 80058cc:	4b35      	ldr	r3, [pc, #212]	@ (80059a4 <MX_LWIP_Init+0x228>)
 80058ce:	789b      	ldrb	r3, [r3, #2]
 80058d0:	021b      	lsls	r3, r3, #8
 80058d2:	430b      	orrs	r3, r1
 80058d4:	4933      	ldr	r1, [pc, #204]	@ (80059a4 <MX_LWIP_Init+0x228>)
 80058d6:	78c9      	ldrb	r1, [r1, #3]
 80058d8:	430b      	orrs	r3, r1
 80058da:	0e1b      	lsrs	r3, r3, #24
 80058dc:	4313      	orrs	r3, r2
 80058de:	4a34      	ldr	r2, [pc, #208]	@ (80059b0 <MX_LWIP_Init+0x234>)
 80058e0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80058e2:	4b31      	ldr	r3, [pc, #196]	@ (80059a8 <MX_LWIP_Init+0x22c>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	061a      	lsls	r2, r3, #24
 80058e8:	4b2f      	ldr	r3, [pc, #188]	@ (80059a8 <MX_LWIP_Init+0x22c>)
 80058ea:	785b      	ldrb	r3, [r3, #1]
 80058ec:	041b      	lsls	r3, r3, #16
 80058ee:	431a      	orrs	r2, r3
 80058f0:	4b2d      	ldr	r3, [pc, #180]	@ (80059a8 <MX_LWIP_Init+0x22c>)
 80058f2:	789b      	ldrb	r3, [r3, #2]
 80058f4:	021b      	lsls	r3, r3, #8
 80058f6:	4313      	orrs	r3, r2
 80058f8:	4a2b      	ldr	r2, [pc, #172]	@ (80059a8 <MX_LWIP_Init+0x22c>)
 80058fa:	78d2      	ldrb	r2, [r2, #3]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	061a      	lsls	r2, r3, #24
 8005900:	4b29      	ldr	r3, [pc, #164]	@ (80059a8 <MX_LWIP_Init+0x22c>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	0619      	lsls	r1, r3, #24
 8005906:	4b28      	ldr	r3, [pc, #160]	@ (80059a8 <MX_LWIP_Init+0x22c>)
 8005908:	785b      	ldrb	r3, [r3, #1]
 800590a:	041b      	lsls	r3, r3, #16
 800590c:	4319      	orrs	r1, r3
 800590e:	4b26      	ldr	r3, [pc, #152]	@ (80059a8 <MX_LWIP_Init+0x22c>)
 8005910:	789b      	ldrb	r3, [r3, #2]
 8005912:	021b      	lsls	r3, r3, #8
 8005914:	430b      	orrs	r3, r1
 8005916:	4924      	ldr	r1, [pc, #144]	@ (80059a8 <MX_LWIP_Init+0x22c>)
 8005918:	78c9      	ldrb	r1, [r1, #3]
 800591a:	430b      	orrs	r3, r1
 800591c:	021b      	lsls	r3, r3, #8
 800591e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005922:	431a      	orrs	r2, r3
 8005924:	4b20      	ldr	r3, [pc, #128]	@ (80059a8 <MX_LWIP_Init+0x22c>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	0619      	lsls	r1, r3, #24
 800592a:	4b1f      	ldr	r3, [pc, #124]	@ (80059a8 <MX_LWIP_Init+0x22c>)
 800592c:	785b      	ldrb	r3, [r3, #1]
 800592e:	041b      	lsls	r3, r3, #16
 8005930:	4319      	orrs	r1, r3
 8005932:	4b1d      	ldr	r3, [pc, #116]	@ (80059a8 <MX_LWIP_Init+0x22c>)
 8005934:	789b      	ldrb	r3, [r3, #2]
 8005936:	021b      	lsls	r3, r3, #8
 8005938:	430b      	orrs	r3, r1
 800593a:	491b      	ldr	r1, [pc, #108]	@ (80059a8 <MX_LWIP_Init+0x22c>)
 800593c:	78c9      	ldrb	r1, [r1, #3]
 800593e:	430b      	orrs	r3, r1
 8005940:	0a1b      	lsrs	r3, r3, #8
 8005942:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005946:	431a      	orrs	r2, r3
 8005948:	4b17      	ldr	r3, [pc, #92]	@ (80059a8 <MX_LWIP_Init+0x22c>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	0619      	lsls	r1, r3, #24
 800594e:	4b16      	ldr	r3, [pc, #88]	@ (80059a8 <MX_LWIP_Init+0x22c>)
 8005950:	785b      	ldrb	r3, [r3, #1]
 8005952:	041b      	lsls	r3, r3, #16
 8005954:	4319      	orrs	r1, r3
 8005956:	4b14      	ldr	r3, [pc, #80]	@ (80059a8 <MX_LWIP_Init+0x22c>)
 8005958:	789b      	ldrb	r3, [r3, #2]
 800595a:	021b      	lsls	r3, r3, #8
 800595c:	430b      	orrs	r3, r1
 800595e:	4912      	ldr	r1, [pc, #72]	@ (80059a8 <MX_LWIP_Init+0x22c>)
 8005960:	78c9      	ldrb	r1, [r1, #3]
 8005962:	430b      	orrs	r3, r1
 8005964:	0e1b      	lsrs	r3, r3, #24
 8005966:	4313      	orrs	r3, r2
 8005968:	4a12      	ldr	r2, [pc, #72]	@ (80059b4 <MX_LWIP_Init+0x238>)
 800596a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800596c:	4b12      	ldr	r3, [pc, #72]	@ (80059b8 <MX_LWIP_Init+0x23c>)
 800596e:	9302      	str	r3, [sp, #8]
 8005970:	4b12      	ldr	r3, [pc, #72]	@ (80059bc <MX_LWIP_Init+0x240>)
 8005972:	9301      	str	r3, [sp, #4]
 8005974:	2300      	movs	r3, #0
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	4b0e      	ldr	r3, [pc, #56]	@ (80059b4 <MX_LWIP_Init+0x238>)
 800597a:	4a0d      	ldr	r2, [pc, #52]	@ (80059b0 <MX_LWIP_Init+0x234>)
 800597c:	490b      	ldr	r1, [pc, #44]	@ (80059ac <MX_LWIP_Init+0x230>)
 800597e:	4810      	ldr	r0, [pc, #64]	@ (80059c0 <MX_LWIP_Init+0x244>)
 8005980:	f001 f912 	bl	8006ba8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005984:	480e      	ldr	r0, [pc, #56]	@ (80059c0 <MX_LWIP_Init+0x244>)
 8005986:	f001 fac1 	bl	8006f0c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800598a:	480d      	ldr	r0, [pc, #52]	@ (80059c0 <MX_LWIP_Init+0x244>)
 800598c:	f001 face 	bl	8006f2c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005990:	490c      	ldr	r1, [pc, #48]	@ (80059c4 <MX_LWIP_Init+0x248>)
 8005992:	480b      	ldr	r0, [pc, #44]	@ (80059c0 <MX_LWIP_Init+0x244>)
 8005994:	f001 fbcc 	bl	8007130 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005998:	bf00      	nop
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	200002e0 	.word	0x200002e0
 80059a4:	200002e4 	.word	0x200002e4
 80059a8:	200002e8 	.word	0x200002e8
 80059ac:	200002d4 	.word	0x200002d4
 80059b0:	200002d8 	.word	0x200002d8
 80059b4:	200002dc 	.word	0x200002dc
 80059b8:	0801068d 	.word	0x0801068d
 80059bc:	08005ce5 	.word	0x08005ce5
 80059c0:	200002a0 	.word	0x200002a0
 80059c4:	08005a19 	.word	0x08005a19

080059c8 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 80059d0:	f7fb fe3e 	bl	8001650 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	4b08      	ldr	r3, [pc, #32]	@ (80059f8 <Ethernet_Link_Periodic_Handle+0x30>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	2b63      	cmp	r3, #99	@ 0x63
 80059de:	d907      	bls.n	80059f0 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 80059e0:	f7fb fe36 	bl	8001650 <HAL_GetTick>
 80059e4:	4603      	mov	r3, r0
 80059e6:	4a04      	ldr	r2, [pc, #16]	@ (80059f8 <Ethernet_Link_Periodic_Handle+0x30>)
 80059e8:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 fac6 	bl	8005f7c <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 80059f0:	bf00      	nop
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	2000029c 	.word	0x2000029c

080059fc <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005a00:	4804      	ldr	r0, [pc, #16]	@ (8005a14 <MX_LWIP_Process+0x18>)
 8005a02:	f000 f94f 	bl	8005ca4 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8005a06:	f008 fa55 	bl	800deb4 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8005a0a:	4802      	ldr	r0, [pc, #8]	@ (8005a14 <MX_LWIP_Process+0x18>)
 8005a0c:	f7ff ffdc 	bl	80059c8 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8005a10:	bf00      	nop
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	200002a0 	.word	0x200002a0

08005a18 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005a34:	2300      	movs	r3, #0
 8005a36:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005a38:	4b44      	ldr	r3, [pc, #272]	@ (8005b4c <low_level_init+0x120>)
 8005a3a:	4a45      	ldr	r2, [pc, #276]	@ (8005b50 <low_level_init+0x124>)
 8005a3c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005a42:	2380      	movs	r3, #128	@ 0x80
 8005a44:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005a46:	23e1      	movs	r3, #225	@ 0xe1
 8005a48:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005a52:	2300      	movs	r3, #0
 8005a54:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005a56:	4a3d      	ldr	r2, [pc, #244]	@ (8005b4c <low_level_init+0x120>)
 8005a58:	f107 0308 	add.w	r3, r7, #8
 8005a5c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005a5e:	4b3b      	ldr	r3, [pc, #236]	@ (8005b4c <low_level_init+0x120>)
 8005a60:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005a64:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005a66:	4b39      	ldr	r3, [pc, #228]	@ (8005b4c <low_level_init+0x120>)
 8005a68:	4a3a      	ldr	r2, [pc, #232]	@ (8005b54 <low_level_init+0x128>)
 8005a6a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005a6c:	4b37      	ldr	r3, [pc, #220]	@ (8005b4c <low_level_init+0x120>)
 8005a6e:	4a3a      	ldr	r2, [pc, #232]	@ (8005b58 <low_level_init+0x12c>)
 8005a70:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005a72:	4b36      	ldr	r3, [pc, #216]	@ (8005b4c <low_level_init+0x120>)
 8005a74:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005a78:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005a7a:	4834      	ldr	r0, [pc, #208]	@ (8005b4c <low_level_init+0x120>)
 8005a7c:	f7fc fba6 	bl	80021cc <HAL_ETH_Init>
 8005a80:	4603      	mov	r3, r0
 8005a82:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005a84:	2238      	movs	r2, #56	@ 0x38
 8005a86:	2100      	movs	r1, #0
 8005a88:	4834      	ldr	r0, [pc, #208]	@ (8005b5c <low_level_init+0x130>)
 8005a8a:	f00c fc22 	bl	80122d2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005a8e:	4b33      	ldr	r3, [pc, #204]	@ (8005b5c <low_level_init+0x130>)
 8005a90:	2221      	movs	r2, #33	@ 0x21
 8005a92:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005a94:	4b31      	ldr	r3, [pc, #196]	@ (8005b5c <low_level_init+0x130>)
 8005a96:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8005a9a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005a9c:	4b2f      	ldr	r3, [pc, #188]	@ (8005b5c <low_level_init+0x130>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005aa2:	482f      	ldr	r0, [pc, #188]	@ (8005b60 <low_level_init+0x134>)
 8005aa4:	f000 ff48 	bl	8006938 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2206      	movs	r2, #6
 8005aac:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005ab0:	4b26      	ldr	r3, [pc, #152]	@ (8005b4c <low_level_init+0x120>)
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	781a      	ldrb	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005abc:	4b23      	ldr	r3, [pc, #140]	@ (8005b4c <low_level_init+0x120>)
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	785a      	ldrb	r2, [r3, #1]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005ac8:	4b20      	ldr	r3, [pc, #128]	@ (8005b4c <low_level_init+0x120>)
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	789a      	ldrb	r2, [r3, #2]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8005b4c <low_level_init+0x120>)
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	78da      	ldrb	r2, [r3, #3]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8005b4c <low_level_init+0x120>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	791a      	ldrb	r2, [r3, #4]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005aec:	4b17      	ldr	r3, [pc, #92]	@ (8005b4c <low_level_init+0x120>)
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	795a      	ldrb	r2, [r3, #5]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005afe:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005b06:	f043 030a 	orr.w	r3, r3, #10
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005b12:	4914      	ldr	r1, [pc, #80]	@ (8005b64 <low_level_init+0x138>)
 8005b14:	4814      	ldr	r0, [pc, #80]	@ (8005b68 <low_level_init+0x13c>)
 8005b16:	f7fb fc2e 	bl	8001376 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8005b1a:	4813      	ldr	r0, [pc, #76]	@ (8005b68 <low_level_init+0x13c>)
 8005b1c:	f7fb fc5d 	bl	80013da <LAN8742_Init>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d006      	beq.n	8005b34 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f001 fad2 	bl	80070d0 <netif_set_link_down>
    netif_set_down(netif);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f001 fa69 	bl	8007004 <netif_set_down>
 8005b32:	e008      	b.n	8005b46 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8005b34:	7bfb      	ldrb	r3, [r7, #15]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d103      	bne.n	8005b42 <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 fa1e 	bl	8005f7c <ethernet_link_check_state>
 8005b40:	e001      	b.n	8005b46 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 8005b42:	f7fb f837 	bl	8000bb4 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	20004db8 	.word	0x20004db8
 8005b50:	40028000 	.word	0x40028000
 8005b54:	20004d18 	.word	0x20004d18
 8005b58:	20004c78 	.word	0x20004c78
 8005b5c:	20004e68 	.word	0x20004e68
 8005b60:	08015f38 	.word	0x08015f38
 8005b64:	2000000c 	.word	0x2000000c
 8005b68:	20004ea0 	.word	0x20004ea0

08005b6c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b092      	sub	sp, #72	@ 0x48
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005b84:	f107 030c 	add.w	r3, r7, #12
 8005b88:	2230      	movs	r2, #48	@ 0x30
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f00c fba0 	bl	80122d2 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005b92:	f107 030c 	add.w	r3, r7, #12
 8005b96:	2230      	movs	r2, #48	@ 0x30
 8005b98:	2100      	movs	r1, #0
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f00c fb99 	bl	80122d2 <memset>

  for(q = p; q != NULL; q = q->next)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ba4:	e045      	b.n	8005c32 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005ba6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ba8:	2b03      	cmp	r3, #3
 8005baa:	d902      	bls.n	8005bb2 <low_level_output+0x46>
      return ERR_IF;
 8005bac:	f06f 030b 	mvn.w	r3, #11
 8005bb0:	e055      	b.n	8005c5e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8005bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bb4:	6859      	ldr	r1, [r3, #4]
 8005bb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bb8:	4613      	mov	r3, r2
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	4413      	add	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	3348      	adds	r3, #72	@ 0x48
 8005bc2:	443b      	add	r3, r7
 8005bc4:	3b3c      	subs	r3, #60	@ 0x3c
 8005bc6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005bc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bca:	895b      	ldrh	r3, [r3, #10]
 8005bcc:	4619      	mov	r1, r3
 8005bce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	005b      	lsls	r3, r3, #1
 8005bd4:	4413      	add	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	3348      	adds	r3, #72	@ 0x48
 8005bda:	443b      	add	r3, r7
 8005bdc:	3b38      	subs	r3, #56	@ 0x38
 8005bde:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005be0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d011      	beq.n	8005c0a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005be6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005be8:	1e5a      	subs	r2, r3, #1
 8005bea:	f107 000c 	add.w	r0, r7, #12
 8005bee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	440b      	add	r3, r1
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	18c1      	adds	r1, r0, r3
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	4413      	add	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	3348      	adds	r3, #72	@ 0x48
 8005c04:	443b      	add	r3, r7
 8005c06:	3b34      	subs	r3, #52	@ 0x34
 8005c08:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005c0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d109      	bne.n	8005c26 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005c12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c14:	4613      	mov	r3, r2
 8005c16:	005b      	lsls	r3, r3, #1
 8005c18:	4413      	add	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	3348      	adds	r3, #72	@ 0x48
 8005c1e:	443b      	add	r3, r7
 8005c20:	3b34      	subs	r3, #52	@ 0x34
 8005c22:	2200      	movs	r2, #0
 8005c24:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005c26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c28:	3301      	adds	r3, #1
 8005c2a:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8005c2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1b6      	bne.n	8005ba6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	891b      	ldrh	r3, [r3, #8]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8005c68 <low_level_output+0xfc>)
 8005c40:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005c42:	4a09      	ldr	r2, [pc, #36]	@ (8005c68 <low_level_output+0xfc>)
 8005c44:	f107 030c 	add.w	r3, r7, #12
 8005c48:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005c4a:	4a07      	ldr	r2, [pc, #28]	@ (8005c68 <low_level_output+0xfc>)
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8005c50:	2214      	movs	r2, #20
 8005c52:	4905      	ldr	r1, [pc, #20]	@ (8005c68 <low_level_output+0xfc>)
 8005c54:	4805      	ldr	r0, [pc, #20]	@ (8005c6c <low_level_output+0x100>)
 8005c56:	f7fc fc44 	bl	80024e2 <HAL_ETH_Transmit>

  return errval;
 8005c5a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3748      	adds	r7, #72	@ 0x48
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	20004e68 	.word	0x20004e68
 8005c6c:	20004db8 	.word	0x20004db8

08005c70 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005c7c:	4b07      	ldr	r3, [pc, #28]	@ (8005c9c <low_level_input+0x2c>)
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d105      	bne.n	8005c90 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005c84:	f107 030c 	add.w	r3, r7, #12
 8005c88:	4619      	mov	r1, r3
 8005c8a:	4805      	ldr	r0, [pc, #20]	@ (8005ca0 <low_level_input+0x30>)
 8005c8c:	f7fc fcbd 	bl	800260a <HAL_ETH_ReadData>
  }

  return p;
 8005c90:	68fb      	ldr	r3, [r7, #12]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20004c74 	.word	0x20004c74
 8005ca0:	20004db8 	.word	0x20004db8

08005ca4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005cac:	2300      	movs	r3, #0
 8005cae:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f7ff ffdd 	bl	8005c70 <low_level_input>
 8005cb6:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00a      	beq.n	8005cd4 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	6879      	ldr	r1, [r7, #4]
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	4798      	blx	r3
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d002      	beq.n	8005cd4 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f001 fdae 	bl	8007830 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1ea      	bne.n	8005cb0 <ethernetif_input+0xc>
}
 8005cda:	bf00      	nop
 8005cdc:	bf00      	nop
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d106      	bne.n	8005d00 <ethernetif_init+0x1c>
 8005cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8005d2c <ethernetif_init+0x48>)
 8005cf4:	f240 126f 	movw	r2, #367	@ 0x16f
 8005cf8:	490d      	ldr	r1, [pc, #52]	@ (8005d30 <ethernetif_init+0x4c>)
 8005cfa:	480e      	ldr	r0, [pc, #56]	@ (8005d34 <ethernetif_init+0x50>)
 8005cfc:	f00c fa34 	bl	8012168 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2273      	movs	r2, #115	@ 0x73
 8005d04:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2274      	movs	r2, #116	@ 0x74
 8005d0c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a09      	ldr	r2, [pc, #36]	@ (8005d38 <ethernetif_init+0x54>)
 8005d14:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a08      	ldr	r2, [pc, #32]	@ (8005d3c <ethernetif_init+0x58>)
 8005d1a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7ff fe85 	bl	8005a2c <low_level_init>

  return ERR_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	080133ec 	.word	0x080133ec
 8005d30:	08013408 	.word	0x08013408
 8005d34:	08013418 	.word	0x08013418
 8005d38:	0800eb45 	.word	0x0800eb45
 8005d3c:	08005b6d 	.word	0x08005b6d

08005d40 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005d4c:	68f9      	ldr	r1, [r7, #12]
 8005d4e:	4807      	ldr	r0, [pc, #28]	@ (8005d6c <pbuf_free_custom+0x2c>)
 8005d50:	f000 fed4 	bl	8006afc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005d54:	4b06      	ldr	r3, [pc, #24]	@ (8005d70 <pbuf_free_custom+0x30>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d102      	bne.n	8005d62 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005d5c:	4b04      	ldr	r3, [pc, #16]	@ (8005d70 <pbuf_free_custom+0x30>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	701a      	strb	r2, [r3, #0]
  }
}
 8005d62:	bf00      	nop
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	08015f38 	.word	0x08015f38
 8005d70:	20004c74 	.word	0x20004c74

08005d74 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005d78:	f7fb fc6a 	bl	8001650 <HAL_GetTick>
 8005d7c:	4603      	mov	r3, r0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	bd80      	pop	{r7, pc}
	...

08005d84 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08e      	sub	sp, #56	@ 0x38
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d90:	2200      	movs	r2, #0
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	605a      	str	r2, [r3, #4]
 8005d96:	609a      	str	r2, [r3, #8]
 8005d98:	60da      	str	r2, [r3, #12]
 8005d9a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a4a      	ldr	r2, [pc, #296]	@ (8005ecc <HAL_ETH_MspInit+0x148>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	f040 808d 	bne.w	8005ec2 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005da8:	2300      	movs	r3, #0
 8005daa:	623b      	str	r3, [r7, #32]
 8005dac:	4b48      	ldr	r3, [pc, #288]	@ (8005ed0 <HAL_ETH_MspInit+0x14c>)
 8005dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db0:	4a47      	ldr	r2, [pc, #284]	@ (8005ed0 <HAL_ETH_MspInit+0x14c>)
 8005db2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005db6:	6313      	str	r3, [r2, #48]	@ 0x30
 8005db8:	4b45      	ldr	r3, [pc, #276]	@ (8005ed0 <HAL_ETH_MspInit+0x14c>)
 8005dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dc0:	623b      	str	r3, [r7, #32]
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	61fb      	str	r3, [r7, #28]
 8005dc8:	4b41      	ldr	r3, [pc, #260]	@ (8005ed0 <HAL_ETH_MspInit+0x14c>)
 8005dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dcc:	4a40      	ldr	r2, [pc, #256]	@ (8005ed0 <HAL_ETH_MspInit+0x14c>)
 8005dce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005dd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8005dd4:	4b3e      	ldr	r3, [pc, #248]	@ (8005ed0 <HAL_ETH_MspInit+0x14c>)
 8005dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005ddc:	61fb      	str	r3, [r7, #28]
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	2300      	movs	r3, #0
 8005de2:	61bb      	str	r3, [r7, #24]
 8005de4:	4b3a      	ldr	r3, [pc, #232]	@ (8005ed0 <HAL_ETH_MspInit+0x14c>)
 8005de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de8:	4a39      	ldr	r2, [pc, #228]	@ (8005ed0 <HAL_ETH_MspInit+0x14c>)
 8005dea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005dee:	6313      	str	r3, [r2, #48]	@ 0x30
 8005df0:	4b37      	ldr	r3, [pc, #220]	@ (8005ed0 <HAL_ETH_MspInit+0x14c>)
 8005df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005df8:	61bb      	str	r3, [r7, #24]
 8005dfa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	617b      	str	r3, [r7, #20]
 8005e00:	4b33      	ldr	r3, [pc, #204]	@ (8005ed0 <HAL_ETH_MspInit+0x14c>)
 8005e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e04:	4a32      	ldr	r2, [pc, #200]	@ (8005ed0 <HAL_ETH_MspInit+0x14c>)
 8005e06:	f043 0304 	orr.w	r3, r3, #4
 8005e0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e0c:	4b30      	ldr	r3, [pc, #192]	@ (8005ed0 <HAL_ETH_MspInit+0x14c>)
 8005e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	617b      	str	r3, [r7, #20]
 8005e16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e18:	2300      	movs	r3, #0
 8005e1a:	613b      	str	r3, [r7, #16]
 8005e1c:	4b2c      	ldr	r3, [pc, #176]	@ (8005ed0 <HAL_ETH_MspInit+0x14c>)
 8005e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e20:	4a2b      	ldr	r2, [pc, #172]	@ (8005ed0 <HAL_ETH_MspInit+0x14c>)
 8005e22:	f043 0301 	orr.w	r3, r3, #1
 8005e26:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e28:	4b29      	ldr	r3, [pc, #164]	@ (8005ed0 <HAL_ETH_MspInit+0x14c>)
 8005e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	613b      	str	r3, [r7, #16]
 8005e32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e34:	2300      	movs	r3, #0
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	4b25      	ldr	r3, [pc, #148]	@ (8005ed0 <HAL_ETH_MspInit+0x14c>)
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e3c:	4a24      	ldr	r2, [pc, #144]	@ (8005ed0 <HAL_ETH_MspInit+0x14c>)
 8005e3e:	f043 0302 	orr.w	r3, r3, #2
 8005e42:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e44:	4b22      	ldr	r3, [pc, #136]	@ (8005ed0 <HAL_ETH_MspInit+0x14c>)
 8005e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e48:	f003 0302 	and.w	r3, r3, #2
 8005e4c:	60fb      	str	r3, [r7, #12]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005e50:	2332      	movs	r3, #50	@ 0x32
 8005e52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e54:	2302      	movs	r3, #2
 8005e56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005e60:	230b      	movs	r3, #11
 8005e62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e68:	4619      	mov	r1, r3
 8005e6a:	481a      	ldr	r0, [pc, #104]	@ (8005ed4 <HAL_ETH_MspInit+0x150>)
 8005e6c:	f7fd fbfe 	bl	800366c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005e70:	2386      	movs	r3, #134	@ 0x86
 8005e72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e74:	2302      	movs	r3, #2
 8005e76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005e80:	230b      	movs	r3, #11
 8005e82:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e88:	4619      	mov	r1, r3
 8005e8a:	4813      	ldr	r0, [pc, #76]	@ (8005ed8 <HAL_ETH_MspInit+0x154>)
 8005e8c:	f7fd fbee 	bl	800366c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8005e90:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8005e94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e96:	2302      	movs	r3, #2
 8005e98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005ea2:	230b      	movs	r3, #11
 8005ea4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ea6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005eaa:	4619      	mov	r1, r3
 8005eac:	480b      	ldr	r0, [pc, #44]	@ (8005edc <HAL_ETH_MspInit+0x158>)
 8005eae:	f7fd fbdd 	bl	800366c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	203d      	movs	r0, #61	@ 0x3d
 8005eb8:	f7fc f951 	bl	800215e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005ebc:	203d      	movs	r0, #61	@ 0x3d
 8005ebe:	f7fc f96a 	bl	8002196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005ec2:	bf00      	nop
 8005ec4:	3738      	adds	r7, #56	@ 0x38
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	40028000 	.word	0x40028000
 8005ed0:	40023800 	.word	0x40023800
 8005ed4:	40020800 	.word	0x40020800
 8005ed8:	40020000 	.word	0x40020000
 8005edc:	40020400 	.word	0x40020400

08005ee0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005ee4:	4802      	ldr	r0, [pc, #8]	@ (8005ef0 <ETH_PHY_IO_Init+0x10>)
 8005ee6:	f7fc ff5d 	bl	8002da4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	20004db8 	.word	0x20004db8

08005ef4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	af00      	add	r7, sp, #0
  return 0;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	68f9      	ldr	r1, [r7, #12]
 8005f16:	4807      	ldr	r0, [pc, #28]	@ (8005f34 <ETH_PHY_IO_ReadReg+0x30>)
 8005f18:	f7fc fd9e 	bl	8002a58 <HAL_ETH_ReadPHYRegister>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005f22:	f04f 33ff 	mov.w	r3, #4294967295
 8005f26:	e000      	b.n	8005f2a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	20004db8 	.word	0x20004db8

08005f38 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	68f9      	ldr	r1, [r7, #12]
 8005f4a:	4807      	ldr	r0, [pc, #28]	@ (8005f68 <ETH_PHY_IO_WriteReg+0x30>)
 8005f4c:	f7fc fdcf 	bl	8002aee <HAL_ETH_WritePHYRegister>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d002      	beq.n	8005f5c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005f56:	f04f 33ff 	mov.w	r3, #4294967295
 8005f5a:	e000      	b.n	8005f5e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	20004db8 	.word	0x20004db8

08005f6c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005f70:	f7fb fb6e 	bl	8001650 <HAL_GetTick>
 8005f74:	4603      	mov	r3, r0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	bd80      	pop	{r7, pc}
	...

08005f7c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b0a0      	sub	sp, #128	@ 0x80
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005f84:	f107 030c 	add.w	r3, r7, #12
 8005f88:	2264      	movs	r2, #100	@ 0x64
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f00c f9a0 	bl	80122d2 <memset>
  int32_t PHYLinkState = 0;
 8005f92:	2300      	movs	r3, #0
 8005f94:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005fa2:	483a      	ldr	r0, [pc, #232]	@ (800608c <ethernet_link_check_state+0x110>)
 8005fa4:	f7fb fa66 	bl	8001474 <LAN8742_GetLinkState>
 8005fa8:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005fb0:	089b      	lsrs	r3, r3, #2
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00c      	beq.n	8005fd6 <ethernet_link_check_state+0x5a>
 8005fbc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	dc09      	bgt.n	8005fd6 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 8005fc2:	4833      	ldr	r0, [pc, #204]	@ (8006090 <ethernet_link_check_state+0x114>)
 8005fc4:	f7fc fa0e 	bl	80023e4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f001 f81b 	bl	8007004 <netif_set_down>
    netif_set_link_down(netif);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f001 f87e 	bl	80070d0 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8005fd4:	e055      	b.n	8006082 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005fdc:	f003 0304 	and.w	r3, r3, #4
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d14e      	bne.n	8006082 <ethernet_link_check_state+0x106>
 8005fe4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	dd4b      	ble.n	8006082 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8005fea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005fec:	3b02      	subs	r3, #2
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	d82a      	bhi.n	8006048 <ethernet_link_check_state+0xcc>
 8005ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff8 <ethernet_link_check_state+0x7c>)
 8005ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff8:	08006009 	.word	0x08006009
 8005ffc:	0800601b 	.word	0x0800601b
 8006000:	0800602b 	.word	0x0800602b
 8006004:	0800603b 	.word	0x0800603b
      duplex = ETH_FULLDUPLEX_MODE;
 8006008:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800600c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800600e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006012:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006014:	2301      	movs	r3, #1
 8006016:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006018:	e017      	b.n	800604a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800601a:	2300      	movs	r3, #0
 800601c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800601e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006022:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006024:	2301      	movs	r3, #1
 8006026:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006028:	e00f      	b.n	800604a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800602a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800602e:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006030:	2300      	movs	r3, #0
 8006032:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006034:	2301      	movs	r3, #1
 8006036:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006038:	e007      	b.n	800604a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800603a:	2300      	movs	r3, #0
 800603c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800603e:	2300      	movs	r3, #0
 8006040:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006042:	2301      	movs	r3, #1
 8006044:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006046:	e000      	b.n	800604a <ethernet_link_check_state+0xce>
      break;
 8006048:	bf00      	nop
    if(linkchanged)
 800604a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800604c:	2b00      	cmp	r3, #0
 800604e:	d018      	beq.n	8006082 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006050:	f107 030c 	add.w	r3, r7, #12
 8006054:	4619      	mov	r1, r3
 8006056:	480e      	ldr	r0, [pc, #56]	@ (8006090 <ethernet_link_check_state+0x114>)
 8006058:	f7fc fd92 	bl	8002b80 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800605c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800605e:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8006060:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006062:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006064:	f107 030c 	add.w	r3, r7, #12
 8006068:	4619      	mov	r1, r3
 800606a:	4809      	ldr	r0, [pc, #36]	@ (8006090 <ethernet_link_check_state+0x114>)
 800606c:	f7fc fe7f 	bl	8002d6e <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8006070:	4807      	ldr	r0, [pc, #28]	@ (8006090 <ethernet_link_check_state+0x114>)
 8006072:	f7fc f947 	bl	8002304 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 ff58 	bl	8006f2c <netif_set_up>
      netif_set_link_up(netif);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 fff3 	bl	8007068 <netif_set_link_up>
}
 8006082:	bf00      	nop
 8006084:	3780      	adds	r7, #128	@ 0x80
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	20004ea0 	.word	0x20004ea0
 8006090:	20004db8 	.word	0x20004db8

08006094 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af02      	add	r7, sp, #8
 800609a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800609c:	4812      	ldr	r0, [pc, #72]	@ (80060e8 <HAL_ETH_RxAllocateCallback+0x54>)
 800609e:	f000 fcbf 	bl	8006a20 <memp_malloc_pool>
 80060a2:	60f8      	str	r0, [r7, #12]
  if (p)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d014      	beq.n	80060d4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f103 0220 	add.w	r2, r3, #32
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4a0d      	ldr	r2, [pc, #52]	@ (80060ec <HAL_ETH_RxAllocateCallback+0x58>)
 80060b8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80060c2:	9201      	str	r2, [sp, #4]
 80060c4:	9300      	str	r3, [sp, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2241      	movs	r2, #65	@ 0x41
 80060ca:	2100      	movs	r1, #0
 80060cc:	2000      	movs	r0, #0
 80060ce:	f001 f9f5 	bl	80074bc <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80060d2:	e005      	b.n	80060e0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80060d4:	4b06      	ldr	r3, [pc, #24]	@ (80060f0 <HAL_ETH_RxAllocateCallback+0x5c>)
 80060d6:	2201      	movs	r2, #1
 80060d8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	601a      	str	r2, [r3, #0]
}
 80060e0:	bf00      	nop
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	08015f38 	.word	0x08015f38
 80060ec:	08005d41 	.word	0x08005d41
 80060f0:	20004c74 	.word	0x20004c74

080060f4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b089      	sub	sp, #36	@ 0x24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
 8006100:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800610a:	2300      	movs	r3, #0
 800610c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	3b20      	subs	r3, #32
 8006112:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	2200      	movs	r2, #0
 8006118:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	2200      	movs	r2, #0
 800611e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	887a      	ldrh	r2, [r7, #2]
 8006124:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d103      	bne.n	8006136 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	69fa      	ldr	r2, [r7, #28]
 8006132:	601a      	str	r2, [r3, #0]
 8006134:	e003      	b.n	800613e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	69fa      	ldr	r2, [r7, #28]
 800613c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	69fa      	ldr	r2, [r7, #28]
 8006142:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	61fb      	str	r3, [r7, #28]
 800614a:	e009      	b.n	8006160 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	891a      	ldrh	r2, [r3, #8]
 8006150:	887b      	ldrh	r3, [r7, #2]
 8006152:	4413      	add	r3, r2
 8006154:	b29a      	uxth	r2, r3
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	61fb      	str	r3, [r7, #28]
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1f2      	bne.n	800614c <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006166:	bf00      	nop
 8006168:	bf00      	nop
 800616a:	3724      	adds	r7, #36	@ 0x24
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	4603      	mov	r3, r0
 800617c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800617e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006182:	021b      	lsls	r3, r3, #8
 8006184:	b21a      	sxth	r2, r3
 8006186:	88fb      	ldrh	r3, [r7, #6]
 8006188:	0a1b      	lsrs	r3, r3, #8
 800618a:	b29b      	uxth	r3, r3
 800618c:	b21b      	sxth	r3, r3
 800618e:	4313      	orrs	r3, r2
 8006190:	b21b      	sxth	r3, r3
 8006192:	b29b      	uxth	r3, r3
}
 8006194:	4618      	mov	r0, r3
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	061a      	lsls	r2, r3, #24
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	021b      	lsls	r3, r3, #8
 80061b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80061b4:	431a      	orrs	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	0a1b      	lsrs	r3, r3, #8
 80061ba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80061be:	431a      	orrs	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	0e1b      	lsrs	r3, r3, #24
 80061c4:	4313      	orrs	r3, r2
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b082      	sub	sp, #8
 80061d6:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80061d8:	2300      	movs	r3, #0
 80061da:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80061dc:	f000 f8d4 	bl	8006388 <mem_init>
  memp_init();
 80061e0:	f000 fbda 	bl	8006998 <memp_init>
  pbuf_init();
  netif_init();
 80061e4:	f000 fcd8 	bl	8006b98 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80061e8:	f007 fea6 	bl	800df38 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80061ec:	f001 fdae 	bl	8007d4c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80061f0:	f007 fe18 	bl	800de24 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80061f4:	bf00      	nop
 80061f6:	3708      	adds	r7, #8
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	4603      	mov	r3, r0
 8006204:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8006206:	4b05      	ldr	r3, [pc, #20]	@ (800621c <ptr_to_mem+0x20>)
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	88fb      	ldrh	r3, [r7, #6]
 800620c:	4413      	add	r3, r2
}
 800620e:	4618      	mov	r0, r3
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	2000552c 	.word	0x2000552c

08006220 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8006228:	4b05      	ldr	r3, [pc, #20]	@ (8006240 <mem_to_ptr+0x20>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	b29b      	uxth	r3, r3
}
 8006232:	4618      	mov	r0, r3
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	2000552c 	.word	0x2000552c

08006244 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006244:	b590      	push	{r4, r7, lr}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800624c:	4b45      	ldr	r3, [pc, #276]	@ (8006364 <plug_holes+0x120>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	429a      	cmp	r2, r3
 8006254:	d206      	bcs.n	8006264 <plug_holes+0x20>
 8006256:	4b44      	ldr	r3, [pc, #272]	@ (8006368 <plug_holes+0x124>)
 8006258:	f240 12df 	movw	r2, #479	@ 0x1df
 800625c:	4943      	ldr	r1, [pc, #268]	@ (800636c <plug_holes+0x128>)
 800625e:	4844      	ldr	r0, [pc, #272]	@ (8006370 <plug_holes+0x12c>)
 8006260:	f00b ff82 	bl	8012168 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006264:	4b43      	ldr	r3, [pc, #268]	@ (8006374 <plug_holes+0x130>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	429a      	cmp	r2, r3
 800626c:	d306      	bcc.n	800627c <plug_holes+0x38>
 800626e:	4b3e      	ldr	r3, [pc, #248]	@ (8006368 <plug_holes+0x124>)
 8006270:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8006274:	4940      	ldr	r1, [pc, #256]	@ (8006378 <plug_holes+0x134>)
 8006276:	483e      	ldr	r0, [pc, #248]	@ (8006370 <plug_holes+0x12c>)
 8006278:	f00b ff76 	bl	8012168 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	791b      	ldrb	r3, [r3, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d006      	beq.n	8006292 <plug_holes+0x4e>
 8006284:	4b38      	ldr	r3, [pc, #224]	@ (8006368 <plug_holes+0x124>)
 8006286:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800628a:	493c      	ldr	r1, [pc, #240]	@ (800637c <plug_holes+0x138>)
 800628c:	4838      	ldr	r0, [pc, #224]	@ (8006370 <plug_holes+0x12c>)
 800628e:	f00b ff6b 	bl	8012168 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800629a:	d906      	bls.n	80062aa <plug_holes+0x66>
 800629c:	4b32      	ldr	r3, [pc, #200]	@ (8006368 <plug_holes+0x124>)
 800629e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80062a2:	4937      	ldr	r1, [pc, #220]	@ (8006380 <plug_holes+0x13c>)
 80062a4:	4832      	ldr	r0, [pc, #200]	@ (8006370 <plug_holes+0x12c>)
 80062a6:	f00b ff5f 	bl	8012168 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7ff ffa4 	bl	80061fc <ptr_to_mem>
 80062b4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d024      	beq.n	8006308 <plug_holes+0xc4>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	791b      	ldrb	r3, [r3, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d120      	bne.n	8006308 <plug_holes+0xc4>
 80062c6:	4b2b      	ldr	r3, [pc, #172]	@ (8006374 <plug_holes+0x130>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d01b      	beq.n	8006308 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80062d0:	4b2c      	ldr	r3, [pc, #176]	@ (8006384 <plug_holes+0x140>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d102      	bne.n	80062e0 <plug_holes+0x9c>
      lfree = mem;
 80062da:	4a2a      	ldr	r2, [pc, #168]	@ (8006384 <plug_holes+0x140>)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	881a      	ldrh	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80062f0:	d00a      	beq.n	8006308 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7ff ff80 	bl	80061fc <ptr_to_mem>
 80062fc:	4604      	mov	r4, r0
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7ff ff8e 	bl	8006220 <mem_to_ptr>
 8006304:	4603      	mov	r3, r0
 8006306:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	885b      	ldrh	r3, [r3, #2]
 800630c:	4618      	mov	r0, r3
 800630e:	f7ff ff75 	bl	80061fc <ptr_to_mem>
 8006312:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	429a      	cmp	r2, r3
 800631a:	d01f      	beq.n	800635c <plug_holes+0x118>
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	791b      	ldrb	r3, [r3, #4]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d11b      	bne.n	800635c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006324:	4b17      	ldr	r3, [pc, #92]	@ (8006384 <plug_holes+0x140>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	429a      	cmp	r2, r3
 800632c:	d102      	bne.n	8006334 <plug_holes+0xf0>
      lfree = pmem;
 800632e:	4a15      	ldr	r2, [pc, #84]	@ (8006384 <plug_holes+0x140>)
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	881a      	ldrh	r2, [r3, #0]
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006344:	d00a      	beq.n	800635c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	881b      	ldrh	r3, [r3, #0]
 800634a:	4618      	mov	r0, r3
 800634c:	f7ff ff56 	bl	80061fc <ptr_to_mem>
 8006350:	4604      	mov	r4, r0
 8006352:	68b8      	ldr	r0, [r7, #8]
 8006354:	f7ff ff64 	bl	8006220 <mem_to_ptr>
 8006358:	4603      	mov	r3, r0
 800635a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800635c:	bf00      	nop
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	bd90      	pop	{r4, r7, pc}
 8006364:	2000552c 	.word	0x2000552c
 8006368:	08013440 	.word	0x08013440
 800636c:	08013470 	.word	0x08013470
 8006370:	08013488 	.word	0x08013488
 8006374:	20005530 	.word	0x20005530
 8006378:	080134b0 	.word	0x080134b0
 800637c:	080134cc 	.word	0x080134cc
 8006380:	080134e8 	.word	0x080134e8
 8006384:	20005534 	.word	0x20005534

08006388 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800638e:	4b18      	ldr	r3, [pc, #96]	@ (80063f0 <mem_init+0x68>)
 8006390:	3303      	adds	r3, #3
 8006392:	f023 0303 	bic.w	r3, r3, #3
 8006396:	461a      	mov	r2, r3
 8006398:	4b16      	ldr	r3, [pc, #88]	@ (80063f4 <mem_init+0x6c>)
 800639a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800639c:	4b15      	ldr	r3, [pc, #84]	@ (80063f4 <mem_init+0x6c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80063a8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80063b6:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 80063ba:	f7ff ff1f 	bl	80061fc <ptr_to_mem>
 80063be:	4603      	mov	r3, r0
 80063c0:	4a0d      	ldr	r2, [pc, #52]	@ (80063f8 <mem_init+0x70>)
 80063c2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80063c4:	4b0c      	ldr	r3, [pc, #48]	@ (80063f8 <mem_init+0x70>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2201      	movs	r2, #1
 80063ca:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80063cc:	4b0a      	ldr	r3, [pc, #40]	@ (80063f8 <mem_init+0x70>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80063d4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80063d6:	4b08      	ldr	r3, [pc, #32]	@ (80063f8 <mem_init+0x70>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80063de:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80063e0:	4b04      	ldr	r3, [pc, #16]	@ (80063f4 <mem_init+0x6c>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a05      	ldr	r2, [pc, #20]	@ (80063fc <mem_init+0x74>)
 80063e6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80063e8:	bf00      	nop
 80063ea:	3708      	adds	r7, #8
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	20004ed8 	.word	0x20004ed8
 80063f4:	2000552c 	.word	0x2000552c
 80063f8:	20005530 	.word	0x20005530
 80063fc:	20005534 	.word	0x20005534

08006400 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f7ff ff09 	bl	8006220 <mem_to_ptr>
 800640e:	4603      	mov	r3, r0
 8006410:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	4618      	mov	r0, r3
 8006418:	f7ff fef0 	bl	80061fc <ptr_to_mem>
 800641c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	885b      	ldrh	r3, [r3, #2]
 8006422:	4618      	mov	r0, r3
 8006424:	f7ff feea 	bl	80061fc <ptr_to_mem>
 8006428:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006432:	d818      	bhi.n	8006466 <mem_link_valid+0x66>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	885b      	ldrh	r3, [r3, #2]
 8006438:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800643c:	d813      	bhi.n	8006466 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006442:	8afa      	ldrh	r2, [r7, #22]
 8006444:	429a      	cmp	r2, r3
 8006446:	d004      	beq.n	8006452 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	881b      	ldrh	r3, [r3, #0]
 800644c:	8afa      	ldrh	r2, [r7, #22]
 800644e:	429a      	cmp	r2, r3
 8006450:	d109      	bne.n	8006466 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006452:	4b08      	ldr	r3, [pc, #32]	@ (8006474 <mem_link_valid+0x74>)
 8006454:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	429a      	cmp	r2, r3
 800645a:	d006      	beq.n	800646a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	885b      	ldrh	r3, [r3, #2]
 8006460:	8afa      	ldrh	r2, [r7, #22]
 8006462:	429a      	cmp	r2, r3
 8006464:	d001      	beq.n	800646a <mem_link_valid+0x6a>
    return 0;
 8006466:	2300      	movs	r3, #0
 8006468:	e000      	b.n	800646c <mem_link_valid+0x6c>
  }
  return 1;
 800646a:	2301      	movs	r3, #1
}
 800646c:	4618      	mov	r0, r3
 800646e:	3718      	adds	r7, #24
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	20005530 	.word	0x20005530

08006478 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d04c      	beq.n	8006520 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f003 0303 	and.w	r3, r3, #3
 800648c:	2b00      	cmp	r3, #0
 800648e:	d007      	beq.n	80064a0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8006490:	4b25      	ldr	r3, [pc, #148]	@ (8006528 <mem_free+0xb0>)
 8006492:	f240 2273 	movw	r2, #627	@ 0x273
 8006496:	4925      	ldr	r1, [pc, #148]	@ (800652c <mem_free+0xb4>)
 8006498:	4825      	ldr	r0, [pc, #148]	@ (8006530 <mem_free+0xb8>)
 800649a:	f00b fe65 	bl	8012168 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800649e:	e040      	b.n	8006522 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3b08      	subs	r3, #8
 80064a4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80064a6:	4b23      	ldr	r3, [pc, #140]	@ (8006534 <mem_free+0xbc>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d306      	bcc.n	80064be <mem_free+0x46>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f103 020c 	add.w	r2, r3, #12
 80064b6:	4b20      	ldr	r3, [pc, #128]	@ (8006538 <mem_free+0xc0>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d907      	bls.n	80064ce <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80064be:	4b1a      	ldr	r3, [pc, #104]	@ (8006528 <mem_free+0xb0>)
 80064c0:	f240 227f 	movw	r2, #639	@ 0x27f
 80064c4:	491d      	ldr	r1, [pc, #116]	@ (800653c <mem_free+0xc4>)
 80064c6:	481a      	ldr	r0, [pc, #104]	@ (8006530 <mem_free+0xb8>)
 80064c8:	f00b fe4e 	bl	8012168 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80064cc:	e029      	b.n	8006522 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	791b      	ldrb	r3, [r3, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d107      	bne.n	80064e6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80064d6:	4b14      	ldr	r3, [pc, #80]	@ (8006528 <mem_free+0xb0>)
 80064d8:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80064dc:	4918      	ldr	r1, [pc, #96]	@ (8006540 <mem_free+0xc8>)
 80064de:	4814      	ldr	r0, [pc, #80]	@ (8006530 <mem_free+0xb8>)
 80064e0:	f00b fe42 	bl	8012168 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80064e4:	e01d      	b.n	8006522 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f7ff ff8a 	bl	8006400 <mem_link_valid>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d107      	bne.n	8006502 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80064f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006528 <mem_free+0xb0>)
 80064f4:	f240 2295 	movw	r2, #661	@ 0x295
 80064f8:	4912      	ldr	r1, [pc, #72]	@ (8006544 <mem_free+0xcc>)
 80064fa:	480d      	ldr	r0, [pc, #52]	@ (8006530 <mem_free+0xb8>)
 80064fc:	f00b fe34 	bl	8012168 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006500:	e00f      	b.n	8006522 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006508:	4b0f      	ldr	r3, [pc, #60]	@ (8006548 <mem_free+0xd0>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	429a      	cmp	r2, r3
 8006510:	d202      	bcs.n	8006518 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006512:	4a0d      	ldr	r2, [pc, #52]	@ (8006548 <mem_free+0xd0>)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f7ff fe93 	bl	8006244 <plug_holes>
 800651e:	e000      	b.n	8006522 <mem_free+0xaa>
    return;
 8006520:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	08013440 	.word	0x08013440
 800652c:	08013514 	.word	0x08013514
 8006530:	08013488 	.word	0x08013488
 8006534:	2000552c 	.word	0x2000552c
 8006538:	20005530 	.word	0x20005530
 800653c:	08013538 	.word	0x08013538
 8006540:	08013554 	.word	0x08013554
 8006544:	0801357c 	.word	0x0801357c
 8006548:	20005534 	.word	0x20005534

0800654c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b088      	sub	sp, #32
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	460b      	mov	r3, r1
 8006556:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8006558:	887b      	ldrh	r3, [r7, #2]
 800655a:	3303      	adds	r3, #3
 800655c:	b29b      	uxth	r3, r3
 800655e:	f023 0303 	bic.w	r3, r3, #3
 8006562:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8006564:	8bfb      	ldrh	r3, [r7, #30]
 8006566:	2b0b      	cmp	r3, #11
 8006568:	d801      	bhi.n	800656e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800656a:	230c      	movs	r3, #12
 800656c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800656e:	8bfb      	ldrh	r3, [r7, #30]
 8006570:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006574:	d803      	bhi.n	800657e <mem_trim+0x32>
 8006576:	8bfa      	ldrh	r2, [r7, #30]
 8006578:	887b      	ldrh	r3, [r7, #2]
 800657a:	429a      	cmp	r2, r3
 800657c:	d201      	bcs.n	8006582 <mem_trim+0x36>
    return NULL;
 800657e:	2300      	movs	r3, #0
 8006580:	e0cc      	b.n	800671c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006582:	4b68      	ldr	r3, [pc, #416]	@ (8006724 <mem_trim+0x1d8>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	429a      	cmp	r2, r3
 800658a:	d304      	bcc.n	8006596 <mem_trim+0x4a>
 800658c:	4b66      	ldr	r3, [pc, #408]	@ (8006728 <mem_trim+0x1dc>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	429a      	cmp	r2, r3
 8006594:	d306      	bcc.n	80065a4 <mem_trim+0x58>
 8006596:	4b65      	ldr	r3, [pc, #404]	@ (800672c <mem_trim+0x1e0>)
 8006598:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800659c:	4964      	ldr	r1, [pc, #400]	@ (8006730 <mem_trim+0x1e4>)
 800659e:	4865      	ldr	r0, [pc, #404]	@ (8006734 <mem_trim+0x1e8>)
 80065a0:	f00b fde2 	bl	8012168 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80065a4:	4b5f      	ldr	r3, [pc, #380]	@ (8006724 <mem_trim+0x1d8>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d304      	bcc.n	80065b8 <mem_trim+0x6c>
 80065ae:	4b5e      	ldr	r3, [pc, #376]	@ (8006728 <mem_trim+0x1dc>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d301      	bcc.n	80065bc <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	e0af      	b.n	800671c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3b08      	subs	r3, #8
 80065c0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80065c2:	69b8      	ldr	r0, [r7, #24]
 80065c4:	f7ff fe2c 	bl	8006220 <mem_to_ptr>
 80065c8:	4603      	mov	r3, r0
 80065ca:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	881a      	ldrh	r2, [r3, #0]
 80065d0:	8afb      	ldrh	r3, [r7, #22]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	3b08      	subs	r3, #8
 80065d8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80065da:	8bfa      	ldrh	r2, [r7, #30]
 80065dc:	8abb      	ldrh	r3, [r7, #20]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d906      	bls.n	80065f0 <mem_trim+0xa4>
 80065e2:	4b52      	ldr	r3, [pc, #328]	@ (800672c <mem_trim+0x1e0>)
 80065e4:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80065e8:	4953      	ldr	r1, [pc, #332]	@ (8006738 <mem_trim+0x1ec>)
 80065ea:	4852      	ldr	r0, [pc, #328]	@ (8006734 <mem_trim+0x1e8>)
 80065ec:	f00b fdbc 	bl	8012168 <iprintf>
  if (newsize > size) {
 80065f0:	8bfa      	ldrh	r2, [r7, #30]
 80065f2:	8abb      	ldrh	r3, [r7, #20]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d901      	bls.n	80065fc <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80065f8:	2300      	movs	r3, #0
 80065fa:	e08f      	b.n	800671c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80065fc:	8bfa      	ldrh	r2, [r7, #30]
 80065fe:	8abb      	ldrh	r3, [r7, #20]
 8006600:	429a      	cmp	r2, r3
 8006602:	d101      	bne.n	8006608 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	e089      	b.n	800671c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	881b      	ldrh	r3, [r3, #0]
 800660c:	4618      	mov	r0, r3
 800660e:	f7ff fdf5 	bl	80061fc <ptr_to_mem>
 8006612:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	791b      	ldrb	r3, [r3, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d13f      	bne.n	800669c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006624:	d106      	bne.n	8006634 <mem_trim+0xe8>
 8006626:	4b41      	ldr	r3, [pc, #260]	@ (800672c <mem_trim+0x1e0>)
 8006628:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800662c:	4943      	ldr	r1, [pc, #268]	@ (800673c <mem_trim+0x1f0>)
 800662e:	4841      	ldr	r0, [pc, #260]	@ (8006734 <mem_trim+0x1e8>)
 8006630:	f00b fd9a 	bl	8012168 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	881b      	ldrh	r3, [r3, #0]
 8006638:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800663a:	8afa      	ldrh	r2, [r7, #22]
 800663c:	8bfb      	ldrh	r3, [r7, #30]
 800663e:	4413      	add	r3, r2
 8006640:	b29b      	uxth	r3, r3
 8006642:	3308      	adds	r3, #8
 8006644:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8006646:	4b3e      	ldr	r3, [pc, #248]	@ (8006740 <mem_trim+0x1f4>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	429a      	cmp	r2, r3
 800664e:	d106      	bne.n	800665e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8006650:	89fb      	ldrh	r3, [r7, #14]
 8006652:	4618      	mov	r0, r3
 8006654:	f7ff fdd2 	bl	80061fc <ptr_to_mem>
 8006658:	4603      	mov	r3, r0
 800665a:	4a39      	ldr	r2, [pc, #228]	@ (8006740 <mem_trim+0x1f4>)
 800665c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800665e:	89fb      	ldrh	r3, [r7, #14]
 8006660:	4618      	mov	r0, r3
 8006662:	f7ff fdcb 	bl	80061fc <ptr_to_mem>
 8006666:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	2200      	movs	r2, #0
 800666c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	89ba      	ldrh	r2, [r7, #12]
 8006672:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	8afa      	ldrh	r2, [r7, #22]
 8006678:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	89fa      	ldrh	r2, [r7, #14]
 800667e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006688:	d047      	beq.n	800671a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	881b      	ldrh	r3, [r3, #0]
 800668e:	4618      	mov	r0, r3
 8006690:	f7ff fdb4 	bl	80061fc <ptr_to_mem>
 8006694:	4602      	mov	r2, r0
 8006696:	89fb      	ldrh	r3, [r7, #14]
 8006698:	8053      	strh	r3, [r2, #2]
 800669a:	e03e      	b.n	800671a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800669c:	8bfb      	ldrh	r3, [r7, #30]
 800669e:	f103 0214 	add.w	r2, r3, #20
 80066a2:	8abb      	ldrh	r3, [r7, #20]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d838      	bhi.n	800671a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80066a8:	8afa      	ldrh	r2, [r7, #22]
 80066aa:	8bfb      	ldrh	r3, [r7, #30]
 80066ac:	4413      	add	r3, r2
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	3308      	adds	r3, #8
 80066b2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	881b      	ldrh	r3, [r3, #0]
 80066b8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80066bc:	d106      	bne.n	80066cc <mem_trim+0x180>
 80066be:	4b1b      	ldr	r3, [pc, #108]	@ (800672c <mem_trim+0x1e0>)
 80066c0:	f240 3216 	movw	r2, #790	@ 0x316
 80066c4:	491d      	ldr	r1, [pc, #116]	@ (800673c <mem_trim+0x1f0>)
 80066c6:	481b      	ldr	r0, [pc, #108]	@ (8006734 <mem_trim+0x1e8>)
 80066c8:	f00b fd4e 	bl	8012168 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80066cc:	89fb      	ldrh	r3, [r7, #14]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7ff fd94 	bl	80061fc <ptr_to_mem>
 80066d4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80066d6:	4b1a      	ldr	r3, [pc, #104]	@ (8006740 <mem_trim+0x1f4>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d202      	bcs.n	80066e6 <mem_trim+0x19a>
      lfree = mem2;
 80066e0:	4a17      	ldr	r2, [pc, #92]	@ (8006740 <mem_trim+0x1f4>)
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	2200      	movs	r2, #0
 80066ea:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	881a      	ldrh	r2, [r3, #0]
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	8afa      	ldrh	r2, [r7, #22]
 80066f8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	89fa      	ldrh	r2, [r7, #14]
 80066fe:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006708:	d007      	beq.n	800671a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	881b      	ldrh	r3, [r3, #0]
 800670e:	4618      	mov	r0, r3
 8006710:	f7ff fd74 	bl	80061fc <ptr_to_mem>
 8006714:	4602      	mov	r2, r0
 8006716:	89fb      	ldrh	r3, [r7, #14]
 8006718:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800671a:	687b      	ldr	r3, [r7, #4]
}
 800671c:	4618      	mov	r0, r3
 800671e:	3720      	adds	r7, #32
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	2000552c 	.word	0x2000552c
 8006728:	20005530 	.word	0x20005530
 800672c:	08013440 	.word	0x08013440
 8006730:	080135b0 	.word	0x080135b0
 8006734:	08013488 	.word	0x08013488
 8006738:	080135c8 	.word	0x080135c8
 800673c:	080135e8 	.word	0x080135e8
 8006740:	20005534 	.word	0x20005534

08006744 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b088      	sub	sp, #32
 8006748:	af00      	add	r7, sp, #0
 800674a:	4603      	mov	r3, r0
 800674c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800674e:	88fb      	ldrh	r3, [r7, #6]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <mem_malloc+0x14>
    return NULL;
 8006754:	2300      	movs	r3, #0
 8006756:	e0d9      	b.n	800690c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006758:	88fb      	ldrh	r3, [r7, #6]
 800675a:	3303      	adds	r3, #3
 800675c:	b29b      	uxth	r3, r3
 800675e:	f023 0303 	bic.w	r3, r3, #3
 8006762:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006764:	8bbb      	ldrh	r3, [r7, #28]
 8006766:	2b0b      	cmp	r3, #11
 8006768:	d801      	bhi.n	800676e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800676a:	230c      	movs	r3, #12
 800676c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800676e:	8bbb      	ldrh	r3, [r7, #28]
 8006770:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006774:	d803      	bhi.n	800677e <mem_malloc+0x3a>
 8006776:	8bba      	ldrh	r2, [r7, #28]
 8006778:	88fb      	ldrh	r3, [r7, #6]
 800677a:	429a      	cmp	r2, r3
 800677c:	d201      	bcs.n	8006782 <mem_malloc+0x3e>
    return NULL;
 800677e:	2300      	movs	r3, #0
 8006780:	e0c4      	b.n	800690c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006782:	4b64      	ldr	r3, [pc, #400]	@ (8006914 <mem_malloc+0x1d0>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4618      	mov	r0, r3
 8006788:	f7ff fd4a 	bl	8006220 <mem_to_ptr>
 800678c:	4603      	mov	r3, r0
 800678e:	83fb      	strh	r3, [r7, #30]
 8006790:	e0b4      	b.n	80068fc <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8006792:	8bfb      	ldrh	r3, [r7, #30]
 8006794:	4618      	mov	r0, r3
 8006796:	f7ff fd31 	bl	80061fc <ptr_to_mem>
 800679a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	791b      	ldrb	r3, [r3, #4]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f040 80a4 	bne.w	80068ee <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	881b      	ldrh	r3, [r3, #0]
 80067aa:	461a      	mov	r2, r3
 80067ac:	8bfb      	ldrh	r3, [r7, #30]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	f1a3 0208 	sub.w	r2, r3, #8
 80067b4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80067b6:	429a      	cmp	r2, r3
 80067b8:	f0c0 8099 	bcc.w	80068ee <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	881b      	ldrh	r3, [r3, #0]
 80067c0:	461a      	mov	r2, r3
 80067c2:	8bfb      	ldrh	r3, [r7, #30]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	f1a3 0208 	sub.w	r2, r3, #8
 80067ca:	8bbb      	ldrh	r3, [r7, #28]
 80067cc:	3314      	adds	r3, #20
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d333      	bcc.n	800683a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80067d2:	8bfa      	ldrh	r2, [r7, #30]
 80067d4:	8bbb      	ldrh	r3, [r7, #28]
 80067d6:	4413      	add	r3, r2
 80067d8:	b29b      	uxth	r3, r3
 80067da:	3308      	adds	r3, #8
 80067dc:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80067de:	8a7b      	ldrh	r3, [r7, #18]
 80067e0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80067e4:	d106      	bne.n	80067f4 <mem_malloc+0xb0>
 80067e6:	4b4c      	ldr	r3, [pc, #304]	@ (8006918 <mem_malloc+0x1d4>)
 80067e8:	f240 3287 	movw	r2, #903	@ 0x387
 80067ec:	494b      	ldr	r1, [pc, #300]	@ (800691c <mem_malloc+0x1d8>)
 80067ee:	484c      	ldr	r0, [pc, #304]	@ (8006920 <mem_malloc+0x1dc>)
 80067f0:	f00b fcba 	bl	8012168 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80067f4:	8a7b      	ldrh	r3, [r7, #18]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7ff fd00 	bl	80061fc <ptr_to_mem>
 80067fc:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	881a      	ldrh	r2, [r3, #0]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	8bfa      	ldrh	r2, [r7, #30]
 8006810:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	8a7a      	ldrh	r2, [r7, #18]
 8006816:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	2201      	movs	r2, #1
 800681c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	881b      	ldrh	r3, [r3, #0]
 8006822:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006826:	d00b      	beq.n	8006840 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	4618      	mov	r0, r3
 800682e:	f7ff fce5 	bl	80061fc <ptr_to_mem>
 8006832:	4602      	mov	r2, r0
 8006834:	8a7b      	ldrh	r3, [r7, #18]
 8006836:	8053      	strh	r3, [r2, #2]
 8006838:	e002      	b.n	8006840 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	2201      	movs	r2, #1
 800683e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006840:	4b34      	ldr	r3, [pc, #208]	@ (8006914 <mem_malloc+0x1d0>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	429a      	cmp	r2, r3
 8006848:	d127      	bne.n	800689a <mem_malloc+0x156>
          struct mem *cur = lfree;
 800684a:	4b32      	ldr	r3, [pc, #200]	@ (8006914 <mem_malloc+0x1d0>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006850:	e005      	b.n	800685e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	881b      	ldrh	r3, [r3, #0]
 8006856:	4618      	mov	r0, r3
 8006858:	f7ff fcd0 	bl	80061fc <ptr_to_mem>
 800685c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	791b      	ldrb	r3, [r3, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d004      	beq.n	8006870 <mem_malloc+0x12c>
 8006866:	4b2f      	ldr	r3, [pc, #188]	@ (8006924 <mem_malloc+0x1e0>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	69ba      	ldr	r2, [r7, #24]
 800686c:	429a      	cmp	r2, r3
 800686e:	d1f0      	bne.n	8006852 <mem_malloc+0x10e>
          }
          lfree = cur;
 8006870:	4a28      	ldr	r2, [pc, #160]	@ (8006914 <mem_malloc+0x1d0>)
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006876:	4b27      	ldr	r3, [pc, #156]	@ (8006914 <mem_malloc+0x1d0>)
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	4b2a      	ldr	r3, [pc, #168]	@ (8006924 <mem_malloc+0x1e0>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	429a      	cmp	r2, r3
 8006880:	d00b      	beq.n	800689a <mem_malloc+0x156>
 8006882:	4b24      	ldr	r3, [pc, #144]	@ (8006914 <mem_malloc+0x1d0>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	791b      	ldrb	r3, [r3, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d006      	beq.n	800689a <mem_malloc+0x156>
 800688c:	4b22      	ldr	r3, [pc, #136]	@ (8006918 <mem_malloc+0x1d4>)
 800688e:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8006892:	4925      	ldr	r1, [pc, #148]	@ (8006928 <mem_malloc+0x1e4>)
 8006894:	4822      	ldr	r0, [pc, #136]	@ (8006920 <mem_malloc+0x1dc>)
 8006896:	f00b fc67 	bl	8012168 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800689a:	8bba      	ldrh	r2, [r7, #28]
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	4413      	add	r3, r2
 80068a0:	3308      	adds	r3, #8
 80068a2:	4a20      	ldr	r2, [pc, #128]	@ (8006924 <mem_malloc+0x1e0>)
 80068a4:	6812      	ldr	r2, [r2, #0]
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d906      	bls.n	80068b8 <mem_malloc+0x174>
 80068aa:	4b1b      	ldr	r3, [pc, #108]	@ (8006918 <mem_malloc+0x1d4>)
 80068ac:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80068b0:	491e      	ldr	r1, [pc, #120]	@ (800692c <mem_malloc+0x1e8>)
 80068b2:	481b      	ldr	r0, [pc, #108]	@ (8006920 <mem_malloc+0x1dc>)
 80068b4:	f00b fc58 	bl	8012168 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	f003 0303 	and.w	r3, r3, #3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d006      	beq.n	80068d0 <mem_malloc+0x18c>
 80068c2:	4b15      	ldr	r3, [pc, #84]	@ (8006918 <mem_malloc+0x1d4>)
 80068c4:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80068c8:	4919      	ldr	r1, [pc, #100]	@ (8006930 <mem_malloc+0x1ec>)
 80068ca:	4815      	ldr	r0, [pc, #84]	@ (8006920 <mem_malloc+0x1dc>)
 80068cc:	f00b fc4c 	bl	8012168 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f003 0303 	and.w	r3, r3, #3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d006      	beq.n	80068e8 <mem_malloc+0x1a4>
 80068da:	4b0f      	ldr	r3, [pc, #60]	@ (8006918 <mem_malloc+0x1d4>)
 80068dc:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80068e0:	4914      	ldr	r1, [pc, #80]	@ (8006934 <mem_malloc+0x1f0>)
 80068e2:	480f      	ldr	r0, [pc, #60]	@ (8006920 <mem_malloc+0x1dc>)
 80068e4:	f00b fc40 	bl	8012168 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	3308      	adds	r3, #8
 80068ec:	e00e      	b.n	800690c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80068ee:	8bfb      	ldrh	r3, [r7, #30]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7ff fc83 	bl	80061fc <ptr_to_mem>
 80068f6:	4603      	mov	r3, r0
 80068f8:	881b      	ldrh	r3, [r3, #0]
 80068fa:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80068fc:	8bfa      	ldrh	r2, [r7, #30]
 80068fe:	8bbb      	ldrh	r3, [r7, #28]
 8006900:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8006904:	429a      	cmp	r2, r3
 8006906:	f4ff af44 	bcc.w	8006792 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3720      	adds	r7, #32
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	20005534 	.word	0x20005534
 8006918:	08013440 	.word	0x08013440
 800691c:	080135e8 	.word	0x080135e8
 8006920:	08013488 	.word	0x08013488
 8006924:	20005530 	.word	0x20005530
 8006928:	080135fc 	.word	0x080135fc
 800692c:	08013618 	.word	0x08013618
 8006930:	08013648 	.word	0x08013648
 8006934:	08013678 	.word	0x08013678

08006938 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	3303      	adds	r3, #3
 800694e:	f023 0303 	bic.w	r3, r3, #3
 8006952:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006954:	2300      	movs	r3, #0
 8006956:	60fb      	str	r3, [r7, #12]
 8006958:	e011      	b.n	800697e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	881b      	ldrh	r3, [r3, #0]
 8006970:	461a      	mov	r2, r3
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	4413      	add	r3, r2
 8006976:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3301      	adds	r3, #1
 800697c:	60fb      	str	r3, [r7, #12]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	885b      	ldrh	r3, [r3, #2]
 8006982:	461a      	mov	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	4293      	cmp	r3, r2
 8006988:	dbe7      	blt.n	800695a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800698a:	bf00      	nop
 800698c:	bf00      	nop
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800699e:	2300      	movs	r3, #0
 80069a0:	80fb      	strh	r3, [r7, #6]
 80069a2:	e009      	b.n	80069b8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80069a4:	88fb      	ldrh	r3, [r7, #6]
 80069a6:	4a08      	ldr	r2, [pc, #32]	@ (80069c8 <memp_init+0x30>)
 80069a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7ff ffc3 	bl	8006938 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80069b2:	88fb      	ldrh	r3, [r7, #6]
 80069b4:	3301      	adds	r3, #1
 80069b6:	80fb      	strh	r3, [r7, #6]
 80069b8:	88fb      	ldrh	r3, [r7, #6]
 80069ba:	2b08      	cmp	r3, #8
 80069bc:	d9f2      	bls.n	80069a4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80069be:	bf00      	nop
 80069c0:	bf00      	nop
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	08015fb0 	.word	0x08015fb0

080069cc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d012      	beq.n	8006a08 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	6812      	ldr	r2, [r2, #0]
 80069ea:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d006      	beq.n	8006a04 <do_memp_malloc_pool+0x38>
 80069f6:	4b07      	ldr	r3, [pc, #28]	@ (8006a14 <do_memp_malloc_pool+0x48>)
 80069f8:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80069fc:	4906      	ldr	r1, [pc, #24]	@ (8006a18 <do_memp_malloc_pool+0x4c>)
 80069fe:	4807      	ldr	r0, [pc, #28]	@ (8006a1c <do_memp_malloc_pool+0x50>)
 8006a00:	f00b fbb2 	bl	8012168 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	e000      	b.n	8006a0a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	0801369c 	.word	0x0801369c
 8006a18:	080136cc 	.word	0x080136cc
 8006a1c:	080136f0 	.word	0x080136f0

08006a20 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d106      	bne.n	8006a3c <memp_malloc_pool+0x1c>
 8006a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8006a58 <memp_malloc_pool+0x38>)
 8006a30:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8006a34:	4909      	ldr	r1, [pc, #36]	@ (8006a5c <memp_malloc_pool+0x3c>)
 8006a36:	480a      	ldr	r0, [pc, #40]	@ (8006a60 <memp_malloc_pool+0x40>)
 8006a38:	f00b fb96 	bl	8012168 <iprintf>
  if (desc == NULL) {
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d101      	bne.n	8006a46 <memp_malloc_pool+0x26>
    return NULL;
 8006a42:	2300      	movs	r3, #0
 8006a44:	e003      	b.n	8006a4e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7ff ffc0 	bl	80069cc <do_memp_malloc_pool>
 8006a4c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	0801369c 	.word	0x0801369c
 8006a5c:	08013718 	.word	0x08013718
 8006a60:	080136f0 	.word	0x080136f0

08006a64 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006a6e:	79fb      	ldrb	r3, [r7, #7]
 8006a70:	2b08      	cmp	r3, #8
 8006a72:	d908      	bls.n	8006a86 <memp_malloc+0x22>
 8006a74:	4b0a      	ldr	r3, [pc, #40]	@ (8006aa0 <memp_malloc+0x3c>)
 8006a76:	f240 1257 	movw	r2, #343	@ 0x157
 8006a7a:	490a      	ldr	r1, [pc, #40]	@ (8006aa4 <memp_malloc+0x40>)
 8006a7c:	480a      	ldr	r0, [pc, #40]	@ (8006aa8 <memp_malloc+0x44>)
 8006a7e:	f00b fb73 	bl	8012168 <iprintf>
 8006a82:	2300      	movs	r3, #0
 8006a84:	e008      	b.n	8006a98 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006a86:	79fb      	ldrb	r3, [r7, #7]
 8006a88:	4a08      	ldr	r2, [pc, #32]	@ (8006aac <memp_malloc+0x48>)
 8006a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7ff ff9c 	bl	80069cc <do_memp_malloc_pool>
 8006a94:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006a96:	68fb      	ldr	r3, [r7, #12]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	0801369c 	.word	0x0801369c
 8006aa4:	0801372c 	.word	0x0801372c
 8006aa8:	080136f0 	.word	0x080136f0
 8006aac:	08015fb0 	.word	0x08015fb0

08006ab0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	f003 0303 	and.w	r3, r3, #3
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d006      	beq.n	8006ad2 <do_memp_free_pool+0x22>
 8006ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8006af0 <do_memp_free_pool+0x40>)
 8006ac6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8006aca:	490a      	ldr	r1, [pc, #40]	@ (8006af4 <do_memp_free_pool+0x44>)
 8006acc:	480a      	ldr	r0, [pc, #40]	@ (8006af8 <do_memp_free_pool+0x48>)
 8006ace:	f00b fb4b 	bl	8012168 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006ae8:	bf00      	nop
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	0801369c 	.word	0x0801369c
 8006af4:	0801374c 	.word	0x0801374c
 8006af8:	080136f0 	.word	0x080136f0

08006afc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d106      	bne.n	8006b1a <memp_free_pool+0x1e>
 8006b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b38 <memp_free_pool+0x3c>)
 8006b0e:	f240 1295 	movw	r2, #405	@ 0x195
 8006b12:	490a      	ldr	r1, [pc, #40]	@ (8006b3c <memp_free_pool+0x40>)
 8006b14:	480a      	ldr	r0, [pc, #40]	@ (8006b40 <memp_free_pool+0x44>)
 8006b16:	f00b fb27 	bl	8012168 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d007      	beq.n	8006b30 <memp_free_pool+0x34>
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d004      	beq.n	8006b30 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8006b26:	6839      	ldr	r1, [r7, #0]
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f7ff ffc1 	bl	8006ab0 <do_memp_free_pool>
 8006b2e:	e000      	b.n	8006b32 <memp_free_pool+0x36>
    return;
 8006b30:	bf00      	nop
}
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	0801369c 	.word	0x0801369c
 8006b3c:	08013718 	.word	0x08013718
 8006b40:	080136f0 	.word	0x080136f0

08006b44 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	6039      	str	r1, [r7, #0]
 8006b4e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006b50:	79fb      	ldrb	r3, [r7, #7]
 8006b52:	2b08      	cmp	r3, #8
 8006b54:	d907      	bls.n	8006b66 <memp_free+0x22>
 8006b56:	4b0c      	ldr	r3, [pc, #48]	@ (8006b88 <memp_free+0x44>)
 8006b58:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8006b5c:	490b      	ldr	r1, [pc, #44]	@ (8006b8c <memp_free+0x48>)
 8006b5e:	480c      	ldr	r0, [pc, #48]	@ (8006b90 <memp_free+0x4c>)
 8006b60:	f00b fb02 	bl	8012168 <iprintf>
 8006b64:	e00c      	b.n	8006b80 <memp_free+0x3c>

  if (mem == NULL) {
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d008      	beq.n	8006b7e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006b6c:	79fb      	ldrb	r3, [r7, #7]
 8006b6e:	4a09      	ldr	r2, [pc, #36]	@ (8006b94 <memp_free+0x50>)
 8006b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b74:	6839      	ldr	r1, [r7, #0]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7ff ff9a 	bl	8006ab0 <do_memp_free_pool>
 8006b7c:	e000      	b.n	8006b80 <memp_free+0x3c>
    return;
 8006b7e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	0801369c 	.word	0x0801369c
 8006b8c:	0801376c 	.word	0x0801376c
 8006b90:	080136f0 	.word	0x080136f0
 8006b94:	08015fb0 	.word	0x08015fb0

08006b98 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006b9c:	bf00      	nop
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
	...

08006ba8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
 8006bb4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d108      	bne.n	8006bce <netif_add+0x26>
 8006bbc:	4b57      	ldr	r3, [pc, #348]	@ (8006d1c <netif_add+0x174>)
 8006bbe:	f240 1227 	movw	r2, #295	@ 0x127
 8006bc2:	4957      	ldr	r1, [pc, #348]	@ (8006d20 <netif_add+0x178>)
 8006bc4:	4857      	ldr	r0, [pc, #348]	@ (8006d24 <netif_add+0x17c>)
 8006bc6:	f00b facf 	bl	8012168 <iprintf>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	e0a2      	b.n	8006d14 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d108      	bne.n	8006be6 <netif_add+0x3e>
 8006bd4:	4b51      	ldr	r3, [pc, #324]	@ (8006d1c <netif_add+0x174>)
 8006bd6:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8006bda:	4953      	ldr	r1, [pc, #332]	@ (8006d28 <netif_add+0x180>)
 8006bdc:	4851      	ldr	r0, [pc, #324]	@ (8006d24 <netif_add+0x17c>)
 8006bde:	f00b fac3 	bl	8012168 <iprintf>
 8006be2:	2300      	movs	r3, #0
 8006be4:	e096      	b.n	8006d14 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d101      	bne.n	8006bf0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006bec:	4b4f      	ldr	r3, [pc, #316]	@ (8006d2c <netif_add+0x184>)
 8006bee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006bf6:	4b4d      	ldr	r3, [pc, #308]	@ (8006d2c <netif_add+0x184>)
 8006bf8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d101      	bne.n	8006c04 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006c00:	4b4a      	ldr	r3, [pc, #296]	@ (8006d2c <netif_add+0x184>)
 8006c02:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	4a45      	ldr	r2, [pc, #276]	@ (8006d30 <netif_add+0x188>)
 8006c1a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6a3a      	ldr	r2, [r7, #32]
 8006c34:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006c36:	4b3f      	ldr	r3, [pc, #252]	@ (8006d34 <netif_add+0x18c>)
 8006c38:	781a      	ldrb	r2, [r3, #0]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c44:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	68b9      	ldr	r1, [r7, #8]
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 f913 	bl	8006e78 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	4798      	blx	r3
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <netif_add+0xba>
    return NULL;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	e058      	b.n	8006d14 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006c68:	2bff      	cmp	r3, #255	@ 0xff
 8006c6a:	d103      	bne.n	8006c74 <netif_add+0xcc>
        netif->num = 0;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8006c74:	2300      	movs	r3, #0
 8006c76:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006c78:	4b2f      	ldr	r3, [pc, #188]	@ (8006d38 <netif_add+0x190>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	617b      	str	r3, [r7, #20]
 8006c7e:	e02b      	b.n	8006cd8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d106      	bne.n	8006c96 <netif_add+0xee>
 8006c88:	4b24      	ldr	r3, [pc, #144]	@ (8006d1c <netif_add+0x174>)
 8006c8a:	f240 128b 	movw	r2, #395	@ 0x18b
 8006c8e:	492b      	ldr	r1, [pc, #172]	@ (8006d3c <netif_add+0x194>)
 8006c90:	4824      	ldr	r0, [pc, #144]	@ (8006d24 <netif_add+0x17c>)
 8006c92:	f00b fa69 	bl	8012168 <iprintf>
        num_netifs++;
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	2bff      	cmp	r3, #255	@ 0xff
 8006ca0:	dd06      	ble.n	8006cb0 <netif_add+0x108>
 8006ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8006d1c <netif_add+0x174>)
 8006ca4:	f240 128d 	movw	r2, #397	@ 0x18d
 8006ca8:	4925      	ldr	r1, [pc, #148]	@ (8006d40 <netif_add+0x198>)
 8006caa:	481e      	ldr	r0, [pc, #120]	@ (8006d24 <netif_add+0x17c>)
 8006cac:	f00b fa5c 	bl	8012168 <iprintf>
        if (netif2->num == netif->num) {
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d108      	bne.n	8006cd2 <netif_add+0x12a>
          netif->num++;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8006cd0:	e005      	b.n	8006cde <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	617b      	str	r3, [r7, #20]
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1d0      	bne.n	8006c80 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1be      	bne.n	8006c62 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006cea:	2bfe      	cmp	r3, #254	@ 0xfe
 8006cec:	d103      	bne.n	8006cf6 <netif_add+0x14e>
    netif_num = 0;
 8006cee:	4b11      	ldr	r3, [pc, #68]	@ (8006d34 <netif_add+0x18c>)
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	701a      	strb	r2, [r3, #0]
 8006cf4:	e006      	b.n	8006d04 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	b2da      	uxtb	r2, r3
 8006d00:	4b0c      	ldr	r3, [pc, #48]	@ (8006d34 <netif_add+0x18c>)
 8006d02:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006d04:	4b0c      	ldr	r3, [pc, #48]	@ (8006d38 <netif_add+0x190>)
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8006d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8006d38 <netif_add+0x190>)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8006d12:	68fb      	ldr	r3, [r7, #12]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3718      	adds	r7, #24
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	08013788 	.word	0x08013788
 8006d20:	0801381c 	.word	0x0801381c
 8006d24:	080137d8 	.word	0x080137d8
 8006d28:	08013838 	.word	0x08013838
 8006d2c:	08016014 	.word	0x08016014
 8006d30:	08007153 	.word	0x08007153
 8006d34:	2000842c 	.word	0x2000842c
 8006d38:	20008424 	.word	0x20008424
 8006d3c:	0801385c 	.word	0x0801385c
 8006d40:	08013870 	.word	0x08013870

08006d44 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006d4e:	6839      	ldr	r1, [r7, #0]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f002 fd41 	bl	80097d8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8006d56:	6839      	ldr	r1, [r7, #0]
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f007 fa77 	bl	800e24c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8006d5e:	bf00      	nop
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
	...

08006d68 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d106      	bne.n	8006d88 <netif_do_set_ipaddr+0x20>
 8006d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8006df0 <netif_do_set_ipaddr+0x88>)
 8006d7c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8006d80:	491c      	ldr	r1, [pc, #112]	@ (8006df4 <netif_do_set_ipaddr+0x8c>)
 8006d82:	481d      	ldr	r0, [pc, #116]	@ (8006df8 <netif_do_set_ipaddr+0x90>)
 8006d84:	f00b f9f0 	bl	8012168 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d106      	bne.n	8006d9c <netif_do_set_ipaddr+0x34>
 8006d8e:	4b18      	ldr	r3, [pc, #96]	@ (8006df0 <netif_do_set_ipaddr+0x88>)
 8006d90:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8006d94:	4917      	ldr	r1, [pc, #92]	@ (8006df4 <netif_do_set_ipaddr+0x8c>)
 8006d96:	4818      	ldr	r0, [pc, #96]	@ (8006df8 <netif_do_set_ipaddr+0x90>)
 8006d98:	f00b f9e6 	bl	8012168 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	3304      	adds	r3, #4
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d01c      	beq.n	8006de4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	3304      	adds	r3, #4
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8006dba:	f107 0314 	add.w	r3, r7, #20
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7ff ffbf 	bl	8006d44 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d002      	beq.n	8006dd2 <netif_do_set_ipaddr+0x6a>
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	e000      	b.n	8006dd4 <netif_do_set_ipaddr+0x6c>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006dd8:	2101      	movs	r1, #1
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f000 f8d2 	bl	8006f84 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006de0:	2301      	movs	r3, #1
 8006de2:	e000      	b.n	8006de6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3718      	adds	r7, #24
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	08013788 	.word	0x08013788
 8006df4:	080138a0 	.word	0x080138a0
 8006df8:	080137d8 	.word	0x080137d8

08006dfc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	3308      	adds	r3, #8
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d00a      	beq.n	8006e2c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <netif_do_set_netmask+0x26>
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	e000      	b.n	8006e24 <netif_do_set_netmask+0x28>
 8006e22:	2300      	movs	r3, #0
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e000      	b.n	8006e2e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3714      	adds	r7, #20
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b085      	sub	sp, #20
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	60f8      	str	r0, [r7, #12]
 8006e42:	60b9      	str	r1, [r7, #8]
 8006e44:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	330c      	adds	r3, #12
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d00a      	beq.n	8006e6a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d002      	beq.n	8006e60 <netif_do_set_gw+0x26>
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	e000      	b.n	8006e62 <netif_do_set_gw+0x28>
 8006e60:	2300      	movs	r3, #0
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8006e66:	2301      	movs	r3, #1
 8006e68:	e000      	b.n	8006e6c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3714      	adds	r7, #20
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b088      	sub	sp, #32
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
 8006e84:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8006e86:	2300      	movs	r3, #0
 8006e88:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d101      	bne.n	8006e98 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006e94:	4b1c      	ldr	r3, [pc, #112]	@ (8006f08 <netif_set_addr+0x90>)
 8006e96:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8006e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8006f08 <netif_set_addr+0x90>)
 8006ea0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d101      	bne.n	8006eac <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006ea8:	4b17      	ldr	r3, [pc, #92]	@ (8006f08 <netif_set_addr+0x90>)
 8006eaa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <netif_set_addr+0x42>
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <netif_set_addr+0x46>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e000      	b.n	8006ec0 <netif_set_addr+0x48>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	617b      	str	r3, [r7, #20]
  if (remove) {
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d006      	beq.n	8006ed6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006ec8:	f107 0310 	add.w	r3, r7, #16
 8006ecc:	461a      	mov	r2, r3
 8006ece:	68b9      	ldr	r1, [r7, #8]
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f7ff ff49 	bl	8006d68 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8006ed6:	69fa      	ldr	r2, [r7, #28]
 8006ed8:	6879      	ldr	r1, [r7, #4]
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f7ff ff8e 	bl	8006dfc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006ee0:	69ba      	ldr	r2, [r7, #24]
 8006ee2:	6839      	ldr	r1, [r7, #0]
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f7ff ffa8 	bl	8006e3a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d106      	bne.n	8006efe <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006ef0:	f107 0310 	add.w	r3, r7, #16
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	68b9      	ldr	r1, [r7, #8]
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f7ff ff35 	bl	8006d68 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8006efe:	bf00      	nop
 8006f00:	3720      	adds	r7, #32
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	08016014 	.word	0x08016014

08006f0c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006f14:	4a04      	ldr	r2, [pc, #16]	@ (8006f28 <netif_set_default+0x1c>)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8006f1a:	bf00      	nop
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	20008428 	.word	0x20008428

08006f2c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d107      	bne.n	8006f4a <netif_set_up+0x1e>
 8006f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8006f78 <netif_set_up+0x4c>)
 8006f3c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8006f40:	490e      	ldr	r1, [pc, #56]	@ (8006f7c <netif_set_up+0x50>)
 8006f42:	480f      	ldr	r0, [pc, #60]	@ (8006f80 <netif_set_up+0x54>)
 8006f44:	f00b f910 	bl	8012168 <iprintf>
 8006f48:	e013      	b.n	8006f72 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10c      	bne.n	8006f72 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006f5e:	f043 0301 	orr.w	r3, r3, #1
 8006f62:	b2da      	uxtb	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006f6a:	2103      	movs	r1, #3
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f809 	bl	8006f84 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	08013788 	.word	0x08013788
 8006f7c:	08013910 	.word	0x08013910
 8006f80:	080137d8 	.word	0x080137d8

08006f84 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d106      	bne.n	8006fa4 <netif_issue_reports+0x20>
 8006f96:	4b18      	ldr	r3, [pc, #96]	@ (8006ff8 <netif_issue_reports+0x74>)
 8006f98:	f240 326d 	movw	r2, #877	@ 0x36d
 8006f9c:	4917      	ldr	r1, [pc, #92]	@ (8006ffc <netif_issue_reports+0x78>)
 8006f9e:	4818      	ldr	r0, [pc, #96]	@ (8007000 <netif_issue_reports+0x7c>)
 8006fa0:	f00b f8e2 	bl	8012168 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006faa:	f003 0304 	and.w	r3, r3, #4
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d01e      	beq.n	8006ff0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006fb8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d017      	beq.n	8006ff0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006fc0:	78fb      	ldrb	r3, [r7, #3]
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d013      	beq.n	8006ff2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	3304      	adds	r3, #4
 8006fce:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00e      	beq.n	8006ff2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006fda:	f003 0308 	and.w	r3, r3, #8
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d007      	beq.n	8006ff2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	3304      	adds	r3, #4
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f008 f899 	bl	800f120 <etharp_request>
 8006fee:	e000      	b.n	8006ff2 <netif_issue_reports+0x6e>
    return;
 8006ff0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	08013788 	.word	0x08013788
 8006ffc:	0801392c 	.word	0x0801392c
 8007000:	080137d8 	.word	0x080137d8

08007004 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d107      	bne.n	8007022 <netif_set_down+0x1e>
 8007012:	4b12      	ldr	r3, [pc, #72]	@ (800705c <netif_set_down+0x58>)
 8007014:	f240 329b 	movw	r2, #923	@ 0x39b
 8007018:	4911      	ldr	r1, [pc, #68]	@ (8007060 <netif_set_down+0x5c>)
 800701a:	4812      	ldr	r0, [pc, #72]	@ (8007064 <netif_set_down+0x60>)
 800701c:	f00b f8a4 	bl	8012168 <iprintf>
 8007020:	e019      	b.n	8007056 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	2b00      	cmp	r3, #0
 800702e:	d012      	beq.n	8007056 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007036:	f023 0301 	bic.w	r3, r3, #1
 800703a:	b2da      	uxtb	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007048:	f003 0308 	and.w	r3, r3, #8
 800704c:	2b00      	cmp	r3, #0
 800704e:	d002      	beq.n	8007056 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f007 fc23 	bl	800e89c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	08013788 	.word	0x08013788
 8007060:	08013950 	.word	0x08013950
 8007064:	080137d8 	.word	0x080137d8

08007068 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d107      	bne.n	8007086 <netif_set_link_up+0x1e>
 8007076:	4b13      	ldr	r3, [pc, #76]	@ (80070c4 <netif_set_link_up+0x5c>)
 8007078:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800707c:	4912      	ldr	r1, [pc, #72]	@ (80070c8 <netif_set_link_up+0x60>)
 800707e:	4813      	ldr	r0, [pc, #76]	@ (80070cc <netif_set_link_up+0x64>)
 8007080:	f00b f872 	bl	8012168 <iprintf>
 8007084:	e01b      	b.n	80070be <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800708c:	f003 0304 	and.w	r3, r3, #4
 8007090:	2b00      	cmp	r3, #0
 8007092:	d114      	bne.n	80070be <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800709a:	f043 0304 	orr.w	r3, r3, #4
 800709e:	b2da      	uxtb	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80070a6:	2103      	movs	r1, #3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f7ff ff6b 	bl	8006f84 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	69db      	ldr	r3, [r3, #28]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d003      	beq.n	80070be <netif_set_link_up+0x56>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	69db      	ldr	r3, [r3, #28]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	08013788 	.word	0x08013788
 80070c8:	08013970 	.word	0x08013970
 80070cc:	080137d8 	.word	0x080137d8

080070d0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d107      	bne.n	80070ee <netif_set_link_down+0x1e>
 80070de:	4b11      	ldr	r3, [pc, #68]	@ (8007124 <netif_set_link_down+0x54>)
 80070e0:	f240 4206 	movw	r2, #1030	@ 0x406
 80070e4:	4910      	ldr	r1, [pc, #64]	@ (8007128 <netif_set_link_down+0x58>)
 80070e6:	4811      	ldr	r0, [pc, #68]	@ (800712c <netif_set_link_down+0x5c>)
 80070e8:	f00b f83e 	bl	8012168 <iprintf>
 80070ec:	e017      	b.n	800711e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80070f4:	f003 0304 	and.w	r3, r3, #4
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d010      	beq.n	800711e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007102:	f023 0304 	bic.w	r3, r3, #4
 8007106:	b2da      	uxtb	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d003      	beq.n	800711e <netif_set_link_down+0x4e>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	69db      	ldr	r3, [r3, #28]
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	08013788 	.word	0x08013788
 8007128:	08013994 	.word	0x08013994
 800712c:	080137d8 	.word	0x080137d8

08007130 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d002      	beq.n	8007146 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	61da      	str	r2, [r3, #28]
  }
}
 8007146:	bf00      	nop
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007152:	b480      	push	{r7}
 8007154:	b085      	sub	sp, #20
 8007156:	af00      	add	r7, sp, #0
 8007158:	60f8      	str	r0, [r7, #12]
 800715a:	60b9      	str	r1, [r7, #8]
 800715c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800715e:	f06f 030b 	mvn.w	r3, #11
}
 8007162:	4618      	mov	r0, r3
 8007164:	3714      	adds	r7, #20
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
	...

08007170 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	4603      	mov	r3, r0
 8007178:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800717a:	79fb      	ldrb	r3, [r7, #7]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d013      	beq.n	80071a8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007180:	4b0d      	ldr	r3, [pc, #52]	@ (80071b8 <netif_get_by_index+0x48>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	60fb      	str	r3, [r7, #12]
 8007186:	e00c      	b.n	80071a2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800718e:	3301      	adds	r3, #1
 8007190:	b2db      	uxtb	r3, r3
 8007192:	79fa      	ldrb	r2, [r7, #7]
 8007194:	429a      	cmp	r2, r3
 8007196:	d101      	bne.n	800719c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	e006      	b.n	80071aa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	60fb      	str	r3, [r7, #12]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1ef      	bne.n	8007188 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3714      	adds	r7, #20
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	20008424 	.word	0x20008424

080071bc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80071c2:	4b0c      	ldr	r3, [pc, #48]	@ (80071f4 <pbuf_free_ooseq+0x38>)
 80071c4:	2200      	movs	r2, #0
 80071c6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80071c8:	4b0b      	ldr	r3, [pc, #44]	@ (80071f8 <pbuf_free_ooseq+0x3c>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	607b      	str	r3, [r7, #4]
 80071ce:	e00a      	b.n	80071e6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d003      	beq.n	80071e0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f002 fb3b 	bl	8009854 <tcp_free_ooseq>
      return;
 80071de:	e005      	b.n	80071ec <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	607b      	str	r3, [r7, #4]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1f1      	bne.n	80071d0 <pbuf_free_ooseq+0x14>
    }
  }
}
 80071ec:	3708      	adds	r7, #8
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	2000842d 	.word	0x2000842d
 80071f8:	2000843c 	.word	0x2000843c

080071fc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80071fc:	b480      	push	{r7}
 80071fe:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007200:	4b03      	ldr	r3, [pc, #12]	@ (8007210 <pbuf_pool_is_empty+0x14>)
 8007202:	2201      	movs	r2, #1
 8007204:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007206:	bf00      	nop
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	2000842d 	.word	0x2000842d

08007214 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	4611      	mov	r1, r2
 8007220:	461a      	mov	r2, r3
 8007222:	460b      	mov	r3, r1
 8007224:	80fb      	strh	r3, [r7, #6]
 8007226:	4613      	mov	r3, r2
 8007228:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	88fa      	ldrh	r2, [r7, #6]
 800723a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	88ba      	ldrh	r2, [r7, #4]
 8007240:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007242:	8b3b      	ldrh	r3, [r7, #24]
 8007244:	b2da      	uxtb	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	7f3a      	ldrb	r2, [r7, #28]
 800724e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2201      	movs	r2, #1
 8007254:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	73da      	strb	r2, [r3, #15]
}
 800725c:	bf00      	nop
 800725e:	3714      	adds	r7, #20
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b08c      	sub	sp, #48	@ 0x30
 800726c:	af02      	add	r7, sp, #8
 800726e:	4603      	mov	r3, r0
 8007270:	71fb      	strb	r3, [r7, #7]
 8007272:	460b      	mov	r3, r1
 8007274:	80bb      	strh	r3, [r7, #4]
 8007276:	4613      	mov	r3, r2
 8007278:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800727a:	79fb      	ldrb	r3, [r7, #7]
 800727c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800727e:	887b      	ldrh	r3, [r7, #2]
 8007280:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8007284:	d07f      	beq.n	8007386 <pbuf_alloc+0x11e>
 8007286:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800728a:	f300 80c8 	bgt.w	800741e <pbuf_alloc+0x1b6>
 800728e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8007292:	d010      	beq.n	80072b6 <pbuf_alloc+0x4e>
 8007294:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8007298:	f300 80c1 	bgt.w	800741e <pbuf_alloc+0x1b6>
 800729c:	2b01      	cmp	r3, #1
 800729e:	d002      	beq.n	80072a6 <pbuf_alloc+0x3e>
 80072a0:	2b41      	cmp	r3, #65	@ 0x41
 80072a2:	f040 80bc 	bne.w	800741e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80072a6:	887a      	ldrh	r2, [r7, #2]
 80072a8:	88bb      	ldrh	r3, [r7, #4]
 80072aa:	4619      	mov	r1, r3
 80072ac:	2000      	movs	r0, #0
 80072ae:	f000 f8d1 	bl	8007454 <pbuf_alloc_reference>
 80072b2:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 80072b4:	e0bd      	b.n	8007432 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80072b6:	2300      	movs	r3, #0
 80072b8:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80072ba:	2300      	movs	r3, #0
 80072bc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80072be:	88bb      	ldrh	r3, [r7, #4]
 80072c0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80072c2:	2008      	movs	r0, #8
 80072c4:	f7ff fbce 	bl	8006a64 <memp_malloc>
 80072c8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d109      	bne.n	80072e4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80072d0:	f7ff ff94 	bl	80071fc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80072d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d002      	beq.n	80072e0 <pbuf_alloc+0x78>
            pbuf_free(p);
 80072da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80072dc:	f000 faa8 	bl	8007830 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80072e0:	2300      	movs	r3, #0
 80072e2:	e0a7      	b.n	8007434 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80072e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80072e6:	3303      	adds	r3, #3
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	f023 0303 	bic.w	r3, r3, #3
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	8b7a      	ldrh	r2, [r7, #26]
 80072f8:	4293      	cmp	r3, r2
 80072fa:	bf28      	it	cs
 80072fc:	4613      	movcs	r3, r2
 80072fe:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007300:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007302:	3310      	adds	r3, #16
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	4413      	add	r3, r2
 8007308:	3303      	adds	r3, #3
 800730a:	f023 0303 	bic.w	r3, r3, #3
 800730e:	4618      	mov	r0, r3
 8007310:	89f9      	ldrh	r1, [r7, #14]
 8007312:	8b7a      	ldrh	r2, [r7, #26]
 8007314:	2300      	movs	r3, #0
 8007316:	9301      	str	r3, [sp, #4]
 8007318:	887b      	ldrh	r3, [r7, #2]
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	460b      	mov	r3, r1
 800731e:	4601      	mov	r1, r0
 8007320:	6938      	ldr	r0, [r7, #16]
 8007322:	f7ff ff77 	bl	8007214 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f003 0303 	and.w	r3, r3, #3
 800732e:	2b00      	cmp	r3, #0
 8007330:	d006      	beq.n	8007340 <pbuf_alloc+0xd8>
 8007332:	4b42      	ldr	r3, [pc, #264]	@ (800743c <pbuf_alloc+0x1d4>)
 8007334:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007338:	4941      	ldr	r1, [pc, #260]	@ (8007440 <pbuf_alloc+0x1d8>)
 800733a:	4842      	ldr	r0, [pc, #264]	@ (8007444 <pbuf_alloc+0x1dc>)
 800733c:	f00a ff14 	bl	8012168 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007340:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007342:	3303      	adds	r3, #3
 8007344:	f023 0303 	bic.w	r3, r3, #3
 8007348:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800734c:	d106      	bne.n	800735c <pbuf_alloc+0xf4>
 800734e:	4b3b      	ldr	r3, [pc, #236]	@ (800743c <pbuf_alloc+0x1d4>)
 8007350:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8007354:	493c      	ldr	r1, [pc, #240]	@ (8007448 <pbuf_alloc+0x1e0>)
 8007356:	483b      	ldr	r0, [pc, #236]	@ (8007444 <pbuf_alloc+0x1dc>)
 8007358:	f00a ff06 	bl	8012168 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800735c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735e:	2b00      	cmp	r3, #0
 8007360:	d102      	bne.n	8007368 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	627b      	str	r3, [r7, #36]	@ 0x24
 8007366:	e002      	b.n	800736e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8007372:	8b7a      	ldrh	r2, [r7, #26]
 8007374:	89fb      	ldrh	r3, [r7, #14]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800737a:	2300      	movs	r3, #0
 800737c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800737e:	8b7b      	ldrh	r3, [r7, #26]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d19e      	bne.n	80072c2 <pbuf_alloc+0x5a>
      break;
 8007384:	e055      	b.n	8007432 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007386:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007388:	3303      	adds	r3, #3
 800738a:	b29b      	uxth	r3, r3
 800738c:	f023 0303 	bic.w	r3, r3, #3
 8007390:	b29a      	uxth	r2, r3
 8007392:	88bb      	ldrh	r3, [r7, #4]
 8007394:	3303      	adds	r3, #3
 8007396:	b29b      	uxth	r3, r3
 8007398:	f023 0303 	bic.w	r3, r3, #3
 800739c:	b29b      	uxth	r3, r3
 800739e:	4413      	add	r3, r2
 80073a0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80073a2:	8b3b      	ldrh	r3, [r7, #24]
 80073a4:	3310      	adds	r3, #16
 80073a6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80073a8:	8b3a      	ldrh	r2, [r7, #24]
 80073aa:	88bb      	ldrh	r3, [r7, #4]
 80073ac:	3303      	adds	r3, #3
 80073ae:	f023 0303 	bic.w	r3, r3, #3
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d306      	bcc.n	80073c4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80073b6:	8afa      	ldrh	r2, [r7, #22]
 80073b8:	88bb      	ldrh	r3, [r7, #4]
 80073ba:	3303      	adds	r3, #3
 80073bc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d201      	bcs.n	80073c8 <pbuf_alloc+0x160>
        return NULL;
 80073c4:	2300      	movs	r3, #0
 80073c6:	e035      	b.n	8007434 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80073c8:	8afb      	ldrh	r3, [r7, #22]
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7ff f9ba 	bl	8006744 <mem_malloc>
 80073d0:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 80073d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d101      	bne.n	80073dc <pbuf_alloc+0x174>
        return NULL;
 80073d8:	2300      	movs	r3, #0
 80073da:	e02b      	b.n	8007434 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80073dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80073de:	3310      	adds	r3, #16
 80073e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073e2:	4413      	add	r3, r2
 80073e4:	3303      	adds	r3, #3
 80073e6:	f023 0303 	bic.w	r3, r3, #3
 80073ea:	4618      	mov	r0, r3
 80073ec:	88b9      	ldrh	r1, [r7, #4]
 80073ee:	88ba      	ldrh	r2, [r7, #4]
 80073f0:	2300      	movs	r3, #0
 80073f2:	9301      	str	r3, [sp, #4]
 80073f4:	887b      	ldrh	r3, [r7, #2]
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	460b      	mov	r3, r1
 80073fa:	4601      	mov	r1, r0
 80073fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80073fe:	f7ff ff09 	bl	8007214 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f003 0303 	and.w	r3, r3, #3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d010      	beq.n	8007430 <pbuf_alloc+0x1c8>
 800740e:	4b0b      	ldr	r3, [pc, #44]	@ (800743c <pbuf_alloc+0x1d4>)
 8007410:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8007414:	490d      	ldr	r1, [pc, #52]	@ (800744c <pbuf_alloc+0x1e4>)
 8007416:	480b      	ldr	r0, [pc, #44]	@ (8007444 <pbuf_alloc+0x1dc>)
 8007418:	f00a fea6 	bl	8012168 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800741c:	e008      	b.n	8007430 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800741e:	4b07      	ldr	r3, [pc, #28]	@ (800743c <pbuf_alloc+0x1d4>)
 8007420:	f240 1227 	movw	r2, #295	@ 0x127
 8007424:	490a      	ldr	r1, [pc, #40]	@ (8007450 <pbuf_alloc+0x1e8>)
 8007426:	4807      	ldr	r0, [pc, #28]	@ (8007444 <pbuf_alloc+0x1dc>)
 8007428:	f00a fe9e 	bl	8012168 <iprintf>
      return NULL;
 800742c:	2300      	movs	r3, #0
 800742e:	e001      	b.n	8007434 <pbuf_alloc+0x1cc>
      break;
 8007430:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007434:	4618      	mov	r0, r3
 8007436:	3728      	adds	r7, #40	@ 0x28
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	080139b8 	.word	0x080139b8
 8007440:	080139e8 	.word	0x080139e8
 8007444:	08013a18 	.word	0x08013a18
 8007448:	08013a40 	.word	0x08013a40
 800744c:	08013a74 	.word	0x08013a74
 8007450:	08013aa0 	.word	0x08013aa0

08007454 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b086      	sub	sp, #24
 8007458:	af02      	add	r7, sp, #8
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	460b      	mov	r3, r1
 800745e:	807b      	strh	r3, [r7, #2]
 8007460:	4613      	mov	r3, r2
 8007462:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007464:	883b      	ldrh	r3, [r7, #0]
 8007466:	2b41      	cmp	r3, #65	@ 0x41
 8007468:	d009      	beq.n	800747e <pbuf_alloc_reference+0x2a>
 800746a:	883b      	ldrh	r3, [r7, #0]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d006      	beq.n	800747e <pbuf_alloc_reference+0x2a>
 8007470:	4b0f      	ldr	r3, [pc, #60]	@ (80074b0 <pbuf_alloc_reference+0x5c>)
 8007472:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8007476:	490f      	ldr	r1, [pc, #60]	@ (80074b4 <pbuf_alloc_reference+0x60>)
 8007478:	480f      	ldr	r0, [pc, #60]	@ (80074b8 <pbuf_alloc_reference+0x64>)
 800747a:	f00a fe75 	bl	8012168 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800747e:	2007      	movs	r0, #7
 8007480:	f7ff faf0 	bl	8006a64 <memp_malloc>
 8007484:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d101      	bne.n	8007490 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800748c:	2300      	movs	r3, #0
 800748e:	e00b      	b.n	80074a8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8007490:	8879      	ldrh	r1, [r7, #2]
 8007492:	887a      	ldrh	r2, [r7, #2]
 8007494:	2300      	movs	r3, #0
 8007496:	9301      	str	r3, [sp, #4]
 8007498:	883b      	ldrh	r3, [r7, #0]
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	460b      	mov	r3, r1
 800749e:	6879      	ldr	r1, [r7, #4]
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f7ff feb7 	bl	8007214 <pbuf_init_alloced_pbuf>
  return p;
 80074a6:	68fb      	ldr	r3, [r7, #12]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	080139b8 	.word	0x080139b8
 80074b4:	08013abc 	.word	0x08013abc
 80074b8:	08013a18 	.word	0x08013a18

080074bc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b088      	sub	sp, #32
 80074c0:	af02      	add	r7, sp, #8
 80074c2:	607b      	str	r3, [r7, #4]
 80074c4:	4603      	mov	r3, r0
 80074c6:	73fb      	strb	r3, [r7, #15]
 80074c8:	460b      	mov	r3, r1
 80074ca:	81bb      	strh	r3, [r7, #12]
 80074cc:	4613      	mov	r3, r2
 80074ce:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80074d0:	7bfb      	ldrb	r3, [r7, #15]
 80074d2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80074d4:	8a7b      	ldrh	r3, [r7, #18]
 80074d6:	3303      	adds	r3, #3
 80074d8:	f023 0203 	bic.w	r2, r3, #3
 80074dc:	89bb      	ldrh	r3, [r7, #12]
 80074de:	441a      	add	r2, r3
 80074e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d901      	bls.n	80074ea <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80074e6:	2300      	movs	r3, #0
 80074e8:	e018      	b.n	800751c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80074ea:	6a3b      	ldr	r3, [r7, #32]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d007      	beq.n	8007500 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80074f0:	8a7b      	ldrh	r3, [r7, #18]
 80074f2:	3303      	adds	r3, #3
 80074f4:	f023 0303 	bic.w	r3, r3, #3
 80074f8:	6a3a      	ldr	r2, [r7, #32]
 80074fa:	4413      	add	r3, r2
 80074fc:	617b      	str	r3, [r7, #20]
 80074fe:	e001      	b.n	8007504 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8007500:	2300      	movs	r3, #0
 8007502:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	89b9      	ldrh	r1, [r7, #12]
 8007508:	89ba      	ldrh	r2, [r7, #12]
 800750a:	2302      	movs	r3, #2
 800750c:	9301      	str	r3, [sp, #4]
 800750e:	897b      	ldrh	r3, [r7, #10]
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	460b      	mov	r3, r1
 8007514:	6979      	ldr	r1, [r7, #20]
 8007516:	f7ff fe7d 	bl	8007214 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800751a:	687b      	ldr	r3, [r7, #4]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3718      	adds	r7, #24
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	460b      	mov	r3, r1
 800752e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d106      	bne.n	8007544 <pbuf_realloc+0x20>
 8007536:	4b3a      	ldr	r3, [pc, #232]	@ (8007620 <pbuf_realloc+0xfc>)
 8007538:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800753c:	4939      	ldr	r1, [pc, #228]	@ (8007624 <pbuf_realloc+0x100>)
 800753e:	483a      	ldr	r0, [pc, #232]	@ (8007628 <pbuf_realloc+0x104>)
 8007540:	f00a fe12 	bl	8012168 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	891b      	ldrh	r3, [r3, #8]
 8007548:	887a      	ldrh	r2, [r7, #2]
 800754a:	429a      	cmp	r2, r3
 800754c:	d263      	bcs.n	8007616 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	891a      	ldrh	r2, [r3, #8]
 8007552:	887b      	ldrh	r3, [r7, #2]
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007558:	887b      	ldrh	r3, [r7, #2]
 800755a:	817b      	strh	r3, [r7, #10]
  q = p;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007560:	e018      	b.n	8007594 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	895b      	ldrh	r3, [r3, #10]
 8007566:	897a      	ldrh	r2, [r7, #10]
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	891a      	ldrh	r2, [r3, #8]
 8007570:	893b      	ldrh	r3, [r7, #8]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	b29a      	uxth	r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d106      	bne.n	8007594 <pbuf_realloc+0x70>
 8007586:	4b26      	ldr	r3, [pc, #152]	@ (8007620 <pbuf_realloc+0xfc>)
 8007588:	f240 12af 	movw	r2, #431	@ 0x1af
 800758c:	4927      	ldr	r1, [pc, #156]	@ (800762c <pbuf_realloc+0x108>)
 800758e:	4826      	ldr	r0, [pc, #152]	@ (8007628 <pbuf_realloc+0x104>)
 8007590:	f00a fdea 	bl	8012168 <iprintf>
  while (rem_len > q->len) {
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	895b      	ldrh	r3, [r3, #10]
 8007598:	897a      	ldrh	r2, [r7, #10]
 800759a:	429a      	cmp	r2, r3
 800759c:	d8e1      	bhi.n	8007562 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	7b1b      	ldrb	r3, [r3, #12]
 80075a2:	f003 030f 	and.w	r3, r3, #15
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d121      	bne.n	80075ee <pbuf_realloc+0xca>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	895b      	ldrh	r3, [r3, #10]
 80075ae:	897a      	ldrh	r2, [r7, #10]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d01c      	beq.n	80075ee <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	7b5b      	ldrb	r3, [r3, #13]
 80075b8:	f003 0302 	and.w	r3, r3, #2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d116      	bne.n	80075ee <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	685a      	ldr	r2, [r3, #4]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	897b      	ldrh	r3, [r7, #10]
 80075cc:	4413      	add	r3, r2
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	4619      	mov	r1, r3
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f7fe ffba 	bl	800654c <mem_trim>
 80075d8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d106      	bne.n	80075ee <pbuf_realloc+0xca>
 80075e0:	4b0f      	ldr	r3, [pc, #60]	@ (8007620 <pbuf_realloc+0xfc>)
 80075e2:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80075e6:	4912      	ldr	r1, [pc, #72]	@ (8007630 <pbuf_realloc+0x10c>)
 80075e8:	480f      	ldr	r0, [pc, #60]	@ (8007628 <pbuf_realloc+0x104>)
 80075ea:	f00a fdbd 	bl	8012168 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	897a      	ldrh	r2, [r7, #10]
 80075f2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	895a      	ldrh	r2, [r3, #10]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d004      	beq.n	800760e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4618      	mov	r0, r3
 800760a:	f000 f911 	bl	8007830 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	601a      	str	r2, [r3, #0]
 8007614:	e000      	b.n	8007618 <pbuf_realloc+0xf4>
    return;
 8007616:	bf00      	nop

}
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	080139b8 	.word	0x080139b8
 8007624:	08013ad0 	.word	0x08013ad0
 8007628:	08013a18 	.word	0x08013a18
 800762c:	08013ae8 	.word	0x08013ae8
 8007630:	08013b00 	.word	0x08013b00

08007634 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b086      	sub	sp, #24
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	4613      	mov	r3, r2
 8007640:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d106      	bne.n	8007656 <pbuf_add_header_impl+0x22>
 8007648:	4b2b      	ldr	r3, [pc, #172]	@ (80076f8 <pbuf_add_header_impl+0xc4>)
 800764a:	f240 12df 	movw	r2, #479	@ 0x1df
 800764e:	492b      	ldr	r1, [pc, #172]	@ (80076fc <pbuf_add_header_impl+0xc8>)
 8007650:	482b      	ldr	r0, [pc, #172]	@ (8007700 <pbuf_add_header_impl+0xcc>)
 8007652:	f00a fd89 	bl	8012168 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d003      	beq.n	8007664 <pbuf_add_header_impl+0x30>
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007662:	d301      	bcc.n	8007668 <pbuf_add_header_impl+0x34>
    return 1;
 8007664:	2301      	movs	r3, #1
 8007666:	e043      	b.n	80076f0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <pbuf_add_header_impl+0x3e>
    return 0;
 800766e:	2300      	movs	r3, #0
 8007670:	e03e      	b.n	80076f0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	891a      	ldrh	r2, [r3, #8]
 800767a:	8a7b      	ldrh	r3, [r7, #18]
 800767c:	4413      	add	r3, r2
 800767e:	b29b      	uxth	r3, r3
 8007680:	8a7a      	ldrh	r2, [r7, #18]
 8007682:	429a      	cmp	r2, r3
 8007684:	d901      	bls.n	800768a <pbuf_add_header_impl+0x56>
    return 1;
 8007686:	2301      	movs	r3, #1
 8007688:	e032      	b.n	80076f0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	7b1b      	ldrb	r3, [r3, #12]
 800768e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007690:	8a3b      	ldrh	r3, [r7, #16]
 8007692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00c      	beq.n	80076b4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	425b      	negs	r3, r3
 80076a2:	4413      	add	r3, r2
 80076a4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	3310      	adds	r3, #16
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d20d      	bcs.n	80076cc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e01d      	b.n	80076f0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80076b4:	79fb      	ldrb	r3, [r7, #7]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d006      	beq.n	80076c8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	425b      	negs	r3, r3
 80076c2:	4413      	add	r3, r2
 80076c4:	617b      	str	r3, [r7, #20]
 80076c6:	e001      	b.n	80076cc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e011      	b.n	80076f0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	895a      	ldrh	r2, [r3, #10]
 80076d6:	8a7b      	ldrh	r3, [r7, #18]
 80076d8:	4413      	add	r3, r2
 80076da:	b29a      	uxth	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	891a      	ldrh	r2, [r3, #8]
 80076e4:	8a7b      	ldrh	r3, [r7, #18]
 80076e6:	4413      	add	r3, r2
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	811a      	strh	r2, [r3, #8]


  return 0;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3718      	adds	r7, #24
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	080139b8 	.word	0x080139b8
 80076fc:	08013b1c 	.word	0x08013b1c
 8007700:	08013a18 	.word	0x08013a18

08007704 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800770e:	2200      	movs	r2, #0
 8007710:	6839      	ldr	r1, [r7, #0]
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7ff ff8e 	bl	8007634 <pbuf_add_header_impl>
 8007718:	4603      	mov	r3, r0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
	...

08007724 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d106      	bne.n	8007742 <pbuf_remove_header+0x1e>
 8007734:	4b20      	ldr	r3, [pc, #128]	@ (80077b8 <pbuf_remove_header+0x94>)
 8007736:	f240 224b 	movw	r2, #587	@ 0x24b
 800773a:	4920      	ldr	r1, [pc, #128]	@ (80077bc <pbuf_remove_header+0x98>)
 800773c:	4820      	ldr	r0, [pc, #128]	@ (80077c0 <pbuf_remove_header+0x9c>)
 800773e:	f00a fd13 	bl	8012168 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d003      	beq.n	8007750 <pbuf_remove_header+0x2c>
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800774e:	d301      	bcc.n	8007754 <pbuf_remove_header+0x30>
    return 1;
 8007750:	2301      	movs	r3, #1
 8007752:	e02c      	b.n	80077ae <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d101      	bne.n	800775e <pbuf_remove_header+0x3a>
    return 0;
 800775a:	2300      	movs	r3, #0
 800775c:	e027      	b.n	80077ae <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	895b      	ldrh	r3, [r3, #10]
 8007766:	89fa      	ldrh	r2, [r7, #14]
 8007768:	429a      	cmp	r2, r3
 800776a:	d908      	bls.n	800777e <pbuf_remove_header+0x5a>
 800776c:	4b12      	ldr	r3, [pc, #72]	@ (80077b8 <pbuf_remove_header+0x94>)
 800776e:	f240 2255 	movw	r2, #597	@ 0x255
 8007772:	4914      	ldr	r1, [pc, #80]	@ (80077c4 <pbuf_remove_header+0xa0>)
 8007774:	4812      	ldr	r0, [pc, #72]	@ (80077c0 <pbuf_remove_header+0x9c>)
 8007776:	f00a fcf7 	bl	8012168 <iprintf>
 800777a:	2301      	movs	r3, #1
 800777c:	e017      	b.n	80077ae <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	441a      	add	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	895a      	ldrh	r2, [r3, #10]
 8007794:	89fb      	ldrh	r3, [r7, #14]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	b29a      	uxth	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	891a      	ldrh	r2, [r3, #8]
 80077a2:	89fb      	ldrh	r3, [r7, #14]
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	080139b8 	.word	0x080139b8
 80077bc:	08013b1c 	.word	0x08013b1c
 80077c0:	08013a18 	.word	0x08013a18
 80077c4:	08013b28 	.word	0x08013b28

080077c8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	460b      	mov	r3, r1
 80077d2:	807b      	strh	r3, [r7, #2]
 80077d4:	4613      	mov	r3, r2
 80077d6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80077d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	da08      	bge.n	80077f2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80077e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80077e4:	425b      	negs	r3, r3
 80077e6:	4619      	mov	r1, r3
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7ff ff9b 	bl	8007724 <pbuf_remove_header>
 80077ee:	4603      	mov	r3, r0
 80077f0:	e007      	b.n	8007802 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80077f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80077f6:	787a      	ldrb	r2, [r7, #1]
 80077f8:	4619      	mov	r1, r3
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7ff ff1a 	bl	8007634 <pbuf_add_header_impl>
 8007800:	4603      	mov	r3, r0
  }
}
 8007802:	4618      	mov	r0, r3
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b082      	sub	sp, #8
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	460b      	mov	r3, r1
 8007814:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007816:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800781a:	2201      	movs	r2, #1
 800781c:	4619      	mov	r1, r3
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f7ff ffd2 	bl	80077c8 <pbuf_header_impl>
 8007824:	4603      	mov	r3, r0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
	...

08007830 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d10b      	bne.n	8007856 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d106      	bne.n	8007852 <pbuf_free+0x22>
 8007844:	4b38      	ldr	r3, [pc, #224]	@ (8007928 <pbuf_free+0xf8>)
 8007846:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800784a:	4938      	ldr	r1, [pc, #224]	@ (800792c <pbuf_free+0xfc>)
 800784c:	4838      	ldr	r0, [pc, #224]	@ (8007930 <pbuf_free+0x100>)
 800784e:	f00a fc8b 	bl	8012168 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007852:	2300      	movs	r3, #0
 8007854:	e063      	b.n	800791e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007856:	2300      	movs	r3, #0
 8007858:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800785a:	e05c      	b.n	8007916 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	7b9b      	ldrb	r3, [r3, #14]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d106      	bne.n	8007872 <pbuf_free+0x42>
 8007864:	4b30      	ldr	r3, [pc, #192]	@ (8007928 <pbuf_free+0xf8>)
 8007866:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800786a:	4932      	ldr	r1, [pc, #200]	@ (8007934 <pbuf_free+0x104>)
 800786c:	4830      	ldr	r0, [pc, #192]	@ (8007930 <pbuf_free+0x100>)
 800786e:	f00a fc7b 	bl	8012168 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	7b9b      	ldrb	r3, [r3, #14]
 8007876:	3b01      	subs	r3, #1
 8007878:	b2da      	uxtb	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	739a      	strb	r2, [r3, #14]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	7b9b      	ldrb	r3, [r3, #14]
 8007882:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007884:	7dbb      	ldrb	r3, [r7, #22]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d143      	bne.n	8007912 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	7b1b      	ldrb	r3, [r3, #12]
 8007894:	f003 030f 	and.w	r3, r3, #15
 8007898:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	7b5b      	ldrb	r3, [r3, #13]
 800789e:	f003 0302 	and.w	r3, r3, #2
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d011      	beq.n	80078ca <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d106      	bne.n	80078c0 <pbuf_free+0x90>
 80078b2:	4b1d      	ldr	r3, [pc, #116]	@ (8007928 <pbuf_free+0xf8>)
 80078b4:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80078b8:	491f      	ldr	r1, [pc, #124]	@ (8007938 <pbuf_free+0x108>)
 80078ba:	481d      	ldr	r0, [pc, #116]	@ (8007930 <pbuf_free+0x100>)
 80078bc:	f00a fc54 	bl	8012168 <iprintf>
        pc->custom_free_function(p);
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	4798      	blx	r3
 80078c8:	e01d      	b.n	8007906 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d104      	bne.n	80078da <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80078d0:	6879      	ldr	r1, [r7, #4]
 80078d2:	2008      	movs	r0, #8
 80078d4:	f7ff f936 	bl	8006b44 <memp_free>
 80078d8:	e015      	b.n	8007906 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80078da:	7bfb      	ldrb	r3, [r7, #15]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d104      	bne.n	80078ea <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80078e0:	6879      	ldr	r1, [r7, #4]
 80078e2:	2007      	movs	r0, #7
 80078e4:	f7ff f92e 	bl	8006b44 <memp_free>
 80078e8:	e00d      	b.n	8007906 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80078ea:	7bfb      	ldrb	r3, [r7, #15]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d103      	bne.n	80078f8 <pbuf_free+0xc8>
          mem_free(p);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7fe fdc1 	bl	8006478 <mem_free>
 80078f6:	e006      	b.n	8007906 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80078f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007928 <pbuf_free+0xf8>)
 80078fa:	f240 320f 	movw	r2, #783	@ 0x30f
 80078fe:	490f      	ldr	r1, [pc, #60]	@ (800793c <pbuf_free+0x10c>)
 8007900:	480b      	ldr	r0, [pc, #44]	@ (8007930 <pbuf_free+0x100>)
 8007902:	f00a fc31 	bl	8012168 <iprintf>
        }
      }
      count++;
 8007906:	7dfb      	ldrb	r3, [r7, #23]
 8007908:	3301      	adds	r3, #1
 800790a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	607b      	str	r3, [r7, #4]
 8007910:	e001      	b.n	8007916 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8007912:	2300      	movs	r3, #0
 8007914:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d19f      	bne.n	800785c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800791c:	7dfb      	ldrb	r3, [r7, #23]
}
 800791e:	4618      	mov	r0, r3
 8007920:	3718      	adds	r7, #24
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	080139b8 	.word	0x080139b8
 800792c:	08013b1c 	.word	0x08013b1c
 8007930:	08013a18 	.word	0x08013a18
 8007934:	08013b48 	.word	0x08013b48
 8007938:	08013b60 	.word	0x08013b60
 800793c:	08013b84 	.word	0x08013b84

08007940 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007948:	2300      	movs	r3, #0
 800794a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800794c:	e005      	b.n	800795a <pbuf_clen+0x1a>
    ++len;
 800794e:	89fb      	ldrh	r3, [r7, #14]
 8007950:	3301      	adds	r3, #1
 8007952:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1f6      	bne.n	800794e <pbuf_clen+0xe>
  }
  return len;
 8007960:	89fb      	ldrh	r3, [r7, #14]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3714      	adds	r7, #20
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
	...

08007970 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d010      	beq.n	80079a0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	7b9b      	ldrb	r3, [r3, #14]
 8007982:	3301      	adds	r3, #1
 8007984:	b2da      	uxtb	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	7b9b      	ldrb	r3, [r3, #14]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d106      	bne.n	80079a0 <pbuf_ref+0x30>
 8007992:	4b05      	ldr	r3, [pc, #20]	@ (80079a8 <pbuf_ref+0x38>)
 8007994:	f240 3242 	movw	r2, #834	@ 0x342
 8007998:	4904      	ldr	r1, [pc, #16]	@ (80079ac <pbuf_ref+0x3c>)
 800799a:	4805      	ldr	r0, [pc, #20]	@ (80079b0 <pbuf_ref+0x40>)
 800799c:	f00a fbe4 	bl	8012168 <iprintf>
  }
}
 80079a0:	bf00      	nop
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	080139b8 	.word	0x080139b8
 80079ac:	08013b98 	.word	0x08013b98
 80079b0:	08013a18 	.word	0x08013a18

080079b4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d002      	beq.n	80079ca <pbuf_cat+0x16>
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d107      	bne.n	80079da <pbuf_cat+0x26>
 80079ca:	4b20      	ldr	r3, [pc, #128]	@ (8007a4c <pbuf_cat+0x98>)
 80079cc:	f240 3259 	movw	r2, #857	@ 0x359
 80079d0:	491f      	ldr	r1, [pc, #124]	@ (8007a50 <pbuf_cat+0x9c>)
 80079d2:	4820      	ldr	r0, [pc, #128]	@ (8007a54 <pbuf_cat+0xa0>)
 80079d4:	f00a fbc8 	bl	8012168 <iprintf>
 80079d8:	e034      	b.n	8007a44 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	60fb      	str	r3, [r7, #12]
 80079de:	e00a      	b.n	80079f6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	891a      	ldrh	r2, [r3, #8]
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	891b      	ldrh	r3, [r3, #8]
 80079e8:	4413      	add	r3, r2
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	60fb      	str	r3, [r7, #12]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1f0      	bne.n	80079e0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	891a      	ldrh	r2, [r3, #8]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	895b      	ldrh	r3, [r3, #10]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d006      	beq.n	8007a18 <pbuf_cat+0x64>
 8007a0a:	4b10      	ldr	r3, [pc, #64]	@ (8007a4c <pbuf_cat+0x98>)
 8007a0c:	f240 3262 	movw	r2, #866	@ 0x362
 8007a10:	4911      	ldr	r1, [pc, #68]	@ (8007a58 <pbuf_cat+0xa4>)
 8007a12:	4810      	ldr	r0, [pc, #64]	@ (8007a54 <pbuf_cat+0xa0>)
 8007a14:	f00a fba8 	bl	8012168 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d006      	beq.n	8007a2e <pbuf_cat+0x7a>
 8007a20:	4b0a      	ldr	r3, [pc, #40]	@ (8007a4c <pbuf_cat+0x98>)
 8007a22:	f240 3263 	movw	r2, #867	@ 0x363
 8007a26:	490d      	ldr	r1, [pc, #52]	@ (8007a5c <pbuf_cat+0xa8>)
 8007a28:	480a      	ldr	r0, [pc, #40]	@ (8007a54 <pbuf_cat+0xa0>)
 8007a2a:	f00a fb9d 	bl	8012168 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	891a      	ldrh	r2, [r3, #8]
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	891b      	ldrh	r3, [r3, #8]
 8007a36:	4413      	add	r3, r2
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	683a      	ldr	r2, [r7, #0]
 8007a42:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	080139b8 	.word	0x080139b8
 8007a50:	08013bac 	.word	0x08013bac
 8007a54:	08013a18 	.word	0x08013a18
 8007a58:	08013be4 	.word	0x08013be4
 8007a5c:	08013c14 	.word	0x08013c14

08007a60 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	617b      	str	r3, [r7, #20]
 8007a6e:	2300      	movs	r3, #0
 8007a70:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d008      	beq.n	8007a8a <pbuf_copy+0x2a>
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d005      	beq.n	8007a8a <pbuf_copy+0x2a>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	891a      	ldrh	r2, [r3, #8]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	891b      	ldrh	r3, [r3, #8]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d209      	bcs.n	8007a9e <pbuf_copy+0x3e>
 8007a8a:	4b57      	ldr	r3, [pc, #348]	@ (8007be8 <pbuf_copy+0x188>)
 8007a8c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8007a90:	4956      	ldr	r1, [pc, #344]	@ (8007bec <pbuf_copy+0x18c>)
 8007a92:	4857      	ldr	r0, [pc, #348]	@ (8007bf0 <pbuf_copy+0x190>)
 8007a94:	f00a fb68 	bl	8012168 <iprintf>
 8007a98:	f06f 030f 	mvn.w	r3, #15
 8007a9c:	e09f      	b.n	8007bde <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	895b      	ldrh	r3, [r3, #10]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	1ad2      	subs	r2, r2, r3
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	895b      	ldrh	r3, [r3, #10]
 8007aac:	4619      	mov	r1, r3
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	1acb      	subs	r3, r1, r3
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d306      	bcc.n	8007ac4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	895b      	ldrh	r3, [r3, #10]
 8007aba:	461a      	mov	r2, r3
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	60fb      	str	r3, [r7, #12]
 8007ac2:	e005      	b.n	8007ad0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	895b      	ldrh	r3, [r3, #10]
 8007ac8:	461a      	mov	r2, r3
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685a      	ldr	r2, [r3, #4]
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	18d0      	adds	r0, r2, r3
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	685a      	ldr	r2, [r3, #4]
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	4413      	add	r3, r2
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	f00a fc8f 	bl	8012406 <memcpy>
    offset_to += len;
 8007ae8:	697a      	ldr	r2, [r7, #20]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	4413      	add	r3, r2
 8007aee:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007af0:	693a      	ldr	r2, [r7, #16]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	4413      	add	r3, r2
 8007af6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	895b      	ldrh	r3, [r3, #10]
 8007afc:	461a      	mov	r2, r3
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d906      	bls.n	8007b12 <pbuf_copy+0xb2>
 8007b04:	4b38      	ldr	r3, [pc, #224]	@ (8007be8 <pbuf_copy+0x188>)
 8007b06:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8007b0a:	493a      	ldr	r1, [pc, #232]	@ (8007bf4 <pbuf_copy+0x194>)
 8007b0c:	4838      	ldr	r0, [pc, #224]	@ (8007bf0 <pbuf_copy+0x190>)
 8007b0e:	f00a fb2b 	bl	8012168 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	895b      	ldrh	r3, [r3, #10]
 8007b16:	461a      	mov	r2, r3
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d906      	bls.n	8007b2c <pbuf_copy+0xcc>
 8007b1e:	4b32      	ldr	r3, [pc, #200]	@ (8007be8 <pbuf_copy+0x188>)
 8007b20:	f240 32da 	movw	r2, #986	@ 0x3da
 8007b24:	4934      	ldr	r1, [pc, #208]	@ (8007bf8 <pbuf_copy+0x198>)
 8007b26:	4832      	ldr	r0, [pc, #200]	@ (8007bf0 <pbuf_copy+0x190>)
 8007b28:	f00a fb1e 	bl	8012168 <iprintf>
    if (offset_from >= p_from->len) {
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	895b      	ldrh	r3, [r3, #10]
 8007b30:	461a      	mov	r2, r3
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d304      	bcc.n	8007b42 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	895b      	ldrh	r3, [r3, #10]
 8007b46:	461a      	mov	r2, r3
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d114      	bne.n	8007b78 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10c      	bne.n	8007b78 <pbuf_copy+0x118>
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d009      	beq.n	8007b78 <pbuf_copy+0x118>
 8007b64:	4b20      	ldr	r3, [pc, #128]	@ (8007be8 <pbuf_copy+0x188>)
 8007b66:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8007b6a:	4924      	ldr	r1, [pc, #144]	@ (8007bfc <pbuf_copy+0x19c>)
 8007b6c:	4820      	ldr	r0, [pc, #128]	@ (8007bf0 <pbuf_copy+0x190>)
 8007b6e:	f00a fafb 	bl	8012168 <iprintf>
 8007b72:	f06f 030f 	mvn.w	r3, #15
 8007b76:	e032      	b.n	8007bde <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d013      	beq.n	8007ba6 <pbuf_copy+0x146>
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	895a      	ldrh	r2, [r3, #10]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	891b      	ldrh	r3, [r3, #8]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d10d      	bne.n	8007ba6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d009      	beq.n	8007ba6 <pbuf_copy+0x146>
 8007b92:	4b15      	ldr	r3, [pc, #84]	@ (8007be8 <pbuf_copy+0x188>)
 8007b94:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8007b98:	4919      	ldr	r1, [pc, #100]	@ (8007c00 <pbuf_copy+0x1a0>)
 8007b9a:	4815      	ldr	r0, [pc, #84]	@ (8007bf0 <pbuf_copy+0x190>)
 8007b9c:	f00a fae4 	bl	8012168 <iprintf>
 8007ba0:	f06f 0305 	mvn.w	r3, #5
 8007ba4:	e01b      	b.n	8007bde <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d013      	beq.n	8007bd4 <pbuf_copy+0x174>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	895a      	ldrh	r2, [r3, #10]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	891b      	ldrh	r3, [r3, #8]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d10d      	bne.n	8007bd4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d009      	beq.n	8007bd4 <pbuf_copy+0x174>
 8007bc0:	4b09      	ldr	r3, [pc, #36]	@ (8007be8 <pbuf_copy+0x188>)
 8007bc2:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8007bc6:	490e      	ldr	r1, [pc, #56]	@ (8007c00 <pbuf_copy+0x1a0>)
 8007bc8:	4809      	ldr	r0, [pc, #36]	@ (8007bf0 <pbuf_copy+0x190>)
 8007bca:	f00a facd 	bl	8012168 <iprintf>
 8007bce:	f06f 0305 	mvn.w	r3, #5
 8007bd2:	e004      	b.n	8007bde <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f47f af61 	bne.w	8007a9e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3718      	adds	r7, #24
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	080139b8 	.word	0x080139b8
 8007bec:	08013c60 	.word	0x08013c60
 8007bf0:	08013a18 	.word	0x08013a18
 8007bf4:	08013c90 	.word	0x08013c90
 8007bf8:	08013ca8 	.word	0x08013ca8
 8007bfc:	08013cc4 	.word	0x08013cc4
 8007c00:	08013cd4 	.word	0x08013cd4

08007c04 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b088      	sub	sp, #32
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	4611      	mov	r1, r2
 8007c10:	461a      	mov	r2, r3
 8007c12:	460b      	mov	r3, r1
 8007c14:	80fb      	strh	r3, [r7, #6]
 8007c16:	4613      	mov	r3, r2
 8007c18:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d108      	bne.n	8007c3a <pbuf_copy_partial+0x36>
 8007c28:	4b2b      	ldr	r3, [pc, #172]	@ (8007cd8 <pbuf_copy_partial+0xd4>)
 8007c2a:	f240 420a 	movw	r2, #1034	@ 0x40a
 8007c2e:	492b      	ldr	r1, [pc, #172]	@ (8007cdc <pbuf_copy_partial+0xd8>)
 8007c30:	482b      	ldr	r0, [pc, #172]	@ (8007ce0 <pbuf_copy_partial+0xdc>)
 8007c32:	f00a fa99 	bl	8012168 <iprintf>
 8007c36:	2300      	movs	r3, #0
 8007c38:	e04a      	b.n	8007cd0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d108      	bne.n	8007c52 <pbuf_copy_partial+0x4e>
 8007c40:	4b25      	ldr	r3, [pc, #148]	@ (8007cd8 <pbuf_copy_partial+0xd4>)
 8007c42:	f240 420b 	movw	r2, #1035	@ 0x40b
 8007c46:	4927      	ldr	r1, [pc, #156]	@ (8007ce4 <pbuf_copy_partial+0xe0>)
 8007c48:	4825      	ldr	r0, [pc, #148]	@ (8007ce0 <pbuf_copy_partial+0xdc>)
 8007c4a:	f00a fa8d 	bl	8012168 <iprintf>
 8007c4e:	2300      	movs	r3, #0
 8007c50:	e03e      	b.n	8007cd0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	61fb      	str	r3, [r7, #28]
 8007c56:	e034      	b.n	8007cc2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007c58:	88bb      	ldrh	r3, [r7, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00a      	beq.n	8007c74 <pbuf_copy_partial+0x70>
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	895b      	ldrh	r3, [r3, #10]
 8007c62:	88ba      	ldrh	r2, [r7, #4]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d305      	bcc.n	8007c74 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	895b      	ldrh	r3, [r3, #10]
 8007c6c:	88ba      	ldrh	r2, [r7, #4]
 8007c6e:	1ad3      	subs	r3, r2, r3
 8007c70:	80bb      	strh	r3, [r7, #4]
 8007c72:	e023      	b.n	8007cbc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	895a      	ldrh	r2, [r3, #10]
 8007c78:	88bb      	ldrh	r3, [r7, #4]
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007c7e:	8b3a      	ldrh	r2, [r7, #24]
 8007c80:	88fb      	ldrh	r3, [r7, #6]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d901      	bls.n	8007c8a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8007c86:	88fb      	ldrh	r3, [r7, #6]
 8007c88:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007c8a:	8b7b      	ldrh	r3, [r7, #26]
 8007c8c:	68ba      	ldr	r2, [r7, #8]
 8007c8e:	18d0      	adds	r0, r2, r3
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	685a      	ldr	r2, [r3, #4]
 8007c94:	88bb      	ldrh	r3, [r7, #4]
 8007c96:	4413      	add	r3, r2
 8007c98:	8b3a      	ldrh	r2, [r7, #24]
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	f00a fbb3 	bl	8012406 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007ca0:	8afa      	ldrh	r2, [r7, #22]
 8007ca2:	8b3b      	ldrh	r3, [r7, #24]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007ca8:	8b7a      	ldrh	r2, [r7, #26]
 8007caa:	8b3b      	ldrh	r3, [r7, #24]
 8007cac:	4413      	add	r3, r2
 8007cae:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8007cb0:	88fa      	ldrh	r2, [r7, #6]
 8007cb2:	8b3b      	ldrh	r3, [r7, #24]
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	61fb      	str	r3, [r7, #28]
 8007cc2:	88fb      	ldrh	r3, [r7, #6]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d002      	beq.n	8007cce <pbuf_copy_partial+0xca>
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1c4      	bne.n	8007c58 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8007cce:	8afb      	ldrh	r3, [r7, #22]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3720      	adds	r7, #32
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	080139b8 	.word	0x080139b8
 8007cdc:	08013d00 	.word	0x08013d00
 8007ce0:	08013a18 	.word	0x08013a18
 8007ce4:	08013d20 	.word	0x08013d20

08007ce8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	4603      	mov	r3, r0
 8007cf0:	603a      	str	r2, [r7, #0]
 8007cf2:	71fb      	strb	r3, [r7, #7]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	8919      	ldrh	r1, [r3, #8]
 8007cfc:	88ba      	ldrh	r2, [r7, #4]
 8007cfe:	79fb      	ldrb	r3, [r7, #7]
 8007d00:	4618      	mov	r0, r3
 8007d02:	f7ff fab1 	bl	8007268 <pbuf_alloc>
 8007d06:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d101      	bne.n	8007d12 <pbuf_clone+0x2a>
    return NULL;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	e011      	b.n	8007d36 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8007d12:	6839      	ldr	r1, [r7, #0]
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f7ff fea3 	bl	8007a60 <pbuf_copy>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007d1e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d006      	beq.n	8007d34 <pbuf_clone+0x4c>
 8007d26:	4b06      	ldr	r3, [pc, #24]	@ (8007d40 <pbuf_clone+0x58>)
 8007d28:	f240 5224 	movw	r2, #1316	@ 0x524
 8007d2c:	4905      	ldr	r1, [pc, #20]	@ (8007d44 <pbuf_clone+0x5c>)
 8007d2e:	4806      	ldr	r0, [pc, #24]	@ (8007d48 <pbuf_clone+0x60>)
 8007d30:	f00a fa1a 	bl	8012168 <iprintf>
  return q;
 8007d34:	68fb      	ldr	r3, [r7, #12]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	080139b8 	.word	0x080139b8
 8007d44:	08013e2c 	.word	0x08013e2c
 8007d48:	08013a18 	.word	0x08013a18

08007d4c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007d50:	f00a f8f8 	bl	8011f44 <rand>
 8007d54:	4603      	mov	r3, r0
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	4b01      	ldr	r3, [pc, #4]	@ (8007d6c <tcp_init+0x20>)
 8007d66:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007d68:	bf00      	nop
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	20000020 	.word	0x20000020

08007d70 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	7d1b      	ldrb	r3, [r3, #20]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d105      	bne.n	8007d8c <tcp_free+0x1c>
 8007d80:	4b06      	ldr	r3, [pc, #24]	@ (8007d9c <tcp_free+0x2c>)
 8007d82:	22d4      	movs	r2, #212	@ 0xd4
 8007d84:	4906      	ldr	r1, [pc, #24]	@ (8007da0 <tcp_free+0x30>)
 8007d86:	4807      	ldr	r0, [pc, #28]	@ (8007da4 <tcp_free+0x34>)
 8007d88:	f00a f9ee 	bl	8012168 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8007d8c:	6879      	ldr	r1, [r7, #4]
 8007d8e:	2001      	movs	r0, #1
 8007d90:	f7fe fed8 	bl	8006b44 <memp_free>
}
 8007d94:	bf00      	nop
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	08013eb8 	.word	0x08013eb8
 8007da0:	08013ee8 	.word	0x08013ee8
 8007da4:	08013efc 	.word	0x08013efc

08007da8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	7d1b      	ldrb	r3, [r3, #20]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d105      	bne.n	8007dc4 <tcp_free_listen+0x1c>
 8007db8:	4b06      	ldr	r3, [pc, #24]	@ (8007dd4 <tcp_free_listen+0x2c>)
 8007dba:	22df      	movs	r2, #223	@ 0xdf
 8007dbc:	4906      	ldr	r1, [pc, #24]	@ (8007dd8 <tcp_free_listen+0x30>)
 8007dbe:	4807      	ldr	r0, [pc, #28]	@ (8007ddc <tcp_free_listen+0x34>)
 8007dc0:	f00a f9d2 	bl	8012168 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007dc4:	6879      	ldr	r1, [r7, #4]
 8007dc6:	2002      	movs	r0, #2
 8007dc8:	f7fe febc 	bl	8006b44 <memp_free>
}
 8007dcc:	bf00      	nop
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	08013eb8 	.word	0x08013eb8
 8007dd8:	08013f24 	.word	0x08013f24
 8007ddc:	08013efc 	.word	0x08013efc

08007de0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8007de4:	f001 f85e 	bl	8008ea4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8007de8:	4b07      	ldr	r3, [pc, #28]	@ (8007e08 <tcp_tmr+0x28>)
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	3301      	adds	r3, #1
 8007dee:	b2da      	uxtb	r2, r3
 8007df0:	4b05      	ldr	r3, [pc, #20]	@ (8007e08 <tcp_tmr+0x28>)
 8007df2:	701a      	strb	r2, [r3, #0]
 8007df4:	4b04      	ldr	r3, [pc, #16]	@ (8007e08 <tcp_tmr+0x28>)
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	f003 0301 	and.w	r3, r3, #1
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d001      	beq.n	8007e04 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007e00:	f000 fd0e 	bl	8008820 <tcp_slowtmr>
  }
}
 8007e04:	bf00      	nop
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	20008445 	.word	0x20008445

08007e0c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d105      	bne.n	8007e28 <tcp_remove_listener+0x1c>
 8007e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8007e54 <tcp_remove_listener+0x48>)
 8007e1e:	22ff      	movs	r2, #255	@ 0xff
 8007e20:	490d      	ldr	r1, [pc, #52]	@ (8007e58 <tcp_remove_listener+0x4c>)
 8007e22:	480e      	ldr	r0, [pc, #56]	@ (8007e5c <tcp_remove_listener+0x50>)
 8007e24:	f00a f9a0 	bl	8012168 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	e00a      	b.n	8007e44 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d102      	bne.n	8007e3e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	60fb      	str	r3, [r7, #12]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1f1      	bne.n	8007e2e <tcp_remove_listener+0x22>
    }
  }
}
 8007e4a:	bf00      	nop
 8007e4c:	bf00      	nop
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	08013eb8 	.word	0x08013eb8
 8007e58:	08013f40 	.word	0x08013f40
 8007e5c:	08013efc 	.word	0x08013efc

08007e60 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d106      	bne.n	8007e7c <tcp_listen_closed+0x1c>
 8007e6e:	4b14      	ldr	r3, [pc, #80]	@ (8007ec0 <tcp_listen_closed+0x60>)
 8007e70:	f240 1211 	movw	r2, #273	@ 0x111
 8007e74:	4913      	ldr	r1, [pc, #76]	@ (8007ec4 <tcp_listen_closed+0x64>)
 8007e76:	4814      	ldr	r0, [pc, #80]	@ (8007ec8 <tcp_listen_closed+0x68>)
 8007e78:	f00a f976 	bl	8012168 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	7d1b      	ldrb	r3, [r3, #20]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d006      	beq.n	8007e92 <tcp_listen_closed+0x32>
 8007e84:	4b0e      	ldr	r3, [pc, #56]	@ (8007ec0 <tcp_listen_closed+0x60>)
 8007e86:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8007e8a:	4910      	ldr	r1, [pc, #64]	@ (8007ecc <tcp_listen_closed+0x6c>)
 8007e8c:	480e      	ldr	r0, [pc, #56]	@ (8007ec8 <tcp_listen_closed+0x68>)
 8007e8e:	f00a f96b 	bl	8012168 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007e92:	2301      	movs	r3, #1
 8007e94:	60fb      	str	r3, [r7, #12]
 8007e96:	e00b      	b.n	8007eb0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007e98:	4a0d      	ldr	r2, [pc, #52]	@ (8007ed0 <tcp_listen_closed+0x70>)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	6879      	ldr	r1, [r7, #4]
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7ff ffb1 	bl	8007e0c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	3301      	adds	r3, #1
 8007eae:	60fb      	str	r3, [r7, #12]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2b03      	cmp	r3, #3
 8007eb4:	d9f0      	bls.n	8007e98 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8007eb6:	bf00      	nop
 8007eb8:	bf00      	nop
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	08013eb8 	.word	0x08013eb8
 8007ec4:	08013f68 	.word	0x08013f68
 8007ec8:	08013efc 	.word	0x08013efc
 8007ecc:	08013f74 	.word	0x08013f74
 8007ed0:	08015fec 	.word	0x08015fec

08007ed4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8007ed4:	b5b0      	push	{r4, r5, r7, lr}
 8007ed6:	b088      	sub	sp, #32
 8007ed8:	af04      	add	r7, sp, #16
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	460b      	mov	r3, r1
 8007ede:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d106      	bne.n	8007ef4 <tcp_close_shutdown+0x20>
 8007ee6:	4b63      	ldr	r3, [pc, #396]	@ (8008074 <tcp_close_shutdown+0x1a0>)
 8007ee8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8007eec:	4962      	ldr	r1, [pc, #392]	@ (8008078 <tcp_close_shutdown+0x1a4>)
 8007eee:	4863      	ldr	r0, [pc, #396]	@ (800807c <tcp_close_shutdown+0x1a8>)
 8007ef0:	f00a f93a 	bl	8012168 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007ef4:	78fb      	ldrb	r3, [r7, #3]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d066      	beq.n	8007fc8 <tcp_close_shutdown+0xf4>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	7d1b      	ldrb	r3, [r3, #20]
 8007efe:	2b04      	cmp	r3, #4
 8007f00:	d003      	beq.n	8007f0a <tcp_close_shutdown+0x36>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	7d1b      	ldrb	r3, [r3, #20]
 8007f06:	2b07      	cmp	r3, #7
 8007f08:	d15e      	bne.n	8007fc8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d104      	bne.n	8007f1c <tcp_close_shutdown+0x48>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f16:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8007f1a:	d055      	beq.n	8007fc8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	8b5b      	ldrh	r3, [r3, #26]
 8007f20:	f003 0310 	and.w	r3, r3, #16
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d106      	bne.n	8007f36 <tcp_close_shutdown+0x62>
 8007f28:	4b52      	ldr	r3, [pc, #328]	@ (8008074 <tcp_close_shutdown+0x1a0>)
 8007f2a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8007f2e:	4954      	ldr	r1, [pc, #336]	@ (8008080 <tcp_close_shutdown+0x1ac>)
 8007f30:	4852      	ldr	r0, [pc, #328]	@ (800807c <tcp_close_shutdown+0x1a8>)
 8007f32:	f00a f919 	bl	8012168 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007f3e:	687d      	ldr	r5, [r7, #4]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	3304      	adds	r3, #4
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	8ad2      	ldrh	r2, [r2, #22]
 8007f48:	6879      	ldr	r1, [r7, #4]
 8007f4a:	8b09      	ldrh	r1, [r1, #24]
 8007f4c:	9102      	str	r1, [sp, #8]
 8007f4e:	9201      	str	r2, [sp, #4]
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	462b      	mov	r3, r5
 8007f54:	4622      	mov	r2, r4
 8007f56:	4601      	mov	r1, r0
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f005 fce1 	bl	800d920 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f001 fac4 	bl	80094ec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007f64:	4b47      	ldr	r3, [pc, #284]	@ (8008084 <tcp_close_shutdown+0x1b0>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d105      	bne.n	8007f7a <tcp_close_shutdown+0xa6>
 8007f6e:	4b45      	ldr	r3, [pc, #276]	@ (8008084 <tcp_close_shutdown+0x1b0>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	4a43      	ldr	r2, [pc, #268]	@ (8008084 <tcp_close_shutdown+0x1b0>)
 8007f76:	6013      	str	r3, [r2, #0]
 8007f78:	e013      	b.n	8007fa2 <tcp_close_shutdown+0xce>
 8007f7a:	4b42      	ldr	r3, [pc, #264]	@ (8008084 <tcp_close_shutdown+0x1b0>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	60fb      	str	r3, [r7, #12]
 8007f80:	e00c      	b.n	8007f9c <tcp_close_shutdown+0xc8>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d104      	bne.n	8007f96 <tcp_close_shutdown+0xc2>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	68da      	ldr	r2, [r3, #12]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	60da      	str	r2, [r3, #12]
 8007f94:	e005      	b.n	8007fa2 <tcp_close_shutdown+0xce>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	60fb      	str	r3, [r7, #12]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1ef      	bne.n	8007f82 <tcp_close_shutdown+0xae>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	60da      	str	r2, [r3, #12]
 8007fa8:	4b37      	ldr	r3, [pc, #220]	@ (8008088 <tcp_close_shutdown+0x1b4>)
 8007faa:	2201      	movs	r2, #1
 8007fac:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8007fae:	4b37      	ldr	r3, [pc, #220]	@ (800808c <tcp_close_shutdown+0x1b8>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d102      	bne.n	8007fbe <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8007fb8:	f003 ff58 	bl	800be6c <tcp_trigger_input_pcb_close>
 8007fbc:	e002      	b.n	8007fc4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f7ff fed6 	bl	8007d70 <tcp_free>
      }
      return ERR_OK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	e050      	b.n	800806a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	7d1b      	ldrb	r3, [r3, #20]
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d03b      	beq.n	8008048 <tcp_close_shutdown+0x174>
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	dc44      	bgt.n	800805e <tcp_close_shutdown+0x18a>
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d002      	beq.n	8007fde <tcp_close_shutdown+0x10a>
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d02a      	beq.n	8008032 <tcp_close_shutdown+0x15e>
 8007fdc:	e03f      	b.n	800805e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	8adb      	ldrh	r3, [r3, #22]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d021      	beq.n	800802a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007fe6:	4b2a      	ldr	r3, [pc, #168]	@ (8008090 <tcp_close_shutdown+0x1bc>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d105      	bne.n	8007ffc <tcp_close_shutdown+0x128>
 8007ff0:	4b27      	ldr	r3, [pc, #156]	@ (8008090 <tcp_close_shutdown+0x1bc>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	4a26      	ldr	r2, [pc, #152]	@ (8008090 <tcp_close_shutdown+0x1bc>)
 8007ff8:	6013      	str	r3, [r2, #0]
 8007ffa:	e013      	b.n	8008024 <tcp_close_shutdown+0x150>
 8007ffc:	4b24      	ldr	r3, [pc, #144]	@ (8008090 <tcp_close_shutdown+0x1bc>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	60bb      	str	r3, [r7, #8]
 8008002:	e00c      	b.n	800801e <tcp_close_shutdown+0x14a>
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	429a      	cmp	r2, r3
 800800c:	d104      	bne.n	8008018 <tcp_close_shutdown+0x144>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68da      	ldr	r2, [r3, #12]
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	60da      	str	r2, [r3, #12]
 8008016:	e005      	b.n	8008024 <tcp_close_shutdown+0x150>
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	60bb      	str	r3, [r7, #8]
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d1ef      	bne.n	8008004 <tcp_close_shutdown+0x130>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7ff fea0 	bl	8007d70 <tcp_free>
      break;
 8008030:	e01a      	b.n	8008068 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f7ff ff14 	bl	8007e60 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008038:	6879      	ldr	r1, [r7, #4]
 800803a:	4816      	ldr	r0, [pc, #88]	@ (8008094 <tcp_close_shutdown+0x1c0>)
 800803c:	f001 faa6 	bl	800958c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f7ff feb1 	bl	8007da8 <tcp_free_listen>
      break;
 8008046:	e00f      	b.n	8008068 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008048:	6879      	ldr	r1, [r7, #4]
 800804a:	480e      	ldr	r0, [pc, #56]	@ (8008084 <tcp_close_shutdown+0x1b0>)
 800804c:	f001 fa9e 	bl	800958c <tcp_pcb_remove>
 8008050:	4b0d      	ldr	r3, [pc, #52]	@ (8008088 <tcp_close_shutdown+0x1b4>)
 8008052:	2201      	movs	r2, #1
 8008054:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f7ff fe8a 	bl	8007d70 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800805c:	e004      	b.n	8008068 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f81a 	bl	8008098 <tcp_close_shutdown_fin>
 8008064:	4603      	mov	r3, r0
 8008066:	e000      	b.n	800806a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bdb0      	pop	{r4, r5, r7, pc}
 8008072:	bf00      	nop
 8008074:	08013eb8 	.word	0x08013eb8
 8008078:	08013f8c 	.word	0x08013f8c
 800807c:	08013efc 	.word	0x08013efc
 8008080:	08013fac 	.word	0x08013fac
 8008084:	2000843c 	.word	0x2000843c
 8008088:	20008444 	.word	0x20008444
 800808c:	2000847c 	.word	0x2000847c
 8008090:	20008434 	.word	0x20008434
 8008094:	20008438 	.word	0x20008438

08008098 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d106      	bne.n	80080b4 <tcp_close_shutdown_fin+0x1c>
 80080a6:	4b2e      	ldr	r3, [pc, #184]	@ (8008160 <tcp_close_shutdown_fin+0xc8>)
 80080a8:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80080ac:	492d      	ldr	r1, [pc, #180]	@ (8008164 <tcp_close_shutdown_fin+0xcc>)
 80080ae:	482e      	ldr	r0, [pc, #184]	@ (8008168 <tcp_close_shutdown_fin+0xd0>)
 80080b0:	f00a f85a 	bl	8012168 <iprintf>

  switch (pcb->state) {
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	7d1b      	ldrb	r3, [r3, #20]
 80080b8:	2b07      	cmp	r3, #7
 80080ba:	d020      	beq.n	80080fe <tcp_close_shutdown_fin+0x66>
 80080bc:	2b07      	cmp	r3, #7
 80080be:	dc2b      	bgt.n	8008118 <tcp_close_shutdown_fin+0x80>
 80080c0:	2b03      	cmp	r3, #3
 80080c2:	d002      	beq.n	80080ca <tcp_close_shutdown_fin+0x32>
 80080c4:	2b04      	cmp	r3, #4
 80080c6:	d00d      	beq.n	80080e4 <tcp_close_shutdown_fin+0x4c>
 80080c8:	e026      	b.n	8008118 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f004 fd36 	bl	800cb3c <tcp_send_fin>
 80080d0:	4603      	mov	r3, r0
 80080d2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80080d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d11f      	bne.n	800811c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2205      	movs	r2, #5
 80080e0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80080e2:	e01b      	b.n	800811c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f004 fd29 	bl	800cb3c <tcp_send_fin>
 80080ea:	4603      	mov	r3, r0
 80080ec:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80080ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d114      	bne.n	8008120 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2205      	movs	r2, #5
 80080fa:	751a      	strb	r2, [r3, #20]
      }
      break;
 80080fc:	e010      	b.n	8008120 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f004 fd1c 	bl	800cb3c <tcp_send_fin>
 8008104:	4603      	mov	r3, r0
 8008106:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d109      	bne.n	8008124 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2209      	movs	r2, #9
 8008114:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008116:	e005      	b.n	8008124 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008118:	2300      	movs	r3, #0
 800811a:	e01c      	b.n	8008156 <tcp_close_shutdown_fin+0xbe>
      break;
 800811c:	bf00      	nop
 800811e:	e002      	b.n	8008126 <tcp_close_shutdown_fin+0x8e>
      break;
 8008120:	bf00      	nop
 8008122:	e000      	b.n	8008126 <tcp_close_shutdown_fin+0x8e>
      break;
 8008124:	bf00      	nop
  }

  if (err == ERR_OK) {
 8008126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d103      	bne.n	8008136 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f004 fe42 	bl	800cdb8 <tcp_output>
 8008134:	e00d      	b.n	8008152 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8008136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800813a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800813e:	d108      	bne.n	8008152 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	8b5b      	ldrh	r3, [r3, #26]
 8008144:	f043 0308 	orr.w	r3, r3, #8
 8008148:	b29a      	uxth	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800814e:	2300      	movs	r3, #0
 8008150:	e001      	b.n	8008156 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8008152:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	08013eb8 	.word	0x08013eb8
 8008164:	08013f68 	.word	0x08013f68
 8008168:	08013efc 	.word	0x08013efc

0800816c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d109      	bne.n	800818e <tcp_close+0x22>
 800817a:	4b0f      	ldr	r3, [pc, #60]	@ (80081b8 <tcp_close+0x4c>)
 800817c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8008180:	490e      	ldr	r1, [pc, #56]	@ (80081bc <tcp_close+0x50>)
 8008182:	480f      	ldr	r0, [pc, #60]	@ (80081c0 <tcp_close+0x54>)
 8008184:	f009 fff0 	bl	8012168 <iprintf>
 8008188:	f06f 030f 	mvn.w	r3, #15
 800818c:	e00f      	b.n	80081ae <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	7d1b      	ldrb	r3, [r3, #20]
 8008192:	2b01      	cmp	r3, #1
 8008194:	d006      	beq.n	80081a4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	8b5b      	ldrh	r3, [r3, #26]
 800819a:	f043 0310 	orr.w	r3, r3, #16
 800819e:	b29a      	uxth	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80081a4:	2101      	movs	r1, #1
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f7ff fe94 	bl	8007ed4 <tcp_close_shutdown>
 80081ac:	4603      	mov	r3, r0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	08013eb8 	.word	0x08013eb8
 80081bc:	08013fc8 	.word	0x08013fc8
 80081c0:	08013efc 	.word	0x08013efc

080081c4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b08e      	sub	sp, #56	@ 0x38
 80081c8:	af04      	add	r7, sp, #16
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d107      	bne.n	80081e4 <tcp_abandon+0x20>
 80081d4:	4b52      	ldr	r3, [pc, #328]	@ (8008320 <tcp_abandon+0x15c>)
 80081d6:	f240 223d 	movw	r2, #573	@ 0x23d
 80081da:	4952      	ldr	r1, [pc, #328]	@ (8008324 <tcp_abandon+0x160>)
 80081dc:	4852      	ldr	r0, [pc, #328]	@ (8008328 <tcp_abandon+0x164>)
 80081de:	f009 ffc3 	bl	8012168 <iprintf>
 80081e2:	e099      	b.n	8008318 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	7d1b      	ldrb	r3, [r3, #20]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d106      	bne.n	80081fa <tcp_abandon+0x36>
 80081ec:	4b4c      	ldr	r3, [pc, #304]	@ (8008320 <tcp_abandon+0x15c>)
 80081ee:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80081f2:	494e      	ldr	r1, [pc, #312]	@ (800832c <tcp_abandon+0x168>)
 80081f4:	484c      	ldr	r0, [pc, #304]	@ (8008328 <tcp_abandon+0x164>)
 80081f6:	f009 ffb7 	bl	8012168 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	7d1b      	ldrb	r3, [r3, #20]
 80081fe:	2b0a      	cmp	r3, #10
 8008200:	d107      	bne.n	8008212 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008202:	6879      	ldr	r1, [r7, #4]
 8008204:	484a      	ldr	r0, [pc, #296]	@ (8008330 <tcp_abandon+0x16c>)
 8008206:	f001 f9c1 	bl	800958c <tcp_pcb_remove>
    tcp_free(pcb);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7ff fdb0 	bl	8007d70 <tcp_free>
 8008210:	e082      	b.n	8008318 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8008212:	2300      	movs	r3, #0
 8008214:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8008216:	2300      	movs	r3, #0
 8008218:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800821e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008224:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800822c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	7d1b      	ldrb	r3, [r3, #20]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d126      	bne.n	800828a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	8adb      	ldrh	r3, [r3, #22]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d02e      	beq.n	80082a2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008244:	4b3b      	ldr	r3, [pc, #236]	@ (8008334 <tcp_abandon+0x170>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	429a      	cmp	r2, r3
 800824c:	d105      	bne.n	800825a <tcp_abandon+0x96>
 800824e:	4b39      	ldr	r3, [pc, #228]	@ (8008334 <tcp_abandon+0x170>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	4a37      	ldr	r2, [pc, #220]	@ (8008334 <tcp_abandon+0x170>)
 8008256:	6013      	str	r3, [r2, #0]
 8008258:	e013      	b.n	8008282 <tcp_abandon+0xbe>
 800825a:	4b36      	ldr	r3, [pc, #216]	@ (8008334 <tcp_abandon+0x170>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	61fb      	str	r3, [r7, #28]
 8008260:	e00c      	b.n	800827c <tcp_abandon+0xb8>
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	429a      	cmp	r2, r3
 800826a:	d104      	bne.n	8008276 <tcp_abandon+0xb2>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	68da      	ldr	r2, [r3, #12]
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	60da      	str	r2, [r3, #12]
 8008274:	e005      	b.n	8008282 <tcp_abandon+0xbe>
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	61fb      	str	r3, [r7, #28]
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1ef      	bne.n	8008262 <tcp_abandon+0x9e>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	60da      	str	r2, [r3, #12]
 8008288:	e00b      	b.n	80082a2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	8adb      	ldrh	r3, [r3, #22]
 8008292:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008294:	6879      	ldr	r1, [r7, #4]
 8008296:	4828      	ldr	r0, [pc, #160]	@ (8008338 <tcp_abandon+0x174>)
 8008298:	f001 f978 	bl	800958c <tcp_pcb_remove>
 800829c:	4b27      	ldr	r3, [pc, #156]	@ (800833c <tcp_abandon+0x178>)
 800829e:	2201      	movs	r2, #1
 80082a0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d004      	beq.n	80082b4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082ae:	4618      	mov	r0, r3
 80082b0:	f000 fed8 	bl	8009064 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d004      	beq.n	80082c6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082c0:	4618      	mov	r0, r3
 80082c2:	f000 fecf 	bl	8009064 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d004      	beq.n	80082d8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 fec6 	bl	8009064 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80082d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00e      	beq.n	80082fc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80082de:	6879      	ldr	r1, [r7, #4]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	3304      	adds	r3, #4
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	8b12      	ldrh	r2, [r2, #24]
 80082e8:	9202      	str	r2, [sp, #8]
 80082ea:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80082ec:	9201      	str	r2, [sp, #4]
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	460b      	mov	r3, r1
 80082f2:	697a      	ldr	r2, [r7, #20]
 80082f4:	69b9      	ldr	r1, [r7, #24]
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f005 fb12 	bl	800d920 <tcp_rst>
    }
    last_state = pcb->state;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	7d1b      	ldrb	r3, [r3, #20]
 8008300:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f7ff fd34 	bl	8007d70 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d004      	beq.n	8008318 <tcp_abandon+0x154>
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	f06f 010c 	mvn.w	r1, #12
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	4798      	blx	r3
  }
}
 8008318:	3728      	adds	r7, #40	@ 0x28
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	08013eb8 	.word	0x08013eb8
 8008324:	08013ffc 	.word	0x08013ffc
 8008328:	08013efc 	.word	0x08013efc
 800832c:	08014018 	.word	0x08014018
 8008330:	20008440 	.word	0x20008440
 8008334:	20008434 	.word	0x20008434
 8008338:	2000843c 	.word	0x2000843c
 800833c:	20008444 	.word	0x20008444

08008340 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008348:	2101      	movs	r1, #1
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f7ff ff3a 	bl	80081c4 <tcp_abandon>
}
 8008350:	bf00      	nop
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b088      	sub	sp, #32
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	4613      	mov	r3, r2
 8008364:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8008366:	2304      	movs	r3, #4
 8008368:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d101      	bne.n	8008374 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8008370:	4b3e      	ldr	r3, [pc, #248]	@ (800846c <tcp_bind+0x114>)
 8008372:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d109      	bne.n	800838e <tcp_bind+0x36>
 800837a:	4b3d      	ldr	r3, [pc, #244]	@ (8008470 <tcp_bind+0x118>)
 800837c:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8008380:	493c      	ldr	r1, [pc, #240]	@ (8008474 <tcp_bind+0x11c>)
 8008382:	483d      	ldr	r0, [pc, #244]	@ (8008478 <tcp_bind+0x120>)
 8008384:	f009 fef0 	bl	8012168 <iprintf>
 8008388:	f06f 030f 	mvn.w	r3, #15
 800838c:	e06a      	b.n	8008464 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	7d1b      	ldrb	r3, [r3, #20]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d009      	beq.n	80083aa <tcp_bind+0x52>
 8008396:	4b36      	ldr	r3, [pc, #216]	@ (8008470 <tcp_bind+0x118>)
 8008398:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800839c:	4937      	ldr	r1, [pc, #220]	@ (800847c <tcp_bind+0x124>)
 800839e:	4836      	ldr	r0, [pc, #216]	@ (8008478 <tcp_bind+0x120>)
 80083a0:	f009 fee2 	bl	8012168 <iprintf>
 80083a4:	f06f 0305 	mvn.w	r3, #5
 80083a8:	e05c      	b.n	8008464 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80083aa:	88fb      	ldrh	r3, [r7, #6]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d109      	bne.n	80083c4 <tcp_bind+0x6c>
    port = tcp_new_port();
 80083b0:	f000 f9f0 	bl	8008794 <tcp_new_port>
 80083b4:	4603      	mov	r3, r0
 80083b6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80083b8:	88fb      	ldrh	r3, [r7, #6]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d135      	bne.n	800842a <tcp_bind+0xd2>
      return ERR_BUF;
 80083be:	f06f 0301 	mvn.w	r3, #1
 80083c2:	e04f      	b.n	8008464 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80083c4:	2300      	movs	r3, #0
 80083c6:	61fb      	str	r3, [r7, #28]
 80083c8:	e02b      	b.n	8008422 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80083ca:	4a2d      	ldr	r2, [pc, #180]	@ (8008480 <tcp_bind+0x128>)
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	61bb      	str	r3, [r7, #24]
 80083d6:	e01e      	b.n	8008416 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	8adb      	ldrh	r3, [r3, #22]
 80083dc:	88fa      	ldrh	r2, [r7, #6]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d116      	bne.n	8008410 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80083e2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d010      	beq.n	800840a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00c      	beq.n	800840a <tcp_bind+0xb2>
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d009      	beq.n	800840a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d005      	beq.n	800840a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008406:	429a      	cmp	r2, r3
 8008408:	d102      	bne.n	8008410 <tcp_bind+0xb8>
              return ERR_USE;
 800840a:	f06f 0307 	mvn.w	r3, #7
 800840e:	e029      	b.n	8008464 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	61bb      	str	r3, [r7, #24]
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1dd      	bne.n	80083d8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	3301      	adds	r3, #1
 8008420:	61fb      	str	r3, [r7, #28]
 8008422:	69fa      	ldr	r2, [r7, #28]
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	429a      	cmp	r2, r3
 8008428:	dbcf      	blt.n	80083ca <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00c      	beq.n	800844a <tcp_bind+0xf2>
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d008      	beq.n	800844a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d002      	beq.n	8008444 <tcp_bind+0xec>
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	e000      	b.n	8008446 <tcp_bind+0xee>
 8008444:	2300      	movs	r3, #0
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	88fa      	ldrh	r2, [r7, #6]
 800844e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8008450:	4b0c      	ldr	r3, [pc, #48]	@ (8008484 <tcp_bind+0x12c>)
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	60da      	str	r2, [r3, #12]
 8008458:	4a0a      	ldr	r2, [pc, #40]	@ (8008484 <tcp_bind+0x12c>)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6013      	str	r3, [r2, #0]
 800845e:	f005 fc21 	bl	800dca4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3720      	adds	r7, #32
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	08016014 	.word	0x08016014
 8008470:	08013eb8 	.word	0x08013eb8
 8008474:	0801404c 	.word	0x0801404c
 8008478:	08013efc 	.word	0x08013efc
 800847c:	08014064 	.word	0x08014064
 8008480:	08015fec 	.word	0x08015fec
 8008484:	20008434 	.word	0x20008434

08008488 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	4613      	mov	r3, r2
 8008494:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d106      	bne.n	80084aa <tcp_accept_null+0x22>
 800849c:	4b07      	ldr	r3, [pc, #28]	@ (80084bc <tcp_accept_null+0x34>)
 800849e:	f240 320f 	movw	r2, #783	@ 0x30f
 80084a2:	4907      	ldr	r1, [pc, #28]	@ (80084c0 <tcp_accept_null+0x38>)
 80084a4:	4807      	ldr	r0, [pc, #28]	@ (80084c4 <tcp_accept_null+0x3c>)
 80084a6:	f009 fe5f 	bl	8012168 <iprintf>

  tcp_abort(pcb);
 80084aa:	68b8      	ldr	r0, [r7, #8]
 80084ac:	f7ff ff48 	bl	8008340 <tcp_abort>

  return ERR_ABRT;
 80084b0:	f06f 030c 	mvn.w	r3, #12
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	08013eb8 	.word	0x08013eb8
 80084c0:	0801408c 	.word	0x0801408c
 80084c4:	08013efc 	.word	0x08013efc

080084c8 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	460b      	mov	r3, r1
 80084d2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80084d4:	78fb      	ldrb	r3, [r7, #3]
 80084d6:	2200      	movs	r2, #0
 80084d8:	4619      	mov	r1, r3
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 f806 	bl	80084ec <tcp_listen_with_backlog_and_err>
 80084e0:	4603      	mov	r3, r0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3708      	adds	r7, #8
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
	...

080084ec <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b088      	sub	sp, #32
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	460b      	mov	r3, r1
 80084f6:	607a      	str	r2, [r7, #4]
 80084f8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80084fa:	2300      	movs	r3, #0
 80084fc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d109      	bne.n	8008518 <tcp_listen_with_backlog_and_err+0x2c>
 8008504:	4b47      	ldr	r3, [pc, #284]	@ (8008624 <tcp_listen_with_backlog_and_err+0x138>)
 8008506:	f240 3259 	movw	r2, #857	@ 0x359
 800850a:	4947      	ldr	r1, [pc, #284]	@ (8008628 <tcp_listen_with_backlog_and_err+0x13c>)
 800850c:	4847      	ldr	r0, [pc, #284]	@ (800862c <tcp_listen_with_backlog_and_err+0x140>)
 800850e:	f009 fe2b 	bl	8012168 <iprintf>
 8008512:	23f0      	movs	r3, #240	@ 0xf0
 8008514:	76fb      	strb	r3, [r7, #27]
 8008516:	e079      	b.n	800860c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	7d1b      	ldrb	r3, [r3, #20]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d009      	beq.n	8008534 <tcp_listen_with_backlog_and_err+0x48>
 8008520:	4b40      	ldr	r3, [pc, #256]	@ (8008624 <tcp_listen_with_backlog_and_err+0x138>)
 8008522:	f240 325a 	movw	r2, #858	@ 0x35a
 8008526:	4942      	ldr	r1, [pc, #264]	@ (8008630 <tcp_listen_with_backlog_and_err+0x144>)
 8008528:	4840      	ldr	r0, [pc, #256]	@ (800862c <tcp_listen_with_backlog_and_err+0x140>)
 800852a:	f009 fe1d 	bl	8012168 <iprintf>
 800852e:	23f1      	movs	r3, #241	@ 0xf1
 8008530:	76fb      	strb	r3, [r7, #27]
 8008532:	e06b      	b.n	800860c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	7d1b      	ldrb	r3, [r3, #20]
 8008538:	2b01      	cmp	r3, #1
 800853a:	d104      	bne.n	8008546 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8008540:	23f7      	movs	r3, #247	@ 0xf7
 8008542:	76fb      	strb	r3, [r7, #27]
    goto done;
 8008544:	e062      	b.n	800860c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8008546:	2002      	movs	r0, #2
 8008548:	f7fe fa8c 	bl	8006a64 <memp_malloc>
 800854c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d102      	bne.n	800855a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8008554:	23ff      	movs	r3, #255	@ 0xff
 8008556:	76fb      	strb	r3, [r7, #27]
    goto done;
 8008558:	e058      	b.n	800860c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	691a      	ldr	r2, [r3, #16]
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	8ada      	ldrh	r2, [r3, #22]
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	2201      	movs	r2, #1
 800856e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	7d5a      	ldrb	r2, [r3, #21]
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	7a5a      	ldrb	r2, [r3, #9]
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	2200      	movs	r2, #0
 8008584:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	7ada      	ldrb	r2, [r3, #11]
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	7a9a      	ldrb	r2, [r3, #10]
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	8adb      	ldrh	r3, [r3, #22]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d021      	beq.n	80085ea <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80085a6:	4b23      	ldr	r3, [pc, #140]	@ (8008634 <tcp_listen_with_backlog_and_err+0x148>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d105      	bne.n	80085bc <tcp_listen_with_backlog_and_err+0xd0>
 80085b0:	4b20      	ldr	r3, [pc, #128]	@ (8008634 <tcp_listen_with_backlog_and_err+0x148>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	4a1f      	ldr	r2, [pc, #124]	@ (8008634 <tcp_listen_with_backlog_and_err+0x148>)
 80085b8:	6013      	str	r3, [r2, #0]
 80085ba:	e013      	b.n	80085e4 <tcp_listen_with_backlog_and_err+0xf8>
 80085bc:	4b1d      	ldr	r3, [pc, #116]	@ (8008634 <tcp_listen_with_backlog_and_err+0x148>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	617b      	str	r3, [r7, #20]
 80085c2:	e00c      	b.n	80085de <tcp_listen_with_backlog_and_err+0xf2>
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d104      	bne.n	80085d8 <tcp_listen_with_backlog_and_err+0xec>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	68da      	ldr	r2, [r3, #12]
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	60da      	str	r2, [r3, #12]
 80085d6:	e005      	b.n	80085e4 <tcp_listen_with_backlog_and_err+0xf8>
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	617b      	str	r3, [r7, #20]
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1ef      	bne.n	80085c4 <tcp_listen_with_backlog_and_err+0xd8>
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f7ff fbc0 	bl	8007d70 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	4a11      	ldr	r2, [pc, #68]	@ (8008638 <tcp_listen_with_backlog_and_err+0x14c>)
 80085f4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80085f6:	4b11      	ldr	r3, [pc, #68]	@ (800863c <tcp_listen_with_backlog_and_err+0x150>)
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	60da      	str	r2, [r3, #12]
 80085fe:	4a0f      	ldr	r2, [pc, #60]	@ (800863c <tcp_listen_with_backlog_and_err+0x150>)
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	6013      	str	r3, [r2, #0]
 8008604:	f005 fb4e 	bl	800dca4 <tcp_timer_needed>
  res = ERR_OK;
 8008608:	2300      	movs	r3, #0
 800860a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d002      	beq.n	8008618 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	7efa      	ldrb	r2, [r7, #27]
 8008616:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8008618:	69fb      	ldr	r3, [r7, #28]
}
 800861a:	4618      	mov	r0, r3
 800861c:	3720      	adds	r7, #32
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	08013eb8 	.word	0x08013eb8
 8008628:	080140ac 	.word	0x080140ac
 800862c:	08013efc 	.word	0x08013efc
 8008630:	080140dc 	.word	0x080140dc
 8008634:	20008434 	.word	0x20008434
 8008638:	08008489 	.word	0x08008489
 800863c:	20008438 	.word	0x20008438

08008640 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d106      	bne.n	800865c <tcp_update_rcv_ann_wnd+0x1c>
 800864e:	4b25      	ldr	r3, [pc, #148]	@ (80086e4 <tcp_update_rcv_ann_wnd+0xa4>)
 8008650:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8008654:	4924      	ldr	r1, [pc, #144]	@ (80086e8 <tcp_update_rcv_ann_wnd+0xa8>)
 8008656:	4825      	ldr	r0, [pc, #148]	@ (80086ec <tcp_update_rcv_ann_wnd+0xac>)
 8008658:	f009 fd86 	bl	8012168 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8008664:	4413      	add	r3, r2
 8008666:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8008670:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8008674:	bf28      	it	cs
 8008676:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800867a:	b292      	uxth	r2, r2
 800867c:	4413      	add	r3, r2
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	1ad3      	subs	r3, r2, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	db08      	blt.n	8008698 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	e020      	b.n	80086da <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	dd03      	ble.n	80086ae <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80086ac:	e014      	b.n	80086d8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086b6:	1ad3      	subs	r3, r2, r3
 80086b8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086c0:	d306      	bcc.n	80086d0 <tcp_update_rcv_ann_wnd+0x90>
 80086c2:	4b08      	ldr	r3, [pc, #32]	@ (80086e4 <tcp_update_rcv_ann_wnd+0xa4>)
 80086c4:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80086c8:	4909      	ldr	r1, [pc, #36]	@ (80086f0 <tcp_update_rcv_ann_wnd+0xb0>)
 80086ca:	4808      	ldr	r0, [pc, #32]	@ (80086ec <tcp_update_rcv_ann_wnd+0xac>)
 80086cc:	f009 fd4c 	bl	8012168 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	b29a      	uxth	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80086d8:	2300      	movs	r3, #0
  }
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	08013eb8 	.word	0x08013eb8
 80086e8:	08014114 	.word	0x08014114
 80086ec:	08013efc 	.word	0x08013efc
 80086f0:	08014138 	.word	0x08014138

080086f4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	460b      	mov	r3, r1
 80086fe:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d107      	bne.n	8008716 <tcp_recved+0x22>
 8008706:	4b1f      	ldr	r3, [pc, #124]	@ (8008784 <tcp_recved+0x90>)
 8008708:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800870c:	491e      	ldr	r1, [pc, #120]	@ (8008788 <tcp_recved+0x94>)
 800870e:	481f      	ldr	r0, [pc, #124]	@ (800878c <tcp_recved+0x98>)
 8008710:	f009 fd2a 	bl	8012168 <iprintf>
 8008714:	e032      	b.n	800877c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	7d1b      	ldrb	r3, [r3, #20]
 800871a:	2b01      	cmp	r3, #1
 800871c:	d106      	bne.n	800872c <tcp_recved+0x38>
 800871e:	4b19      	ldr	r3, [pc, #100]	@ (8008784 <tcp_recved+0x90>)
 8008720:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8008724:	491a      	ldr	r1, [pc, #104]	@ (8008790 <tcp_recved+0x9c>)
 8008726:	4819      	ldr	r0, [pc, #100]	@ (800878c <tcp_recved+0x98>)
 8008728:	f009 fd1e 	bl	8012168 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008730:	887b      	ldrh	r3, [r7, #2]
 8008732:	4413      	add	r3, r2
 8008734:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008736:	89fb      	ldrh	r3, [r7, #14]
 8008738:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800873c:	d804      	bhi.n	8008748 <tcp_recved+0x54>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008742:	89fa      	ldrh	r2, [r7, #14]
 8008744:	429a      	cmp	r2, r3
 8008746:	d204      	bcs.n	8008752 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800874e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008750:	e002      	b.n	8008758 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	89fa      	ldrh	r2, [r7, #14]
 8008756:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f7ff ff71 	bl	8008640 <tcp_update_rcv_ann_wnd>
 800875e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8008766:	d309      	bcc.n	800877c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	8b5b      	ldrh	r3, [r3, #26]
 800876c:	f043 0302 	orr.w	r3, r3, #2
 8008770:	b29a      	uxth	r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f004 fb1e 	bl	800cdb8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	08013eb8 	.word	0x08013eb8
 8008788:	08014154 	.word	0x08014154
 800878c:	08013efc 	.word	0x08013efc
 8008790:	0801416c 	.word	0x0801416c

08008794 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800879a:	2300      	movs	r3, #0
 800879c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800879e:	4b1e      	ldr	r3, [pc, #120]	@ (8008818 <tcp_new_port+0x84>)
 80087a0:	881b      	ldrh	r3, [r3, #0]
 80087a2:	3301      	adds	r3, #1
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	4b1c      	ldr	r3, [pc, #112]	@ (8008818 <tcp_new_port+0x84>)
 80087a8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80087aa:	4b1b      	ldr	r3, [pc, #108]	@ (8008818 <tcp_new_port+0x84>)
 80087ac:	881b      	ldrh	r3, [r3, #0]
 80087ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d103      	bne.n	80087be <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80087b6:	4b18      	ldr	r3, [pc, #96]	@ (8008818 <tcp_new_port+0x84>)
 80087b8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80087bc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80087be:	2300      	movs	r3, #0
 80087c0:	71fb      	strb	r3, [r7, #7]
 80087c2:	e01e      	b.n	8008802 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80087c4:	79fb      	ldrb	r3, [r7, #7]
 80087c6:	4a15      	ldr	r2, [pc, #84]	@ (800881c <tcp_new_port+0x88>)
 80087c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	603b      	str	r3, [r7, #0]
 80087d0:	e011      	b.n	80087f6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	8ada      	ldrh	r2, [r3, #22]
 80087d6:	4b10      	ldr	r3, [pc, #64]	@ (8008818 <tcp_new_port+0x84>)
 80087d8:	881b      	ldrh	r3, [r3, #0]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d108      	bne.n	80087f0 <tcp_new_port+0x5c>
        n++;
 80087de:	88bb      	ldrh	r3, [r7, #4]
 80087e0:	3301      	adds	r3, #1
 80087e2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80087e4:	88bb      	ldrh	r3, [r7, #4]
 80087e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087ea:	d3d8      	bcc.n	800879e <tcp_new_port+0xa>
          return 0;
 80087ec:	2300      	movs	r3, #0
 80087ee:	e00d      	b.n	800880c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	603b      	str	r3, [r7, #0]
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1ea      	bne.n	80087d2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80087fc:	79fb      	ldrb	r3, [r7, #7]
 80087fe:	3301      	adds	r3, #1
 8008800:	71fb      	strb	r3, [r7, #7]
 8008802:	79fb      	ldrb	r3, [r7, #7]
 8008804:	2b03      	cmp	r3, #3
 8008806:	d9dd      	bls.n	80087c4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8008808:	4b03      	ldr	r3, [pc, #12]	@ (8008818 <tcp_new_port+0x84>)
 800880a:	881b      	ldrh	r3, [r3, #0]
}
 800880c:	4618      	mov	r0, r3
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr
 8008818:	20000020 	.word	0x20000020
 800881c:	08015fec 	.word	0x08015fec

08008820 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008820:	b5b0      	push	{r4, r5, r7, lr}
 8008822:	b090      	sub	sp, #64	@ 0x40
 8008824:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8008826:	2300      	movs	r3, #0
 8008828:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800882c:	4b95      	ldr	r3, [pc, #596]	@ (8008a84 <tcp_slowtmr+0x264>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	3301      	adds	r3, #1
 8008832:	4a94      	ldr	r2, [pc, #592]	@ (8008a84 <tcp_slowtmr+0x264>)
 8008834:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008836:	4b94      	ldr	r3, [pc, #592]	@ (8008a88 <tcp_slowtmr+0x268>)
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	3301      	adds	r3, #1
 800883c:	b2da      	uxtb	r2, r3
 800883e:	4b92      	ldr	r3, [pc, #584]	@ (8008a88 <tcp_slowtmr+0x268>)
 8008840:	701a      	strb	r2, [r3, #0]
 8008842:	e000      	b.n	8008846 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8008844:	bf00      	nop
  prev = NULL;
 8008846:	2300      	movs	r3, #0
 8008848:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800884a:	4b90      	ldr	r3, [pc, #576]	@ (8008a8c <tcp_slowtmr+0x26c>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8008850:	e29f      	b.n	8008d92 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008854:	7d1b      	ldrb	r3, [r3, #20]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d106      	bne.n	8008868 <tcp_slowtmr+0x48>
 800885a:	4b8d      	ldr	r3, [pc, #564]	@ (8008a90 <tcp_slowtmr+0x270>)
 800885c:	f240 42be 	movw	r2, #1214	@ 0x4be
 8008860:	498c      	ldr	r1, [pc, #560]	@ (8008a94 <tcp_slowtmr+0x274>)
 8008862:	488d      	ldr	r0, [pc, #564]	@ (8008a98 <tcp_slowtmr+0x278>)
 8008864:	f009 fc80 	bl	8012168 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800886a:	7d1b      	ldrb	r3, [r3, #20]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d106      	bne.n	800887e <tcp_slowtmr+0x5e>
 8008870:	4b87      	ldr	r3, [pc, #540]	@ (8008a90 <tcp_slowtmr+0x270>)
 8008872:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8008876:	4989      	ldr	r1, [pc, #548]	@ (8008a9c <tcp_slowtmr+0x27c>)
 8008878:	4887      	ldr	r0, [pc, #540]	@ (8008a98 <tcp_slowtmr+0x278>)
 800887a:	f009 fc75 	bl	8012168 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800887e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008880:	7d1b      	ldrb	r3, [r3, #20]
 8008882:	2b0a      	cmp	r3, #10
 8008884:	d106      	bne.n	8008894 <tcp_slowtmr+0x74>
 8008886:	4b82      	ldr	r3, [pc, #520]	@ (8008a90 <tcp_slowtmr+0x270>)
 8008888:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800888c:	4984      	ldr	r1, [pc, #528]	@ (8008aa0 <tcp_slowtmr+0x280>)
 800888e:	4882      	ldr	r0, [pc, #520]	@ (8008a98 <tcp_slowtmr+0x278>)
 8008890:	f009 fc6a 	bl	8012168 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008896:	7f9a      	ldrb	r2, [r3, #30]
 8008898:	4b7b      	ldr	r3, [pc, #492]	@ (8008a88 <tcp_slowtmr+0x268>)
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	429a      	cmp	r2, r3
 800889e:	d105      	bne.n	80088ac <tcp_slowtmr+0x8c>
      prev = pcb;
 80088a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80088a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 80088aa:	e272      	b.n	8008d92 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 80088ac:	4b76      	ldr	r3, [pc, #472]	@ (8008a88 <tcp_slowtmr+0x268>)
 80088ae:	781a      	ldrb	r2, [r3, #0]
 80088b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b2:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 80088b4:	2300      	movs	r3, #0
 80088b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 80088ba:	2300      	movs	r3, #0
 80088bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80088c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c2:	7d1b      	ldrb	r3, [r3, #20]
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	d10a      	bne.n	80088de <tcp_slowtmr+0xbe>
 80088c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80088ce:	2b05      	cmp	r3, #5
 80088d0:	d905      	bls.n	80088de <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80088d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088d6:	3301      	adds	r3, #1
 80088d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80088dc:	e11e      	b.n	8008b1c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80088de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80088e4:	2b0b      	cmp	r3, #11
 80088e6:	d905      	bls.n	80088f4 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80088e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088ec:	3301      	adds	r3, #1
 80088ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80088f2:	e113      	b.n	8008b1c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80088f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088f6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d075      	beq.n	80089ea <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80088fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008902:	2b00      	cmp	r3, #0
 8008904:	d006      	beq.n	8008914 <tcp_slowtmr+0xf4>
 8008906:	4b62      	ldr	r3, [pc, #392]	@ (8008a90 <tcp_slowtmr+0x270>)
 8008908:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800890c:	4965      	ldr	r1, [pc, #404]	@ (8008aa4 <tcp_slowtmr+0x284>)
 800890e:	4862      	ldr	r0, [pc, #392]	@ (8008a98 <tcp_slowtmr+0x278>)
 8008910:	f009 fc2a 	bl	8012168 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008916:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008918:	2b00      	cmp	r3, #0
 800891a:	d106      	bne.n	800892a <tcp_slowtmr+0x10a>
 800891c:	4b5c      	ldr	r3, [pc, #368]	@ (8008a90 <tcp_slowtmr+0x270>)
 800891e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8008922:	4961      	ldr	r1, [pc, #388]	@ (8008aa8 <tcp_slowtmr+0x288>)
 8008924:	485c      	ldr	r0, [pc, #368]	@ (8008a98 <tcp_slowtmr+0x278>)
 8008926:	f009 fc1f 	bl	8012168 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800892a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800892c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8008930:	2b0b      	cmp	r3, #11
 8008932:	d905      	bls.n	8008940 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8008934:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008938:	3301      	adds	r3, #1
 800893a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800893e:	e0ed      	b.n	8008b1c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008942:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008946:	3b01      	subs	r3, #1
 8008948:	4a58      	ldr	r2, [pc, #352]	@ (8008aac <tcp_slowtmr+0x28c>)
 800894a:	5cd3      	ldrb	r3, [r2, r3]
 800894c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800894e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008950:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008954:	7c7a      	ldrb	r2, [r7, #17]
 8008956:	429a      	cmp	r2, r3
 8008958:	d907      	bls.n	800896a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800895a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800895c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008960:	3301      	adds	r3, #1
 8008962:	b2da      	uxtb	r2, r3
 8008964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008966:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800896a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800896c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008970:	7c7a      	ldrb	r2, [r7, #17]
 8008972:	429a      	cmp	r2, r3
 8008974:	f200 80d2 	bhi.w	8008b1c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8008978:	2301      	movs	r3, #1
 800897a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800897c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800897e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008982:	2b00      	cmp	r3, #0
 8008984:	d108      	bne.n	8008998 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8008986:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008988:	f005 f8be 	bl	800db08 <tcp_zero_window_probe>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d014      	beq.n	80089bc <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8008992:	2300      	movs	r3, #0
 8008994:	623b      	str	r3, [r7, #32]
 8008996:	e011      	b.n	80089bc <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800899a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800899e:	4619      	mov	r1, r3
 80089a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80089a2:	f003 ff83 	bl	800c8ac <tcp_split_unsent_seg>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d107      	bne.n	80089bc <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 80089ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80089ae:	f004 fa03 	bl	800cdb8 <tcp_output>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d101      	bne.n	80089bc <tcp_slowtmr+0x19c>
                  next_slot = 0;
 80089b8:	2300      	movs	r3, #0
 80089ba:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 80089bc:	6a3b      	ldr	r3, [r7, #32]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f000 80ac 	beq.w	8008b1c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 80089c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80089cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ce:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80089d2:	2b06      	cmp	r3, #6
 80089d4:	f200 80a2 	bhi.w	8008b1c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80089d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089da:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80089de:	3301      	adds	r3, #1
 80089e0:	b2da      	uxtb	r2, r3
 80089e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089e4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80089e8:	e098      	b.n	8008b1c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80089ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	db0f      	blt.n	8008a14 <tcp_slowtmr+0x1f4>
 80089f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80089fa:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d008      	beq.n	8008a14 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8008a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a04:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	b21a      	sxth	r2, r3
 8008a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a12:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8008a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a16:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8008a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a1c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8008a20:	429a      	cmp	r2, r3
 8008a22:	db7b      	blt.n	8008b1c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008a24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008a26:	f004 fcbb 	bl	800d3a0 <tcp_rexmit_rto_prepare>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d007      	beq.n	8008a40 <tcp_slowtmr+0x220>
 8008a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d171      	bne.n	8008b1c <tcp_slowtmr+0x2fc>
 8008a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d06d      	beq.n	8008b1c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8008a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a42:	7d1b      	ldrb	r3, [r3, #20]
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	d03a      	beq.n	8008abe <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a4e:	2b0c      	cmp	r3, #12
 8008a50:	bf28      	it	cs
 8008a52:	230c      	movcs	r3, #12
 8008a54:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a58:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008a5c:	10db      	asrs	r3, r3, #3
 8008a5e:	b21b      	sxth	r3, r3
 8008a60:	461a      	mov	r2, r3
 8008a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a64:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008a68:	4413      	add	r3, r2
 8008a6a:	7efa      	ldrb	r2, [r7, #27]
 8008a6c:	4910      	ldr	r1, [pc, #64]	@ (8008ab0 <tcp_slowtmr+0x290>)
 8008a6e:	5c8a      	ldrb	r2, [r1, r2]
 8008a70:	4093      	lsls	r3, r2
 8008a72:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	dc1a      	bgt.n	8008ab4 <tcp_slowtmr+0x294>
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	b21a      	sxth	r2, r3
 8008a82:	e019      	b.n	8008ab8 <tcp_slowtmr+0x298>
 8008a84:	20008430 	.word	0x20008430
 8008a88:	20008446 	.word	0x20008446
 8008a8c:	2000843c 	.word	0x2000843c
 8008a90:	08013eb8 	.word	0x08013eb8
 8008a94:	080141fc 	.word	0x080141fc
 8008a98:	08013efc 	.word	0x08013efc
 8008a9c:	08014228 	.word	0x08014228
 8008aa0:	08014254 	.word	0x08014254
 8008aa4:	08014284 	.word	0x08014284
 8008aa8:	080142b8 	.word	0x080142b8
 8008aac:	08015fe4 	.word	0x08015fe4
 8008ab0:	08015fd4 	.word	0x08015fd4
 8008ab4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8008abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ac6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008acc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	bf28      	it	cs
 8008ad4:	4613      	movcs	r3, r2
 8008ad6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008ad8:	8a7b      	ldrh	r3, [r7, #18]
 8008ada:	085b      	lsrs	r3, r3, #1
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8008aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008aee:	005b      	lsls	r3, r3, #1
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d206      	bcs.n	8008b04 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008af8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008afa:	005b      	lsls	r3, r3, #1
 8008afc:	b29a      	uxth	r2, r3
 8008afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b00:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8008b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b06:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8008b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b0a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8008b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b10:	2200      	movs	r2, #0
 8008b12:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8008b16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b18:	f004 fcb2 	bl	800d480 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8008b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b1e:	7d1b      	ldrb	r3, [r3, #20]
 8008b20:	2b06      	cmp	r3, #6
 8008b22:	d111      	bne.n	8008b48 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8008b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b26:	8b5b      	ldrh	r3, [r3, #26]
 8008b28:	f003 0310 	and.w	r3, r3, #16
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00b      	beq.n	8008b48 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b30:	4b9d      	ldr	r3, [pc, #628]	@ (8008da8 <tcp_slowtmr+0x588>)
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b36:	6a1b      	ldr	r3, [r3, #32]
 8008b38:	1ad3      	subs	r3, r2, r3
 8008b3a:	2b28      	cmp	r3, #40	@ 0x28
 8008b3c:	d904      	bls.n	8008b48 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8008b3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b42:	3301      	adds	r3, #1
 8008b44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b4a:	7a5b      	ldrb	r3, [r3, #9]
 8008b4c:	f003 0308 	and.w	r3, r3, #8
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d04c      	beq.n	8008bee <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8008b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b56:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008b58:	2b04      	cmp	r3, #4
 8008b5a:	d003      	beq.n	8008b64 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8008b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b5e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8008b60:	2b07      	cmp	r3, #7
 8008b62:	d144      	bne.n	8008bee <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b64:	4b90      	ldr	r3, [pc, #576]	@ (8008da8 <tcp_slowtmr+0x588>)
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b6a:	6a1b      	ldr	r3, [r3, #32]
 8008b6c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b74:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8008b78:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8008b7c:	498b      	ldr	r1, [pc, #556]	@ (8008dac <tcp_slowtmr+0x58c>)
 8008b7e:	fba1 1303 	umull	r1, r3, r1, r3
 8008b82:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d90a      	bls.n	8008b9e <tcp_slowtmr+0x37e>
        ++pcb_remove;
 8008b88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8008b92:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008b96:	3301      	adds	r3, #1
 8008b98:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008b9c:	e027      	b.n	8008bee <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b9e:	4b82      	ldr	r3, [pc, #520]	@ (8008da8 <tcp_slowtmr+0x588>)
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ba4:	6a1b      	ldr	r3, [r3, #32]
 8008ba6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008baa:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8008bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bb0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	4b7e      	ldr	r3, [pc, #504]	@ (8008db0 <tcp_slowtmr+0x590>)
 8008bb8:	fb00 f303 	mul.w	r3, r0, r3
 8008bbc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008bbe:	497b      	ldr	r1, [pc, #492]	@ (8008dac <tcp_slowtmr+0x58c>)
 8008bc0:	fba1 1303 	umull	r1, r3, r1, r3
 8008bc4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d911      	bls.n	8008bee <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 8008bca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008bcc:	f004 ff5c 	bl	800da88 <tcp_keepalive>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8008bd6:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d107      	bne.n	8008bee <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 8008bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008be0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8008be4:	3301      	adds	r3, #1
 8008be6:	b2da      	uxtb	r2, r3
 8008be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bea:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8008bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d011      	beq.n	8008c1a <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8008bf6:	4b6c      	ldr	r3, [pc, #432]	@ (8008da8 <tcp_slowtmr+0x588>)
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	1ad2      	subs	r2, r2, r3
 8008c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c02:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8008c06:	4619      	mov	r1, r3
 8008c08:	460b      	mov	r3, r1
 8008c0a:	005b      	lsls	r3, r3, #1
 8008c0c:	440b      	add	r3, r1
 8008c0e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d302      	bcc.n	8008c1a <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8008c14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008c16:	f000 fe1d 	bl	8009854 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8008c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c1c:	7d1b      	ldrb	r3, [r3, #20]
 8008c1e:	2b03      	cmp	r3, #3
 8008c20:	d10b      	bne.n	8008c3a <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008c22:	4b61      	ldr	r3, [pc, #388]	@ (8008da8 <tcp_slowtmr+0x588>)
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c28:	6a1b      	ldr	r3, [r3, #32]
 8008c2a:	1ad3      	subs	r3, r2, r3
 8008c2c:	2b28      	cmp	r3, #40	@ 0x28
 8008c2e:	d904      	bls.n	8008c3a <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8008c30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c34:	3301      	adds	r3, #1
 8008c36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8008c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c3c:	7d1b      	ldrb	r3, [r3, #20]
 8008c3e:	2b09      	cmp	r3, #9
 8008c40:	d10b      	bne.n	8008c5a <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008c42:	4b59      	ldr	r3, [pc, #356]	@ (8008da8 <tcp_slowtmr+0x588>)
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c48:	6a1b      	ldr	r3, [r3, #32]
 8008c4a:	1ad3      	subs	r3, r2, r3
 8008c4c:	2bf0      	cmp	r3, #240	@ 0xf0
 8008c4e:	d904      	bls.n	8008c5a <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8008c50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c54:	3301      	adds	r3, #1
 8008c56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8008c5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d060      	beq.n	8008d24 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8008c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c68:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8008c6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008c6c:	f000 fc3e 	bl	80094ec <tcp_pcb_purge>
      if (prev != NULL) {
 8008c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d010      	beq.n	8008c98 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008c76:	4b4f      	ldr	r3, [pc, #316]	@ (8008db4 <tcp_slowtmr+0x594>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d106      	bne.n	8008c8e <tcp_slowtmr+0x46e>
 8008c80:	4b4d      	ldr	r3, [pc, #308]	@ (8008db8 <tcp_slowtmr+0x598>)
 8008c82:	f240 526d 	movw	r2, #1389	@ 0x56d
 8008c86:	494d      	ldr	r1, [pc, #308]	@ (8008dbc <tcp_slowtmr+0x59c>)
 8008c88:	484d      	ldr	r0, [pc, #308]	@ (8008dc0 <tcp_slowtmr+0x5a0>)
 8008c8a:	f009 fa6d 	bl	8012168 <iprintf>
        prev->next = pcb->next;
 8008c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c90:	68da      	ldr	r2, [r3, #12]
 8008c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c94:	60da      	str	r2, [r3, #12]
 8008c96:	e00f      	b.n	8008cb8 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008c98:	4b46      	ldr	r3, [pc, #280]	@ (8008db4 <tcp_slowtmr+0x594>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d006      	beq.n	8008cb0 <tcp_slowtmr+0x490>
 8008ca2:	4b45      	ldr	r3, [pc, #276]	@ (8008db8 <tcp_slowtmr+0x598>)
 8008ca4:	f240 5271 	movw	r2, #1393	@ 0x571
 8008ca8:	4946      	ldr	r1, [pc, #280]	@ (8008dc4 <tcp_slowtmr+0x5a4>)
 8008caa:	4845      	ldr	r0, [pc, #276]	@ (8008dc0 <tcp_slowtmr+0x5a0>)
 8008cac:	f009 fa5c 	bl	8012168 <iprintf>
        tcp_active_pcbs = pcb->next;
 8008cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	4a3f      	ldr	r2, [pc, #252]	@ (8008db4 <tcp_slowtmr+0x594>)
 8008cb6:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8008cb8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d013      	beq.n	8008ce8 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cc2:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8008cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cc6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008cc8:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8008cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ccc:	3304      	adds	r3, #4
 8008cce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cd0:	8ad2      	ldrh	r2, [r2, #22]
 8008cd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008cd4:	8b09      	ldrh	r1, [r1, #24]
 8008cd6:	9102      	str	r1, [sp, #8]
 8008cd8:	9201      	str	r2, [sp, #4]
 8008cda:	9300      	str	r3, [sp, #0]
 8008cdc:	462b      	mov	r3, r5
 8008cde:	4622      	mov	r2, r4
 8008ce0:	4601      	mov	r1, r0
 8008ce2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008ce4:	f004 fe1c 	bl	800d920 <tcp_rst>
      err_arg = pcb->callback_arg;
 8008ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cf0:	7d1b      	ldrb	r3, [r3, #20]
 8008cf2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cf6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8008cfe:	6838      	ldr	r0, [r7, #0]
 8008d00:	f7ff f836 	bl	8007d70 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8008d04:	4b30      	ldr	r3, [pc, #192]	@ (8008dc8 <tcp_slowtmr+0x5a8>)
 8008d06:	2200      	movs	r2, #0
 8008d08:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d004      	beq.n	8008d1a <tcp_slowtmr+0x4fa>
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f06f 010c 	mvn.w	r1, #12
 8008d16:	68b8      	ldr	r0, [r7, #8]
 8008d18:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008d1a:	4b2b      	ldr	r3, [pc, #172]	@ (8008dc8 <tcp_slowtmr+0x5a8>)
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d037      	beq.n	8008d92 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 8008d22:	e590      	b.n	8008846 <tcp_slowtmr+0x26>
      prev = pcb;
 8008d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d26:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8008d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d30:	7f1b      	ldrb	r3, [r3, #28]
 8008d32:	3301      	adds	r3, #1
 8008d34:	b2da      	uxtb	r2, r3
 8008d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d38:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d3c:	7f1a      	ldrb	r2, [r3, #28]
 8008d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d40:	7f5b      	ldrb	r3, [r3, #29]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d325      	bcc.n	8008d92 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 8008d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d48:	2200      	movs	r2, #0
 8008d4a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8008d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8008dc8 <tcp_slowtmr+0x5a8>)
 8008d4e:	2200      	movs	r2, #0
 8008d50:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8008d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00b      	beq.n	8008d74 <tcp_slowtmr+0x554>
 8008d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d64:	6912      	ldr	r2, [r2, #16]
 8008d66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d68:	4610      	mov	r0, r2
 8008d6a:	4798      	blx	r3
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8008d72:	e002      	b.n	8008d7a <tcp_slowtmr+0x55a>
 8008d74:	2300      	movs	r3, #0
 8008d76:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8008d7a:	4b13      	ldr	r3, [pc, #76]	@ (8008dc8 <tcp_slowtmr+0x5a8>)
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	f47f ad60 	bne.w	8008844 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008d84:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d102      	bne.n	8008d92 <tcp_slowtmr+0x572>
          tcp_output(prev);
 8008d8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d8e:	f004 f813 	bl	800cdb8 <tcp_output>
  while (pcb != NULL) {
 8008d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	f47f ad5c 	bne.w	8008852 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8008d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8008dcc <tcp_slowtmr+0x5ac>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8008da4:	e067      	b.n	8008e76 <tcp_slowtmr+0x656>
 8008da6:	bf00      	nop
 8008da8:	20008430 	.word	0x20008430
 8008dac:	10624dd3 	.word	0x10624dd3
 8008db0:	000124f8 	.word	0x000124f8
 8008db4:	2000843c 	.word	0x2000843c
 8008db8:	08013eb8 	.word	0x08013eb8
 8008dbc:	080142f0 	.word	0x080142f0
 8008dc0:	08013efc 	.word	0x08013efc
 8008dc4:	0801431c 	.word	0x0801431c
 8008dc8:	20008444 	.word	0x20008444
 8008dcc:	20008440 	.word	0x20008440
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd2:	7d1b      	ldrb	r3, [r3, #20]
 8008dd4:	2b0a      	cmp	r3, #10
 8008dd6:	d006      	beq.n	8008de6 <tcp_slowtmr+0x5c6>
 8008dd8:	4b2b      	ldr	r3, [pc, #172]	@ (8008e88 <tcp_slowtmr+0x668>)
 8008dda:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8008dde:	492b      	ldr	r1, [pc, #172]	@ (8008e8c <tcp_slowtmr+0x66c>)
 8008de0:	482b      	ldr	r0, [pc, #172]	@ (8008e90 <tcp_slowtmr+0x670>)
 8008de2:	f009 f9c1 	bl	8012168 <iprintf>
    pcb_remove = 0;
 8008de6:	2300      	movs	r3, #0
 8008de8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008dec:	4b29      	ldr	r3, [pc, #164]	@ (8008e94 <tcp_slowtmr+0x674>)
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008df2:	6a1b      	ldr	r3, [r3, #32]
 8008df4:	1ad3      	subs	r3, r2, r3
 8008df6:	2bf0      	cmp	r3, #240	@ 0xf0
 8008df8:	d904      	bls.n	8008e04 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8008dfa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008dfe:	3301      	adds	r3, #1
 8008e00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008e04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d02f      	beq.n	8008e6c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008e0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e0e:	f000 fb6d 	bl	80094ec <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8008e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d010      	beq.n	8008e3a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008e18:	4b1f      	ldr	r3, [pc, #124]	@ (8008e98 <tcp_slowtmr+0x678>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d106      	bne.n	8008e30 <tcp_slowtmr+0x610>
 8008e22:	4b19      	ldr	r3, [pc, #100]	@ (8008e88 <tcp_slowtmr+0x668>)
 8008e24:	f240 52af 	movw	r2, #1455	@ 0x5af
 8008e28:	491c      	ldr	r1, [pc, #112]	@ (8008e9c <tcp_slowtmr+0x67c>)
 8008e2a:	4819      	ldr	r0, [pc, #100]	@ (8008e90 <tcp_slowtmr+0x670>)
 8008e2c:	f009 f99c 	bl	8012168 <iprintf>
        prev->next = pcb->next;
 8008e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e32:	68da      	ldr	r2, [r3, #12]
 8008e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e36:	60da      	str	r2, [r3, #12]
 8008e38:	e00f      	b.n	8008e5a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008e3a:	4b17      	ldr	r3, [pc, #92]	@ (8008e98 <tcp_slowtmr+0x678>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d006      	beq.n	8008e52 <tcp_slowtmr+0x632>
 8008e44:	4b10      	ldr	r3, [pc, #64]	@ (8008e88 <tcp_slowtmr+0x668>)
 8008e46:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8008e4a:	4915      	ldr	r1, [pc, #84]	@ (8008ea0 <tcp_slowtmr+0x680>)
 8008e4c:	4810      	ldr	r0, [pc, #64]	@ (8008e90 <tcp_slowtmr+0x670>)
 8008e4e:	f009 f98b 	bl	8012168 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8008e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	4a10      	ldr	r2, [pc, #64]	@ (8008e98 <tcp_slowtmr+0x678>)
 8008e58:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e5c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8008e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8008e64:	69f8      	ldr	r0, [r7, #28]
 8008e66:	f7fe ff83 	bl	8007d70 <tcp_free>
 8008e6a:	e004      	b.n	8008e76 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8008e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8008e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1a9      	bne.n	8008dd0 <tcp_slowtmr+0x5b0>
    }
  }
}
 8008e7c:	bf00      	nop
 8008e7e:	bf00      	nop
 8008e80:	3730      	adds	r7, #48	@ 0x30
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bdb0      	pop	{r4, r5, r7, pc}
 8008e86:	bf00      	nop
 8008e88:	08013eb8 	.word	0x08013eb8
 8008e8c:	08014348 	.word	0x08014348
 8008e90:	08013efc 	.word	0x08013efc
 8008e94:	20008430 	.word	0x20008430
 8008e98:	20008440 	.word	0x20008440
 8008e9c:	08014378 	.word	0x08014378
 8008ea0:	080143a0 	.word	0x080143a0

08008ea4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8008eaa:	4b2d      	ldr	r3, [pc, #180]	@ (8008f60 <tcp_fasttmr+0xbc>)
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	b2da      	uxtb	r2, r3
 8008eb2:	4b2b      	ldr	r3, [pc, #172]	@ (8008f60 <tcp_fasttmr+0xbc>)
 8008eb4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8008eb6:	4b2b      	ldr	r3, [pc, #172]	@ (8008f64 <tcp_fasttmr+0xc0>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008ebc:	e048      	b.n	8008f50 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	7f9a      	ldrb	r2, [r3, #30]
 8008ec2:	4b27      	ldr	r3, [pc, #156]	@ (8008f60 <tcp_fasttmr+0xbc>)
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d03f      	beq.n	8008f4a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008eca:	4b25      	ldr	r3, [pc, #148]	@ (8008f60 <tcp_fasttmr+0xbc>)
 8008ecc:	781a      	ldrb	r2, [r3, #0]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	8b5b      	ldrh	r3, [r3, #26]
 8008ed6:	f003 0301 	and.w	r3, r3, #1
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d010      	beq.n	8008f00 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	8b5b      	ldrh	r3, [r3, #26]
 8008ee2:	f043 0302 	orr.w	r3, r3, #2
 8008ee6:	b29a      	uxth	r2, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f003 ff63 	bl	800cdb8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	8b5b      	ldrh	r3, [r3, #26]
 8008ef6:	f023 0303 	bic.w	r3, r3, #3
 8008efa:	b29a      	uxth	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	8b5b      	ldrh	r3, [r3, #26]
 8008f04:	f003 0308 	and.w	r3, r3, #8
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d009      	beq.n	8008f20 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	8b5b      	ldrh	r3, [r3, #26]
 8008f10:	f023 0308 	bic.w	r3, r3, #8
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7ff f8bc 	bl	8008098 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00a      	beq.n	8008f44 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8008f68 <tcp_fasttmr+0xc4>)
 8008f30:	2200      	movs	r2, #0
 8008f32:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 f819 	bl	8008f6c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8008f68 <tcp_fasttmr+0xc4>)
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d000      	beq.n	8008f44 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8008f42:	e7b8      	b.n	8008eb6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	607b      	str	r3, [r7, #4]
 8008f48:	e002      	b.n	8008f50 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1b3      	bne.n	8008ebe <tcp_fasttmr+0x1a>
    }
  }
}
 8008f56:	bf00      	nop
 8008f58:	bf00      	nop
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	20008446 	.word	0x20008446
 8008f64:	2000843c 	.word	0x2000843c
 8008f68:	20008444 	.word	0x20008444

08008f6c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008f6c:	b590      	push	{r4, r7, lr}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d109      	bne.n	8008f8e <tcp_process_refused_data+0x22>
 8008f7a:	4b37      	ldr	r3, [pc, #220]	@ (8009058 <tcp_process_refused_data+0xec>)
 8008f7c:	f240 6209 	movw	r2, #1545	@ 0x609
 8008f80:	4936      	ldr	r1, [pc, #216]	@ (800905c <tcp_process_refused_data+0xf0>)
 8008f82:	4837      	ldr	r0, [pc, #220]	@ (8009060 <tcp_process_refused_data+0xf4>)
 8008f84:	f009 f8f0 	bl	8012168 <iprintf>
 8008f88:	f06f 030f 	mvn.w	r3, #15
 8008f8c:	e060      	b.n	8009050 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008f92:	7b5b      	ldrb	r3, [r3, #13]
 8008f94:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008f9a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00b      	beq.n	8008fc4 <tcp_process_refused_data+0x58>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6918      	ldr	r0, [r3, #16]
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	6879      	ldr	r1, [r7, #4]
 8008fbc:	47a0      	blx	r4
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	73fb      	strb	r3, [r7, #15]
 8008fc2:	e007      	b.n	8008fd4 <tcp_process_refused_data+0x68>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	6879      	ldr	r1, [r7, #4]
 8008fca:	2000      	movs	r0, #0
 8008fcc:	f000 f8a4 	bl	8009118 <tcp_recv_null>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d12a      	bne.n	8009032 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008fdc:	7bbb      	ldrb	r3, [r7, #14]
 8008fde:	f003 0320 	and.w	r3, r3, #32
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d033      	beq.n	800904e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fea:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008fee:	d005      	beq.n	8008ffc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	b29a      	uxth	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00b      	beq.n	800901e <tcp_process_refused_data+0xb2>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6918      	ldr	r0, [r3, #16]
 8009010:	2300      	movs	r3, #0
 8009012:	2200      	movs	r2, #0
 8009014:	6879      	ldr	r1, [r7, #4]
 8009016:	47a0      	blx	r4
 8009018:	4603      	mov	r3, r0
 800901a:	73fb      	strb	r3, [r7, #15]
 800901c:	e001      	b.n	8009022 <tcp_process_refused_data+0xb6>
 800901e:	2300      	movs	r3, #0
 8009020:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009026:	f113 0f0d 	cmn.w	r3, #13
 800902a:	d110      	bne.n	800904e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800902c:	f06f 030c 	mvn.w	r3, #12
 8009030:	e00e      	b.n	8009050 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009036:	f113 0f0d 	cmn.w	r3, #13
 800903a:	d102      	bne.n	8009042 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800903c:	f06f 030c 	mvn.w	r3, #12
 8009040:	e006      	b.n	8009050 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8009048:	f06f 0304 	mvn.w	r3, #4
 800904c:	e000      	b.n	8009050 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800904e:	2300      	movs	r3, #0
}
 8009050:	4618      	mov	r0, r3
 8009052:	3714      	adds	r7, #20
 8009054:	46bd      	mov	sp, r7
 8009056:	bd90      	pop	{r4, r7, pc}
 8009058:	08013eb8 	.word	0x08013eb8
 800905c:	080143c8 	.word	0x080143c8
 8009060:	08013efc 	.word	0x08013efc

08009064 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800906c:	e007      	b.n	800907e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 f80a 	bl	800908e <tcp_seg_free>
    seg = next;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1f4      	bne.n	800906e <tcp_segs_free+0xa>
  }
}
 8009084:	bf00      	nop
 8009086:	bf00      	nop
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b082      	sub	sp, #8
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00c      	beq.n	80090b6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d004      	beq.n	80090ae <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7fe fbc1 	bl	8007830 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80090ae:	6879      	ldr	r1, [r7, #4]
 80090b0:	2003      	movs	r0, #3
 80090b2:	f7fd fd47 	bl	8006b44 <memp_free>
  }
}
 80090b6:	bf00      	nop
 80090b8:	3708      	adds	r7, #8
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
	...

080090c0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d106      	bne.n	80090dc <tcp_seg_copy+0x1c>
 80090ce:	4b0f      	ldr	r3, [pc, #60]	@ (800910c <tcp_seg_copy+0x4c>)
 80090d0:	f240 6282 	movw	r2, #1666	@ 0x682
 80090d4:	490e      	ldr	r1, [pc, #56]	@ (8009110 <tcp_seg_copy+0x50>)
 80090d6:	480f      	ldr	r0, [pc, #60]	@ (8009114 <tcp_seg_copy+0x54>)
 80090d8:	f009 f846 	bl	8012168 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80090dc:	2003      	movs	r0, #3
 80090de:	f7fd fcc1 	bl	8006a64 <memp_malloc>
 80090e2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d101      	bne.n	80090ee <tcp_seg_copy+0x2e>
    return NULL;
 80090ea:	2300      	movs	r3, #0
 80090ec:	e00a      	b.n	8009104 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80090ee:	2210      	movs	r2, #16
 80090f0:	6879      	ldr	r1, [r7, #4]
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f009 f987 	bl	8012406 <memcpy>
  pbuf_ref(cseg->p);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7fe fc37 	bl	8007970 <pbuf_ref>
  return cseg;
 8009102:	68fb      	ldr	r3, [r7, #12]
}
 8009104:	4618      	mov	r0, r3
 8009106:	3710      	adds	r7, #16
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	08013eb8 	.word	0x08013eb8
 8009110:	0801440c 	.word	0x0801440c
 8009114:	08013efc 	.word	0x08013efc

08009118 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
 8009124:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d109      	bne.n	8009140 <tcp_recv_null+0x28>
 800912c:	4b12      	ldr	r3, [pc, #72]	@ (8009178 <tcp_recv_null+0x60>)
 800912e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8009132:	4912      	ldr	r1, [pc, #72]	@ (800917c <tcp_recv_null+0x64>)
 8009134:	4812      	ldr	r0, [pc, #72]	@ (8009180 <tcp_recv_null+0x68>)
 8009136:	f009 f817 	bl	8012168 <iprintf>
 800913a:	f06f 030f 	mvn.w	r3, #15
 800913e:	e016      	b.n	800916e <tcp_recv_null+0x56>

  if (p != NULL) {
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d009      	beq.n	800915a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	891b      	ldrh	r3, [r3, #8]
 800914a:	4619      	mov	r1, r3
 800914c:	68b8      	ldr	r0, [r7, #8]
 800914e:	f7ff fad1 	bl	80086f4 <tcp_recved>
    pbuf_free(p);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f7fe fb6c 	bl	8007830 <pbuf_free>
 8009158:	e008      	b.n	800916c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800915a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d104      	bne.n	800916c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009162:	68b8      	ldr	r0, [r7, #8]
 8009164:	f7ff f802 	bl	800816c <tcp_close>
 8009168:	4603      	mov	r3, r0
 800916a:	e000      	b.n	800916e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	08013eb8 	.word	0x08013eb8
 800917c:	08014428 	.word	0x08014428
 8009180:	08013efc 	.word	0x08013efc

08009184 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b086      	sub	sp, #24
 8009188:	af00      	add	r7, sp, #0
 800918a:	4603      	mov	r3, r0
 800918c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800918e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009192:	2b00      	cmp	r3, #0
 8009194:	db01      	blt.n	800919a <tcp_kill_prio+0x16>
 8009196:	79fb      	ldrb	r3, [r7, #7]
 8009198:	e000      	b.n	800919c <tcp_kill_prio+0x18>
 800919a:	237f      	movs	r3, #127	@ 0x7f
 800919c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800919e:	7afb      	ldrb	r3, [r7, #11]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d034      	beq.n	800920e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80091a4:	7afb      	ldrb	r3, [r7, #11]
 80091a6:	3b01      	subs	r3, #1
 80091a8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80091aa:	2300      	movs	r3, #0
 80091ac:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80091ae:	2300      	movs	r3, #0
 80091b0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80091b2:	4b19      	ldr	r3, [pc, #100]	@ (8009218 <tcp_kill_prio+0x94>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	617b      	str	r3, [r7, #20]
 80091b8:	e01f      	b.n	80091fa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	7d5b      	ldrb	r3, [r3, #21]
 80091be:	7afa      	ldrb	r2, [r7, #11]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d80c      	bhi.n	80091de <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80091c8:	7afa      	ldrb	r2, [r7, #11]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d112      	bne.n	80091f4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80091ce:	4b13      	ldr	r3, [pc, #76]	@ (800921c <tcp_kill_prio+0x98>)
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	6a1b      	ldr	r3, [r3, #32]
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d80a      	bhi.n	80091f4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80091de:	4b0f      	ldr	r3, [pc, #60]	@ (800921c <tcp_kill_prio+0x98>)
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	1ad3      	subs	r3, r2, r3
 80091e8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	7d5b      	ldrb	r3, [r3, #21]
 80091f2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	617b      	str	r3, [r7, #20]
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d1dc      	bne.n	80091ba <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d004      	beq.n	8009210 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009206:	6938      	ldr	r0, [r7, #16]
 8009208:	f7ff f89a 	bl	8008340 <tcp_abort>
 800920c:	e000      	b.n	8009210 <tcp_kill_prio+0x8c>
    return;
 800920e:	bf00      	nop
  }
}
 8009210:	3718      	adds	r7, #24
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	2000843c 	.word	0x2000843c
 800921c:	20008430 	.word	0x20008430

08009220 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b086      	sub	sp, #24
 8009224:	af00      	add	r7, sp, #0
 8009226:	4603      	mov	r3, r0
 8009228:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800922a:	79fb      	ldrb	r3, [r7, #7]
 800922c:	2b08      	cmp	r3, #8
 800922e:	d009      	beq.n	8009244 <tcp_kill_state+0x24>
 8009230:	79fb      	ldrb	r3, [r7, #7]
 8009232:	2b09      	cmp	r3, #9
 8009234:	d006      	beq.n	8009244 <tcp_kill_state+0x24>
 8009236:	4b1a      	ldr	r3, [pc, #104]	@ (80092a0 <tcp_kill_state+0x80>)
 8009238:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800923c:	4919      	ldr	r1, [pc, #100]	@ (80092a4 <tcp_kill_state+0x84>)
 800923e:	481a      	ldr	r0, [pc, #104]	@ (80092a8 <tcp_kill_state+0x88>)
 8009240:	f008 ff92 	bl	8012168 <iprintf>

  inactivity = 0;
 8009244:	2300      	movs	r3, #0
 8009246:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009248:	2300      	movs	r3, #0
 800924a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800924c:	4b17      	ldr	r3, [pc, #92]	@ (80092ac <tcp_kill_state+0x8c>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	617b      	str	r3, [r7, #20]
 8009252:	e017      	b.n	8009284 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	7d1b      	ldrb	r3, [r3, #20]
 8009258:	79fa      	ldrb	r2, [r7, #7]
 800925a:	429a      	cmp	r2, r3
 800925c:	d10f      	bne.n	800927e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800925e:	4b14      	ldr	r3, [pc, #80]	@ (80092b0 <tcp_kill_state+0x90>)
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	6a1b      	ldr	r3, [r3, #32]
 8009266:	1ad3      	subs	r3, r2, r3
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	429a      	cmp	r2, r3
 800926c:	d807      	bhi.n	800927e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800926e:	4b10      	ldr	r3, [pc, #64]	@ (80092b0 <tcp_kill_state+0x90>)
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	6a1b      	ldr	r3, [r3, #32]
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	617b      	str	r3, [r7, #20]
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d1e4      	bne.n	8009254 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d003      	beq.n	8009298 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009290:	2100      	movs	r1, #0
 8009292:	6938      	ldr	r0, [r7, #16]
 8009294:	f7fe ff96 	bl	80081c4 <tcp_abandon>
  }
}
 8009298:	bf00      	nop
 800929a:	3718      	adds	r7, #24
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	08013eb8 	.word	0x08013eb8
 80092a4:	08014444 	.word	0x08014444
 80092a8:	08013efc 	.word	0x08013efc
 80092ac:	2000843c 	.word	0x2000843c
 80092b0:	20008430 	.word	0x20008430

080092b4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80092ba:	2300      	movs	r3, #0
 80092bc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80092be:	2300      	movs	r3, #0
 80092c0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80092c2:	4b12      	ldr	r3, [pc, #72]	@ (800930c <tcp_kill_timewait+0x58>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	60fb      	str	r3, [r7, #12]
 80092c8:	e012      	b.n	80092f0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80092ca:	4b11      	ldr	r3, [pc, #68]	@ (8009310 <tcp_kill_timewait+0x5c>)
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6a1b      	ldr	r3, [r3, #32]
 80092d2:	1ad3      	subs	r3, r2, r3
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d807      	bhi.n	80092ea <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80092da:	4b0d      	ldr	r3, [pc, #52]	@ (8009310 <tcp_kill_timewait+0x5c>)
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6a1b      	ldr	r3, [r3, #32]
 80092e2:	1ad3      	subs	r3, r2, r3
 80092e4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	60fb      	str	r3, [r7, #12]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1e9      	bne.n	80092ca <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d002      	beq.n	8009302 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80092fc:	68b8      	ldr	r0, [r7, #8]
 80092fe:	f7ff f81f 	bl	8008340 <tcp_abort>
  }
}
 8009302:	bf00      	nop
 8009304:	3710      	adds	r7, #16
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	20008440 	.word	0x20008440
 8009310:	20008430 	.word	0x20008430

08009314 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800931a:	4b10      	ldr	r3, [pc, #64]	@ (800935c <tcp_handle_closepend+0x48>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009320:	e014      	b.n	800934c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	8b5b      	ldrh	r3, [r3, #26]
 800932c:	f003 0308 	and.w	r3, r3, #8
 8009330:	2b00      	cmp	r3, #0
 8009332:	d009      	beq.n	8009348 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	8b5b      	ldrh	r3, [r3, #26]
 8009338:	f023 0308 	bic.w	r3, r3, #8
 800933c:	b29a      	uxth	r2, r3
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f7fe fea8 	bl	8008098 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1e7      	bne.n	8009322 <tcp_handle_closepend+0xe>
  }
}
 8009352:	bf00      	nop
 8009354:	bf00      	nop
 8009356:	3708      	adds	r7, #8
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	2000843c 	.word	0x2000843c

08009360 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	4603      	mov	r3, r0
 8009368:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800936a:	2001      	movs	r0, #1
 800936c:	f7fd fb7a 	bl	8006a64 <memp_malloc>
 8009370:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d126      	bne.n	80093c6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009378:	f7ff ffcc 	bl	8009314 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800937c:	f7ff ff9a 	bl	80092b4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009380:	2001      	movs	r0, #1
 8009382:	f7fd fb6f 	bl	8006a64 <memp_malloc>
 8009386:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d11b      	bne.n	80093c6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800938e:	2009      	movs	r0, #9
 8009390:	f7ff ff46 	bl	8009220 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009394:	2001      	movs	r0, #1
 8009396:	f7fd fb65 	bl	8006a64 <memp_malloc>
 800939a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d111      	bne.n	80093c6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80093a2:	2008      	movs	r0, #8
 80093a4:	f7ff ff3c 	bl	8009220 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80093a8:	2001      	movs	r0, #1
 80093aa:	f7fd fb5b 	bl	8006a64 <memp_malloc>
 80093ae:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d107      	bne.n	80093c6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80093b6:	79fb      	ldrb	r3, [r7, #7]
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7ff fee3 	bl	8009184 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80093be:	2001      	movs	r0, #1
 80093c0:	f7fd fb50 	bl	8006a64 <memp_malloc>
 80093c4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d03f      	beq.n	800944c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80093cc:	229c      	movs	r2, #156	@ 0x9c
 80093ce:	2100      	movs	r1, #0
 80093d0:	68f8      	ldr	r0, [r7, #12]
 80093d2:	f008 ff7e 	bl	80122d2 <memset>
    pcb->prio = prio;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	79fa      	ldrb	r2, [r7, #7]
 80093da:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80093e2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80093ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	22ff      	movs	r2, #255	@ 0xff
 80093fa:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8009402:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2206      	movs	r2, #6
 8009408:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2206      	movs	r2, #6
 8009410:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009418:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2201      	movs	r2, #1
 800941e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8009422:	4b0d      	ldr	r3, [pc, #52]	@ (8009458 <tcp_alloc+0xf8>)
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800942a:	4b0c      	ldr	r3, [pc, #48]	@ (800945c <tcp_alloc+0xfc>)
 800942c:	781a      	ldrb	r2, [r3, #0]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009438:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	4a08      	ldr	r2, [pc, #32]	@ (8009460 <tcp_alloc+0x100>)
 8009440:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	4a07      	ldr	r2, [pc, #28]	@ (8009464 <tcp_alloc+0x104>)
 8009448:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800944c:	68fb      	ldr	r3, [r7, #12]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	20008430 	.word	0x20008430
 800945c:	20008446 	.word	0x20008446
 8009460:	08009119 	.word	0x08009119
 8009464:	006ddd00 	.word	0x006ddd00

08009468 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800946c:	2040      	movs	r0, #64	@ 0x40
 800946e:	f7ff ff77 	bl	8009360 <tcp_alloc>
 8009472:	4603      	mov	r3, r0
}
 8009474:	4618      	mov	r0, r3
 8009476:	bd80      	pop	{r7, pc}

08009478 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00e      	beq.n	80094a6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	7d1b      	ldrb	r3, [r3, #20]
 800948c:	2b01      	cmp	r3, #1
 800948e:	d106      	bne.n	800949e <tcp_recv+0x26>
 8009490:	4b07      	ldr	r3, [pc, #28]	@ (80094b0 <tcp_recv+0x38>)
 8009492:	f240 72df 	movw	r2, #2015	@ 0x7df
 8009496:	4907      	ldr	r1, [pc, #28]	@ (80094b4 <tcp_recv+0x3c>)
 8009498:	4807      	ldr	r0, [pc, #28]	@ (80094b8 <tcp_recv+0x40>)
 800949a:	f008 fe65 	bl	8012168 <iprintf>
    pcb->recv = recv;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	683a      	ldr	r2, [r7, #0]
 80094a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 80094a6:	bf00      	nop
 80094a8:	3708      	adds	r7, #8
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	08013eb8 	.word	0x08013eb8
 80094b4:	08014454 	.word	0x08014454
 80094b8:	08013efc 	.word	0x08013efc

080094bc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d008      	beq.n	80094de <tcp_accept+0x22>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	7d1b      	ldrb	r3, [r3, #20]
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d104      	bne.n	80094de <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	683a      	ldr	r2, [r7, #0]
 80094dc:	619a      	str	r2, [r3, #24]
  }
}
 80094de:	bf00      	nop
 80094e0:	3714      	adds	r7, #20
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
	...

080094ec <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d107      	bne.n	800950a <tcp_pcb_purge+0x1e>
 80094fa:	4b21      	ldr	r3, [pc, #132]	@ (8009580 <tcp_pcb_purge+0x94>)
 80094fc:	f640 0251 	movw	r2, #2129	@ 0x851
 8009500:	4920      	ldr	r1, [pc, #128]	@ (8009584 <tcp_pcb_purge+0x98>)
 8009502:	4821      	ldr	r0, [pc, #132]	@ (8009588 <tcp_pcb_purge+0x9c>)
 8009504:	f008 fe30 	bl	8012168 <iprintf>
 8009508:	e037      	b.n	800957a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	7d1b      	ldrb	r3, [r3, #20]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d033      	beq.n	800957a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009516:	2b0a      	cmp	r3, #10
 8009518:	d02f      	beq.n	800957a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800951e:	2b01      	cmp	r3, #1
 8009520:	d02b      	beq.n	800957a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009526:	2b00      	cmp	r3, #0
 8009528:	d007      	beq.n	800953a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800952e:	4618      	mov	r0, r3
 8009530:	f7fe f97e 	bl	8007830 <pbuf_free>
      pcb->refused_data = NULL;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800953e:	2b00      	cmp	r3, #0
 8009540:	d002      	beq.n	8009548 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 f986 	bl	8009854 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800954e:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009554:	4618      	mov	r0, r3
 8009556:	f7ff fd85 	bl	8009064 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800955e:	4618      	mov	r0, r3
 8009560:	f7ff fd80 	bl	8009064 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	66da      	str	r2, [r3, #108]	@ 0x6c
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800957a:	3708      	adds	r7, #8
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	08013eb8 	.word	0x08013eb8
 8009584:	08014504 	.word	0x08014504
 8009588:	08013efc 	.word	0x08013efc

0800958c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d106      	bne.n	80095aa <tcp_pcb_remove+0x1e>
 800959c:	4b3e      	ldr	r3, [pc, #248]	@ (8009698 <tcp_pcb_remove+0x10c>)
 800959e:	f640 0283 	movw	r2, #2179	@ 0x883
 80095a2:	493e      	ldr	r1, [pc, #248]	@ (800969c <tcp_pcb_remove+0x110>)
 80095a4:	483e      	ldr	r0, [pc, #248]	@ (80096a0 <tcp_pcb_remove+0x114>)
 80095a6:	f008 fddf 	bl	8012168 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d106      	bne.n	80095be <tcp_pcb_remove+0x32>
 80095b0:	4b39      	ldr	r3, [pc, #228]	@ (8009698 <tcp_pcb_remove+0x10c>)
 80095b2:	f640 0284 	movw	r2, #2180	@ 0x884
 80095b6:	493b      	ldr	r1, [pc, #236]	@ (80096a4 <tcp_pcb_remove+0x118>)
 80095b8:	4839      	ldr	r0, [pc, #228]	@ (80096a0 <tcp_pcb_remove+0x114>)
 80095ba:	f008 fdd5 	bl	8012168 <iprintf>

  TCP_RMV(pcblist, pcb);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	683a      	ldr	r2, [r7, #0]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d105      	bne.n	80095d4 <tcp_pcb_remove+0x48>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	68da      	ldr	r2, [r3, #12]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	601a      	str	r2, [r3, #0]
 80095d2:	e013      	b.n	80095fc <tcp_pcb_remove+0x70>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	60fb      	str	r3, [r7, #12]
 80095da:	e00c      	b.n	80095f6 <tcp_pcb_remove+0x6a>
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	683a      	ldr	r2, [r7, #0]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d104      	bne.n	80095f0 <tcp_pcb_remove+0x64>
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	68da      	ldr	r2, [r3, #12]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	60da      	str	r2, [r3, #12]
 80095ee:	e005      	b.n	80095fc <tcp_pcb_remove+0x70>
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	60fb      	str	r3, [r7, #12]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1ef      	bne.n	80095dc <tcp_pcb_remove+0x50>
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	2200      	movs	r2, #0
 8009600:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8009602:	6838      	ldr	r0, [r7, #0]
 8009604:	f7ff ff72 	bl	80094ec <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	7d1b      	ldrb	r3, [r3, #20]
 800960c:	2b0a      	cmp	r3, #10
 800960e:	d013      	beq.n	8009638 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8009614:	2b01      	cmp	r3, #1
 8009616:	d00f      	beq.n	8009638 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	8b5b      	ldrh	r3, [r3, #26]
 800961c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8009620:	2b00      	cmp	r3, #0
 8009622:	d009      	beq.n	8009638 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	8b5b      	ldrh	r3, [r3, #26]
 8009628:	f043 0302 	orr.w	r3, r3, #2
 800962c:	b29a      	uxth	r2, r3
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009632:	6838      	ldr	r0, [r7, #0]
 8009634:	f003 fbc0 	bl	800cdb8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	7d1b      	ldrb	r3, [r3, #20]
 800963c:	2b01      	cmp	r3, #1
 800963e:	d020      	beq.n	8009682 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009644:	2b00      	cmp	r3, #0
 8009646:	d006      	beq.n	8009656 <tcp_pcb_remove+0xca>
 8009648:	4b13      	ldr	r3, [pc, #76]	@ (8009698 <tcp_pcb_remove+0x10c>)
 800964a:	f640 0293 	movw	r2, #2195	@ 0x893
 800964e:	4916      	ldr	r1, [pc, #88]	@ (80096a8 <tcp_pcb_remove+0x11c>)
 8009650:	4813      	ldr	r0, [pc, #76]	@ (80096a0 <tcp_pcb_remove+0x114>)
 8009652:	f008 fd89 	bl	8012168 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800965a:	2b00      	cmp	r3, #0
 800965c:	d006      	beq.n	800966c <tcp_pcb_remove+0xe0>
 800965e:	4b0e      	ldr	r3, [pc, #56]	@ (8009698 <tcp_pcb_remove+0x10c>)
 8009660:	f640 0294 	movw	r2, #2196	@ 0x894
 8009664:	4911      	ldr	r1, [pc, #68]	@ (80096ac <tcp_pcb_remove+0x120>)
 8009666:	480e      	ldr	r0, [pc, #56]	@ (80096a0 <tcp_pcb_remove+0x114>)
 8009668:	f008 fd7e 	bl	8012168 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009670:	2b00      	cmp	r3, #0
 8009672:	d006      	beq.n	8009682 <tcp_pcb_remove+0xf6>
 8009674:	4b08      	ldr	r3, [pc, #32]	@ (8009698 <tcp_pcb_remove+0x10c>)
 8009676:	f640 0296 	movw	r2, #2198	@ 0x896
 800967a:	490d      	ldr	r1, [pc, #52]	@ (80096b0 <tcp_pcb_remove+0x124>)
 800967c:	4808      	ldr	r0, [pc, #32]	@ (80096a0 <tcp_pcb_remove+0x114>)
 800967e:	f008 fd73 	bl	8012168 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	2200      	movs	r2, #0
 8009686:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	2200      	movs	r2, #0
 800968c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800968e:	bf00      	nop
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	08013eb8 	.word	0x08013eb8
 800969c:	08014520 	.word	0x08014520
 80096a0:	08013efc 	.word	0x08013efc
 80096a4:	0801453c 	.word	0x0801453c
 80096a8:	0801455c 	.word	0x0801455c
 80096ac:	08014574 	.word	0x08014574
 80096b0:	08014590 	.word	0x08014590

080096b4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d106      	bne.n	80096d0 <tcp_next_iss+0x1c>
 80096c2:	4b0a      	ldr	r3, [pc, #40]	@ (80096ec <tcp_next_iss+0x38>)
 80096c4:	f640 02af 	movw	r2, #2223	@ 0x8af
 80096c8:	4909      	ldr	r1, [pc, #36]	@ (80096f0 <tcp_next_iss+0x3c>)
 80096ca:	480a      	ldr	r0, [pc, #40]	@ (80096f4 <tcp_next_iss+0x40>)
 80096cc:	f008 fd4c 	bl	8012168 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80096d0:	4b09      	ldr	r3, [pc, #36]	@ (80096f8 <tcp_next_iss+0x44>)
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	4b09      	ldr	r3, [pc, #36]	@ (80096fc <tcp_next_iss+0x48>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4413      	add	r3, r2
 80096da:	4a07      	ldr	r2, [pc, #28]	@ (80096f8 <tcp_next_iss+0x44>)
 80096dc:	6013      	str	r3, [r2, #0]
  return iss;
 80096de:	4b06      	ldr	r3, [pc, #24]	@ (80096f8 <tcp_next_iss+0x44>)
 80096e0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3708      	adds	r7, #8
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	08013eb8 	.word	0x08013eb8
 80096f0:	080145a8 	.word	0x080145a8
 80096f4:	08013efc 	.word	0x08013efc
 80096f8:	20000024 	.word	0x20000024
 80096fc:	20008430 	.word	0x20008430

08009700 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af00      	add	r7, sp, #0
 8009706:	4603      	mov	r3, r0
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	607a      	str	r2, [r7, #4]
 800970c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d106      	bne.n	8009722 <tcp_eff_send_mss_netif+0x22>
 8009714:	4b14      	ldr	r3, [pc, #80]	@ (8009768 <tcp_eff_send_mss_netif+0x68>)
 8009716:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800971a:	4914      	ldr	r1, [pc, #80]	@ (800976c <tcp_eff_send_mss_netif+0x6c>)
 800971c:	4814      	ldr	r0, [pc, #80]	@ (8009770 <tcp_eff_send_mss_netif+0x70>)
 800971e:	f008 fd23 	bl	8012168 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d101      	bne.n	800972c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8009728:	89fb      	ldrh	r3, [r7, #14]
 800972a:	e019      	b.n	8009760 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009730:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009732:	8afb      	ldrh	r3, [r7, #22]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d012      	beq.n	800975e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009738:	2328      	movs	r3, #40	@ 0x28
 800973a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800973c:	8afa      	ldrh	r2, [r7, #22]
 800973e:	8abb      	ldrh	r3, [r7, #20]
 8009740:	429a      	cmp	r2, r3
 8009742:	d904      	bls.n	800974e <tcp_eff_send_mss_netif+0x4e>
 8009744:	8afa      	ldrh	r2, [r7, #22]
 8009746:	8abb      	ldrh	r3, [r7, #20]
 8009748:	1ad3      	subs	r3, r2, r3
 800974a:	b29b      	uxth	r3, r3
 800974c:	e000      	b.n	8009750 <tcp_eff_send_mss_netif+0x50>
 800974e:	2300      	movs	r3, #0
 8009750:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009752:	8a7a      	ldrh	r2, [r7, #18]
 8009754:	89fb      	ldrh	r3, [r7, #14]
 8009756:	4293      	cmp	r3, r2
 8009758:	bf28      	it	cs
 800975a:	4613      	movcs	r3, r2
 800975c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800975e:	89fb      	ldrh	r3, [r7, #14]
}
 8009760:	4618      	mov	r0, r3
 8009762:	3718      	adds	r7, #24
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	08013eb8 	.word	0x08013eb8
 800976c:	080145c4 	.word	0x080145c4
 8009770:	08013efc 	.word	0x08013efc

08009774 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d119      	bne.n	80097bc <tcp_netif_ip_addr_changed_pcblist+0x48>
 8009788:	4b10      	ldr	r3, [pc, #64]	@ (80097cc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800978a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800978e:	4910      	ldr	r1, [pc, #64]	@ (80097d0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8009790:	4810      	ldr	r0, [pc, #64]	@ (80097d4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8009792:	f008 fce9 	bl	8012168 <iprintf>

  while (pcb != NULL) {
 8009796:	e011      	b.n	80097bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d108      	bne.n	80097b6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80097aa:	68f8      	ldr	r0, [r7, #12]
 80097ac:	f7fe fdc8 	bl	8008340 <tcp_abort>
      pcb = next;
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	60fb      	str	r3, [r7, #12]
 80097b4:	e002      	b.n	80097bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d1ea      	bne.n	8009798 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80097c2:	bf00      	nop
 80097c4:	bf00      	nop
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	08013eb8 	.word	0x08013eb8
 80097d0:	080145ec 	.word	0x080145ec
 80097d4:	08013efc 	.word	0x08013efc

080097d8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d02a      	beq.n	800983e <tcp_netif_ip_addr_changed+0x66>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d026      	beq.n	800983e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80097f0:	4b15      	ldr	r3, [pc, #84]	@ (8009848 <tcp_netif_ip_addr_changed+0x70>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4619      	mov	r1, r3
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f7ff ffbc 	bl	8009774 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80097fc:	4b13      	ldr	r3, [pc, #76]	@ (800984c <tcp_netif_ip_addr_changed+0x74>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4619      	mov	r1, r3
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f7ff ffb6 	bl	8009774 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d017      	beq.n	800983e <tcp_netif_ip_addr_changed+0x66>
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d013      	beq.n	800983e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009816:	4b0e      	ldr	r3, [pc, #56]	@ (8009850 <tcp_netif_ip_addr_changed+0x78>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	60fb      	str	r3, [r7, #12]
 800981c:	e00c      	b.n	8009838 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	429a      	cmp	r2, r3
 8009828:	d103      	bne.n	8009832 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	60fb      	str	r3, [r7, #12]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1ef      	bne.n	800981e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800983e:	bf00      	nop
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	2000843c 	.word	0x2000843c
 800984c:	20008434 	.word	0x20008434
 8009850:	20008438 	.word	0x20008438

08009854 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009860:	2b00      	cmp	r3, #0
 8009862:	d007      	beq.n	8009874 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009868:	4618      	mov	r0, r3
 800986a:	f7ff fbfb 	bl	8009064 <tcp_segs_free>
    pcb->ooseq = NULL;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009874:	bf00      	nop
 8009876:	3708      	adds	r7, #8
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800987c:	b590      	push	{r4, r7, lr}
 800987e:	b08d      	sub	sp, #52	@ 0x34
 8009880:	af04      	add	r7, sp, #16
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d105      	bne.n	8009898 <tcp_input+0x1c>
 800988c:	4b9b      	ldr	r3, [pc, #620]	@ (8009afc <tcp_input+0x280>)
 800988e:	2283      	movs	r2, #131	@ 0x83
 8009890:	499b      	ldr	r1, [pc, #620]	@ (8009b00 <tcp_input+0x284>)
 8009892:	489c      	ldr	r0, [pc, #624]	@ (8009b04 <tcp_input+0x288>)
 8009894:	f008 fc68 	bl	8012168 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	4a9a      	ldr	r2, [pc, #616]	@ (8009b08 <tcp_input+0x28c>)
 800989e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	895b      	ldrh	r3, [r3, #10]
 80098a4:	2b13      	cmp	r3, #19
 80098a6:	f240 83d1 	bls.w	800a04c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80098aa:	4b98      	ldr	r3, [pc, #608]	@ (8009b0c <tcp_input+0x290>)
 80098ac:	695b      	ldr	r3, [r3, #20]
 80098ae:	4a97      	ldr	r2, [pc, #604]	@ (8009b0c <tcp_input+0x290>)
 80098b0:	6812      	ldr	r2, [r2, #0]
 80098b2:	4611      	mov	r1, r2
 80098b4:	4618      	mov	r0, r3
 80098b6:	f006 f869 	bl	800f98c <ip4_addr_isbroadcast_u32>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	f040 83c7 	bne.w	800a050 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80098c2:	4b92      	ldr	r3, [pc, #584]	@ (8009b0c <tcp_input+0x290>)
 80098c4:	695b      	ldr	r3, [r3, #20]
 80098c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80098ca:	2be0      	cmp	r3, #224	@ 0xe0
 80098cc:	f000 83c0 	beq.w	800a050 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80098d0:	4b8d      	ldr	r3, [pc, #564]	@ (8009b08 <tcp_input+0x28c>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	899b      	ldrh	r3, [r3, #12]
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	4618      	mov	r0, r3
 80098da:	f7fc fc4b 	bl	8006174 <lwip_htons>
 80098de:	4603      	mov	r3, r0
 80098e0:	0b1b      	lsrs	r3, r3, #12
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80098ea:	7cbb      	ldrb	r3, [r7, #18]
 80098ec:	2b13      	cmp	r3, #19
 80098ee:	f240 83b1 	bls.w	800a054 <tcp_input+0x7d8>
 80098f2:	7cbb      	ldrb	r3, [r7, #18]
 80098f4:	b29a      	uxth	r2, r3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	891b      	ldrh	r3, [r3, #8]
 80098fa:	429a      	cmp	r2, r3
 80098fc:	f200 83aa 	bhi.w	800a054 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009900:	7cbb      	ldrb	r3, [r7, #18]
 8009902:	b29b      	uxth	r3, r3
 8009904:	3b14      	subs	r3, #20
 8009906:	b29a      	uxth	r2, r3
 8009908:	4b81      	ldr	r3, [pc, #516]	@ (8009b10 <tcp_input+0x294>)
 800990a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800990c:	4b81      	ldr	r3, [pc, #516]	@ (8009b14 <tcp_input+0x298>)
 800990e:	2200      	movs	r2, #0
 8009910:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	895a      	ldrh	r2, [r3, #10]
 8009916:	7cbb      	ldrb	r3, [r7, #18]
 8009918:	b29b      	uxth	r3, r3
 800991a:	429a      	cmp	r2, r3
 800991c:	d309      	bcc.n	8009932 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800991e:	4b7c      	ldr	r3, [pc, #496]	@ (8009b10 <tcp_input+0x294>)
 8009920:	881a      	ldrh	r2, [r3, #0]
 8009922:	4b7d      	ldr	r3, [pc, #500]	@ (8009b18 <tcp_input+0x29c>)
 8009924:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009926:	7cbb      	ldrb	r3, [r7, #18]
 8009928:	4619      	mov	r1, r3
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f7fd fefa 	bl	8007724 <pbuf_remove_header>
 8009930:	e04e      	b.n	80099d0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d105      	bne.n	8009946 <tcp_input+0xca>
 800993a:	4b70      	ldr	r3, [pc, #448]	@ (8009afc <tcp_input+0x280>)
 800993c:	22c2      	movs	r2, #194	@ 0xc2
 800993e:	4977      	ldr	r1, [pc, #476]	@ (8009b1c <tcp_input+0x2a0>)
 8009940:	4870      	ldr	r0, [pc, #448]	@ (8009b04 <tcp_input+0x288>)
 8009942:	f008 fc11 	bl	8012168 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8009946:	2114      	movs	r1, #20
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f7fd feeb 	bl	8007724 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	895a      	ldrh	r2, [r3, #10]
 8009952:	4b71      	ldr	r3, [pc, #452]	@ (8009b18 <tcp_input+0x29c>)
 8009954:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009956:	4b6e      	ldr	r3, [pc, #440]	@ (8009b10 <tcp_input+0x294>)
 8009958:	881a      	ldrh	r2, [r3, #0]
 800995a:	4b6f      	ldr	r3, [pc, #444]	@ (8009b18 <tcp_input+0x29c>)
 800995c:	881b      	ldrh	r3, [r3, #0]
 800995e:	1ad3      	subs	r3, r2, r3
 8009960:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8009962:	4b6d      	ldr	r3, [pc, #436]	@ (8009b18 <tcp_input+0x29c>)
 8009964:	881b      	ldrh	r3, [r3, #0]
 8009966:	4619      	mov	r1, r3
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f7fd fedb 	bl	8007724 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	895b      	ldrh	r3, [r3, #10]
 8009974:	8a3a      	ldrh	r2, [r7, #16]
 8009976:	429a      	cmp	r2, r3
 8009978:	f200 836e 	bhi.w	800a058 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	4a64      	ldr	r2, [pc, #400]	@ (8009b14 <tcp_input+0x298>)
 8009984:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	8a3a      	ldrh	r2, [r7, #16]
 800998c:	4611      	mov	r1, r2
 800998e:	4618      	mov	r0, r3
 8009990:	f7fd fec8 	bl	8007724 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	891a      	ldrh	r2, [r3, #8]
 8009998:	8a3b      	ldrh	r3, [r7, #16]
 800999a:	1ad3      	subs	r3, r2, r3
 800999c:	b29a      	uxth	r2, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	895b      	ldrh	r3, [r3, #10]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d005      	beq.n	80099b6 <tcp_input+0x13a>
 80099aa:	4b54      	ldr	r3, [pc, #336]	@ (8009afc <tcp_input+0x280>)
 80099ac:	22df      	movs	r2, #223	@ 0xdf
 80099ae:	495c      	ldr	r1, [pc, #368]	@ (8009b20 <tcp_input+0x2a4>)
 80099b0:	4854      	ldr	r0, [pc, #336]	@ (8009b04 <tcp_input+0x288>)
 80099b2:	f008 fbd9 	bl	8012168 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	891a      	ldrh	r2, [r3, #8]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	891b      	ldrh	r3, [r3, #8]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d005      	beq.n	80099d0 <tcp_input+0x154>
 80099c4:	4b4d      	ldr	r3, [pc, #308]	@ (8009afc <tcp_input+0x280>)
 80099c6:	22e0      	movs	r2, #224	@ 0xe0
 80099c8:	4956      	ldr	r1, [pc, #344]	@ (8009b24 <tcp_input+0x2a8>)
 80099ca:	484e      	ldr	r0, [pc, #312]	@ (8009b04 <tcp_input+0x288>)
 80099cc:	f008 fbcc 	bl	8012168 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80099d0:	4b4d      	ldr	r3, [pc, #308]	@ (8009b08 <tcp_input+0x28c>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	881b      	ldrh	r3, [r3, #0]
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	4a4b      	ldr	r2, [pc, #300]	@ (8009b08 <tcp_input+0x28c>)
 80099da:	6814      	ldr	r4, [r2, #0]
 80099dc:	4618      	mov	r0, r3
 80099de:	f7fc fbc9 	bl	8006174 <lwip_htons>
 80099e2:	4603      	mov	r3, r0
 80099e4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80099e6:	4b48      	ldr	r3, [pc, #288]	@ (8009b08 <tcp_input+0x28c>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	885b      	ldrh	r3, [r3, #2]
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	4a46      	ldr	r2, [pc, #280]	@ (8009b08 <tcp_input+0x28c>)
 80099f0:	6814      	ldr	r4, [r2, #0]
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7fc fbbe 	bl	8006174 <lwip_htons>
 80099f8:	4603      	mov	r3, r0
 80099fa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80099fc:	4b42      	ldr	r3, [pc, #264]	@ (8009b08 <tcp_input+0x28c>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	4a41      	ldr	r2, [pc, #260]	@ (8009b08 <tcp_input+0x28c>)
 8009a04:	6814      	ldr	r4, [r2, #0]
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fc fbca 	bl	80061a0 <lwip_htonl>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	6063      	str	r3, [r4, #4]
 8009a10:	6863      	ldr	r3, [r4, #4]
 8009a12:	4a45      	ldr	r2, [pc, #276]	@ (8009b28 <tcp_input+0x2ac>)
 8009a14:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009a16:	4b3c      	ldr	r3, [pc, #240]	@ (8009b08 <tcp_input+0x28c>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	4a3a      	ldr	r2, [pc, #232]	@ (8009b08 <tcp_input+0x28c>)
 8009a1e:	6814      	ldr	r4, [r2, #0]
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7fc fbbd 	bl	80061a0 <lwip_htonl>
 8009a26:	4603      	mov	r3, r0
 8009a28:	60a3      	str	r3, [r4, #8]
 8009a2a:	68a3      	ldr	r3, [r4, #8]
 8009a2c:	4a3f      	ldr	r2, [pc, #252]	@ (8009b2c <tcp_input+0x2b0>)
 8009a2e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009a30:	4b35      	ldr	r3, [pc, #212]	@ (8009b08 <tcp_input+0x28c>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	89db      	ldrh	r3, [r3, #14]
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	4a33      	ldr	r2, [pc, #204]	@ (8009b08 <tcp_input+0x28c>)
 8009a3a:	6814      	ldr	r4, [r2, #0]
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f7fc fb99 	bl	8006174 <lwip_htons>
 8009a42:	4603      	mov	r3, r0
 8009a44:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8009a46:	4b30      	ldr	r3, [pc, #192]	@ (8009b08 <tcp_input+0x28c>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	899b      	ldrh	r3, [r3, #12]
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7fc fb90 	bl	8006174 <lwip_htons>
 8009a54:	4603      	mov	r3, r0
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a5c:	b2da      	uxtb	r2, r3
 8009a5e:	4b34      	ldr	r3, [pc, #208]	@ (8009b30 <tcp_input+0x2b4>)
 8009a60:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	891a      	ldrh	r2, [r3, #8]
 8009a66:	4b33      	ldr	r3, [pc, #204]	@ (8009b34 <tcp_input+0x2b8>)
 8009a68:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009a6a:	4b31      	ldr	r3, [pc, #196]	@ (8009b30 <tcp_input+0x2b4>)
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	f003 0303 	and.w	r3, r3, #3
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d00c      	beq.n	8009a90 <tcp_input+0x214>
    tcplen++;
 8009a76:	4b2f      	ldr	r3, [pc, #188]	@ (8009b34 <tcp_input+0x2b8>)
 8009a78:	881b      	ldrh	r3, [r3, #0]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	4b2d      	ldr	r3, [pc, #180]	@ (8009b34 <tcp_input+0x2b8>)
 8009a80:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	891a      	ldrh	r2, [r3, #8]
 8009a86:	4b2b      	ldr	r3, [pc, #172]	@ (8009b34 <tcp_input+0x2b8>)
 8009a88:	881b      	ldrh	r3, [r3, #0]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	f200 82e6 	bhi.w	800a05c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009a90:	2300      	movs	r3, #0
 8009a92:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a94:	4b28      	ldr	r3, [pc, #160]	@ (8009b38 <tcp_input+0x2bc>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	61fb      	str	r3, [r7, #28]
 8009a9a:	e09d      	b.n	8009bd8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	7d1b      	ldrb	r3, [r3, #20]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d105      	bne.n	8009ab0 <tcp_input+0x234>
 8009aa4:	4b15      	ldr	r3, [pc, #84]	@ (8009afc <tcp_input+0x280>)
 8009aa6:	22fb      	movs	r2, #251	@ 0xfb
 8009aa8:	4924      	ldr	r1, [pc, #144]	@ (8009b3c <tcp_input+0x2c0>)
 8009aaa:	4816      	ldr	r0, [pc, #88]	@ (8009b04 <tcp_input+0x288>)
 8009aac:	f008 fb5c 	bl	8012168 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	7d1b      	ldrb	r3, [r3, #20]
 8009ab4:	2b0a      	cmp	r3, #10
 8009ab6:	d105      	bne.n	8009ac4 <tcp_input+0x248>
 8009ab8:	4b10      	ldr	r3, [pc, #64]	@ (8009afc <tcp_input+0x280>)
 8009aba:	22fc      	movs	r2, #252	@ 0xfc
 8009abc:	4920      	ldr	r1, [pc, #128]	@ (8009b40 <tcp_input+0x2c4>)
 8009abe:	4811      	ldr	r0, [pc, #68]	@ (8009b04 <tcp_input+0x288>)
 8009ac0:	f008 fb52 	bl	8012168 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	7d1b      	ldrb	r3, [r3, #20]
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d105      	bne.n	8009ad8 <tcp_input+0x25c>
 8009acc:	4b0b      	ldr	r3, [pc, #44]	@ (8009afc <tcp_input+0x280>)
 8009ace:	22fd      	movs	r2, #253	@ 0xfd
 8009ad0:	491c      	ldr	r1, [pc, #112]	@ (8009b44 <tcp_input+0x2c8>)
 8009ad2:	480c      	ldr	r0, [pc, #48]	@ (8009b04 <tcp_input+0x288>)
 8009ad4:	f008 fb48 	bl	8012168 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009ad8:	69fb      	ldr	r3, [r7, #28]
 8009ada:	7a1b      	ldrb	r3, [r3, #8]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d033      	beq.n	8009b48 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	7a1a      	ldrb	r2, [r3, #8]
 8009ae4:	4b09      	ldr	r3, [pc, #36]	@ (8009b0c <tcp_input+0x290>)
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009aec:	3301      	adds	r3, #1
 8009aee:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d029      	beq.n	8009b48 <tcp_input+0x2cc>
      prev = pcb;
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	61bb      	str	r3, [r7, #24]
      continue;
 8009af8:	e06b      	b.n	8009bd2 <tcp_input+0x356>
 8009afa:	bf00      	nop
 8009afc:	08014620 	.word	0x08014620
 8009b00:	08014654 	.word	0x08014654
 8009b04:	0801466c 	.word	0x0801466c
 8009b08:	20008458 	.word	0x20008458
 8009b0c:	20004ec0 	.word	0x20004ec0
 8009b10:	2000845c 	.word	0x2000845c
 8009b14:	20008460 	.word	0x20008460
 8009b18:	2000845e 	.word	0x2000845e
 8009b1c:	08014694 	.word	0x08014694
 8009b20:	080146a4 	.word	0x080146a4
 8009b24:	080146b0 	.word	0x080146b0
 8009b28:	20008468 	.word	0x20008468
 8009b2c:	2000846c 	.word	0x2000846c
 8009b30:	20008474 	.word	0x20008474
 8009b34:	20008472 	.word	0x20008472
 8009b38:	2000843c 	.word	0x2000843c
 8009b3c:	080146d0 	.word	0x080146d0
 8009b40:	080146f8 	.word	0x080146f8
 8009b44:	08014724 	.word	0x08014724
    }

    if (pcb->remote_port == tcphdr->src &&
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	8b1a      	ldrh	r2, [r3, #24]
 8009b4c:	4b72      	ldr	r3, [pc, #456]	@ (8009d18 <tcp_input+0x49c>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	881b      	ldrh	r3, [r3, #0]
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d13a      	bne.n	8009bce <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	8ada      	ldrh	r2, [r3, #22]
 8009b5c:	4b6e      	ldr	r3, [pc, #440]	@ (8009d18 <tcp_input+0x49c>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	885b      	ldrh	r3, [r3, #2]
 8009b62:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d132      	bne.n	8009bce <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	685a      	ldr	r2, [r3, #4]
 8009b6c:	4b6b      	ldr	r3, [pc, #428]	@ (8009d1c <tcp_input+0x4a0>)
 8009b6e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d12c      	bne.n	8009bce <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	681a      	ldr	r2, [r3, #0]
 8009b78:	4b68      	ldr	r3, [pc, #416]	@ (8009d1c <tcp_input+0x4a0>)
 8009b7a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d126      	bne.n	8009bce <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	69fa      	ldr	r2, [r7, #28]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d106      	bne.n	8009b98 <tcp_input+0x31c>
 8009b8a:	4b65      	ldr	r3, [pc, #404]	@ (8009d20 <tcp_input+0x4a4>)
 8009b8c:	f240 120d 	movw	r2, #269	@ 0x10d
 8009b90:	4964      	ldr	r1, [pc, #400]	@ (8009d24 <tcp_input+0x4a8>)
 8009b92:	4865      	ldr	r0, [pc, #404]	@ (8009d28 <tcp_input+0x4ac>)
 8009b94:	f008 fae8 	bl	8012168 <iprintf>
      if (prev != NULL) {
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00a      	beq.n	8009bb4 <tcp_input+0x338>
        prev->next = pcb->next;
 8009b9e:	69fb      	ldr	r3, [r7, #28]
 8009ba0:	68da      	ldr	r2, [r3, #12]
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009ba6:	4b61      	ldr	r3, [pc, #388]	@ (8009d2c <tcp_input+0x4b0>)
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009bae:	4a5f      	ldr	r2, [pc, #380]	@ (8009d2c <tcp_input+0x4b0>)
 8009bb0:	69fb      	ldr	r3, [r7, #28]
 8009bb2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	69fa      	ldr	r2, [r7, #28]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d111      	bne.n	8009be2 <tcp_input+0x366>
 8009bbe:	4b58      	ldr	r3, [pc, #352]	@ (8009d20 <tcp_input+0x4a4>)
 8009bc0:	f240 1215 	movw	r2, #277	@ 0x115
 8009bc4:	495a      	ldr	r1, [pc, #360]	@ (8009d30 <tcp_input+0x4b4>)
 8009bc6:	4858      	ldr	r0, [pc, #352]	@ (8009d28 <tcp_input+0x4ac>)
 8009bc8:	f008 face 	bl	8012168 <iprintf>
      break;
 8009bcc:	e009      	b.n	8009be2 <tcp_input+0x366>
    }
    prev = pcb;
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	61fb      	str	r3, [r7, #28]
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	f47f af5e 	bne.w	8009a9c <tcp_input+0x220>
 8009be0:	e000      	b.n	8009be4 <tcp_input+0x368>
      break;
 8009be2:	bf00      	nop
  }

  if (pcb == NULL) {
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	f040 80aa 	bne.w	8009d40 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009bec:	4b51      	ldr	r3, [pc, #324]	@ (8009d34 <tcp_input+0x4b8>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	61fb      	str	r3, [r7, #28]
 8009bf2:	e03f      	b.n	8009c74 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009bf4:	69fb      	ldr	r3, [r7, #28]
 8009bf6:	7d1b      	ldrb	r3, [r3, #20]
 8009bf8:	2b0a      	cmp	r3, #10
 8009bfa:	d006      	beq.n	8009c0a <tcp_input+0x38e>
 8009bfc:	4b48      	ldr	r3, [pc, #288]	@ (8009d20 <tcp_input+0x4a4>)
 8009bfe:	f240 121f 	movw	r2, #287	@ 0x11f
 8009c02:	494d      	ldr	r1, [pc, #308]	@ (8009d38 <tcp_input+0x4bc>)
 8009c04:	4848      	ldr	r0, [pc, #288]	@ (8009d28 <tcp_input+0x4ac>)
 8009c06:	f008 faaf 	bl	8012168 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	7a1b      	ldrb	r3, [r3, #8]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d009      	beq.n	8009c26 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009c12:	69fb      	ldr	r3, [r7, #28]
 8009c14:	7a1a      	ldrb	r2, [r3, #8]
 8009c16:	4b41      	ldr	r3, [pc, #260]	@ (8009d1c <tcp_input+0x4a0>)
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009c1e:	3301      	adds	r3, #1
 8009c20:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d122      	bne.n	8009c6c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	8b1a      	ldrh	r2, [r3, #24]
 8009c2a:	4b3b      	ldr	r3, [pc, #236]	@ (8009d18 <tcp_input+0x49c>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	881b      	ldrh	r3, [r3, #0]
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d11b      	bne.n	8009c6e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	8ada      	ldrh	r2, [r3, #22]
 8009c3a:	4b37      	ldr	r3, [pc, #220]	@ (8009d18 <tcp_input+0x49c>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	885b      	ldrh	r3, [r3, #2]
 8009c40:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d113      	bne.n	8009c6e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	685a      	ldr	r2, [r3, #4]
 8009c4a:	4b34      	ldr	r3, [pc, #208]	@ (8009d1c <tcp_input+0x4a0>)
 8009c4c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d10d      	bne.n	8009c6e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	4b31      	ldr	r3, [pc, #196]	@ (8009d1c <tcp_input+0x4a0>)
 8009c58:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d107      	bne.n	8009c6e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009c5e:	69f8      	ldr	r0, [r7, #28]
 8009c60:	f000 fb56 	bl	800a310 <tcp_timewait_input>
        }
        pbuf_free(p);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f7fd fde3 	bl	8007830 <pbuf_free>
        return;
 8009c6a:	e1fd      	b.n	800a068 <tcp_input+0x7ec>
        continue;
 8009c6c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	68db      	ldr	r3, [r3, #12]
 8009c72:	61fb      	str	r3, [r7, #28]
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d1bc      	bne.n	8009bf4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009c7e:	4b2f      	ldr	r3, [pc, #188]	@ (8009d3c <tcp_input+0x4c0>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	617b      	str	r3, [r7, #20]
 8009c84:	e02a      	b.n	8009cdc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	7a1b      	ldrb	r3, [r3, #8]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00c      	beq.n	8009ca8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	7a1a      	ldrb	r2, [r3, #8]
 8009c92:	4b22      	ldr	r3, [pc, #136]	@ (8009d1c <tcp_input+0x4a0>)
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d002      	beq.n	8009ca8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	61bb      	str	r3, [r7, #24]
        continue;
 8009ca6:	e016      	b.n	8009cd6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	8ada      	ldrh	r2, [r3, #22]
 8009cac:	4b1a      	ldr	r3, [pc, #104]	@ (8009d18 <tcp_input+0x49c>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	885b      	ldrh	r3, [r3, #2]
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d10c      	bne.n	8009cd2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	4b17      	ldr	r3, [pc, #92]	@ (8009d1c <tcp_input+0x4a0>)
 8009cbe:	695b      	ldr	r3, [r3, #20]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d00f      	beq.n	8009ce4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00d      	beq.n	8009ce6 <tcp_input+0x46a>
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d009      	beq.n	8009ce6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	617b      	str	r3, [r7, #20]
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d1d1      	bne.n	8009c86 <tcp_input+0x40a>
 8009ce2:	e000      	b.n	8009ce6 <tcp_input+0x46a>
            break;
 8009ce4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d029      	beq.n	8009d40 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00a      	beq.n	8009d08 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	68da      	ldr	r2, [r3, #12]
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009cfa:	4b10      	ldr	r3, [pc, #64]	@ (8009d3c <tcp_input+0x4c0>)
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009d02:	4a0e      	ldr	r2, [pc, #56]	@ (8009d3c <tcp_input+0x4c0>)
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8009d08:	6978      	ldr	r0, [r7, #20]
 8009d0a:	f000 fa03 	bl	800a114 <tcp_listen_input>
      }
      pbuf_free(p);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f7fd fd8e 	bl	8007830 <pbuf_free>
      return;
 8009d14:	e1a8      	b.n	800a068 <tcp_input+0x7ec>
 8009d16:	bf00      	nop
 8009d18:	20008458 	.word	0x20008458
 8009d1c:	20004ec0 	.word	0x20004ec0
 8009d20:	08014620 	.word	0x08014620
 8009d24:	0801474c 	.word	0x0801474c
 8009d28:	0801466c 	.word	0x0801466c
 8009d2c:	2000843c 	.word	0x2000843c
 8009d30:	08014778 	.word	0x08014778
 8009d34:	20008440 	.word	0x20008440
 8009d38:	080147a4 	.word	0x080147a4
 8009d3c:	20008438 	.word	0x20008438
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	f000 8158 	beq.w	8009ff8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009d48:	4b95      	ldr	r3, [pc, #596]	@ (8009fa0 <tcp_input+0x724>)
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	891a      	ldrh	r2, [r3, #8]
 8009d52:	4b93      	ldr	r3, [pc, #588]	@ (8009fa0 <tcp_input+0x724>)
 8009d54:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009d56:	4a92      	ldr	r2, [pc, #584]	@ (8009fa0 <tcp_input+0x724>)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009d5c:	4b91      	ldr	r3, [pc, #580]	@ (8009fa4 <tcp_input+0x728>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a8f      	ldr	r2, [pc, #572]	@ (8009fa0 <tcp_input+0x724>)
 8009d62:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8009d64:	4b90      	ldr	r3, [pc, #576]	@ (8009fa8 <tcp_input+0x72c>)
 8009d66:	2200      	movs	r2, #0
 8009d68:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009d6a:	4b90      	ldr	r3, [pc, #576]	@ (8009fac <tcp_input+0x730>)
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009d70:	4b8f      	ldr	r3, [pc, #572]	@ (8009fb0 <tcp_input+0x734>)
 8009d72:	2200      	movs	r2, #0
 8009d74:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009d76:	4b8f      	ldr	r3, [pc, #572]	@ (8009fb4 <tcp_input+0x738>)
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	f003 0308 	and.w	r3, r3, #8
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d006      	beq.n	8009d90 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	7b5b      	ldrb	r3, [r3, #13]
 8009d86:	f043 0301 	orr.w	r3, r3, #1
 8009d8a:	b2da      	uxtb	r2, r3
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d017      	beq.n	8009dc8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009d98:	69f8      	ldr	r0, [r7, #28]
 8009d9a:	f7ff f8e7 	bl	8008f6c <tcp_process_refused_data>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	f113 0f0d 	cmn.w	r3, #13
 8009da4:	d007      	beq.n	8009db6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00c      	beq.n	8009dc8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009dae:	4b82      	ldr	r3, [pc, #520]	@ (8009fb8 <tcp_input+0x73c>)
 8009db0:	881b      	ldrh	r3, [r3, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d008      	beq.n	8009dc8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	f040 80e3 	bne.w	8009f86 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009dc0:	69f8      	ldr	r0, [r7, #28]
 8009dc2:	f003 fdff 	bl	800d9c4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009dc6:	e0de      	b.n	8009f86 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8009dc8:	4a7c      	ldr	r2, [pc, #496]	@ (8009fbc <tcp_input+0x740>)
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009dce:	69f8      	ldr	r0, [r7, #28]
 8009dd0:	f000 fb18 	bl	800a404 <tcp_process>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009dd8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ddc:	f113 0f0d 	cmn.w	r3, #13
 8009de0:	f000 80d3 	beq.w	8009f8a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8009de4:	4b71      	ldr	r3, [pc, #452]	@ (8009fac <tcp_input+0x730>)
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	f003 0308 	and.w	r3, r3, #8
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d015      	beq.n	8009e1c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009df0:	69fb      	ldr	r3, [r7, #28]
 8009df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d008      	beq.n	8009e0c <tcp_input+0x590>
 8009dfa:	69fb      	ldr	r3, [r7, #28]
 8009dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e00:	69fa      	ldr	r2, [r7, #28]
 8009e02:	6912      	ldr	r2, [r2, #16]
 8009e04:	f06f 010d 	mvn.w	r1, #13
 8009e08:	4610      	mov	r0, r2
 8009e0a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009e0c:	69f9      	ldr	r1, [r7, #28]
 8009e0e:	486c      	ldr	r0, [pc, #432]	@ (8009fc0 <tcp_input+0x744>)
 8009e10:	f7ff fbbc 	bl	800958c <tcp_pcb_remove>
        tcp_free(pcb);
 8009e14:	69f8      	ldr	r0, [r7, #28]
 8009e16:	f7fd ffab 	bl	8007d70 <tcp_free>
 8009e1a:	e0da      	b.n	8009fd2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009e20:	4b63      	ldr	r3, [pc, #396]	@ (8009fb0 <tcp_input+0x734>)
 8009e22:	881b      	ldrh	r3, [r3, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d01d      	beq.n	8009e64 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009e28:	4b61      	ldr	r3, [pc, #388]	@ (8009fb0 <tcp_input+0x734>)
 8009e2a:	881b      	ldrh	r3, [r3, #0]
 8009e2c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d00a      	beq.n	8009e4e <tcp_input+0x5d2>
 8009e38:	69fb      	ldr	r3, [r7, #28]
 8009e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e3e:	69fa      	ldr	r2, [r7, #28]
 8009e40:	6910      	ldr	r0, [r2, #16]
 8009e42:	89fa      	ldrh	r2, [r7, #14]
 8009e44:	69f9      	ldr	r1, [r7, #28]
 8009e46:	4798      	blx	r3
 8009e48:	4603      	mov	r3, r0
 8009e4a:	74fb      	strb	r3, [r7, #19]
 8009e4c:	e001      	b.n	8009e52 <tcp_input+0x5d6>
 8009e4e:	2300      	movs	r3, #0
 8009e50:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009e52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009e56:	f113 0f0d 	cmn.w	r3, #13
 8009e5a:	f000 8098 	beq.w	8009f8e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009e5e:	4b54      	ldr	r3, [pc, #336]	@ (8009fb0 <tcp_input+0x734>)
 8009e60:	2200      	movs	r2, #0
 8009e62:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009e64:	69f8      	ldr	r0, [r7, #28]
 8009e66:	f000 f915 	bl	800a094 <tcp_input_delayed_close>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	f040 8090 	bne.w	8009f92 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009e72:	4b4d      	ldr	r3, [pc, #308]	@ (8009fa8 <tcp_input+0x72c>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d041      	beq.n	8009efe <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009e7a:	69fb      	ldr	r3, [r7, #28]
 8009e7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d006      	beq.n	8009e90 <tcp_input+0x614>
 8009e82:	4b50      	ldr	r3, [pc, #320]	@ (8009fc4 <tcp_input+0x748>)
 8009e84:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8009e88:	494f      	ldr	r1, [pc, #316]	@ (8009fc8 <tcp_input+0x74c>)
 8009e8a:	4850      	ldr	r0, [pc, #320]	@ (8009fcc <tcp_input+0x750>)
 8009e8c:	f008 f96c 	bl	8012168 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	8b5b      	ldrh	r3, [r3, #26]
 8009e94:	f003 0310 	and.w	r3, r3, #16
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d008      	beq.n	8009eae <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009e9c:	4b42      	ldr	r3, [pc, #264]	@ (8009fa8 <tcp_input+0x72c>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7fd fcc5 	bl	8007830 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009ea6:	69f8      	ldr	r0, [r7, #28]
 8009ea8:	f7fe fa4a 	bl	8008340 <tcp_abort>
            goto aborted;
 8009eac:	e091      	b.n	8009fd2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009eae:	69fb      	ldr	r3, [r7, #28]
 8009eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00c      	beq.n	8009ed2 <tcp_input+0x656>
 8009eb8:	69fb      	ldr	r3, [r7, #28]
 8009eba:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009ebe:	69fb      	ldr	r3, [r7, #28]
 8009ec0:	6918      	ldr	r0, [r3, #16]
 8009ec2:	4b39      	ldr	r3, [pc, #228]	@ (8009fa8 <tcp_input+0x72c>)
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	69f9      	ldr	r1, [r7, #28]
 8009eca:	47a0      	blx	r4
 8009ecc:	4603      	mov	r3, r0
 8009ece:	74fb      	strb	r3, [r7, #19]
 8009ed0:	e008      	b.n	8009ee4 <tcp_input+0x668>
 8009ed2:	4b35      	ldr	r3, [pc, #212]	@ (8009fa8 <tcp_input+0x72c>)
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	69f9      	ldr	r1, [r7, #28]
 8009eda:	2000      	movs	r0, #0
 8009edc:	f7ff f91c 	bl	8009118 <tcp_recv_null>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009ee4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ee8:	f113 0f0d 	cmn.w	r3, #13
 8009eec:	d053      	beq.n	8009f96 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009eee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d003      	beq.n	8009efe <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8009ef6:	4b2c      	ldr	r3, [pc, #176]	@ (8009fa8 <tcp_input+0x72c>)
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	69fb      	ldr	r3, [r7, #28]
 8009efc:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009efe:	4b2b      	ldr	r3, [pc, #172]	@ (8009fac <tcp_input+0x730>)
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	f003 0320 	and.w	r3, r3, #32
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d030      	beq.n	8009f6c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d009      	beq.n	8009f26 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009f12:	69fb      	ldr	r3, [r7, #28]
 8009f14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f16:	7b5a      	ldrb	r2, [r3, #13]
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f1c:	f042 0220 	orr.w	r2, r2, #32
 8009f20:	b2d2      	uxtb	r2, r2
 8009f22:	735a      	strb	r2, [r3, #13]
 8009f24:	e022      	b.n	8009f6c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009f26:	69fb      	ldr	r3, [r7, #28]
 8009f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f2a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009f2e:	d005      	beq.n	8009f3c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f34:	3301      	adds	r3, #1
 8009f36:	b29a      	uxth	r2, r3
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009f3c:	69fb      	ldr	r3, [r7, #28]
 8009f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d00b      	beq.n	8009f5e <tcp_input+0x6e2>
 8009f46:	69fb      	ldr	r3, [r7, #28]
 8009f48:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	6918      	ldr	r0, [r3, #16]
 8009f50:	2300      	movs	r3, #0
 8009f52:	2200      	movs	r2, #0
 8009f54:	69f9      	ldr	r1, [r7, #28]
 8009f56:	47a0      	blx	r4
 8009f58:	4603      	mov	r3, r0
 8009f5a:	74fb      	strb	r3, [r7, #19]
 8009f5c:	e001      	b.n	8009f62 <tcp_input+0x6e6>
 8009f5e:	2300      	movs	r3, #0
 8009f60:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009f62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009f66:	f113 0f0d 	cmn.w	r3, #13
 8009f6a:	d016      	beq.n	8009f9a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009f6c:	4b13      	ldr	r3, [pc, #76]	@ (8009fbc <tcp_input+0x740>)
 8009f6e:	2200      	movs	r2, #0
 8009f70:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009f72:	69f8      	ldr	r0, [r7, #28]
 8009f74:	f000 f88e 	bl	800a094 <tcp_input_delayed_close>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d128      	bne.n	8009fd0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009f7e:	69f8      	ldr	r0, [r7, #28]
 8009f80:	f002 ff1a 	bl	800cdb8 <tcp_output>
 8009f84:	e025      	b.n	8009fd2 <tcp_input+0x756>
        goto aborted;
 8009f86:	bf00      	nop
 8009f88:	e023      	b.n	8009fd2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009f8a:	bf00      	nop
 8009f8c:	e021      	b.n	8009fd2 <tcp_input+0x756>
              goto aborted;
 8009f8e:	bf00      	nop
 8009f90:	e01f      	b.n	8009fd2 <tcp_input+0x756>
          goto aborted;
 8009f92:	bf00      	nop
 8009f94:	e01d      	b.n	8009fd2 <tcp_input+0x756>
            goto aborted;
 8009f96:	bf00      	nop
 8009f98:	e01b      	b.n	8009fd2 <tcp_input+0x756>
              goto aborted;
 8009f9a:	bf00      	nop
 8009f9c:	e019      	b.n	8009fd2 <tcp_input+0x756>
 8009f9e:	bf00      	nop
 8009fa0:	20008448 	.word	0x20008448
 8009fa4:	20008458 	.word	0x20008458
 8009fa8:	20008478 	.word	0x20008478
 8009fac:	20008475 	.word	0x20008475
 8009fb0:	20008470 	.word	0x20008470
 8009fb4:	20008474 	.word	0x20008474
 8009fb8:	20008472 	.word	0x20008472
 8009fbc:	2000847c 	.word	0x2000847c
 8009fc0:	2000843c 	.word	0x2000843c
 8009fc4:	08014620 	.word	0x08014620
 8009fc8:	080147d4 	.word	0x080147d4
 8009fcc:	0801466c 	.word	0x0801466c
          goto aborted;
 8009fd0:	bf00      	nop
    tcp_input_pcb = NULL;
 8009fd2:	4b27      	ldr	r3, [pc, #156]	@ (800a070 <tcp_input+0x7f4>)
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009fd8:	4b26      	ldr	r3, [pc, #152]	@ (800a074 <tcp_input+0x7f8>)
 8009fda:	2200      	movs	r2, #0
 8009fdc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009fde:	4b26      	ldr	r3, [pc, #152]	@ (800a078 <tcp_input+0x7fc>)
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d03f      	beq.n	800a066 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8009fe6:	4b24      	ldr	r3, [pc, #144]	@ (800a078 <tcp_input+0x7fc>)
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7fd fc20 	bl	8007830 <pbuf_free>
      inseg.p = NULL;
 8009ff0:	4b21      	ldr	r3, [pc, #132]	@ (800a078 <tcp_input+0x7fc>)
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009ff6:	e036      	b.n	800a066 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009ff8:	4b20      	ldr	r3, [pc, #128]	@ (800a07c <tcp_input+0x800>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	899b      	ldrh	r3, [r3, #12]
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	4618      	mov	r0, r3
 800a002:	f7fc f8b7 	bl	8006174 <lwip_htons>
 800a006:	4603      	mov	r3, r0
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	f003 0304 	and.w	r3, r3, #4
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d118      	bne.n	800a044 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a012:	4b1b      	ldr	r3, [pc, #108]	@ (800a080 <tcp_input+0x804>)
 800a014:	6819      	ldr	r1, [r3, #0]
 800a016:	4b1b      	ldr	r3, [pc, #108]	@ (800a084 <tcp_input+0x808>)
 800a018:	881b      	ldrh	r3, [r3, #0]
 800a01a:	461a      	mov	r2, r3
 800a01c:	4b1a      	ldr	r3, [pc, #104]	@ (800a088 <tcp_input+0x80c>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a022:	4b16      	ldr	r3, [pc, #88]	@ (800a07c <tcp_input+0x800>)
 800a024:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a026:	885b      	ldrh	r3, [r3, #2]
 800a028:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a02a:	4a14      	ldr	r2, [pc, #80]	@ (800a07c <tcp_input+0x800>)
 800a02c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a02e:	8812      	ldrh	r2, [r2, #0]
 800a030:	b292      	uxth	r2, r2
 800a032:	9202      	str	r2, [sp, #8]
 800a034:	9301      	str	r3, [sp, #4]
 800a036:	4b15      	ldr	r3, [pc, #84]	@ (800a08c <tcp_input+0x810>)
 800a038:	9300      	str	r3, [sp, #0]
 800a03a:	4b15      	ldr	r3, [pc, #84]	@ (800a090 <tcp_input+0x814>)
 800a03c:	4602      	mov	r2, r0
 800a03e:	2000      	movs	r0, #0
 800a040:	f003 fc6e 	bl	800d920 <tcp_rst>
    pbuf_free(p);
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f7fd fbf3 	bl	8007830 <pbuf_free>
  return;
 800a04a:	e00c      	b.n	800a066 <tcp_input+0x7ea>
    goto dropped;
 800a04c:	bf00      	nop
 800a04e:	e006      	b.n	800a05e <tcp_input+0x7e2>
    goto dropped;
 800a050:	bf00      	nop
 800a052:	e004      	b.n	800a05e <tcp_input+0x7e2>
    goto dropped;
 800a054:	bf00      	nop
 800a056:	e002      	b.n	800a05e <tcp_input+0x7e2>
      goto dropped;
 800a058:	bf00      	nop
 800a05a:	e000      	b.n	800a05e <tcp_input+0x7e2>
      goto dropped;
 800a05c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f7fd fbe6 	bl	8007830 <pbuf_free>
 800a064:	e000      	b.n	800a068 <tcp_input+0x7ec>
  return;
 800a066:	bf00      	nop
}
 800a068:	3724      	adds	r7, #36	@ 0x24
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd90      	pop	{r4, r7, pc}
 800a06e:	bf00      	nop
 800a070:	2000847c 	.word	0x2000847c
 800a074:	20008478 	.word	0x20008478
 800a078:	20008448 	.word	0x20008448
 800a07c:	20008458 	.word	0x20008458
 800a080:	2000846c 	.word	0x2000846c
 800a084:	20008472 	.word	0x20008472
 800a088:	20008468 	.word	0x20008468
 800a08c:	20004ed0 	.word	0x20004ed0
 800a090:	20004ed4 	.word	0x20004ed4

0800a094 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d106      	bne.n	800a0b0 <tcp_input_delayed_close+0x1c>
 800a0a2:	4b17      	ldr	r3, [pc, #92]	@ (800a100 <tcp_input_delayed_close+0x6c>)
 800a0a4:	f240 225a 	movw	r2, #602	@ 0x25a
 800a0a8:	4916      	ldr	r1, [pc, #88]	@ (800a104 <tcp_input_delayed_close+0x70>)
 800a0aa:	4817      	ldr	r0, [pc, #92]	@ (800a108 <tcp_input_delayed_close+0x74>)
 800a0ac:	f008 f85c 	bl	8012168 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a0b0:	4b16      	ldr	r3, [pc, #88]	@ (800a10c <tcp_input_delayed_close+0x78>)
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	f003 0310 	and.w	r3, r3, #16
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d01c      	beq.n	800a0f6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	8b5b      	ldrh	r3, [r3, #26]
 800a0c0:	f003 0310 	and.w	r3, r3, #16
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d10d      	bne.n	800a0e4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d008      	beq.n	800a0e4 <tcp_input_delayed_close+0x50>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	6912      	ldr	r2, [r2, #16]
 800a0dc:	f06f 010e 	mvn.w	r1, #14
 800a0e0:	4610      	mov	r0, r2
 800a0e2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a0e4:	6879      	ldr	r1, [r7, #4]
 800a0e6:	480a      	ldr	r0, [pc, #40]	@ (800a110 <tcp_input_delayed_close+0x7c>)
 800a0e8:	f7ff fa50 	bl	800958c <tcp_pcb_remove>
    tcp_free(pcb);
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f7fd fe3f 	bl	8007d70 <tcp_free>
    return 1;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	e000      	b.n	800a0f8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3708      	adds	r7, #8
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	08014620 	.word	0x08014620
 800a104:	080147f0 	.word	0x080147f0
 800a108:	0801466c 	.word	0x0801466c
 800a10c:	20008475 	.word	0x20008475
 800a110:	2000843c 	.word	0x2000843c

0800a114 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a114:	b590      	push	{r4, r7, lr}
 800a116:	b08b      	sub	sp, #44	@ 0x2c
 800a118:	af04      	add	r7, sp, #16
 800a11a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a11c:	4b6f      	ldr	r3, [pc, #444]	@ (800a2dc <tcp_listen_input+0x1c8>)
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	f003 0304 	and.w	r3, r3, #4
 800a124:	2b00      	cmp	r3, #0
 800a126:	f040 80d2 	bne.w	800a2ce <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d106      	bne.n	800a13e <tcp_listen_input+0x2a>
 800a130:	4b6b      	ldr	r3, [pc, #428]	@ (800a2e0 <tcp_listen_input+0x1cc>)
 800a132:	f240 2281 	movw	r2, #641	@ 0x281
 800a136:	496b      	ldr	r1, [pc, #428]	@ (800a2e4 <tcp_listen_input+0x1d0>)
 800a138:	486b      	ldr	r0, [pc, #428]	@ (800a2e8 <tcp_listen_input+0x1d4>)
 800a13a:	f008 f815 	bl	8012168 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a13e:	4b67      	ldr	r3, [pc, #412]	@ (800a2dc <tcp_listen_input+0x1c8>)
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	f003 0310 	and.w	r3, r3, #16
 800a146:	2b00      	cmp	r3, #0
 800a148:	d019      	beq.n	800a17e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a14a:	4b68      	ldr	r3, [pc, #416]	@ (800a2ec <tcp_listen_input+0x1d8>)
 800a14c:	6819      	ldr	r1, [r3, #0]
 800a14e:	4b68      	ldr	r3, [pc, #416]	@ (800a2f0 <tcp_listen_input+0x1dc>)
 800a150:	881b      	ldrh	r3, [r3, #0]
 800a152:	461a      	mov	r2, r3
 800a154:	4b67      	ldr	r3, [pc, #412]	@ (800a2f4 <tcp_listen_input+0x1e0>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a15a:	4b67      	ldr	r3, [pc, #412]	@ (800a2f8 <tcp_listen_input+0x1e4>)
 800a15c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a15e:	885b      	ldrh	r3, [r3, #2]
 800a160:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a162:	4a65      	ldr	r2, [pc, #404]	@ (800a2f8 <tcp_listen_input+0x1e4>)
 800a164:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a166:	8812      	ldrh	r2, [r2, #0]
 800a168:	b292      	uxth	r2, r2
 800a16a:	9202      	str	r2, [sp, #8]
 800a16c:	9301      	str	r3, [sp, #4]
 800a16e:	4b63      	ldr	r3, [pc, #396]	@ (800a2fc <tcp_listen_input+0x1e8>)
 800a170:	9300      	str	r3, [sp, #0]
 800a172:	4b63      	ldr	r3, [pc, #396]	@ (800a300 <tcp_listen_input+0x1ec>)
 800a174:	4602      	mov	r2, r0
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f003 fbd2 	bl	800d920 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a17c:	e0a9      	b.n	800a2d2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800a17e:	4b57      	ldr	r3, [pc, #348]	@ (800a2dc <tcp_listen_input+0x1c8>)
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	f003 0302 	and.w	r3, r3, #2
 800a186:	2b00      	cmp	r3, #0
 800a188:	f000 80a3 	beq.w	800a2d2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	7d5b      	ldrb	r3, [r3, #21]
 800a190:	4618      	mov	r0, r3
 800a192:	f7ff f8e5 	bl	8009360 <tcp_alloc>
 800a196:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d111      	bne.n	800a1c2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	699b      	ldr	r3, [r3, #24]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d00a      	beq.n	800a1bc <tcp_listen_input+0xa8>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	699b      	ldr	r3, [r3, #24]
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	6910      	ldr	r0, [r2, #16]
 800a1ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	4798      	blx	r3
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	73bb      	strb	r3, [r7, #14]
      return;
 800a1ba:	e08b      	b.n	800a2d4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a1bc:	23f0      	movs	r3, #240	@ 0xf0
 800a1be:	73bb      	strb	r3, [r7, #14]
      return;
 800a1c0:	e088      	b.n	800a2d4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a1c2:	4b50      	ldr	r3, [pc, #320]	@ (800a304 <tcp_listen_input+0x1f0>)
 800a1c4:	695a      	ldr	r2, [r3, #20]
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a1ca:	4b4e      	ldr	r3, [pc, #312]	@ (800a304 <tcp_listen_input+0x1f0>)
 800a1cc:	691a      	ldr	r2, [r3, #16]
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	8ada      	ldrh	r2, [r3, #22]
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a1da:	4b47      	ldr	r3, [pc, #284]	@ (800a2f8 <tcp_listen_input+0x1e4>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	881b      	ldrh	r3, [r3, #0]
 800a1e0:	b29a      	uxth	r2, r3
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	2203      	movs	r2, #3
 800a1ea:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a1ec:	4b41      	ldr	r3, [pc, #260]	@ (800a2f4 <tcp_listen_input+0x1e0>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	1c5a      	adds	r2, r3, #1
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800a1fe:	6978      	ldr	r0, [r7, #20]
 800a200:	f7ff fa58 	bl	80096b4 <tcp_next_iss>
 800a204:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	693a      	ldr	r2, [r7, #16]
 800a20a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	693a      	ldr	r2, [r7, #16]
 800a210:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	693a      	ldr	r2, [r7, #16]
 800a216:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	693a      	ldr	r2, [r7, #16]
 800a21c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a21e:	4b35      	ldr	r3, [pc, #212]	@ (800a2f4 <tcp_listen_input+0x1e0>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	1e5a      	subs	r2, r3, #1
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	691a      	ldr	r2, [r3, #16]
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	7a5b      	ldrb	r3, [r3, #9]
 800a23a:	f003 030c 	and.w	r3, r3, #12
 800a23e:	b2da      	uxtb	r2, r3
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	7a1a      	ldrb	r2, [r3, #8]
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a24c:	4b2e      	ldr	r3, [pc, #184]	@ (800a308 <tcp_listen_input+0x1f4>)
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	60da      	str	r2, [r3, #12]
 800a254:	4a2c      	ldr	r2, [pc, #176]	@ (800a308 <tcp_listen_input+0x1f4>)
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	6013      	str	r3, [r2, #0]
 800a25a:	f003 fd23 	bl	800dca4 <tcp_timer_needed>
 800a25e:	4b2b      	ldr	r3, [pc, #172]	@ (800a30c <tcp_listen_input+0x1f8>)
 800a260:	2201      	movs	r2, #1
 800a262:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a264:	6978      	ldr	r0, [r7, #20]
 800a266:	f001 fd8b 	bl	800bd80 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a26a:	4b23      	ldr	r3, [pc, #140]	@ (800a2f8 <tcp_listen_input+0x1e4>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	89db      	ldrh	r3, [r3, #14]
 800a270:	b29a      	uxth	r2, r3
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	3304      	adds	r3, #4
 800a28c:	4618      	mov	r0, r3
 800a28e:	f005 f8e7 	bl	800f460 <ip4_route>
 800a292:	4601      	mov	r1, r0
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	3304      	adds	r3, #4
 800a298:	461a      	mov	r2, r3
 800a29a:	4620      	mov	r0, r4
 800a29c:	f7ff fa30 	bl	8009700 <tcp_eff_send_mss_netif>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a2a8:	2112      	movs	r1, #18
 800a2aa:	6978      	ldr	r0, [r7, #20]
 800a2ac:	f002 fc96 	bl	800cbdc <tcp_enqueue_flags>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a2b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d004      	beq.n	800a2c6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800a2bc:	2100      	movs	r1, #0
 800a2be:	6978      	ldr	r0, [r7, #20]
 800a2c0:	f7fd ff80 	bl	80081c4 <tcp_abandon>
      return;
 800a2c4:	e006      	b.n	800a2d4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800a2c6:	6978      	ldr	r0, [r7, #20]
 800a2c8:	f002 fd76 	bl	800cdb8 <tcp_output>
  return;
 800a2cc:	e001      	b.n	800a2d2 <tcp_listen_input+0x1be>
    return;
 800a2ce:	bf00      	nop
 800a2d0:	e000      	b.n	800a2d4 <tcp_listen_input+0x1c0>
  return;
 800a2d2:	bf00      	nop
}
 800a2d4:	371c      	adds	r7, #28
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd90      	pop	{r4, r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	20008474 	.word	0x20008474
 800a2e0:	08014620 	.word	0x08014620
 800a2e4:	08014818 	.word	0x08014818
 800a2e8:	0801466c 	.word	0x0801466c
 800a2ec:	2000846c 	.word	0x2000846c
 800a2f0:	20008472 	.word	0x20008472
 800a2f4:	20008468 	.word	0x20008468
 800a2f8:	20008458 	.word	0x20008458
 800a2fc:	20004ed0 	.word	0x20004ed0
 800a300:	20004ed4 	.word	0x20004ed4
 800a304:	20004ec0 	.word	0x20004ec0
 800a308:	2000843c 	.word	0x2000843c
 800a30c:	20008444 	.word	0x20008444

0800a310 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b086      	sub	sp, #24
 800a314:	af04      	add	r7, sp, #16
 800a316:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a318:	4b2f      	ldr	r3, [pc, #188]	@ (800a3d8 <tcp_timewait_input+0xc8>)
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	f003 0304 	and.w	r3, r3, #4
 800a320:	2b00      	cmp	r3, #0
 800a322:	d153      	bne.n	800a3cc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d106      	bne.n	800a338 <tcp_timewait_input+0x28>
 800a32a:	4b2c      	ldr	r3, [pc, #176]	@ (800a3dc <tcp_timewait_input+0xcc>)
 800a32c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800a330:	492b      	ldr	r1, [pc, #172]	@ (800a3e0 <tcp_timewait_input+0xd0>)
 800a332:	482c      	ldr	r0, [pc, #176]	@ (800a3e4 <tcp_timewait_input+0xd4>)
 800a334:	f007 ff18 	bl	8012168 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a338:	4b27      	ldr	r3, [pc, #156]	@ (800a3d8 <tcp_timewait_input+0xc8>)
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	f003 0302 	and.w	r3, r3, #2
 800a340:	2b00      	cmp	r3, #0
 800a342:	d02a      	beq.n	800a39a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a344:	4b28      	ldr	r3, [pc, #160]	@ (800a3e8 <tcp_timewait_input+0xd8>)
 800a346:	681a      	ldr	r2, [r3, #0]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a34c:	1ad3      	subs	r3, r2, r3
 800a34e:	2b00      	cmp	r3, #0
 800a350:	db2d      	blt.n	800a3ae <tcp_timewait_input+0x9e>
 800a352:	4b25      	ldr	r3, [pc, #148]	@ (800a3e8 <tcp_timewait_input+0xd8>)
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a35a:	6879      	ldr	r1, [r7, #4]
 800a35c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a35e:	440b      	add	r3, r1
 800a360:	1ad3      	subs	r3, r2, r3
 800a362:	2b00      	cmp	r3, #0
 800a364:	dc23      	bgt.n	800a3ae <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a366:	4b21      	ldr	r3, [pc, #132]	@ (800a3ec <tcp_timewait_input+0xdc>)
 800a368:	6819      	ldr	r1, [r3, #0]
 800a36a:	4b21      	ldr	r3, [pc, #132]	@ (800a3f0 <tcp_timewait_input+0xe0>)
 800a36c:	881b      	ldrh	r3, [r3, #0]
 800a36e:	461a      	mov	r2, r3
 800a370:	4b1d      	ldr	r3, [pc, #116]	@ (800a3e8 <tcp_timewait_input+0xd8>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a376:	4b1f      	ldr	r3, [pc, #124]	@ (800a3f4 <tcp_timewait_input+0xe4>)
 800a378:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a37a:	885b      	ldrh	r3, [r3, #2]
 800a37c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a37e:	4a1d      	ldr	r2, [pc, #116]	@ (800a3f4 <tcp_timewait_input+0xe4>)
 800a380:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a382:	8812      	ldrh	r2, [r2, #0]
 800a384:	b292      	uxth	r2, r2
 800a386:	9202      	str	r2, [sp, #8]
 800a388:	9301      	str	r3, [sp, #4]
 800a38a:	4b1b      	ldr	r3, [pc, #108]	@ (800a3f8 <tcp_timewait_input+0xe8>)
 800a38c:	9300      	str	r3, [sp, #0]
 800a38e:	4b1b      	ldr	r3, [pc, #108]	@ (800a3fc <tcp_timewait_input+0xec>)
 800a390:	4602      	mov	r2, r0
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f003 fac4 	bl	800d920 <tcp_rst>
      return;
 800a398:	e01b      	b.n	800a3d2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a39a:	4b0f      	ldr	r3, [pc, #60]	@ (800a3d8 <tcp_timewait_input+0xc8>)
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	f003 0301 	and.w	r3, r3, #1
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d003      	beq.n	800a3ae <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a3a6:	4b16      	ldr	r3, [pc, #88]	@ (800a400 <tcp_timewait_input+0xf0>)
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a3ae:	4b10      	ldr	r3, [pc, #64]	@ (800a3f0 <tcp_timewait_input+0xe0>)
 800a3b0:	881b      	ldrh	r3, [r3, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d00c      	beq.n	800a3d0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	8b5b      	ldrh	r3, [r3, #26]
 800a3ba:	f043 0302 	orr.w	r3, r3, #2
 800a3be:	b29a      	uxth	r2, r3
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f002 fcf7 	bl	800cdb8 <tcp_output>
  }
  return;
 800a3ca:	e001      	b.n	800a3d0 <tcp_timewait_input+0xc0>
    return;
 800a3cc:	bf00      	nop
 800a3ce:	e000      	b.n	800a3d2 <tcp_timewait_input+0xc2>
  return;
 800a3d0:	bf00      	nop
}
 800a3d2:	3708      	adds	r7, #8
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	20008474 	.word	0x20008474
 800a3dc:	08014620 	.word	0x08014620
 800a3e0:	08014838 	.word	0x08014838
 800a3e4:	0801466c 	.word	0x0801466c
 800a3e8:	20008468 	.word	0x20008468
 800a3ec:	2000846c 	.word	0x2000846c
 800a3f0:	20008472 	.word	0x20008472
 800a3f4:	20008458 	.word	0x20008458
 800a3f8:	20004ed0 	.word	0x20004ed0
 800a3fc:	20004ed4 	.word	0x20004ed4
 800a400:	20008430 	.word	0x20008430

0800a404 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a404:	b590      	push	{r4, r7, lr}
 800a406:	b08d      	sub	sp, #52	@ 0x34
 800a408:	af04      	add	r7, sp, #16
 800a40a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a40c:	2300      	movs	r3, #0
 800a40e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a410:	2300      	movs	r3, #0
 800a412:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d106      	bne.n	800a428 <tcp_process+0x24>
 800a41a:	4b9d      	ldr	r3, [pc, #628]	@ (800a690 <tcp_process+0x28c>)
 800a41c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800a420:	499c      	ldr	r1, [pc, #624]	@ (800a694 <tcp_process+0x290>)
 800a422:	489d      	ldr	r0, [pc, #628]	@ (800a698 <tcp_process+0x294>)
 800a424:	f007 fea0 	bl	8012168 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a428:	4b9c      	ldr	r3, [pc, #624]	@ (800a69c <tcp_process+0x298>)
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	f003 0304 	and.w	r3, r3, #4
 800a430:	2b00      	cmp	r3, #0
 800a432:	d04e      	beq.n	800a4d2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	7d1b      	ldrb	r3, [r3, #20]
 800a438:	2b02      	cmp	r3, #2
 800a43a:	d108      	bne.n	800a44e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a440:	4b97      	ldr	r3, [pc, #604]	@ (800a6a0 <tcp_process+0x29c>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	429a      	cmp	r2, r3
 800a446:	d123      	bne.n	800a490 <tcp_process+0x8c>
        acceptable = 1;
 800a448:	2301      	movs	r3, #1
 800a44a:	76fb      	strb	r3, [r7, #27]
 800a44c:	e020      	b.n	800a490 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a452:	4b94      	ldr	r3, [pc, #592]	@ (800a6a4 <tcp_process+0x2a0>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	429a      	cmp	r2, r3
 800a458:	d102      	bne.n	800a460 <tcp_process+0x5c>
        acceptable = 1;
 800a45a:	2301      	movs	r3, #1
 800a45c:	76fb      	strb	r3, [r7, #27]
 800a45e:	e017      	b.n	800a490 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a460:	4b90      	ldr	r3, [pc, #576]	@ (800a6a4 <tcp_process+0x2a0>)
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a468:	1ad3      	subs	r3, r2, r3
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	db10      	blt.n	800a490 <tcp_process+0x8c>
 800a46e:	4b8d      	ldr	r3, [pc, #564]	@ (800a6a4 <tcp_process+0x2a0>)
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a476:	6879      	ldr	r1, [r7, #4]
 800a478:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a47a:	440b      	add	r3, r1
 800a47c:	1ad3      	subs	r3, r2, r3
 800a47e:	2b00      	cmp	r3, #0
 800a480:	dc06      	bgt.n	800a490 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	8b5b      	ldrh	r3, [r3, #26]
 800a486:	f043 0302 	orr.w	r3, r3, #2
 800a48a:	b29a      	uxth	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a490:	7efb      	ldrb	r3, [r7, #27]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d01b      	beq.n	800a4ce <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	7d1b      	ldrb	r3, [r3, #20]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d106      	bne.n	800a4ac <tcp_process+0xa8>
 800a49e:	4b7c      	ldr	r3, [pc, #496]	@ (800a690 <tcp_process+0x28c>)
 800a4a0:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800a4a4:	4980      	ldr	r1, [pc, #512]	@ (800a6a8 <tcp_process+0x2a4>)
 800a4a6:	487c      	ldr	r0, [pc, #496]	@ (800a698 <tcp_process+0x294>)
 800a4a8:	f007 fe5e 	bl	8012168 <iprintf>
      recv_flags |= TF_RESET;
 800a4ac:	4b7f      	ldr	r3, [pc, #508]	@ (800a6ac <tcp_process+0x2a8>)
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	f043 0308 	orr.w	r3, r3, #8
 800a4b4:	b2da      	uxtb	r2, r3
 800a4b6:	4b7d      	ldr	r3, [pc, #500]	@ (800a6ac <tcp_process+0x2a8>)
 800a4b8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	8b5b      	ldrh	r3, [r3, #26]
 800a4be:	f023 0301 	bic.w	r3, r3, #1
 800a4c2:	b29a      	uxth	r2, r3
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800a4c8:	f06f 030d 	mvn.w	r3, #13
 800a4cc:	e37a      	b.n	800abc4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	e378      	b.n	800abc4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a4d2:	4b72      	ldr	r3, [pc, #456]	@ (800a69c <tcp_process+0x298>)
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	f003 0302 	and.w	r3, r3, #2
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d010      	beq.n	800a500 <tcp_process+0xfc>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	7d1b      	ldrb	r3, [r3, #20]
 800a4e2:	2b02      	cmp	r3, #2
 800a4e4:	d00c      	beq.n	800a500 <tcp_process+0xfc>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	7d1b      	ldrb	r3, [r3, #20]
 800a4ea:	2b03      	cmp	r3, #3
 800a4ec:	d008      	beq.n	800a500 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	8b5b      	ldrh	r3, [r3, #26]
 800a4f2:	f043 0302 	orr.w	r3, r3, #2
 800a4f6:	b29a      	uxth	r2, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	e361      	b.n	800abc4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	8b5b      	ldrh	r3, [r3, #26]
 800a504:	f003 0310 	and.w	r3, r3, #16
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d103      	bne.n	800a514 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a50c:	4b68      	ldr	r3, [pc, #416]	@ (800a6b0 <tcp_process+0x2ac>)
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2200      	movs	r2, #0
 800a518:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f001 fc2b 	bl	800bd80 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	7d1b      	ldrb	r3, [r3, #20]
 800a52e:	3b02      	subs	r3, #2
 800a530:	2b07      	cmp	r3, #7
 800a532:	f200 8337 	bhi.w	800aba4 <tcp_process+0x7a0>
 800a536:	a201      	add	r2, pc, #4	@ (adr r2, 800a53c <tcp_process+0x138>)
 800a538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a53c:	0800a55d 	.word	0x0800a55d
 800a540:	0800a78d 	.word	0x0800a78d
 800a544:	0800a905 	.word	0x0800a905
 800a548:	0800a92f 	.word	0x0800a92f
 800a54c:	0800aa53 	.word	0x0800aa53
 800a550:	0800a905 	.word	0x0800a905
 800a554:	0800aadf 	.word	0x0800aadf
 800a558:	0800ab6f 	.word	0x0800ab6f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a55c:	4b4f      	ldr	r3, [pc, #316]	@ (800a69c <tcp_process+0x298>)
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	f003 0310 	and.w	r3, r3, #16
 800a564:	2b00      	cmp	r3, #0
 800a566:	f000 80e4 	beq.w	800a732 <tcp_process+0x32e>
 800a56a:	4b4c      	ldr	r3, [pc, #304]	@ (800a69c <tcp_process+0x298>)
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	f003 0302 	and.w	r3, r3, #2
 800a572:	2b00      	cmp	r3, #0
 800a574:	f000 80dd 	beq.w	800a732 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a57c:	1c5a      	adds	r2, r3, #1
 800a57e:	4b48      	ldr	r3, [pc, #288]	@ (800a6a0 <tcp_process+0x29c>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	429a      	cmp	r2, r3
 800a584:	f040 80d5 	bne.w	800a732 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800a588:	4b46      	ldr	r3, [pc, #280]	@ (800a6a4 <tcp_process+0x2a0>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	1c5a      	adds	r2, r3, #1
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800a59a:	4b41      	ldr	r3, [pc, #260]	@ (800a6a0 <tcp_process+0x29c>)
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a5a2:	4b44      	ldr	r3, [pc, #272]	@ (800a6b4 <tcp_process+0x2b0>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	89db      	ldrh	r3, [r3, #14]
 800a5a8:	b29a      	uxth	r2, r3
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a5bc:	4b39      	ldr	r3, [pc, #228]	@ (800a6a4 <tcp_process+0x2a0>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	1e5a      	subs	r2, r3, #1
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2204      	movs	r2, #4
 800a5ca:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	3304      	adds	r3, #4
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f004 ff43 	bl	800f460 <ip4_route>
 800a5da:	4601      	mov	r1, r0
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	3304      	adds	r3, #4
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	f7ff f88c 	bl	8009700 <tcp_eff_send_mss_netif>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a5f4:	009a      	lsls	r2, r3, #2
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a5fa:	005b      	lsls	r3, r3, #1
 800a5fc:	f241 111c 	movw	r1, #4380	@ 0x111c
 800a600:	428b      	cmp	r3, r1
 800a602:	bf38      	it	cc
 800a604:	460b      	movcc	r3, r1
 800a606:	429a      	cmp	r2, r3
 800a608:	d204      	bcs.n	800a614 <tcp_process+0x210>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	b29b      	uxth	r3, r3
 800a612:	e00d      	b.n	800a630 <tcp_process+0x22c>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a618:	005b      	lsls	r3, r3, #1
 800a61a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800a61e:	4293      	cmp	r3, r2
 800a620:	d904      	bls.n	800a62c <tcp_process+0x228>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a626:	005b      	lsls	r3, r3, #1
 800a628:	b29b      	uxth	r3, r3
 800a62a:	e001      	b.n	800a630 <tcp_process+0x22c>
 800a62c:	f241 131c 	movw	r3, #4380	@ 0x111c
 800a630:	687a      	ldr	r2, [r7, #4]
 800a632:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d106      	bne.n	800a64e <tcp_process+0x24a>
 800a640:	4b13      	ldr	r3, [pc, #76]	@ (800a690 <tcp_process+0x28c>)
 800a642:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800a646:	491c      	ldr	r1, [pc, #112]	@ (800a6b8 <tcp_process+0x2b4>)
 800a648:	4813      	ldr	r0, [pc, #76]	@ (800a698 <tcp_process+0x294>)
 800a64a:	f007 fd8d 	bl	8012168 <iprintf>
        --pcb->snd_queuelen;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a654:	3b01      	subs	r3, #1
 800a656:	b29a      	uxth	r2, r3
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a662:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800a664:	69fb      	ldr	r3, [r7, #28]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d12a      	bne.n	800a6c0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a66e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a670:	69fb      	ldr	r3, [r7, #28]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d106      	bne.n	800a684 <tcp_process+0x280>
 800a676:	4b06      	ldr	r3, [pc, #24]	@ (800a690 <tcp_process+0x28c>)
 800a678:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800a67c:	490f      	ldr	r1, [pc, #60]	@ (800a6bc <tcp_process+0x2b8>)
 800a67e:	4806      	ldr	r0, [pc, #24]	@ (800a698 <tcp_process+0x294>)
 800a680:	f007 fd72 	bl	8012168 <iprintf>
          pcb->unsent = rseg->next;
 800a684:	69fb      	ldr	r3, [r7, #28]
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a68c:	e01c      	b.n	800a6c8 <tcp_process+0x2c4>
 800a68e:	bf00      	nop
 800a690:	08014620 	.word	0x08014620
 800a694:	08014858 	.word	0x08014858
 800a698:	0801466c 	.word	0x0801466c
 800a69c:	20008474 	.word	0x20008474
 800a6a0:	2000846c 	.word	0x2000846c
 800a6a4:	20008468 	.word	0x20008468
 800a6a8:	08014874 	.word	0x08014874
 800a6ac:	20008475 	.word	0x20008475
 800a6b0:	20008430 	.word	0x20008430
 800a6b4:	20008458 	.word	0x20008458
 800a6b8:	08014894 	.word	0x08014894
 800a6bc:	080148ac 	.word	0x080148ac
        } else {
          pcb->unacked = rseg->next;
 800a6c0:	69fb      	ldr	r3, [r7, #28]
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800a6c8:	69f8      	ldr	r0, [r7, #28]
 800a6ca:	f7fe fce0 	bl	800908e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d104      	bne.n	800a6e0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a6dc:	861a      	strh	r2, [r3, #48]	@ 0x30
 800a6de:	e006      	b.n	800a6ee <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00a      	beq.n	800a70e <tcp_process+0x30a>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	6910      	ldr	r0, [r2, #16]
 800a702:	2200      	movs	r2, #0
 800a704:	6879      	ldr	r1, [r7, #4]
 800a706:	4798      	blx	r3
 800a708:	4603      	mov	r3, r0
 800a70a:	76bb      	strb	r3, [r7, #26]
 800a70c:	e001      	b.n	800a712 <tcp_process+0x30e>
 800a70e:	2300      	movs	r3, #0
 800a710:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800a712:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a716:	f113 0f0d 	cmn.w	r3, #13
 800a71a:	d102      	bne.n	800a722 <tcp_process+0x31e>
          return ERR_ABRT;
 800a71c:	f06f 030c 	mvn.w	r3, #12
 800a720:	e250      	b.n	800abc4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	8b5b      	ldrh	r3, [r3, #26]
 800a726:	f043 0302 	orr.w	r3, r3, #2
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800a730:	e23a      	b.n	800aba8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800a732:	4b98      	ldr	r3, [pc, #608]	@ (800a994 <tcp_process+0x590>)
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	f003 0310 	and.w	r3, r3, #16
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	f000 8234 	beq.w	800aba8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a740:	4b95      	ldr	r3, [pc, #596]	@ (800a998 <tcp_process+0x594>)
 800a742:	6819      	ldr	r1, [r3, #0]
 800a744:	4b95      	ldr	r3, [pc, #596]	@ (800a99c <tcp_process+0x598>)
 800a746:	881b      	ldrh	r3, [r3, #0]
 800a748:	461a      	mov	r2, r3
 800a74a:	4b95      	ldr	r3, [pc, #596]	@ (800a9a0 <tcp_process+0x59c>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a750:	4b94      	ldr	r3, [pc, #592]	@ (800a9a4 <tcp_process+0x5a0>)
 800a752:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a754:	885b      	ldrh	r3, [r3, #2]
 800a756:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a758:	4a92      	ldr	r2, [pc, #584]	@ (800a9a4 <tcp_process+0x5a0>)
 800a75a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a75c:	8812      	ldrh	r2, [r2, #0]
 800a75e:	b292      	uxth	r2, r2
 800a760:	9202      	str	r2, [sp, #8]
 800a762:	9301      	str	r3, [sp, #4]
 800a764:	4b90      	ldr	r3, [pc, #576]	@ (800a9a8 <tcp_process+0x5a4>)
 800a766:	9300      	str	r3, [sp, #0]
 800a768:	4b90      	ldr	r3, [pc, #576]	@ (800a9ac <tcp_process+0x5a8>)
 800a76a:	4602      	mov	r2, r0
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f003 f8d7 	bl	800d920 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a778:	2b05      	cmp	r3, #5
 800a77a:	f200 8215 	bhi.w	800aba8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f002 fea3 	bl	800d4d0 <tcp_rexmit_rto>
      break;
 800a78a:	e20d      	b.n	800aba8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800a78c:	4b81      	ldr	r3, [pc, #516]	@ (800a994 <tcp_process+0x590>)
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	f003 0310 	and.w	r3, r3, #16
 800a794:	2b00      	cmp	r3, #0
 800a796:	f000 80a1 	beq.w	800a8dc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a79a:	4b7f      	ldr	r3, [pc, #508]	@ (800a998 <tcp_process+0x594>)
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7a2:	1ad3      	subs	r3, r2, r3
 800a7a4:	3b01      	subs	r3, #1
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	db7e      	blt.n	800a8a8 <tcp_process+0x4a4>
 800a7aa:	4b7b      	ldr	r3, [pc, #492]	@ (800a998 <tcp_process+0x594>)
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7b2:	1ad3      	subs	r3, r2, r3
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	dc77      	bgt.n	800a8a8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2204      	movs	r2, #4
 800a7bc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d102      	bne.n	800a7cc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800a7c6:	23fa      	movs	r3, #250	@ 0xfa
 800a7c8:	76bb      	strb	r3, [r7, #26]
 800a7ca:	e01d      	b.n	800a808 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7d0:	699b      	ldr	r3, [r3, #24]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d106      	bne.n	800a7e4 <tcp_process+0x3e0>
 800a7d6:	4b76      	ldr	r3, [pc, #472]	@ (800a9b0 <tcp_process+0x5ac>)
 800a7d8:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800a7dc:	4975      	ldr	r1, [pc, #468]	@ (800a9b4 <tcp_process+0x5b0>)
 800a7de:	4876      	ldr	r0, [pc, #472]	@ (800a9b8 <tcp_process+0x5b4>)
 800a7e0:	f007 fcc2 	bl	8012168 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7e8:	699b      	ldr	r3, [r3, #24]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d00a      	beq.n	800a804 <tcp_process+0x400>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7f2:	699b      	ldr	r3, [r3, #24]
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	6910      	ldr	r0, [r2, #16]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	6879      	ldr	r1, [r7, #4]
 800a7fc:	4798      	blx	r3
 800a7fe:	4603      	mov	r3, r0
 800a800:	76bb      	strb	r3, [r7, #26]
 800a802:	e001      	b.n	800a808 <tcp_process+0x404>
 800a804:	23f0      	movs	r3, #240	@ 0xf0
 800a806:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800a808:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d00a      	beq.n	800a826 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800a810:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a814:	f113 0f0d 	cmn.w	r3, #13
 800a818:	d002      	beq.n	800a820 <tcp_process+0x41c>
              tcp_abort(pcb);
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f7fd fd90 	bl	8008340 <tcp_abort>
            }
            return ERR_ABRT;
 800a820:	f06f 030c 	mvn.w	r3, #12
 800a824:	e1ce      	b.n	800abc4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 fae0 	bl	800adec <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800a82c:	4b63      	ldr	r3, [pc, #396]	@ (800a9bc <tcp_process+0x5b8>)
 800a82e:	881b      	ldrh	r3, [r3, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d005      	beq.n	800a840 <tcp_process+0x43c>
            recv_acked--;
 800a834:	4b61      	ldr	r3, [pc, #388]	@ (800a9bc <tcp_process+0x5b8>)
 800a836:	881b      	ldrh	r3, [r3, #0]
 800a838:	3b01      	subs	r3, #1
 800a83a:	b29a      	uxth	r2, r3
 800a83c:	4b5f      	ldr	r3, [pc, #380]	@ (800a9bc <tcp_process+0x5b8>)
 800a83e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a844:	009a      	lsls	r2, r3, #2
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a84a:	005b      	lsls	r3, r3, #1
 800a84c:	f241 111c 	movw	r1, #4380	@ 0x111c
 800a850:	428b      	cmp	r3, r1
 800a852:	bf38      	it	cc
 800a854:	460b      	movcc	r3, r1
 800a856:	429a      	cmp	r2, r3
 800a858:	d204      	bcs.n	800a864 <tcp_process+0x460>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	b29b      	uxth	r3, r3
 800a862:	e00d      	b.n	800a880 <tcp_process+0x47c>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a868:	005b      	lsls	r3, r3, #1
 800a86a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800a86e:	4293      	cmp	r3, r2
 800a870:	d904      	bls.n	800a87c <tcp_process+0x478>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a876:	005b      	lsls	r3, r3, #1
 800a878:	b29b      	uxth	r3, r3
 800a87a:	e001      	b.n	800a880 <tcp_process+0x47c>
 800a87c:	f241 131c 	movw	r3, #4380	@ 0x111c
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800a886:	4b4e      	ldr	r3, [pc, #312]	@ (800a9c0 <tcp_process+0x5bc>)
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	f003 0320 	and.w	r3, r3, #32
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d037      	beq.n	800a902 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	8b5b      	ldrh	r3, [r3, #26]
 800a896:	f043 0302 	orr.w	r3, r3, #2
 800a89a:	b29a      	uxth	r2, r3
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2207      	movs	r2, #7
 800a8a4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800a8a6:	e02c      	b.n	800a902 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a8a8:	4b3b      	ldr	r3, [pc, #236]	@ (800a998 <tcp_process+0x594>)
 800a8aa:	6819      	ldr	r1, [r3, #0]
 800a8ac:	4b3b      	ldr	r3, [pc, #236]	@ (800a99c <tcp_process+0x598>)
 800a8ae:	881b      	ldrh	r3, [r3, #0]
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	4b3b      	ldr	r3, [pc, #236]	@ (800a9a0 <tcp_process+0x59c>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a8b8:	4b3a      	ldr	r3, [pc, #232]	@ (800a9a4 <tcp_process+0x5a0>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a8bc:	885b      	ldrh	r3, [r3, #2]
 800a8be:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a8c0:	4a38      	ldr	r2, [pc, #224]	@ (800a9a4 <tcp_process+0x5a0>)
 800a8c2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a8c4:	8812      	ldrh	r2, [r2, #0]
 800a8c6:	b292      	uxth	r2, r2
 800a8c8:	9202      	str	r2, [sp, #8]
 800a8ca:	9301      	str	r3, [sp, #4]
 800a8cc:	4b36      	ldr	r3, [pc, #216]	@ (800a9a8 <tcp_process+0x5a4>)
 800a8ce:	9300      	str	r3, [sp, #0]
 800a8d0:	4b36      	ldr	r3, [pc, #216]	@ (800a9ac <tcp_process+0x5a8>)
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f003 f823 	bl	800d920 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800a8da:	e167      	b.n	800abac <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a8dc:	4b2d      	ldr	r3, [pc, #180]	@ (800a994 <tcp_process+0x590>)
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	f003 0302 	and.w	r3, r3, #2
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	f000 8161 	beq.w	800abac <tcp_process+0x7a8>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ee:	1e5a      	subs	r2, r3, #1
 800a8f0:	4b2b      	ldr	r3, [pc, #172]	@ (800a9a0 <tcp_process+0x59c>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	f040 8159 	bne.w	800abac <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f002 fe0a 	bl	800d514 <tcp_rexmit>
      break;
 800a900:	e154      	b.n	800abac <tcp_process+0x7a8>
 800a902:	e153      	b.n	800abac <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f000 fa71 	bl	800adec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a90a:	4b2d      	ldr	r3, [pc, #180]	@ (800a9c0 <tcp_process+0x5bc>)
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	f003 0320 	and.w	r3, r3, #32
 800a912:	2b00      	cmp	r3, #0
 800a914:	f000 814c 	beq.w	800abb0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	8b5b      	ldrh	r3, [r3, #26]
 800a91c:	f043 0302 	orr.w	r3, r3, #2
 800a920:	b29a      	uxth	r2, r3
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2207      	movs	r2, #7
 800a92a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a92c:	e140      	b.n	800abb0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 fa5c 	bl	800adec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a934:	4b22      	ldr	r3, [pc, #136]	@ (800a9c0 <tcp_process+0x5bc>)
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	f003 0320 	and.w	r3, r3, #32
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d071      	beq.n	800aa24 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a940:	4b14      	ldr	r3, [pc, #80]	@ (800a994 <tcp_process+0x590>)
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	f003 0310 	and.w	r3, r3, #16
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d060      	beq.n	800aa0e <tcp_process+0x60a>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a950:	4b11      	ldr	r3, [pc, #68]	@ (800a998 <tcp_process+0x594>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	429a      	cmp	r2, r3
 800a956:	d15a      	bne.n	800aa0e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d156      	bne.n	800aa0e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	8b5b      	ldrh	r3, [r3, #26]
 800a964:	f043 0302 	orr.w	r3, r3, #2
 800a968:	b29a      	uxth	r2, r3
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7fe fdbc 	bl	80094ec <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a974:	4b13      	ldr	r3, [pc, #76]	@ (800a9c4 <tcp_process+0x5c0>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d105      	bne.n	800a98a <tcp_process+0x586>
 800a97e:	4b11      	ldr	r3, [pc, #68]	@ (800a9c4 <tcp_process+0x5c0>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	4a0f      	ldr	r2, [pc, #60]	@ (800a9c4 <tcp_process+0x5c0>)
 800a986:	6013      	str	r3, [r2, #0]
 800a988:	e02e      	b.n	800a9e8 <tcp_process+0x5e4>
 800a98a:	4b0e      	ldr	r3, [pc, #56]	@ (800a9c4 <tcp_process+0x5c0>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	617b      	str	r3, [r7, #20]
 800a990:	e027      	b.n	800a9e2 <tcp_process+0x5de>
 800a992:	bf00      	nop
 800a994:	20008474 	.word	0x20008474
 800a998:	2000846c 	.word	0x2000846c
 800a99c:	20008472 	.word	0x20008472
 800a9a0:	20008468 	.word	0x20008468
 800a9a4:	20008458 	.word	0x20008458
 800a9a8:	20004ed0 	.word	0x20004ed0
 800a9ac:	20004ed4 	.word	0x20004ed4
 800a9b0:	08014620 	.word	0x08014620
 800a9b4:	080148c0 	.word	0x080148c0
 800a9b8:	0801466c 	.word	0x0801466c
 800a9bc:	20008470 	.word	0x20008470
 800a9c0:	20008475 	.word	0x20008475
 800a9c4:	2000843c 	.word	0x2000843c
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d104      	bne.n	800a9dc <tcp_process+0x5d8>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	68da      	ldr	r2, [r3, #12]
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	60da      	str	r2, [r3, #12]
 800a9da:	e005      	b.n	800a9e8 <tcp_process+0x5e4>
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	617b      	str	r3, [r7, #20]
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d1ef      	bne.n	800a9c8 <tcp_process+0x5c4>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	60da      	str	r2, [r3, #12]
 800a9ee:	4b77      	ldr	r3, [pc, #476]	@ (800abcc <tcp_process+0x7c8>)
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	220a      	movs	r2, #10
 800a9f8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800a9fa:	4b75      	ldr	r3, [pc, #468]	@ (800abd0 <tcp_process+0x7cc>)
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	60da      	str	r2, [r3, #12]
 800aa02:	4a73      	ldr	r2, [pc, #460]	@ (800abd0 <tcp_process+0x7cc>)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6013      	str	r3, [r2, #0]
 800aa08:	f003 f94c 	bl	800dca4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800aa0c:	e0d2      	b.n	800abb4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	8b5b      	ldrh	r3, [r3, #26]
 800aa12:	f043 0302 	orr.w	r3, r3, #2
 800aa16:	b29a      	uxth	r2, r3
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2208      	movs	r2, #8
 800aa20:	751a      	strb	r2, [r3, #20]
      break;
 800aa22:	e0c7      	b.n	800abb4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aa24:	4b6b      	ldr	r3, [pc, #428]	@ (800abd4 <tcp_process+0x7d0>)
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	f003 0310 	and.w	r3, r3, #16
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f000 80c1 	beq.w	800abb4 <tcp_process+0x7b0>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aa36:	4b68      	ldr	r3, [pc, #416]	@ (800abd8 <tcp_process+0x7d4>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	f040 80ba 	bne.w	800abb4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	f040 80b5 	bne.w	800abb4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2206      	movs	r2, #6
 800aa4e:	751a      	strb	r2, [r3, #20]
      break;
 800aa50:	e0b0      	b.n	800abb4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 f9ca 	bl	800adec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800aa58:	4b60      	ldr	r3, [pc, #384]	@ (800abdc <tcp_process+0x7d8>)
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	f003 0320 	and.w	r3, r3, #32
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	f000 80a9 	beq.w	800abb8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	8b5b      	ldrh	r3, [r3, #26]
 800aa6a:	f043 0302 	orr.w	r3, r3, #2
 800aa6e:	b29a      	uxth	r2, r3
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f7fe fd39 	bl	80094ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800aa7a:	4b59      	ldr	r3, [pc, #356]	@ (800abe0 <tcp_process+0x7dc>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d105      	bne.n	800aa90 <tcp_process+0x68c>
 800aa84:	4b56      	ldr	r3, [pc, #344]	@ (800abe0 <tcp_process+0x7dc>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	4a55      	ldr	r2, [pc, #340]	@ (800abe0 <tcp_process+0x7dc>)
 800aa8c:	6013      	str	r3, [r2, #0]
 800aa8e:	e013      	b.n	800aab8 <tcp_process+0x6b4>
 800aa90:	4b53      	ldr	r3, [pc, #332]	@ (800abe0 <tcp_process+0x7dc>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	613b      	str	r3, [r7, #16]
 800aa96:	e00c      	b.n	800aab2 <tcp_process+0x6ae>
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d104      	bne.n	800aaac <tcp_process+0x6a8>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	68da      	ldr	r2, [r3, #12]
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	60da      	str	r2, [r3, #12]
 800aaaa:	e005      	b.n	800aab8 <tcp_process+0x6b4>
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	68db      	ldr	r3, [r3, #12]
 800aab0:	613b      	str	r3, [r7, #16]
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d1ef      	bne.n	800aa98 <tcp_process+0x694>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2200      	movs	r2, #0
 800aabc:	60da      	str	r2, [r3, #12]
 800aabe:	4b43      	ldr	r3, [pc, #268]	@ (800abcc <tcp_process+0x7c8>)
 800aac0:	2201      	movs	r2, #1
 800aac2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	220a      	movs	r2, #10
 800aac8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800aaca:	4b41      	ldr	r3, [pc, #260]	@ (800abd0 <tcp_process+0x7cc>)
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	60da      	str	r2, [r3, #12]
 800aad2:	4a3f      	ldr	r2, [pc, #252]	@ (800abd0 <tcp_process+0x7cc>)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6013      	str	r3, [r2, #0]
 800aad8:	f003 f8e4 	bl	800dca4 <tcp_timer_needed>
      }
      break;
 800aadc:	e06c      	b.n	800abb8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 f984 	bl	800adec <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800aae4:	4b3b      	ldr	r3, [pc, #236]	@ (800abd4 <tcp_process+0x7d0>)
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	f003 0310 	and.w	r3, r3, #16
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d065      	beq.n	800abbc <tcp_process+0x7b8>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aaf4:	4b38      	ldr	r3, [pc, #224]	@ (800abd8 <tcp_process+0x7d4>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d15f      	bne.n	800abbc <tcp_process+0x7b8>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d15b      	bne.n	800abbc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f7fe fcf1 	bl	80094ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ab0a:	4b35      	ldr	r3, [pc, #212]	@ (800abe0 <tcp_process+0x7dc>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d105      	bne.n	800ab20 <tcp_process+0x71c>
 800ab14:	4b32      	ldr	r3, [pc, #200]	@ (800abe0 <tcp_process+0x7dc>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	4a31      	ldr	r2, [pc, #196]	@ (800abe0 <tcp_process+0x7dc>)
 800ab1c:	6013      	str	r3, [r2, #0]
 800ab1e:	e013      	b.n	800ab48 <tcp_process+0x744>
 800ab20:	4b2f      	ldr	r3, [pc, #188]	@ (800abe0 <tcp_process+0x7dc>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	60fb      	str	r3, [r7, #12]
 800ab26:	e00c      	b.n	800ab42 <tcp_process+0x73e>
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d104      	bne.n	800ab3c <tcp_process+0x738>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	68da      	ldr	r2, [r3, #12]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	60da      	str	r2, [r3, #12]
 800ab3a:	e005      	b.n	800ab48 <tcp_process+0x744>
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	60fb      	str	r3, [r7, #12]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d1ef      	bne.n	800ab28 <tcp_process+0x724>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	60da      	str	r2, [r3, #12]
 800ab4e:	4b1f      	ldr	r3, [pc, #124]	@ (800abcc <tcp_process+0x7c8>)
 800ab50:	2201      	movs	r2, #1
 800ab52:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	220a      	movs	r2, #10
 800ab58:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ab5a:	4b1d      	ldr	r3, [pc, #116]	@ (800abd0 <tcp_process+0x7cc>)
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	60da      	str	r2, [r3, #12]
 800ab62:	4a1b      	ldr	r2, [pc, #108]	@ (800abd0 <tcp_process+0x7cc>)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6013      	str	r3, [r2, #0]
 800ab68:	f003 f89c 	bl	800dca4 <tcp_timer_needed>
      }
      break;
 800ab6c:	e026      	b.n	800abbc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 f93c 	bl	800adec <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ab74:	4b17      	ldr	r3, [pc, #92]	@ (800abd4 <tcp_process+0x7d0>)
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	f003 0310 	and.w	r3, r3, #16
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d01f      	beq.n	800abc0 <tcp_process+0x7bc>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ab84:	4b14      	ldr	r3, [pc, #80]	@ (800abd8 <tcp_process+0x7d4>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d119      	bne.n	800abc0 <tcp_process+0x7bc>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d115      	bne.n	800abc0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ab94:	4b11      	ldr	r3, [pc, #68]	@ (800abdc <tcp_process+0x7d8>)
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	f043 0310 	orr.w	r3, r3, #16
 800ab9c:	b2da      	uxtb	r2, r3
 800ab9e:	4b0f      	ldr	r3, [pc, #60]	@ (800abdc <tcp_process+0x7d8>)
 800aba0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800aba2:	e00d      	b.n	800abc0 <tcp_process+0x7bc>
    default:
      break;
 800aba4:	bf00      	nop
 800aba6:	e00c      	b.n	800abc2 <tcp_process+0x7be>
      break;
 800aba8:	bf00      	nop
 800abaa:	e00a      	b.n	800abc2 <tcp_process+0x7be>
      break;
 800abac:	bf00      	nop
 800abae:	e008      	b.n	800abc2 <tcp_process+0x7be>
      break;
 800abb0:	bf00      	nop
 800abb2:	e006      	b.n	800abc2 <tcp_process+0x7be>
      break;
 800abb4:	bf00      	nop
 800abb6:	e004      	b.n	800abc2 <tcp_process+0x7be>
      break;
 800abb8:	bf00      	nop
 800abba:	e002      	b.n	800abc2 <tcp_process+0x7be>
      break;
 800abbc:	bf00      	nop
 800abbe:	e000      	b.n	800abc2 <tcp_process+0x7be>
      break;
 800abc0:	bf00      	nop
  }
  return ERR_OK;
 800abc2:	2300      	movs	r3, #0
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3724      	adds	r7, #36	@ 0x24
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd90      	pop	{r4, r7, pc}
 800abcc:	20008444 	.word	0x20008444
 800abd0:	20008440 	.word	0x20008440
 800abd4:	20008474 	.word	0x20008474
 800abd8:	2000846c 	.word	0x2000846c
 800abdc:	20008475 	.word	0x20008475
 800abe0:	2000843c 	.word	0x2000843c

0800abe4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800abe4:	b590      	push	{r4, r7, lr}
 800abe6:	b085      	sub	sp, #20
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d106      	bne.n	800ac02 <tcp_oos_insert_segment+0x1e>
 800abf4:	4b3b      	ldr	r3, [pc, #236]	@ (800ace4 <tcp_oos_insert_segment+0x100>)
 800abf6:	f240 421f 	movw	r2, #1055	@ 0x41f
 800abfa:	493b      	ldr	r1, [pc, #236]	@ (800ace8 <tcp_oos_insert_segment+0x104>)
 800abfc:	483b      	ldr	r0, [pc, #236]	@ (800acec <tcp_oos_insert_segment+0x108>)
 800abfe:	f007 fab3 	bl	8012168 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	899b      	ldrh	r3, [r3, #12]
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7fb fab2 	bl	8006174 <lwip_htons>
 800ac10:	4603      	mov	r3, r0
 800ac12:	b2db      	uxtb	r3, r3
 800ac14:	f003 0301 	and.w	r3, r3, #1
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d028      	beq.n	800ac6e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ac1c:	6838      	ldr	r0, [r7, #0]
 800ac1e:	f7fe fa21 	bl	8009064 <tcp_segs_free>
    next = NULL;
 800ac22:	2300      	movs	r3, #0
 800ac24:	603b      	str	r3, [r7, #0]
 800ac26:	e056      	b.n	800acd6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	899b      	ldrh	r3, [r3, #12]
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	4618      	mov	r0, r3
 800ac32:	f7fb fa9f 	bl	8006174 <lwip_htons>
 800ac36:	4603      	mov	r3, r0
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	f003 0301 	and.w	r3, r3, #1
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00d      	beq.n	800ac5e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	68db      	ldr	r3, [r3, #12]
 800ac46:	899b      	ldrh	r3, [r3, #12]
 800ac48:	b29c      	uxth	r4, r3
 800ac4a:	2001      	movs	r0, #1
 800ac4c:	f7fb fa92 	bl	8006174 <lwip_htons>
 800ac50:	4603      	mov	r3, r0
 800ac52:	461a      	mov	r2, r3
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	4322      	orrs	r2, r4
 800ac5a:	b292      	uxth	r2, r2
 800ac5c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f7fe fa10 	bl	800908e <tcp_seg_free>
    while (next &&
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d00e      	beq.n	800ac92 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	891b      	ldrh	r3, [r3, #8]
 800ac78:	461a      	mov	r2, r3
 800ac7a:	4b1d      	ldr	r3, [pc, #116]	@ (800acf0 <tcp_oos_insert_segment+0x10c>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	441a      	add	r2, r3
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	68db      	ldr	r3, [r3, #12]
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	6839      	ldr	r1, [r7, #0]
 800ac88:	8909      	ldrh	r1, [r1, #8]
 800ac8a:	440b      	add	r3, r1
 800ac8c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	daca      	bge.n	800ac28 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d01e      	beq.n	800acd6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	891b      	ldrh	r3, [r3, #8]
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	4b14      	ldr	r3, [pc, #80]	@ (800acf0 <tcp_oos_insert_segment+0x10c>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	441a      	add	r2, r3
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	685b      	ldr	r3, [r3, #4]
 800acaa:	1ad3      	subs	r3, r2, r3
    if (next &&
 800acac:	2b00      	cmp	r3, #0
 800acae:	dd12      	ble.n	800acd6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	68db      	ldr	r3, [r3, #12]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	b29a      	uxth	r2, r3
 800acb8:	4b0d      	ldr	r3, [pc, #52]	@ (800acf0 <tcp_oos_insert_segment+0x10c>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	1ad3      	subs	r3, r2, r3
 800acc0:	b29a      	uxth	r2, r3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	685a      	ldr	r2, [r3, #4]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	891b      	ldrh	r3, [r3, #8]
 800acce:	4619      	mov	r1, r3
 800acd0:	4610      	mov	r0, r2
 800acd2:	f7fc fc27 	bl	8007524 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	683a      	ldr	r2, [r7, #0]
 800acda:	601a      	str	r2, [r3, #0]
}
 800acdc:	bf00      	nop
 800acde:	3714      	adds	r7, #20
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd90      	pop	{r4, r7, pc}
 800ace4:	08014620 	.word	0x08014620
 800ace8:	080148e0 	.word	0x080148e0
 800acec:	0801466c 	.word	0x0801466c
 800acf0:	20008468 	.word	0x20008468

0800acf4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800acf4:	b5b0      	push	{r4, r5, r7, lr}
 800acf6:	b086      	sub	sp, #24
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	607a      	str	r2, [r7, #4]
 800ad00:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ad02:	e03e      	b.n	800ad82 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7fc fe14 	bl	8007940 <pbuf_clen>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ad22:	8a7a      	ldrh	r2, [r7, #18]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d906      	bls.n	800ad36 <tcp_free_acked_segments+0x42>
 800ad28:	4b2a      	ldr	r3, [pc, #168]	@ (800add4 <tcp_free_acked_segments+0xe0>)
 800ad2a:	f240 4257 	movw	r2, #1111	@ 0x457
 800ad2e:	492a      	ldr	r1, [pc, #168]	@ (800add8 <tcp_free_acked_segments+0xe4>)
 800ad30:	482a      	ldr	r0, [pc, #168]	@ (800addc <tcp_free_acked_segments+0xe8>)
 800ad32:	f007 fa19 	bl	8012168 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800ad3c:	8a7b      	ldrh	r3, [r7, #18]
 800ad3e:	1ad3      	subs	r3, r2, r3
 800ad40:	b29a      	uxth	r2, r3
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	891a      	ldrh	r2, [r3, #8]
 800ad4c:	4b24      	ldr	r3, [pc, #144]	@ (800ade0 <tcp_free_acked_segments+0xec>)
 800ad4e:	881b      	ldrh	r3, [r3, #0]
 800ad50:	4413      	add	r3, r2
 800ad52:	b29a      	uxth	r2, r3
 800ad54:	4b22      	ldr	r3, [pc, #136]	@ (800ade0 <tcp_free_acked_segments+0xec>)
 800ad56:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ad58:	6978      	ldr	r0, [r7, #20]
 800ad5a:	f7fe f998 	bl	800908e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d00c      	beq.n	800ad82 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d109      	bne.n	800ad82 <tcp_free_acked_segments+0x8e>
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d106      	bne.n	800ad82 <tcp_free_acked_segments+0x8e>
 800ad74:	4b17      	ldr	r3, [pc, #92]	@ (800add4 <tcp_free_acked_segments+0xe0>)
 800ad76:	f240 4261 	movw	r2, #1121	@ 0x461
 800ad7a:	491a      	ldr	r1, [pc, #104]	@ (800ade4 <tcp_free_acked_segments+0xf0>)
 800ad7c:	4817      	ldr	r0, [pc, #92]	@ (800addc <tcp_free_acked_segments+0xe8>)
 800ad7e:	f007 f9f3 	bl	8012168 <iprintf>
  while (seg_list != NULL &&
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d020      	beq.n	800adca <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7fb fa06 	bl	80061a0 <lwip_htonl>
 800ad94:	4604      	mov	r4, r0
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	891b      	ldrh	r3, [r3, #8]
 800ad9a:	461d      	mov	r5, r3
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	68db      	ldr	r3, [r3, #12]
 800ada0:	899b      	ldrh	r3, [r3, #12]
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7fb f9e5 	bl	8006174 <lwip_htons>
 800adaa:	4603      	mov	r3, r0
 800adac:	b2db      	uxtb	r3, r3
 800adae:	f003 0303 	and.w	r3, r3, #3
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d001      	beq.n	800adba <tcp_free_acked_segments+0xc6>
 800adb6:	2301      	movs	r3, #1
 800adb8:	e000      	b.n	800adbc <tcp_free_acked_segments+0xc8>
 800adba:	2300      	movs	r3, #0
 800adbc:	442b      	add	r3, r5
 800adbe:	18e2      	adds	r2, r4, r3
 800adc0:	4b09      	ldr	r3, [pc, #36]	@ (800ade8 <tcp_free_acked_segments+0xf4>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	dd9c      	ble.n	800ad04 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800adca:	68bb      	ldr	r3, [r7, #8]
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3718      	adds	r7, #24
 800add0:	46bd      	mov	sp, r7
 800add2:	bdb0      	pop	{r4, r5, r7, pc}
 800add4:	08014620 	.word	0x08014620
 800add8:	08014908 	.word	0x08014908
 800addc:	0801466c 	.word	0x0801466c
 800ade0:	20008470 	.word	0x20008470
 800ade4:	08014930 	.word	0x08014930
 800ade8:	2000846c 	.word	0x2000846c

0800adec <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800adec:	b5b0      	push	{r4, r5, r7, lr}
 800adee:	b094      	sub	sp, #80	@ 0x50
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800adf4:	2300      	movs	r3, #0
 800adf6:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d106      	bne.n	800ae0c <tcp_receive+0x20>
 800adfe:	4b91      	ldr	r3, [pc, #580]	@ (800b044 <tcp_receive+0x258>)
 800ae00:	f240 427b 	movw	r2, #1147	@ 0x47b
 800ae04:	4990      	ldr	r1, [pc, #576]	@ (800b048 <tcp_receive+0x25c>)
 800ae06:	4891      	ldr	r0, [pc, #580]	@ (800b04c <tcp_receive+0x260>)
 800ae08:	f007 f9ae 	bl	8012168 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	7d1b      	ldrb	r3, [r3, #20]
 800ae10:	2b03      	cmp	r3, #3
 800ae12:	d806      	bhi.n	800ae22 <tcp_receive+0x36>
 800ae14:	4b8b      	ldr	r3, [pc, #556]	@ (800b044 <tcp_receive+0x258>)
 800ae16:	f240 427c 	movw	r2, #1148	@ 0x47c
 800ae1a:	498d      	ldr	r1, [pc, #564]	@ (800b050 <tcp_receive+0x264>)
 800ae1c:	488b      	ldr	r0, [pc, #556]	@ (800b04c <tcp_receive+0x260>)
 800ae1e:	f007 f9a3 	bl	8012168 <iprintf>

  if (flags & TCP_ACK) {
 800ae22:	4b8c      	ldr	r3, [pc, #560]	@ (800b054 <tcp_receive+0x268>)
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	f003 0310 	and.w	r3, r3, #16
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	f000 8264 	beq.w	800b2f8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ae36:	461a      	mov	r2, r3
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae3c:	4413      	add	r3, r2
 800ae3e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ae44:	4b84      	ldr	r3, [pc, #528]	@ (800b058 <tcp_receive+0x26c>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	1ad3      	subs	r3, r2, r3
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	db1b      	blt.n	800ae86 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ae52:	4b81      	ldr	r3, [pc, #516]	@ (800b058 <tcp_receive+0x26c>)
 800ae54:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d106      	bne.n	800ae68 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ae5e:	4b7f      	ldr	r3, [pc, #508]	@ (800b05c <tcp_receive+0x270>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	1ad3      	subs	r3, r2, r3
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	db0e      	blt.n	800ae86 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ae6c:	4b7b      	ldr	r3, [pc, #492]	@ (800b05c <tcp_receive+0x270>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d125      	bne.n	800aec0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ae74:	4b7a      	ldr	r3, [pc, #488]	@ (800b060 <tcp_receive+0x274>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	89db      	ldrh	r3, [r3, #14]
 800ae7a:	b29a      	uxth	r2, r3
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d91c      	bls.n	800aec0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ae86:	4b76      	ldr	r3, [pc, #472]	@ (800b060 <tcp_receive+0x274>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	89db      	ldrh	r3, [r3, #14]
 800ae8c:	b29a      	uxth	r2, r3
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d205      	bcs.n	800aeb0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800aeb0:	4b69      	ldr	r3, [pc, #420]	@ (800b058 <tcp_receive+0x26c>)
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800aeb8:	4b68      	ldr	r3, [pc, #416]	@ (800b05c <tcp_receive+0x270>)
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800aec0:	4b66      	ldr	r3, [pc, #408]	@ (800b05c <tcp_receive+0x270>)
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aec8:	1ad3      	subs	r3, r2, r3
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	dc58      	bgt.n	800af80 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800aece:	4b65      	ldr	r3, [pc, #404]	@ (800b064 <tcp_receive+0x278>)
 800aed0:	881b      	ldrh	r3, [r3, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d14b      	bne.n	800af6e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800aee0:	4413      	add	r3, r2
 800aee2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d142      	bne.n	800af6e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	db3d      	blt.n	800af6e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aef6:	4b59      	ldr	r3, [pc, #356]	@ (800b05c <tcp_receive+0x270>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d137      	bne.n	800af6e <tcp_receive+0x182>
              found_dupack = 1;
 800aefe:	2301      	movs	r3, #1
 800af00:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800af08:	2bff      	cmp	r3, #255	@ 0xff
 800af0a:	d007      	beq.n	800af1c <tcp_receive+0x130>
                ++pcb->dupacks;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800af12:	3301      	adds	r3, #1
 800af14:	b2da      	uxtb	r2, r3
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800af22:	2b03      	cmp	r3, #3
 800af24:	d91b      	bls.n	800af5e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800af30:	4413      	add	r3, r2
 800af32:	b29a      	uxth	r2, r3
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d30a      	bcc.n	800af54 <tcp_receive+0x168>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800af48:	4413      	add	r3, r2
 800af4a:	b29a      	uxth	r2, r3
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800af52:	e004      	b.n	800af5e <tcp_receive+0x172>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800af5a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800af64:	2b02      	cmp	r3, #2
 800af66:	d902      	bls.n	800af6e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f002 fb3f 	bl	800d5ec <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800af6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af70:	2b00      	cmp	r3, #0
 800af72:	f040 8161 	bne.w	800b238 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800af7e:	e15b      	b.n	800b238 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800af80:	4b36      	ldr	r3, [pc, #216]	@ (800b05c <tcp_receive+0x270>)
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af88:	1ad3      	subs	r3, r2, r3
 800af8a:	3b01      	subs	r3, #1
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f2c0 814e 	blt.w	800b22e <tcp_receive+0x442>
 800af92:	4b32      	ldr	r3, [pc, #200]	@ (800b05c <tcp_receive+0x270>)
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af9a:	1ad3      	subs	r3, r2, r3
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	f300 8146 	bgt.w	800b22e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	8b5b      	ldrh	r3, [r3, #26]
 800afa6:	f003 0304 	and.w	r3, r3, #4
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d010      	beq.n	800afd0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	8b5b      	ldrh	r3, [r3, #26]
 800afb2:	f023 0304 	bic.w	r3, r3, #4
 800afb6:	b29a      	uxth	r2, r3
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2200      	movs	r2, #0
 800afcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2200      	movs	r2, #0
 800afd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800afde:	10db      	asrs	r3, r3, #3
 800afe0:	b21b      	sxth	r3, r3
 800afe2:	b29a      	uxth	r2, r3
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800afea:	b29b      	uxth	r3, r3
 800afec:	4413      	add	r3, r2
 800afee:	b29b      	uxth	r3, r3
 800aff0:	b21a      	sxth	r2, r3
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800aff8:	4b18      	ldr	r3, [pc, #96]	@ (800b05c <tcp_receive+0x270>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	b29a      	uxth	r2, r3
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b002:	b29b      	uxth	r3, r3
 800b004:	1ad3      	subs	r3, r2, r3
 800b006:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2200      	movs	r2, #0
 800b00c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800b010:	4b12      	ldr	r3, [pc, #72]	@ (800b05c <tcp_receive+0x270>)
 800b012:	681a      	ldr	r2, [r3, #0]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	7d1b      	ldrb	r3, [r3, #20]
 800b01c:	2b03      	cmp	r3, #3
 800b01e:	f240 8097 	bls.w	800b150 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800b02e:	429a      	cmp	r2, r3
 800b030:	d245      	bcs.n	800b0be <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	8b5b      	ldrh	r3, [r3, #26]
 800b036:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d014      	beq.n	800b068 <tcp_receive+0x27c>
 800b03e:	2301      	movs	r3, #1
 800b040:	e013      	b.n	800b06a <tcp_receive+0x27e>
 800b042:	bf00      	nop
 800b044:	08014620 	.word	0x08014620
 800b048:	08014950 	.word	0x08014950
 800b04c:	0801466c 	.word	0x0801466c
 800b050:	0801496c 	.word	0x0801496c
 800b054:	20008474 	.word	0x20008474
 800b058:	20008468 	.word	0x20008468
 800b05c:	2000846c 	.word	0x2000846c
 800b060:	20008458 	.word	0x20008458
 800b064:	20008472 	.word	0x20008472
 800b068:	2302      	movs	r3, #2
 800b06a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b06e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800b072:	b29a      	uxth	r2, r3
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b078:	fb12 f303 	smulbb	r3, r2, r3
 800b07c:	b29b      	uxth	r3, r3
 800b07e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b080:	4293      	cmp	r3, r2
 800b082:	bf28      	it	cs
 800b084:	4613      	movcs	r3, r2
 800b086:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b08e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b090:	4413      	add	r3, r2
 800b092:	b29a      	uxth	r2, r3
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d309      	bcc.n	800b0b2 <tcp_receive+0x2c6>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b0a4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b0a6:	4413      	add	r3, r2
 800b0a8:	b29a      	uxth	r2, r3
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b0b0:	e04e      	b.n	800b150 <tcp_receive+0x364>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b0b8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b0bc:	e048      	b.n	800b150 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b0c4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b0c6:	4413      	add	r3, r2
 800b0c8:	b29a      	uxth	r2, r3
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d309      	bcc.n	800b0e8 <tcp_receive+0x2fc>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b0da:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b0dc:	4413      	add	r3, r2
 800b0de:	b29a      	uxth	r2, r3
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b0e6:	e004      	b.n	800b0f2 <tcp_receive+0x306>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b0ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d326      	bcc.n	800b150 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b10e:	1ad3      	subs	r3, r2, r3
 800b110:	b29a      	uxth	r2, r3
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b122:	4413      	add	r3, r2
 800b124:	b29a      	uxth	r2, r3
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d30a      	bcc.n	800b146 <tcp_receive+0x35a>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b13a:	4413      	add	r3, r2
 800b13c:	b29a      	uxth	r2, r3
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b144:	e004      	b.n	800b150 <tcp_receive+0x364>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b14c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b158:	4a98      	ldr	r2, [pc, #608]	@ (800b3bc <tcp_receive+0x5d0>)
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f7ff fdca 	bl	800acf4 <tcp_free_acked_segments>
 800b160:	4602      	mov	r2, r0
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b16e:	4a94      	ldr	r2, [pc, #592]	@ (800b3c0 <tcp_receive+0x5d4>)
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f7ff fdbf 	bl	800acf4 <tcp_free_acked_segments>
 800b176:	4602      	mov	r2, r0
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b180:	2b00      	cmp	r3, #0
 800b182:	d104      	bne.n	800b18e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b18a:	861a      	strh	r2, [r3, #48]	@ 0x30
 800b18c:	e002      	b.n	800b194 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2200      	movs	r2, #0
 800b192:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2200      	movs	r2, #0
 800b198:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d103      	bne.n	800b1aa <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800b1b0:	4b84      	ldr	r3, [pc, #528]	@ (800b3c4 <tcp_receive+0x5d8>)
 800b1b2:	881b      	ldrh	r3, [r3, #0]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	b29a      	uxth	r2, r3
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	8b5b      	ldrh	r3, [r3, #26]
 800b1c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d035      	beq.n	800b236 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d118      	bne.n	800b204 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d00c      	beq.n	800b1f4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1e2:	68db      	ldr	r3, [r3, #12]
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7fa ffda 	bl	80061a0 <lwip_htonl>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	dc20      	bgt.n	800b236 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	8b5b      	ldrh	r3, [r3, #26]
 800b1f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b1fc:	b29a      	uxth	r2, r3
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b202:	e018      	b.n	800b236 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	4618      	mov	r0, r3
 800b212:	f7fa ffc5 	bl	80061a0 <lwip_htonl>
 800b216:	4603      	mov	r3, r0
 800b218:	1ae3      	subs	r3, r4, r3
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	dc0b      	bgt.n	800b236 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	8b5b      	ldrh	r3, [r3, #26]
 800b222:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b226:	b29a      	uxth	r2, r3
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b22c:	e003      	b.n	800b236 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f002 fbc8 	bl	800d9c4 <tcp_send_empty_ack>
 800b234:	e000      	b.n	800b238 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b236:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d05b      	beq.n	800b2f8 <tcp_receive+0x50c>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b244:	4b60      	ldr	r3, [pc, #384]	@ (800b3c8 <tcp_receive+0x5dc>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	1ad3      	subs	r3, r2, r3
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	da54      	bge.n	800b2f8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b24e:	4b5f      	ldr	r3, [pc, #380]	@ (800b3cc <tcp_receive+0x5e0>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	b29a      	uxth	r2, r3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b258:	b29b      	uxth	r3, r3
 800b25a:	1ad3      	subs	r3, r2, r3
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b262:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b26c:	10db      	asrs	r3, r3, #3
 800b26e:	b21b      	sxth	r3, r3
 800b270:	b29b      	uxth	r3, r3
 800b272:	1ad3      	subs	r3, r2, r3
 800b274:	b29b      	uxth	r3, r3
 800b276:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b280:	b29a      	uxth	r2, r3
 800b282:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b286:	4413      	add	r3, r2
 800b288:	b29b      	uxth	r3, r3
 800b28a:	b21a      	sxth	r2, r3
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800b290:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800b294:	2b00      	cmp	r3, #0
 800b296:	da05      	bge.n	800b2a4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800b298:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b29c:	425b      	negs	r3, r3
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b2a4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b2ae:	109b      	asrs	r3, r3, #2
 800b2b0:	b21b      	sxth	r3, r3
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	1ad3      	subs	r3, r2, r3
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b2c2:	b29a      	uxth	r2, r3
 800b2c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b2c8:	4413      	add	r3, r2
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	b21a      	sxth	r2, r3
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b2d8:	10db      	asrs	r3, r3, #3
 800b2da:	b21b      	sxth	r3, r3
 800b2dc:	b29a      	uxth	r2, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	4413      	add	r3, r2
 800b2e8:	b29b      	uxth	r3, r3
 800b2ea:	b21a      	sxth	r2, r3
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b2f8:	4b35      	ldr	r3, [pc, #212]	@ (800b3d0 <tcp_receive+0x5e4>)
 800b2fa:	881b      	ldrh	r3, [r3, #0]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	f000 84df 	beq.w	800bcc0 <tcp_receive+0xed4>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	7d1b      	ldrb	r3, [r3, #20]
 800b306:	2b06      	cmp	r3, #6
 800b308:	f200 84da 	bhi.w	800bcc0 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b310:	4b30      	ldr	r3, [pc, #192]	@ (800b3d4 <tcp_receive+0x5e8>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	1ad3      	subs	r3, r2, r3
 800b316:	3b01      	subs	r3, #1
 800b318:	2b00      	cmp	r3, #0
 800b31a:	f2c0 808f 	blt.w	800b43c <tcp_receive+0x650>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b322:	4b2b      	ldr	r3, [pc, #172]	@ (800b3d0 <tcp_receive+0x5e4>)
 800b324:	881b      	ldrh	r3, [r3, #0]
 800b326:	4619      	mov	r1, r3
 800b328:	4b2a      	ldr	r3, [pc, #168]	@ (800b3d4 <tcp_receive+0x5e8>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	440b      	add	r3, r1
 800b32e:	1ad3      	subs	r3, r2, r3
 800b330:	3301      	adds	r3, #1
 800b332:	2b00      	cmp	r3, #0
 800b334:	f300 8082 	bgt.w	800b43c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b338:	4b27      	ldr	r3, [pc, #156]	@ (800b3d8 <tcp_receive+0x5ec>)
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b342:	4b24      	ldr	r3, [pc, #144]	@ (800b3d4 <tcp_receive+0x5e8>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	1ad3      	subs	r3, r2, r3
 800b348:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b34a:	4b23      	ldr	r3, [pc, #140]	@ (800b3d8 <tcp_receive+0x5ec>)
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d106      	bne.n	800b360 <tcp_receive+0x574>
 800b352:	4b22      	ldr	r3, [pc, #136]	@ (800b3dc <tcp_receive+0x5f0>)
 800b354:	f240 5294 	movw	r2, #1428	@ 0x594
 800b358:	4921      	ldr	r1, [pc, #132]	@ (800b3e0 <tcp_receive+0x5f4>)
 800b35a:	4822      	ldr	r0, [pc, #136]	@ (800b3e4 <tcp_receive+0x5f8>)
 800b35c:	f006 ff04 	bl	8012168 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b362:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b366:	4293      	cmp	r3, r2
 800b368:	d906      	bls.n	800b378 <tcp_receive+0x58c>
 800b36a:	4b1c      	ldr	r3, [pc, #112]	@ (800b3dc <tcp_receive+0x5f0>)
 800b36c:	f240 5295 	movw	r2, #1429	@ 0x595
 800b370:	491d      	ldr	r1, [pc, #116]	@ (800b3e8 <tcp_receive+0x5fc>)
 800b372:	481c      	ldr	r0, [pc, #112]	@ (800b3e4 <tcp_receive+0x5f8>)
 800b374:	f006 fef8 	bl	8012168 <iprintf>
      off = (u16_t)off32;
 800b378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b37a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b37e:	4b16      	ldr	r3, [pc, #88]	@ (800b3d8 <tcp_receive+0x5ec>)
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	891b      	ldrh	r3, [r3, #8]
 800b384:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b388:	429a      	cmp	r2, r3
 800b38a:	d906      	bls.n	800b39a <tcp_receive+0x5ae>
 800b38c:	4b13      	ldr	r3, [pc, #76]	@ (800b3dc <tcp_receive+0x5f0>)
 800b38e:	f240 5297 	movw	r2, #1431	@ 0x597
 800b392:	4916      	ldr	r1, [pc, #88]	@ (800b3ec <tcp_receive+0x600>)
 800b394:	4813      	ldr	r0, [pc, #76]	@ (800b3e4 <tcp_receive+0x5f8>)
 800b396:	f006 fee7 	bl	8012168 <iprintf>
      inseg.len -= off;
 800b39a:	4b0f      	ldr	r3, [pc, #60]	@ (800b3d8 <tcp_receive+0x5ec>)
 800b39c:	891a      	ldrh	r2, [r3, #8]
 800b39e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b3a2:	1ad3      	subs	r3, r2, r3
 800b3a4:	b29a      	uxth	r2, r3
 800b3a6:	4b0c      	ldr	r3, [pc, #48]	@ (800b3d8 <tcp_receive+0x5ec>)
 800b3a8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b3aa:	4b0b      	ldr	r3, [pc, #44]	@ (800b3d8 <tcp_receive+0x5ec>)
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	891a      	ldrh	r2, [r3, #8]
 800b3b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b3b4:	1ad3      	subs	r3, r2, r3
 800b3b6:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800b3b8:	e02a      	b.n	800b410 <tcp_receive+0x624>
 800b3ba:	bf00      	nop
 800b3bc:	08014988 	.word	0x08014988
 800b3c0:	08014990 	.word	0x08014990
 800b3c4:	20008470 	.word	0x20008470
 800b3c8:	2000846c 	.word	0x2000846c
 800b3cc:	20008430 	.word	0x20008430
 800b3d0:	20008472 	.word	0x20008472
 800b3d4:	20008468 	.word	0x20008468
 800b3d8:	20008448 	.word	0x20008448
 800b3dc:	08014620 	.word	0x08014620
 800b3e0:	08014998 	.word	0x08014998
 800b3e4:	0801466c 	.word	0x0801466c
 800b3e8:	080149a8 	.word	0x080149a8
 800b3ec:	080149b8 	.word	0x080149b8
        off -= p->len;
 800b3f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3f2:	895b      	ldrh	r3, [r3, #10]
 800b3f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b3f8:	1ad3      	subs	r3, r2, r3
 800b3fa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b3fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b400:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800b402:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b404:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b406:	2200      	movs	r2, #0
 800b408:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b40a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800b410:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b412:	895b      	ldrh	r3, [r3, #10]
 800b414:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b418:	429a      	cmp	r2, r3
 800b41a:	d8e9      	bhi.n	800b3f0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b41c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b420:	4619      	mov	r1, r3
 800b422:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800b424:	f7fc f97e 	bl	8007724 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b42c:	4a90      	ldr	r2, [pc, #576]	@ (800b670 <tcp_receive+0x884>)
 800b42e:	6013      	str	r3, [r2, #0]
 800b430:	4b90      	ldr	r3, [pc, #576]	@ (800b674 <tcp_receive+0x888>)
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	4a8e      	ldr	r2, [pc, #568]	@ (800b670 <tcp_receive+0x884>)
 800b436:	6812      	ldr	r2, [r2, #0]
 800b438:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b43a:	e00d      	b.n	800b458 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b43c:	4b8c      	ldr	r3, [pc, #560]	@ (800b670 <tcp_receive+0x884>)
 800b43e:	681a      	ldr	r2, [r3, #0]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b444:	1ad3      	subs	r3, r2, r3
 800b446:	2b00      	cmp	r3, #0
 800b448:	da06      	bge.n	800b458 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	8b5b      	ldrh	r3, [r3, #26]
 800b44e:	f043 0302 	orr.w	r3, r3, #2
 800b452:	b29a      	uxth	r2, r3
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b458:	4b85      	ldr	r3, [pc, #532]	@ (800b670 <tcp_receive+0x884>)
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b460:	1ad3      	subs	r3, r2, r3
 800b462:	2b00      	cmp	r3, #0
 800b464:	f2c0 8427 	blt.w	800bcb6 <tcp_receive+0xeca>
 800b468:	4b81      	ldr	r3, [pc, #516]	@ (800b670 <tcp_receive+0x884>)
 800b46a:	681a      	ldr	r2, [r3, #0]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b470:	6879      	ldr	r1, [r7, #4]
 800b472:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b474:	440b      	add	r3, r1
 800b476:	1ad3      	subs	r3, r2, r3
 800b478:	3301      	adds	r3, #1
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	f300 841b 	bgt.w	800bcb6 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b484:	4b7a      	ldr	r3, [pc, #488]	@ (800b670 <tcp_receive+0x884>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	429a      	cmp	r2, r3
 800b48a:	f040 8298 	bne.w	800b9be <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b48e:	4b79      	ldr	r3, [pc, #484]	@ (800b674 <tcp_receive+0x888>)
 800b490:	891c      	ldrh	r4, [r3, #8]
 800b492:	4b78      	ldr	r3, [pc, #480]	@ (800b674 <tcp_receive+0x888>)
 800b494:	68db      	ldr	r3, [r3, #12]
 800b496:	899b      	ldrh	r3, [r3, #12]
 800b498:	b29b      	uxth	r3, r3
 800b49a:	4618      	mov	r0, r3
 800b49c:	f7fa fe6a 	bl	8006174 <lwip_htons>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	b2db      	uxtb	r3, r3
 800b4a4:	f003 0303 	and.w	r3, r3, #3
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d001      	beq.n	800b4b0 <tcp_receive+0x6c4>
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	e000      	b.n	800b4b2 <tcp_receive+0x6c6>
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	4423      	add	r3, r4
 800b4b4:	b29a      	uxth	r2, r3
 800b4b6:	4b70      	ldr	r3, [pc, #448]	@ (800b678 <tcp_receive+0x88c>)
 800b4b8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b4be:	4b6e      	ldr	r3, [pc, #440]	@ (800b678 <tcp_receive+0x88c>)
 800b4c0:	881b      	ldrh	r3, [r3, #0]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d274      	bcs.n	800b5b0 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b4c6:	4b6b      	ldr	r3, [pc, #428]	@ (800b674 <tcp_receive+0x888>)
 800b4c8:	68db      	ldr	r3, [r3, #12]
 800b4ca:	899b      	ldrh	r3, [r3, #12]
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7fa fe50 	bl	8006174 <lwip_htons>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	b2db      	uxtb	r3, r3
 800b4d8:	f003 0301 	and.w	r3, r3, #1
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d01e      	beq.n	800b51e <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b4e0:	4b64      	ldr	r3, [pc, #400]	@ (800b674 <tcp_receive+0x888>)
 800b4e2:	68db      	ldr	r3, [r3, #12]
 800b4e4:	899b      	ldrh	r3, [r3, #12]
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	b21b      	sxth	r3, r3
 800b4ea:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b4ee:	b21c      	sxth	r4, r3
 800b4f0:	4b60      	ldr	r3, [pc, #384]	@ (800b674 <tcp_receive+0x888>)
 800b4f2:	68db      	ldr	r3, [r3, #12]
 800b4f4:	899b      	ldrh	r3, [r3, #12]
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7fa fe3b 	bl	8006174 <lwip_htons>
 800b4fe:	4603      	mov	r3, r0
 800b500:	b2db      	uxtb	r3, r3
 800b502:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800b506:	b29b      	uxth	r3, r3
 800b508:	4618      	mov	r0, r3
 800b50a:	f7fa fe33 	bl	8006174 <lwip_htons>
 800b50e:	4603      	mov	r3, r0
 800b510:	b21b      	sxth	r3, r3
 800b512:	4323      	orrs	r3, r4
 800b514:	b21a      	sxth	r2, r3
 800b516:	4b57      	ldr	r3, [pc, #348]	@ (800b674 <tcp_receive+0x888>)
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	b292      	uxth	r2, r2
 800b51c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b522:	4b54      	ldr	r3, [pc, #336]	@ (800b674 <tcp_receive+0x888>)
 800b524:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b526:	4b53      	ldr	r3, [pc, #332]	@ (800b674 <tcp_receive+0x888>)
 800b528:	68db      	ldr	r3, [r3, #12]
 800b52a:	899b      	ldrh	r3, [r3, #12]
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	4618      	mov	r0, r3
 800b530:	f7fa fe20 	bl	8006174 <lwip_htons>
 800b534:	4603      	mov	r3, r0
 800b536:	b2db      	uxtb	r3, r3
 800b538:	f003 0302 	and.w	r3, r3, #2
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d005      	beq.n	800b54c <tcp_receive+0x760>
            inseg.len -= 1;
 800b540:	4b4c      	ldr	r3, [pc, #304]	@ (800b674 <tcp_receive+0x888>)
 800b542:	891b      	ldrh	r3, [r3, #8]
 800b544:	3b01      	subs	r3, #1
 800b546:	b29a      	uxth	r2, r3
 800b548:	4b4a      	ldr	r3, [pc, #296]	@ (800b674 <tcp_receive+0x888>)
 800b54a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b54c:	4b49      	ldr	r3, [pc, #292]	@ (800b674 <tcp_receive+0x888>)
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	4a48      	ldr	r2, [pc, #288]	@ (800b674 <tcp_receive+0x888>)
 800b552:	8912      	ldrh	r2, [r2, #8]
 800b554:	4611      	mov	r1, r2
 800b556:	4618      	mov	r0, r3
 800b558:	f7fb ffe4 	bl	8007524 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b55c:	4b45      	ldr	r3, [pc, #276]	@ (800b674 <tcp_receive+0x888>)
 800b55e:	891c      	ldrh	r4, [r3, #8]
 800b560:	4b44      	ldr	r3, [pc, #272]	@ (800b674 <tcp_receive+0x888>)
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	899b      	ldrh	r3, [r3, #12]
 800b566:	b29b      	uxth	r3, r3
 800b568:	4618      	mov	r0, r3
 800b56a:	f7fa fe03 	bl	8006174 <lwip_htons>
 800b56e:	4603      	mov	r3, r0
 800b570:	b2db      	uxtb	r3, r3
 800b572:	f003 0303 	and.w	r3, r3, #3
 800b576:	2b00      	cmp	r3, #0
 800b578:	d001      	beq.n	800b57e <tcp_receive+0x792>
 800b57a:	2301      	movs	r3, #1
 800b57c:	e000      	b.n	800b580 <tcp_receive+0x794>
 800b57e:	2300      	movs	r3, #0
 800b580:	4423      	add	r3, r4
 800b582:	b29a      	uxth	r2, r3
 800b584:	4b3c      	ldr	r3, [pc, #240]	@ (800b678 <tcp_receive+0x88c>)
 800b586:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b588:	4b3b      	ldr	r3, [pc, #236]	@ (800b678 <tcp_receive+0x88c>)
 800b58a:	881b      	ldrh	r3, [r3, #0]
 800b58c:	461a      	mov	r2, r3
 800b58e:	4b38      	ldr	r3, [pc, #224]	@ (800b670 <tcp_receive+0x884>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	441a      	add	r2, r3
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b598:	6879      	ldr	r1, [r7, #4]
 800b59a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b59c:	440b      	add	r3, r1
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	d006      	beq.n	800b5b0 <tcp_receive+0x7c4>
 800b5a2:	4b36      	ldr	r3, [pc, #216]	@ (800b67c <tcp_receive+0x890>)
 800b5a4:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800b5a8:	4935      	ldr	r1, [pc, #212]	@ (800b680 <tcp_receive+0x894>)
 800b5aa:	4836      	ldr	r0, [pc, #216]	@ (800b684 <tcp_receive+0x898>)
 800b5ac:	f006 fddc 	bl	8012168 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	f000 80e6 	beq.w	800b786 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b5ba:	4b2e      	ldr	r3, [pc, #184]	@ (800b674 <tcp_receive+0x888>)
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	899b      	ldrh	r3, [r3, #12]
 800b5c0:	b29b      	uxth	r3, r3
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7fa fdd6 	bl	8006174 <lwip_htons>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	b2db      	uxtb	r3, r3
 800b5cc:	f003 0301 	and.w	r3, r3, #1
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d010      	beq.n	800b5f6 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b5d4:	e00a      	b.n	800b5ec <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5da:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5e0:	681a      	ldr	r2, [r3, #0]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800b5e6:	68f8      	ldr	r0, [r7, #12]
 800b5e8:	f7fd fd51 	bl	800908e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d1f0      	bne.n	800b5d6 <tcp_receive+0x7ea>
 800b5f4:	e0c7      	b.n	800b786 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b5fc:	e051      	b.n	800b6a2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b5fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b600:	68db      	ldr	r3, [r3, #12]
 800b602:	899b      	ldrh	r3, [r3, #12]
 800b604:	b29b      	uxth	r3, r3
 800b606:	4618      	mov	r0, r3
 800b608:	f7fa fdb4 	bl	8006174 <lwip_htons>
 800b60c:	4603      	mov	r3, r0
 800b60e:	b2db      	uxtb	r3, r3
 800b610:	f003 0301 	and.w	r3, r3, #1
 800b614:	2b00      	cmp	r3, #0
 800b616:	d03c      	beq.n	800b692 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b618:	4b16      	ldr	r3, [pc, #88]	@ (800b674 <tcp_receive+0x888>)
 800b61a:	68db      	ldr	r3, [r3, #12]
 800b61c:	899b      	ldrh	r3, [r3, #12]
 800b61e:	b29b      	uxth	r3, r3
 800b620:	4618      	mov	r0, r3
 800b622:	f7fa fda7 	bl	8006174 <lwip_htons>
 800b626:	4603      	mov	r3, r0
 800b628:	b2db      	uxtb	r3, r3
 800b62a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d12f      	bne.n	800b692 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b632:	4b10      	ldr	r3, [pc, #64]	@ (800b674 <tcp_receive+0x888>)
 800b634:	68db      	ldr	r3, [r3, #12]
 800b636:	899b      	ldrh	r3, [r3, #12]
 800b638:	b29c      	uxth	r4, r3
 800b63a:	2001      	movs	r0, #1
 800b63c:	f7fa fd9a 	bl	8006174 <lwip_htons>
 800b640:	4603      	mov	r3, r0
 800b642:	461a      	mov	r2, r3
 800b644:	4b0b      	ldr	r3, [pc, #44]	@ (800b674 <tcp_receive+0x888>)
 800b646:	68db      	ldr	r3, [r3, #12]
 800b648:	4322      	orrs	r2, r4
 800b64a:	b292      	uxth	r2, r2
 800b64c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b64e:	4b09      	ldr	r3, [pc, #36]	@ (800b674 <tcp_receive+0x888>)
 800b650:	891c      	ldrh	r4, [r3, #8]
 800b652:	4b08      	ldr	r3, [pc, #32]	@ (800b674 <tcp_receive+0x888>)
 800b654:	68db      	ldr	r3, [r3, #12]
 800b656:	899b      	ldrh	r3, [r3, #12]
 800b658:	b29b      	uxth	r3, r3
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7fa fd8a 	bl	8006174 <lwip_htons>
 800b660:	4603      	mov	r3, r0
 800b662:	b2db      	uxtb	r3, r3
 800b664:	f003 0303 	and.w	r3, r3, #3
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d00d      	beq.n	800b688 <tcp_receive+0x89c>
 800b66c:	2301      	movs	r3, #1
 800b66e:	e00c      	b.n	800b68a <tcp_receive+0x89e>
 800b670:	20008468 	.word	0x20008468
 800b674:	20008448 	.word	0x20008448
 800b678:	20008472 	.word	0x20008472
 800b67c:	08014620 	.word	0x08014620
 800b680:	080149c8 	.word	0x080149c8
 800b684:	0801466c 	.word	0x0801466c
 800b688:	2300      	movs	r3, #0
 800b68a:	4423      	add	r3, r4
 800b68c:	b29a      	uxth	r2, r3
 800b68e:	4b98      	ldr	r3, [pc, #608]	@ (800b8f0 <tcp_receive+0xb04>)
 800b690:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800b692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b694:	613b      	str	r3, [r7, #16]
              next = next->next;
 800b696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800b69c:	6938      	ldr	r0, [r7, #16]
 800b69e:	f7fd fcf6 	bl	800908e <tcp_seg_free>
            while (next &&
 800b6a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d00e      	beq.n	800b6c6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b6a8:	4b91      	ldr	r3, [pc, #580]	@ (800b8f0 <tcp_receive+0xb04>)
 800b6aa:	881b      	ldrh	r3, [r3, #0]
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	4b91      	ldr	r3, [pc, #580]	@ (800b8f4 <tcp_receive+0xb08>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	441a      	add	r2, r3
 800b6b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b6bc:	8909      	ldrh	r1, [r1, #8]
 800b6be:	440b      	add	r3, r1
 800b6c0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	da9b      	bge.n	800b5fe <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b6c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d059      	beq.n	800b780 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800b6cc:	4b88      	ldr	r3, [pc, #544]	@ (800b8f0 <tcp_receive+0xb04>)
 800b6ce:	881b      	ldrh	r3, [r3, #0]
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	4b88      	ldr	r3, [pc, #544]	@ (800b8f4 <tcp_receive+0xb08>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	441a      	add	r2, r3
 800b6d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	dd4d      	ble.n	800b780 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b6e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	b29a      	uxth	r2, r3
 800b6ec:	4b81      	ldr	r3, [pc, #516]	@ (800b8f4 <tcp_receive+0xb08>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	1ad3      	subs	r3, r2, r3
 800b6f4:	b29a      	uxth	r2, r3
 800b6f6:	4b80      	ldr	r3, [pc, #512]	@ (800b8f8 <tcp_receive+0xb0c>)
 800b6f8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b6fa:	4b7f      	ldr	r3, [pc, #508]	@ (800b8f8 <tcp_receive+0xb0c>)
 800b6fc:	68db      	ldr	r3, [r3, #12]
 800b6fe:	899b      	ldrh	r3, [r3, #12]
 800b700:	b29b      	uxth	r3, r3
 800b702:	4618      	mov	r0, r3
 800b704:	f7fa fd36 	bl	8006174 <lwip_htons>
 800b708:	4603      	mov	r3, r0
 800b70a:	b2db      	uxtb	r3, r3
 800b70c:	f003 0302 	and.w	r3, r3, #2
 800b710:	2b00      	cmp	r3, #0
 800b712:	d005      	beq.n	800b720 <tcp_receive+0x934>
                inseg.len -= 1;
 800b714:	4b78      	ldr	r3, [pc, #480]	@ (800b8f8 <tcp_receive+0xb0c>)
 800b716:	891b      	ldrh	r3, [r3, #8]
 800b718:	3b01      	subs	r3, #1
 800b71a:	b29a      	uxth	r2, r3
 800b71c:	4b76      	ldr	r3, [pc, #472]	@ (800b8f8 <tcp_receive+0xb0c>)
 800b71e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b720:	4b75      	ldr	r3, [pc, #468]	@ (800b8f8 <tcp_receive+0xb0c>)
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	4a74      	ldr	r2, [pc, #464]	@ (800b8f8 <tcp_receive+0xb0c>)
 800b726:	8912      	ldrh	r2, [r2, #8]
 800b728:	4611      	mov	r1, r2
 800b72a:	4618      	mov	r0, r3
 800b72c:	f7fb fefa 	bl	8007524 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b730:	4b71      	ldr	r3, [pc, #452]	@ (800b8f8 <tcp_receive+0xb0c>)
 800b732:	891c      	ldrh	r4, [r3, #8]
 800b734:	4b70      	ldr	r3, [pc, #448]	@ (800b8f8 <tcp_receive+0xb0c>)
 800b736:	68db      	ldr	r3, [r3, #12]
 800b738:	899b      	ldrh	r3, [r3, #12]
 800b73a:	b29b      	uxth	r3, r3
 800b73c:	4618      	mov	r0, r3
 800b73e:	f7fa fd19 	bl	8006174 <lwip_htons>
 800b742:	4603      	mov	r3, r0
 800b744:	b2db      	uxtb	r3, r3
 800b746:	f003 0303 	and.w	r3, r3, #3
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d001      	beq.n	800b752 <tcp_receive+0x966>
 800b74e:	2301      	movs	r3, #1
 800b750:	e000      	b.n	800b754 <tcp_receive+0x968>
 800b752:	2300      	movs	r3, #0
 800b754:	4423      	add	r3, r4
 800b756:	b29a      	uxth	r2, r3
 800b758:	4b65      	ldr	r3, [pc, #404]	@ (800b8f0 <tcp_receive+0xb04>)
 800b75a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b75c:	4b64      	ldr	r3, [pc, #400]	@ (800b8f0 <tcp_receive+0xb04>)
 800b75e:	881b      	ldrh	r3, [r3, #0]
 800b760:	461a      	mov	r2, r3
 800b762:	4b64      	ldr	r3, [pc, #400]	@ (800b8f4 <tcp_receive+0xb08>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	441a      	add	r2, r3
 800b768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b76a:	68db      	ldr	r3, [r3, #12]
 800b76c:	685b      	ldr	r3, [r3, #4]
 800b76e:	429a      	cmp	r2, r3
 800b770:	d006      	beq.n	800b780 <tcp_receive+0x994>
 800b772:	4b62      	ldr	r3, [pc, #392]	@ (800b8fc <tcp_receive+0xb10>)
 800b774:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800b778:	4961      	ldr	r1, [pc, #388]	@ (800b900 <tcp_receive+0xb14>)
 800b77a:	4862      	ldr	r0, [pc, #392]	@ (800b904 <tcp_receive+0xb18>)
 800b77c:	f006 fcf4 	bl	8012168 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b784:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b786:	4b5a      	ldr	r3, [pc, #360]	@ (800b8f0 <tcp_receive+0xb04>)
 800b788:	881b      	ldrh	r3, [r3, #0]
 800b78a:	461a      	mov	r2, r3
 800b78c:	4b59      	ldr	r3, [pc, #356]	@ (800b8f4 <tcp_receive+0xb08>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	441a      	add	r2, r3
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b79a:	4b55      	ldr	r3, [pc, #340]	@ (800b8f0 <tcp_receive+0xb04>)
 800b79c:	881b      	ldrh	r3, [r3, #0]
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d206      	bcs.n	800b7b0 <tcp_receive+0x9c4>
 800b7a2:	4b56      	ldr	r3, [pc, #344]	@ (800b8fc <tcp_receive+0xb10>)
 800b7a4:	f240 6207 	movw	r2, #1543	@ 0x607
 800b7a8:	4957      	ldr	r1, [pc, #348]	@ (800b908 <tcp_receive+0xb1c>)
 800b7aa:	4856      	ldr	r0, [pc, #344]	@ (800b904 <tcp_receive+0xb18>)
 800b7ac:	f006 fcdc 	bl	8012168 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b7b4:	4b4e      	ldr	r3, [pc, #312]	@ (800b8f0 <tcp_receive+0xb04>)
 800b7b6:	881b      	ldrh	r3, [r3, #0]
 800b7b8:	1ad3      	subs	r3, r2, r3
 800b7ba:	b29a      	uxth	r2, r3
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f7fc ff3d 	bl	8008640 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b7c6:	4b4c      	ldr	r3, [pc, #304]	@ (800b8f8 <tcp_receive+0xb0c>)
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	891b      	ldrh	r3, [r3, #8]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d006      	beq.n	800b7de <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800b7d0:	4b49      	ldr	r3, [pc, #292]	@ (800b8f8 <tcp_receive+0xb0c>)
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	4a4d      	ldr	r2, [pc, #308]	@ (800b90c <tcp_receive+0xb20>)
 800b7d6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b7d8:	4b47      	ldr	r3, [pc, #284]	@ (800b8f8 <tcp_receive+0xb0c>)
 800b7da:	2200      	movs	r2, #0
 800b7dc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b7de:	4b46      	ldr	r3, [pc, #280]	@ (800b8f8 <tcp_receive+0xb0c>)
 800b7e0:	68db      	ldr	r3, [r3, #12]
 800b7e2:	899b      	ldrh	r3, [r3, #12]
 800b7e4:	b29b      	uxth	r3, r3
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7fa fcc4 	bl	8006174 <lwip_htons>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	f003 0301 	and.w	r3, r3, #1
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	f000 80b8 	beq.w	800b96a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b7fa:	4b45      	ldr	r3, [pc, #276]	@ (800b910 <tcp_receive+0xb24>)
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	f043 0320 	orr.w	r3, r3, #32
 800b802:	b2da      	uxtb	r2, r3
 800b804:	4b42      	ldr	r3, [pc, #264]	@ (800b910 <tcp_receive+0xb24>)
 800b806:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b808:	e0af      	b.n	800b96a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b80e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b814:	68db      	ldr	r3, [r3, #12]
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	4a36      	ldr	r2, [pc, #216]	@ (800b8f4 <tcp_receive+0xb08>)
 800b81a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	891b      	ldrh	r3, [r3, #8]
 800b820:	461c      	mov	r4, r3
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	68db      	ldr	r3, [r3, #12]
 800b826:	899b      	ldrh	r3, [r3, #12]
 800b828:	b29b      	uxth	r3, r3
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7fa fca2 	bl	8006174 <lwip_htons>
 800b830:	4603      	mov	r3, r0
 800b832:	b2db      	uxtb	r3, r3
 800b834:	f003 0303 	and.w	r3, r3, #3
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d001      	beq.n	800b840 <tcp_receive+0xa54>
 800b83c:	2301      	movs	r3, #1
 800b83e:	e000      	b.n	800b842 <tcp_receive+0xa56>
 800b840:	2300      	movs	r3, #0
 800b842:	191a      	adds	r2, r3, r4
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b848:	441a      	add	r2, r3
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b852:	461c      	mov	r4, r3
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	891b      	ldrh	r3, [r3, #8]
 800b858:	461d      	mov	r5, r3
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	68db      	ldr	r3, [r3, #12]
 800b85e:	899b      	ldrh	r3, [r3, #12]
 800b860:	b29b      	uxth	r3, r3
 800b862:	4618      	mov	r0, r3
 800b864:	f7fa fc86 	bl	8006174 <lwip_htons>
 800b868:	4603      	mov	r3, r0
 800b86a:	b2db      	uxtb	r3, r3
 800b86c:	f003 0303 	and.w	r3, r3, #3
 800b870:	2b00      	cmp	r3, #0
 800b872:	d001      	beq.n	800b878 <tcp_receive+0xa8c>
 800b874:	2301      	movs	r3, #1
 800b876:	e000      	b.n	800b87a <tcp_receive+0xa8e>
 800b878:	2300      	movs	r3, #0
 800b87a:	442b      	add	r3, r5
 800b87c:	429c      	cmp	r4, r3
 800b87e:	d206      	bcs.n	800b88e <tcp_receive+0xaa2>
 800b880:	4b1e      	ldr	r3, [pc, #120]	@ (800b8fc <tcp_receive+0xb10>)
 800b882:	f240 622b 	movw	r2, #1579	@ 0x62b
 800b886:	4923      	ldr	r1, [pc, #140]	@ (800b914 <tcp_receive+0xb28>)
 800b888:	481e      	ldr	r0, [pc, #120]	@ (800b904 <tcp_receive+0xb18>)
 800b88a:	f006 fc6d 	bl	8012168 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	891b      	ldrh	r3, [r3, #8]
 800b892:	461c      	mov	r4, r3
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	68db      	ldr	r3, [r3, #12]
 800b898:	899b      	ldrh	r3, [r3, #12]
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7fa fc69 	bl	8006174 <lwip_htons>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	b2db      	uxtb	r3, r3
 800b8a6:	f003 0303 	and.w	r3, r3, #3
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d001      	beq.n	800b8b2 <tcp_receive+0xac6>
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	e000      	b.n	800b8b4 <tcp_receive+0xac8>
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	1919      	adds	r1, r3, r4
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b8ba:	b28b      	uxth	r3, r1
 800b8bc:	1ad3      	subs	r3, r2, r3
 800b8be:	b29a      	uxth	r2, r3
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f7fc febb 	bl	8008640 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	685b      	ldr	r3, [r3, #4]
 800b8ce:	891b      	ldrh	r3, [r3, #8]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d028      	beq.n	800b926 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b8d4:	4b0d      	ldr	r3, [pc, #52]	@ (800b90c <tcp_receive+0xb20>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d01d      	beq.n	800b918 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800b8dc:	4b0b      	ldr	r3, [pc, #44]	@ (800b90c <tcp_receive+0xb20>)
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	4610      	mov	r0, r2
 800b8e8:	f7fc f864 	bl	80079b4 <pbuf_cat>
 800b8ec:	e018      	b.n	800b920 <tcp_receive+0xb34>
 800b8ee:	bf00      	nop
 800b8f0:	20008472 	.word	0x20008472
 800b8f4:	20008468 	.word	0x20008468
 800b8f8:	20008448 	.word	0x20008448
 800b8fc:	08014620 	.word	0x08014620
 800b900:	08014a00 	.word	0x08014a00
 800b904:	0801466c 	.word	0x0801466c
 800b908:	08014a3c 	.word	0x08014a3c
 800b90c:	20008478 	.word	0x20008478
 800b910:	20008475 	.word	0x20008475
 800b914:	08014a5c 	.word	0x08014a5c
            } else {
              recv_data = cseg->p;
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	4a70      	ldr	r2, [pc, #448]	@ (800bae0 <tcp_receive+0xcf4>)
 800b91e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	2200      	movs	r2, #0
 800b924:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	68db      	ldr	r3, [r3, #12]
 800b92a:	899b      	ldrh	r3, [r3, #12]
 800b92c:	b29b      	uxth	r3, r3
 800b92e:	4618      	mov	r0, r3
 800b930:	f7fa fc20 	bl	8006174 <lwip_htons>
 800b934:	4603      	mov	r3, r0
 800b936:	b2db      	uxtb	r3, r3
 800b938:	f003 0301 	and.w	r3, r3, #1
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d00d      	beq.n	800b95c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b940:	4b68      	ldr	r3, [pc, #416]	@ (800bae4 <tcp_receive+0xcf8>)
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	f043 0320 	orr.w	r3, r3, #32
 800b948:	b2da      	uxtb	r2, r3
 800b94a:	4b66      	ldr	r3, [pc, #408]	@ (800bae4 <tcp_receive+0xcf8>)
 800b94c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	7d1b      	ldrb	r3, [r3, #20]
 800b952:	2b04      	cmp	r3, #4
 800b954:	d102      	bne.n	800b95c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2207      	movs	r2, #7
 800b95a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800b964:	68b8      	ldr	r0, [r7, #8]
 800b966:	f7fd fb92 	bl	800908e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d008      	beq.n	800b984 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	685a      	ldr	r2, [r3, #4]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800b97e:	429a      	cmp	r2, r3
 800b980:	f43f af43 	beq.w	800b80a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	8b5b      	ldrh	r3, [r3, #26]
 800b988:	f003 0301 	and.w	r3, r3, #1
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d00e      	beq.n	800b9ae <tcp_receive+0xbc2>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	8b5b      	ldrh	r3, [r3, #26]
 800b994:	f023 0301 	bic.w	r3, r3, #1
 800b998:	b29a      	uxth	r2, r3
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	835a      	strh	r2, [r3, #26]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	8b5b      	ldrh	r3, [r3, #26]
 800b9a2:	f043 0302 	orr.w	r3, r3, #2
 800b9a6:	b29a      	uxth	r2, r3
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b9ac:	e187      	b.n	800bcbe <tcp_receive+0xed2>
        tcp_ack(pcb);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	8b5b      	ldrh	r3, [r3, #26]
 800b9b2:	f043 0301 	orr.w	r3, r3, #1
 800b9b6:	b29a      	uxth	r2, r3
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b9bc:	e17f      	b.n	800bcbe <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d106      	bne.n	800b9d4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b9c6:	4848      	ldr	r0, [pc, #288]	@ (800bae8 <tcp_receive+0xcfc>)
 800b9c8:	f7fd fb7a 	bl	80090c0 <tcp_seg_copy>
 800b9cc:	4602      	mov	r2, r0
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	675a      	str	r2, [r3, #116]	@ 0x74
 800b9d2:	e16c      	b.n	800bcae <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b9de:	e156      	b.n	800bc8e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800b9e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	685a      	ldr	r2, [r3, #4]
 800b9e6:	4b41      	ldr	r3, [pc, #260]	@ (800baec <tcp_receive+0xd00>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d11d      	bne.n	800ba2a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800b9ee:	4b3e      	ldr	r3, [pc, #248]	@ (800bae8 <tcp_receive+0xcfc>)
 800b9f0:	891a      	ldrh	r2, [r3, #8]
 800b9f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9f4:	891b      	ldrh	r3, [r3, #8]
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	f240 814e 	bls.w	800bc98 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b9fc:	483a      	ldr	r0, [pc, #232]	@ (800bae8 <tcp_receive+0xcfc>)
 800b9fe:	f7fd fb5f 	bl	80090c0 <tcp_seg_copy>
 800ba02:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	f000 8148 	beq.w	800bc9c <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800ba0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d003      	beq.n	800ba1a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800ba12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba14:	697a      	ldr	r2, [r7, #20]
 800ba16:	601a      	str	r2, [r3, #0]
 800ba18:	e002      	b.n	800ba20 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	697a      	ldr	r2, [r7, #20]
 800ba1e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ba20:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ba22:	6978      	ldr	r0, [r7, #20]
 800ba24:	f7ff f8de 	bl	800abe4 <tcp_oos_insert_segment>
                }
                break;
 800ba28:	e138      	b.n	800bc9c <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ba2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d117      	bne.n	800ba60 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ba30:	4b2e      	ldr	r3, [pc, #184]	@ (800baec <tcp_receive+0xd00>)
 800ba32:	681a      	ldr	r2, [r3, #0]
 800ba34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba36:	68db      	ldr	r3, [r3, #12]
 800ba38:	685b      	ldr	r3, [r3, #4]
 800ba3a:	1ad3      	subs	r3, r2, r3
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	da57      	bge.n	800baf0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ba40:	4829      	ldr	r0, [pc, #164]	@ (800bae8 <tcp_receive+0xcfc>)
 800ba42:	f7fd fb3d 	bl	80090c0 <tcp_seg_copy>
 800ba46:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ba48:	69bb      	ldr	r3, [r7, #24]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	f000 8128 	beq.w	800bca0 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	69ba      	ldr	r2, [r7, #24]
 800ba54:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ba56:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ba58:	69b8      	ldr	r0, [r7, #24]
 800ba5a:	f7ff f8c3 	bl	800abe4 <tcp_oos_insert_segment>
                  }
                  break;
 800ba5e:	e11f      	b.n	800bca0 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ba60:	4b22      	ldr	r3, [pc, #136]	@ (800baec <tcp_receive+0xd00>)
 800ba62:	681a      	ldr	r2, [r3, #0]
 800ba64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba66:	68db      	ldr	r3, [r3, #12]
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	1ad3      	subs	r3, r2, r3
 800ba6c:	3b01      	subs	r3, #1
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	db3e      	blt.n	800baf0 <tcp_receive+0xd04>
 800ba72:	4b1e      	ldr	r3, [pc, #120]	@ (800baec <tcp_receive+0xd00>)
 800ba74:	681a      	ldr	r2, [r3, #0]
 800ba76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba78:	68db      	ldr	r3, [r3, #12]
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	1ad3      	subs	r3, r2, r3
 800ba7e:	3301      	adds	r3, #1
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	dc35      	bgt.n	800baf0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ba84:	4818      	ldr	r0, [pc, #96]	@ (800bae8 <tcp_receive+0xcfc>)
 800ba86:	f7fd fb1b 	bl	80090c0 <tcp_seg_copy>
 800ba8a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ba8c:	69fb      	ldr	r3, [r7, #28]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	f000 8108 	beq.w	800bca4 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ba94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ba9c:	8912      	ldrh	r2, [r2, #8]
 800ba9e:	441a      	add	r2, r3
 800baa0:	4b12      	ldr	r3, [pc, #72]	@ (800baec <tcp_receive+0xd00>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	1ad3      	subs	r3, r2, r3
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	dd12      	ble.n	800bad0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800baaa:	4b10      	ldr	r3, [pc, #64]	@ (800baec <tcp_receive+0xd00>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	b29a      	uxth	r2, r3
 800bab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bab2:	68db      	ldr	r3, [r3, #12]
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	1ad3      	subs	r3, r2, r3
 800baba:	b29a      	uxth	r2, r3
 800babc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800babe:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800bac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bac2:	685a      	ldr	r2, [r3, #4]
 800bac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bac6:	891b      	ldrh	r3, [r3, #8]
 800bac8:	4619      	mov	r1, r3
 800baca:	4610      	mov	r0, r2
 800bacc:	f7fb fd2a 	bl	8007524 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800bad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bad2:	69fa      	ldr	r2, [r7, #28]
 800bad4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800bad6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bad8:	69f8      	ldr	r0, [r7, #28]
 800bada:	f7ff f883 	bl	800abe4 <tcp_oos_insert_segment>
                  }
                  break;
 800bade:	e0e1      	b.n	800bca4 <tcp_receive+0xeb8>
 800bae0:	20008478 	.word	0x20008478
 800bae4:	20008475 	.word	0x20008475
 800bae8:	20008448 	.word	0x20008448
 800baec:	20008468 	.word	0x20008468
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800baf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baf2:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800baf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	f040 80c5 	bne.w	800bc88 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800bafe:	4b7f      	ldr	r3, [pc, #508]	@ (800bcfc <tcp_receive+0xf10>)
 800bb00:	681a      	ldr	r2, [r3, #0]
 800bb02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb04:	68db      	ldr	r3, [r3, #12]
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	f340 80bc 	ble.w	800bc88 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bb10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb12:	68db      	ldr	r3, [r3, #12]
 800bb14:	899b      	ldrh	r3, [r3, #12]
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7fa fb2b 	bl	8006174 <lwip_htons>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	b2db      	uxtb	r3, r3
 800bb22:	f003 0301 	and.w	r3, r3, #1
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	f040 80be 	bne.w	800bca8 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800bb2c:	4874      	ldr	r0, [pc, #464]	@ (800bd00 <tcp_receive+0xf14>)
 800bb2e:	f7fd fac7 	bl	80090c0 <tcp_seg_copy>
 800bb32:	4602      	mov	r2, r0
 800bb34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb36:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800bb38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	f000 80b5 	beq.w	800bcac <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800bb42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb44:	68db      	ldr	r3, [r3, #12]
 800bb46:	685b      	ldr	r3, [r3, #4]
 800bb48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb4a:	8912      	ldrh	r2, [r2, #8]
 800bb4c:	441a      	add	r2, r3
 800bb4e:	4b6b      	ldr	r3, [pc, #428]	@ (800bcfc <tcp_receive+0xf10>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	1ad3      	subs	r3, r2, r3
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	dd12      	ble.n	800bb7e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800bb58:	4b68      	ldr	r3, [pc, #416]	@ (800bcfc <tcp_receive+0xf10>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	b29a      	uxth	r2, r3
 800bb5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb60:	68db      	ldr	r3, [r3, #12]
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	1ad3      	subs	r3, r2, r3
 800bb68:	b29a      	uxth	r2, r3
 800bb6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb6c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800bb6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb70:	685a      	ldr	r2, [r3, #4]
 800bb72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb74:	891b      	ldrh	r3, [r3, #8]
 800bb76:	4619      	mov	r1, r3
 800bb78:	4610      	mov	r0, r2
 800bb7a:	f7fb fcd3 	bl	8007524 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800bb7e:	4b61      	ldr	r3, [pc, #388]	@ (800bd04 <tcp_receive+0xf18>)
 800bb80:	881b      	ldrh	r3, [r3, #0]
 800bb82:	461a      	mov	r2, r3
 800bb84:	4b5d      	ldr	r3, [pc, #372]	@ (800bcfc <tcp_receive+0xf10>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	441a      	add	r2, r3
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb8e:	6879      	ldr	r1, [r7, #4]
 800bb90:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bb92:	440b      	add	r3, r1
 800bb94:	1ad3      	subs	r3, r2, r3
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	f340 8088 	ble.w	800bcac <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800bb9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	68db      	ldr	r3, [r3, #12]
 800bba2:	899b      	ldrh	r3, [r3, #12]
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7fa fae4 	bl	8006174 <lwip_htons>
 800bbac:	4603      	mov	r3, r0
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	f003 0301 	and.w	r3, r3, #1
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d021      	beq.n	800bbfc <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800bbb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	68db      	ldr	r3, [r3, #12]
 800bbbe:	899b      	ldrh	r3, [r3, #12]
 800bbc0:	b29b      	uxth	r3, r3
 800bbc2:	b21b      	sxth	r3, r3
 800bbc4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bbc8:	b21c      	sxth	r4, r3
 800bbca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	68db      	ldr	r3, [r3, #12]
 800bbd0:	899b      	ldrh	r3, [r3, #12]
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f7fa facd 	bl	8006174 <lwip_htons>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	b2db      	uxtb	r3, r3
 800bbde:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f7fa fac5 	bl	8006174 <lwip_htons>
 800bbea:	4603      	mov	r3, r0
 800bbec:	b21b      	sxth	r3, r3
 800bbee:	4323      	orrs	r3, r4
 800bbf0:	b21a      	sxth	r2, r3
 800bbf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	68db      	ldr	r3, [r3, #12]
 800bbf8:	b292      	uxth	r2, r2
 800bbfa:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc00:	b29a      	uxth	r2, r3
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc06:	4413      	add	r3, r2
 800bc08:	b299      	uxth	r1, r3
 800bc0a:	4b3c      	ldr	r3, [pc, #240]	@ (800bcfc <tcp_receive+0xf10>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	b29a      	uxth	r2, r3
 800bc10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	1a8a      	subs	r2, r1, r2
 800bc16:	b292      	uxth	r2, r2
 800bc18:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800bc1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	685a      	ldr	r2, [r3, #4]
 800bc20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	891b      	ldrh	r3, [r3, #8]
 800bc26:	4619      	mov	r1, r3
 800bc28:	4610      	mov	r0, r2
 800bc2a:	f7fb fc7b 	bl	8007524 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800bc2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	891c      	ldrh	r4, [r3, #8]
 800bc34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	68db      	ldr	r3, [r3, #12]
 800bc3a:	899b      	ldrh	r3, [r3, #12]
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f7fa fa98 	bl	8006174 <lwip_htons>
 800bc44:	4603      	mov	r3, r0
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	f003 0303 	and.w	r3, r3, #3
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d001      	beq.n	800bc54 <tcp_receive+0xe68>
 800bc50:	2301      	movs	r3, #1
 800bc52:	e000      	b.n	800bc56 <tcp_receive+0xe6a>
 800bc54:	2300      	movs	r3, #0
 800bc56:	4423      	add	r3, r4
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	4b2a      	ldr	r3, [pc, #168]	@ (800bd04 <tcp_receive+0xf18>)
 800bc5c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bc5e:	4b29      	ldr	r3, [pc, #164]	@ (800bd04 <tcp_receive+0xf18>)
 800bc60:	881b      	ldrh	r3, [r3, #0]
 800bc62:	461a      	mov	r2, r3
 800bc64:	4b25      	ldr	r3, [pc, #148]	@ (800bcfc <tcp_receive+0xf10>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	441a      	add	r2, r3
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc6e:	6879      	ldr	r1, [r7, #4]
 800bc70:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bc72:	440b      	add	r3, r1
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d019      	beq.n	800bcac <tcp_receive+0xec0>
 800bc78:	4b23      	ldr	r3, [pc, #140]	@ (800bd08 <tcp_receive+0xf1c>)
 800bc7a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800bc7e:	4923      	ldr	r1, [pc, #140]	@ (800bd0c <tcp_receive+0xf20>)
 800bc80:	4823      	ldr	r0, [pc, #140]	@ (800bd10 <tcp_receive+0xf24>)
 800bc82:	f006 fa71 	bl	8012168 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800bc86:	e011      	b.n	800bcac <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bc88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bc8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	f47f aea5 	bne.w	800b9e0 <tcp_receive+0xbf4>
 800bc96:	e00a      	b.n	800bcae <tcp_receive+0xec2>
                break;
 800bc98:	bf00      	nop
 800bc9a:	e008      	b.n	800bcae <tcp_receive+0xec2>
                break;
 800bc9c:	bf00      	nop
 800bc9e:	e006      	b.n	800bcae <tcp_receive+0xec2>
                  break;
 800bca0:	bf00      	nop
 800bca2:	e004      	b.n	800bcae <tcp_receive+0xec2>
                  break;
 800bca4:	bf00      	nop
 800bca6:	e002      	b.n	800bcae <tcp_receive+0xec2>
                  break;
 800bca8:	bf00      	nop
 800bcaa:	e000      	b.n	800bcae <tcp_receive+0xec2>
                break;
 800bcac:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f001 fe88 	bl	800d9c4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800bcb4:	e003      	b.n	800bcbe <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f001 fe84 	bl	800d9c4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bcbc:	e01a      	b.n	800bcf4 <tcp_receive+0xf08>
 800bcbe:	e019      	b.n	800bcf4 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800bcc0:	4b0e      	ldr	r3, [pc, #56]	@ (800bcfc <tcp_receive+0xf10>)
 800bcc2:	681a      	ldr	r2, [r3, #0]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcc8:	1ad3      	subs	r3, r2, r3
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	db0a      	blt.n	800bce4 <tcp_receive+0xef8>
 800bcce:	4b0b      	ldr	r3, [pc, #44]	@ (800bcfc <tcp_receive+0xf10>)
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcd6:	6879      	ldr	r1, [r7, #4]
 800bcd8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bcda:	440b      	add	r3, r1
 800bcdc:	1ad3      	subs	r3, r2, r3
 800bcde:	3301      	adds	r3, #1
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	dd07      	ble.n	800bcf4 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	8b5b      	ldrh	r3, [r3, #26]
 800bce8:	f043 0302 	orr.w	r3, r3, #2
 800bcec:	b29a      	uxth	r2, r3
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800bcf2:	e7ff      	b.n	800bcf4 <tcp_receive+0xf08>
 800bcf4:	bf00      	nop
 800bcf6:	3750      	adds	r7, #80	@ 0x50
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bdb0      	pop	{r4, r5, r7, pc}
 800bcfc:	20008468 	.word	0x20008468
 800bd00:	20008448 	.word	0x20008448
 800bd04:	20008472 	.word	0x20008472
 800bd08:	08014620 	.word	0x08014620
 800bd0c:	080149c8 	.word	0x080149c8
 800bd10:	0801466c 	.word	0x0801466c

0800bd14 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800bd1a:	4b15      	ldr	r3, [pc, #84]	@ (800bd70 <tcp_get_next_optbyte+0x5c>)
 800bd1c:	881b      	ldrh	r3, [r3, #0]
 800bd1e:	1c5a      	adds	r2, r3, #1
 800bd20:	b291      	uxth	r1, r2
 800bd22:	4a13      	ldr	r2, [pc, #76]	@ (800bd70 <tcp_get_next_optbyte+0x5c>)
 800bd24:	8011      	strh	r1, [r2, #0]
 800bd26:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800bd28:	4b12      	ldr	r3, [pc, #72]	@ (800bd74 <tcp_get_next_optbyte+0x60>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d004      	beq.n	800bd3a <tcp_get_next_optbyte+0x26>
 800bd30:	4b11      	ldr	r3, [pc, #68]	@ (800bd78 <tcp_get_next_optbyte+0x64>)
 800bd32:	881b      	ldrh	r3, [r3, #0]
 800bd34:	88fa      	ldrh	r2, [r7, #6]
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d208      	bcs.n	800bd4c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800bd3a:	4b10      	ldr	r3, [pc, #64]	@ (800bd7c <tcp_get_next_optbyte+0x68>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	3314      	adds	r3, #20
 800bd40:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800bd42:	88fb      	ldrh	r3, [r7, #6]
 800bd44:	683a      	ldr	r2, [r7, #0]
 800bd46:	4413      	add	r3, r2
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	e00b      	b.n	800bd64 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800bd4c:	88fb      	ldrh	r3, [r7, #6]
 800bd4e:	b2da      	uxtb	r2, r3
 800bd50:	4b09      	ldr	r3, [pc, #36]	@ (800bd78 <tcp_get_next_optbyte+0x64>)
 800bd52:	881b      	ldrh	r3, [r3, #0]
 800bd54:	b2db      	uxtb	r3, r3
 800bd56:	1ad3      	subs	r3, r2, r3
 800bd58:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800bd5a:	4b06      	ldr	r3, [pc, #24]	@ (800bd74 <tcp_get_next_optbyte+0x60>)
 800bd5c:	681a      	ldr	r2, [r3, #0]
 800bd5e:	797b      	ldrb	r3, [r7, #5]
 800bd60:	4413      	add	r3, r2
 800bd62:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	370c      	adds	r7, #12
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr
 800bd70:	20008464 	.word	0x20008464
 800bd74:	20008460 	.word	0x20008460
 800bd78:	2000845e 	.word	0x2000845e
 800bd7c:	20008458 	.word	0x20008458

0800bd80 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d106      	bne.n	800bd9c <tcp_parseopt+0x1c>
 800bd8e:	4b32      	ldr	r3, [pc, #200]	@ (800be58 <tcp_parseopt+0xd8>)
 800bd90:	f240 727d 	movw	r2, #1917	@ 0x77d
 800bd94:	4931      	ldr	r1, [pc, #196]	@ (800be5c <tcp_parseopt+0xdc>)
 800bd96:	4832      	ldr	r0, [pc, #200]	@ (800be60 <tcp_parseopt+0xe0>)
 800bd98:	f006 f9e6 	bl	8012168 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800bd9c:	4b31      	ldr	r3, [pc, #196]	@ (800be64 <tcp_parseopt+0xe4>)
 800bd9e:	881b      	ldrh	r3, [r3, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d056      	beq.n	800be52 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bda4:	4b30      	ldr	r3, [pc, #192]	@ (800be68 <tcp_parseopt+0xe8>)
 800bda6:	2200      	movs	r2, #0
 800bda8:	801a      	strh	r2, [r3, #0]
 800bdaa:	e046      	b.n	800be3a <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800bdac:	f7ff ffb2 	bl	800bd14 <tcp_get_next_optbyte>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800bdb4:	7bfb      	ldrb	r3, [r7, #15]
 800bdb6:	2b02      	cmp	r3, #2
 800bdb8:	d006      	beq.n	800bdc8 <tcp_parseopt+0x48>
 800bdba:	2b02      	cmp	r3, #2
 800bdbc:	dc2a      	bgt.n	800be14 <tcp_parseopt+0x94>
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d042      	beq.n	800be48 <tcp_parseopt+0xc8>
 800bdc2:	2b01      	cmp	r3, #1
 800bdc4:	d038      	beq.n	800be38 <tcp_parseopt+0xb8>
 800bdc6:	e025      	b.n	800be14 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800bdc8:	f7ff ffa4 	bl	800bd14 <tcp_get_next_optbyte>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	2b04      	cmp	r3, #4
 800bdd0:	d13c      	bne.n	800be4c <tcp_parseopt+0xcc>
 800bdd2:	4b25      	ldr	r3, [pc, #148]	@ (800be68 <tcp_parseopt+0xe8>)
 800bdd4:	881b      	ldrh	r3, [r3, #0]
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	4a22      	ldr	r2, [pc, #136]	@ (800be64 <tcp_parseopt+0xe4>)
 800bdda:	8812      	ldrh	r2, [r2, #0]
 800bddc:	4293      	cmp	r3, r2
 800bdde:	da35      	bge.n	800be4c <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800bde0:	f7ff ff98 	bl	800bd14 <tcp_get_next_optbyte>
 800bde4:	4603      	mov	r3, r0
 800bde6:	021b      	lsls	r3, r3, #8
 800bde8:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800bdea:	f7ff ff93 	bl	800bd14 <tcp_get_next_optbyte>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	461a      	mov	r2, r3
 800bdf2:	89bb      	ldrh	r3, [r7, #12]
 800bdf4:	4313      	orrs	r3, r2
 800bdf6:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800bdf8:	89bb      	ldrh	r3, [r7, #12]
 800bdfa:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800bdfe:	d804      	bhi.n	800be0a <tcp_parseopt+0x8a>
 800be00:	89bb      	ldrh	r3, [r7, #12]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d001      	beq.n	800be0a <tcp_parseopt+0x8a>
 800be06:	89ba      	ldrh	r2, [r7, #12]
 800be08:	e001      	b.n	800be0e <tcp_parseopt+0x8e>
 800be0a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800be12:	e012      	b.n	800be3a <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800be14:	f7ff ff7e 	bl	800bd14 <tcp_get_next_optbyte>
 800be18:	4603      	mov	r3, r0
 800be1a:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800be1c:	7afb      	ldrb	r3, [r7, #11]
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d916      	bls.n	800be50 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800be22:	7afb      	ldrb	r3, [r7, #11]
 800be24:	b29a      	uxth	r2, r3
 800be26:	4b10      	ldr	r3, [pc, #64]	@ (800be68 <tcp_parseopt+0xe8>)
 800be28:	881b      	ldrh	r3, [r3, #0]
 800be2a:	4413      	add	r3, r2
 800be2c:	b29b      	uxth	r3, r3
 800be2e:	3b02      	subs	r3, #2
 800be30:	b29a      	uxth	r2, r3
 800be32:	4b0d      	ldr	r3, [pc, #52]	@ (800be68 <tcp_parseopt+0xe8>)
 800be34:	801a      	strh	r2, [r3, #0]
 800be36:	e000      	b.n	800be3a <tcp_parseopt+0xba>
          break;
 800be38:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800be3a:	4b0b      	ldr	r3, [pc, #44]	@ (800be68 <tcp_parseopt+0xe8>)
 800be3c:	881a      	ldrh	r2, [r3, #0]
 800be3e:	4b09      	ldr	r3, [pc, #36]	@ (800be64 <tcp_parseopt+0xe4>)
 800be40:	881b      	ldrh	r3, [r3, #0]
 800be42:	429a      	cmp	r2, r3
 800be44:	d3b2      	bcc.n	800bdac <tcp_parseopt+0x2c>
 800be46:	e004      	b.n	800be52 <tcp_parseopt+0xd2>
          return;
 800be48:	bf00      	nop
 800be4a:	e002      	b.n	800be52 <tcp_parseopt+0xd2>
            return;
 800be4c:	bf00      	nop
 800be4e:	e000      	b.n	800be52 <tcp_parseopt+0xd2>
            return;
 800be50:	bf00      	nop
      }
    }
  }
}
 800be52:	3710      	adds	r7, #16
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}
 800be58:	08014620 	.word	0x08014620
 800be5c:	08014a84 	.word	0x08014a84
 800be60:	0801466c 	.word	0x0801466c
 800be64:	2000845c 	.word	0x2000845c
 800be68:	20008464 	.word	0x20008464

0800be6c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800be6c:	b480      	push	{r7}
 800be6e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800be70:	4b05      	ldr	r3, [pc, #20]	@ (800be88 <tcp_trigger_input_pcb_close+0x1c>)
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	f043 0310 	orr.w	r3, r3, #16
 800be78:	b2da      	uxtb	r2, r3
 800be7a:	4b03      	ldr	r3, [pc, #12]	@ (800be88 <tcp_trigger_input_pcb_close+0x1c>)
 800be7c:	701a      	strb	r2, [r3, #0]
}
 800be7e:	bf00      	nop
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr
 800be88:	20008475 	.word	0x20008475

0800be8c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	60f8      	str	r0, [r7, #12]
 800be94:	60b9      	str	r1, [r7, #8]
 800be96:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d00a      	beq.n	800beb4 <tcp_route+0x28>
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	7a1b      	ldrb	r3, [r3, #8]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d006      	beq.n	800beb4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	7a1b      	ldrb	r3, [r3, #8]
 800beaa:	4618      	mov	r0, r3
 800beac:	f7fb f960 	bl	8007170 <netif_get_by_index>
 800beb0:	4603      	mov	r3, r0
 800beb2:	e003      	b.n	800bebc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f003 fad3 	bl	800f460 <ip4_route>
 800beba:	4603      	mov	r3, r0
  }
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3710      	adds	r7, #16
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800bec4:	b590      	push	{r4, r7, lr}
 800bec6:	b087      	sub	sp, #28
 800bec8:	af00      	add	r7, sp, #0
 800beca:	60f8      	str	r0, [r7, #12]
 800becc:	60b9      	str	r1, [r7, #8]
 800bece:	603b      	str	r3, [r7, #0]
 800bed0:	4613      	mov	r3, r2
 800bed2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d105      	bne.n	800bee6 <tcp_create_segment+0x22>
 800beda:	4b43      	ldr	r3, [pc, #268]	@ (800bfe8 <tcp_create_segment+0x124>)
 800bedc:	22a3      	movs	r2, #163	@ 0xa3
 800bede:	4943      	ldr	r1, [pc, #268]	@ (800bfec <tcp_create_segment+0x128>)
 800bee0:	4843      	ldr	r0, [pc, #268]	@ (800bff0 <tcp_create_segment+0x12c>)
 800bee2:	f006 f941 	bl	8012168 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d105      	bne.n	800bef8 <tcp_create_segment+0x34>
 800beec:	4b3e      	ldr	r3, [pc, #248]	@ (800bfe8 <tcp_create_segment+0x124>)
 800beee:	22a4      	movs	r2, #164	@ 0xa4
 800bef0:	4940      	ldr	r1, [pc, #256]	@ (800bff4 <tcp_create_segment+0x130>)
 800bef2:	483f      	ldr	r0, [pc, #252]	@ (800bff0 <tcp_create_segment+0x12c>)
 800bef4:	f006 f938 	bl	8012168 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bef8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800befc:	009b      	lsls	r3, r3, #2
 800befe:	b2db      	uxtb	r3, r3
 800bf00:	f003 0304 	and.w	r3, r3, #4
 800bf04:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800bf06:	2003      	movs	r0, #3
 800bf08:	f7fa fdac 	bl	8006a64 <memp_malloc>
 800bf0c:	6138      	str	r0, [r7, #16]
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d104      	bne.n	800bf1e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800bf14:	68b8      	ldr	r0, [r7, #8]
 800bf16:	f7fb fc8b 	bl	8007830 <pbuf_free>
    return NULL;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	e060      	b.n	800bfe0 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800bf24:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	68ba      	ldr	r2, [r7, #8]
 800bf30:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	891a      	ldrh	r2, [r3, #8]
 800bf36:	7dfb      	ldrb	r3, [r7, #23]
 800bf38:	b29b      	uxth	r3, r3
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d205      	bcs.n	800bf4a <tcp_create_segment+0x86>
 800bf3e:	4b2a      	ldr	r3, [pc, #168]	@ (800bfe8 <tcp_create_segment+0x124>)
 800bf40:	22b0      	movs	r2, #176	@ 0xb0
 800bf42:	492d      	ldr	r1, [pc, #180]	@ (800bff8 <tcp_create_segment+0x134>)
 800bf44:	482a      	ldr	r0, [pc, #168]	@ (800bff0 <tcp_create_segment+0x12c>)
 800bf46:	f006 f90f 	bl	8012168 <iprintf>
  seg->len = p->tot_len - optlen;
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	891a      	ldrh	r2, [r3, #8]
 800bf4e:	7dfb      	ldrb	r3, [r7, #23]
 800bf50:	b29b      	uxth	r3, r3
 800bf52:	1ad3      	subs	r3, r2, r3
 800bf54:	b29a      	uxth	r2, r3
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800bf5a:	2114      	movs	r1, #20
 800bf5c:	68b8      	ldr	r0, [r7, #8]
 800bf5e:	f7fb fbd1 	bl	8007704 <pbuf_add_header>
 800bf62:	4603      	mov	r3, r0
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d004      	beq.n	800bf72 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800bf68:	6938      	ldr	r0, [r7, #16]
 800bf6a:	f7fd f890 	bl	800908e <tcp_seg_free>
    return NULL;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	e036      	b.n	800bfe0 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	685a      	ldr	r2, [r3, #4]
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	8ada      	ldrh	r2, [r3, #22]
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	68dc      	ldr	r4, [r3, #12]
 800bf84:	4610      	mov	r0, r2
 800bf86:	f7fa f8f5 	bl	8006174 <lwip_htons>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	8b1a      	ldrh	r2, [r3, #24]
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	68dc      	ldr	r4, [r3, #12]
 800bf96:	4610      	mov	r0, r2
 800bf98:	f7fa f8ec 	bl	8006174 <lwip_htons>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	68dc      	ldr	r4, [r3, #12]
 800bfa4:	6838      	ldr	r0, [r7, #0]
 800bfa6:	f7fa f8fb 	bl	80061a0 <lwip_htonl>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800bfae:	7dfb      	ldrb	r3, [r7, #23]
 800bfb0:	089b      	lsrs	r3, r3, #2
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	3305      	adds	r3, #5
 800bfb6:	b29b      	uxth	r3, r3
 800bfb8:	031b      	lsls	r3, r3, #12
 800bfba:	b29a      	uxth	r2, r3
 800bfbc:	79fb      	ldrb	r3, [r7, #7]
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	4313      	orrs	r3, r2
 800bfc2:	b29a      	uxth	r2, r3
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	68dc      	ldr	r4, [r3, #12]
 800bfc8:	4610      	mov	r0, r2
 800bfca:	f7fa f8d3 	bl	8006174 <lwip_htons>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	68db      	ldr	r3, [r3, #12]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	749a      	strb	r2, [r3, #18]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	74da      	strb	r2, [r3, #19]
  return seg;
 800bfde:	693b      	ldr	r3, [r7, #16]
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	371c      	adds	r7, #28
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd90      	pop	{r4, r7, pc}
 800bfe8:	08014aa0 	.word	0x08014aa0
 800bfec:	08014ad4 	.word	0x08014ad4
 800bff0:	08014af4 	.word	0x08014af4
 800bff4:	08014b1c 	.word	0x08014b1c
 800bff8:	08014b40 	.word	0x08014b40

0800bffc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b086      	sub	sp, #24
 800c000:	af00      	add	r7, sp, #0
 800c002:	607b      	str	r3, [r7, #4]
 800c004:	4603      	mov	r3, r0
 800c006:	73fb      	strb	r3, [r7, #15]
 800c008:	460b      	mov	r3, r1
 800c00a:	81bb      	strh	r3, [r7, #12]
 800c00c:	4613      	mov	r3, r2
 800c00e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800c010:	89bb      	ldrh	r3, [r7, #12]
 800c012:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d105      	bne.n	800c026 <tcp_pbuf_prealloc+0x2a>
 800c01a:	4b30      	ldr	r3, [pc, #192]	@ (800c0dc <tcp_pbuf_prealloc+0xe0>)
 800c01c:	22e8      	movs	r2, #232	@ 0xe8
 800c01e:	4930      	ldr	r1, [pc, #192]	@ (800c0e0 <tcp_pbuf_prealloc+0xe4>)
 800c020:	4830      	ldr	r0, [pc, #192]	@ (800c0e4 <tcp_pbuf_prealloc+0xe8>)
 800c022:	f006 f8a1 	bl	8012168 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800c026:	6a3b      	ldr	r3, [r7, #32]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d105      	bne.n	800c038 <tcp_pbuf_prealloc+0x3c>
 800c02c:	4b2b      	ldr	r3, [pc, #172]	@ (800c0dc <tcp_pbuf_prealloc+0xe0>)
 800c02e:	22e9      	movs	r2, #233	@ 0xe9
 800c030:	492d      	ldr	r1, [pc, #180]	@ (800c0e8 <tcp_pbuf_prealloc+0xec>)
 800c032:	482c      	ldr	r0, [pc, #176]	@ (800c0e4 <tcp_pbuf_prealloc+0xe8>)
 800c034:	f006 f898 	bl	8012168 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800c038:	89ba      	ldrh	r2, [r7, #12]
 800c03a:	897b      	ldrh	r3, [r7, #10]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d221      	bcs.n	800c084 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c040:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c044:	f003 0302 	and.w	r3, r3, #2
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d111      	bne.n	800c070 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800c04c:	6a3b      	ldr	r3, [r7, #32]
 800c04e:	8b5b      	ldrh	r3, [r3, #26]
 800c050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c054:	2b00      	cmp	r3, #0
 800c056:	d115      	bne.n	800c084 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800c058:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d007      	beq.n	800c070 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800c060:	6a3b      	ldr	r3, [r7, #32]
 800c062:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 800c064:	2b00      	cmp	r3, #0
 800c066:	d103      	bne.n	800c070 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800c068:	6a3b      	ldr	r3, [r7, #32]
 800c06a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d009      	beq.n	800c084 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800c070:	89bb      	ldrh	r3, [r7, #12]
 800c072:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800c076:	f023 0203 	bic.w	r2, r3, #3
 800c07a:	897b      	ldrh	r3, [r7, #10]
 800c07c:	4293      	cmp	r3, r2
 800c07e:	bf28      	it	cs
 800c080:	4613      	movcs	r3, r2
 800c082:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800c084:	8af9      	ldrh	r1, [r7, #22]
 800c086:	7bfb      	ldrb	r3, [r7, #15]
 800c088:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c08c:	4618      	mov	r0, r3
 800c08e:	f7fb f8eb 	bl	8007268 <pbuf_alloc>
 800c092:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d101      	bne.n	800c09e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800c09a:	2300      	movs	r3, #0
 800c09c:	e019      	b.n	800c0d2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d006      	beq.n	800c0b4 <tcp_pbuf_prealloc+0xb8>
 800c0a6:	4b0d      	ldr	r3, [pc, #52]	@ (800c0dc <tcp_pbuf_prealloc+0xe0>)
 800c0a8:	f240 120b 	movw	r2, #267	@ 0x10b
 800c0ac:	490f      	ldr	r1, [pc, #60]	@ (800c0ec <tcp_pbuf_prealloc+0xf0>)
 800c0ae:	480d      	ldr	r0, [pc, #52]	@ (800c0e4 <tcp_pbuf_prealloc+0xe8>)
 800c0b0:	f006 f85a 	bl	8012168 <iprintf>
  *oversize = p->len - length;
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	895a      	ldrh	r2, [r3, #10]
 800c0b8:	89bb      	ldrh	r3, [r7, #12]
 800c0ba:	1ad3      	subs	r3, r2, r3
 800c0bc:	b29a      	uxth	r2, r3
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	89ba      	ldrh	r2, [r7, #12]
 800c0c6:	811a      	strh	r2, [r3, #8]
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	891a      	ldrh	r2, [r3, #8]
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	815a      	strh	r2, [r3, #10]
  return p;
 800c0d0:	693b      	ldr	r3, [r7, #16]
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3718      	adds	r7, #24
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	08014aa0 	.word	0x08014aa0
 800c0e0:	08014b58 	.word	0x08014b58
 800c0e4:	08014af4 	.word	0x08014af4
 800c0e8:	08014b7c 	.word	0x08014b7c
 800c0ec:	08014b9c 	.word	0x08014b9c

0800c0f0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b082      	sub	sp, #8
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d106      	bne.n	800c110 <tcp_write_checks+0x20>
 800c102:	4b33      	ldr	r3, [pc, #204]	@ (800c1d0 <tcp_write_checks+0xe0>)
 800c104:	f240 1233 	movw	r2, #307	@ 0x133
 800c108:	4932      	ldr	r1, [pc, #200]	@ (800c1d4 <tcp_write_checks+0xe4>)
 800c10a:	4833      	ldr	r0, [pc, #204]	@ (800c1d8 <tcp_write_checks+0xe8>)
 800c10c:	f006 f82c 	bl	8012168 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	7d1b      	ldrb	r3, [r3, #20]
 800c114:	2b04      	cmp	r3, #4
 800c116:	d00e      	beq.n	800c136 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800c11c:	2b07      	cmp	r3, #7
 800c11e:	d00a      	beq.n	800c136 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800c124:	2b02      	cmp	r3, #2
 800c126:	d006      	beq.n	800c136 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800c12c:	2b03      	cmp	r3, #3
 800c12e:	d002      	beq.n	800c136 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800c130:	f06f 030a 	mvn.w	r3, #10
 800c134:	e048      	b.n	800c1c8 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800c136:	887b      	ldrh	r3, [r7, #2]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d101      	bne.n	800c140 <tcp_write_checks+0x50>
    return ERR_OK;
 800c13c:	2300      	movs	r3, #0
 800c13e:	e043      	b.n	800c1c8 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c146:	887a      	ldrh	r2, [r7, #2]
 800c148:	429a      	cmp	r2, r3
 800c14a:	d909      	bls.n	800c160 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	8b5b      	ldrh	r3, [r3, #26]
 800c150:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c154:	b29a      	uxth	r2, r3
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c15a:	f04f 33ff 	mov.w	r3, #4294967295
 800c15e:	e033      	b.n	800c1c8 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c166:	2b08      	cmp	r3, #8
 800c168:	d909      	bls.n	800c17e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	8b5b      	ldrh	r3, [r3, #26]
 800c16e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c172:	b29a      	uxth	r2, r3
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c178:	f04f 33ff 	mov.w	r3, #4294967295
 800c17c:	e024      	b.n	800c1c8 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c184:	2b00      	cmp	r3, #0
 800c186:	d00f      	beq.n	800c1a8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d11a      	bne.n	800c1c6 <tcp_write_checks+0xd6>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c194:	2b00      	cmp	r3, #0
 800c196:	d116      	bne.n	800c1c6 <tcp_write_checks+0xd6>
 800c198:	4b0d      	ldr	r3, [pc, #52]	@ (800c1d0 <tcp_write_checks+0xe0>)
 800c19a:	f240 1255 	movw	r2, #341	@ 0x155
 800c19e:	490f      	ldr	r1, [pc, #60]	@ (800c1dc <tcp_write_checks+0xec>)
 800c1a0:	480d      	ldr	r0, [pc, #52]	@ (800c1d8 <tcp_write_checks+0xe8>)
 800c1a2:	f005 ffe1 	bl	8012168 <iprintf>
 800c1a6:	e00e      	b.n	800c1c6 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d103      	bne.n	800c1b8 <tcp_write_checks+0xc8>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d006      	beq.n	800c1c6 <tcp_write_checks+0xd6>
 800c1b8:	4b05      	ldr	r3, [pc, #20]	@ (800c1d0 <tcp_write_checks+0xe0>)
 800c1ba:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800c1be:	4908      	ldr	r1, [pc, #32]	@ (800c1e0 <tcp_write_checks+0xf0>)
 800c1c0:	4805      	ldr	r0, [pc, #20]	@ (800c1d8 <tcp_write_checks+0xe8>)
 800c1c2:	f005 ffd1 	bl	8012168 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800c1c6:	2300      	movs	r3, #0
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3708      	adds	r7, #8
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	08014aa0 	.word	0x08014aa0
 800c1d4:	08014bb0 	.word	0x08014bb0
 800c1d8:	08014af4 	.word	0x08014af4
 800c1dc:	08014bd0 	.word	0x08014bd0
 800c1e0:	08014c0c 	.word	0x08014c0c

0800c1e4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800c1e4:	b590      	push	{r4, r7, lr}
 800c1e6:	b09b      	sub	sp, #108	@ 0x6c
 800c1e8:	af04      	add	r7, sp, #16
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	60b9      	str	r1, [r7, #8]
 800c1ee:	4611      	mov	r1, r2
 800c1f0:	461a      	mov	r2, r3
 800c1f2:	460b      	mov	r3, r1
 800c1f4:	80fb      	strh	r3, [r7, #6]
 800c1f6:	4613      	mov	r3, r2
 800c1f8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c1fe:	2300      	movs	r3, #0
 800c200:	653b      	str	r3, [r7, #80]	@ 0x50
 800c202:	2300      	movs	r3, #0
 800c204:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c206:	2300      	movs	r3, #0
 800c208:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c20a:	2300      	movs	r3, #0
 800c20c:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800c20e:	2300      	movs	r3, #0
 800c210:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800c214:	2300      	movs	r3, #0
 800c216:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800c21a:	2300      	movs	r3, #0
 800c21c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800c21e:	2300      	movs	r3, #0
 800c220:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800c222:	2300      	movs	r3, #0
 800c224:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d109      	bne.n	800c240 <tcp_write+0x5c>
 800c22c:	4ba4      	ldr	r3, [pc, #656]	@ (800c4c0 <tcp_write+0x2dc>)
 800c22e:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800c232:	49a4      	ldr	r1, [pc, #656]	@ (800c4c4 <tcp_write+0x2e0>)
 800c234:	48a4      	ldr	r0, [pc, #656]	@ (800c4c8 <tcp_write+0x2e4>)
 800c236:	f005 ff97 	bl	8012168 <iprintf>
 800c23a:	f06f 030f 	mvn.w	r3, #15
 800c23e:	e32a      	b.n	800c896 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c246:	085b      	lsrs	r3, r3, #1
 800c248:	b29a      	uxth	r2, r3
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c24e:	4293      	cmp	r3, r2
 800c250:	bf28      	it	cs
 800c252:	4613      	movcs	r3, r2
 800c254:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800c256:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d102      	bne.n	800c262 <tcp_write+0x7e>
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c260:	e000      	b.n	800c264 <tcp_write+0x80>
 800c262:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c264:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d109      	bne.n	800c280 <tcp_write+0x9c>
 800c26c:	4b94      	ldr	r3, [pc, #592]	@ (800c4c0 <tcp_write+0x2dc>)
 800c26e:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800c272:	4996      	ldr	r1, [pc, #600]	@ (800c4cc <tcp_write+0x2e8>)
 800c274:	4894      	ldr	r0, [pc, #592]	@ (800c4c8 <tcp_write+0x2e4>)
 800c276:	f005 ff77 	bl	8012168 <iprintf>
 800c27a:	f06f 030f 	mvn.w	r3, #15
 800c27e:	e30a      	b.n	800c896 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800c280:	88fb      	ldrh	r3, [r7, #6]
 800c282:	4619      	mov	r1, r3
 800c284:	68f8      	ldr	r0, [r7, #12]
 800c286:	f7ff ff33 	bl	800c0f0 <tcp_write_checks>
 800c28a:	4603      	mov	r3, r0
 800c28c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 800c290:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800c294:	2b00      	cmp	r3, #0
 800c296:	d002      	beq.n	800c29e <tcp_write+0xba>
    return err;
 800c298:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800c29c:	e2fb      	b.n	800c896 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c2a4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	f000 80f6 	beq.w	800c4a4 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2bc:	653b      	str	r3, [r7, #80]	@ 0x50
 800c2be:	e002      	b.n	800c2c6 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800c2c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c2c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d1f8      	bne.n	800c2c0 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800c2ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2d0:	7a9b      	ldrb	r3, [r3, #10]
 800c2d2:	009b      	lsls	r3, r3, #2
 800c2d4:	b29b      	uxth	r3, r3
 800c2d6:	f003 0304 	and.w	r3, r3, #4
 800c2da:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800c2dc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c2de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2e0:	891b      	ldrh	r3, [r3, #8]
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	8c3b      	ldrh	r3, [r7, #32]
 800c2e6:	440b      	add	r3, r1
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	da06      	bge.n	800c2fa <tcp_write+0x116>
 800c2ec:	4b74      	ldr	r3, [pc, #464]	@ (800c4c0 <tcp_write+0x2dc>)
 800c2ee:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800c2f2:	4977      	ldr	r1, [pc, #476]	@ (800c4d0 <tcp_write+0x2ec>)
 800c2f4:	4874      	ldr	r0, [pc, #464]	@ (800c4c8 <tcp_write+0x2e4>)
 800c2f6:	f005 ff37 	bl	8012168 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800c2fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2fc:	891a      	ldrh	r2, [r3, #8]
 800c2fe:	8c3b      	ldrh	r3, [r7, #32]
 800c300:	4413      	add	r3, r2
 800c302:	b29b      	uxth	r3, r3
 800c304:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c306:	1ad3      	subs	r3, r2, r3
 800c308:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c310:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800c312:	8a7b      	ldrh	r3, [r7, #18]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d026      	beq.n	800c366 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800c318:	8a7b      	ldrh	r3, [r7, #18]
 800c31a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c31c:	429a      	cmp	r2, r3
 800c31e:	d206      	bcs.n	800c32e <tcp_write+0x14a>
 800c320:	4b67      	ldr	r3, [pc, #412]	@ (800c4c0 <tcp_write+0x2dc>)
 800c322:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800c326:	496b      	ldr	r1, [pc, #428]	@ (800c4d4 <tcp_write+0x2f0>)
 800c328:	4867      	ldr	r0, [pc, #412]	@ (800c4c8 <tcp_write+0x2e4>)
 800c32a:	f005 ff1d 	bl	8012168 <iprintf>
      seg = last_unsent;
 800c32e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c330:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800c332:	8a7b      	ldrh	r3, [r7, #18]
 800c334:	88fa      	ldrh	r2, [r7, #6]
 800c336:	4293      	cmp	r3, r2
 800c338:	bf28      	it	cs
 800c33a:	4613      	movcs	r3, r2
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c340:	4293      	cmp	r3, r2
 800c342:	bf28      	it	cs
 800c344:	4613      	movcs	r3, r2
 800c346:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 800c348:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c34c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c34e:	4413      	add	r3, r2
 800c350:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 800c354:	8a7a      	ldrh	r2, [r7, #18]
 800c356:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c358:	1ad3      	subs	r3, r2, r3
 800c35a:	b29b      	uxth	r3, r3
 800c35c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800c35e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c360:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c362:	1ad3      	subs	r3, r2, r3
 800c364:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800c366:	8a7b      	ldrh	r3, [r7, #18]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d00b      	beq.n	800c384 <tcp_write+0x1a0>
 800c36c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c370:	88fb      	ldrh	r3, [r7, #6]
 800c372:	429a      	cmp	r2, r3
 800c374:	d006      	beq.n	800c384 <tcp_write+0x1a0>
 800c376:	4b52      	ldr	r3, [pc, #328]	@ (800c4c0 <tcp_write+0x2dc>)
 800c378:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c37c:	4956      	ldr	r1, [pc, #344]	@ (800c4d8 <tcp_write+0x2f4>)
 800c37e:	4852      	ldr	r0, [pc, #328]	@ (800c4c8 <tcp_write+0x2e4>)
 800c380:	f005 fef2 	bl	8012168 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800c384:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c388:	88fb      	ldrh	r3, [r7, #6]
 800c38a:	429a      	cmp	r2, r3
 800c38c:	f080 8167 	bcs.w	800c65e <tcp_write+0x47a>
 800c390:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c392:	2b00      	cmp	r3, #0
 800c394:	f000 8163 	beq.w	800c65e <tcp_write+0x47a>
 800c398:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c39a:	891b      	ldrh	r3, [r3, #8]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	f000 815e 	beq.w	800c65e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c3a2:	88fa      	ldrh	r2, [r7, #6]
 800c3a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c3a8:	1ad2      	subs	r2, r2, r3
 800c3aa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	bfa8      	it	ge
 800c3b0:	4613      	movge	r3, r2
 800c3b2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800c3b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3b6:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c3b8:	797b      	ldrb	r3, [r7, #5]
 800c3ba:	f003 0301 	and.w	r3, r3, #1
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d027      	beq.n	800c412 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800c3c2:	f107 0012 	add.w	r0, r7, #18
 800c3c6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c3c8:	8bf9      	ldrh	r1, [r7, #30]
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	9302      	str	r3, [sp, #8]
 800c3ce:	797b      	ldrb	r3, [r7, #5]
 800c3d0:	9301      	str	r3, [sp, #4]
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	9300      	str	r3, [sp, #0]
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	2000      	movs	r0, #0
 800c3da:	f7ff fe0f 	bl	800bffc <tcp_pbuf_prealloc>
 800c3de:	6578      	str	r0, [r7, #84]	@ 0x54
 800c3e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	f000 8225 	beq.w	800c832 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800c3e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3ea:	6858      	ldr	r0, [r3, #4]
 800c3ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c3f0:	68ba      	ldr	r2, [r7, #8]
 800c3f2:	4413      	add	r3, r2
 800c3f4:	8bfa      	ldrh	r2, [r7, #30]
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	f006 f805 	bl	8012406 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800c3fc:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c3fe:	f7fb fa9f 	bl	8007940 <pbuf_clen>
 800c402:	4603      	mov	r3, r0
 800c404:	461a      	mov	r2, r3
 800c406:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c40a:	4413      	add	r3, r2
 800c40c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800c410:	e041      	b.n	800c496 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800c412:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c414:	685b      	ldr	r3, [r3, #4]
 800c416:	637b      	str	r3, [r7, #52]	@ 0x34
 800c418:	e002      	b.n	800c420 <tcp_write+0x23c>
 800c41a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d1f8      	bne.n	800c41a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c42a:	7b1b      	ldrb	r3, [r3, #12]
 800c42c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c430:	2b00      	cmp	r3, #0
 800c432:	d115      	bne.n	800c460 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800c434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c43a:	8952      	ldrh	r2, [r2, #10]
 800c43c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c43e:	68ba      	ldr	r2, [r7, #8]
 800c440:	429a      	cmp	r2, r3
 800c442:	d10d      	bne.n	800c460 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800c444:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d006      	beq.n	800c45a <tcp_write+0x276>
 800c44c:	4b1c      	ldr	r3, [pc, #112]	@ (800c4c0 <tcp_write+0x2dc>)
 800c44e:	f240 2231 	movw	r2, #561	@ 0x231
 800c452:	4922      	ldr	r1, [pc, #136]	@ (800c4dc <tcp_write+0x2f8>)
 800c454:	481c      	ldr	r0, [pc, #112]	@ (800c4c8 <tcp_write+0x2e4>)
 800c456:	f005 fe87 	bl	8012168 <iprintf>
          extendlen = seglen;
 800c45a:	8bfb      	ldrh	r3, [r7, #30]
 800c45c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800c45e:	e01a      	b.n	800c496 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800c460:	8bfb      	ldrh	r3, [r7, #30]
 800c462:	2201      	movs	r2, #1
 800c464:	4619      	mov	r1, r3
 800c466:	2000      	movs	r0, #0
 800c468:	f7fa fefe 	bl	8007268 <pbuf_alloc>
 800c46c:	6578      	str	r0, [r7, #84]	@ 0x54
 800c46e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c470:	2b00      	cmp	r3, #0
 800c472:	f000 81e0 	beq.w	800c836 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800c476:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c47a:	68ba      	ldr	r2, [r7, #8]
 800c47c:	441a      	add	r2, r3
 800c47e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c480:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800c482:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c484:	f7fb fa5c 	bl	8007940 <pbuf_clen>
 800c488:	4603      	mov	r3, r0
 800c48a:	461a      	mov	r2, r3
 800c48c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c490:	4413      	add	r3, r2
 800c492:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800c496:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c49a:	8bfb      	ldrh	r3, [r7, #30]
 800c49c:	4413      	add	r3, r2
 800c49e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800c4a2:	e0dc      	b.n	800c65e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	f000 80d7 	beq.w	800c65e <tcp_write+0x47a>
 800c4b0:	4b03      	ldr	r3, [pc, #12]	@ (800c4c0 <tcp_write+0x2dc>)
 800c4b2:	f240 224a 	movw	r2, #586	@ 0x24a
 800c4b6:	490a      	ldr	r1, [pc, #40]	@ (800c4e0 <tcp_write+0x2fc>)
 800c4b8:	4803      	ldr	r0, [pc, #12]	@ (800c4c8 <tcp_write+0x2e4>)
 800c4ba:	f005 fe55 	bl	8012168 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800c4be:	e0ce      	b.n	800c65e <tcp_write+0x47a>
 800c4c0:	08014aa0 	.word	0x08014aa0
 800c4c4:	08014c40 	.word	0x08014c40
 800c4c8:	08014af4 	.word	0x08014af4
 800c4cc:	08014c58 	.word	0x08014c58
 800c4d0:	08014c8c 	.word	0x08014c8c
 800c4d4:	08014ca4 	.word	0x08014ca4
 800c4d8:	08014cc4 	.word	0x08014cc4
 800c4dc:	08014ce4 	.word	0x08014ce4
 800c4e0:	08014d10 	.word	0x08014d10
    struct pbuf *p;
    u16_t left = len - pos;
 800c4e4:	88fa      	ldrh	r2, [r7, #6]
 800c4e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c4ea:	1ad3      	subs	r3, r2, r3
 800c4ec:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800c4ee:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c4f2:	b29b      	uxth	r3, r3
 800c4f4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c4f6:	1ad3      	subs	r3, r2, r3
 800c4f8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800c4fa:	8b7a      	ldrh	r2, [r7, #26]
 800c4fc:	8bbb      	ldrh	r3, [r7, #28]
 800c4fe:	4293      	cmp	r3, r2
 800c500:	bf28      	it	cs
 800c502:	4613      	movcs	r3, r2
 800c504:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c506:	797b      	ldrb	r3, [r7, #5]
 800c508:	f003 0301 	and.w	r3, r3, #1
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d036      	beq.n	800c57e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800c510:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c514:	b29a      	uxth	r2, r3
 800c516:	8b3b      	ldrh	r3, [r7, #24]
 800c518:	4413      	add	r3, r2
 800c51a:	b299      	uxth	r1, r3
 800c51c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c51e:	2b00      	cmp	r3, #0
 800c520:	bf0c      	ite	eq
 800c522:	2301      	moveq	r3, #1
 800c524:	2300      	movne	r3, #0
 800c526:	b2db      	uxtb	r3, r3
 800c528:	f107 0012 	add.w	r0, r7, #18
 800c52c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c52e:	9302      	str	r3, [sp, #8]
 800c530:	797b      	ldrb	r3, [r7, #5]
 800c532:	9301      	str	r3, [sp, #4]
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	9300      	str	r3, [sp, #0]
 800c538:	4603      	mov	r3, r0
 800c53a:	2036      	movs	r0, #54	@ 0x36
 800c53c:	f7ff fd5e 	bl	800bffc <tcp_pbuf_prealloc>
 800c540:	6338      	str	r0, [r7, #48]	@ 0x30
 800c542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c544:	2b00      	cmp	r3, #0
 800c546:	f000 8178 	beq.w	800c83a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800c54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c54c:	895b      	ldrh	r3, [r3, #10]
 800c54e:	8b3a      	ldrh	r2, [r7, #24]
 800c550:	429a      	cmp	r2, r3
 800c552:	d906      	bls.n	800c562 <tcp_write+0x37e>
 800c554:	4b8c      	ldr	r3, [pc, #560]	@ (800c788 <tcp_write+0x5a4>)
 800c556:	f240 2266 	movw	r2, #614	@ 0x266
 800c55a:	498c      	ldr	r1, [pc, #560]	@ (800c78c <tcp_write+0x5a8>)
 800c55c:	488c      	ldr	r0, [pc, #560]	@ (800c790 <tcp_write+0x5ac>)
 800c55e:	f005 fe03 	bl	8012168 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800c562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c564:	685a      	ldr	r2, [r3, #4]
 800c566:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c56a:	18d0      	adds	r0, r2, r3
 800c56c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c570:	68ba      	ldr	r2, [r7, #8]
 800c572:	4413      	add	r3, r2
 800c574:	8b3a      	ldrh	r2, [r7, #24]
 800c576:	4619      	mov	r1, r3
 800c578:	f005 ff45 	bl	8012406 <memcpy>
 800c57c:	e02f      	b.n	800c5de <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800c57e:	8a7b      	ldrh	r3, [r7, #18]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d006      	beq.n	800c592 <tcp_write+0x3ae>
 800c584:	4b80      	ldr	r3, [pc, #512]	@ (800c788 <tcp_write+0x5a4>)
 800c586:	f240 2271 	movw	r2, #625	@ 0x271
 800c58a:	4982      	ldr	r1, [pc, #520]	@ (800c794 <tcp_write+0x5b0>)
 800c58c:	4880      	ldr	r0, [pc, #512]	@ (800c790 <tcp_write+0x5ac>)
 800c58e:	f005 fdeb 	bl	8012168 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800c592:	8b3b      	ldrh	r3, [r7, #24]
 800c594:	2201      	movs	r2, #1
 800c596:	4619      	mov	r1, r3
 800c598:	2036      	movs	r0, #54	@ 0x36
 800c59a:	f7fa fe65 	bl	8007268 <pbuf_alloc>
 800c59e:	6178      	str	r0, [r7, #20]
 800c5a0:	697b      	ldr	r3, [r7, #20]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	f000 814b 	beq.w	800c83e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800c5a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c5ac:	68ba      	ldr	r2, [r7, #8]
 800c5ae:	441a      	add	r2, r3
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c5b4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c5b8:	b29b      	uxth	r3, r3
 800c5ba:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c5be:	4619      	mov	r1, r3
 800c5c0:	2036      	movs	r0, #54	@ 0x36
 800c5c2:	f7fa fe51 	bl	8007268 <pbuf_alloc>
 800c5c6:	6338      	str	r0, [r7, #48]	@ 0x30
 800c5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d103      	bne.n	800c5d6 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800c5ce:	6978      	ldr	r0, [r7, #20]
 800c5d0:	f7fb f92e 	bl	8007830 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800c5d4:	e136      	b.n	800c844 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800c5d6:	6979      	ldr	r1, [r7, #20]
 800c5d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5da:	f7fb f9eb 	bl	80079b4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800c5de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5e0:	f7fb f9ae 	bl	8007940 <pbuf_clen>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c5ec:	4413      	add	r3, r2
 800c5ee:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800c5f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c5f6:	2b09      	cmp	r3, #9
 800c5f8:	d903      	bls.n	800c602 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800c5fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5fc:	f7fb f918 	bl	8007830 <pbuf_free>
      goto memerr;
 800c600:	e120      	b.n	800c844 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c606:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c60a:	441a      	add	r2, r3
 800c60c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c610:	9300      	str	r3, [sp, #0]
 800c612:	4613      	mov	r3, r2
 800c614:	2200      	movs	r2, #0
 800c616:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c618:	68f8      	ldr	r0, [r7, #12]
 800c61a:	f7ff fc53 	bl	800bec4 <tcp_create_segment>
 800c61e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800c620:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c622:	2b00      	cmp	r3, #0
 800c624:	f000 810d 	beq.w	800c842 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800c628:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d102      	bne.n	800c634 <tcp_write+0x450>
      queue = seg;
 800c62e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c630:	647b      	str	r3, [r7, #68]	@ 0x44
 800c632:	e00c      	b.n	800c64e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800c634:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c636:	2b00      	cmp	r3, #0
 800c638:	d106      	bne.n	800c648 <tcp_write+0x464>
 800c63a:	4b53      	ldr	r3, [pc, #332]	@ (800c788 <tcp_write+0x5a4>)
 800c63c:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800c640:	4955      	ldr	r1, [pc, #340]	@ (800c798 <tcp_write+0x5b4>)
 800c642:	4853      	ldr	r0, [pc, #332]	@ (800c790 <tcp_write+0x5ac>)
 800c644:	f005 fd90 	bl	8012168 <iprintf>
      prev_seg->next = seg;
 800c648:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c64a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c64c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800c64e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c650:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800c652:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c656:	8b3b      	ldrh	r3, [r7, #24]
 800c658:	4413      	add	r3, r2
 800c65a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 800c65e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c662:	88fb      	ldrh	r3, [r7, #6]
 800c664:	429a      	cmp	r2, r3
 800c666:	f4ff af3d 	bcc.w	800c4e4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800c66a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d02c      	beq.n	800c6ca <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800c670:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c676:	e01e      	b.n	800c6b6 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800c678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c67a:	891a      	ldrh	r2, [r3, #8]
 800c67c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c67e:	4413      	add	r3, r2
 800c680:	b29a      	uxth	r2, r3
 800c682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c684:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800c686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d110      	bne.n	800c6b0 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800c68e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c694:	8952      	ldrh	r2, [r2, #10]
 800c696:	4413      	add	r3, r2
 800c698:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800c69a:	68b9      	ldr	r1, [r7, #8]
 800c69c:	4618      	mov	r0, r3
 800c69e:	f005 feb2 	bl	8012406 <memcpy>
        p->len += oversize_used;
 800c6a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6a4:	895a      	ldrh	r2, [r3, #10]
 800c6a6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c6a8:	4413      	add	r3, r2
 800c6aa:	b29a      	uxth	r2, r3
 800c6ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6ae:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800c6b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c6b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d1dd      	bne.n	800c678 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800c6bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6be:	891a      	ldrh	r2, [r3, #8]
 800c6c0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c6c2:	4413      	add	r3, r2
 800c6c4:	b29a      	uxth	r2, r3
 800c6c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6c8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800c6ca:	8a7a      	ldrh	r2, [r7, #18]
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800c6d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d018      	beq.n	800c70a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800c6d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d106      	bne.n	800c6ec <tcp_write+0x508>
 800c6de:	4b2a      	ldr	r3, [pc, #168]	@ (800c788 <tcp_write+0x5a4>)
 800c6e0:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800c6e4:	492d      	ldr	r1, [pc, #180]	@ (800c79c <tcp_write+0x5b8>)
 800c6e6:	482a      	ldr	r0, [pc, #168]	@ (800c790 <tcp_write+0x5ac>)
 800c6e8:	f005 fd3e 	bl	8012168 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800c6ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7fb f95e 	bl	80079b4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800c6f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6fa:	891a      	ldrh	r2, [r3, #8]
 800c6fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6fe:	891b      	ldrh	r3, [r3, #8]
 800c700:	4413      	add	r3, r2
 800c702:	b29a      	uxth	r2, r3
 800c704:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c706:	811a      	strh	r2, [r3, #8]
 800c708:	e037      	b.n	800c77a <tcp_write+0x596>
  } else if (extendlen > 0) {
 800c70a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d034      	beq.n	800c77a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800c710:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c712:	2b00      	cmp	r3, #0
 800c714:	d003      	beq.n	800c71e <tcp_write+0x53a>
 800c716:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d106      	bne.n	800c72c <tcp_write+0x548>
 800c71e:	4b1a      	ldr	r3, [pc, #104]	@ (800c788 <tcp_write+0x5a4>)
 800c720:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800c724:	491e      	ldr	r1, [pc, #120]	@ (800c7a0 <tcp_write+0x5bc>)
 800c726:	481a      	ldr	r0, [pc, #104]	@ (800c790 <tcp_write+0x5ac>)
 800c728:	f005 fd1e 	bl	8012168 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c72c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c732:	e009      	b.n	800c748 <tcp_write+0x564>
      p->tot_len += extendlen;
 800c734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c736:	891a      	ldrh	r2, [r3, #8]
 800c738:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c73a:	4413      	add	r3, r2
 800c73c:	b29a      	uxth	r2, r3
 800c73e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c740:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d1f1      	bne.n	800c734 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800c750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c752:	891a      	ldrh	r2, [r3, #8]
 800c754:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c756:	4413      	add	r3, r2
 800c758:	b29a      	uxth	r2, r3
 800c75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c75c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800c75e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c760:	895a      	ldrh	r2, [r3, #10]
 800c762:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c764:	4413      	add	r3, r2
 800c766:	b29a      	uxth	r2, r3
 800c768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c76a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800c76c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c76e:	891a      	ldrh	r2, [r3, #8]
 800c770:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c772:	4413      	add	r3, r2
 800c774:	b29a      	uxth	r2, r3
 800c776:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c778:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800c77a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d111      	bne.n	800c7a4 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c784:	66da      	str	r2, [r3, #108]	@ 0x6c
 800c786:	e010      	b.n	800c7aa <tcp_write+0x5c6>
 800c788:	08014aa0 	.word	0x08014aa0
 800c78c:	08014d40 	.word	0x08014d40
 800c790:	08014af4 	.word	0x08014af4
 800c794:	08014d80 	.word	0x08014d80
 800c798:	08014d90 	.word	0x08014d90
 800c79c:	08014da4 	.word	0x08014da4
 800c7a0:	08014ddc 	.word	0x08014ddc
  } else {
    last_unsent->next = queue;
 800c7a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c7a8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c7ae:	88fb      	ldrh	r3, [r7, #6]
 800c7b0:	441a      	add	r2, r3
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800c7bc:	88fb      	ldrh	r3, [r7, #6]
 800c7be:	1ad3      	subs	r3, r2, r3
 800c7c0:	b29a      	uxth	r2, r3
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800c7ce:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d00e      	beq.n	800c7fa <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d10a      	bne.n	800c7fa <tcp_write+0x616>
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d106      	bne.n	800c7fa <tcp_write+0x616>
 800c7ec:	4b2c      	ldr	r3, [pc, #176]	@ (800c8a0 <tcp_write+0x6bc>)
 800c7ee:	f240 3212 	movw	r2, #786	@ 0x312
 800c7f2:	492c      	ldr	r1, [pc, #176]	@ (800c8a4 <tcp_write+0x6c0>)
 800c7f4:	482c      	ldr	r0, [pc, #176]	@ (800c8a8 <tcp_write+0x6c4>)
 800c7f6:	f005 fcb7 	bl	8012168 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800c7fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d016      	beq.n	800c82e <tcp_write+0x64a>
 800c800:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c802:	68db      	ldr	r3, [r3, #12]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d012      	beq.n	800c82e <tcp_write+0x64a>
 800c808:	797b      	ldrb	r3, [r7, #5]
 800c80a:	f003 0302 	and.w	r3, r3, #2
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d10d      	bne.n	800c82e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800c812:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c814:	68db      	ldr	r3, [r3, #12]
 800c816:	899b      	ldrh	r3, [r3, #12]
 800c818:	b29c      	uxth	r4, r3
 800c81a:	2008      	movs	r0, #8
 800c81c:	f7f9 fcaa 	bl	8006174 <lwip_htons>
 800c820:	4603      	mov	r3, r0
 800c822:	461a      	mov	r2, r3
 800c824:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c826:	68db      	ldr	r3, [r3, #12]
 800c828:	4322      	orrs	r2, r4
 800c82a:	b292      	uxth	r2, r2
 800c82c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800c82e:	2300      	movs	r3, #0
 800c830:	e031      	b.n	800c896 <tcp_write+0x6b2>
          goto memerr;
 800c832:	bf00      	nop
 800c834:	e006      	b.n	800c844 <tcp_write+0x660>
            goto memerr;
 800c836:	bf00      	nop
 800c838:	e004      	b.n	800c844 <tcp_write+0x660>
        goto memerr;
 800c83a:	bf00      	nop
 800c83c:	e002      	b.n	800c844 <tcp_write+0x660>
        goto memerr;
 800c83e:	bf00      	nop
 800c840:	e000      	b.n	800c844 <tcp_write+0x660>
      goto memerr;
 800c842:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	8b5b      	ldrh	r3, [r3, #26]
 800c848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c84c:	b29a      	uxth	r2, r3
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800c852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c854:	2b00      	cmp	r3, #0
 800c856:	d002      	beq.n	800c85e <tcp_write+0x67a>
    pbuf_free(concat_p);
 800c858:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c85a:	f7fa ffe9 	bl	8007830 <pbuf_free>
  }
  if (queue != NULL) {
 800c85e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c860:	2b00      	cmp	r3, #0
 800c862:	d002      	beq.n	800c86a <tcp_write+0x686>
    tcp_segs_free(queue);
 800c864:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c866:	f7fc fbfd 	bl	8009064 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c870:	2b00      	cmp	r3, #0
 800c872:	d00e      	beq.n	800c892 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d10a      	bne.n	800c892 <tcp_write+0x6ae>
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c880:	2b00      	cmp	r3, #0
 800c882:	d106      	bne.n	800c892 <tcp_write+0x6ae>
 800c884:	4b06      	ldr	r3, [pc, #24]	@ (800c8a0 <tcp_write+0x6bc>)
 800c886:	f240 3227 	movw	r2, #807	@ 0x327
 800c88a:	4906      	ldr	r1, [pc, #24]	@ (800c8a4 <tcp_write+0x6c0>)
 800c88c:	4806      	ldr	r0, [pc, #24]	@ (800c8a8 <tcp_write+0x6c4>)
 800c88e:	f005 fc6b 	bl	8012168 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800c892:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c896:	4618      	mov	r0, r3
 800c898:	375c      	adds	r7, #92	@ 0x5c
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd90      	pop	{r4, r7, pc}
 800c89e:	bf00      	nop
 800c8a0:	08014aa0 	.word	0x08014aa0
 800c8a4:	08014e14 	.word	0x08014e14
 800c8a8:	08014af4 	.word	0x08014af4

0800c8ac <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800c8ac:	b590      	push	{r4, r7, lr}
 800c8ae:	b08b      	sub	sp, #44	@ 0x2c
 800c8b0:	af02      	add	r7, sp, #8
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	460b      	mov	r3, r1
 800c8b6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	61fb      	str	r3, [r7, #28]
 800c8bc:	2300      	movs	r3, #0
 800c8be:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d106      	bne.n	800c8d8 <tcp_split_unsent_seg+0x2c>
 800c8ca:	4b95      	ldr	r3, [pc, #596]	@ (800cb20 <tcp_split_unsent_seg+0x274>)
 800c8cc:	f240 324b 	movw	r2, #843	@ 0x34b
 800c8d0:	4994      	ldr	r1, [pc, #592]	@ (800cb24 <tcp_split_unsent_seg+0x278>)
 800c8d2:	4895      	ldr	r0, [pc, #596]	@ (800cb28 <tcp_split_unsent_seg+0x27c>)
 800c8d4:	f005 fc48 	bl	8012168 <iprintf>

  useg = pcb->unsent;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8dc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d102      	bne.n	800c8ea <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800c8e4:	f04f 33ff 	mov.w	r3, #4294967295
 800c8e8:	e116      	b.n	800cb18 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800c8ea:	887b      	ldrh	r3, [r7, #2]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d109      	bne.n	800c904 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c8f0:	4b8b      	ldr	r3, [pc, #556]	@ (800cb20 <tcp_split_unsent_seg+0x274>)
 800c8f2:	f240 3253 	movw	r2, #851	@ 0x353
 800c8f6:	498d      	ldr	r1, [pc, #564]	@ (800cb2c <tcp_split_unsent_seg+0x280>)
 800c8f8:	488b      	ldr	r0, [pc, #556]	@ (800cb28 <tcp_split_unsent_seg+0x27c>)
 800c8fa:	f005 fc35 	bl	8012168 <iprintf>
    return ERR_VAL;
 800c8fe:	f06f 0305 	mvn.w	r3, #5
 800c902:	e109      	b.n	800cb18 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	891b      	ldrh	r3, [r3, #8]
 800c908:	887a      	ldrh	r2, [r7, #2]
 800c90a:	429a      	cmp	r2, r3
 800c90c:	d301      	bcc.n	800c912 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800c90e:	2300      	movs	r3, #0
 800c910:	e102      	b.n	800cb18 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c916:	887a      	ldrh	r2, [r7, #2]
 800c918:	429a      	cmp	r2, r3
 800c91a:	d906      	bls.n	800c92a <tcp_split_unsent_seg+0x7e>
 800c91c:	4b80      	ldr	r3, [pc, #512]	@ (800cb20 <tcp_split_unsent_seg+0x274>)
 800c91e:	f240 325b 	movw	r2, #859	@ 0x35b
 800c922:	4983      	ldr	r1, [pc, #524]	@ (800cb30 <tcp_split_unsent_seg+0x284>)
 800c924:	4880      	ldr	r0, [pc, #512]	@ (800cb28 <tcp_split_unsent_seg+0x27c>)
 800c926:	f005 fc1f 	bl	8012168 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	891b      	ldrh	r3, [r3, #8]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d106      	bne.n	800c940 <tcp_split_unsent_seg+0x94>
 800c932:	4b7b      	ldr	r3, [pc, #492]	@ (800cb20 <tcp_split_unsent_seg+0x274>)
 800c934:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800c938:	497e      	ldr	r1, [pc, #504]	@ (800cb34 <tcp_split_unsent_seg+0x288>)
 800c93a:	487b      	ldr	r0, [pc, #492]	@ (800cb28 <tcp_split_unsent_seg+0x27c>)
 800c93c:	f005 fc14 	bl	8012168 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	7a9b      	ldrb	r3, [r3, #10]
 800c944:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c946:	7bfb      	ldrb	r3, [r7, #15]
 800c948:	009b      	lsls	r3, r3, #2
 800c94a:	b2db      	uxtb	r3, r3
 800c94c:	f003 0304 	and.w	r3, r3, #4
 800c950:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	891a      	ldrh	r2, [r3, #8]
 800c956:	887b      	ldrh	r3, [r7, #2]
 800c958:	1ad3      	subs	r3, r2, r3
 800c95a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c95c:	7bbb      	ldrb	r3, [r7, #14]
 800c95e:	b29a      	uxth	r2, r3
 800c960:	89bb      	ldrh	r3, [r7, #12]
 800c962:	4413      	add	r3, r2
 800c964:	b29b      	uxth	r3, r3
 800c966:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c96a:	4619      	mov	r1, r3
 800c96c:	2036      	movs	r0, #54	@ 0x36
 800c96e:	f7fa fc7b 	bl	8007268 <pbuf_alloc>
 800c972:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	2b00      	cmp	r3, #0
 800c978:	f000 80b7 	beq.w	800caea <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	685b      	ldr	r3, [r3, #4]
 800c980:	891a      	ldrh	r2, [r3, #8]
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	891b      	ldrh	r3, [r3, #8]
 800c986:	1ad3      	subs	r3, r2, r3
 800c988:	b29a      	uxth	r2, r3
 800c98a:	887b      	ldrh	r3, [r7, #2]
 800c98c:	4413      	add	r3, r2
 800c98e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	6858      	ldr	r0, [r3, #4]
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	685a      	ldr	r2, [r3, #4]
 800c998:	7bbb      	ldrb	r3, [r7, #14]
 800c99a:	18d1      	adds	r1, r2, r3
 800c99c:	897b      	ldrh	r3, [r7, #10]
 800c99e:	89ba      	ldrh	r2, [r7, #12]
 800c9a0:	f7fb f930 	bl	8007c04 <pbuf_copy_partial>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	461a      	mov	r2, r3
 800c9a8:	89bb      	ldrh	r3, [r7, #12]
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	f040 809f 	bne.w	800caee <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	68db      	ldr	r3, [r3, #12]
 800c9b4:	899b      	ldrh	r3, [r3, #12]
 800c9b6:	b29b      	uxth	r3, r3
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f7f9 fbdb 	bl	8006174 <lwip_htons>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	b2db      	uxtb	r3, r3
 800c9c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c9c6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800c9cc:	7efb      	ldrb	r3, [r7, #27]
 800c9ce:	f003 0308 	and.w	r3, r3, #8
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d007      	beq.n	800c9e6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800c9d6:	7efb      	ldrb	r3, [r7, #27]
 800c9d8:	f023 0308 	bic.w	r3, r3, #8
 800c9dc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800c9de:	7ebb      	ldrb	r3, [r7, #26]
 800c9e0:	f043 0308 	orr.w	r3, r3, #8
 800c9e4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800c9e6:	7efb      	ldrb	r3, [r7, #27]
 800c9e8:	f003 0301 	and.w	r3, r3, #1
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d007      	beq.n	800ca00 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800c9f0:	7efb      	ldrb	r3, [r7, #27]
 800c9f2:	f023 0301 	bic.w	r3, r3, #1
 800c9f6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800c9f8:	7ebb      	ldrb	r3, [r7, #26]
 800c9fa:	f043 0301 	orr.w	r3, r3, #1
 800c9fe:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	68db      	ldr	r3, [r3, #12]
 800ca04:	685b      	ldr	r3, [r3, #4]
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7f9 fbca 	bl	80061a0 <lwip_htonl>
 800ca0c:	4602      	mov	r2, r0
 800ca0e:	887b      	ldrh	r3, [r7, #2]
 800ca10:	18d1      	adds	r1, r2, r3
 800ca12:	7eba      	ldrb	r2, [r7, #26]
 800ca14:	7bfb      	ldrb	r3, [r7, #15]
 800ca16:	9300      	str	r3, [sp, #0]
 800ca18:	460b      	mov	r3, r1
 800ca1a:	6939      	ldr	r1, [r7, #16]
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f7ff fa51 	bl	800bec4 <tcp_create_segment>
 800ca22:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ca24:	69fb      	ldr	r3, [r7, #28]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d063      	beq.n	800caf2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	685b      	ldr	r3, [r3, #4]
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7fa ff86 	bl	8007940 <pbuf_clen>
 800ca34:	4603      	mov	r3, r0
 800ca36:	461a      	mov	r2, r3
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ca3e:	1a9b      	subs	r3, r3, r2
 800ca40:	b29a      	uxth	r2, r3
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	6858      	ldr	r0, [r3, #4]
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	891a      	ldrh	r2, [r3, #8]
 800ca52:	89bb      	ldrh	r3, [r7, #12]
 800ca54:	1ad3      	subs	r3, r2, r3
 800ca56:	b29b      	uxth	r3, r3
 800ca58:	4619      	mov	r1, r3
 800ca5a:	f7fa fd63 	bl	8007524 <pbuf_realloc>
  useg->len -= remainder;
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	891a      	ldrh	r2, [r3, #8]
 800ca62:	89bb      	ldrh	r3, [r7, #12]
 800ca64:	1ad3      	subs	r3, r2, r3
 800ca66:	b29a      	uxth	r2, r3
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	68db      	ldr	r3, [r3, #12]
 800ca70:	899b      	ldrh	r3, [r3, #12]
 800ca72:	b29c      	uxth	r4, r3
 800ca74:	7efb      	ldrb	r3, [r7, #27]
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f7f9 fb7b 	bl	8006174 <lwip_htons>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	461a      	mov	r2, r3
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	68db      	ldr	r3, [r3, #12]
 800ca86:	4322      	orrs	r2, r4
 800ca88:	b292      	uxth	r2, r2
 800ca8a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	4618      	mov	r0, r3
 800ca92:	f7fa ff55 	bl	8007940 <pbuf_clen>
 800ca96:	4603      	mov	r3, r0
 800ca98:	461a      	mov	r2, r3
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800caa0:	4413      	add	r3, r2
 800caa2:	b29a      	uxth	r2, r3
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800caaa:	69fb      	ldr	r3, [r7, #28]
 800caac:	685b      	ldr	r3, [r3, #4]
 800caae:	4618      	mov	r0, r3
 800cab0:	f7fa ff46 	bl	8007940 <pbuf_clen>
 800cab4:	4603      	mov	r3, r0
 800cab6:	461a      	mov	r2, r3
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cabe:	4413      	add	r3, r2
 800cac0:	b29a      	uxth	r2, r3
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	681a      	ldr	r2, [r3, #0]
 800cacc:	69fb      	ldr	r3, [r7, #28]
 800cace:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	69fa      	ldr	r2, [r7, #28]
 800cad4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800cad6:	69fb      	ldr	r3, [r7, #28]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d103      	bne.n	800cae6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2200      	movs	r2, #0
 800cae2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800cae6:	2300      	movs	r3, #0
 800cae8:	e016      	b.n	800cb18 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800caea:	bf00      	nop
 800caec:	e002      	b.n	800caf4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800caee:	bf00      	nop
 800caf0:	e000      	b.n	800caf4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800caf2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800caf4:	69fb      	ldr	r3, [r7, #28]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d006      	beq.n	800cb08 <tcp_split_unsent_seg+0x25c>
 800cafa:	4b09      	ldr	r3, [pc, #36]	@ (800cb20 <tcp_split_unsent_seg+0x274>)
 800cafc:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800cb00:	490d      	ldr	r1, [pc, #52]	@ (800cb38 <tcp_split_unsent_seg+0x28c>)
 800cb02:	4809      	ldr	r0, [pc, #36]	@ (800cb28 <tcp_split_unsent_seg+0x27c>)
 800cb04:	f005 fb30 	bl	8012168 <iprintf>
  if (p != NULL) {
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d002      	beq.n	800cb14 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800cb0e:	6938      	ldr	r0, [r7, #16]
 800cb10:	f7fa fe8e 	bl	8007830 <pbuf_free>
  }

  return ERR_MEM;
 800cb14:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3724      	adds	r7, #36	@ 0x24
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd90      	pop	{r4, r7, pc}
 800cb20:	08014aa0 	.word	0x08014aa0
 800cb24:	08014e34 	.word	0x08014e34
 800cb28:	08014af4 	.word	0x08014af4
 800cb2c:	08014e58 	.word	0x08014e58
 800cb30:	08014e7c 	.word	0x08014e7c
 800cb34:	08014e8c 	.word	0x08014e8c
 800cb38:	08014e9c 	.word	0x08014e9c

0800cb3c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800cb3c:	b590      	push	{r4, r7, lr}
 800cb3e:	b085      	sub	sp, #20
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d106      	bne.n	800cb58 <tcp_send_fin+0x1c>
 800cb4a:	4b21      	ldr	r3, [pc, #132]	@ (800cbd0 <tcp_send_fin+0x94>)
 800cb4c:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800cb50:	4920      	ldr	r1, [pc, #128]	@ (800cbd4 <tcp_send_fin+0x98>)
 800cb52:	4821      	ldr	r0, [pc, #132]	@ (800cbd8 <tcp_send_fin+0x9c>)
 800cb54:	f005 fb08 	bl	8012168 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d02e      	beq.n	800cbbe <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb64:	60fb      	str	r3, [r7, #12]
 800cb66:	e002      	b.n	800cb6e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d1f8      	bne.n	800cb68 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	68db      	ldr	r3, [r3, #12]
 800cb7a:	899b      	ldrh	r3, [r3, #12]
 800cb7c:	b29b      	uxth	r3, r3
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7f9 faf8 	bl	8006174 <lwip_htons>
 800cb84:	4603      	mov	r3, r0
 800cb86:	b2db      	uxtb	r3, r3
 800cb88:	f003 0307 	and.w	r3, r3, #7
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d116      	bne.n	800cbbe <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	68db      	ldr	r3, [r3, #12]
 800cb94:	899b      	ldrh	r3, [r3, #12]
 800cb96:	b29c      	uxth	r4, r3
 800cb98:	2001      	movs	r0, #1
 800cb9a:	f7f9 faeb 	bl	8006174 <lwip_htons>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	461a      	mov	r2, r3
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	68db      	ldr	r3, [r3, #12]
 800cba6:	4322      	orrs	r2, r4
 800cba8:	b292      	uxth	r2, r2
 800cbaa:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	8b5b      	ldrh	r3, [r3, #26]
 800cbb0:	f043 0320 	orr.w	r3, r3, #32
 800cbb4:	b29a      	uxth	r2, r3
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	e004      	b.n	800cbc8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800cbbe:	2101      	movs	r1, #1
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f000 f80b 	bl	800cbdc <tcp_enqueue_flags>
 800cbc6:	4603      	mov	r3, r0
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3714      	adds	r7, #20
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd90      	pop	{r4, r7, pc}
 800cbd0:	08014aa0 	.word	0x08014aa0
 800cbd4:	08014ea8 	.word	0x08014ea8
 800cbd8:	08014af4 	.word	0x08014af4

0800cbdc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b08a      	sub	sp, #40	@ 0x28
 800cbe0:	af02      	add	r7, sp, #8
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	460b      	mov	r3, r1
 800cbe6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800cbec:	2300      	movs	r3, #0
 800cbee:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800cbf0:	78fb      	ldrb	r3, [r7, #3]
 800cbf2:	f003 0303 	and.w	r3, r3, #3
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d106      	bne.n	800cc08 <tcp_enqueue_flags+0x2c>
 800cbfa:	4b67      	ldr	r3, [pc, #412]	@ (800cd98 <tcp_enqueue_flags+0x1bc>)
 800cbfc:	f240 4211 	movw	r2, #1041	@ 0x411
 800cc00:	4966      	ldr	r1, [pc, #408]	@ (800cd9c <tcp_enqueue_flags+0x1c0>)
 800cc02:	4867      	ldr	r0, [pc, #412]	@ (800cda0 <tcp_enqueue_flags+0x1c4>)
 800cc04:	f005 fab0 	bl	8012168 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d106      	bne.n	800cc1c <tcp_enqueue_flags+0x40>
 800cc0e:	4b62      	ldr	r3, [pc, #392]	@ (800cd98 <tcp_enqueue_flags+0x1bc>)
 800cc10:	f240 4213 	movw	r2, #1043	@ 0x413
 800cc14:	4963      	ldr	r1, [pc, #396]	@ (800cda4 <tcp_enqueue_flags+0x1c8>)
 800cc16:	4862      	ldr	r0, [pc, #392]	@ (800cda0 <tcp_enqueue_flags+0x1c4>)
 800cc18:	f005 faa6 	bl	8012168 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800cc1c:	78fb      	ldrb	r3, [r7, #3]
 800cc1e:	f003 0302 	and.w	r3, r3, #2
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d001      	beq.n	800cc2a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800cc26:	2301      	movs	r3, #1
 800cc28:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cc2a:	7ffb      	ldrb	r3, [r7, #31]
 800cc2c:	009b      	lsls	r3, r3, #2
 800cc2e:	b2db      	uxtb	r3, r3
 800cc30:	f003 0304 	and.w	r3, r3, #4
 800cc34:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cc36:	7dfb      	ldrb	r3, [r7, #23]
 800cc38:	b29b      	uxth	r3, r3
 800cc3a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cc3e:	4619      	mov	r1, r3
 800cc40:	2036      	movs	r0, #54	@ 0x36
 800cc42:	f7fa fb11 	bl	8007268 <pbuf_alloc>
 800cc46:	6138      	str	r0, [r7, #16]
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d109      	bne.n	800cc62 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	8b5b      	ldrh	r3, [r3, #26]
 800cc52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc56:	b29a      	uxth	r2, r3
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cc5c:	f04f 33ff 	mov.w	r3, #4294967295
 800cc60:	e095      	b.n	800cd8e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	895a      	ldrh	r2, [r3, #10]
 800cc66:	7dfb      	ldrb	r3, [r7, #23]
 800cc68:	b29b      	uxth	r3, r3
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d206      	bcs.n	800cc7c <tcp_enqueue_flags+0xa0>
 800cc6e:	4b4a      	ldr	r3, [pc, #296]	@ (800cd98 <tcp_enqueue_flags+0x1bc>)
 800cc70:	f240 4239 	movw	r2, #1081	@ 0x439
 800cc74:	494c      	ldr	r1, [pc, #304]	@ (800cda8 <tcp_enqueue_flags+0x1cc>)
 800cc76:	484a      	ldr	r0, [pc, #296]	@ (800cda0 <tcp_enqueue_flags+0x1c4>)
 800cc78:	f005 fa76 	bl	8012168 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800cc80:	78fa      	ldrb	r2, [r7, #3]
 800cc82:	7ffb      	ldrb	r3, [r7, #31]
 800cc84:	9300      	str	r3, [sp, #0]
 800cc86:	460b      	mov	r3, r1
 800cc88:	6939      	ldr	r1, [r7, #16]
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f7ff f91a 	bl	800bec4 <tcp_create_segment>
 800cc90:	60f8      	str	r0, [r7, #12]
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d109      	bne.n	800ccac <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	8b5b      	ldrh	r3, [r3, #26]
 800cc9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cca0:	b29a      	uxth	r2, r3
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cca6:	f04f 33ff 	mov.w	r3, #4294967295
 800ccaa:	e070      	b.n	800cd8e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	68db      	ldr	r3, [r3, #12]
 800ccb0:	f003 0303 	and.w	r3, r3, #3
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d006      	beq.n	800ccc6 <tcp_enqueue_flags+0xea>
 800ccb8:	4b37      	ldr	r3, [pc, #220]	@ (800cd98 <tcp_enqueue_flags+0x1bc>)
 800ccba:	f240 4242 	movw	r2, #1090	@ 0x442
 800ccbe:	493b      	ldr	r1, [pc, #236]	@ (800cdac <tcp_enqueue_flags+0x1d0>)
 800ccc0:	4837      	ldr	r0, [pc, #220]	@ (800cda0 <tcp_enqueue_flags+0x1c4>)
 800ccc2:	f005 fa51 	bl	8012168 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	891b      	ldrh	r3, [r3, #8]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d006      	beq.n	800ccdc <tcp_enqueue_flags+0x100>
 800ccce:	4b32      	ldr	r3, [pc, #200]	@ (800cd98 <tcp_enqueue_flags+0x1bc>)
 800ccd0:	f240 4243 	movw	r2, #1091	@ 0x443
 800ccd4:	4936      	ldr	r1, [pc, #216]	@ (800cdb0 <tcp_enqueue_flags+0x1d4>)
 800ccd6:	4832      	ldr	r0, [pc, #200]	@ (800cda0 <tcp_enqueue_flags+0x1c4>)
 800ccd8:	f005 fa46 	bl	8012168 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d103      	bne.n	800ccec <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	68fa      	ldr	r2, [r7, #12]
 800cce8:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ccea:	e00d      	b.n	800cd08 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ccf0:	61bb      	str	r3, [r7, #24]
 800ccf2:	e002      	b.n	800ccfa <tcp_enqueue_flags+0x11e>
 800ccf4:	69bb      	ldr	r3, [r7, #24]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	61bb      	str	r3, [r7, #24]
 800ccfa:	69bb      	ldr	r3, [r7, #24]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d1f8      	bne.n	800ccf4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800cd02:	69bb      	ldr	r3, [r7, #24]
 800cd04:	68fa      	ldr	r2, [r7, #12]
 800cd06:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800cd10:	78fb      	ldrb	r3, [r7, #3]
 800cd12:	f003 0302 	and.w	r3, r3, #2
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d104      	bne.n	800cd24 <tcp_enqueue_flags+0x148>
 800cd1a:	78fb      	ldrb	r3, [r7, #3]
 800cd1c:	f003 0301 	and.w	r3, r3, #1
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d004      	beq.n	800cd2e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd28:	1c5a      	adds	r2, r3, #1
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800cd2e:	78fb      	ldrb	r3, [r7, #3]
 800cd30:	f003 0301 	and.w	r3, r3, #1
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d006      	beq.n	800cd46 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	8b5b      	ldrh	r3, [r3, #26]
 800cd3c:	f043 0320 	orr.w	r3, r3, #32
 800cd40:	b29a      	uxth	r2, r3
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f7fa fdf8 	bl	8007940 <pbuf_clen>
 800cd50:	4603      	mov	r3, r0
 800cd52:	461a      	mov	r2, r3
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cd5a:	4413      	add	r3, r2
 800cd5c:	b29a      	uxth	r2, r3
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d00e      	beq.n	800cd8c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d10a      	bne.n	800cd8c <tcp_enqueue_flags+0x1b0>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d106      	bne.n	800cd8c <tcp_enqueue_flags+0x1b0>
 800cd7e:	4b06      	ldr	r3, [pc, #24]	@ (800cd98 <tcp_enqueue_flags+0x1bc>)
 800cd80:	f240 4265 	movw	r2, #1125	@ 0x465
 800cd84:	490b      	ldr	r1, [pc, #44]	@ (800cdb4 <tcp_enqueue_flags+0x1d8>)
 800cd86:	4806      	ldr	r0, [pc, #24]	@ (800cda0 <tcp_enqueue_flags+0x1c4>)
 800cd88:	f005 f9ee 	bl	8012168 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800cd8c:	2300      	movs	r3, #0
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3720      	adds	r7, #32
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
 800cd96:	bf00      	nop
 800cd98:	08014aa0 	.word	0x08014aa0
 800cd9c:	08014ec4 	.word	0x08014ec4
 800cda0:	08014af4 	.word	0x08014af4
 800cda4:	08014f1c 	.word	0x08014f1c
 800cda8:	08014f3c 	.word	0x08014f3c
 800cdac:	08014f78 	.word	0x08014f78
 800cdb0:	08014f90 	.word	0x08014f90
 800cdb4:	08014fbc 	.word	0x08014fbc

0800cdb8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800cdb8:	b5b0      	push	{r4, r5, r7, lr}
 800cdba:	b08a      	sub	sp, #40	@ 0x28
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d106      	bne.n	800cdd4 <tcp_output+0x1c>
 800cdc6:	4b8a      	ldr	r3, [pc, #552]	@ (800cff0 <tcp_output+0x238>)
 800cdc8:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800cdcc:	4989      	ldr	r1, [pc, #548]	@ (800cff4 <tcp_output+0x23c>)
 800cdce:	488a      	ldr	r0, [pc, #552]	@ (800cff8 <tcp_output+0x240>)
 800cdd0:	f005 f9ca 	bl	8012168 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	7d1b      	ldrb	r3, [r3, #20]
 800cdd8:	2b01      	cmp	r3, #1
 800cdda:	d106      	bne.n	800cdea <tcp_output+0x32>
 800cddc:	4b84      	ldr	r3, [pc, #528]	@ (800cff0 <tcp_output+0x238>)
 800cdde:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800cde2:	4986      	ldr	r1, [pc, #536]	@ (800cffc <tcp_output+0x244>)
 800cde4:	4884      	ldr	r0, [pc, #528]	@ (800cff8 <tcp_output+0x240>)
 800cde6:	f005 f9bf 	bl	8012168 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800cdea:	4b85      	ldr	r3, [pc, #532]	@ (800d000 <tcp_output+0x248>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	687a      	ldr	r2, [r7, #4]
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d101      	bne.n	800cdf8 <tcp_output+0x40>
    return ERR_OK;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	e1ce      	b.n	800d196 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ce04:	4293      	cmp	r3, r2
 800ce06:	bf28      	it	cs
 800ce08:	4613      	movcs	r3, r2
 800ce0a:	b29b      	uxth	r3, r3
 800ce0c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce12:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800ce14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d10b      	bne.n	800ce32 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	8b5b      	ldrh	r3, [r3, #26]
 800ce1e:	f003 0302 	and.w	r3, r3, #2
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	f000 81aa 	beq.w	800d17c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f000 fdcb 	bl	800d9c4 <tcp_send_empty_ack>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	e1b1      	b.n	800d196 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ce32:	6879      	ldr	r1, [r7, #4]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	3304      	adds	r3, #4
 800ce38:	461a      	mov	r2, r3
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f7ff f826 	bl	800be8c <tcp_route>
 800ce40:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d102      	bne.n	800ce4e <tcp_output+0x96>
    return ERR_RTE;
 800ce48:	f06f 0303 	mvn.w	r3, #3
 800ce4c:	e1a3      	b.n	800d196 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d003      	beq.n	800ce5c <tcp_output+0xa4>
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d111      	bne.n	800ce80 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d002      	beq.n	800ce68 <tcp_output+0xb0>
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	3304      	adds	r3, #4
 800ce66:	e000      	b.n	800ce6a <tcp_output+0xb2>
 800ce68:	2300      	movs	r3, #0
 800ce6a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ce6c:	693b      	ldr	r3, [r7, #16]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d102      	bne.n	800ce78 <tcp_output+0xc0>
      return ERR_RTE;
 800ce72:	f06f 0303 	mvn.w	r3, #3
 800ce76:	e18e      	b.n	800d196 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	681a      	ldr	r2, [r3, #0]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ce80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce82:	68db      	ldr	r3, [r3, #12]
 800ce84:	685b      	ldr	r3, [r3, #4]
 800ce86:	4618      	mov	r0, r3
 800ce88:	f7f9 f98a 	bl	80061a0 <lwip_htonl>
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce92:	1ad3      	subs	r3, r2, r3
 800ce94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce96:	8912      	ldrh	r2, [r2, #8]
 800ce98:	4413      	add	r3, r2
 800ce9a:	69ba      	ldr	r2, [r7, #24]
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d227      	bcs.n	800cef0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cea6:	461a      	mov	r2, r3
 800cea8:	69bb      	ldr	r3, [r7, #24]
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	d114      	bne.n	800ced8 <tcp_output+0x120>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d110      	bne.n	800ced8 <tcp_output+0x120>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d10b      	bne.n	800ced8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2200      	movs	r2, #0
 800cec4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2201      	movs	r2, #1
 800cecc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2200      	movs	r2, #0
 800ced4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	8b5b      	ldrh	r3, [r3, #26]
 800cedc:	f003 0302 	and.w	r3, r3, #2
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	f000 814d 	beq.w	800d180 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f000 fd6c 	bl	800d9c4 <tcp_send_empty_ack>
 800ceec:	4603      	mov	r3, r0
 800ceee:	e152      	b.n	800d196 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2200      	movs	r2, #0
 800cef4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cefc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800cefe:	6a3b      	ldr	r3, [r7, #32]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	f000 811c 	beq.w	800d13e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800cf06:	e002      	b.n	800cf0e <tcp_output+0x156>
 800cf08:	6a3b      	ldr	r3, [r7, #32]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	623b      	str	r3, [r7, #32]
 800cf0e:	6a3b      	ldr	r3, [r7, #32]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d1f8      	bne.n	800cf08 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800cf16:	e112      	b.n	800d13e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800cf18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf1a:	68db      	ldr	r3, [r3, #12]
 800cf1c:	899b      	ldrh	r3, [r3, #12]
 800cf1e:	b29b      	uxth	r3, r3
 800cf20:	4618      	mov	r0, r3
 800cf22:	f7f9 f927 	bl	8006174 <lwip_htons>
 800cf26:	4603      	mov	r3, r0
 800cf28:	b2db      	uxtb	r3, r3
 800cf2a:	f003 0304 	and.w	r3, r3, #4
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d006      	beq.n	800cf40 <tcp_output+0x188>
 800cf32:	4b2f      	ldr	r3, [pc, #188]	@ (800cff0 <tcp_output+0x238>)
 800cf34:	f240 5236 	movw	r2, #1334	@ 0x536
 800cf38:	4932      	ldr	r1, [pc, #200]	@ (800d004 <tcp_output+0x24c>)
 800cf3a:	482f      	ldr	r0, [pc, #188]	@ (800cff8 <tcp_output+0x240>)
 800cf3c:	f005 f914 	bl	8012168 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d01f      	beq.n	800cf88 <tcp_output+0x1d0>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	8b5b      	ldrh	r3, [r3, #26]
 800cf4c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d119      	bne.n	800cf88 <tcp_output+0x1d0>
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d00b      	beq.n	800cf74 <tcp_output+0x1bc>
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d110      	bne.n	800cf88 <tcp_output+0x1d0>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf6a:	891a      	ldrh	r2, [r3, #8]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d209      	bcs.n	800cf88 <tcp_output+0x1d0>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d004      	beq.n	800cf88 <tcp_output+0x1d0>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cf84:	2b08      	cmp	r3, #8
 800cf86:	d901      	bls.n	800cf8c <tcp_output+0x1d4>
 800cf88:	2301      	movs	r3, #1
 800cf8a:	e000      	b.n	800cf8e <tcp_output+0x1d6>
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d106      	bne.n	800cfa0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	8b5b      	ldrh	r3, [r3, #26]
 800cf96:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	f000 80e4 	beq.w	800d168 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	7d1b      	ldrb	r3, [r3, #20]
 800cfa4:	2b02      	cmp	r3, #2
 800cfa6:	d00d      	beq.n	800cfc4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800cfa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfaa:	68db      	ldr	r3, [r3, #12]
 800cfac:	899b      	ldrh	r3, [r3, #12]
 800cfae:	b29c      	uxth	r4, r3
 800cfb0:	2010      	movs	r0, #16
 800cfb2:	f7f9 f8df 	bl	8006174 <lwip_htons>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	461a      	mov	r2, r3
 800cfba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfbc:	68db      	ldr	r3, [r3, #12]
 800cfbe:	4322      	orrs	r2, r4
 800cfc0:	b292      	uxth	r2, r2
 800cfc2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800cfc4:	697a      	ldr	r2, [r7, #20]
 800cfc6:	6879      	ldr	r1, [r7, #4]
 800cfc8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cfca:	f000 f909 	bl	800d1e0 <tcp_output_segment>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800cfd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d016      	beq.n	800d008 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	8b5b      	ldrh	r3, [r3, #26]
 800cfde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfe2:	b29a      	uxth	r2, r3
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	835a      	strh	r2, [r3, #26]
      return err;
 800cfe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfec:	e0d3      	b.n	800d196 <tcp_output+0x3de>
 800cfee:	bf00      	nop
 800cff0:	08014aa0 	.word	0x08014aa0
 800cff4:	08014fe4 	.word	0x08014fe4
 800cff8:	08014af4 	.word	0x08014af4
 800cffc:	08014ffc 	.word	0x08014ffc
 800d000:	2000847c 	.word	0x2000847c
 800d004:	08015024 	.word	0x08015024
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	7d1b      	ldrb	r3, [r3, #20]
 800d014:	2b02      	cmp	r3, #2
 800d016:	d006      	beq.n	800d026 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	8b5b      	ldrh	r3, [r3, #26]
 800d01c:	f023 0303 	bic.w	r3, r3, #3
 800d020:	b29a      	uxth	r2, r3
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d028:	68db      	ldr	r3, [r3, #12]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	4618      	mov	r0, r3
 800d02e:	f7f9 f8b7 	bl	80061a0 <lwip_htonl>
 800d032:	4604      	mov	r4, r0
 800d034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d036:	891b      	ldrh	r3, [r3, #8]
 800d038:	461d      	mov	r5, r3
 800d03a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d03c:	68db      	ldr	r3, [r3, #12]
 800d03e:	899b      	ldrh	r3, [r3, #12]
 800d040:	b29b      	uxth	r3, r3
 800d042:	4618      	mov	r0, r3
 800d044:	f7f9 f896 	bl	8006174 <lwip_htons>
 800d048:	4603      	mov	r3, r0
 800d04a:	b2db      	uxtb	r3, r3
 800d04c:	f003 0303 	and.w	r3, r3, #3
 800d050:	2b00      	cmp	r3, #0
 800d052:	d001      	beq.n	800d058 <tcp_output+0x2a0>
 800d054:	2301      	movs	r3, #1
 800d056:	e000      	b.n	800d05a <tcp_output+0x2a2>
 800d058:	2300      	movs	r3, #0
 800d05a:	442b      	add	r3, r5
 800d05c:	4423      	add	r3, r4
 800d05e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	1ad3      	subs	r3, r2, r3
 800d068:	2b00      	cmp	r3, #0
 800d06a:	da02      	bge.n	800d072 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	68ba      	ldr	r2, [r7, #8]
 800d070:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d074:	891b      	ldrh	r3, [r3, #8]
 800d076:	461c      	mov	r4, r3
 800d078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d07a:	68db      	ldr	r3, [r3, #12]
 800d07c:	899b      	ldrh	r3, [r3, #12]
 800d07e:	b29b      	uxth	r3, r3
 800d080:	4618      	mov	r0, r3
 800d082:	f7f9 f877 	bl	8006174 <lwip_htons>
 800d086:	4603      	mov	r3, r0
 800d088:	b2db      	uxtb	r3, r3
 800d08a:	f003 0303 	and.w	r3, r3, #3
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d001      	beq.n	800d096 <tcp_output+0x2de>
 800d092:	2301      	movs	r3, #1
 800d094:	e000      	b.n	800d098 <tcp_output+0x2e0>
 800d096:	2300      	movs	r3, #0
 800d098:	4423      	add	r3, r4
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d049      	beq.n	800d132 <tcp_output+0x37a>
      seg->next = NULL;
 800d09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d105      	bne.n	800d0b8 <tcp_output+0x300>
        pcb->unacked = seg;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0b0:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800d0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0b4:	623b      	str	r3, [r7, #32]
 800d0b6:	e03f      	b.n	800d138 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0ba:	68db      	ldr	r3, [r3, #12]
 800d0bc:	685b      	ldr	r3, [r3, #4]
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f7f9 f86e 	bl	80061a0 <lwip_htonl>
 800d0c4:	4604      	mov	r4, r0
 800d0c6:	6a3b      	ldr	r3, [r7, #32]
 800d0c8:	68db      	ldr	r3, [r3, #12]
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f7f9 f867 	bl	80061a0 <lwip_htonl>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	1ae3      	subs	r3, r4, r3
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	da24      	bge.n	800d124 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	3370      	adds	r3, #112	@ 0x70
 800d0de:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d0e0:	e002      	b.n	800d0e8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d0e2:	69fb      	ldr	r3, [r7, #28]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d0e8:	69fb      	ldr	r3, [r7, #28]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d011      	beq.n	800d114 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d0f0:	69fb      	ldr	r3, [r7, #28]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	68db      	ldr	r3, [r3, #12]
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f7f9 f851 	bl	80061a0 <lwip_htonl>
 800d0fe:	4604      	mov	r4, r0
 800d100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d102:	68db      	ldr	r3, [r3, #12]
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	4618      	mov	r0, r3
 800d108:	f7f9 f84a 	bl	80061a0 <lwip_htonl>
 800d10c:	4603      	mov	r3, r0
 800d10e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d110:	2b00      	cmp	r3, #0
 800d112:	dbe6      	blt.n	800d0e2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d114:	69fb      	ldr	r3, [r7, #28]
 800d116:	681a      	ldr	r2, [r3, #0]
 800d118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d11a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d11c:	69fb      	ldr	r3, [r7, #28]
 800d11e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d120:	601a      	str	r2, [r3, #0]
 800d122:	e009      	b.n	800d138 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d124:	6a3b      	ldr	r3, [r7, #32]
 800d126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d128:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d12a:	6a3b      	ldr	r3, [r7, #32]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	623b      	str	r3, [r7, #32]
 800d130:	e002      	b.n	800d138 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d132:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d134:	f7fb ffab 	bl	800908e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d13c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800d13e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d140:	2b00      	cmp	r3, #0
 800d142:	d012      	beq.n	800d16a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d146:	68db      	ldr	r3, [r3, #12]
 800d148:	685b      	ldr	r3, [r3, #4]
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7f9 f828 	bl	80061a0 <lwip_htonl>
 800d150:	4602      	mov	r2, r0
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d156:	1ad3      	subs	r3, r2, r3
 800d158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d15a:	8912      	ldrh	r2, [r2, #8]
 800d15c:	4413      	add	r3, r2
  while (seg != NULL &&
 800d15e:	69ba      	ldr	r2, [r7, #24]
 800d160:	429a      	cmp	r2, r3
 800d162:	f4bf aed9 	bcs.w	800cf18 <tcp_output+0x160>
 800d166:	e000      	b.n	800d16a <tcp_output+0x3b2>
      break;
 800d168:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d108      	bne.n	800d184 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2200      	movs	r2, #0
 800d176:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800d17a:	e004      	b.n	800d186 <tcp_output+0x3ce>
    goto output_done;
 800d17c:	bf00      	nop
 800d17e:	e002      	b.n	800d186 <tcp_output+0x3ce>
    goto output_done;
 800d180:	bf00      	nop
 800d182:	e000      	b.n	800d186 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d184:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	8b5b      	ldrh	r3, [r3, #26]
 800d18a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d18e:	b29a      	uxth	r2, r3
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d194:	2300      	movs	r3, #0
}
 800d196:	4618      	mov	r0, r3
 800d198:	3728      	adds	r7, #40	@ 0x28
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bdb0      	pop	{r4, r5, r7, pc}
 800d19e:	bf00      	nop

0800d1a0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b082      	sub	sp, #8
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d106      	bne.n	800d1bc <tcp_output_segment_busy+0x1c>
 800d1ae:	4b09      	ldr	r3, [pc, #36]	@ (800d1d4 <tcp_output_segment_busy+0x34>)
 800d1b0:	f240 529a 	movw	r2, #1434	@ 0x59a
 800d1b4:	4908      	ldr	r1, [pc, #32]	@ (800d1d8 <tcp_output_segment_busy+0x38>)
 800d1b6:	4809      	ldr	r0, [pc, #36]	@ (800d1dc <tcp_output_segment_busy+0x3c>)
 800d1b8:	f004 ffd6 	bl	8012168 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	685b      	ldr	r3, [r3, #4]
 800d1c0:	7b9b      	ldrb	r3, [r3, #14]
 800d1c2:	2b01      	cmp	r3, #1
 800d1c4:	d001      	beq.n	800d1ca <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	e000      	b.n	800d1cc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d1ca:	2300      	movs	r3, #0
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	3708      	adds	r7, #8
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}
 800d1d4:	08014aa0 	.word	0x08014aa0
 800d1d8:	0801503c 	.word	0x0801503c
 800d1dc:	08014af4 	.word	0x08014af4

0800d1e0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d1e0:	b5b0      	push	{r4, r5, r7, lr}
 800d1e2:	b08c      	sub	sp, #48	@ 0x30
 800d1e4:	af04      	add	r7, sp, #16
 800d1e6:	60f8      	str	r0, [r7, #12]
 800d1e8:	60b9      	str	r1, [r7, #8]
 800d1ea:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d106      	bne.n	800d200 <tcp_output_segment+0x20>
 800d1f2:	4b64      	ldr	r3, [pc, #400]	@ (800d384 <tcp_output_segment+0x1a4>)
 800d1f4:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800d1f8:	4963      	ldr	r1, [pc, #396]	@ (800d388 <tcp_output_segment+0x1a8>)
 800d1fa:	4864      	ldr	r0, [pc, #400]	@ (800d38c <tcp_output_segment+0x1ac>)
 800d1fc:	f004 ffb4 	bl	8012168 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d106      	bne.n	800d214 <tcp_output_segment+0x34>
 800d206:	4b5f      	ldr	r3, [pc, #380]	@ (800d384 <tcp_output_segment+0x1a4>)
 800d208:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800d20c:	4960      	ldr	r1, [pc, #384]	@ (800d390 <tcp_output_segment+0x1b0>)
 800d20e:	485f      	ldr	r0, [pc, #380]	@ (800d38c <tcp_output_segment+0x1ac>)
 800d210:	f004 ffaa 	bl	8012168 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d106      	bne.n	800d228 <tcp_output_segment+0x48>
 800d21a:	4b5a      	ldr	r3, [pc, #360]	@ (800d384 <tcp_output_segment+0x1a4>)
 800d21c:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800d220:	495c      	ldr	r1, [pc, #368]	@ (800d394 <tcp_output_segment+0x1b4>)
 800d222:	485a      	ldr	r0, [pc, #360]	@ (800d38c <tcp_output_segment+0x1ac>)
 800d224:	f004 ffa0 	bl	8012168 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d228:	68f8      	ldr	r0, [r7, #12]
 800d22a:	f7ff ffb9 	bl	800d1a0 <tcp_output_segment_busy>
 800d22e:	4603      	mov	r3, r0
 800d230:	2b00      	cmp	r3, #0
 800d232:	d001      	beq.n	800d238 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d234:	2300      	movs	r3, #0
 800d236:	e0a1      	b.n	800d37c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	68dc      	ldr	r4, [r3, #12]
 800d240:	4610      	mov	r0, r2
 800d242:	f7f8 ffad 	bl	80061a0 <lwip_htonl>
 800d246:	4603      	mov	r3, r0
 800d248:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	68dc      	ldr	r4, [r3, #12]
 800d252:	4610      	mov	r0, r2
 800d254:	f7f8 ff8e 	bl	8006174 <lwip_htons>
 800d258:	4603      	mov	r3, r0
 800d25a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d260:	68ba      	ldr	r2, [r7, #8]
 800d262:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800d264:	441a      	add	r2, r3
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	68db      	ldr	r3, [r3, #12]
 800d26e:	3314      	adds	r3, #20
 800d270:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	7a9b      	ldrb	r3, [r3, #10]
 800d276:	f003 0301 	and.w	r3, r3, #1
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d015      	beq.n	800d2aa <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	3304      	adds	r3, #4
 800d282:	461a      	mov	r2, r3
 800d284:	6879      	ldr	r1, [r7, #4]
 800d286:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800d28a:	f7fc fa39 	bl	8009700 <tcp_eff_send_mss_netif>
 800d28e:	4603      	mov	r3, r0
 800d290:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d292:	8b7b      	ldrh	r3, [r7, #26]
 800d294:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800d298:	4618      	mov	r0, r3
 800d29a:	f7f8 ff81 	bl	80061a0 <lwip_htonl>
 800d29e:	4602      	mov	r2, r0
 800d2a0:	69fb      	ldr	r3, [r7, #28]
 800d2a2:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d2a4:	69fb      	ldr	r3, [r7, #28]
 800d2a6:	3304      	adds	r3, #4
 800d2a8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	da02      	bge.n	800d2ba <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d10c      	bne.n	800d2dc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d2c2:	4b35      	ldr	r3, [pc, #212]	@ (800d398 <tcp_output_segment+0x1b8>)
 800d2c4:	681a      	ldr	r2, [r3, #0]
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	68db      	ldr	r3, [r3, #12]
 800d2ce:	685b      	ldr	r3, [r3, #4]
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7f8 ff65 	bl	80061a0 <lwip_htonl>
 800d2d6:	4602      	mov	r2, r0
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	68da      	ldr	r2, [r3, #12]
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	685b      	ldr	r3, [r3, #4]
 800d2e4:	685b      	ldr	r3, [r3, #4]
 800d2e6:	1ad3      	subs	r3, r2, r3
 800d2e8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	8959      	ldrh	r1, [r3, #10]
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	685b      	ldr	r3, [r3, #4]
 800d2f4:	8b3a      	ldrh	r2, [r7, #24]
 800d2f6:	1a8a      	subs	r2, r1, r2
 800d2f8:	b292      	uxth	r2, r2
 800d2fa:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	8919      	ldrh	r1, [r3, #8]
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	685b      	ldr	r3, [r3, #4]
 800d306:	8b3a      	ldrh	r2, [r7, #24]
 800d308:	1a8a      	subs	r2, r1, r2
 800d30a:	b292      	uxth	r2, r2
 800d30c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	685b      	ldr	r3, [r3, #4]
 800d312:	68fa      	ldr	r2, [r7, #12]
 800d314:	68d2      	ldr	r2, [r2, #12]
 800d316:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	68db      	ldr	r3, [r3, #12]
 800d31c:	2200      	movs	r2, #0
 800d31e:	741a      	strb	r2, [r3, #16]
 800d320:	2200      	movs	r2, #0
 800d322:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	68da      	ldr	r2, [r3, #12]
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	7a9b      	ldrb	r3, [r3, #10]
 800d32c:	f003 0301 	and.w	r3, r3, #1
 800d330:	2b00      	cmp	r3, #0
 800d332:	d001      	beq.n	800d338 <tcp_output_segment+0x158>
 800d334:	2318      	movs	r3, #24
 800d336:	e000      	b.n	800d33a <tcp_output_segment+0x15a>
 800d338:	2314      	movs	r3, #20
 800d33a:	4413      	add	r3, r2
 800d33c:	69fa      	ldr	r2, [r7, #28]
 800d33e:	429a      	cmp	r2, r3
 800d340:	d006      	beq.n	800d350 <tcp_output_segment+0x170>
 800d342:	4b10      	ldr	r3, [pc, #64]	@ (800d384 <tcp_output_segment+0x1a4>)
 800d344:	f240 621c 	movw	r2, #1564	@ 0x61c
 800d348:	4914      	ldr	r1, [pc, #80]	@ (800d39c <tcp_output_segment+0x1bc>)
 800d34a:	4810      	ldr	r0, [pc, #64]	@ (800d38c <tcp_output_segment+0x1ac>)
 800d34c:	f004 ff0c 	bl	8012168 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	6858      	ldr	r0, [r3, #4]
 800d354:	68b9      	ldr	r1, [r7, #8]
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	1d1c      	adds	r4, r3, #4
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	7add      	ldrb	r5, [r3, #11]
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	7a9b      	ldrb	r3, [r3, #10]
 800d362:	687a      	ldr	r2, [r7, #4]
 800d364:	9202      	str	r2, [sp, #8]
 800d366:	2206      	movs	r2, #6
 800d368:	9201      	str	r2, [sp, #4]
 800d36a:	9300      	str	r3, [sp, #0]
 800d36c:	462b      	mov	r3, r5
 800d36e:	4622      	mov	r2, r4
 800d370:	f002 fa34 	bl	800f7dc <ip4_output_if>
 800d374:	4603      	mov	r3, r0
 800d376:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d378:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3720      	adds	r7, #32
 800d380:	46bd      	mov	sp, r7
 800d382:	bdb0      	pop	{r4, r5, r7, pc}
 800d384:	08014aa0 	.word	0x08014aa0
 800d388:	08015064 	.word	0x08015064
 800d38c:	08014af4 	.word	0x08014af4
 800d390:	08015084 	.word	0x08015084
 800d394:	080150a4 	.word	0x080150a4
 800d398:	20008430 	.word	0x20008430
 800d39c:	080150c8 	.word	0x080150c8

0800d3a0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d3a0:	b5b0      	push	{r4, r5, r7, lr}
 800d3a2:	b084      	sub	sp, #16
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d106      	bne.n	800d3bc <tcp_rexmit_rto_prepare+0x1c>
 800d3ae:	4b31      	ldr	r3, [pc, #196]	@ (800d474 <tcp_rexmit_rto_prepare+0xd4>)
 800d3b0:	f240 6263 	movw	r2, #1635	@ 0x663
 800d3b4:	4930      	ldr	r1, [pc, #192]	@ (800d478 <tcp_rexmit_rto_prepare+0xd8>)
 800d3b6:	4831      	ldr	r0, [pc, #196]	@ (800d47c <tcp_rexmit_rto_prepare+0xdc>)
 800d3b8:	f004 fed6 	bl	8012168 <iprintf>

  if (pcb->unacked == NULL) {
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d102      	bne.n	800d3ca <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d3c4:	f06f 0305 	mvn.w	r3, #5
 800d3c8:	e050      	b.n	800d46c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3ce:	60fb      	str	r3, [r7, #12]
 800d3d0:	e00b      	b.n	800d3ea <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d3d2:	68f8      	ldr	r0, [r7, #12]
 800d3d4:	f7ff fee4 	bl	800d1a0 <tcp_output_segment_busy>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d002      	beq.n	800d3e4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d3de:	f06f 0305 	mvn.w	r3, #5
 800d3e2:	e043      	b.n	800d46c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	60fb      	str	r3, [r7, #12]
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d1ef      	bne.n	800d3d2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d3f2:	68f8      	ldr	r0, [r7, #12]
 800d3f4:	f7ff fed4 	bl	800d1a0 <tcp_output_segment_busy>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d002      	beq.n	800d404 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d3fe:	f06f 0305 	mvn.w	r3, #5
 800d402:	e033      	b.n	800d46c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2200      	movs	r2, #0
 800d418:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	8b5b      	ldrh	r3, [r3, #26]
 800d41e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d422:	b29a      	uxth	r2, r3
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	68db      	ldr	r3, [r3, #12]
 800d42c:	685b      	ldr	r3, [r3, #4]
 800d42e:	4618      	mov	r0, r3
 800d430:	f7f8 feb6 	bl	80061a0 <lwip_htonl>
 800d434:	4604      	mov	r4, r0
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	891b      	ldrh	r3, [r3, #8]
 800d43a:	461d      	mov	r5, r3
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	68db      	ldr	r3, [r3, #12]
 800d440:	899b      	ldrh	r3, [r3, #12]
 800d442:	b29b      	uxth	r3, r3
 800d444:	4618      	mov	r0, r3
 800d446:	f7f8 fe95 	bl	8006174 <lwip_htons>
 800d44a:	4603      	mov	r3, r0
 800d44c:	b2db      	uxtb	r3, r3
 800d44e:	f003 0303 	and.w	r3, r3, #3
 800d452:	2b00      	cmp	r3, #0
 800d454:	d001      	beq.n	800d45a <tcp_rexmit_rto_prepare+0xba>
 800d456:	2301      	movs	r3, #1
 800d458:	e000      	b.n	800d45c <tcp_rexmit_rto_prepare+0xbc>
 800d45a:	2300      	movs	r3, #0
 800d45c:	442b      	add	r3, r5
 800d45e:	18e2      	adds	r2, r4, r3
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2200      	movs	r2, #0
 800d468:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800d46a:	2300      	movs	r3, #0
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3710      	adds	r7, #16
 800d470:	46bd      	mov	sp, r7
 800d472:	bdb0      	pop	{r4, r5, r7, pc}
 800d474:	08014aa0 	.word	0x08014aa0
 800d478:	080150dc 	.word	0x080150dc
 800d47c:	08014af4 	.word	0x08014af4

0800d480 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d106      	bne.n	800d49c <tcp_rexmit_rto_commit+0x1c>
 800d48e:	4b0d      	ldr	r3, [pc, #52]	@ (800d4c4 <tcp_rexmit_rto_commit+0x44>)
 800d490:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800d494:	490c      	ldr	r1, [pc, #48]	@ (800d4c8 <tcp_rexmit_rto_commit+0x48>)
 800d496:	480d      	ldr	r0, [pc, #52]	@ (800d4cc <tcp_rexmit_rto_commit+0x4c>)
 800d498:	f004 fe66 	bl	8012168 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d4a2:	2bff      	cmp	r3, #255	@ 0xff
 800d4a4:	d007      	beq.n	800d4b6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d4ac:	3301      	adds	r3, #1
 800d4ae:	b2da      	uxtb	r2, r3
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f7ff fc7e 	bl	800cdb8 <tcp_output>
}
 800d4bc:	bf00      	nop
 800d4be:	3708      	adds	r7, #8
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}
 800d4c4:	08014aa0 	.word	0x08014aa0
 800d4c8:	08015100 	.word	0x08015100
 800d4cc:	08014af4 	.word	0x08014af4

0800d4d0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b082      	sub	sp, #8
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d106      	bne.n	800d4ec <tcp_rexmit_rto+0x1c>
 800d4de:	4b0a      	ldr	r3, [pc, #40]	@ (800d508 <tcp_rexmit_rto+0x38>)
 800d4e0:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800d4e4:	4909      	ldr	r1, [pc, #36]	@ (800d50c <tcp_rexmit_rto+0x3c>)
 800d4e6:	480a      	ldr	r0, [pc, #40]	@ (800d510 <tcp_rexmit_rto+0x40>)
 800d4e8:	f004 fe3e 	bl	8012168 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f7ff ff57 	bl	800d3a0 <tcp_rexmit_rto_prepare>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d102      	bne.n	800d4fe <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f7ff ffc1 	bl	800d480 <tcp_rexmit_rto_commit>
  }
}
 800d4fe:	bf00      	nop
 800d500:	3708      	adds	r7, #8
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}
 800d506:	bf00      	nop
 800d508:	08014aa0 	.word	0x08014aa0
 800d50c:	08015124 	.word	0x08015124
 800d510:	08014af4 	.word	0x08014af4

0800d514 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d514:	b590      	push	{r4, r7, lr}
 800d516:	b085      	sub	sp, #20
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d106      	bne.n	800d530 <tcp_rexmit+0x1c>
 800d522:	4b2f      	ldr	r3, [pc, #188]	@ (800d5e0 <tcp_rexmit+0xcc>)
 800d524:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800d528:	492e      	ldr	r1, [pc, #184]	@ (800d5e4 <tcp_rexmit+0xd0>)
 800d52a:	482f      	ldr	r0, [pc, #188]	@ (800d5e8 <tcp_rexmit+0xd4>)
 800d52c:	f004 fe1c 	bl	8012168 <iprintf>

  if (pcb->unacked == NULL) {
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d534:	2b00      	cmp	r3, #0
 800d536:	d102      	bne.n	800d53e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d538:	f06f 0305 	mvn.w	r3, #5
 800d53c:	e04c      	b.n	800d5d8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d542:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d544:	68b8      	ldr	r0, [r7, #8]
 800d546:	f7ff fe2b 	bl	800d1a0 <tcp_output_segment_busy>
 800d54a:	4603      	mov	r3, r0
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d002      	beq.n	800d556 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d550:	f06f 0305 	mvn.w	r3, #5
 800d554:	e040      	b.n	800d5d8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	681a      	ldr	r2, [r3, #0]
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	336c      	adds	r3, #108	@ 0x6c
 800d562:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d564:	e002      	b.n	800d56c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d011      	beq.n	800d598 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	68db      	ldr	r3, [r3, #12]
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7f8 fe0f 	bl	80061a0 <lwip_htonl>
 800d582:	4604      	mov	r4, r0
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	68db      	ldr	r3, [r3, #12]
 800d588:	685b      	ldr	r3, [r3, #4]
 800d58a:	4618      	mov	r0, r3
 800d58c:	f7f8 fe08 	bl	80061a0 <lwip_htonl>
 800d590:	4603      	mov	r3, r0
 800d592:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d594:	2b00      	cmp	r3, #0
 800d596:	dbe6      	blt.n	800d566 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	681a      	ldr	r2, [r3, #0]
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	68ba      	ldr	r2, [r7, #8]
 800d5a4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d103      	bne.n	800d5b6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d5bc:	2bff      	cmp	r3, #255	@ 0xff
 800d5be:	d007      	beq.n	800d5d0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d5c6:	3301      	adds	r3, #1
 800d5c8:	b2da      	uxtb	r2, r3
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d5d6:	2300      	movs	r3, #0
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3714      	adds	r7, #20
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd90      	pop	{r4, r7, pc}
 800d5e0:	08014aa0 	.word	0x08014aa0
 800d5e4:	08015140 	.word	0x08015140
 800d5e8:	08014af4 	.word	0x08014af4

0800d5ec <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b082      	sub	sp, #8
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d106      	bne.n	800d608 <tcp_rexmit_fast+0x1c>
 800d5fa:	4b2a      	ldr	r3, [pc, #168]	@ (800d6a4 <tcp_rexmit_fast+0xb8>)
 800d5fc:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800d600:	4929      	ldr	r1, [pc, #164]	@ (800d6a8 <tcp_rexmit_fast+0xbc>)
 800d602:	482a      	ldr	r0, [pc, #168]	@ (800d6ac <tcp_rexmit_fast+0xc0>)
 800d604:	f004 fdb0 	bl	8012168 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d044      	beq.n	800d69a <tcp_rexmit_fast+0xae>
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	8b5b      	ldrh	r3, [r3, #26]
 800d614:	f003 0304 	and.w	r3, r3, #4
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d13e      	bne.n	800d69a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f7ff ff79 	bl	800d514 <tcp_rexmit>
 800d622:	4603      	mov	r3, r0
 800d624:	2b00      	cmp	r3, #0
 800d626:	d138      	bne.n	800d69a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d634:	4293      	cmp	r3, r2
 800d636:	bf28      	it	cs
 800d638:	4613      	movcs	r3, r2
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	0fda      	lsrs	r2, r3, #31
 800d63e:	4413      	add	r3, r2
 800d640:	105b      	asrs	r3, r3, #1
 800d642:	b29a      	uxth	r2, r3
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800d650:	461a      	mov	r2, r3
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d656:	005b      	lsls	r3, r3, #1
 800d658:	429a      	cmp	r2, r3
 800d65a:	d206      	bcs.n	800d66a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d660:	005b      	lsls	r3, r3, #1
 800d662:	b29a      	uxth	r2, r3
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d674:	4619      	mov	r1, r3
 800d676:	0049      	lsls	r1, r1, #1
 800d678:	440b      	add	r3, r1
 800d67a:	b29b      	uxth	r3, r3
 800d67c:	4413      	add	r3, r2
 800d67e:	b29a      	uxth	r2, r3
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	8b5b      	ldrh	r3, [r3, #26]
 800d68a:	f043 0304 	orr.w	r3, r3, #4
 800d68e:	b29a      	uxth	r2, r3
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2200      	movs	r2, #0
 800d698:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800d69a:	bf00      	nop
 800d69c:	3708      	adds	r7, #8
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}
 800d6a2:	bf00      	nop
 800d6a4:	08014aa0 	.word	0x08014aa0
 800d6a8:	08015158 	.word	0x08015158
 800d6ac:	08014af4 	.word	0x08014af4

0800d6b0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b086      	sub	sp, #24
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	60f8      	str	r0, [r7, #12]
 800d6b8:	607b      	str	r3, [r7, #4]
 800d6ba:	460b      	mov	r3, r1
 800d6bc:	817b      	strh	r3, [r7, #10]
 800d6be:	4613      	mov	r3, r2
 800d6c0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d6c2:	897a      	ldrh	r2, [r7, #10]
 800d6c4:	893b      	ldrh	r3, [r7, #8]
 800d6c6:	4413      	add	r3, r2
 800d6c8:	b29b      	uxth	r3, r3
 800d6ca:	3314      	adds	r3, #20
 800d6cc:	b29b      	uxth	r3, r3
 800d6ce:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	2022      	movs	r0, #34	@ 0x22
 800d6d6:	f7f9 fdc7 	bl	8007268 <pbuf_alloc>
 800d6da:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d04d      	beq.n	800d77e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d6e2:	897b      	ldrh	r3, [r7, #10]
 800d6e4:	3313      	adds	r3, #19
 800d6e6:	697a      	ldr	r2, [r7, #20]
 800d6e8:	8952      	ldrh	r2, [r2, #10]
 800d6ea:	4293      	cmp	r3, r2
 800d6ec:	db06      	blt.n	800d6fc <tcp_output_alloc_header_common+0x4c>
 800d6ee:	4b26      	ldr	r3, [pc, #152]	@ (800d788 <tcp_output_alloc_header_common+0xd8>)
 800d6f0:	f240 7223 	movw	r2, #1827	@ 0x723
 800d6f4:	4925      	ldr	r1, [pc, #148]	@ (800d78c <tcp_output_alloc_header_common+0xdc>)
 800d6f6:	4826      	ldr	r0, [pc, #152]	@ (800d790 <tcp_output_alloc_header_common+0xe0>)
 800d6f8:	f004 fd36 	bl	8012168 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	685b      	ldr	r3, [r3, #4]
 800d700:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d702:	8c3b      	ldrh	r3, [r7, #32]
 800d704:	4618      	mov	r0, r3
 800d706:	f7f8 fd35 	bl	8006174 <lwip_htons>
 800d70a:	4603      	mov	r3, r0
 800d70c:	461a      	mov	r2, r3
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d712:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d714:	4618      	mov	r0, r3
 800d716:	f7f8 fd2d 	bl	8006174 <lwip_htons>
 800d71a:	4603      	mov	r3, r0
 800d71c:	461a      	mov	r2, r3
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d728:	68f8      	ldr	r0, [r7, #12]
 800d72a:	f7f8 fd39 	bl	80061a0 <lwip_htonl>
 800d72e:	4602      	mov	r2, r0
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d734:	897b      	ldrh	r3, [r7, #10]
 800d736:	089b      	lsrs	r3, r3, #2
 800d738:	b29b      	uxth	r3, r3
 800d73a:	3305      	adds	r3, #5
 800d73c:	b29b      	uxth	r3, r3
 800d73e:	031b      	lsls	r3, r3, #12
 800d740:	b29a      	uxth	r2, r3
 800d742:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d746:	b29b      	uxth	r3, r3
 800d748:	4313      	orrs	r3, r2
 800d74a:	b29b      	uxth	r3, r3
 800d74c:	4618      	mov	r0, r3
 800d74e:	f7f8 fd11 	bl	8006174 <lwip_htons>
 800d752:	4603      	mov	r3, r0
 800d754:	461a      	mov	r2, r3
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d75a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7f8 fd09 	bl	8006174 <lwip_htons>
 800d762:	4603      	mov	r3, r0
 800d764:	461a      	mov	r2, r3
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	2200      	movs	r2, #0
 800d76e:	741a      	strb	r2, [r3, #16]
 800d770:	2200      	movs	r2, #0
 800d772:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	2200      	movs	r2, #0
 800d778:	749a      	strb	r2, [r3, #18]
 800d77a:	2200      	movs	r2, #0
 800d77c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800d77e:	697b      	ldr	r3, [r7, #20]
}
 800d780:	4618      	mov	r0, r3
 800d782:	3718      	adds	r7, #24
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}
 800d788:	08014aa0 	.word	0x08014aa0
 800d78c:	08015178 	.word	0x08015178
 800d790:	08014af4 	.word	0x08014af4

0800d794 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800d794:	b5b0      	push	{r4, r5, r7, lr}
 800d796:	b08a      	sub	sp, #40	@ 0x28
 800d798:	af04      	add	r7, sp, #16
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	607b      	str	r3, [r7, #4]
 800d79e:	460b      	mov	r3, r1
 800d7a0:	817b      	strh	r3, [r7, #10]
 800d7a2:	4613      	mov	r3, r2
 800d7a4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d106      	bne.n	800d7ba <tcp_output_alloc_header+0x26>
 800d7ac:	4b15      	ldr	r3, [pc, #84]	@ (800d804 <tcp_output_alloc_header+0x70>)
 800d7ae:	f240 7242 	movw	r2, #1858	@ 0x742
 800d7b2:	4915      	ldr	r1, [pc, #84]	@ (800d808 <tcp_output_alloc_header+0x74>)
 800d7b4:	4815      	ldr	r0, [pc, #84]	@ (800d80c <tcp_output_alloc_header+0x78>)
 800d7b6:	f004 fcd7 	bl	8012168 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	8adb      	ldrh	r3, [r3, #22]
 800d7c2:	68fa      	ldr	r2, [r7, #12]
 800d7c4:	8b12      	ldrh	r2, [r2, #24]
 800d7c6:	68f9      	ldr	r1, [r7, #12]
 800d7c8:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800d7ca:	893d      	ldrh	r5, [r7, #8]
 800d7cc:	897c      	ldrh	r4, [r7, #10]
 800d7ce:	9103      	str	r1, [sp, #12]
 800d7d0:	2110      	movs	r1, #16
 800d7d2:	9102      	str	r1, [sp, #8]
 800d7d4:	9201      	str	r2, [sp, #4]
 800d7d6:	9300      	str	r3, [sp, #0]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	462a      	mov	r2, r5
 800d7dc:	4621      	mov	r1, r4
 800d7de:	f7ff ff67 	bl	800d6b0 <tcp_output_alloc_header_common>
 800d7e2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d006      	beq.n	800d7f8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7ee:	68fa      	ldr	r2, [r7, #12]
 800d7f0:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800d7f2:	441a      	add	r2, r3
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800d7f8:	697b      	ldr	r3, [r7, #20]
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3718      	adds	r7, #24
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bdb0      	pop	{r4, r5, r7, pc}
 800d802:	bf00      	nop
 800d804:	08014aa0 	.word	0x08014aa0
 800d808:	080151a8 	.word	0x080151a8
 800d80c:	08014af4 	.word	0x08014af4

0800d810 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b088      	sub	sp, #32
 800d814:	af00      	add	r7, sp, #0
 800d816:	60f8      	str	r0, [r7, #12]
 800d818:	60b9      	str	r1, [r7, #8]
 800d81a:	4611      	mov	r1, r2
 800d81c:	461a      	mov	r2, r3
 800d81e:	460b      	mov	r3, r1
 800d820:	71fb      	strb	r3, [r7, #7]
 800d822:	4613      	mov	r3, r2
 800d824:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d826:	2300      	movs	r3, #0
 800d828:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d106      	bne.n	800d83e <tcp_output_fill_options+0x2e>
 800d830:	4b12      	ldr	r3, [pc, #72]	@ (800d87c <tcp_output_fill_options+0x6c>)
 800d832:	f240 7256 	movw	r2, #1878	@ 0x756
 800d836:	4912      	ldr	r1, [pc, #72]	@ (800d880 <tcp_output_fill_options+0x70>)
 800d838:	4812      	ldr	r0, [pc, #72]	@ (800d884 <tcp_output_fill_options+0x74>)
 800d83a:	f004 fc95 	bl	8012168 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	685b      	ldr	r3, [r3, #4]
 800d842:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d844:	69bb      	ldr	r3, [r7, #24]
 800d846:	3314      	adds	r3, #20
 800d848:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d84a:	8bfb      	ldrh	r3, [r7, #30]
 800d84c:	009b      	lsls	r3, r3, #2
 800d84e:	461a      	mov	r2, r3
 800d850:	79fb      	ldrb	r3, [r7, #7]
 800d852:	009b      	lsls	r3, r3, #2
 800d854:	f003 0304 	and.w	r3, r3, #4
 800d858:	4413      	add	r3, r2
 800d85a:	3314      	adds	r3, #20
 800d85c:	69ba      	ldr	r2, [r7, #24]
 800d85e:	4413      	add	r3, r2
 800d860:	697a      	ldr	r2, [r7, #20]
 800d862:	429a      	cmp	r2, r3
 800d864:	d006      	beq.n	800d874 <tcp_output_fill_options+0x64>
 800d866:	4b05      	ldr	r3, [pc, #20]	@ (800d87c <tcp_output_fill_options+0x6c>)
 800d868:	f240 7275 	movw	r2, #1909	@ 0x775
 800d86c:	4906      	ldr	r1, [pc, #24]	@ (800d888 <tcp_output_fill_options+0x78>)
 800d86e:	4805      	ldr	r0, [pc, #20]	@ (800d884 <tcp_output_fill_options+0x74>)
 800d870:	f004 fc7a 	bl	8012168 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d874:	bf00      	nop
 800d876:	3720      	adds	r7, #32
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}
 800d87c:	08014aa0 	.word	0x08014aa0
 800d880:	080151d0 	.word	0x080151d0
 800d884:	08014af4 	.word	0x08014af4
 800d888:	080150c8 	.word	0x080150c8

0800d88c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b08a      	sub	sp, #40	@ 0x28
 800d890:	af04      	add	r7, sp, #16
 800d892:	60f8      	str	r0, [r7, #12]
 800d894:	60b9      	str	r1, [r7, #8]
 800d896:	607a      	str	r2, [r7, #4]
 800d898:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d106      	bne.n	800d8ae <tcp_output_control_segment+0x22>
 800d8a0:	4b1c      	ldr	r3, [pc, #112]	@ (800d914 <tcp_output_control_segment+0x88>)
 800d8a2:	f240 7287 	movw	r2, #1927	@ 0x787
 800d8a6:	491c      	ldr	r1, [pc, #112]	@ (800d918 <tcp_output_control_segment+0x8c>)
 800d8a8:	481c      	ldr	r0, [pc, #112]	@ (800d91c <tcp_output_control_segment+0x90>)
 800d8aa:	f004 fc5d 	bl	8012168 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800d8ae:	683a      	ldr	r2, [r7, #0]
 800d8b0:	6879      	ldr	r1, [r7, #4]
 800d8b2:	68f8      	ldr	r0, [r7, #12]
 800d8b4:	f7fe faea 	bl	800be8c <tcp_route>
 800d8b8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d102      	bne.n	800d8c6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800d8c0:	23fc      	movs	r3, #252	@ 0xfc
 800d8c2:	75fb      	strb	r3, [r7, #23]
 800d8c4:	e01c      	b.n	800d900 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d006      	beq.n	800d8da <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	7adb      	ldrb	r3, [r3, #11]
 800d8d0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	7a9b      	ldrb	r3, [r3, #10]
 800d8d6:	757b      	strb	r3, [r7, #21]
 800d8d8:	e003      	b.n	800d8e2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800d8da:	23ff      	movs	r3, #255	@ 0xff
 800d8dc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d8e2:	7dba      	ldrb	r2, [r7, #22]
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	9302      	str	r3, [sp, #8]
 800d8e8:	2306      	movs	r3, #6
 800d8ea:	9301      	str	r3, [sp, #4]
 800d8ec:	7d7b      	ldrb	r3, [r7, #21]
 800d8ee:	9300      	str	r3, [sp, #0]
 800d8f0:	4613      	mov	r3, r2
 800d8f2:	683a      	ldr	r2, [r7, #0]
 800d8f4:	6879      	ldr	r1, [r7, #4]
 800d8f6:	68b8      	ldr	r0, [r7, #8]
 800d8f8:	f001 ff70 	bl	800f7dc <ip4_output_if>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d900:	68b8      	ldr	r0, [r7, #8]
 800d902:	f7f9 ff95 	bl	8007830 <pbuf_free>
  return err;
 800d906:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3718      	adds	r7, #24
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}
 800d912:	bf00      	nop
 800d914:	08014aa0 	.word	0x08014aa0
 800d918:	080151f8 	.word	0x080151f8
 800d91c:	08014af4 	.word	0x08014af4

0800d920 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d920:	b590      	push	{r4, r7, lr}
 800d922:	b08b      	sub	sp, #44	@ 0x2c
 800d924:	af04      	add	r7, sp, #16
 800d926:	60f8      	str	r0, [r7, #12]
 800d928:	60b9      	str	r1, [r7, #8]
 800d92a:	607a      	str	r2, [r7, #4]
 800d92c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d106      	bne.n	800d942 <tcp_rst+0x22>
 800d934:	4b1f      	ldr	r3, [pc, #124]	@ (800d9b4 <tcp_rst+0x94>)
 800d936:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800d93a:	491f      	ldr	r1, [pc, #124]	@ (800d9b8 <tcp_rst+0x98>)
 800d93c:	481f      	ldr	r0, [pc, #124]	@ (800d9bc <tcp_rst+0x9c>)
 800d93e:	f004 fc13 	bl	8012168 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d944:	2b00      	cmp	r3, #0
 800d946:	d106      	bne.n	800d956 <tcp_rst+0x36>
 800d948:	4b1a      	ldr	r3, [pc, #104]	@ (800d9b4 <tcp_rst+0x94>)
 800d94a:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800d94e:	491c      	ldr	r1, [pc, #112]	@ (800d9c0 <tcp_rst+0xa0>)
 800d950:	481a      	ldr	r0, [pc, #104]	@ (800d9bc <tcp_rst+0x9c>)
 800d952:	f004 fc09 	bl	8012168 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d956:	2300      	movs	r3, #0
 800d958:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d95a:	f246 0308 	movw	r3, #24584	@ 0x6008
 800d95e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d960:	7dfb      	ldrb	r3, [r7, #23]
 800d962:	b29c      	uxth	r4, r3
 800d964:	68b8      	ldr	r0, [r7, #8]
 800d966:	f7f8 fc1b 	bl	80061a0 <lwip_htonl>
 800d96a:	4602      	mov	r2, r0
 800d96c:	8abb      	ldrh	r3, [r7, #20]
 800d96e:	9303      	str	r3, [sp, #12]
 800d970:	2314      	movs	r3, #20
 800d972:	9302      	str	r3, [sp, #8]
 800d974:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800d976:	9301      	str	r3, [sp, #4]
 800d978:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d97a:	9300      	str	r3, [sp, #0]
 800d97c:	4613      	mov	r3, r2
 800d97e:	2200      	movs	r2, #0
 800d980:	4621      	mov	r1, r4
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	f7ff fe94 	bl	800d6b0 <tcp_output_alloc_header_common>
 800d988:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d00c      	beq.n	800d9aa <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d990:	7dfb      	ldrb	r3, [r7, #23]
 800d992:	2200      	movs	r2, #0
 800d994:	6939      	ldr	r1, [r7, #16]
 800d996:	68f8      	ldr	r0, [r7, #12]
 800d998:	f7ff ff3a 	bl	800d810 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d99e:	683a      	ldr	r2, [r7, #0]
 800d9a0:	6939      	ldr	r1, [r7, #16]
 800d9a2:	68f8      	ldr	r0, [r7, #12]
 800d9a4:	f7ff ff72 	bl	800d88c <tcp_output_control_segment>
 800d9a8:	e000      	b.n	800d9ac <tcp_rst+0x8c>
    return;
 800d9aa:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d9ac:	371c      	adds	r7, #28
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd90      	pop	{r4, r7, pc}
 800d9b2:	bf00      	nop
 800d9b4:	08014aa0 	.word	0x08014aa0
 800d9b8:	08015224 	.word	0x08015224
 800d9bc:	08014af4 	.word	0x08014af4
 800d9c0:	08015240 	.word	0x08015240

0800d9c4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d9c4:	b590      	push	{r4, r7, lr}
 800d9c6:	b087      	sub	sp, #28
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d106      	bne.n	800d9e8 <tcp_send_empty_ack+0x24>
 800d9da:	4b28      	ldr	r3, [pc, #160]	@ (800da7c <tcp_send_empty_ack+0xb8>)
 800d9dc:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800d9e0:	4927      	ldr	r1, [pc, #156]	@ (800da80 <tcp_send_empty_ack+0xbc>)
 800d9e2:	4828      	ldr	r0, [pc, #160]	@ (800da84 <tcp_send_empty_ack+0xc0>)
 800d9e4:	f004 fbc0 	bl	8012168 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d9e8:	7dfb      	ldrb	r3, [r7, #23]
 800d9ea:	009b      	lsls	r3, r3, #2
 800d9ec:	b2db      	uxtb	r3, r3
 800d9ee:	f003 0304 	and.w	r3, r3, #4
 800d9f2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d9f4:	7d7b      	ldrb	r3, [r7, #21]
 800d9f6:	b29c      	uxth	r4, r3
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f7f8 fbcf 	bl	80061a0 <lwip_htonl>
 800da02:	4603      	mov	r3, r0
 800da04:	2200      	movs	r2, #0
 800da06:	4621      	mov	r1, r4
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f7ff fec3 	bl	800d794 <tcp_output_alloc_header>
 800da0e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800da10:	693b      	ldr	r3, [r7, #16]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d109      	bne.n	800da2a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	8b5b      	ldrh	r3, [r3, #26]
 800da1a:	f043 0303 	orr.w	r3, r3, #3
 800da1e:	b29a      	uxth	r2, r3
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800da24:	f06f 0301 	mvn.w	r3, #1
 800da28:	e023      	b.n	800da72 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800da2a:	7dbb      	ldrb	r3, [r7, #22]
 800da2c:	7dfa      	ldrb	r2, [r7, #23]
 800da2e:	6939      	ldr	r1, [r7, #16]
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	f7ff feed 	bl	800d810 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800da36:	687a      	ldr	r2, [r7, #4]
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	3304      	adds	r3, #4
 800da3c:	6939      	ldr	r1, [r7, #16]
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f7ff ff24 	bl	800d88c <tcp_output_control_segment>
 800da44:	4603      	mov	r3, r0
 800da46:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800da48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d007      	beq.n	800da60 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	8b5b      	ldrh	r3, [r3, #26]
 800da54:	f043 0303 	orr.w	r3, r3, #3
 800da58:	b29a      	uxth	r2, r3
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	835a      	strh	r2, [r3, #26]
 800da5e:	e006      	b.n	800da6e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	8b5b      	ldrh	r3, [r3, #26]
 800da64:	f023 0303 	bic.w	r3, r3, #3
 800da68:	b29a      	uxth	r2, r3
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800da6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800da72:	4618      	mov	r0, r3
 800da74:	371c      	adds	r7, #28
 800da76:	46bd      	mov	sp, r7
 800da78:	bd90      	pop	{r4, r7, pc}
 800da7a:	bf00      	nop
 800da7c:	08014aa0 	.word	0x08014aa0
 800da80:	0801525c 	.word	0x0801525c
 800da84:	08014af4 	.word	0x08014af4

0800da88 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800da88:	b590      	push	{r4, r7, lr}
 800da8a:	b087      	sub	sp, #28
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800da90:	2300      	movs	r3, #0
 800da92:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d106      	bne.n	800daa8 <tcp_keepalive+0x20>
 800da9a:	4b18      	ldr	r3, [pc, #96]	@ (800dafc <tcp_keepalive+0x74>)
 800da9c:	f640 0224 	movw	r2, #2084	@ 0x824
 800daa0:	4917      	ldr	r1, [pc, #92]	@ (800db00 <tcp_keepalive+0x78>)
 800daa2:	4818      	ldr	r0, [pc, #96]	@ (800db04 <tcp_keepalive+0x7c>)
 800daa4:	f004 fb60 	bl	8012168 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800daa8:	7dfb      	ldrb	r3, [r7, #23]
 800daaa:	b29c      	uxth	r4, r3
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dab0:	3b01      	subs	r3, #1
 800dab2:	4618      	mov	r0, r3
 800dab4:	f7f8 fb74 	bl	80061a0 <lwip_htonl>
 800dab8:	4603      	mov	r3, r0
 800daba:	2200      	movs	r2, #0
 800dabc:	4621      	mov	r1, r4
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f7ff fe68 	bl	800d794 <tcp_output_alloc_header>
 800dac4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d102      	bne.n	800dad2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800dacc:	f04f 33ff 	mov.w	r3, #4294967295
 800dad0:	e010      	b.n	800daf4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dad2:	7dfb      	ldrb	r3, [r7, #23]
 800dad4:	2200      	movs	r2, #0
 800dad6:	6939      	ldr	r1, [r7, #16]
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f7ff fe99 	bl	800d810 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dade:	687a      	ldr	r2, [r7, #4]
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	3304      	adds	r3, #4
 800dae4:	6939      	ldr	r1, [r7, #16]
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f7ff fed0 	bl	800d88c <tcp_output_control_segment>
 800daec:	4603      	mov	r3, r0
 800daee:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800daf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	371c      	adds	r7, #28
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd90      	pop	{r4, r7, pc}
 800dafc:	08014aa0 	.word	0x08014aa0
 800db00:	0801527c 	.word	0x0801527c
 800db04:	08014af4 	.word	0x08014af4

0800db08 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800db08:	b590      	push	{r4, r7, lr}
 800db0a:	b08b      	sub	sp, #44	@ 0x2c
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800db10:	2300      	movs	r3, #0
 800db12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d106      	bne.n	800db2a <tcp_zero_window_probe+0x22>
 800db1c:	4b4c      	ldr	r3, [pc, #304]	@ (800dc50 <tcp_zero_window_probe+0x148>)
 800db1e:	f640 024f 	movw	r2, #2127	@ 0x84f
 800db22:	494c      	ldr	r1, [pc, #304]	@ (800dc54 <tcp_zero_window_probe+0x14c>)
 800db24:	484c      	ldr	r0, [pc, #304]	@ (800dc58 <tcp_zero_window_probe+0x150>)
 800db26:	f004 fb1f 	bl	8012168 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db2e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800db30:	6a3b      	ldr	r3, [r7, #32]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d101      	bne.n	800db3a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800db36:	2300      	movs	r3, #0
 800db38:	e086      	b.n	800dc48 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800db40:	2bff      	cmp	r3, #255	@ 0xff
 800db42:	d007      	beq.n	800db54 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800db4a:	3301      	adds	r3, #1
 800db4c:	b2da      	uxtb	r2, r3
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800db54:	6a3b      	ldr	r3, [r7, #32]
 800db56:	68db      	ldr	r3, [r3, #12]
 800db58:	899b      	ldrh	r3, [r3, #12]
 800db5a:	b29b      	uxth	r3, r3
 800db5c:	4618      	mov	r0, r3
 800db5e:	f7f8 fb09 	bl	8006174 <lwip_htons>
 800db62:	4603      	mov	r3, r0
 800db64:	b2db      	uxtb	r3, r3
 800db66:	f003 0301 	and.w	r3, r3, #1
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d005      	beq.n	800db7a <tcp_zero_window_probe+0x72>
 800db6e:	6a3b      	ldr	r3, [r7, #32]
 800db70:	891b      	ldrh	r3, [r3, #8]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d101      	bne.n	800db7a <tcp_zero_window_probe+0x72>
 800db76:	2301      	movs	r3, #1
 800db78:	e000      	b.n	800db7c <tcp_zero_window_probe+0x74>
 800db7a:	2300      	movs	r3, #0
 800db7c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800db7e:	7ffb      	ldrb	r3, [r7, #31]
 800db80:	2b00      	cmp	r3, #0
 800db82:	bf0c      	ite	eq
 800db84:	2301      	moveq	r3, #1
 800db86:	2300      	movne	r3, #0
 800db88:	b2db      	uxtb	r3, r3
 800db8a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800db8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db90:	b299      	uxth	r1, r3
 800db92:	6a3b      	ldr	r3, [r7, #32]
 800db94:	68db      	ldr	r3, [r3, #12]
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	8bba      	ldrh	r2, [r7, #28]
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f7ff fdfa 	bl	800d794 <tcp_output_alloc_header>
 800dba0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800dba2:	69bb      	ldr	r3, [r7, #24]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d102      	bne.n	800dbae <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800dba8:	f04f 33ff 	mov.w	r3, #4294967295
 800dbac:	e04c      	b.n	800dc48 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800dbae:	69bb      	ldr	r3, [r7, #24]
 800dbb0:	685b      	ldr	r3, [r3, #4]
 800dbb2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800dbb4:	7ffb      	ldrb	r3, [r7, #31]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d011      	beq.n	800dbde <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	899b      	ldrh	r3, [r3, #12]
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	b21b      	sxth	r3, r3
 800dbc2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800dbc6:	b21c      	sxth	r4, r3
 800dbc8:	2011      	movs	r0, #17
 800dbca:	f7f8 fad3 	bl	8006174 <lwip_htons>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	b21b      	sxth	r3, r3
 800dbd2:	4323      	orrs	r3, r4
 800dbd4:	b21b      	sxth	r3, r3
 800dbd6:	b29a      	uxth	r2, r3
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	819a      	strh	r2, [r3, #12]
 800dbdc:	e010      	b.n	800dc00 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800dbde:	69bb      	ldr	r3, [r7, #24]
 800dbe0:	685b      	ldr	r3, [r3, #4]
 800dbe2:	3314      	adds	r3, #20
 800dbe4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800dbe6:	6a3b      	ldr	r3, [r7, #32]
 800dbe8:	6858      	ldr	r0, [r3, #4]
 800dbea:	6a3b      	ldr	r3, [r7, #32]
 800dbec:	685b      	ldr	r3, [r3, #4]
 800dbee:	891a      	ldrh	r2, [r3, #8]
 800dbf0:	6a3b      	ldr	r3, [r7, #32]
 800dbf2:	891b      	ldrh	r3, [r3, #8]
 800dbf4:	1ad3      	subs	r3, r2, r3
 800dbf6:	b29b      	uxth	r3, r3
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	6939      	ldr	r1, [r7, #16]
 800dbfc:	f7fa f802 	bl	8007c04 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800dc00:	6a3b      	ldr	r3, [r7, #32]
 800dc02:	68db      	ldr	r3, [r3, #12]
 800dc04:	685b      	ldr	r3, [r3, #4]
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7f8 faca 	bl	80061a0 <lwip_htonl>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	3301      	adds	r3, #1
 800dc10:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	1ad3      	subs	r3, r2, r3
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	da02      	bge.n	800dc24 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	68fa      	ldr	r2, [r7, #12]
 800dc22:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dc24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc28:	2200      	movs	r2, #0
 800dc2a:	69b9      	ldr	r1, [r7, #24]
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f7ff fdef 	bl	800d810 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dc32:	687a      	ldr	r2, [r7, #4]
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	3304      	adds	r3, #4
 800dc38:	69b9      	ldr	r1, [r7, #24]
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f7ff fe26 	bl	800d88c <tcp_output_control_segment>
 800dc40:	4603      	mov	r3, r0
 800dc42:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800dc44:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	372c      	adds	r7, #44	@ 0x2c
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd90      	pop	{r4, r7, pc}
 800dc50:	08014aa0 	.word	0x08014aa0
 800dc54:	08015298 	.word	0x08015298
 800dc58:	08014af4 	.word	0x08014af4

0800dc5c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b082      	sub	sp, #8
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800dc64:	f7fa f8bc 	bl	8007de0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800dc68:	4b0a      	ldr	r3, [pc, #40]	@ (800dc94 <tcpip_tcp_timer+0x38>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d103      	bne.n	800dc78 <tcpip_tcp_timer+0x1c>
 800dc70:	4b09      	ldr	r3, [pc, #36]	@ (800dc98 <tcpip_tcp_timer+0x3c>)
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d005      	beq.n	800dc84 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dc78:	2200      	movs	r2, #0
 800dc7a:	4908      	ldr	r1, [pc, #32]	@ (800dc9c <tcpip_tcp_timer+0x40>)
 800dc7c:	20fa      	movs	r0, #250	@ 0xfa
 800dc7e:	f000 f8f3 	bl	800de68 <sys_timeout>
 800dc82:	e003      	b.n	800dc8c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800dc84:	4b06      	ldr	r3, [pc, #24]	@ (800dca0 <tcpip_tcp_timer+0x44>)
 800dc86:	2200      	movs	r2, #0
 800dc88:	601a      	str	r2, [r3, #0]
  }
}
 800dc8a:	bf00      	nop
 800dc8c:	bf00      	nop
 800dc8e:	3708      	adds	r7, #8
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}
 800dc94:	2000843c 	.word	0x2000843c
 800dc98:	20008440 	.word	0x20008440
 800dc9c:	0800dc5d 	.word	0x0800dc5d
 800dca0:	20008488 	.word	0x20008488

0800dca4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800dca8:	4b0a      	ldr	r3, [pc, #40]	@ (800dcd4 <tcp_timer_needed+0x30>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d10f      	bne.n	800dcd0 <tcp_timer_needed+0x2c>
 800dcb0:	4b09      	ldr	r3, [pc, #36]	@ (800dcd8 <tcp_timer_needed+0x34>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d103      	bne.n	800dcc0 <tcp_timer_needed+0x1c>
 800dcb8:	4b08      	ldr	r3, [pc, #32]	@ (800dcdc <tcp_timer_needed+0x38>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d007      	beq.n	800dcd0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800dcc0:	4b04      	ldr	r3, [pc, #16]	@ (800dcd4 <tcp_timer_needed+0x30>)
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	4905      	ldr	r1, [pc, #20]	@ (800dce0 <tcp_timer_needed+0x3c>)
 800dcca:	20fa      	movs	r0, #250	@ 0xfa
 800dccc:	f000 f8cc 	bl	800de68 <sys_timeout>
  }
}
 800dcd0:	bf00      	nop
 800dcd2:	bd80      	pop	{r7, pc}
 800dcd4:	20008488 	.word	0x20008488
 800dcd8:	2000843c 	.word	0x2000843c
 800dcdc:	20008440 	.word	0x20008440
 800dce0:	0800dc5d 	.word	0x0800dc5d

0800dce4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b086      	sub	sp, #24
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	60f8      	str	r0, [r7, #12]
 800dcec:	60b9      	str	r1, [r7, #8]
 800dcee:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800dcf0:	2006      	movs	r0, #6
 800dcf2:	f7f8 feb7 	bl	8006a64 <memp_malloc>
 800dcf6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d109      	bne.n	800dd12 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d151      	bne.n	800dda8 <sys_timeout_abs+0xc4>
 800dd04:	4b2a      	ldr	r3, [pc, #168]	@ (800ddb0 <sys_timeout_abs+0xcc>)
 800dd06:	22be      	movs	r2, #190	@ 0xbe
 800dd08:	492a      	ldr	r1, [pc, #168]	@ (800ddb4 <sys_timeout_abs+0xd0>)
 800dd0a:	482b      	ldr	r0, [pc, #172]	@ (800ddb8 <sys_timeout_abs+0xd4>)
 800dd0c:	f004 fa2c 	bl	8012168 <iprintf>
    return;
 800dd10:	e04a      	b.n	800dda8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800dd12:	693b      	ldr	r3, [r7, #16]
 800dd14:	2200      	movs	r2, #0
 800dd16:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	68ba      	ldr	r2, [r7, #8]
 800dd1c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	687a      	ldr	r2, [r7, #4]
 800dd22:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	68fa      	ldr	r2, [r7, #12]
 800dd28:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800dd2a:	4b24      	ldr	r3, [pc, #144]	@ (800ddbc <sys_timeout_abs+0xd8>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d103      	bne.n	800dd3a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800dd32:	4a22      	ldr	r2, [pc, #136]	@ (800ddbc <sys_timeout_abs+0xd8>)
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	6013      	str	r3, [r2, #0]
    return;
 800dd38:	e037      	b.n	800ddaa <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	685a      	ldr	r2, [r3, #4]
 800dd3e:	4b1f      	ldr	r3, [pc, #124]	@ (800ddbc <sys_timeout_abs+0xd8>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	685b      	ldr	r3, [r3, #4]
 800dd44:	1ad3      	subs	r3, r2, r3
 800dd46:	0fdb      	lsrs	r3, r3, #31
 800dd48:	f003 0301 	and.w	r3, r3, #1
 800dd4c:	b2db      	uxtb	r3, r3
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d007      	beq.n	800dd62 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800dd52:	4b1a      	ldr	r3, [pc, #104]	@ (800ddbc <sys_timeout_abs+0xd8>)
 800dd54:	681a      	ldr	r2, [r3, #0]
 800dd56:	693b      	ldr	r3, [r7, #16]
 800dd58:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800dd5a:	4a18      	ldr	r2, [pc, #96]	@ (800ddbc <sys_timeout_abs+0xd8>)
 800dd5c:	693b      	ldr	r3, [r7, #16]
 800dd5e:	6013      	str	r3, [r2, #0]
 800dd60:	e023      	b.n	800ddaa <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800dd62:	4b16      	ldr	r3, [pc, #88]	@ (800ddbc <sys_timeout_abs+0xd8>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	617b      	str	r3, [r7, #20]
 800dd68:	e01a      	b.n	800dda0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d00b      	beq.n	800dd8a <sys_timeout_abs+0xa6>
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	685a      	ldr	r2, [r3, #4]
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	685b      	ldr	r3, [r3, #4]
 800dd7c:	1ad3      	subs	r3, r2, r3
 800dd7e:	0fdb      	lsrs	r3, r3, #31
 800dd80:	f003 0301 	and.w	r3, r3, #1
 800dd84:	b2db      	uxtb	r3, r3
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d007      	beq.n	800dd9a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	681a      	ldr	r2, [r3, #0]
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	693a      	ldr	r2, [r7, #16]
 800dd96:	601a      	str	r2, [r3, #0]
        break;
 800dd98:	e007      	b.n	800ddaa <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	617b      	str	r3, [r7, #20]
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d1e1      	bne.n	800dd6a <sys_timeout_abs+0x86>
 800dda6:	e000      	b.n	800ddaa <sys_timeout_abs+0xc6>
    return;
 800dda8:	bf00      	nop
      }
    }
  }
}
 800ddaa:	3718      	adds	r7, #24
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}
 800ddb0:	080152bc 	.word	0x080152bc
 800ddb4:	080152f0 	.word	0x080152f0
 800ddb8:	08015330 	.word	0x08015330
 800ddbc:	20008480 	.word	0x20008480

0800ddc0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b086      	sub	sp, #24
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	685b      	ldr	r3, [r3, #4]
 800ddd0:	4798      	blx	r3

  now = sys_now();
 800ddd2:	f7f7 ffcf 	bl	8005d74 <sys_now>
 800ddd6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	681a      	ldr	r2, [r3, #0]
 800dddc:	4b0f      	ldr	r3, [pc, #60]	@ (800de1c <lwip_cyclic_timer+0x5c>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	4413      	add	r3, r2
 800dde2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800dde4:	68fa      	ldr	r2, [r7, #12]
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	1ad3      	subs	r3, r2, r3
 800ddea:	0fdb      	lsrs	r3, r3, #31
 800ddec:	f003 0301 	and.w	r3, r3, #1
 800ddf0:	b2db      	uxtb	r3, r3
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d009      	beq.n	800de0a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	681a      	ldr	r2, [r3, #0]
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	4413      	add	r3, r2
 800ddfe:	687a      	ldr	r2, [r7, #4]
 800de00:	4907      	ldr	r1, [pc, #28]	@ (800de20 <lwip_cyclic_timer+0x60>)
 800de02:	4618      	mov	r0, r3
 800de04:	f7ff ff6e 	bl	800dce4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800de08:	e004      	b.n	800de14 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800de0a:	687a      	ldr	r2, [r7, #4]
 800de0c:	4904      	ldr	r1, [pc, #16]	@ (800de20 <lwip_cyclic_timer+0x60>)
 800de0e:	68f8      	ldr	r0, [r7, #12]
 800de10:	f7ff ff68 	bl	800dce4 <sys_timeout_abs>
}
 800de14:	bf00      	nop
 800de16:	3718      	adds	r7, #24
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}
 800de1c:	20008484 	.word	0x20008484
 800de20:	0800ddc1 	.word	0x0800ddc1

0800de24 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b082      	sub	sp, #8
 800de28:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800de2a:	2301      	movs	r3, #1
 800de2c:	607b      	str	r3, [r7, #4]
 800de2e:	e00e      	b.n	800de4e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800de30:	4a0b      	ldr	r2, [pc, #44]	@ (800de60 <sys_timeouts_init+0x3c>)
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	00db      	lsls	r3, r3, #3
 800de3c:	4a08      	ldr	r2, [pc, #32]	@ (800de60 <sys_timeouts_init+0x3c>)
 800de3e:	4413      	add	r3, r2
 800de40:	461a      	mov	r2, r3
 800de42:	4908      	ldr	r1, [pc, #32]	@ (800de64 <sys_timeouts_init+0x40>)
 800de44:	f000 f810 	bl	800de68 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	3301      	adds	r3, #1
 800de4c:	607b      	str	r3, [r7, #4]
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2b02      	cmp	r3, #2
 800de52:	d9ed      	bls.n	800de30 <sys_timeouts_init+0xc>
  }
}
 800de54:	bf00      	nop
 800de56:	bf00      	nop
 800de58:	3708      	adds	r7, #8
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}
 800de5e:	bf00      	nop
 800de60:	08015ffc 	.word	0x08015ffc
 800de64:	0800ddc1 	.word	0x0800ddc1

0800de68 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b086      	sub	sp, #24
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	60f8      	str	r0, [r7, #12]
 800de70:	60b9      	str	r1, [r7, #8]
 800de72:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de7a:	d306      	bcc.n	800de8a <sys_timeout+0x22>
 800de7c:	4b0a      	ldr	r3, [pc, #40]	@ (800dea8 <sys_timeout+0x40>)
 800de7e:	f240 1229 	movw	r2, #297	@ 0x129
 800de82:	490a      	ldr	r1, [pc, #40]	@ (800deac <sys_timeout+0x44>)
 800de84:	480a      	ldr	r0, [pc, #40]	@ (800deb0 <sys_timeout+0x48>)
 800de86:	f004 f96f 	bl	8012168 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800de8a:	f7f7 ff73 	bl	8005d74 <sys_now>
 800de8e:	4602      	mov	r2, r0
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	4413      	add	r3, r2
 800de94:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800de96:	687a      	ldr	r2, [r7, #4]
 800de98:	68b9      	ldr	r1, [r7, #8]
 800de9a:	6978      	ldr	r0, [r7, #20]
 800de9c:	f7ff ff22 	bl	800dce4 <sys_timeout_abs>
#endif
}
 800dea0:	bf00      	nop
 800dea2:	3718      	adds	r7, #24
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}
 800dea8:	080152bc 	.word	0x080152bc
 800deac:	08015358 	.word	0x08015358
 800deb0:	08015330 	.word	0x08015330

0800deb4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b084      	sub	sp, #16
 800deb8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800deba:	f7f7 ff5b 	bl	8005d74 <sys_now>
 800debe:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800dec0:	4b1a      	ldr	r3, [pc, #104]	@ (800df2c <sys_check_timeouts+0x78>)
 800dec2:	781b      	ldrb	r3, [r3, #0]
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d001      	beq.n	800dece <sys_check_timeouts+0x1a>
 800deca:	f7f9 f977 	bl	80071bc <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800dece:	4b18      	ldr	r3, [pc, #96]	@ (800df30 <sys_check_timeouts+0x7c>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d022      	beq.n	800df20 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	685b      	ldr	r3, [r3, #4]
 800dede:	68fa      	ldr	r2, [r7, #12]
 800dee0:	1ad3      	subs	r3, r2, r3
 800dee2:	0fdb      	lsrs	r3, r3, #31
 800dee4:	f003 0301 	and.w	r3, r3, #1
 800dee8:	b2db      	uxtb	r3, r3
 800deea:	2b00      	cmp	r3, #0
 800deec:	d11a      	bne.n	800df24 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	4a0f      	ldr	r2, [pc, #60]	@ (800df30 <sys_check_timeouts+0x7c>)
 800def4:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	689b      	ldr	r3, [r3, #8]
 800defa:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800defc:	68bb      	ldr	r3, [r7, #8]
 800defe:	68db      	ldr	r3, [r3, #12]
 800df00:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	685b      	ldr	r3, [r3, #4]
 800df06:	4a0b      	ldr	r2, [pc, #44]	@ (800df34 <sys_check_timeouts+0x80>)
 800df08:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800df0a:	68b9      	ldr	r1, [r7, #8]
 800df0c:	2006      	movs	r0, #6
 800df0e:	f7f8 fe19 	bl	8006b44 <memp_free>
    if (handler != NULL) {
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d0d3      	beq.n	800dec0 <sys_check_timeouts+0xc>
      handler(arg);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6838      	ldr	r0, [r7, #0]
 800df1c:	4798      	blx	r3
  do {
 800df1e:	e7cf      	b.n	800dec0 <sys_check_timeouts+0xc>
      return;
 800df20:	bf00      	nop
 800df22:	e000      	b.n	800df26 <sys_check_timeouts+0x72>
      return;
 800df24:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800df26:	3710      	adds	r7, #16
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}
 800df2c:	2000842d 	.word	0x2000842d
 800df30:	20008480 	.word	0x20008480
 800df34:	20008484 	.word	0x20008484

0800df38 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800df3c:	f004 f802 	bl	8011f44 <rand>
 800df40:	4603      	mov	r3, r0
 800df42:	b29b      	uxth	r3, r3
 800df44:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800df48:	b29b      	uxth	r3, r3
 800df4a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800df4e:	b29a      	uxth	r2, r3
 800df50:	4b01      	ldr	r3, [pc, #4]	@ (800df58 <udp_init+0x20>)
 800df52:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800df54:	bf00      	nop
 800df56:	bd80      	pop	{r7, pc}
 800df58:	20000028 	.word	0x20000028

0800df5c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b084      	sub	sp, #16
 800df60:	af00      	add	r7, sp, #0
 800df62:	60f8      	str	r0, [r7, #12]
 800df64:	60b9      	str	r1, [r7, #8]
 800df66:	4613      	mov	r3, r2
 800df68:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d105      	bne.n	800df7c <udp_input_local_match+0x20>
 800df70:	4b27      	ldr	r3, [pc, #156]	@ (800e010 <udp_input_local_match+0xb4>)
 800df72:	2287      	movs	r2, #135	@ 0x87
 800df74:	4927      	ldr	r1, [pc, #156]	@ (800e014 <udp_input_local_match+0xb8>)
 800df76:	4828      	ldr	r0, [pc, #160]	@ (800e018 <udp_input_local_match+0xbc>)
 800df78:	f004 f8f6 	bl	8012168 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d105      	bne.n	800df8e <udp_input_local_match+0x32>
 800df82:	4b23      	ldr	r3, [pc, #140]	@ (800e010 <udp_input_local_match+0xb4>)
 800df84:	2288      	movs	r2, #136	@ 0x88
 800df86:	4925      	ldr	r1, [pc, #148]	@ (800e01c <udp_input_local_match+0xc0>)
 800df88:	4823      	ldr	r0, [pc, #140]	@ (800e018 <udp_input_local_match+0xbc>)
 800df8a:	f004 f8ed 	bl	8012168 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	7a1b      	ldrb	r3, [r3, #8]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d00b      	beq.n	800dfae <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	7a1a      	ldrb	r2, [r3, #8]
 800df9a:	4b21      	ldr	r3, [pc, #132]	@ (800e020 <udp_input_local_match+0xc4>)
 800df9c:	685b      	ldr	r3, [r3, #4]
 800df9e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dfa6:	429a      	cmp	r2, r3
 800dfa8:	d001      	beq.n	800dfae <udp_input_local_match+0x52>
    return 0;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	e02b      	b.n	800e006 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800dfae:	79fb      	ldrb	r3, [r7, #7]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d018      	beq.n	800dfe6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d013      	beq.n	800dfe2 <udp_input_local_match+0x86>
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d00f      	beq.n	800dfe2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800dfc2:	4b17      	ldr	r3, [pc, #92]	@ (800e020 <udp_input_local_match+0xc4>)
 800dfc4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dfc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfca:	d00a      	beq.n	800dfe2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	681a      	ldr	r2, [r3, #0]
 800dfd0:	4b13      	ldr	r3, [pc, #76]	@ (800e020 <udp_input_local_match+0xc4>)
 800dfd2:	695b      	ldr	r3, [r3, #20]
 800dfd4:	405a      	eors	r2, r3
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	3308      	adds	r3, #8
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d110      	bne.n	800e004 <udp_input_local_match+0xa8>
          return 1;
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	e00f      	b.n	800e006 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d009      	beq.n	800e000 <udp_input_local_match+0xa4>
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d005      	beq.n	800e000 <udp_input_local_match+0xa4>
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	681a      	ldr	r2, [r3, #0]
 800dff8:	4b09      	ldr	r3, [pc, #36]	@ (800e020 <udp_input_local_match+0xc4>)
 800dffa:	695b      	ldr	r3, [r3, #20]
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d101      	bne.n	800e004 <udp_input_local_match+0xa8>
        return 1;
 800e000:	2301      	movs	r3, #1
 800e002:	e000      	b.n	800e006 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e004:	2300      	movs	r3, #0
}
 800e006:	4618      	mov	r0, r3
 800e008:	3710      	adds	r7, #16
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}
 800e00e:	bf00      	nop
 800e010:	080153a4 	.word	0x080153a4
 800e014:	080153d4 	.word	0x080153d4
 800e018:	080153f8 	.word	0x080153f8
 800e01c:	08015420 	.word	0x08015420
 800e020:	20004ec0 	.word	0x20004ec0

0800e024 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e024:	b590      	push	{r4, r7, lr}
 800e026:	b08d      	sub	sp, #52	@ 0x34
 800e028:	af02      	add	r7, sp, #8
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e02e:	2300      	movs	r3, #0
 800e030:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d105      	bne.n	800e044 <udp_input+0x20>
 800e038:	4b7c      	ldr	r3, [pc, #496]	@ (800e22c <udp_input+0x208>)
 800e03a:	22cf      	movs	r2, #207	@ 0xcf
 800e03c:	497c      	ldr	r1, [pc, #496]	@ (800e230 <udp_input+0x20c>)
 800e03e:	487d      	ldr	r0, [pc, #500]	@ (800e234 <udp_input+0x210>)
 800e040:	f004 f892 	bl	8012168 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d105      	bne.n	800e056 <udp_input+0x32>
 800e04a:	4b78      	ldr	r3, [pc, #480]	@ (800e22c <udp_input+0x208>)
 800e04c:	22d0      	movs	r2, #208	@ 0xd0
 800e04e:	497a      	ldr	r1, [pc, #488]	@ (800e238 <udp_input+0x214>)
 800e050:	4878      	ldr	r0, [pc, #480]	@ (800e234 <udp_input+0x210>)
 800e052:	f004 f889 	bl	8012168 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	895b      	ldrh	r3, [r3, #10]
 800e05a:	2b07      	cmp	r3, #7
 800e05c:	d803      	bhi.n	800e066 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e05e:	6878      	ldr	r0, [r7, #4]
 800e060:	f7f9 fbe6 	bl	8007830 <pbuf_free>
    goto end;
 800e064:	e0de      	b.n	800e224 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e06c:	4b73      	ldr	r3, [pc, #460]	@ (800e23c <udp_input+0x218>)
 800e06e:	695b      	ldr	r3, [r3, #20]
 800e070:	4a72      	ldr	r2, [pc, #456]	@ (800e23c <udp_input+0x218>)
 800e072:	6812      	ldr	r2, [r2, #0]
 800e074:	4611      	mov	r1, r2
 800e076:	4618      	mov	r0, r3
 800e078:	f001 fc88 	bl	800f98c <ip4_addr_isbroadcast_u32>
 800e07c:	4603      	mov	r3, r0
 800e07e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	881b      	ldrh	r3, [r3, #0]
 800e084:	b29b      	uxth	r3, r3
 800e086:	4618      	mov	r0, r3
 800e088:	f7f8 f874 	bl	8006174 <lwip_htons>
 800e08c:	4603      	mov	r3, r0
 800e08e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e090:	697b      	ldr	r3, [r7, #20]
 800e092:	885b      	ldrh	r3, [r3, #2]
 800e094:	b29b      	uxth	r3, r3
 800e096:	4618      	mov	r0, r3
 800e098:	f7f8 f86c 	bl	8006174 <lwip_htons>
 800e09c:	4603      	mov	r3, r0
 800e09e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0ac:	4b64      	ldr	r3, [pc, #400]	@ (800e240 <udp_input+0x21c>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800e0b2:	e054      	b.n	800e15e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0b6:	8a5b      	ldrh	r3, [r3, #18]
 800e0b8:	89fa      	ldrh	r2, [r7, #14]
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d14a      	bne.n	800e154 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e0be:	7cfb      	ldrb	r3, [r7, #19]
 800e0c0:	461a      	mov	r2, r3
 800e0c2:	6839      	ldr	r1, [r7, #0]
 800e0c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e0c6:	f7ff ff49 	bl	800df5c <udp_input_local_match>
 800e0ca:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d041      	beq.n	800e154 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0d2:	7c1b      	ldrb	r3, [r3, #16]
 800e0d4:	f003 0304 	and.w	r3, r3, #4
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d11d      	bne.n	800e118 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e0dc:	69fb      	ldr	r3, [r7, #28]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d102      	bne.n	800e0e8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e0e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0e4:	61fb      	str	r3, [r7, #28]
 800e0e6:	e017      	b.n	800e118 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e0e8:	7cfb      	ldrb	r3, [r7, #19]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d014      	beq.n	800e118 <udp_input+0xf4>
 800e0ee:	4b53      	ldr	r3, [pc, #332]	@ (800e23c <udp_input+0x218>)
 800e0f0:	695b      	ldr	r3, [r3, #20]
 800e0f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0f6:	d10f      	bne.n	800e118 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e0f8:	69fb      	ldr	r3, [r7, #28]
 800e0fa:	681a      	ldr	r2, [r3, #0]
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	3304      	adds	r3, #4
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	429a      	cmp	r2, r3
 800e104:	d008      	beq.n	800e118 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e108:	681a      	ldr	r2, [r3, #0]
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	3304      	adds	r3, #4
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	429a      	cmp	r2, r3
 800e112:	d101      	bne.n	800e118 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e116:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e11a:	8a9b      	ldrh	r3, [r3, #20]
 800e11c:	8a3a      	ldrh	r2, [r7, #16]
 800e11e:	429a      	cmp	r2, r3
 800e120:	d118      	bne.n	800e154 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e124:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e126:	2b00      	cmp	r3, #0
 800e128:	d005      	beq.n	800e136 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e12c:	685a      	ldr	r2, [r3, #4]
 800e12e:	4b43      	ldr	r3, [pc, #268]	@ (800e23c <udp_input+0x218>)
 800e130:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e132:	429a      	cmp	r2, r3
 800e134:	d10e      	bne.n	800e154 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e136:	6a3b      	ldr	r3, [r7, #32]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d014      	beq.n	800e166 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e13e:	68da      	ldr	r2, [r3, #12]
 800e140:	6a3b      	ldr	r3, [r7, #32]
 800e142:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e144:	4b3e      	ldr	r3, [pc, #248]	@ (800e240 <udp_input+0x21c>)
 800e146:	681a      	ldr	r2, [r3, #0]
 800e148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e14a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e14c:	4a3c      	ldr	r2, [pc, #240]	@ (800e240 <udp_input+0x21c>)
 800e14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e150:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e152:	e008      	b.n	800e166 <udp_input+0x142>
      }
    }

    prev = pcb;
 800e154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e156:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e15a:	68db      	ldr	r3, [r3, #12]
 800e15c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e15e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e160:	2b00      	cmp	r3, #0
 800e162:	d1a7      	bne.n	800e0b4 <udp_input+0x90>
 800e164:	e000      	b.n	800e168 <udp_input+0x144>
        break;
 800e166:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d101      	bne.n	800e172 <udp_input+0x14e>
    pcb = uncon_pcb;
 800e16e:	69fb      	ldr	r3, [r7, #28]
 800e170:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e174:	2b00      	cmp	r3, #0
 800e176:	d002      	beq.n	800e17e <udp_input+0x15a>
    for_us = 1;
 800e178:	2301      	movs	r3, #1
 800e17a:	76fb      	strb	r3, [r7, #27]
 800e17c:	e00a      	b.n	800e194 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	3304      	adds	r3, #4
 800e182:	681a      	ldr	r2, [r3, #0]
 800e184:	4b2d      	ldr	r3, [pc, #180]	@ (800e23c <udp_input+0x218>)
 800e186:	695b      	ldr	r3, [r3, #20]
 800e188:	429a      	cmp	r2, r3
 800e18a:	bf0c      	ite	eq
 800e18c:	2301      	moveq	r3, #1
 800e18e:	2300      	movne	r3, #0
 800e190:	b2db      	uxtb	r3, r3
 800e192:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e194:	7efb      	ldrb	r3, [r7, #27]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d041      	beq.n	800e21e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e19a:	2108      	movs	r1, #8
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f7f9 fac1 	bl	8007724 <pbuf_remove_header>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d00a      	beq.n	800e1be <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e1a8:	4b20      	ldr	r3, [pc, #128]	@ (800e22c <udp_input+0x208>)
 800e1aa:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800e1ae:	4925      	ldr	r1, [pc, #148]	@ (800e244 <udp_input+0x220>)
 800e1b0:	4820      	ldr	r0, [pc, #128]	@ (800e234 <udp_input+0x210>)
 800e1b2:	f003 ffd9 	bl	8012168 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f7f9 fb3a 	bl	8007830 <pbuf_free>
      goto end;
 800e1bc:	e032      	b.n	800e224 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d012      	beq.n	800e1ea <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1c6:	699b      	ldr	r3, [r3, #24]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d00a      	beq.n	800e1e2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1ce:	699c      	ldr	r4, [r3, #24]
 800e1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1d2:	69d8      	ldr	r0, [r3, #28]
 800e1d4:	8a3b      	ldrh	r3, [r7, #16]
 800e1d6:	9300      	str	r3, [sp, #0]
 800e1d8:	4b1b      	ldr	r3, [pc, #108]	@ (800e248 <udp_input+0x224>)
 800e1da:	687a      	ldr	r2, [r7, #4]
 800e1dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e1de:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e1e0:	e021      	b.n	800e226 <udp_input+0x202>
        pbuf_free(p);
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f7f9 fb24 	bl	8007830 <pbuf_free>
        goto end;
 800e1e8:	e01c      	b.n	800e224 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e1ea:	7cfb      	ldrb	r3, [r7, #19]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d112      	bne.n	800e216 <udp_input+0x1f2>
 800e1f0:	4b12      	ldr	r3, [pc, #72]	@ (800e23c <udp_input+0x218>)
 800e1f2:	695b      	ldr	r3, [r3, #20]
 800e1f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e1f8:	2be0      	cmp	r3, #224	@ 0xe0
 800e1fa:	d00c      	beq.n	800e216 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e1fc:	4b0f      	ldr	r3, [pc, #60]	@ (800e23c <udp_input+0x218>)
 800e1fe:	899b      	ldrh	r3, [r3, #12]
 800e200:	3308      	adds	r3, #8
 800e202:	b29b      	uxth	r3, r3
 800e204:	b21b      	sxth	r3, r3
 800e206:	4619      	mov	r1, r3
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f7f9 fafe 	bl	800780a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e20e:	2103      	movs	r1, #3
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f001 f89b 	bl	800f34c <icmp_dest_unreach>
      pbuf_free(p);
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f7f9 fb0a 	bl	8007830 <pbuf_free>
  return;
 800e21c:	e003      	b.n	800e226 <udp_input+0x202>
    pbuf_free(p);
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f7f9 fb06 	bl	8007830 <pbuf_free>
  return;
 800e224:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e226:	372c      	adds	r7, #44	@ 0x2c
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd90      	pop	{r4, r7, pc}
 800e22c:	080153a4 	.word	0x080153a4
 800e230:	08015448 	.word	0x08015448
 800e234:	080153f8 	.word	0x080153f8
 800e238:	08015460 	.word	0x08015460
 800e23c:	20004ec0 	.word	0x20004ec0
 800e240:	2000848c 	.word	0x2000848c
 800e244:	0801547c 	.word	0x0801547c
 800e248:	20004ed0 	.word	0x20004ed0

0800e24c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e24c:	b480      	push	{r7}
 800e24e:	b085      	sub	sp, #20
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d01e      	beq.n	800e29a <udp_netif_ip_addr_changed+0x4e>
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d01a      	beq.n	800e29a <udp_netif_ip_addr_changed+0x4e>
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d017      	beq.n	800e29a <udp_netif_ip_addr_changed+0x4e>
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d013      	beq.n	800e29a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e272:	4b0d      	ldr	r3, [pc, #52]	@ (800e2a8 <udp_netif_ip_addr_changed+0x5c>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	60fb      	str	r3, [r7, #12]
 800e278:	e00c      	b.n	800e294 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681a      	ldr	r2, [r3, #0]
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	429a      	cmp	r2, r3
 800e284:	d103      	bne.n	800e28e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	681a      	ldr	r2, [r3, #0]
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	68db      	ldr	r3, [r3, #12]
 800e292:	60fb      	str	r3, [r7, #12]
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d1ef      	bne.n	800e27a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e29a:	bf00      	nop
 800e29c:	3714      	adds	r7, #20
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a4:	4770      	bx	lr
 800e2a6:	bf00      	nop
 800e2a8:	2000848c 	.word	0x2000848c

0800e2ac <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b082      	sub	sp, #8
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e2b4:	4915      	ldr	r1, [pc, #84]	@ (800e30c <etharp_free_entry+0x60>)
 800e2b6:	687a      	ldr	r2, [r7, #4]
 800e2b8:	4613      	mov	r3, r2
 800e2ba:	005b      	lsls	r3, r3, #1
 800e2bc:	4413      	add	r3, r2
 800e2be:	00db      	lsls	r3, r3, #3
 800e2c0:	440b      	add	r3, r1
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d013      	beq.n	800e2f0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e2c8:	4910      	ldr	r1, [pc, #64]	@ (800e30c <etharp_free_entry+0x60>)
 800e2ca:	687a      	ldr	r2, [r7, #4]
 800e2cc:	4613      	mov	r3, r2
 800e2ce:	005b      	lsls	r3, r3, #1
 800e2d0:	4413      	add	r3, r2
 800e2d2:	00db      	lsls	r3, r3, #3
 800e2d4:	440b      	add	r3, r1
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f7f9 faa9 	bl	8007830 <pbuf_free>
    arp_table[i].q = NULL;
 800e2de:	490b      	ldr	r1, [pc, #44]	@ (800e30c <etharp_free_entry+0x60>)
 800e2e0:	687a      	ldr	r2, [r7, #4]
 800e2e2:	4613      	mov	r3, r2
 800e2e4:	005b      	lsls	r3, r3, #1
 800e2e6:	4413      	add	r3, r2
 800e2e8:	00db      	lsls	r3, r3, #3
 800e2ea:	440b      	add	r3, r1
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e2f0:	4906      	ldr	r1, [pc, #24]	@ (800e30c <etharp_free_entry+0x60>)
 800e2f2:	687a      	ldr	r2, [r7, #4]
 800e2f4:	4613      	mov	r3, r2
 800e2f6:	005b      	lsls	r3, r3, #1
 800e2f8:	4413      	add	r3, r2
 800e2fa:	00db      	lsls	r3, r3, #3
 800e2fc:	440b      	add	r3, r1
 800e2fe:	3314      	adds	r3, #20
 800e300:	2200      	movs	r2, #0
 800e302:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e304:	bf00      	nop
 800e306:	3708      	adds	r7, #8
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}
 800e30c:	20008490 	.word	0x20008490

0800e310 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b082      	sub	sp, #8
 800e314:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e316:	2300      	movs	r3, #0
 800e318:	607b      	str	r3, [r7, #4]
 800e31a:	e096      	b.n	800e44a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e31c:	494f      	ldr	r1, [pc, #316]	@ (800e45c <etharp_tmr+0x14c>)
 800e31e:	687a      	ldr	r2, [r7, #4]
 800e320:	4613      	mov	r3, r2
 800e322:	005b      	lsls	r3, r3, #1
 800e324:	4413      	add	r3, r2
 800e326:	00db      	lsls	r3, r3, #3
 800e328:	440b      	add	r3, r1
 800e32a:	3314      	adds	r3, #20
 800e32c:	781b      	ldrb	r3, [r3, #0]
 800e32e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800e330:	78fb      	ldrb	r3, [r7, #3]
 800e332:	2b00      	cmp	r3, #0
 800e334:	f000 8086 	beq.w	800e444 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800e338:	4948      	ldr	r1, [pc, #288]	@ (800e45c <etharp_tmr+0x14c>)
 800e33a:	687a      	ldr	r2, [r7, #4]
 800e33c:	4613      	mov	r3, r2
 800e33e:	005b      	lsls	r3, r3, #1
 800e340:	4413      	add	r3, r2
 800e342:	00db      	lsls	r3, r3, #3
 800e344:	440b      	add	r3, r1
 800e346:	3312      	adds	r3, #18
 800e348:	881b      	ldrh	r3, [r3, #0]
 800e34a:	3301      	adds	r3, #1
 800e34c:	b298      	uxth	r0, r3
 800e34e:	4943      	ldr	r1, [pc, #268]	@ (800e45c <etharp_tmr+0x14c>)
 800e350:	687a      	ldr	r2, [r7, #4]
 800e352:	4613      	mov	r3, r2
 800e354:	005b      	lsls	r3, r3, #1
 800e356:	4413      	add	r3, r2
 800e358:	00db      	lsls	r3, r3, #3
 800e35a:	440b      	add	r3, r1
 800e35c:	3312      	adds	r3, #18
 800e35e:	4602      	mov	r2, r0
 800e360:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e362:	493e      	ldr	r1, [pc, #248]	@ (800e45c <etharp_tmr+0x14c>)
 800e364:	687a      	ldr	r2, [r7, #4]
 800e366:	4613      	mov	r3, r2
 800e368:	005b      	lsls	r3, r3, #1
 800e36a:	4413      	add	r3, r2
 800e36c:	00db      	lsls	r3, r3, #3
 800e36e:	440b      	add	r3, r1
 800e370:	3312      	adds	r3, #18
 800e372:	881b      	ldrh	r3, [r3, #0]
 800e374:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800e378:	d215      	bcs.n	800e3a6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e37a:	4938      	ldr	r1, [pc, #224]	@ (800e45c <etharp_tmr+0x14c>)
 800e37c:	687a      	ldr	r2, [r7, #4]
 800e37e:	4613      	mov	r3, r2
 800e380:	005b      	lsls	r3, r3, #1
 800e382:	4413      	add	r3, r2
 800e384:	00db      	lsls	r3, r3, #3
 800e386:	440b      	add	r3, r1
 800e388:	3314      	adds	r3, #20
 800e38a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e38c:	2b01      	cmp	r3, #1
 800e38e:	d10e      	bne.n	800e3ae <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800e390:	4932      	ldr	r1, [pc, #200]	@ (800e45c <etharp_tmr+0x14c>)
 800e392:	687a      	ldr	r2, [r7, #4]
 800e394:	4613      	mov	r3, r2
 800e396:	005b      	lsls	r3, r3, #1
 800e398:	4413      	add	r3, r2
 800e39a:	00db      	lsls	r3, r3, #3
 800e39c:	440b      	add	r3, r1
 800e39e:	3312      	adds	r3, #18
 800e3a0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e3a2:	2b04      	cmp	r3, #4
 800e3a4:	d903      	bls.n	800e3ae <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f7ff ff80 	bl	800e2ac <etharp_free_entry>
 800e3ac:	e04a      	b.n	800e444 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e3ae:	492b      	ldr	r1, [pc, #172]	@ (800e45c <etharp_tmr+0x14c>)
 800e3b0:	687a      	ldr	r2, [r7, #4]
 800e3b2:	4613      	mov	r3, r2
 800e3b4:	005b      	lsls	r3, r3, #1
 800e3b6:	4413      	add	r3, r2
 800e3b8:	00db      	lsls	r3, r3, #3
 800e3ba:	440b      	add	r3, r1
 800e3bc:	3314      	adds	r3, #20
 800e3be:	781b      	ldrb	r3, [r3, #0]
 800e3c0:	2b03      	cmp	r3, #3
 800e3c2:	d10a      	bne.n	800e3da <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e3c4:	4925      	ldr	r1, [pc, #148]	@ (800e45c <etharp_tmr+0x14c>)
 800e3c6:	687a      	ldr	r2, [r7, #4]
 800e3c8:	4613      	mov	r3, r2
 800e3ca:	005b      	lsls	r3, r3, #1
 800e3cc:	4413      	add	r3, r2
 800e3ce:	00db      	lsls	r3, r3, #3
 800e3d0:	440b      	add	r3, r1
 800e3d2:	3314      	adds	r3, #20
 800e3d4:	2204      	movs	r2, #4
 800e3d6:	701a      	strb	r2, [r3, #0]
 800e3d8:	e034      	b.n	800e444 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e3da:	4920      	ldr	r1, [pc, #128]	@ (800e45c <etharp_tmr+0x14c>)
 800e3dc:	687a      	ldr	r2, [r7, #4]
 800e3de:	4613      	mov	r3, r2
 800e3e0:	005b      	lsls	r3, r3, #1
 800e3e2:	4413      	add	r3, r2
 800e3e4:	00db      	lsls	r3, r3, #3
 800e3e6:	440b      	add	r3, r1
 800e3e8:	3314      	adds	r3, #20
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	2b04      	cmp	r3, #4
 800e3ee:	d10a      	bne.n	800e406 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e3f0:	491a      	ldr	r1, [pc, #104]	@ (800e45c <etharp_tmr+0x14c>)
 800e3f2:	687a      	ldr	r2, [r7, #4]
 800e3f4:	4613      	mov	r3, r2
 800e3f6:	005b      	lsls	r3, r3, #1
 800e3f8:	4413      	add	r3, r2
 800e3fa:	00db      	lsls	r3, r3, #3
 800e3fc:	440b      	add	r3, r1
 800e3fe:	3314      	adds	r3, #20
 800e400:	2202      	movs	r2, #2
 800e402:	701a      	strb	r2, [r3, #0]
 800e404:	e01e      	b.n	800e444 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e406:	4915      	ldr	r1, [pc, #84]	@ (800e45c <etharp_tmr+0x14c>)
 800e408:	687a      	ldr	r2, [r7, #4]
 800e40a:	4613      	mov	r3, r2
 800e40c:	005b      	lsls	r3, r3, #1
 800e40e:	4413      	add	r3, r2
 800e410:	00db      	lsls	r3, r3, #3
 800e412:	440b      	add	r3, r1
 800e414:	3314      	adds	r3, #20
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	2b01      	cmp	r3, #1
 800e41a:	d113      	bne.n	800e444 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e41c:	490f      	ldr	r1, [pc, #60]	@ (800e45c <etharp_tmr+0x14c>)
 800e41e:	687a      	ldr	r2, [r7, #4]
 800e420:	4613      	mov	r3, r2
 800e422:	005b      	lsls	r3, r3, #1
 800e424:	4413      	add	r3, r2
 800e426:	00db      	lsls	r3, r3, #3
 800e428:	440b      	add	r3, r1
 800e42a:	3308      	adds	r3, #8
 800e42c:	6818      	ldr	r0, [r3, #0]
 800e42e:	687a      	ldr	r2, [r7, #4]
 800e430:	4613      	mov	r3, r2
 800e432:	005b      	lsls	r3, r3, #1
 800e434:	4413      	add	r3, r2
 800e436:	00db      	lsls	r3, r3, #3
 800e438:	4a08      	ldr	r2, [pc, #32]	@ (800e45c <etharp_tmr+0x14c>)
 800e43a:	4413      	add	r3, r2
 800e43c:	3304      	adds	r3, #4
 800e43e:	4619      	mov	r1, r3
 800e440:	f000 fe6e 	bl	800f120 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	3301      	adds	r3, #1
 800e448:	607b      	str	r3, [r7, #4]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2b09      	cmp	r3, #9
 800e44e:	f77f af65 	ble.w	800e31c <etharp_tmr+0xc>
      }
    }
  }
}
 800e452:	bf00      	nop
 800e454:	bf00      	nop
 800e456:	3708      	adds	r7, #8
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}
 800e45c:	20008490 	.word	0x20008490

0800e460 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b08a      	sub	sp, #40	@ 0x28
 800e464:	af00      	add	r7, sp, #0
 800e466:	60f8      	str	r0, [r7, #12]
 800e468:	460b      	mov	r3, r1
 800e46a:	607a      	str	r2, [r7, #4]
 800e46c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e46e:	230a      	movs	r3, #10
 800e470:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e472:	230a      	movs	r3, #10
 800e474:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800e476:	230a      	movs	r3, #10
 800e478:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800e47a:	2300      	movs	r3, #0
 800e47c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800e47e:	230a      	movs	r3, #10
 800e480:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e482:	2300      	movs	r3, #0
 800e484:	83bb      	strh	r3, [r7, #28]
 800e486:	2300      	movs	r3, #0
 800e488:	837b      	strh	r3, [r7, #26]
 800e48a:	2300      	movs	r3, #0
 800e48c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e48e:	2300      	movs	r3, #0
 800e490:	843b      	strh	r3, [r7, #32]
 800e492:	e0ae      	b.n	800e5f2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800e494:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e498:	49a6      	ldr	r1, [pc, #664]	@ (800e734 <etharp_find_entry+0x2d4>)
 800e49a:	4613      	mov	r3, r2
 800e49c:	005b      	lsls	r3, r3, #1
 800e49e:	4413      	add	r3, r2
 800e4a0:	00db      	lsls	r3, r3, #3
 800e4a2:	440b      	add	r3, r1
 800e4a4:	3314      	adds	r3, #20
 800e4a6:	781b      	ldrb	r3, [r3, #0]
 800e4a8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e4aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800e4ae:	2b0a      	cmp	r3, #10
 800e4b0:	d105      	bne.n	800e4be <etharp_find_entry+0x5e>
 800e4b2:	7dfb      	ldrb	r3, [r7, #23]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d102      	bne.n	800e4be <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800e4b8:	8c3b      	ldrh	r3, [r7, #32]
 800e4ba:	847b      	strh	r3, [r7, #34]	@ 0x22
 800e4bc:	e095      	b.n	800e5ea <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800e4be:	7dfb      	ldrb	r3, [r7, #23]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	f000 8092 	beq.w	800e5ea <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800e4c6:	7dfb      	ldrb	r3, [r7, #23]
 800e4c8:	2b01      	cmp	r3, #1
 800e4ca:	d009      	beq.n	800e4e0 <etharp_find_entry+0x80>
 800e4cc:	7dfb      	ldrb	r3, [r7, #23]
 800e4ce:	2b01      	cmp	r3, #1
 800e4d0:	d806      	bhi.n	800e4e0 <etharp_find_entry+0x80>
 800e4d2:	4b99      	ldr	r3, [pc, #612]	@ (800e738 <etharp_find_entry+0x2d8>)
 800e4d4:	f240 1223 	movw	r2, #291	@ 0x123
 800e4d8:	4998      	ldr	r1, [pc, #608]	@ (800e73c <etharp_find_entry+0x2dc>)
 800e4da:	4899      	ldr	r0, [pc, #612]	@ (800e740 <etharp_find_entry+0x2e0>)
 800e4dc:	f003 fe44 	bl	8012168 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d020      	beq.n	800e528 <etharp_find_entry+0xc8>
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	6819      	ldr	r1, [r3, #0]
 800e4ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e4ee:	4891      	ldr	r0, [pc, #580]	@ (800e734 <etharp_find_entry+0x2d4>)
 800e4f0:	4613      	mov	r3, r2
 800e4f2:	005b      	lsls	r3, r3, #1
 800e4f4:	4413      	add	r3, r2
 800e4f6:	00db      	lsls	r3, r3, #3
 800e4f8:	4403      	add	r3, r0
 800e4fa:	3304      	adds	r3, #4
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	4299      	cmp	r1, r3
 800e500:	d112      	bne.n	800e528 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d00c      	beq.n	800e522 <etharp_find_entry+0xc2>
 800e508:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e50c:	4989      	ldr	r1, [pc, #548]	@ (800e734 <etharp_find_entry+0x2d4>)
 800e50e:	4613      	mov	r3, r2
 800e510:	005b      	lsls	r3, r3, #1
 800e512:	4413      	add	r3, r2
 800e514:	00db      	lsls	r3, r3, #3
 800e516:	440b      	add	r3, r1
 800e518:	3308      	adds	r3, #8
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	687a      	ldr	r2, [r7, #4]
 800e51e:	429a      	cmp	r2, r3
 800e520:	d102      	bne.n	800e528 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800e522:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e526:	e100      	b.n	800e72a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e528:	7dfb      	ldrb	r3, [r7, #23]
 800e52a:	2b01      	cmp	r3, #1
 800e52c:	d140      	bne.n	800e5b0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800e52e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e532:	4980      	ldr	r1, [pc, #512]	@ (800e734 <etharp_find_entry+0x2d4>)
 800e534:	4613      	mov	r3, r2
 800e536:	005b      	lsls	r3, r3, #1
 800e538:	4413      	add	r3, r2
 800e53a:	00db      	lsls	r3, r3, #3
 800e53c:	440b      	add	r3, r1
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d01a      	beq.n	800e57a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800e544:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e548:	497a      	ldr	r1, [pc, #488]	@ (800e734 <etharp_find_entry+0x2d4>)
 800e54a:	4613      	mov	r3, r2
 800e54c:	005b      	lsls	r3, r3, #1
 800e54e:	4413      	add	r3, r2
 800e550:	00db      	lsls	r3, r3, #3
 800e552:	440b      	add	r3, r1
 800e554:	3312      	adds	r3, #18
 800e556:	881b      	ldrh	r3, [r3, #0]
 800e558:	8bba      	ldrh	r2, [r7, #28]
 800e55a:	429a      	cmp	r2, r3
 800e55c:	d845      	bhi.n	800e5ea <etharp_find_entry+0x18a>
            old_queue = i;
 800e55e:	8c3b      	ldrh	r3, [r7, #32]
 800e560:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800e562:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e566:	4973      	ldr	r1, [pc, #460]	@ (800e734 <etharp_find_entry+0x2d4>)
 800e568:	4613      	mov	r3, r2
 800e56a:	005b      	lsls	r3, r3, #1
 800e56c:	4413      	add	r3, r2
 800e56e:	00db      	lsls	r3, r3, #3
 800e570:	440b      	add	r3, r1
 800e572:	3312      	adds	r3, #18
 800e574:	881b      	ldrh	r3, [r3, #0]
 800e576:	83bb      	strh	r3, [r7, #28]
 800e578:	e037      	b.n	800e5ea <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800e57a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e57e:	496d      	ldr	r1, [pc, #436]	@ (800e734 <etharp_find_entry+0x2d4>)
 800e580:	4613      	mov	r3, r2
 800e582:	005b      	lsls	r3, r3, #1
 800e584:	4413      	add	r3, r2
 800e586:	00db      	lsls	r3, r3, #3
 800e588:	440b      	add	r3, r1
 800e58a:	3312      	adds	r3, #18
 800e58c:	881b      	ldrh	r3, [r3, #0]
 800e58e:	8b7a      	ldrh	r2, [r7, #26]
 800e590:	429a      	cmp	r2, r3
 800e592:	d82a      	bhi.n	800e5ea <etharp_find_entry+0x18a>
            old_pending = i;
 800e594:	8c3b      	ldrh	r3, [r7, #32]
 800e596:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800e598:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e59c:	4965      	ldr	r1, [pc, #404]	@ (800e734 <etharp_find_entry+0x2d4>)
 800e59e:	4613      	mov	r3, r2
 800e5a0:	005b      	lsls	r3, r3, #1
 800e5a2:	4413      	add	r3, r2
 800e5a4:	00db      	lsls	r3, r3, #3
 800e5a6:	440b      	add	r3, r1
 800e5a8:	3312      	adds	r3, #18
 800e5aa:	881b      	ldrh	r3, [r3, #0]
 800e5ac:	837b      	strh	r3, [r7, #26]
 800e5ae:	e01c      	b.n	800e5ea <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e5b0:	7dfb      	ldrb	r3, [r7, #23]
 800e5b2:	2b01      	cmp	r3, #1
 800e5b4:	d919      	bls.n	800e5ea <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e5b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e5ba:	495e      	ldr	r1, [pc, #376]	@ (800e734 <etharp_find_entry+0x2d4>)
 800e5bc:	4613      	mov	r3, r2
 800e5be:	005b      	lsls	r3, r3, #1
 800e5c0:	4413      	add	r3, r2
 800e5c2:	00db      	lsls	r3, r3, #3
 800e5c4:	440b      	add	r3, r1
 800e5c6:	3312      	adds	r3, #18
 800e5c8:	881b      	ldrh	r3, [r3, #0]
 800e5ca:	8b3a      	ldrh	r2, [r7, #24]
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d80c      	bhi.n	800e5ea <etharp_find_entry+0x18a>
            old_stable = i;
 800e5d0:	8c3b      	ldrh	r3, [r7, #32]
 800e5d2:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800e5d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e5d8:	4956      	ldr	r1, [pc, #344]	@ (800e734 <etharp_find_entry+0x2d4>)
 800e5da:	4613      	mov	r3, r2
 800e5dc:	005b      	lsls	r3, r3, #1
 800e5de:	4413      	add	r3, r2
 800e5e0:	00db      	lsls	r3, r3, #3
 800e5e2:	440b      	add	r3, r1
 800e5e4:	3312      	adds	r3, #18
 800e5e6:	881b      	ldrh	r3, [r3, #0]
 800e5e8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e5ea:	8c3b      	ldrh	r3, [r7, #32]
 800e5ec:	3301      	adds	r3, #1
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	843b      	strh	r3, [r7, #32]
 800e5f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e5f6:	2b09      	cmp	r3, #9
 800e5f8:	f77f af4c 	ble.w	800e494 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e5fc:	7afb      	ldrb	r3, [r7, #11]
 800e5fe:	f003 0302 	and.w	r3, r3, #2
 800e602:	2b00      	cmp	r3, #0
 800e604:	d108      	bne.n	800e618 <etharp_find_entry+0x1b8>
 800e606:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800e60a:	2b0a      	cmp	r3, #10
 800e60c:	d107      	bne.n	800e61e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e60e:	7afb      	ldrb	r3, [r7, #11]
 800e610:	f003 0301 	and.w	r3, r3, #1
 800e614:	2b00      	cmp	r3, #0
 800e616:	d102      	bne.n	800e61e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800e618:	f04f 33ff 	mov.w	r3, #4294967295
 800e61c:	e085      	b.n	800e72a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e61e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800e622:	2b09      	cmp	r3, #9
 800e624:	dc02      	bgt.n	800e62c <etharp_find_entry+0x1cc>
    i = empty;
 800e626:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e628:	843b      	strh	r3, [r7, #32]
 800e62a:	e039      	b.n	800e6a0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800e62c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800e630:	2b09      	cmp	r3, #9
 800e632:	dc14      	bgt.n	800e65e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800e634:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e636:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e638:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e63c:	493d      	ldr	r1, [pc, #244]	@ (800e734 <etharp_find_entry+0x2d4>)
 800e63e:	4613      	mov	r3, r2
 800e640:	005b      	lsls	r3, r3, #1
 800e642:	4413      	add	r3, r2
 800e644:	00db      	lsls	r3, r3, #3
 800e646:	440b      	add	r3, r1
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d018      	beq.n	800e680 <etharp_find_entry+0x220>
 800e64e:	4b3a      	ldr	r3, [pc, #232]	@ (800e738 <etharp_find_entry+0x2d8>)
 800e650:	f240 126d 	movw	r2, #365	@ 0x16d
 800e654:	493b      	ldr	r1, [pc, #236]	@ (800e744 <etharp_find_entry+0x2e4>)
 800e656:	483a      	ldr	r0, [pc, #232]	@ (800e740 <etharp_find_entry+0x2e0>)
 800e658:	f003 fd86 	bl	8012168 <iprintf>
 800e65c:	e010      	b.n	800e680 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800e65e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800e662:	2b09      	cmp	r3, #9
 800e664:	dc02      	bgt.n	800e66c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800e666:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e668:	843b      	strh	r3, [r7, #32]
 800e66a:	e009      	b.n	800e680 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e66c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e670:	2b09      	cmp	r3, #9
 800e672:	dc02      	bgt.n	800e67a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800e674:	8bfb      	ldrh	r3, [r7, #30]
 800e676:	843b      	strh	r3, [r7, #32]
 800e678:	e002      	b.n	800e680 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800e67a:	f04f 33ff 	mov.w	r3, #4294967295
 800e67e:	e054      	b.n	800e72a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e680:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e684:	2b09      	cmp	r3, #9
 800e686:	dd06      	ble.n	800e696 <etharp_find_entry+0x236>
 800e688:	4b2b      	ldr	r3, [pc, #172]	@ (800e738 <etharp_find_entry+0x2d8>)
 800e68a:	f240 127f 	movw	r2, #383	@ 0x17f
 800e68e:	492e      	ldr	r1, [pc, #184]	@ (800e748 <etharp_find_entry+0x2e8>)
 800e690:	482b      	ldr	r0, [pc, #172]	@ (800e740 <etharp_find_entry+0x2e0>)
 800e692:	f003 fd69 	bl	8012168 <iprintf>
    etharp_free_entry(i);
 800e696:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e69a:	4618      	mov	r0, r3
 800e69c:	f7ff fe06 	bl	800e2ac <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e6a0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e6a4:	2b09      	cmp	r3, #9
 800e6a6:	dd06      	ble.n	800e6b6 <etharp_find_entry+0x256>
 800e6a8:	4b23      	ldr	r3, [pc, #140]	@ (800e738 <etharp_find_entry+0x2d8>)
 800e6aa:	f240 1283 	movw	r2, #387	@ 0x183
 800e6ae:	4926      	ldr	r1, [pc, #152]	@ (800e748 <etharp_find_entry+0x2e8>)
 800e6b0:	4823      	ldr	r0, [pc, #140]	@ (800e740 <etharp_find_entry+0x2e0>)
 800e6b2:	f003 fd59 	bl	8012168 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800e6b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e6ba:	491e      	ldr	r1, [pc, #120]	@ (800e734 <etharp_find_entry+0x2d4>)
 800e6bc:	4613      	mov	r3, r2
 800e6be:	005b      	lsls	r3, r3, #1
 800e6c0:	4413      	add	r3, r2
 800e6c2:	00db      	lsls	r3, r3, #3
 800e6c4:	440b      	add	r3, r1
 800e6c6:	3314      	adds	r3, #20
 800e6c8:	781b      	ldrb	r3, [r3, #0]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d006      	beq.n	800e6dc <etharp_find_entry+0x27c>
 800e6ce:	4b1a      	ldr	r3, [pc, #104]	@ (800e738 <etharp_find_entry+0x2d8>)
 800e6d0:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800e6d4:	491d      	ldr	r1, [pc, #116]	@ (800e74c <etharp_find_entry+0x2ec>)
 800e6d6:	481a      	ldr	r0, [pc, #104]	@ (800e740 <etharp_find_entry+0x2e0>)
 800e6d8:	f003 fd46 	bl	8012168 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d00b      	beq.n	800e6fa <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800e6e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	6819      	ldr	r1, [r3, #0]
 800e6ea:	4812      	ldr	r0, [pc, #72]	@ (800e734 <etharp_find_entry+0x2d4>)
 800e6ec:	4613      	mov	r3, r2
 800e6ee:	005b      	lsls	r3, r3, #1
 800e6f0:	4413      	add	r3, r2
 800e6f2:	00db      	lsls	r3, r3, #3
 800e6f4:	4403      	add	r3, r0
 800e6f6:	3304      	adds	r3, #4
 800e6f8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800e6fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e6fe:	490d      	ldr	r1, [pc, #52]	@ (800e734 <etharp_find_entry+0x2d4>)
 800e700:	4613      	mov	r3, r2
 800e702:	005b      	lsls	r3, r3, #1
 800e704:	4413      	add	r3, r2
 800e706:	00db      	lsls	r3, r3, #3
 800e708:	440b      	add	r3, r1
 800e70a:	3312      	adds	r3, #18
 800e70c:	2200      	movs	r2, #0
 800e70e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800e710:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e714:	4907      	ldr	r1, [pc, #28]	@ (800e734 <etharp_find_entry+0x2d4>)
 800e716:	4613      	mov	r3, r2
 800e718:	005b      	lsls	r3, r3, #1
 800e71a:	4413      	add	r3, r2
 800e71c:	00db      	lsls	r3, r3, #3
 800e71e:	440b      	add	r3, r1
 800e720:	3308      	adds	r3, #8
 800e722:	687a      	ldr	r2, [r7, #4]
 800e724:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800e726:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	3728      	adds	r7, #40	@ 0x28
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}
 800e732:	bf00      	nop
 800e734:	20008490 	.word	0x20008490
 800e738:	08015708 	.word	0x08015708
 800e73c:	08015740 	.word	0x08015740
 800e740:	08015780 	.word	0x08015780
 800e744:	080157a8 	.word	0x080157a8
 800e748:	080157c0 	.word	0x080157c0
 800e74c:	080157d4 	.word	0x080157d4

0800e750 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b088      	sub	sp, #32
 800e754:	af02      	add	r7, sp, #8
 800e756:	60f8      	str	r0, [r7, #12]
 800e758:	60b9      	str	r1, [r7, #8]
 800e75a:	607a      	str	r2, [r7, #4]
 800e75c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e764:	2b06      	cmp	r3, #6
 800e766:	d006      	beq.n	800e776 <etharp_update_arp_entry+0x26>
 800e768:	4b48      	ldr	r3, [pc, #288]	@ (800e88c <etharp_update_arp_entry+0x13c>)
 800e76a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800e76e:	4948      	ldr	r1, [pc, #288]	@ (800e890 <etharp_update_arp_entry+0x140>)
 800e770:	4848      	ldr	r0, [pc, #288]	@ (800e894 <etharp_update_arp_entry+0x144>)
 800e772:	f003 fcf9 	bl	8012168 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d012      	beq.n	800e7a2 <etharp_update_arp_entry+0x52>
 800e77c:	68bb      	ldr	r3, [r7, #8]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d00e      	beq.n	800e7a2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	68f9      	ldr	r1, [r7, #12]
 800e78a:	4618      	mov	r0, r3
 800e78c:	f001 f8fe 	bl	800f98c <ip4_addr_isbroadcast_u32>
 800e790:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800e792:	2b00      	cmp	r3, #0
 800e794:	d105      	bne.n	800e7a2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e79e:	2be0      	cmp	r3, #224	@ 0xe0
 800e7a0:	d102      	bne.n	800e7a8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e7a2:	f06f 030f 	mvn.w	r3, #15
 800e7a6:	e06c      	b.n	800e882 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800e7a8:	78fb      	ldrb	r3, [r7, #3]
 800e7aa:	68fa      	ldr	r2, [r7, #12]
 800e7ac:	4619      	mov	r1, r3
 800e7ae:	68b8      	ldr	r0, [r7, #8]
 800e7b0:	f7ff fe56 	bl	800e460 <etharp_find_entry>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800e7b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	da02      	bge.n	800e7c6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800e7c0:	8afb      	ldrh	r3, [r7, #22]
 800e7c2:	b25b      	sxtb	r3, r3
 800e7c4:	e05d      	b.n	800e882 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e7c6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e7ca:	4933      	ldr	r1, [pc, #204]	@ (800e898 <etharp_update_arp_entry+0x148>)
 800e7cc:	4613      	mov	r3, r2
 800e7ce:	005b      	lsls	r3, r3, #1
 800e7d0:	4413      	add	r3, r2
 800e7d2:	00db      	lsls	r3, r3, #3
 800e7d4:	440b      	add	r3, r1
 800e7d6:	3314      	adds	r3, #20
 800e7d8:	2202      	movs	r2, #2
 800e7da:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800e7dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e7e0:	492d      	ldr	r1, [pc, #180]	@ (800e898 <etharp_update_arp_entry+0x148>)
 800e7e2:	4613      	mov	r3, r2
 800e7e4:	005b      	lsls	r3, r3, #1
 800e7e6:	4413      	add	r3, r2
 800e7e8:	00db      	lsls	r3, r3, #3
 800e7ea:	440b      	add	r3, r1
 800e7ec:	3308      	adds	r3, #8
 800e7ee:	68fa      	ldr	r2, [r7, #12]
 800e7f0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e7f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e7f6:	4613      	mov	r3, r2
 800e7f8:	005b      	lsls	r3, r3, #1
 800e7fa:	4413      	add	r3, r2
 800e7fc:	00db      	lsls	r3, r3, #3
 800e7fe:	3308      	adds	r3, #8
 800e800:	4a25      	ldr	r2, [pc, #148]	@ (800e898 <etharp_update_arp_entry+0x148>)
 800e802:	4413      	add	r3, r2
 800e804:	3304      	adds	r3, #4
 800e806:	2206      	movs	r2, #6
 800e808:	6879      	ldr	r1, [r7, #4]
 800e80a:	4618      	mov	r0, r3
 800e80c:	f003 fdfb 	bl	8012406 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800e810:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e814:	4920      	ldr	r1, [pc, #128]	@ (800e898 <etharp_update_arp_entry+0x148>)
 800e816:	4613      	mov	r3, r2
 800e818:	005b      	lsls	r3, r3, #1
 800e81a:	4413      	add	r3, r2
 800e81c:	00db      	lsls	r3, r3, #3
 800e81e:	440b      	add	r3, r1
 800e820:	3312      	adds	r3, #18
 800e822:	2200      	movs	r2, #0
 800e824:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e826:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e82a:	491b      	ldr	r1, [pc, #108]	@ (800e898 <etharp_update_arp_entry+0x148>)
 800e82c:	4613      	mov	r3, r2
 800e82e:	005b      	lsls	r3, r3, #1
 800e830:	4413      	add	r3, r2
 800e832:	00db      	lsls	r3, r3, #3
 800e834:	440b      	add	r3, r1
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d021      	beq.n	800e880 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800e83c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e840:	4915      	ldr	r1, [pc, #84]	@ (800e898 <etharp_update_arp_entry+0x148>)
 800e842:	4613      	mov	r3, r2
 800e844:	005b      	lsls	r3, r3, #1
 800e846:	4413      	add	r3, r2
 800e848:	00db      	lsls	r3, r3, #3
 800e84a:	440b      	add	r3, r1
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800e850:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e854:	4910      	ldr	r1, [pc, #64]	@ (800e898 <etharp_update_arp_entry+0x148>)
 800e856:	4613      	mov	r3, r2
 800e858:	005b      	lsls	r3, r3, #1
 800e85a:	4413      	add	r3, r2
 800e85c:	00db      	lsls	r3, r3, #3
 800e85e:	440b      	add	r3, r1
 800e860:	2200      	movs	r2, #0
 800e862:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800e86a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e86e:	9300      	str	r3, [sp, #0]
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	6939      	ldr	r1, [r7, #16]
 800e874:	68f8      	ldr	r0, [r7, #12]
 800e876:	f001 ff97 	bl	80107a8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800e87a:	6938      	ldr	r0, [r7, #16]
 800e87c:	f7f8 ffd8 	bl	8007830 <pbuf_free>
  }
  return ERR_OK;
 800e880:	2300      	movs	r3, #0
}
 800e882:	4618      	mov	r0, r3
 800e884:	3718      	adds	r7, #24
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}
 800e88a:	bf00      	nop
 800e88c:	08015708 	.word	0x08015708
 800e890:	08015800 	.word	0x08015800
 800e894:	08015780 	.word	0x08015780
 800e898:	20008490 	.word	0x20008490

0800e89c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b084      	sub	sp, #16
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	60fb      	str	r3, [r7, #12]
 800e8a8:	e01e      	b.n	800e8e8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800e8aa:	4913      	ldr	r1, [pc, #76]	@ (800e8f8 <etharp_cleanup_netif+0x5c>)
 800e8ac:	68fa      	ldr	r2, [r7, #12]
 800e8ae:	4613      	mov	r3, r2
 800e8b0:	005b      	lsls	r3, r3, #1
 800e8b2:	4413      	add	r3, r2
 800e8b4:	00db      	lsls	r3, r3, #3
 800e8b6:	440b      	add	r3, r1
 800e8b8:	3314      	adds	r3, #20
 800e8ba:	781b      	ldrb	r3, [r3, #0]
 800e8bc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e8be:	7afb      	ldrb	r3, [r7, #11]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d00e      	beq.n	800e8e2 <etharp_cleanup_netif+0x46>
 800e8c4:	490c      	ldr	r1, [pc, #48]	@ (800e8f8 <etharp_cleanup_netif+0x5c>)
 800e8c6:	68fa      	ldr	r2, [r7, #12]
 800e8c8:	4613      	mov	r3, r2
 800e8ca:	005b      	lsls	r3, r3, #1
 800e8cc:	4413      	add	r3, r2
 800e8ce:	00db      	lsls	r3, r3, #3
 800e8d0:	440b      	add	r3, r1
 800e8d2:	3308      	adds	r3, #8
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	687a      	ldr	r2, [r7, #4]
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d102      	bne.n	800e8e2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800e8dc:	68f8      	ldr	r0, [r7, #12]
 800e8de:	f7ff fce5 	bl	800e2ac <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	3301      	adds	r3, #1
 800e8e6:	60fb      	str	r3, [r7, #12]
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	2b09      	cmp	r3, #9
 800e8ec:	dddd      	ble.n	800e8aa <etharp_cleanup_netif+0xe>
    }
  }
}
 800e8ee:	bf00      	nop
 800e8f0:	bf00      	nop
 800e8f2:	3710      	adds	r7, #16
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}
 800e8f8:	20008490 	.word	0x20008490

0800e8fc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800e8fc:	b5b0      	push	{r4, r5, r7, lr}
 800e8fe:	b08a      	sub	sp, #40	@ 0x28
 800e900:	af04      	add	r7, sp, #16
 800e902:	6078      	str	r0, [r7, #4]
 800e904:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d107      	bne.n	800e91c <etharp_input+0x20>
 800e90c:	4b3d      	ldr	r3, [pc, #244]	@ (800ea04 <etharp_input+0x108>)
 800e90e:	f240 228a 	movw	r2, #650	@ 0x28a
 800e912:	493d      	ldr	r1, [pc, #244]	@ (800ea08 <etharp_input+0x10c>)
 800e914:	483d      	ldr	r0, [pc, #244]	@ (800ea0c <etharp_input+0x110>)
 800e916:	f003 fc27 	bl	8012168 <iprintf>
 800e91a:	e06f      	b.n	800e9fc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	685b      	ldr	r3, [r3, #4]
 800e920:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	881b      	ldrh	r3, [r3, #0]
 800e926:	b29b      	uxth	r3, r3
 800e928:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e92c:	d10c      	bne.n	800e948 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e92e:	693b      	ldr	r3, [r7, #16]
 800e930:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e932:	2b06      	cmp	r3, #6
 800e934:	d108      	bne.n	800e948 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e93a:	2b04      	cmp	r3, #4
 800e93c:	d104      	bne.n	800e948 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	885b      	ldrh	r3, [r3, #2]
 800e942:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e944:	2b08      	cmp	r3, #8
 800e946:	d003      	beq.n	800e950 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f7f8 ff71 	bl	8007830 <pbuf_free>
    return;
 800e94e:	e055      	b.n	800e9fc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e950:	693b      	ldr	r3, [r7, #16]
 800e952:	330e      	adds	r3, #14
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800e958:	693b      	ldr	r3, [r7, #16]
 800e95a:	3318      	adds	r3, #24
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	3304      	adds	r3, #4
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d102      	bne.n	800e970 <etharp_input+0x74>
    for_us = 0;
 800e96a:	2300      	movs	r3, #0
 800e96c:	75fb      	strb	r3, [r7, #23]
 800e96e:	e009      	b.n	800e984 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e970:	68ba      	ldr	r2, [r7, #8]
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	3304      	adds	r3, #4
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	429a      	cmp	r2, r3
 800e97a:	bf0c      	ite	eq
 800e97c:	2301      	moveq	r3, #1
 800e97e:	2300      	movne	r3, #0
 800e980:	b2db      	uxtb	r3, r3
 800e982:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e984:	693b      	ldr	r3, [r7, #16]
 800e986:	f103 0208 	add.w	r2, r3, #8
 800e98a:	7dfb      	ldrb	r3, [r7, #23]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d001      	beq.n	800e994 <etharp_input+0x98>
 800e990:	2301      	movs	r3, #1
 800e992:	e000      	b.n	800e996 <etharp_input+0x9a>
 800e994:	2302      	movs	r3, #2
 800e996:	f107 010c 	add.w	r1, r7, #12
 800e99a:	6838      	ldr	r0, [r7, #0]
 800e99c:	f7ff fed8 	bl	800e750 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e9a0:	693b      	ldr	r3, [r7, #16]
 800e9a2:	88db      	ldrh	r3, [r3, #6]
 800e9a4:	b29b      	uxth	r3, r3
 800e9a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e9aa:	d003      	beq.n	800e9b4 <etharp_input+0xb8>
 800e9ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e9b0:	d01e      	beq.n	800e9f0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800e9b2:	e020      	b.n	800e9f6 <etharp_input+0xfa>
      if (for_us) {
 800e9b4:	7dfb      	ldrb	r3, [r7, #23]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d01c      	beq.n	800e9f4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800e9d0:	693a      	ldr	r2, [r7, #16]
 800e9d2:	3208      	adds	r2, #8
        etharp_raw(netif,
 800e9d4:	2102      	movs	r1, #2
 800e9d6:	9103      	str	r1, [sp, #12]
 800e9d8:	f107 010c 	add.w	r1, r7, #12
 800e9dc:	9102      	str	r1, [sp, #8]
 800e9de:	9201      	str	r2, [sp, #4]
 800e9e0:	9300      	str	r3, [sp, #0]
 800e9e2:	462b      	mov	r3, r5
 800e9e4:	4622      	mov	r2, r4
 800e9e6:	4601      	mov	r1, r0
 800e9e8:	6838      	ldr	r0, [r7, #0]
 800e9ea:	f000 faeb 	bl	800efc4 <etharp_raw>
      break;
 800e9ee:	e001      	b.n	800e9f4 <etharp_input+0xf8>
      break;
 800e9f0:	bf00      	nop
 800e9f2:	e000      	b.n	800e9f6 <etharp_input+0xfa>
      break;
 800e9f4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f7f8 ff1a 	bl	8007830 <pbuf_free>
}
 800e9fc:	3718      	adds	r7, #24
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bdb0      	pop	{r4, r5, r7, pc}
 800ea02:	bf00      	nop
 800ea04:	08015708 	.word	0x08015708
 800ea08:	08015858 	.word	0x08015858
 800ea0c:	08015780 	.word	0x08015780

0800ea10 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b086      	sub	sp, #24
 800ea14:	af02      	add	r7, sp, #8
 800ea16:	60f8      	str	r0, [r7, #12]
 800ea18:	60b9      	str	r1, [r7, #8]
 800ea1a:	4613      	mov	r3, r2
 800ea1c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ea1e:	79fa      	ldrb	r2, [r7, #7]
 800ea20:	4944      	ldr	r1, [pc, #272]	@ (800eb34 <etharp_output_to_arp_index+0x124>)
 800ea22:	4613      	mov	r3, r2
 800ea24:	005b      	lsls	r3, r3, #1
 800ea26:	4413      	add	r3, r2
 800ea28:	00db      	lsls	r3, r3, #3
 800ea2a:	440b      	add	r3, r1
 800ea2c:	3314      	adds	r3, #20
 800ea2e:	781b      	ldrb	r3, [r3, #0]
 800ea30:	2b01      	cmp	r3, #1
 800ea32:	d806      	bhi.n	800ea42 <etharp_output_to_arp_index+0x32>
 800ea34:	4b40      	ldr	r3, [pc, #256]	@ (800eb38 <etharp_output_to_arp_index+0x128>)
 800ea36:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800ea3a:	4940      	ldr	r1, [pc, #256]	@ (800eb3c <etharp_output_to_arp_index+0x12c>)
 800ea3c:	4840      	ldr	r0, [pc, #256]	@ (800eb40 <etharp_output_to_arp_index+0x130>)
 800ea3e:	f003 fb93 	bl	8012168 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800ea42:	79fa      	ldrb	r2, [r7, #7]
 800ea44:	493b      	ldr	r1, [pc, #236]	@ (800eb34 <etharp_output_to_arp_index+0x124>)
 800ea46:	4613      	mov	r3, r2
 800ea48:	005b      	lsls	r3, r3, #1
 800ea4a:	4413      	add	r3, r2
 800ea4c:	00db      	lsls	r3, r3, #3
 800ea4e:	440b      	add	r3, r1
 800ea50:	3314      	adds	r3, #20
 800ea52:	781b      	ldrb	r3, [r3, #0]
 800ea54:	2b02      	cmp	r3, #2
 800ea56:	d153      	bne.n	800eb00 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800ea58:	79fa      	ldrb	r2, [r7, #7]
 800ea5a:	4936      	ldr	r1, [pc, #216]	@ (800eb34 <etharp_output_to_arp_index+0x124>)
 800ea5c:	4613      	mov	r3, r2
 800ea5e:	005b      	lsls	r3, r3, #1
 800ea60:	4413      	add	r3, r2
 800ea62:	00db      	lsls	r3, r3, #3
 800ea64:	440b      	add	r3, r1
 800ea66:	3312      	adds	r3, #18
 800ea68:	881b      	ldrh	r3, [r3, #0]
 800ea6a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800ea6e:	d919      	bls.n	800eaa4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800ea70:	79fa      	ldrb	r2, [r7, #7]
 800ea72:	4613      	mov	r3, r2
 800ea74:	005b      	lsls	r3, r3, #1
 800ea76:	4413      	add	r3, r2
 800ea78:	00db      	lsls	r3, r3, #3
 800ea7a:	4a2e      	ldr	r2, [pc, #184]	@ (800eb34 <etharp_output_to_arp_index+0x124>)
 800ea7c:	4413      	add	r3, r2
 800ea7e:	3304      	adds	r3, #4
 800ea80:	4619      	mov	r1, r3
 800ea82:	68f8      	ldr	r0, [r7, #12]
 800ea84:	f000 fb4c 	bl	800f120 <etharp_request>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d138      	bne.n	800eb00 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ea8e:	79fa      	ldrb	r2, [r7, #7]
 800ea90:	4928      	ldr	r1, [pc, #160]	@ (800eb34 <etharp_output_to_arp_index+0x124>)
 800ea92:	4613      	mov	r3, r2
 800ea94:	005b      	lsls	r3, r3, #1
 800ea96:	4413      	add	r3, r2
 800ea98:	00db      	lsls	r3, r3, #3
 800ea9a:	440b      	add	r3, r1
 800ea9c:	3314      	adds	r3, #20
 800ea9e:	2203      	movs	r2, #3
 800eaa0:	701a      	strb	r2, [r3, #0]
 800eaa2:	e02d      	b.n	800eb00 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800eaa4:	79fa      	ldrb	r2, [r7, #7]
 800eaa6:	4923      	ldr	r1, [pc, #140]	@ (800eb34 <etharp_output_to_arp_index+0x124>)
 800eaa8:	4613      	mov	r3, r2
 800eaaa:	005b      	lsls	r3, r3, #1
 800eaac:	4413      	add	r3, r2
 800eaae:	00db      	lsls	r3, r3, #3
 800eab0:	440b      	add	r3, r1
 800eab2:	3312      	adds	r3, #18
 800eab4:	881b      	ldrh	r3, [r3, #0]
 800eab6:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800eaba:	d321      	bcc.n	800eb00 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800eabc:	79fa      	ldrb	r2, [r7, #7]
 800eabe:	4613      	mov	r3, r2
 800eac0:	005b      	lsls	r3, r3, #1
 800eac2:	4413      	add	r3, r2
 800eac4:	00db      	lsls	r3, r3, #3
 800eac6:	4a1b      	ldr	r2, [pc, #108]	@ (800eb34 <etharp_output_to_arp_index+0x124>)
 800eac8:	4413      	add	r3, r2
 800eaca:	1d19      	adds	r1, r3, #4
 800eacc:	79fa      	ldrb	r2, [r7, #7]
 800eace:	4613      	mov	r3, r2
 800ead0:	005b      	lsls	r3, r3, #1
 800ead2:	4413      	add	r3, r2
 800ead4:	00db      	lsls	r3, r3, #3
 800ead6:	3308      	adds	r3, #8
 800ead8:	4a16      	ldr	r2, [pc, #88]	@ (800eb34 <etharp_output_to_arp_index+0x124>)
 800eada:	4413      	add	r3, r2
 800eadc:	3304      	adds	r3, #4
 800eade:	461a      	mov	r2, r3
 800eae0:	68f8      	ldr	r0, [r7, #12]
 800eae2:	f000 fafb 	bl	800f0dc <etharp_request_dst>
 800eae6:	4603      	mov	r3, r0
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d109      	bne.n	800eb00 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800eaec:	79fa      	ldrb	r2, [r7, #7]
 800eaee:	4911      	ldr	r1, [pc, #68]	@ (800eb34 <etharp_output_to_arp_index+0x124>)
 800eaf0:	4613      	mov	r3, r2
 800eaf2:	005b      	lsls	r3, r3, #1
 800eaf4:	4413      	add	r3, r2
 800eaf6:	00db      	lsls	r3, r3, #3
 800eaf8:	440b      	add	r3, r1
 800eafa:	3314      	adds	r3, #20
 800eafc:	2203      	movs	r2, #3
 800eafe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800eb06:	79fa      	ldrb	r2, [r7, #7]
 800eb08:	4613      	mov	r3, r2
 800eb0a:	005b      	lsls	r3, r3, #1
 800eb0c:	4413      	add	r3, r2
 800eb0e:	00db      	lsls	r3, r3, #3
 800eb10:	3308      	adds	r3, #8
 800eb12:	4a08      	ldr	r2, [pc, #32]	@ (800eb34 <etharp_output_to_arp_index+0x124>)
 800eb14:	4413      	add	r3, r2
 800eb16:	3304      	adds	r3, #4
 800eb18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800eb1c:	9200      	str	r2, [sp, #0]
 800eb1e:	460a      	mov	r2, r1
 800eb20:	68b9      	ldr	r1, [r7, #8]
 800eb22:	68f8      	ldr	r0, [r7, #12]
 800eb24:	f001 fe40 	bl	80107a8 <ethernet_output>
 800eb28:	4603      	mov	r3, r0
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3710      	adds	r7, #16
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}
 800eb32:	bf00      	nop
 800eb34:	20008490 	.word	0x20008490
 800eb38:	08015708 	.word	0x08015708
 800eb3c:	08015878 	.word	0x08015878
 800eb40:	08015780 	.word	0x08015780

0800eb44 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b08a      	sub	sp, #40	@ 0x28
 800eb48:	af02      	add	r7, sp, #8
 800eb4a:	60f8      	str	r0, [r7, #12]
 800eb4c:	60b9      	str	r1, [r7, #8]
 800eb4e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d106      	bne.n	800eb68 <etharp_output+0x24>
 800eb5a:	4b73      	ldr	r3, [pc, #460]	@ (800ed28 <etharp_output+0x1e4>)
 800eb5c:	f240 321e 	movw	r2, #798	@ 0x31e
 800eb60:	4972      	ldr	r1, [pc, #456]	@ (800ed2c <etharp_output+0x1e8>)
 800eb62:	4873      	ldr	r0, [pc, #460]	@ (800ed30 <etharp_output+0x1ec>)
 800eb64:	f003 fb00 	bl	8012168 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d106      	bne.n	800eb7c <etharp_output+0x38>
 800eb6e:	4b6e      	ldr	r3, [pc, #440]	@ (800ed28 <etharp_output+0x1e4>)
 800eb70:	f240 321f 	movw	r2, #799	@ 0x31f
 800eb74:	496f      	ldr	r1, [pc, #444]	@ (800ed34 <etharp_output+0x1f0>)
 800eb76:	486e      	ldr	r0, [pc, #440]	@ (800ed30 <etharp_output+0x1ec>)
 800eb78:	f003 faf6 	bl	8012168 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d106      	bne.n	800eb90 <etharp_output+0x4c>
 800eb82:	4b69      	ldr	r3, [pc, #420]	@ (800ed28 <etharp_output+0x1e4>)
 800eb84:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800eb88:	496b      	ldr	r1, [pc, #428]	@ (800ed38 <etharp_output+0x1f4>)
 800eb8a:	4869      	ldr	r0, [pc, #420]	@ (800ed30 <etharp_output+0x1ec>)
 800eb8c:	f003 faec 	bl	8012168 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	68f9      	ldr	r1, [r7, #12]
 800eb96:	4618      	mov	r0, r3
 800eb98:	f000 fef8 	bl	800f98c <ip4_addr_isbroadcast_u32>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d002      	beq.n	800eba8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800eba2:	4b66      	ldr	r3, [pc, #408]	@ (800ed3c <etharp_output+0x1f8>)
 800eba4:	61fb      	str	r3, [r7, #28]
 800eba6:	e0af      	b.n	800ed08 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ebb0:	2be0      	cmp	r3, #224	@ 0xe0
 800ebb2:	d118      	bne.n	800ebe6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ebbc:	235e      	movs	r3, #94	@ 0x5e
 800ebbe:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	3301      	adds	r3, #1
 800ebc4:	781b      	ldrb	r3, [r3, #0]
 800ebc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ebca:	b2db      	uxtb	r3, r3
 800ebcc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	3302      	adds	r3, #2
 800ebd2:	781b      	ldrb	r3, [r3, #0]
 800ebd4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	3303      	adds	r3, #3
 800ebda:	781b      	ldrb	r3, [r3, #0]
 800ebdc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800ebde:	f107 0310 	add.w	r3, r7, #16
 800ebe2:	61fb      	str	r3, [r7, #28]
 800ebe4:	e090      	b.n	800ed08 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681a      	ldr	r2, [r3, #0]
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	3304      	adds	r3, #4
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	405a      	eors	r2, r3
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	3308      	adds	r3, #8
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	4013      	ands	r3, r2
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d012      	beq.n	800ec24 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ec04:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800ec08:	4293      	cmp	r3, r2
 800ec0a:	d00b      	beq.n	800ec24 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	330c      	adds	r3, #12
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d003      	beq.n	800ec1e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	330c      	adds	r3, #12
 800ec1a:	61bb      	str	r3, [r7, #24]
 800ec1c:	e002      	b.n	800ec24 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800ec1e:	f06f 0303 	mvn.w	r3, #3
 800ec22:	e07d      	b.n	800ed20 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ec24:	4b46      	ldr	r3, [pc, #280]	@ (800ed40 <etharp_output+0x1fc>)
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	4619      	mov	r1, r3
 800ec2a:	4a46      	ldr	r2, [pc, #280]	@ (800ed44 <etharp_output+0x200>)
 800ec2c:	460b      	mov	r3, r1
 800ec2e:	005b      	lsls	r3, r3, #1
 800ec30:	440b      	add	r3, r1
 800ec32:	00db      	lsls	r3, r3, #3
 800ec34:	4413      	add	r3, r2
 800ec36:	3314      	adds	r3, #20
 800ec38:	781b      	ldrb	r3, [r3, #0]
 800ec3a:	2b01      	cmp	r3, #1
 800ec3c:	d925      	bls.n	800ec8a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ec3e:	4b40      	ldr	r3, [pc, #256]	@ (800ed40 <etharp_output+0x1fc>)
 800ec40:	781b      	ldrb	r3, [r3, #0]
 800ec42:	4619      	mov	r1, r3
 800ec44:	4a3f      	ldr	r2, [pc, #252]	@ (800ed44 <etharp_output+0x200>)
 800ec46:	460b      	mov	r3, r1
 800ec48:	005b      	lsls	r3, r3, #1
 800ec4a:	440b      	add	r3, r1
 800ec4c:	00db      	lsls	r3, r3, #3
 800ec4e:	4413      	add	r3, r2
 800ec50:	3308      	adds	r3, #8
 800ec52:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ec54:	68fa      	ldr	r2, [r7, #12]
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d117      	bne.n	800ec8a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800ec5a:	69bb      	ldr	r3, [r7, #24]
 800ec5c:	681a      	ldr	r2, [r3, #0]
 800ec5e:	4b38      	ldr	r3, [pc, #224]	@ (800ed40 <etharp_output+0x1fc>)
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	4618      	mov	r0, r3
 800ec64:	4937      	ldr	r1, [pc, #220]	@ (800ed44 <etharp_output+0x200>)
 800ec66:	4603      	mov	r3, r0
 800ec68:	005b      	lsls	r3, r3, #1
 800ec6a:	4403      	add	r3, r0
 800ec6c:	00db      	lsls	r3, r3, #3
 800ec6e:	440b      	add	r3, r1
 800ec70:	3304      	adds	r3, #4
 800ec72:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ec74:	429a      	cmp	r2, r3
 800ec76:	d108      	bne.n	800ec8a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800ec78:	4b31      	ldr	r3, [pc, #196]	@ (800ed40 <etharp_output+0x1fc>)
 800ec7a:	781b      	ldrb	r3, [r3, #0]
 800ec7c:	461a      	mov	r2, r3
 800ec7e:	68b9      	ldr	r1, [r7, #8]
 800ec80:	68f8      	ldr	r0, [r7, #12]
 800ec82:	f7ff fec5 	bl	800ea10 <etharp_output_to_arp_index>
 800ec86:	4603      	mov	r3, r0
 800ec88:	e04a      	b.n	800ed20 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	75fb      	strb	r3, [r7, #23]
 800ec8e:	e031      	b.n	800ecf4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ec90:	7dfa      	ldrb	r2, [r7, #23]
 800ec92:	492c      	ldr	r1, [pc, #176]	@ (800ed44 <etharp_output+0x200>)
 800ec94:	4613      	mov	r3, r2
 800ec96:	005b      	lsls	r3, r3, #1
 800ec98:	4413      	add	r3, r2
 800ec9a:	00db      	lsls	r3, r3, #3
 800ec9c:	440b      	add	r3, r1
 800ec9e:	3314      	adds	r3, #20
 800eca0:	781b      	ldrb	r3, [r3, #0]
 800eca2:	2b01      	cmp	r3, #1
 800eca4:	d923      	bls.n	800ecee <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800eca6:	7dfa      	ldrb	r2, [r7, #23]
 800eca8:	4926      	ldr	r1, [pc, #152]	@ (800ed44 <etharp_output+0x200>)
 800ecaa:	4613      	mov	r3, r2
 800ecac:	005b      	lsls	r3, r3, #1
 800ecae:	4413      	add	r3, r2
 800ecb0:	00db      	lsls	r3, r3, #3
 800ecb2:	440b      	add	r3, r1
 800ecb4:	3308      	adds	r3, #8
 800ecb6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ecb8:	68fa      	ldr	r2, [r7, #12]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d117      	bne.n	800ecee <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800ecbe:	69bb      	ldr	r3, [r7, #24]
 800ecc0:	6819      	ldr	r1, [r3, #0]
 800ecc2:	7dfa      	ldrb	r2, [r7, #23]
 800ecc4:	481f      	ldr	r0, [pc, #124]	@ (800ed44 <etharp_output+0x200>)
 800ecc6:	4613      	mov	r3, r2
 800ecc8:	005b      	lsls	r3, r3, #1
 800ecca:	4413      	add	r3, r2
 800eccc:	00db      	lsls	r3, r3, #3
 800ecce:	4403      	add	r3, r0
 800ecd0:	3304      	adds	r3, #4
 800ecd2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800ecd4:	4299      	cmp	r1, r3
 800ecd6:	d10a      	bne.n	800ecee <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800ecd8:	4a19      	ldr	r2, [pc, #100]	@ (800ed40 <etharp_output+0x1fc>)
 800ecda:	7dfb      	ldrb	r3, [r7, #23]
 800ecdc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800ecde:	7dfb      	ldrb	r3, [r7, #23]
 800ece0:	461a      	mov	r2, r3
 800ece2:	68b9      	ldr	r1, [r7, #8]
 800ece4:	68f8      	ldr	r0, [r7, #12]
 800ece6:	f7ff fe93 	bl	800ea10 <etharp_output_to_arp_index>
 800ecea:	4603      	mov	r3, r0
 800ecec:	e018      	b.n	800ed20 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ecee:	7dfb      	ldrb	r3, [r7, #23]
 800ecf0:	3301      	adds	r3, #1
 800ecf2:	75fb      	strb	r3, [r7, #23]
 800ecf4:	7dfb      	ldrb	r3, [r7, #23]
 800ecf6:	2b09      	cmp	r3, #9
 800ecf8:	d9ca      	bls.n	800ec90 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800ecfa:	68ba      	ldr	r2, [r7, #8]
 800ecfc:	69b9      	ldr	r1, [r7, #24]
 800ecfe:	68f8      	ldr	r0, [r7, #12]
 800ed00:	f000 f822 	bl	800ed48 <etharp_query>
 800ed04:	4603      	mov	r3, r0
 800ed06:	e00b      	b.n	800ed20 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800ed0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ed12:	9300      	str	r3, [sp, #0]
 800ed14:	69fb      	ldr	r3, [r7, #28]
 800ed16:	68b9      	ldr	r1, [r7, #8]
 800ed18:	68f8      	ldr	r0, [r7, #12]
 800ed1a:	f001 fd45 	bl	80107a8 <ethernet_output>
 800ed1e:	4603      	mov	r3, r0
}
 800ed20:	4618      	mov	r0, r3
 800ed22:	3720      	adds	r7, #32
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}
 800ed28:	08015708 	.word	0x08015708
 800ed2c:	08015858 	.word	0x08015858
 800ed30:	08015780 	.word	0x08015780
 800ed34:	080158a8 	.word	0x080158a8
 800ed38:	08015848 	.word	0x08015848
 800ed3c:	08016018 	.word	0x08016018
 800ed40:	20008580 	.word	0x20008580
 800ed44:	20008490 	.word	0x20008490

0800ed48 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b08c      	sub	sp, #48	@ 0x30
 800ed4c:	af02      	add	r7, sp, #8
 800ed4e:	60f8      	str	r0, [r7, #12]
 800ed50:	60b9      	str	r1, [r7, #8]
 800ed52:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	3326      	adds	r3, #38	@ 0x26
 800ed58:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800ed5a:	23ff      	movs	r3, #255	@ 0xff
 800ed5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800ed60:	2300      	movs	r3, #0
 800ed62:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	68f9      	ldr	r1, [r7, #12]
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f000 fe0e 	bl	800f98c <ip4_addr_isbroadcast_u32>
 800ed70:	4603      	mov	r3, r0
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d10c      	bne.n	800ed90 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ed7e:	2be0      	cmp	r3, #224	@ 0xe0
 800ed80:	d006      	beq.n	800ed90 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d003      	beq.n	800ed90 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d102      	bne.n	800ed96 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ed90:	f06f 030f 	mvn.w	r3, #15
 800ed94:	e101      	b.n	800ef9a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800ed96:	68fa      	ldr	r2, [r7, #12]
 800ed98:	2101      	movs	r1, #1
 800ed9a:	68b8      	ldr	r0, [r7, #8]
 800ed9c:	f7ff fb60 	bl	800e460 <etharp_find_entry>
 800eda0:	4603      	mov	r3, r0
 800eda2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800eda4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	da02      	bge.n	800edb2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800edac:	8a7b      	ldrh	r3, [r7, #18]
 800edae:	b25b      	sxtb	r3, r3
 800edb0:	e0f3      	b.n	800ef9a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800edb2:	8a7b      	ldrh	r3, [r7, #18]
 800edb4:	2b7e      	cmp	r3, #126	@ 0x7e
 800edb6:	d906      	bls.n	800edc6 <etharp_query+0x7e>
 800edb8:	4b7a      	ldr	r3, [pc, #488]	@ (800efa4 <etharp_query+0x25c>)
 800edba:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800edbe:	497a      	ldr	r1, [pc, #488]	@ (800efa8 <etharp_query+0x260>)
 800edc0:	487a      	ldr	r0, [pc, #488]	@ (800efac <etharp_query+0x264>)
 800edc2:	f003 f9d1 	bl	8012168 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800edc6:	8a7b      	ldrh	r3, [r7, #18]
 800edc8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800edca:	7c7a      	ldrb	r2, [r7, #17]
 800edcc:	4978      	ldr	r1, [pc, #480]	@ (800efb0 <etharp_query+0x268>)
 800edce:	4613      	mov	r3, r2
 800edd0:	005b      	lsls	r3, r3, #1
 800edd2:	4413      	add	r3, r2
 800edd4:	00db      	lsls	r3, r3, #3
 800edd6:	440b      	add	r3, r1
 800edd8:	3314      	adds	r3, #20
 800edda:	781b      	ldrb	r3, [r3, #0]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d115      	bne.n	800ee0c <etharp_query+0xc4>
    is_new_entry = 1;
 800ede0:	2301      	movs	r3, #1
 800ede2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800ede4:	7c7a      	ldrb	r2, [r7, #17]
 800ede6:	4972      	ldr	r1, [pc, #456]	@ (800efb0 <etharp_query+0x268>)
 800ede8:	4613      	mov	r3, r2
 800edea:	005b      	lsls	r3, r3, #1
 800edec:	4413      	add	r3, r2
 800edee:	00db      	lsls	r3, r3, #3
 800edf0:	440b      	add	r3, r1
 800edf2:	3314      	adds	r3, #20
 800edf4:	2201      	movs	r2, #1
 800edf6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800edf8:	7c7a      	ldrb	r2, [r7, #17]
 800edfa:	496d      	ldr	r1, [pc, #436]	@ (800efb0 <etharp_query+0x268>)
 800edfc:	4613      	mov	r3, r2
 800edfe:	005b      	lsls	r3, r3, #1
 800ee00:	4413      	add	r3, r2
 800ee02:	00db      	lsls	r3, r3, #3
 800ee04:	440b      	add	r3, r1
 800ee06:	3308      	adds	r3, #8
 800ee08:	68fa      	ldr	r2, [r7, #12]
 800ee0a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800ee0c:	7c7a      	ldrb	r2, [r7, #17]
 800ee0e:	4968      	ldr	r1, [pc, #416]	@ (800efb0 <etharp_query+0x268>)
 800ee10:	4613      	mov	r3, r2
 800ee12:	005b      	lsls	r3, r3, #1
 800ee14:	4413      	add	r3, r2
 800ee16:	00db      	lsls	r3, r3, #3
 800ee18:	440b      	add	r3, r1
 800ee1a:	3314      	adds	r3, #20
 800ee1c:	781b      	ldrb	r3, [r3, #0]
 800ee1e:	2b01      	cmp	r3, #1
 800ee20:	d011      	beq.n	800ee46 <etharp_query+0xfe>
 800ee22:	7c7a      	ldrb	r2, [r7, #17]
 800ee24:	4962      	ldr	r1, [pc, #392]	@ (800efb0 <etharp_query+0x268>)
 800ee26:	4613      	mov	r3, r2
 800ee28:	005b      	lsls	r3, r3, #1
 800ee2a:	4413      	add	r3, r2
 800ee2c:	00db      	lsls	r3, r3, #3
 800ee2e:	440b      	add	r3, r1
 800ee30:	3314      	adds	r3, #20
 800ee32:	781b      	ldrb	r3, [r3, #0]
 800ee34:	2b01      	cmp	r3, #1
 800ee36:	d806      	bhi.n	800ee46 <etharp_query+0xfe>
 800ee38:	4b5a      	ldr	r3, [pc, #360]	@ (800efa4 <etharp_query+0x25c>)
 800ee3a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800ee3e:	495d      	ldr	r1, [pc, #372]	@ (800efb4 <etharp_query+0x26c>)
 800ee40:	485a      	ldr	r0, [pc, #360]	@ (800efac <etharp_query+0x264>)
 800ee42:	f003 f991 	bl	8012168 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800ee46:	6a3b      	ldr	r3, [r7, #32]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d102      	bne.n	800ee52 <etharp_query+0x10a>
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d10c      	bne.n	800ee6c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800ee52:	68b9      	ldr	r1, [r7, #8]
 800ee54:	68f8      	ldr	r0, [r7, #12]
 800ee56:	f000 f963 	bl	800f120 <etharp_request>
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d102      	bne.n	800ee6c <etharp_query+0x124>
      return result;
 800ee66:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ee6a:	e096      	b.n	800ef9a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d106      	bne.n	800ee80 <etharp_query+0x138>
 800ee72:	4b4c      	ldr	r3, [pc, #304]	@ (800efa4 <etharp_query+0x25c>)
 800ee74:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800ee78:	494f      	ldr	r1, [pc, #316]	@ (800efb8 <etharp_query+0x270>)
 800ee7a:	484c      	ldr	r0, [pc, #304]	@ (800efac <etharp_query+0x264>)
 800ee7c:	f003 f974 	bl	8012168 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ee80:	7c7a      	ldrb	r2, [r7, #17]
 800ee82:	494b      	ldr	r1, [pc, #300]	@ (800efb0 <etharp_query+0x268>)
 800ee84:	4613      	mov	r3, r2
 800ee86:	005b      	lsls	r3, r3, #1
 800ee88:	4413      	add	r3, r2
 800ee8a:	00db      	lsls	r3, r3, #3
 800ee8c:	440b      	add	r3, r1
 800ee8e:	3314      	adds	r3, #20
 800ee90:	781b      	ldrb	r3, [r3, #0]
 800ee92:	2b01      	cmp	r3, #1
 800ee94:	d917      	bls.n	800eec6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800ee96:	4a49      	ldr	r2, [pc, #292]	@ (800efbc <etharp_query+0x274>)
 800ee98:	7c7b      	ldrb	r3, [r7, #17]
 800ee9a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ee9c:	7c7a      	ldrb	r2, [r7, #17]
 800ee9e:	4613      	mov	r3, r2
 800eea0:	005b      	lsls	r3, r3, #1
 800eea2:	4413      	add	r3, r2
 800eea4:	00db      	lsls	r3, r3, #3
 800eea6:	3308      	adds	r3, #8
 800eea8:	4a41      	ldr	r2, [pc, #260]	@ (800efb0 <etharp_query+0x268>)
 800eeaa:	4413      	add	r3, r2
 800eeac:	3304      	adds	r3, #4
 800eeae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800eeb2:	9200      	str	r2, [sp, #0]
 800eeb4:	697a      	ldr	r2, [r7, #20]
 800eeb6:	6879      	ldr	r1, [r7, #4]
 800eeb8:	68f8      	ldr	r0, [r7, #12]
 800eeba:	f001 fc75 	bl	80107a8 <ethernet_output>
 800eebe:	4603      	mov	r3, r0
 800eec0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800eec4:	e067      	b.n	800ef96 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800eec6:	7c7a      	ldrb	r2, [r7, #17]
 800eec8:	4939      	ldr	r1, [pc, #228]	@ (800efb0 <etharp_query+0x268>)
 800eeca:	4613      	mov	r3, r2
 800eecc:	005b      	lsls	r3, r3, #1
 800eece:	4413      	add	r3, r2
 800eed0:	00db      	lsls	r3, r3, #3
 800eed2:	440b      	add	r3, r1
 800eed4:	3314      	adds	r3, #20
 800eed6:	781b      	ldrb	r3, [r3, #0]
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	d15c      	bne.n	800ef96 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800eedc:	2300      	movs	r3, #0
 800eede:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800eee4:	e01c      	b.n	800ef20 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800eee6:	69fb      	ldr	r3, [r7, #28]
 800eee8:	895a      	ldrh	r2, [r3, #10]
 800eeea:	69fb      	ldr	r3, [r7, #28]
 800eeec:	891b      	ldrh	r3, [r3, #8]
 800eeee:	429a      	cmp	r2, r3
 800eef0:	d10a      	bne.n	800ef08 <etharp_query+0x1c0>
 800eef2:	69fb      	ldr	r3, [r7, #28]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d006      	beq.n	800ef08 <etharp_query+0x1c0>
 800eefa:	4b2a      	ldr	r3, [pc, #168]	@ (800efa4 <etharp_query+0x25c>)
 800eefc:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800ef00:	492f      	ldr	r1, [pc, #188]	@ (800efc0 <etharp_query+0x278>)
 800ef02:	482a      	ldr	r0, [pc, #168]	@ (800efac <etharp_query+0x264>)
 800ef04:	f003 f930 	bl	8012168 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800ef08:	69fb      	ldr	r3, [r7, #28]
 800ef0a:	7b1b      	ldrb	r3, [r3, #12]
 800ef0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d002      	beq.n	800ef1a <etharp_query+0x1d2>
        copy_needed = 1;
 800ef14:	2301      	movs	r3, #1
 800ef16:	61bb      	str	r3, [r7, #24]
        break;
 800ef18:	e005      	b.n	800ef26 <etharp_query+0x1de>
      }
      p = p->next;
 800ef1a:	69fb      	ldr	r3, [r7, #28]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ef20:	69fb      	ldr	r3, [r7, #28]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d1df      	bne.n	800eee6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800ef26:	69bb      	ldr	r3, [r7, #24]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d007      	beq.n	800ef3c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ef2c:	687a      	ldr	r2, [r7, #4]
 800ef2e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800ef32:	200e      	movs	r0, #14
 800ef34:	f7f8 fed8 	bl	8007ce8 <pbuf_clone>
 800ef38:	61f8      	str	r0, [r7, #28]
 800ef3a:	e004      	b.n	800ef46 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800ef40:	69f8      	ldr	r0, [r7, #28]
 800ef42:	f7f8 fd15 	bl	8007970 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800ef46:	69fb      	ldr	r3, [r7, #28]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d021      	beq.n	800ef90 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800ef4c:	7c7a      	ldrb	r2, [r7, #17]
 800ef4e:	4918      	ldr	r1, [pc, #96]	@ (800efb0 <etharp_query+0x268>)
 800ef50:	4613      	mov	r3, r2
 800ef52:	005b      	lsls	r3, r3, #1
 800ef54:	4413      	add	r3, r2
 800ef56:	00db      	lsls	r3, r3, #3
 800ef58:	440b      	add	r3, r1
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d00a      	beq.n	800ef76 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800ef60:	7c7a      	ldrb	r2, [r7, #17]
 800ef62:	4913      	ldr	r1, [pc, #76]	@ (800efb0 <etharp_query+0x268>)
 800ef64:	4613      	mov	r3, r2
 800ef66:	005b      	lsls	r3, r3, #1
 800ef68:	4413      	add	r3, r2
 800ef6a:	00db      	lsls	r3, r3, #3
 800ef6c:	440b      	add	r3, r1
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	4618      	mov	r0, r3
 800ef72:	f7f8 fc5d 	bl	8007830 <pbuf_free>
      }
      arp_table[i].q = p;
 800ef76:	7c7a      	ldrb	r2, [r7, #17]
 800ef78:	490d      	ldr	r1, [pc, #52]	@ (800efb0 <etharp_query+0x268>)
 800ef7a:	4613      	mov	r3, r2
 800ef7c:	005b      	lsls	r3, r3, #1
 800ef7e:	4413      	add	r3, r2
 800ef80:	00db      	lsls	r3, r3, #3
 800ef82:	440b      	add	r3, r1
 800ef84:	69fa      	ldr	r2, [r7, #28]
 800ef86:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ef8e:	e002      	b.n	800ef96 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800ef90:	23ff      	movs	r3, #255	@ 0xff
 800ef92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800ef96:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	3728      	adds	r7, #40	@ 0x28
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}
 800efa2:	bf00      	nop
 800efa4:	08015708 	.word	0x08015708
 800efa8:	080158b4 	.word	0x080158b4
 800efac:	08015780 	.word	0x08015780
 800efb0:	20008490 	.word	0x20008490
 800efb4:	080158c4 	.word	0x080158c4
 800efb8:	080158a8 	.word	0x080158a8
 800efbc:	20008580 	.word	0x20008580
 800efc0:	080158ec 	.word	0x080158ec

0800efc4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b08a      	sub	sp, #40	@ 0x28
 800efc8:	af02      	add	r7, sp, #8
 800efca:	60f8      	str	r0, [r7, #12]
 800efcc:	60b9      	str	r1, [r7, #8]
 800efce:	607a      	str	r2, [r7, #4]
 800efd0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800efd2:	2300      	movs	r3, #0
 800efd4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d106      	bne.n	800efea <etharp_raw+0x26>
 800efdc:	4b3a      	ldr	r3, [pc, #232]	@ (800f0c8 <etharp_raw+0x104>)
 800efde:	f240 4257 	movw	r2, #1111	@ 0x457
 800efe2:	493a      	ldr	r1, [pc, #232]	@ (800f0cc <etharp_raw+0x108>)
 800efe4:	483a      	ldr	r0, [pc, #232]	@ (800f0d0 <etharp_raw+0x10c>)
 800efe6:	f003 f8bf 	bl	8012168 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800efea:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800efee:	211c      	movs	r1, #28
 800eff0:	200e      	movs	r0, #14
 800eff2:	f7f8 f939 	bl	8007268 <pbuf_alloc>
 800eff6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800eff8:	69bb      	ldr	r3, [r7, #24]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d102      	bne.n	800f004 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800effe:	f04f 33ff 	mov.w	r3, #4294967295
 800f002:	e05d      	b.n	800f0c0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f004:	69bb      	ldr	r3, [r7, #24]
 800f006:	895b      	ldrh	r3, [r3, #10]
 800f008:	2b1b      	cmp	r3, #27
 800f00a:	d806      	bhi.n	800f01a <etharp_raw+0x56>
 800f00c:	4b2e      	ldr	r3, [pc, #184]	@ (800f0c8 <etharp_raw+0x104>)
 800f00e:	f240 4262 	movw	r2, #1122	@ 0x462
 800f012:	4930      	ldr	r1, [pc, #192]	@ (800f0d4 <etharp_raw+0x110>)
 800f014:	482e      	ldr	r0, [pc, #184]	@ (800f0d0 <etharp_raw+0x10c>)
 800f016:	f003 f8a7 	bl	8012168 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f01a:	69bb      	ldr	r3, [r7, #24]
 800f01c:	685b      	ldr	r3, [r3, #4]
 800f01e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f020:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800f022:	4618      	mov	r0, r3
 800f024:	f7f7 f8a6 	bl	8006174 <lwip_htons>
 800f028:	4603      	mov	r3, r0
 800f02a:	461a      	mov	r2, r3
 800f02c:	697b      	ldr	r3, [r7, #20]
 800f02e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f036:	2b06      	cmp	r3, #6
 800f038:	d006      	beq.n	800f048 <etharp_raw+0x84>
 800f03a:	4b23      	ldr	r3, [pc, #140]	@ (800f0c8 <etharp_raw+0x104>)
 800f03c:	f240 4269 	movw	r2, #1129	@ 0x469
 800f040:	4925      	ldr	r1, [pc, #148]	@ (800f0d8 <etharp_raw+0x114>)
 800f042:	4823      	ldr	r0, [pc, #140]	@ (800f0d0 <etharp_raw+0x10c>)
 800f044:	f003 f890 	bl	8012168 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f048:	697b      	ldr	r3, [r7, #20]
 800f04a:	3308      	adds	r3, #8
 800f04c:	2206      	movs	r2, #6
 800f04e:	6839      	ldr	r1, [r7, #0]
 800f050:	4618      	mov	r0, r3
 800f052:	f003 f9d8 	bl	8012406 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	3312      	adds	r3, #18
 800f05a:	2206      	movs	r2, #6
 800f05c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f05e:	4618      	mov	r0, r3
 800f060:	f003 f9d1 	bl	8012406 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f064:	697b      	ldr	r3, [r7, #20]
 800f066:	330e      	adds	r3, #14
 800f068:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f06a:	6812      	ldr	r2, [r2, #0]
 800f06c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	3318      	adds	r3, #24
 800f072:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f074:	6812      	ldr	r2, [r2, #0]
 800f076:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f078:	697b      	ldr	r3, [r7, #20]
 800f07a:	2200      	movs	r2, #0
 800f07c:	701a      	strb	r2, [r3, #0]
 800f07e:	2200      	movs	r2, #0
 800f080:	f042 0201 	orr.w	r2, r2, #1
 800f084:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	2200      	movs	r2, #0
 800f08a:	f042 0208 	orr.w	r2, r2, #8
 800f08e:	709a      	strb	r2, [r3, #2]
 800f090:	2200      	movs	r2, #0
 800f092:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	2206      	movs	r2, #6
 800f098:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	2204      	movs	r2, #4
 800f09e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f0a0:	f640 0306 	movw	r3, #2054	@ 0x806
 800f0a4:	9300      	str	r3, [sp, #0]
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	68ba      	ldr	r2, [r7, #8]
 800f0aa:	69b9      	ldr	r1, [r7, #24]
 800f0ac:	68f8      	ldr	r0, [r7, #12]
 800f0ae:	f001 fb7b 	bl	80107a8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f0b2:	69b8      	ldr	r0, [r7, #24]
 800f0b4:	f7f8 fbbc 	bl	8007830 <pbuf_free>
  p = NULL;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800f0bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3720      	adds	r7, #32
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}
 800f0c8:	08015708 	.word	0x08015708
 800f0cc:	08015858 	.word	0x08015858
 800f0d0:	08015780 	.word	0x08015780
 800f0d4:	08015908 	.word	0x08015908
 800f0d8:	0801593c 	.word	0x0801593c

0800f0dc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b088      	sub	sp, #32
 800f0e0:	af04      	add	r7, sp, #16
 800f0e2:	60f8      	str	r0, [r7, #12]
 800f0e4:	60b9      	str	r1, [r7, #8]
 800f0e6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f0f8:	2201      	movs	r2, #1
 800f0fa:	9203      	str	r2, [sp, #12]
 800f0fc:	68ba      	ldr	r2, [r7, #8]
 800f0fe:	9202      	str	r2, [sp, #8]
 800f100:	4a06      	ldr	r2, [pc, #24]	@ (800f11c <etharp_request_dst+0x40>)
 800f102:	9201      	str	r2, [sp, #4]
 800f104:	9300      	str	r3, [sp, #0]
 800f106:	4603      	mov	r3, r0
 800f108:	687a      	ldr	r2, [r7, #4]
 800f10a:	68f8      	ldr	r0, [r7, #12]
 800f10c:	f7ff ff5a 	bl	800efc4 <etharp_raw>
 800f110:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800f112:	4618      	mov	r0, r3
 800f114:	3710      	adds	r7, #16
 800f116:	46bd      	mov	sp, r7
 800f118:	bd80      	pop	{r7, pc}
 800f11a:	bf00      	nop
 800f11c:	08016020 	.word	0x08016020

0800f120 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b082      	sub	sp, #8
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
 800f128:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f12a:	4a05      	ldr	r2, [pc, #20]	@ (800f140 <etharp_request+0x20>)
 800f12c:	6839      	ldr	r1, [r7, #0]
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	f7ff ffd4 	bl	800f0dc <etharp_request_dst>
 800f134:	4603      	mov	r3, r0
}
 800f136:	4618      	mov	r0, r3
 800f138:	3708      	adds	r7, #8
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}
 800f13e:	bf00      	nop
 800f140:	08016018 	.word	0x08016018

0800f144 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b08e      	sub	sp, #56	@ 0x38
 800f148:	af04      	add	r7, sp, #16
 800f14a:	6078      	str	r0, [r7, #4]
 800f14c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800f14e:	4b79      	ldr	r3, [pc, #484]	@ (800f334 <icmp_input+0x1f0>)
 800f150:	689b      	ldr	r3, [r3, #8]
 800f152:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800f154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f156:	781b      	ldrb	r3, [r3, #0]
 800f158:	f003 030f 	and.w	r3, r3, #15
 800f15c:	b2db      	uxtb	r3, r3
 800f15e:	009b      	lsls	r3, r3, #2
 800f160:	b2db      	uxtb	r3, r3
 800f162:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800f164:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f166:	2b13      	cmp	r3, #19
 800f168:	f240 80cd 	bls.w	800f306 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	895b      	ldrh	r3, [r3, #10]
 800f170:	2b03      	cmp	r3, #3
 800f172:	f240 80ca 	bls.w	800f30a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	685b      	ldr	r3, [r3, #4]
 800f17a:	781b      	ldrb	r3, [r3, #0]
 800f17c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800f180:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800f184:	2b00      	cmp	r3, #0
 800f186:	f000 80b7 	beq.w	800f2f8 <icmp_input+0x1b4>
 800f18a:	2b08      	cmp	r3, #8
 800f18c:	f040 80b7 	bne.w	800f2fe <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800f190:	4b69      	ldr	r3, [pc, #420]	@ (800f338 <icmp_input+0x1f4>)
 800f192:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f194:	4b67      	ldr	r3, [pc, #412]	@ (800f334 <icmp_input+0x1f0>)
 800f196:	695b      	ldr	r3, [r3, #20]
 800f198:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f19c:	2be0      	cmp	r3, #224	@ 0xe0
 800f19e:	f000 80bb 	beq.w	800f318 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800f1a2:	4b64      	ldr	r3, [pc, #400]	@ (800f334 <icmp_input+0x1f0>)
 800f1a4:	695b      	ldr	r3, [r3, #20]
 800f1a6:	4a63      	ldr	r2, [pc, #396]	@ (800f334 <icmp_input+0x1f0>)
 800f1a8:	6812      	ldr	r2, [r2, #0]
 800f1aa:	4611      	mov	r1, r2
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f000 fbed 	bl	800f98c <ip4_addr_isbroadcast_u32>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	f040 80b1 	bne.w	800f31c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	891b      	ldrh	r3, [r3, #8]
 800f1be:	2b07      	cmp	r3, #7
 800f1c0:	f240 80a5 	bls.w	800f30e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f1c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f1c6:	330e      	adds	r3, #14
 800f1c8:	4619      	mov	r1, r3
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	f7f8 fa9a 	bl	8007704 <pbuf_add_header>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d04b      	beq.n	800f26e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	891a      	ldrh	r2, [r3, #8]
 800f1da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f1dc:	4413      	add	r3, r2
 800f1de:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	891b      	ldrh	r3, [r3, #8]
 800f1e4:	8b7a      	ldrh	r2, [r7, #26]
 800f1e6:	429a      	cmp	r2, r3
 800f1e8:	f0c0 809a 	bcc.w	800f320 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800f1ec:	8b7b      	ldrh	r3, [r7, #26]
 800f1ee:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f1f2:	4619      	mov	r1, r3
 800f1f4:	200e      	movs	r0, #14
 800f1f6:	f7f8 f837 	bl	8007268 <pbuf_alloc>
 800f1fa:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	f000 8090 	beq.w	800f324 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800f204:	697b      	ldr	r3, [r7, #20]
 800f206:	895b      	ldrh	r3, [r3, #10]
 800f208:	461a      	mov	r2, r3
 800f20a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f20c:	3308      	adds	r3, #8
 800f20e:	429a      	cmp	r2, r3
 800f210:	d203      	bcs.n	800f21a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800f212:	6978      	ldr	r0, [r7, #20]
 800f214:	f7f8 fb0c 	bl	8007830 <pbuf_free>
          goto icmperr;
 800f218:	e085      	b.n	800f326 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	685b      	ldr	r3, [r3, #4]
 800f21e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800f220:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f222:	4618      	mov	r0, r3
 800f224:	f003 f8ef 	bl	8012406 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800f228:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f22a:	4619      	mov	r1, r3
 800f22c:	6978      	ldr	r0, [r7, #20]
 800f22e:	f7f8 fa79 	bl	8007724 <pbuf_remove_header>
 800f232:	4603      	mov	r3, r0
 800f234:	2b00      	cmp	r3, #0
 800f236:	d009      	beq.n	800f24c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f238:	4b40      	ldr	r3, [pc, #256]	@ (800f33c <icmp_input+0x1f8>)
 800f23a:	22b6      	movs	r2, #182	@ 0xb6
 800f23c:	4940      	ldr	r1, [pc, #256]	@ (800f340 <icmp_input+0x1fc>)
 800f23e:	4841      	ldr	r0, [pc, #260]	@ (800f344 <icmp_input+0x200>)
 800f240:	f002 ff92 	bl	8012168 <iprintf>
          pbuf_free(r);
 800f244:	6978      	ldr	r0, [r7, #20]
 800f246:	f7f8 faf3 	bl	8007830 <pbuf_free>
          goto icmperr;
 800f24a:	e06c      	b.n	800f326 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800f24c:	6879      	ldr	r1, [r7, #4]
 800f24e:	6978      	ldr	r0, [r7, #20]
 800f250:	f7f8 fc06 	bl	8007a60 <pbuf_copy>
 800f254:	4603      	mov	r3, r0
 800f256:	2b00      	cmp	r3, #0
 800f258:	d003      	beq.n	800f262 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800f25a:	6978      	ldr	r0, [r7, #20]
 800f25c:	f7f8 fae8 	bl	8007830 <pbuf_free>
          goto icmperr;
 800f260:	e061      	b.n	800f326 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f7f8 fae4 	bl	8007830 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	607b      	str	r3, [r7, #4]
 800f26c:	e00f      	b.n	800f28e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f26e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f270:	330e      	adds	r3, #14
 800f272:	4619      	mov	r1, r3
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f7f8 fa55 	bl	8007724 <pbuf_remove_header>
 800f27a:	4603      	mov	r3, r0
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d006      	beq.n	800f28e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f280:	4b2e      	ldr	r3, [pc, #184]	@ (800f33c <icmp_input+0x1f8>)
 800f282:	22c7      	movs	r2, #199	@ 0xc7
 800f284:	4930      	ldr	r1, [pc, #192]	@ (800f348 <icmp_input+0x204>)
 800f286:	482f      	ldr	r0, [pc, #188]	@ (800f344 <icmp_input+0x200>)
 800f288:	f002 ff6e 	bl	8012168 <iprintf>
          goto icmperr;
 800f28c:	e04b      	b.n	800f326 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	685b      	ldr	r3, [r3, #4]
 800f292:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800f294:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f296:	4619      	mov	r1, r3
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f7f8 fa33 	bl	8007704 <pbuf_add_header>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d12b      	bne.n	800f2fc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	685b      	ldr	r3, [r3, #4]
 800f2a8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800f2aa:	69fb      	ldr	r3, [r7, #28]
 800f2ac:	681a      	ldr	r2, [r3, #0]
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f2b2:	4b20      	ldr	r3, [pc, #128]	@ (800f334 <icmp_input+0x1f0>)
 800f2b4:	691a      	ldr	r2, [r3, #16]
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f2ba:	693b      	ldr	r3, [r7, #16]
 800f2bc:	2200      	movs	r2, #0
 800f2be:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800f2c0:	693b      	ldr	r3, [r7, #16]
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	709a      	strb	r2, [r3, #2]
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	22ff      	movs	r2, #255	@ 0xff
 800f2ce:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	729a      	strb	r2, [r3, #10]
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	9302      	str	r3, [sp, #8]
 800f2de:	2301      	movs	r3, #1
 800f2e0:	9301      	str	r3, [sp, #4]
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	9300      	str	r3, [sp, #0]
 800f2e6:	23ff      	movs	r3, #255	@ 0xff
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	69f9      	ldr	r1, [r7, #28]
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f000 fa75 	bl	800f7dc <ip4_output_if>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800f2f6:	e001      	b.n	800f2fc <icmp_input+0x1b8>
      break;
 800f2f8:	bf00      	nop
 800f2fa:	e000      	b.n	800f2fe <icmp_input+0x1ba>
      break;
 800f2fc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	f7f8 fa96 	bl	8007830 <pbuf_free>
  return;
 800f304:	e013      	b.n	800f32e <icmp_input+0x1ea>
    goto lenerr;
 800f306:	bf00      	nop
 800f308:	e002      	b.n	800f310 <icmp_input+0x1cc>
    goto lenerr;
 800f30a:	bf00      	nop
 800f30c:	e000      	b.n	800f310 <icmp_input+0x1cc>
        goto lenerr;
 800f30e:	bf00      	nop
lenerr:
  pbuf_free(p);
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f7f8 fa8d 	bl	8007830 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f316:	e00a      	b.n	800f32e <icmp_input+0x1ea>
        goto icmperr;
 800f318:	bf00      	nop
 800f31a:	e004      	b.n	800f326 <icmp_input+0x1e2>
        goto icmperr;
 800f31c:	bf00      	nop
 800f31e:	e002      	b.n	800f326 <icmp_input+0x1e2>
          goto icmperr;
 800f320:	bf00      	nop
 800f322:	e000      	b.n	800f326 <icmp_input+0x1e2>
          goto icmperr;
 800f324:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	f7f8 fa82 	bl	8007830 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f32c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f32e:	3728      	adds	r7, #40	@ 0x28
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}
 800f334:	20004ec0 	.word	0x20004ec0
 800f338:	20004ed4 	.word	0x20004ed4
 800f33c:	08015980 	.word	0x08015980
 800f340:	080159b8 	.word	0x080159b8
 800f344:	080159f0 	.word	0x080159f0
 800f348:	08015a18 	.word	0x08015a18

0800f34c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b082      	sub	sp, #8
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
 800f354:	460b      	mov	r3, r1
 800f356:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800f358:	78fb      	ldrb	r3, [r7, #3]
 800f35a:	461a      	mov	r2, r3
 800f35c:	2103      	movs	r1, #3
 800f35e:	6878      	ldr	r0, [r7, #4]
 800f360:	f000 f814 	bl	800f38c <icmp_send_response>
}
 800f364:	bf00      	nop
 800f366:	3708      	adds	r7, #8
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}

0800f36c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b082      	sub	sp, #8
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	460b      	mov	r3, r1
 800f376:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f378:	78fb      	ldrb	r3, [r7, #3]
 800f37a:	461a      	mov	r2, r3
 800f37c:	210b      	movs	r1, #11
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f000 f804 	bl	800f38c <icmp_send_response>
}
 800f384:	bf00      	nop
 800f386:	3708      	adds	r7, #8
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}

0800f38c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b08c      	sub	sp, #48	@ 0x30
 800f390:	af04      	add	r7, sp, #16
 800f392:	6078      	str	r0, [r7, #4]
 800f394:	460b      	mov	r3, r1
 800f396:	70fb      	strb	r3, [r7, #3]
 800f398:	4613      	mov	r3, r2
 800f39a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f39c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f3a0:	2124      	movs	r1, #36	@ 0x24
 800f3a2:	2022      	movs	r0, #34	@ 0x22
 800f3a4:	f7f7 ff60 	bl	8007268 <pbuf_alloc>
 800f3a8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800f3aa:	69fb      	ldr	r3, [r7, #28]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d04c      	beq.n	800f44a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f3b0:	69fb      	ldr	r3, [r7, #28]
 800f3b2:	895b      	ldrh	r3, [r3, #10]
 800f3b4:	2b23      	cmp	r3, #35	@ 0x23
 800f3b6:	d806      	bhi.n	800f3c6 <icmp_send_response+0x3a>
 800f3b8:	4b26      	ldr	r3, [pc, #152]	@ (800f454 <icmp_send_response+0xc8>)
 800f3ba:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800f3be:	4926      	ldr	r1, [pc, #152]	@ (800f458 <icmp_send_response+0xcc>)
 800f3c0:	4826      	ldr	r0, [pc, #152]	@ (800f45c <icmp_send_response+0xd0>)
 800f3c2:	f002 fed1 	bl	8012168 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	685b      	ldr	r3, [r3, #4]
 800f3ca:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800f3cc:	69fb      	ldr	r3, [r7, #28]
 800f3ce:	685b      	ldr	r3, [r3, #4]
 800f3d0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	78fa      	ldrb	r2, [r7, #3]
 800f3d6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	78ba      	ldrb	r2, [r7, #2]
 800f3dc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	711a      	strb	r2, [r3, #4]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	719a      	strb	r2, [r3, #6]
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f3f2:	69fb      	ldr	r3, [r7, #28]
 800f3f4:	685b      	ldr	r3, [r3, #4]
 800f3f6:	f103 0008 	add.w	r0, r3, #8
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	685b      	ldr	r3, [r3, #4]
 800f3fe:	221c      	movs	r2, #28
 800f400:	4619      	mov	r1, r3
 800f402:	f003 f800 	bl	8012406 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800f406:	69bb      	ldr	r3, [r7, #24]
 800f408:	68db      	ldr	r3, [r3, #12]
 800f40a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800f40c:	f107 030c 	add.w	r3, r7, #12
 800f410:	4618      	mov	r0, r3
 800f412:	f000 f825 	bl	800f460 <ip4_route>
 800f416:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800f418:	693b      	ldr	r3, [r7, #16]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d011      	beq.n	800f442 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800f41e:	697b      	ldr	r3, [r7, #20]
 800f420:	2200      	movs	r2, #0
 800f422:	709a      	strb	r2, [r3, #2]
 800f424:	2200      	movs	r2, #0
 800f426:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f428:	f107 020c 	add.w	r2, r7, #12
 800f42c:	693b      	ldr	r3, [r7, #16]
 800f42e:	9302      	str	r3, [sp, #8]
 800f430:	2301      	movs	r3, #1
 800f432:	9301      	str	r3, [sp, #4]
 800f434:	2300      	movs	r3, #0
 800f436:	9300      	str	r3, [sp, #0]
 800f438:	23ff      	movs	r3, #255	@ 0xff
 800f43a:	2100      	movs	r1, #0
 800f43c:	69f8      	ldr	r0, [r7, #28]
 800f43e:	f000 f9cd 	bl	800f7dc <ip4_output_if>
  }
  pbuf_free(q);
 800f442:	69f8      	ldr	r0, [r7, #28]
 800f444:	f7f8 f9f4 	bl	8007830 <pbuf_free>
 800f448:	e000      	b.n	800f44c <icmp_send_response+0xc0>
    return;
 800f44a:	bf00      	nop
}
 800f44c:	3720      	adds	r7, #32
 800f44e:	46bd      	mov	sp, r7
 800f450:	bd80      	pop	{r7, pc}
 800f452:	bf00      	nop
 800f454:	08015980 	.word	0x08015980
 800f458:	08015a4c 	.word	0x08015a4c
 800f45c:	080159f0 	.word	0x080159f0

0800f460 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800f460:	b480      	push	{r7}
 800f462:	b085      	sub	sp, #20
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800f468:	4b33      	ldr	r3, [pc, #204]	@ (800f538 <ip4_route+0xd8>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	60fb      	str	r3, [r7, #12]
 800f46e:	e036      	b.n	800f4de <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f476:	f003 0301 	and.w	r3, r3, #1
 800f47a:	b2db      	uxtb	r3, r3
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d02b      	beq.n	800f4d8 <ip4_route+0x78>
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f486:	089b      	lsrs	r3, r3, #2
 800f488:	f003 0301 	and.w	r3, r3, #1
 800f48c:	b2db      	uxtb	r3, r3
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d022      	beq.n	800f4d8 <ip4_route+0x78>
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	3304      	adds	r3, #4
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d01d      	beq.n	800f4d8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681a      	ldr	r2, [r3, #0]
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	3304      	adds	r3, #4
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	405a      	eors	r2, r3
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	3308      	adds	r3, #8
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	4013      	ands	r3, r2
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d101      	bne.n	800f4b8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	e038      	b.n	800f52a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f4be:	f003 0302 	and.w	r3, r3, #2
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d108      	bne.n	800f4d8 <ip4_route+0x78>
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681a      	ldr	r2, [r3, #0]
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	330c      	adds	r3, #12
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d101      	bne.n	800f4d8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	e028      	b.n	800f52a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	60fb      	str	r3, [r7, #12]
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d1c5      	bne.n	800f470 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f4e4:	4b15      	ldr	r3, [pc, #84]	@ (800f53c <ip4_route+0xdc>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d01a      	beq.n	800f522 <ip4_route+0xc2>
 800f4ec:	4b13      	ldr	r3, [pc, #76]	@ (800f53c <ip4_route+0xdc>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f4f4:	f003 0301 	and.w	r3, r3, #1
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d012      	beq.n	800f522 <ip4_route+0xc2>
 800f4fc:	4b0f      	ldr	r3, [pc, #60]	@ (800f53c <ip4_route+0xdc>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f504:	f003 0304 	and.w	r3, r3, #4
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d00a      	beq.n	800f522 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f50c:	4b0b      	ldr	r3, [pc, #44]	@ (800f53c <ip4_route+0xdc>)
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	3304      	adds	r3, #4
 800f512:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f514:	2b00      	cmp	r3, #0
 800f516:	d004      	beq.n	800f522 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	b2db      	uxtb	r3, r3
 800f51e:	2b7f      	cmp	r3, #127	@ 0x7f
 800f520:	d101      	bne.n	800f526 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800f522:	2300      	movs	r3, #0
 800f524:	e001      	b.n	800f52a <ip4_route+0xca>
  }

  return netif_default;
 800f526:	4b05      	ldr	r3, [pc, #20]	@ (800f53c <ip4_route+0xdc>)
 800f528:	681b      	ldr	r3, [r3, #0]
}
 800f52a:	4618      	mov	r0, r3
 800f52c:	3714      	adds	r7, #20
 800f52e:	46bd      	mov	sp, r7
 800f530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f534:	4770      	bx	lr
 800f536:	bf00      	nop
 800f538:	20008424 	.word	0x20008424
 800f53c:	20008428 	.word	0x20008428

0800f540 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b082      	sub	sp, #8
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f54e:	f003 0301 	and.w	r3, r3, #1
 800f552:	b2db      	uxtb	r3, r3
 800f554:	2b00      	cmp	r3, #0
 800f556:	d016      	beq.n	800f586 <ip4_input_accept+0x46>
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	3304      	adds	r3, #4
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d011      	beq.n	800f586 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f562:	4b0b      	ldr	r3, [pc, #44]	@ (800f590 <ip4_input_accept+0x50>)
 800f564:	695a      	ldr	r2, [r3, #20]
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	3304      	adds	r3, #4
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	429a      	cmp	r2, r3
 800f56e:	d008      	beq.n	800f582 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f570:	4b07      	ldr	r3, [pc, #28]	@ (800f590 <ip4_input_accept+0x50>)
 800f572:	695b      	ldr	r3, [r3, #20]
 800f574:	6879      	ldr	r1, [r7, #4]
 800f576:	4618      	mov	r0, r3
 800f578:	f000 fa08 	bl	800f98c <ip4_addr_isbroadcast_u32>
 800f57c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d001      	beq.n	800f586 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800f582:	2301      	movs	r3, #1
 800f584:	e000      	b.n	800f588 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800f586:	2300      	movs	r3, #0
}
 800f588:	4618      	mov	r0, r3
 800f58a:	3708      	adds	r7, #8
 800f58c:	46bd      	mov	sp, r7
 800f58e:	bd80      	pop	{r7, pc}
 800f590:	20004ec0 	.word	0x20004ec0

0800f594 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b086      	sub	sp, #24
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	685b      	ldr	r3, [r3, #4]
 800f5a2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	781b      	ldrb	r3, [r3, #0]
 800f5a8:	091b      	lsrs	r3, r3, #4
 800f5aa:	b2db      	uxtb	r3, r3
 800f5ac:	2b04      	cmp	r3, #4
 800f5ae:	d004      	beq.n	800f5ba <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f5b0:	6878      	ldr	r0, [r7, #4]
 800f5b2:	f7f8 f93d 	bl	8007830 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	e107      	b.n	800f7ca <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	781b      	ldrb	r3, [r3, #0]
 800f5be:	f003 030f 	and.w	r3, r3, #15
 800f5c2:	b2db      	uxtb	r3, r3
 800f5c4:	009b      	lsls	r3, r3, #2
 800f5c6:	b2db      	uxtb	r3, r3
 800f5c8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f5ca:	697b      	ldr	r3, [r7, #20]
 800f5cc:	885b      	ldrh	r3, [r3, #2]
 800f5ce:	b29b      	uxth	r3, r3
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f7f6 fdcf 	bl	8006174 <lwip_htons>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	891b      	ldrh	r3, [r3, #8]
 800f5de:	89ba      	ldrh	r2, [r7, #12]
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d204      	bcs.n	800f5ee <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800f5e4:	89bb      	ldrh	r3, [r7, #12]
 800f5e6:	4619      	mov	r1, r3
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f7f7 ff9b 	bl	8007524 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	895b      	ldrh	r3, [r3, #10]
 800f5f2:	89fa      	ldrh	r2, [r7, #14]
 800f5f4:	429a      	cmp	r2, r3
 800f5f6:	d807      	bhi.n	800f608 <ip4_input+0x74>
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	891b      	ldrh	r3, [r3, #8]
 800f5fc:	89ba      	ldrh	r2, [r7, #12]
 800f5fe:	429a      	cmp	r2, r3
 800f600:	d802      	bhi.n	800f608 <ip4_input+0x74>
 800f602:	89fb      	ldrh	r3, [r7, #14]
 800f604:	2b13      	cmp	r3, #19
 800f606:	d804      	bhi.n	800f612 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f7f8 f911 	bl	8007830 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800f60e:	2300      	movs	r3, #0
 800f610:	e0db      	b.n	800f7ca <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	691b      	ldr	r3, [r3, #16]
 800f616:	4a6f      	ldr	r2, [pc, #444]	@ (800f7d4 <ip4_input+0x240>)
 800f618:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	68db      	ldr	r3, [r3, #12]
 800f61e:	4a6d      	ldr	r2, [pc, #436]	@ (800f7d4 <ip4_input+0x240>)
 800f620:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f622:	4b6c      	ldr	r3, [pc, #432]	@ (800f7d4 <ip4_input+0x240>)
 800f624:	695b      	ldr	r3, [r3, #20]
 800f626:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f62a:	2be0      	cmp	r3, #224	@ 0xe0
 800f62c:	d112      	bne.n	800f654 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f634:	f003 0301 	and.w	r3, r3, #1
 800f638:	b2db      	uxtb	r3, r3
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d007      	beq.n	800f64e <ip4_input+0xba>
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	3304      	adds	r3, #4
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d002      	beq.n	800f64e <ip4_input+0xba>
      netif = inp;
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	613b      	str	r3, [r7, #16]
 800f64c:	e02a      	b.n	800f6a4 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f64e:	2300      	movs	r3, #0
 800f650:	613b      	str	r3, [r7, #16]
 800f652:	e027      	b.n	800f6a4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800f654:	6838      	ldr	r0, [r7, #0]
 800f656:	f7ff ff73 	bl	800f540 <ip4_input_accept>
 800f65a:	4603      	mov	r3, r0
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d002      	beq.n	800f666 <ip4_input+0xd2>
      netif = inp;
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	613b      	str	r3, [r7, #16]
 800f664:	e01e      	b.n	800f6a4 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f666:	2300      	movs	r3, #0
 800f668:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800f66a:	4b5a      	ldr	r3, [pc, #360]	@ (800f7d4 <ip4_input+0x240>)
 800f66c:	695b      	ldr	r3, [r3, #20]
 800f66e:	b2db      	uxtb	r3, r3
 800f670:	2b7f      	cmp	r3, #127	@ 0x7f
 800f672:	d017      	beq.n	800f6a4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800f674:	4b58      	ldr	r3, [pc, #352]	@ (800f7d8 <ip4_input+0x244>)
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	613b      	str	r3, [r7, #16]
 800f67a:	e00e      	b.n	800f69a <ip4_input+0x106>
          if (netif == inp) {
 800f67c:	693a      	ldr	r2, [r7, #16]
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	429a      	cmp	r2, r3
 800f682:	d006      	beq.n	800f692 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800f684:	6938      	ldr	r0, [r7, #16]
 800f686:	f7ff ff5b 	bl	800f540 <ip4_input_accept>
 800f68a:	4603      	mov	r3, r0
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d108      	bne.n	800f6a2 <ip4_input+0x10e>
 800f690:	e000      	b.n	800f694 <ip4_input+0x100>
            continue;
 800f692:	bf00      	nop
        NETIF_FOREACH(netif) {
 800f694:	693b      	ldr	r3, [r7, #16]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	613b      	str	r3, [r7, #16]
 800f69a:	693b      	ldr	r3, [r7, #16]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d1ed      	bne.n	800f67c <ip4_input+0xe8>
 800f6a0:	e000      	b.n	800f6a4 <ip4_input+0x110>
            break;
 800f6a2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f6a4:	4b4b      	ldr	r3, [pc, #300]	@ (800f7d4 <ip4_input+0x240>)
 800f6a6:	691b      	ldr	r3, [r3, #16]
 800f6a8:	6839      	ldr	r1, [r7, #0]
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f000 f96e 	bl	800f98c <ip4_addr_isbroadcast_u32>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d105      	bne.n	800f6c2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800f6b6:	4b47      	ldr	r3, [pc, #284]	@ (800f7d4 <ip4_input+0x240>)
 800f6b8:	691b      	ldr	r3, [r3, #16]
 800f6ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f6be:	2be0      	cmp	r3, #224	@ 0xe0
 800f6c0:	d104      	bne.n	800f6cc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f7f8 f8b4 	bl	8007830 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	e07e      	b.n	800f7ca <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800f6cc:	693b      	ldr	r3, [r7, #16]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d104      	bne.n	800f6dc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800f6d2:	6878      	ldr	r0, [r7, #4]
 800f6d4:	f7f8 f8ac 	bl	8007830 <pbuf_free>
    return ERR_OK;
 800f6d8:	2300      	movs	r3, #0
 800f6da:	e076      	b.n	800f7ca <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	88db      	ldrh	r3, [r3, #6]
 800f6e0:	b29b      	uxth	r3, r3
 800f6e2:	461a      	mov	r2, r3
 800f6e4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800f6e8:	4013      	ands	r3, r2
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d00b      	beq.n	800f706 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f000 fc92 	bl	8010018 <ip4_reass>
 800f6f4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d101      	bne.n	800f700 <ip4_input+0x16c>
      return ERR_OK;
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	e064      	b.n	800f7ca <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	685b      	ldr	r3, [r3, #4]
 800f704:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800f706:	4a33      	ldr	r2, [pc, #204]	@ (800f7d4 <ip4_input+0x240>)
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800f70c:	4a31      	ldr	r2, [pc, #196]	@ (800f7d4 <ip4_input+0x240>)
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800f712:	4a30      	ldr	r2, [pc, #192]	@ (800f7d4 <ip4_input+0x240>)
 800f714:	697b      	ldr	r3, [r7, #20]
 800f716:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800f718:	697b      	ldr	r3, [r7, #20]
 800f71a:	781b      	ldrb	r3, [r3, #0]
 800f71c:	f003 030f 	and.w	r3, r3, #15
 800f720:	b2db      	uxtb	r3, r3
 800f722:	009b      	lsls	r3, r3, #2
 800f724:	b2db      	uxtb	r3, r3
 800f726:	461a      	mov	r2, r3
 800f728:	4b2a      	ldr	r3, [pc, #168]	@ (800f7d4 <ip4_input+0x240>)
 800f72a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800f72c:	89fb      	ldrh	r3, [r7, #14]
 800f72e:	4619      	mov	r1, r3
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	f7f7 fff7 	bl	8007724 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800f736:	697b      	ldr	r3, [r7, #20]
 800f738:	7a5b      	ldrb	r3, [r3, #9]
 800f73a:	2b11      	cmp	r3, #17
 800f73c:	d006      	beq.n	800f74c <ip4_input+0x1b8>
 800f73e:	2b11      	cmp	r3, #17
 800f740:	dc13      	bgt.n	800f76a <ip4_input+0x1d6>
 800f742:	2b01      	cmp	r3, #1
 800f744:	d00c      	beq.n	800f760 <ip4_input+0x1cc>
 800f746:	2b06      	cmp	r3, #6
 800f748:	d005      	beq.n	800f756 <ip4_input+0x1c2>
 800f74a:	e00e      	b.n	800f76a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800f74c:	6839      	ldr	r1, [r7, #0]
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f7fe fc68 	bl	800e024 <udp_input>
        break;
 800f754:	e026      	b.n	800f7a4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800f756:	6839      	ldr	r1, [r7, #0]
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f7fa f88f 	bl	800987c <tcp_input>
        break;
 800f75e:	e021      	b.n	800f7a4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800f760:	6839      	ldr	r1, [r7, #0]
 800f762:	6878      	ldr	r0, [r7, #4]
 800f764:	f7ff fcee 	bl	800f144 <icmp_input>
        break;
 800f768:	e01c      	b.n	800f7a4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f76a:	4b1a      	ldr	r3, [pc, #104]	@ (800f7d4 <ip4_input+0x240>)
 800f76c:	695b      	ldr	r3, [r3, #20]
 800f76e:	6939      	ldr	r1, [r7, #16]
 800f770:	4618      	mov	r0, r3
 800f772:	f000 f90b 	bl	800f98c <ip4_addr_isbroadcast_u32>
 800f776:	4603      	mov	r3, r0
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d10f      	bne.n	800f79c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f77c:	4b15      	ldr	r3, [pc, #84]	@ (800f7d4 <ip4_input+0x240>)
 800f77e:	695b      	ldr	r3, [r3, #20]
 800f780:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f784:	2be0      	cmp	r3, #224	@ 0xe0
 800f786:	d009      	beq.n	800f79c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800f788:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f78c:	4619      	mov	r1, r3
 800f78e:	6878      	ldr	r0, [r7, #4]
 800f790:	f7f8 f83b 	bl	800780a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800f794:	2102      	movs	r1, #2
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f7ff fdd8 	bl	800f34c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f7f8 f847 	bl	8007830 <pbuf_free>
        break;
 800f7a2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800f7a4:	4b0b      	ldr	r3, [pc, #44]	@ (800f7d4 <ip4_input+0x240>)
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800f7aa:	4b0a      	ldr	r3, [pc, #40]	@ (800f7d4 <ip4_input+0x240>)
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800f7b0:	4b08      	ldr	r3, [pc, #32]	@ (800f7d4 <ip4_input+0x240>)
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800f7b6:	4b07      	ldr	r3, [pc, #28]	@ (800f7d4 <ip4_input+0x240>)
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800f7bc:	4b05      	ldr	r3, [pc, #20]	@ (800f7d4 <ip4_input+0x240>)
 800f7be:	2200      	movs	r2, #0
 800f7c0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800f7c2:	4b04      	ldr	r3, [pc, #16]	@ (800f7d4 <ip4_input+0x240>)
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800f7c8:	2300      	movs	r3, #0
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3718      	adds	r7, #24
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}
 800f7d2:	bf00      	nop
 800f7d4:	20004ec0 	.word	0x20004ec0
 800f7d8:	20008424 	.word	0x20008424

0800f7dc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b08a      	sub	sp, #40	@ 0x28
 800f7e0:	af04      	add	r7, sp, #16
 800f7e2:	60f8      	str	r0, [r7, #12]
 800f7e4:	60b9      	str	r1, [r7, #8]
 800f7e6:	607a      	str	r2, [r7, #4]
 800f7e8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800f7ea:	68bb      	ldr	r3, [r7, #8]
 800f7ec:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d009      	beq.n	800f808 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800f7f4:	68bb      	ldr	r3, [r7, #8]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d003      	beq.n	800f802 <ip4_output_if+0x26>
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d102      	bne.n	800f808 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800f802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f804:	3304      	adds	r3, #4
 800f806:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800f808:	78fa      	ldrb	r2, [r7, #3]
 800f80a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f80c:	9302      	str	r3, [sp, #8]
 800f80e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f812:	9301      	str	r3, [sp, #4]
 800f814:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f818:	9300      	str	r3, [sp, #0]
 800f81a:	4613      	mov	r3, r2
 800f81c:	687a      	ldr	r2, [r7, #4]
 800f81e:	6979      	ldr	r1, [r7, #20]
 800f820:	68f8      	ldr	r0, [r7, #12]
 800f822:	f000 f805 	bl	800f830 <ip4_output_if_src>
 800f826:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800f828:	4618      	mov	r0, r3
 800f82a:	3718      	adds	r7, #24
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bd80      	pop	{r7, pc}

0800f830 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b088      	sub	sp, #32
 800f834:	af00      	add	r7, sp, #0
 800f836:	60f8      	str	r0, [r7, #12]
 800f838:	60b9      	str	r1, [r7, #8]
 800f83a:	607a      	str	r2, [r7, #4]
 800f83c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	7b9b      	ldrb	r3, [r3, #14]
 800f842:	2b01      	cmp	r3, #1
 800f844:	d006      	beq.n	800f854 <ip4_output_if_src+0x24>
 800f846:	4b4b      	ldr	r3, [pc, #300]	@ (800f974 <ip4_output_if_src+0x144>)
 800f848:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800f84c:	494a      	ldr	r1, [pc, #296]	@ (800f978 <ip4_output_if_src+0x148>)
 800f84e:	484b      	ldr	r0, [pc, #300]	@ (800f97c <ip4_output_if_src+0x14c>)
 800f850:	f002 fc8a 	bl	8012168 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d060      	beq.n	800f91c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800f85a:	2314      	movs	r3, #20
 800f85c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800f85e:	2114      	movs	r1, #20
 800f860:	68f8      	ldr	r0, [r7, #12]
 800f862:	f7f7 ff4f 	bl	8007704 <pbuf_add_header>
 800f866:	4603      	mov	r3, r0
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d002      	beq.n	800f872 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f86c:	f06f 0301 	mvn.w	r3, #1
 800f870:	e07c      	b.n	800f96c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	685b      	ldr	r3, [r3, #4]
 800f876:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	895b      	ldrh	r3, [r3, #10]
 800f87c:	2b13      	cmp	r3, #19
 800f87e:	d806      	bhi.n	800f88e <ip4_output_if_src+0x5e>
 800f880:	4b3c      	ldr	r3, [pc, #240]	@ (800f974 <ip4_output_if_src+0x144>)
 800f882:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800f886:	493e      	ldr	r1, [pc, #248]	@ (800f980 <ip4_output_if_src+0x150>)
 800f888:	483c      	ldr	r0, [pc, #240]	@ (800f97c <ip4_output_if_src+0x14c>)
 800f88a:	f002 fc6d 	bl	8012168 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800f88e:	69fb      	ldr	r3, [r7, #28]
 800f890:	78fa      	ldrb	r2, [r7, #3]
 800f892:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800f894:	69fb      	ldr	r3, [r7, #28]
 800f896:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800f89a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681a      	ldr	r2, [r3, #0]
 800f8a0:	69fb      	ldr	r3, [r7, #28]
 800f8a2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800f8a4:	8b7b      	ldrh	r3, [r7, #26]
 800f8a6:	089b      	lsrs	r3, r3, #2
 800f8a8:	b29b      	uxth	r3, r3
 800f8aa:	b2db      	uxtb	r3, r3
 800f8ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8b0:	b2da      	uxtb	r2, r3
 800f8b2:	69fb      	ldr	r3, [r7, #28]
 800f8b4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800f8b6:	69fb      	ldr	r3, [r7, #28]
 800f8b8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800f8bc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	891b      	ldrh	r3, [r3, #8]
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	f7f6 fc56 	bl	8006174 <lwip_htons>
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	461a      	mov	r2, r3
 800f8cc:	69fb      	ldr	r3, [r7, #28]
 800f8ce:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f8d0:	69fb      	ldr	r3, [r7, #28]
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	719a      	strb	r2, [r3, #6]
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f8da:	4b2a      	ldr	r3, [pc, #168]	@ (800f984 <ip4_output_if_src+0x154>)
 800f8dc:	881b      	ldrh	r3, [r3, #0]
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f7f6 fc48 	bl	8006174 <lwip_htons>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	461a      	mov	r2, r3
 800f8e8:	69fb      	ldr	r3, [r7, #28]
 800f8ea:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f8ec:	4b25      	ldr	r3, [pc, #148]	@ (800f984 <ip4_output_if_src+0x154>)
 800f8ee:	881b      	ldrh	r3, [r3, #0]
 800f8f0:	3301      	adds	r3, #1
 800f8f2:	b29a      	uxth	r2, r3
 800f8f4:	4b23      	ldr	r3, [pc, #140]	@ (800f984 <ip4_output_if_src+0x154>)
 800f8f6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d104      	bne.n	800f908 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f8fe:	4b22      	ldr	r3, [pc, #136]	@ (800f988 <ip4_output_if_src+0x158>)
 800f900:	681a      	ldr	r2, [r3, #0]
 800f902:	69fb      	ldr	r3, [r7, #28]
 800f904:	60da      	str	r2, [r3, #12]
 800f906:	e003      	b.n	800f910 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800f908:	68bb      	ldr	r3, [r7, #8]
 800f90a:	681a      	ldr	r2, [r3, #0]
 800f90c:	69fb      	ldr	r3, [r7, #28]
 800f90e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f910:	69fb      	ldr	r3, [r7, #28]
 800f912:	2200      	movs	r2, #0
 800f914:	729a      	strb	r2, [r3, #10]
 800f916:	2200      	movs	r2, #0
 800f918:	72da      	strb	r2, [r3, #11]
 800f91a:	e00f      	b.n	800f93c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	895b      	ldrh	r3, [r3, #10]
 800f920:	2b13      	cmp	r3, #19
 800f922:	d802      	bhi.n	800f92a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f924:	f06f 0301 	mvn.w	r3, #1
 800f928:	e020      	b.n	800f96c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	685b      	ldr	r3, [r3, #4]
 800f92e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f930:	69fb      	ldr	r3, [r7, #28]
 800f932:	691b      	ldr	r3, [r3, #16]
 800f934:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800f936:	f107 0314 	add.w	r3, r7, #20
 800f93a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f93c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f93e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f940:	2b00      	cmp	r3, #0
 800f942:	d00c      	beq.n	800f95e <ip4_output_if_src+0x12e>
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	891a      	ldrh	r2, [r3, #8]
 800f948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f94a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f94c:	429a      	cmp	r2, r3
 800f94e:	d906      	bls.n	800f95e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800f950:	687a      	ldr	r2, [r7, #4]
 800f952:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f954:	68f8      	ldr	r0, [r7, #12]
 800f956:	f000 fd53 	bl	8010400 <ip4_frag>
 800f95a:	4603      	mov	r3, r0
 800f95c:	e006      	b.n	800f96c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800f95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f960:	695b      	ldr	r3, [r3, #20]
 800f962:	687a      	ldr	r2, [r7, #4]
 800f964:	68f9      	ldr	r1, [r7, #12]
 800f966:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f968:	4798      	blx	r3
 800f96a:	4603      	mov	r3, r0
}
 800f96c:	4618      	mov	r0, r3
 800f96e:	3720      	adds	r7, #32
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}
 800f974:	08015a78 	.word	0x08015a78
 800f978:	08015aac 	.word	0x08015aac
 800f97c:	08015ab8 	.word	0x08015ab8
 800f980:	08015ae0 	.word	0x08015ae0
 800f984:	20008582 	.word	0x20008582
 800f988:	08016014 	.word	0x08016014

0800f98c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f98c:	b480      	push	{r7}
 800f98e:	b085      	sub	sp, #20
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
 800f994:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9a0:	d002      	beq.n	800f9a8 <ip4_addr_isbroadcast_u32+0x1c>
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d101      	bne.n	800f9ac <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800f9a8:	2301      	movs	r3, #1
 800f9aa:	e02a      	b.n	800fa02 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f9b2:	f003 0302 	and.w	r3, r3, #2
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d101      	bne.n	800f9be <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	e021      	b.n	800fa02 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	3304      	adds	r3, #4
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	687a      	ldr	r2, [r7, #4]
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	d101      	bne.n	800f9ce <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	e019      	b.n	800fa02 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f9ce:	68fa      	ldr	r2, [r7, #12]
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	3304      	adds	r3, #4
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	405a      	eors	r2, r3
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	3308      	adds	r3, #8
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	4013      	ands	r3, r2
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d10d      	bne.n	800fa00 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	3308      	adds	r3, #8
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	43da      	mvns	r2, r3
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	3308      	adds	r3, #8
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f9f8:	429a      	cmp	r2, r3
 800f9fa:	d101      	bne.n	800fa00 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800f9fc:	2301      	movs	r3, #1
 800f9fe:	e000      	b.n	800fa02 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800fa00:	2300      	movs	r3, #0
  }
}
 800fa02:	4618      	mov	r0, r3
 800fa04:	3714      	adds	r7, #20
 800fa06:	46bd      	mov	sp, r7
 800fa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0c:	4770      	bx	lr
	...

0800fa10 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b084      	sub	sp, #16
 800fa14:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800fa16:	2300      	movs	r3, #0
 800fa18:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800fa1a:	4b12      	ldr	r3, [pc, #72]	@ (800fa64 <ip_reass_tmr+0x54>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800fa20:	e018      	b.n	800fa54 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	7fdb      	ldrb	r3, [r3, #31]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d00b      	beq.n	800fa42 <ip_reass_tmr+0x32>
      r->timer--;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	7fdb      	ldrb	r3, [r3, #31]
 800fa2e:	3b01      	subs	r3, #1
 800fa30:	b2da      	uxtb	r2, r3
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	60fb      	str	r3, [r7, #12]
 800fa40:	e008      	b.n	800fa54 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800fa4c:	68b9      	ldr	r1, [r7, #8]
 800fa4e:	6878      	ldr	r0, [r7, #4]
 800fa50:	f000 f80a 	bl	800fa68 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d1e3      	bne.n	800fa22 <ip_reass_tmr+0x12>
    }
  }
}
 800fa5a:	bf00      	nop
 800fa5c:	bf00      	nop
 800fa5e:	3710      	adds	r7, #16
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}
 800fa64:	20008584 	.word	0x20008584

0800fa68 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b088      	sub	sp, #32
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
 800fa70:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800fa72:	2300      	movs	r3, #0
 800fa74:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800fa76:	683a      	ldr	r2, [r7, #0]
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	429a      	cmp	r2, r3
 800fa7c:	d105      	bne.n	800fa8a <ip_reass_free_complete_datagram+0x22>
 800fa7e:	4b45      	ldr	r3, [pc, #276]	@ (800fb94 <ip_reass_free_complete_datagram+0x12c>)
 800fa80:	22ab      	movs	r2, #171	@ 0xab
 800fa82:	4945      	ldr	r1, [pc, #276]	@ (800fb98 <ip_reass_free_complete_datagram+0x130>)
 800fa84:	4845      	ldr	r0, [pc, #276]	@ (800fb9c <ip_reass_free_complete_datagram+0x134>)
 800fa86:	f002 fb6f 	bl	8012168 <iprintf>
  if (prev != NULL) {
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d00a      	beq.n	800faa6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800fa90:	683b      	ldr	r3, [r7, #0]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	687a      	ldr	r2, [r7, #4]
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d005      	beq.n	800faa6 <ip_reass_free_complete_datagram+0x3e>
 800fa9a:	4b3e      	ldr	r3, [pc, #248]	@ (800fb94 <ip_reass_free_complete_datagram+0x12c>)
 800fa9c:	22ad      	movs	r2, #173	@ 0xad
 800fa9e:	4940      	ldr	r1, [pc, #256]	@ (800fba0 <ip_reass_free_complete_datagram+0x138>)
 800faa0:	483e      	ldr	r0, [pc, #248]	@ (800fb9c <ip_reass_free_complete_datagram+0x134>)
 800faa2:	f002 fb61 	bl	8012168 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	685b      	ldr	r3, [r3, #4]
 800faaa:	685b      	ldr	r3, [r3, #4]
 800faac:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800faae:	697b      	ldr	r3, [r7, #20]
 800fab0:	889b      	ldrh	r3, [r3, #4]
 800fab2:	b29b      	uxth	r3, r3
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d12a      	bne.n	800fb0e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	685b      	ldr	r3, [r3, #4]
 800fabc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	681a      	ldr	r2, [r3, #0]
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800fac6:	69bb      	ldr	r3, [r7, #24]
 800fac8:	6858      	ldr	r0, [r3, #4]
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	3308      	adds	r3, #8
 800face:	2214      	movs	r2, #20
 800fad0:	4619      	mov	r1, r3
 800fad2:	f002 fc98 	bl	8012406 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800fad6:	2101      	movs	r1, #1
 800fad8:	69b8      	ldr	r0, [r7, #24]
 800fada:	f7ff fc47 	bl	800f36c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800fade:	69b8      	ldr	r0, [r7, #24]
 800fae0:	f7f7 ff2e 	bl	8007940 <pbuf_clen>
 800fae4:	4603      	mov	r3, r0
 800fae6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800fae8:	8bfa      	ldrh	r2, [r7, #30]
 800faea:	8a7b      	ldrh	r3, [r7, #18]
 800faec:	4413      	add	r3, r2
 800faee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800faf2:	db05      	blt.n	800fb00 <ip_reass_free_complete_datagram+0x98>
 800faf4:	4b27      	ldr	r3, [pc, #156]	@ (800fb94 <ip_reass_free_complete_datagram+0x12c>)
 800faf6:	22bc      	movs	r2, #188	@ 0xbc
 800faf8:	492a      	ldr	r1, [pc, #168]	@ (800fba4 <ip_reass_free_complete_datagram+0x13c>)
 800fafa:	4828      	ldr	r0, [pc, #160]	@ (800fb9c <ip_reass_free_complete_datagram+0x134>)
 800fafc:	f002 fb34 	bl	8012168 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800fb00:	8bfa      	ldrh	r2, [r7, #30]
 800fb02:	8a7b      	ldrh	r3, [r7, #18]
 800fb04:	4413      	add	r3, r2
 800fb06:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800fb08:	69b8      	ldr	r0, [r7, #24]
 800fb0a:	f7f7 fe91 	bl	8007830 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	685b      	ldr	r3, [r3, #4]
 800fb12:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800fb14:	e01f      	b.n	800fb56 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800fb16:	69bb      	ldr	r3, [r7, #24]
 800fb18:	685b      	ldr	r3, [r3, #4]
 800fb1a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800fb1c:	69bb      	ldr	r3, [r7, #24]
 800fb1e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800fb20:	697b      	ldr	r3, [r7, #20]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800fb26:	68f8      	ldr	r0, [r7, #12]
 800fb28:	f7f7 ff0a 	bl	8007940 <pbuf_clen>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800fb30:	8bfa      	ldrh	r2, [r7, #30]
 800fb32:	8a7b      	ldrh	r3, [r7, #18]
 800fb34:	4413      	add	r3, r2
 800fb36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fb3a:	db05      	blt.n	800fb48 <ip_reass_free_complete_datagram+0xe0>
 800fb3c:	4b15      	ldr	r3, [pc, #84]	@ (800fb94 <ip_reass_free_complete_datagram+0x12c>)
 800fb3e:	22cc      	movs	r2, #204	@ 0xcc
 800fb40:	4918      	ldr	r1, [pc, #96]	@ (800fba4 <ip_reass_free_complete_datagram+0x13c>)
 800fb42:	4816      	ldr	r0, [pc, #88]	@ (800fb9c <ip_reass_free_complete_datagram+0x134>)
 800fb44:	f002 fb10 	bl	8012168 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800fb48:	8bfa      	ldrh	r2, [r7, #30]
 800fb4a:	8a7b      	ldrh	r3, [r7, #18]
 800fb4c:	4413      	add	r3, r2
 800fb4e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800fb50:	68f8      	ldr	r0, [r7, #12]
 800fb52:	f7f7 fe6d 	bl	8007830 <pbuf_free>
  while (p != NULL) {
 800fb56:	69bb      	ldr	r3, [r7, #24]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d1dc      	bne.n	800fb16 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800fb5c:	6839      	ldr	r1, [r7, #0]
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f000 f8c2 	bl	800fce8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800fb64:	4b10      	ldr	r3, [pc, #64]	@ (800fba8 <ip_reass_free_complete_datagram+0x140>)
 800fb66:	881b      	ldrh	r3, [r3, #0]
 800fb68:	8bfa      	ldrh	r2, [r7, #30]
 800fb6a:	429a      	cmp	r2, r3
 800fb6c:	d905      	bls.n	800fb7a <ip_reass_free_complete_datagram+0x112>
 800fb6e:	4b09      	ldr	r3, [pc, #36]	@ (800fb94 <ip_reass_free_complete_datagram+0x12c>)
 800fb70:	22d2      	movs	r2, #210	@ 0xd2
 800fb72:	490e      	ldr	r1, [pc, #56]	@ (800fbac <ip_reass_free_complete_datagram+0x144>)
 800fb74:	4809      	ldr	r0, [pc, #36]	@ (800fb9c <ip_reass_free_complete_datagram+0x134>)
 800fb76:	f002 faf7 	bl	8012168 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800fb7a:	4b0b      	ldr	r3, [pc, #44]	@ (800fba8 <ip_reass_free_complete_datagram+0x140>)
 800fb7c:	881a      	ldrh	r2, [r3, #0]
 800fb7e:	8bfb      	ldrh	r3, [r7, #30]
 800fb80:	1ad3      	subs	r3, r2, r3
 800fb82:	b29a      	uxth	r2, r3
 800fb84:	4b08      	ldr	r3, [pc, #32]	@ (800fba8 <ip_reass_free_complete_datagram+0x140>)
 800fb86:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800fb88:	8bfb      	ldrh	r3, [r7, #30]
}
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	3720      	adds	r7, #32
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	bd80      	pop	{r7, pc}
 800fb92:	bf00      	nop
 800fb94:	08015b10 	.word	0x08015b10
 800fb98:	08015b4c 	.word	0x08015b4c
 800fb9c:	08015b58 	.word	0x08015b58
 800fba0:	08015b80 	.word	0x08015b80
 800fba4:	08015b94 	.word	0x08015b94
 800fba8:	20008588 	.word	0x20008588
 800fbac:	08015bb4 	.word	0x08015bb4

0800fbb0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b08a      	sub	sp, #40	@ 0x28
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
 800fbb8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800fbba:	2300      	movs	r3, #0
 800fbbc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800fbca:	2300      	movs	r3, #0
 800fbcc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800fbce:	4b28      	ldr	r3, [pc, #160]	@ (800fc70 <ip_reass_remove_oldest_datagram+0xc0>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800fbd4:	e030      	b.n	800fc38 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800fbd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbd8:	695a      	ldr	r2, [r3, #20]
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	68db      	ldr	r3, [r3, #12]
 800fbde:	429a      	cmp	r2, r3
 800fbe0:	d10c      	bne.n	800fbfc <ip_reass_remove_oldest_datagram+0x4c>
 800fbe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbe4:	699a      	ldr	r2, [r3, #24]
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	691b      	ldr	r3, [r3, #16]
 800fbea:	429a      	cmp	r2, r3
 800fbec:	d106      	bne.n	800fbfc <ip_reass_remove_oldest_datagram+0x4c>
 800fbee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbf0:	899a      	ldrh	r2, [r3, #12]
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	889b      	ldrh	r3, [r3, #4]
 800fbf6:	b29b      	uxth	r3, r3
 800fbf8:	429a      	cmp	r2, r3
 800fbfa:	d014      	beq.n	800fc26 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800fbfc:	693b      	ldr	r3, [r7, #16]
 800fbfe:	3301      	adds	r3, #1
 800fc00:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800fc02:	6a3b      	ldr	r3, [r7, #32]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d104      	bne.n	800fc12 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800fc08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc0a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800fc0c:	69fb      	ldr	r3, [r7, #28]
 800fc0e:	61bb      	str	r3, [r7, #24]
 800fc10:	e009      	b.n	800fc26 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800fc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc14:	7fda      	ldrb	r2, [r3, #31]
 800fc16:	6a3b      	ldr	r3, [r7, #32]
 800fc18:	7fdb      	ldrb	r3, [r3, #31]
 800fc1a:	429a      	cmp	r2, r3
 800fc1c:	d803      	bhi.n	800fc26 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800fc1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc20:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800fc22:	69fb      	ldr	r3, [r7, #28]
 800fc24:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800fc26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d001      	beq.n	800fc32 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800fc2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc30:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800fc32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800fc38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d1cb      	bne.n	800fbd6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800fc3e:	6a3b      	ldr	r3, [r7, #32]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d008      	beq.n	800fc56 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800fc44:	69b9      	ldr	r1, [r7, #24]
 800fc46:	6a38      	ldr	r0, [r7, #32]
 800fc48:	f7ff ff0e 	bl	800fa68 <ip_reass_free_complete_datagram>
 800fc4c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800fc4e:	697a      	ldr	r2, [r7, #20]
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	4413      	add	r3, r2
 800fc54:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800fc56:	697a      	ldr	r2, [r7, #20]
 800fc58:	683b      	ldr	r3, [r7, #0]
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	da02      	bge.n	800fc64 <ip_reass_remove_oldest_datagram+0xb4>
 800fc5e:	693b      	ldr	r3, [r7, #16]
 800fc60:	2b01      	cmp	r3, #1
 800fc62:	dcac      	bgt.n	800fbbe <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800fc64:	697b      	ldr	r3, [r7, #20]
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	3728      	adds	r7, #40	@ 0x28
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	bd80      	pop	{r7, pc}
 800fc6e:	bf00      	nop
 800fc70:	20008584 	.word	0x20008584

0800fc74 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b084      	sub	sp, #16
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
 800fc7c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800fc7e:	2004      	movs	r0, #4
 800fc80:	f7f6 fef0 	bl	8006a64 <memp_malloc>
 800fc84:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d110      	bne.n	800fcae <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800fc8c:	6839      	ldr	r1, [r7, #0]
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f7ff ff8e 	bl	800fbb0 <ip_reass_remove_oldest_datagram>
 800fc94:	4602      	mov	r2, r0
 800fc96:	683b      	ldr	r3, [r7, #0]
 800fc98:	4293      	cmp	r3, r2
 800fc9a:	dc03      	bgt.n	800fca4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800fc9c:	2004      	movs	r0, #4
 800fc9e:	f7f6 fee1 	bl	8006a64 <memp_malloc>
 800fca2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d101      	bne.n	800fcae <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800fcaa:	2300      	movs	r3, #0
 800fcac:	e016      	b.n	800fcdc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800fcae:	2220      	movs	r2, #32
 800fcb0:	2100      	movs	r1, #0
 800fcb2:	68f8      	ldr	r0, [r7, #12]
 800fcb4:	f002 fb0d 	bl	80122d2 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	220f      	movs	r2, #15
 800fcbc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800fcbe:	4b09      	ldr	r3, [pc, #36]	@ (800fce4 <ip_reass_enqueue_new_datagram+0x70>)
 800fcc0:	681a      	ldr	r2, [r3, #0]
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800fcc6:	4a07      	ldr	r2, [pc, #28]	@ (800fce4 <ip_reass_enqueue_new_datagram+0x70>)
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	3308      	adds	r3, #8
 800fcd0:	2214      	movs	r2, #20
 800fcd2:	6879      	ldr	r1, [r7, #4]
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f002 fb96 	bl	8012406 <memcpy>
  return ipr;
 800fcda:	68fb      	ldr	r3, [r7, #12]
}
 800fcdc:	4618      	mov	r0, r3
 800fcde:	3710      	adds	r7, #16
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}
 800fce4:	20008584 	.word	0x20008584

0800fce8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b082      	sub	sp, #8
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
 800fcf0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800fcf2:	4b10      	ldr	r3, [pc, #64]	@ (800fd34 <ip_reass_dequeue_datagram+0x4c>)
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	687a      	ldr	r2, [r7, #4]
 800fcf8:	429a      	cmp	r2, r3
 800fcfa:	d104      	bne.n	800fd06 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	4a0c      	ldr	r2, [pc, #48]	@ (800fd34 <ip_reass_dequeue_datagram+0x4c>)
 800fd02:	6013      	str	r3, [r2, #0]
 800fd04:	e00d      	b.n	800fd22 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800fd06:	683b      	ldr	r3, [r7, #0]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d106      	bne.n	800fd1a <ip_reass_dequeue_datagram+0x32>
 800fd0c:	4b0a      	ldr	r3, [pc, #40]	@ (800fd38 <ip_reass_dequeue_datagram+0x50>)
 800fd0e:	f240 1245 	movw	r2, #325	@ 0x145
 800fd12:	490a      	ldr	r1, [pc, #40]	@ (800fd3c <ip_reass_dequeue_datagram+0x54>)
 800fd14:	480a      	ldr	r0, [pc, #40]	@ (800fd40 <ip_reass_dequeue_datagram+0x58>)
 800fd16:	f002 fa27 	bl	8012168 <iprintf>
    prev->next = ipr->next;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681a      	ldr	r2, [r3, #0]
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800fd22:	6879      	ldr	r1, [r7, #4]
 800fd24:	2004      	movs	r0, #4
 800fd26:	f7f6 ff0d 	bl	8006b44 <memp_free>
}
 800fd2a:	bf00      	nop
 800fd2c:	3708      	adds	r7, #8
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}
 800fd32:	bf00      	nop
 800fd34:	20008584 	.word	0x20008584
 800fd38:	08015b10 	.word	0x08015b10
 800fd3c:	08015bd8 	.word	0x08015bd8
 800fd40:	08015b58 	.word	0x08015b58

0800fd44 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b08c      	sub	sp, #48	@ 0x30
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	60f8      	str	r0, [r7, #12]
 800fd4c:	60b9      	str	r1, [r7, #8]
 800fd4e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800fd50:	2300      	movs	r3, #0
 800fd52:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800fd54:	2301      	movs	r3, #1
 800fd56:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800fd58:	68bb      	ldr	r3, [r7, #8]
 800fd5a:	685b      	ldr	r3, [r3, #4]
 800fd5c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800fd5e:	69fb      	ldr	r3, [r7, #28]
 800fd60:	885b      	ldrh	r3, [r3, #2]
 800fd62:	b29b      	uxth	r3, r3
 800fd64:	4618      	mov	r0, r3
 800fd66:	f7f6 fa05 	bl	8006174 <lwip_htons>
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800fd6e:	69fb      	ldr	r3, [r7, #28]
 800fd70:	781b      	ldrb	r3, [r3, #0]
 800fd72:	f003 030f 	and.w	r3, r3, #15
 800fd76:	b2db      	uxtb	r3, r3
 800fd78:	009b      	lsls	r3, r3, #2
 800fd7a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800fd7c:	7e7b      	ldrb	r3, [r7, #25]
 800fd7e:	b29b      	uxth	r3, r3
 800fd80:	8b7a      	ldrh	r2, [r7, #26]
 800fd82:	429a      	cmp	r2, r3
 800fd84:	d202      	bcs.n	800fd8c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fd86:	f04f 33ff 	mov.w	r3, #4294967295
 800fd8a:	e135      	b.n	800fff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800fd8c:	7e7b      	ldrb	r3, [r7, #25]
 800fd8e:	b29b      	uxth	r3, r3
 800fd90:	8b7a      	ldrh	r2, [r7, #26]
 800fd92:	1ad3      	subs	r3, r2, r3
 800fd94:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800fd96:	69fb      	ldr	r3, [r7, #28]
 800fd98:	88db      	ldrh	r3, [r3, #6]
 800fd9a:	b29b      	uxth	r3, r3
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f7f6 f9e9 	bl	8006174 <lwip_htons>
 800fda2:	4603      	mov	r3, r0
 800fda4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fda8:	b29b      	uxth	r3, r3
 800fdaa:	00db      	lsls	r3, r3, #3
 800fdac:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800fdae:	68bb      	ldr	r3, [r7, #8]
 800fdb0:	685b      	ldr	r3, [r3, #4]
 800fdb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800fdb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	701a      	strb	r2, [r3, #0]
 800fdba:	2200      	movs	r2, #0
 800fdbc:	705a      	strb	r2, [r3, #1]
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	709a      	strb	r2, [r3, #2]
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800fdc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdc8:	8afa      	ldrh	r2, [r7, #22]
 800fdca:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800fdcc:	8afa      	ldrh	r2, [r7, #22]
 800fdce:	8b7b      	ldrh	r3, [r7, #26]
 800fdd0:	4413      	add	r3, r2
 800fdd2:	b29a      	uxth	r2, r3
 800fdd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdd6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800fdd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdda:	88db      	ldrh	r3, [r3, #6]
 800fddc:	b29b      	uxth	r3, r3
 800fdde:	8afa      	ldrh	r2, [r7, #22]
 800fde0:	429a      	cmp	r2, r3
 800fde2:	d902      	bls.n	800fdea <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fde4:	f04f 33ff 	mov.w	r3, #4294967295
 800fde8:	e106      	b.n	800fff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	685b      	ldr	r3, [r3, #4]
 800fdee:	627b      	str	r3, [r7, #36]	@ 0x24
 800fdf0:	e068      	b.n	800fec4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800fdf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdf4:	685b      	ldr	r3, [r3, #4]
 800fdf6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800fdf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdfa:	889b      	ldrh	r3, [r3, #4]
 800fdfc:	b29a      	uxth	r2, r3
 800fdfe:	693b      	ldr	r3, [r7, #16]
 800fe00:	889b      	ldrh	r3, [r3, #4]
 800fe02:	b29b      	uxth	r3, r3
 800fe04:	429a      	cmp	r2, r3
 800fe06:	d235      	bcs.n	800fe74 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800fe08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fe0c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800fe0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d020      	beq.n	800fe56 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800fe14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe16:	889b      	ldrh	r3, [r3, #4]
 800fe18:	b29a      	uxth	r2, r3
 800fe1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe1c:	88db      	ldrh	r3, [r3, #6]
 800fe1e:	b29b      	uxth	r3, r3
 800fe20:	429a      	cmp	r2, r3
 800fe22:	d307      	bcc.n	800fe34 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800fe24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe26:	88db      	ldrh	r3, [r3, #6]
 800fe28:	b29a      	uxth	r2, r3
 800fe2a:	693b      	ldr	r3, [r7, #16]
 800fe2c:	889b      	ldrh	r3, [r3, #4]
 800fe2e:	b29b      	uxth	r3, r3
 800fe30:	429a      	cmp	r2, r3
 800fe32:	d902      	bls.n	800fe3a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fe34:	f04f 33ff 	mov.w	r3, #4294967295
 800fe38:	e0de      	b.n	800fff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800fe3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe3c:	68ba      	ldr	r2, [r7, #8]
 800fe3e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800fe40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe42:	88db      	ldrh	r3, [r3, #6]
 800fe44:	b29a      	uxth	r2, r3
 800fe46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe48:	889b      	ldrh	r3, [r3, #4]
 800fe4a:	b29b      	uxth	r3, r3
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	d03d      	beq.n	800fecc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800fe50:	2300      	movs	r3, #0
 800fe52:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800fe54:	e03a      	b.n	800fecc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800fe56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe58:	88db      	ldrh	r3, [r3, #6]
 800fe5a:	b29a      	uxth	r2, r3
 800fe5c:	693b      	ldr	r3, [r7, #16]
 800fe5e:	889b      	ldrh	r3, [r3, #4]
 800fe60:	b29b      	uxth	r3, r3
 800fe62:	429a      	cmp	r2, r3
 800fe64:	d902      	bls.n	800fe6c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fe66:	f04f 33ff 	mov.w	r3, #4294967295
 800fe6a:	e0c5      	b.n	800fff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	68ba      	ldr	r2, [r7, #8]
 800fe70:	605a      	str	r2, [r3, #4]
      break;
 800fe72:	e02b      	b.n	800fecc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800fe74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe76:	889b      	ldrh	r3, [r3, #4]
 800fe78:	b29a      	uxth	r2, r3
 800fe7a:	693b      	ldr	r3, [r7, #16]
 800fe7c:	889b      	ldrh	r3, [r3, #4]
 800fe7e:	b29b      	uxth	r3, r3
 800fe80:	429a      	cmp	r2, r3
 800fe82:	d102      	bne.n	800fe8a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fe84:	f04f 33ff 	mov.w	r3, #4294967295
 800fe88:	e0b6      	b.n	800fff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800fe8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe8c:	889b      	ldrh	r3, [r3, #4]
 800fe8e:	b29a      	uxth	r2, r3
 800fe90:	693b      	ldr	r3, [r7, #16]
 800fe92:	88db      	ldrh	r3, [r3, #6]
 800fe94:	b29b      	uxth	r3, r3
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d202      	bcs.n	800fea0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fe9a:	f04f 33ff 	mov.w	r3, #4294967295
 800fe9e:	e0ab      	b.n	800fff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800fea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d009      	beq.n	800feba <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800fea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fea8:	88db      	ldrh	r3, [r3, #6]
 800feaa:	b29a      	uxth	r2, r3
 800feac:	693b      	ldr	r3, [r7, #16]
 800feae:	889b      	ldrh	r3, [r3, #4]
 800feb0:	b29b      	uxth	r3, r3
 800feb2:	429a      	cmp	r2, r3
 800feb4:	d001      	beq.n	800feba <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800feb6:	2300      	movs	r3, #0
 800feb8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800feba:	693b      	ldr	r3, [r7, #16]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800fec0:	693b      	ldr	r3, [r7, #16]
 800fec2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800fec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d193      	bne.n	800fdf2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800feca:	e000      	b.n	800fece <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800fecc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800fece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d12d      	bne.n	800ff30 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800fed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d01c      	beq.n	800ff14 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800feda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fedc:	88db      	ldrh	r3, [r3, #6]
 800fede:	b29a      	uxth	r2, r3
 800fee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fee2:	889b      	ldrh	r3, [r3, #4]
 800fee4:	b29b      	uxth	r3, r3
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d906      	bls.n	800fef8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800feea:	4b45      	ldr	r3, [pc, #276]	@ (8010000 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800feec:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800fef0:	4944      	ldr	r1, [pc, #272]	@ (8010004 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800fef2:	4845      	ldr	r0, [pc, #276]	@ (8010008 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fef4:	f002 f938 	bl	8012168 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800fef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fefa:	68ba      	ldr	r2, [r7, #8]
 800fefc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800fefe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff00:	88db      	ldrh	r3, [r3, #6]
 800ff02:	b29a      	uxth	r2, r3
 800ff04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff06:	889b      	ldrh	r3, [r3, #4]
 800ff08:	b29b      	uxth	r3, r3
 800ff0a:	429a      	cmp	r2, r3
 800ff0c:	d010      	beq.n	800ff30 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800ff0e:	2300      	movs	r3, #0
 800ff10:	623b      	str	r3, [r7, #32]
 800ff12:	e00d      	b.n	800ff30 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	685b      	ldr	r3, [r3, #4]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d006      	beq.n	800ff2a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800ff1c:	4b38      	ldr	r3, [pc, #224]	@ (8010000 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ff1e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800ff22:	493a      	ldr	r1, [pc, #232]	@ (801000c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800ff24:	4838      	ldr	r0, [pc, #224]	@ (8010008 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ff26:	f002 f91f 	bl	8012168 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	68ba      	ldr	r2, [r7, #8]
 800ff2e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d105      	bne.n	800ff42 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	7f9b      	ldrb	r3, [r3, #30]
 800ff3a:	f003 0301 	and.w	r3, r3, #1
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d059      	beq.n	800fff6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800ff42:	6a3b      	ldr	r3, [r7, #32]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d04f      	beq.n	800ffe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	685b      	ldr	r3, [r3, #4]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d006      	beq.n	800ff5e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	685b      	ldr	r3, [r3, #4]
 800ff54:	685b      	ldr	r3, [r3, #4]
 800ff56:	889b      	ldrh	r3, [r3, #4]
 800ff58:	b29b      	uxth	r3, r3
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d002      	beq.n	800ff64 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	623b      	str	r3, [r7, #32]
 800ff62:	e041      	b.n	800ffe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800ff64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff66:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800ff68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800ff6e:	e012      	b.n	800ff96 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800ff70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff72:	685b      	ldr	r3, [r3, #4]
 800ff74:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800ff76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff78:	88db      	ldrh	r3, [r3, #6]
 800ff7a:	b29a      	uxth	r2, r3
 800ff7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff7e:	889b      	ldrh	r3, [r3, #4]
 800ff80:	b29b      	uxth	r3, r3
 800ff82:	429a      	cmp	r2, r3
 800ff84:	d002      	beq.n	800ff8c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800ff86:	2300      	movs	r3, #0
 800ff88:	623b      	str	r3, [r7, #32]
            break;
 800ff8a:	e007      	b.n	800ff9c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800ff8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff8e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800ff90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800ff96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d1e9      	bne.n	800ff70 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800ff9c:	6a3b      	ldr	r3, [r7, #32]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d022      	beq.n	800ffe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	685b      	ldr	r3, [r3, #4]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d106      	bne.n	800ffb8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800ffaa:	4b15      	ldr	r3, [pc, #84]	@ (8010000 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ffac:	f240 12df 	movw	r2, #479	@ 0x1df
 800ffb0:	4917      	ldr	r1, [pc, #92]	@ (8010010 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ffb2:	4815      	ldr	r0, [pc, #84]	@ (8010008 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ffb4:	f002 f8d8 	bl	8012168 <iprintf>
          LWIP_ASSERT("sanity check",
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	685b      	ldr	r3, [r3, #4]
 800ffbc:	685b      	ldr	r3, [r3, #4]
 800ffbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ffc0:	429a      	cmp	r2, r3
 800ffc2:	d106      	bne.n	800ffd2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800ffc4:	4b0e      	ldr	r3, [pc, #56]	@ (8010000 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ffc6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800ffca:	4911      	ldr	r1, [pc, #68]	@ (8010010 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ffcc:	480e      	ldr	r0, [pc, #56]	@ (8010008 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ffce:	f002 f8cb 	bl	8012168 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800ffd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d006      	beq.n	800ffe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800ffda:	4b09      	ldr	r3, [pc, #36]	@ (8010000 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ffdc:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800ffe0:	490c      	ldr	r1, [pc, #48]	@ (8010014 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800ffe2:	4809      	ldr	r0, [pc, #36]	@ (8010008 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ffe4:	f002 f8c0 	bl	8012168 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800ffe8:	6a3b      	ldr	r3, [r7, #32]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	bf14      	ite	ne
 800ffee:	2301      	movne	r3, #1
 800fff0:	2300      	moveq	r3, #0
 800fff2:	b2db      	uxtb	r3, r3
 800fff4:	e000      	b.n	800fff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800fff6:	2300      	movs	r3, #0
}
 800fff8:	4618      	mov	r0, r3
 800fffa:	3730      	adds	r7, #48	@ 0x30
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}
 8010000:	08015b10 	.word	0x08015b10
 8010004:	08015bf4 	.word	0x08015bf4
 8010008:	08015b58 	.word	0x08015b58
 801000c:	08015c14 	.word	0x08015c14
 8010010:	08015c4c 	.word	0x08015c4c
 8010014:	08015c5c 	.word	0x08015c5c

08010018 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b08e      	sub	sp, #56	@ 0x38
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	685b      	ldr	r3, [r3, #4]
 8010024:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8010026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010028:	781b      	ldrb	r3, [r3, #0]
 801002a:	f003 030f 	and.w	r3, r3, #15
 801002e:	b2db      	uxtb	r3, r3
 8010030:	009b      	lsls	r3, r3, #2
 8010032:	b2db      	uxtb	r3, r3
 8010034:	2b14      	cmp	r3, #20
 8010036:	f040 8171 	bne.w	801031c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801003a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801003c:	88db      	ldrh	r3, [r3, #6]
 801003e:	b29b      	uxth	r3, r3
 8010040:	4618      	mov	r0, r3
 8010042:	f7f6 f897 	bl	8006174 <lwip_htons>
 8010046:	4603      	mov	r3, r0
 8010048:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801004c:	b29b      	uxth	r3, r3
 801004e:	00db      	lsls	r3, r3, #3
 8010050:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010054:	885b      	ldrh	r3, [r3, #2]
 8010056:	b29b      	uxth	r3, r3
 8010058:	4618      	mov	r0, r3
 801005a:	f7f6 f88b 	bl	8006174 <lwip_htons>
 801005e:	4603      	mov	r3, r0
 8010060:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8010062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010064:	781b      	ldrb	r3, [r3, #0]
 8010066:	f003 030f 	and.w	r3, r3, #15
 801006a:	b2db      	uxtb	r3, r3
 801006c:	009b      	lsls	r3, r3, #2
 801006e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8010072:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010076:	b29b      	uxth	r3, r3
 8010078:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801007a:	429a      	cmp	r2, r3
 801007c:	f0c0 8150 	bcc.w	8010320 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010080:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010084:	b29b      	uxth	r3, r3
 8010086:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010088:	1ad3      	subs	r3, r2, r3
 801008a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801008c:	6878      	ldr	r0, [r7, #4]
 801008e:	f7f7 fc57 	bl	8007940 <pbuf_clen>
 8010092:	4603      	mov	r3, r0
 8010094:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8010096:	4b8c      	ldr	r3, [pc, #560]	@ (80102c8 <ip4_reass+0x2b0>)
 8010098:	881b      	ldrh	r3, [r3, #0]
 801009a:	461a      	mov	r2, r3
 801009c:	8c3b      	ldrh	r3, [r7, #32]
 801009e:	4413      	add	r3, r2
 80100a0:	2b0a      	cmp	r3, #10
 80100a2:	dd10      	ble.n	80100c6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80100a4:	8c3b      	ldrh	r3, [r7, #32]
 80100a6:	4619      	mov	r1, r3
 80100a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80100aa:	f7ff fd81 	bl	800fbb0 <ip_reass_remove_oldest_datagram>
 80100ae:	4603      	mov	r3, r0
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	f000 8137 	beq.w	8010324 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80100b6:	4b84      	ldr	r3, [pc, #528]	@ (80102c8 <ip4_reass+0x2b0>)
 80100b8:	881b      	ldrh	r3, [r3, #0]
 80100ba:	461a      	mov	r2, r3
 80100bc:	8c3b      	ldrh	r3, [r7, #32]
 80100be:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80100c0:	2b0a      	cmp	r3, #10
 80100c2:	f300 812f 	bgt.w	8010324 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80100c6:	4b81      	ldr	r3, [pc, #516]	@ (80102cc <ip4_reass+0x2b4>)
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80100cc:	e015      	b.n	80100fa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80100ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100d0:	695a      	ldr	r2, [r3, #20]
 80100d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100d4:	68db      	ldr	r3, [r3, #12]
 80100d6:	429a      	cmp	r2, r3
 80100d8:	d10c      	bne.n	80100f4 <ip4_reass+0xdc>
 80100da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100dc:	699a      	ldr	r2, [r3, #24]
 80100de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100e0:	691b      	ldr	r3, [r3, #16]
 80100e2:	429a      	cmp	r2, r3
 80100e4:	d106      	bne.n	80100f4 <ip4_reass+0xdc>
 80100e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100e8:	899a      	ldrh	r2, [r3, #12]
 80100ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100ec:	889b      	ldrh	r3, [r3, #4]
 80100ee:	b29b      	uxth	r3, r3
 80100f0:	429a      	cmp	r2, r3
 80100f2:	d006      	beq.n	8010102 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80100f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80100fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d1e6      	bne.n	80100ce <ip4_reass+0xb6>
 8010100:	e000      	b.n	8010104 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8010102:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8010104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010106:	2b00      	cmp	r3, #0
 8010108:	d109      	bne.n	801011e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801010a:	8c3b      	ldrh	r3, [r7, #32]
 801010c:	4619      	mov	r1, r3
 801010e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010110:	f7ff fdb0 	bl	800fc74 <ip_reass_enqueue_new_datagram>
 8010114:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8010116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010118:	2b00      	cmp	r3, #0
 801011a:	d11c      	bne.n	8010156 <ip4_reass+0x13e>
      goto nullreturn;
 801011c:	e105      	b.n	801032a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801011e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010120:	88db      	ldrh	r3, [r3, #6]
 8010122:	b29b      	uxth	r3, r3
 8010124:	4618      	mov	r0, r3
 8010126:	f7f6 f825 	bl	8006174 <lwip_htons>
 801012a:	4603      	mov	r3, r0
 801012c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010130:	2b00      	cmp	r3, #0
 8010132:	d110      	bne.n	8010156 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8010134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010136:	89db      	ldrh	r3, [r3, #14]
 8010138:	4618      	mov	r0, r3
 801013a:	f7f6 f81b 	bl	8006174 <lwip_htons>
 801013e:	4603      	mov	r3, r0
 8010140:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010144:	2b00      	cmp	r3, #0
 8010146:	d006      	beq.n	8010156 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8010148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801014a:	3308      	adds	r3, #8
 801014c:	2214      	movs	r2, #20
 801014e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010150:	4618      	mov	r0, r3
 8010152:	f002 f958 	bl	8012406 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8010156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010158:	88db      	ldrh	r3, [r3, #6]
 801015a:	b29b      	uxth	r3, r3
 801015c:	f003 0320 	and.w	r3, r3, #32
 8010160:	2b00      	cmp	r3, #0
 8010162:	bf0c      	ite	eq
 8010164:	2301      	moveq	r3, #1
 8010166:	2300      	movne	r3, #0
 8010168:	b2db      	uxtb	r3, r3
 801016a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801016c:	69fb      	ldr	r3, [r7, #28]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d00e      	beq.n	8010190 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8010172:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010174:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010176:	4413      	add	r3, r2
 8010178:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801017a:	8b7a      	ldrh	r2, [r7, #26]
 801017c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801017e:	429a      	cmp	r2, r3
 8010180:	f0c0 80a0 	bcc.w	80102c4 <ip4_reass+0x2ac>
 8010184:	8b7b      	ldrh	r3, [r7, #26]
 8010186:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801018a:	4293      	cmp	r3, r2
 801018c:	f200 809a 	bhi.w	80102c4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010190:	69fa      	ldr	r2, [r7, #28]
 8010192:	6879      	ldr	r1, [r7, #4]
 8010194:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010196:	f7ff fdd5 	bl	800fd44 <ip_reass_chain_frag_into_datagram_and_validate>
 801019a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101a2:	f000 809b 	beq.w	80102dc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80101a6:	4b48      	ldr	r3, [pc, #288]	@ (80102c8 <ip4_reass+0x2b0>)
 80101a8:	881a      	ldrh	r2, [r3, #0]
 80101aa:	8c3b      	ldrh	r3, [r7, #32]
 80101ac:	4413      	add	r3, r2
 80101ae:	b29a      	uxth	r2, r3
 80101b0:	4b45      	ldr	r3, [pc, #276]	@ (80102c8 <ip4_reass+0x2b0>)
 80101b2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80101b4:	69fb      	ldr	r3, [r7, #28]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d00d      	beq.n	80101d6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80101ba:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80101bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80101be:	4413      	add	r3, r2
 80101c0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80101c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101c4:	8a7a      	ldrh	r2, [r7, #18]
 80101c6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80101c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101ca:	7f9b      	ldrb	r3, [r3, #30]
 80101cc:	f043 0301 	orr.w	r3, r3, #1
 80101d0:	b2da      	uxtb	r2, r3
 80101d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101d4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80101d6:	697b      	ldr	r3, [r7, #20]
 80101d8:	2b01      	cmp	r3, #1
 80101da:	d171      	bne.n	80102c0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80101dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101de:	8b9b      	ldrh	r3, [r3, #28]
 80101e0:	3314      	adds	r3, #20
 80101e2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80101e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101e6:	685b      	ldr	r3, [r3, #4]
 80101e8:	685b      	ldr	r3, [r3, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80101ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101f0:	685b      	ldr	r3, [r3, #4]
 80101f2:	685b      	ldr	r3, [r3, #4]
 80101f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80101f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101f8:	3308      	adds	r3, #8
 80101fa:	2214      	movs	r2, #20
 80101fc:	4619      	mov	r1, r3
 80101fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010200:	f002 f901 	bl	8012406 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010204:	8a3b      	ldrh	r3, [r7, #16]
 8010206:	4618      	mov	r0, r3
 8010208:	f7f5 ffb4 	bl	8006174 <lwip_htons>
 801020c:	4603      	mov	r3, r0
 801020e:	461a      	mov	r2, r3
 8010210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010212:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010216:	2200      	movs	r2, #0
 8010218:	719a      	strb	r2, [r3, #6]
 801021a:	2200      	movs	r2, #0
 801021c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801021e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010220:	2200      	movs	r2, #0
 8010222:	729a      	strb	r2, [r3, #10]
 8010224:	2200      	movs	r2, #0
 8010226:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8010228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801022a:	685b      	ldr	r3, [r3, #4]
 801022c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801022e:	e00d      	b.n	801024c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010232:	685b      	ldr	r3, [r3, #4]
 8010234:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8010236:	2114      	movs	r1, #20
 8010238:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801023a:	f7f7 fa73 	bl	8007724 <pbuf_remove_header>
      pbuf_cat(p, r);
 801023e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010240:	6878      	ldr	r0, [r7, #4]
 8010242:	f7f7 fbb7 	bl	80079b4 <pbuf_cat>
      r = iprh->next_pbuf;
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801024c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801024e:	2b00      	cmp	r3, #0
 8010250:	d1ee      	bne.n	8010230 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010252:	4b1e      	ldr	r3, [pc, #120]	@ (80102cc <ip4_reass+0x2b4>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010258:	429a      	cmp	r2, r3
 801025a:	d102      	bne.n	8010262 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801025c:	2300      	movs	r3, #0
 801025e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010260:	e010      	b.n	8010284 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010262:	4b1a      	ldr	r3, [pc, #104]	@ (80102cc <ip4_reass+0x2b4>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010268:	e007      	b.n	801027a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801026a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010270:	429a      	cmp	r2, r3
 8010272:	d006      	beq.n	8010282 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801027a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801027c:	2b00      	cmp	r3, #0
 801027e:	d1f4      	bne.n	801026a <ip4_reass+0x252>
 8010280:	e000      	b.n	8010284 <ip4_reass+0x26c>
          break;
 8010282:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010284:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010286:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010288:	f7ff fd2e 	bl	800fce8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801028c:	6878      	ldr	r0, [r7, #4]
 801028e:	f7f7 fb57 	bl	8007940 <pbuf_clen>
 8010292:	4603      	mov	r3, r0
 8010294:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010296:	4b0c      	ldr	r3, [pc, #48]	@ (80102c8 <ip4_reass+0x2b0>)
 8010298:	881b      	ldrh	r3, [r3, #0]
 801029a:	8c3a      	ldrh	r2, [r7, #32]
 801029c:	429a      	cmp	r2, r3
 801029e:	d906      	bls.n	80102ae <ip4_reass+0x296>
 80102a0:	4b0b      	ldr	r3, [pc, #44]	@ (80102d0 <ip4_reass+0x2b8>)
 80102a2:	f240 229b 	movw	r2, #667	@ 0x29b
 80102a6:	490b      	ldr	r1, [pc, #44]	@ (80102d4 <ip4_reass+0x2bc>)
 80102a8:	480b      	ldr	r0, [pc, #44]	@ (80102d8 <ip4_reass+0x2c0>)
 80102aa:	f001 ff5d 	bl	8012168 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80102ae:	4b06      	ldr	r3, [pc, #24]	@ (80102c8 <ip4_reass+0x2b0>)
 80102b0:	881a      	ldrh	r2, [r3, #0]
 80102b2:	8c3b      	ldrh	r3, [r7, #32]
 80102b4:	1ad3      	subs	r3, r2, r3
 80102b6:	b29a      	uxth	r2, r3
 80102b8:	4b03      	ldr	r3, [pc, #12]	@ (80102c8 <ip4_reass+0x2b0>)
 80102ba:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	e038      	b.n	8010332 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80102c0:	2300      	movs	r3, #0
 80102c2:	e036      	b.n	8010332 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80102c4:	bf00      	nop
 80102c6:	e00a      	b.n	80102de <ip4_reass+0x2c6>
 80102c8:	20008588 	.word	0x20008588
 80102cc:	20008584 	.word	0x20008584
 80102d0:	08015b10 	.word	0x08015b10
 80102d4:	08015c80 	.word	0x08015c80
 80102d8:	08015b58 	.word	0x08015b58
    goto nullreturn_ipr;
 80102dc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80102de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d106      	bne.n	80102f2 <ip4_reass+0x2da>
 80102e4:	4b15      	ldr	r3, [pc, #84]	@ (801033c <ip4_reass+0x324>)
 80102e6:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80102ea:	4915      	ldr	r1, [pc, #84]	@ (8010340 <ip4_reass+0x328>)
 80102ec:	4815      	ldr	r0, [pc, #84]	@ (8010344 <ip4_reass+0x32c>)
 80102ee:	f001 ff3b 	bl	8012168 <iprintf>
  if (ipr->p == NULL) {
 80102f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102f4:	685b      	ldr	r3, [r3, #4]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d116      	bne.n	8010328 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80102fa:	4b13      	ldr	r3, [pc, #76]	@ (8010348 <ip4_reass+0x330>)
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010300:	429a      	cmp	r2, r3
 8010302:	d006      	beq.n	8010312 <ip4_reass+0x2fa>
 8010304:	4b0d      	ldr	r3, [pc, #52]	@ (801033c <ip4_reass+0x324>)
 8010306:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801030a:	4910      	ldr	r1, [pc, #64]	@ (801034c <ip4_reass+0x334>)
 801030c:	480d      	ldr	r0, [pc, #52]	@ (8010344 <ip4_reass+0x32c>)
 801030e:	f001 ff2b 	bl	8012168 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8010312:	2100      	movs	r1, #0
 8010314:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010316:	f7ff fce7 	bl	800fce8 <ip_reass_dequeue_datagram>
 801031a:	e006      	b.n	801032a <ip4_reass+0x312>
    goto nullreturn;
 801031c:	bf00      	nop
 801031e:	e004      	b.n	801032a <ip4_reass+0x312>
    goto nullreturn;
 8010320:	bf00      	nop
 8010322:	e002      	b.n	801032a <ip4_reass+0x312>
      goto nullreturn;
 8010324:	bf00      	nop
 8010326:	e000      	b.n	801032a <ip4_reass+0x312>
  }

nullreturn:
 8010328:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801032a:	6878      	ldr	r0, [r7, #4]
 801032c:	f7f7 fa80 	bl	8007830 <pbuf_free>
  return NULL;
 8010330:	2300      	movs	r3, #0
}
 8010332:	4618      	mov	r0, r3
 8010334:	3738      	adds	r7, #56	@ 0x38
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}
 801033a:	bf00      	nop
 801033c:	08015b10 	.word	0x08015b10
 8010340:	08015c9c 	.word	0x08015c9c
 8010344:	08015b58 	.word	0x08015b58
 8010348:	20008584 	.word	0x20008584
 801034c:	08015ca8 	.word	0x08015ca8

08010350 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8010350:	b580      	push	{r7, lr}
 8010352:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010354:	2005      	movs	r0, #5
 8010356:	f7f6 fb85 	bl	8006a64 <memp_malloc>
 801035a:	4603      	mov	r3, r0
}
 801035c:	4618      	mov	r0, r3
 801035e:	bd80      	pop	{r7, pc}

08010360 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b082      	sub	sp, #8
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d106      	bne.n	801037c <ip_frag_free_pbuf_custom_ref+0x1c>
 801036e:	4b07      	ldr	r3, [pc, #28]	@ (801038c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8010370:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8010374:	4906      	ldr	r1, [pc, #24]	@ (8010390 <ip_frag_free_pbuf_custom_ref+0x30>)
 8010376:	4807      	ldr	r0, [pc, #28]	@ (8010394 <ip_frag_free_pbuf_custom_ref+0x34>)
 8010378:	f001 fef6 	bl	8012168 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801037c:	6879      	ldr	r1, [r7, #4]
 801037e:	2005      	movs	r0, #5
 8010380:	f7f6 fbe0 	bl	8006b44 <memp_free>
}
 8010384:	bf00      	nop
 8010386:	3708      	adds	r7, #8
 8010388:	46bd      	mov	sp, r7
 801038a:	bd80      	pop	{r7, pc}
 801038c:	08015b10 	.word	0x08015b10
 8010390:	08015cc8 	.word	0x08015cc8
 8010394:	08015b58 	.word	0x08015b58

08010398 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b084      	sub	sp, #16
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d106      	bne.n	80103b8 <ipfrag_free_pbuf_custom+0x20>
 80103aa:	4b11      	ldr	r3, [pc, #68]	@ (80103f0 <ipfrag_free_pbuf_custom+0x58>)
 80103ac:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80103b0:	4910      	ldr	r1, [pc, #64]	@ (80103f4 <ipfrag_free_pbuf_custom+0x5c>)
 80103b2:	4811      	ldr	r0, [pc, #68]	@ (80103f8 <ipfrag_free_pbuf_custom+0x60>)
 80103b4:	f001 fed8 	bl	8012168 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80103b8:	68fa      	ldr	r2, [r7, #12]
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	429a      	cmp	r2, r3
 80103be:	d006      	beq.n	80103ce <ipfrag_free_pbuf_custom+0x36>
 80103c0:	4b0b      	ldr	r3, [pc, #44]	@ (80103f0 <ipfrag_free_pbuf_custom+0x58>)
 80103c2:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80103c6:	490d      	ldr	r1, [pc, #52]	@ (80103fc <ipfrag_free_pbuf_custom+0x64>)
 80103c8:	480b      	ldr	r0, [pc, #44]	@ (80103f8 <ipfrag_free_pbuf_custom+0x60>)
 80103ca:	f001 fecd 	bl	8012168 <iprintf>
  if (pcr->original != NULL) {
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	695b      	ldr	r3, [r3, #20]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d004      	beq.n	80103e0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	695b      	ldr	r3, [r3, #20]
 80103da:	4618      	mov	r0, r3
 80103dc:	f7f7 fa28 	bl	8007830 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80103e0:	68f8      	ldr	r0, [r7, #12]
 80103e2:	f7ff ffbd 	bl	8010360 <ip_frag_free_pbuf_custom_ref>
}
 80103e6:	bf00      	nop
 80103e8:	3710      	adds	r7, #16
 80103ea:	46bd      	mov	sp, r7
 80103ec:	bd80      	pop	{r7, pc}
 80103ee:	bf00      	nop
 80103f0:	08015b10 	.word	0x08015b10
 80103f4:	08015cd4 	.word	0x08015cd4
 80103f8:	08015b58 	.word	0x08015b58
 80103fc:	08015ce0 	.word	0x08015ce0

08010400 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b094      	sub	sp, #80	@ 0x50
 8010404:	af02      	add	r7, sp, #8
 8010406:	60f8      	str	r0, [r7, #12]
 8010408:	60b9      	str	r1, [r7, #8]
 801040a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801040c:	2300      	movs	r3, #0
 801040e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010412:	68bb      	ldr	r3, [r7, #8]
 8010414:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010416:	3b14      	subs	r3, #20
 8010418:	2b00      	cmp	r3, #0
 801041a:	da00      	bge.n	801041e <ip4_frag+0x1e>
 801041c:	3307      	adds	r3, #7
 801041e:	10db      	asrs	r3, r3, #3
 8010420:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8010422:	2314      	movs	r3, #20
 8010424:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	685b      	ldr	r3, [r3, #4]
 801042a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801042c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801042e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010432:	781b      	ldrb	r3, [r3, #0]
 8010434:	f003 030f 	and.w	r3, r3, #15
 8010438:	b2db      	uxtb	r3, r3
 801043a:	009b      	lsls	r3, r3, #2
 801043c:	b2db      	uxtb	r3, r3
 801043e:	2b14      	cmp	r3, #20
 8010440:	d002      	beq.n	8010448 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8010442:	f06f 0305 	mvn.w	r3, #5
 8010446:	e110      	b.n	801066a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	895b      	ldrh	r3, [r3, #10]
 801044c:	2b13      	cmp	r3, #19
 801044e:	d809      	bhi.n	8010464 <ip4_frag+0x64>
 8010450:	4b88      	ldr	r3, [pc, #544]	@ (8010674 <ip4_frag+0x274>)
 8010452:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8010456:	4988      	ldr	r1, [pc, #544]	@ (8010678 <ip4_frag+0x278>)
 8010458:	4888      	ldr	r0, [pc, #544]	@ (801067c <ip4_frag+0x27c>)
 801045a:	f001 fe85 	bl	8012168 <iprintf>
 801045e:	f06f 0305 	mvn.w	r3, #5
 8010462:	e102      	b.n	801066a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010466:	88db      	ldrh	r3, [r3, #6]
 8010468:	b29b      	uxth	r3, r3
 801046a:	4618      	mov	r0, r3
 801046c:	f7f5 fe82 	bl	8006174 <lwip_htons>
 8010470:	4603      	mov	r3, r0
 8010472:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8010474:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010476:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801047a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801047e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010480:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010484:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	891b      	ldrh	r3, [r3, #8]
 801048a:	3b14      	subs	r3, #20
 801048c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8010490:	e0e1      	b.n	8010656 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010492:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010494:	00db      	lsls	r3, r3, #3
 8010496:	b29b      	uxth	r3, r3
 8010498:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801049c:	4293      	cmp	r3, r2
 801049e:	bf28      	it	cs
 80104a0:	4613      	movcs	r3, r2
 80104a2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80104a4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80104a8:	2114      	movs	r1, #20
 80104aa:	200e      	movs	r0, #14
 80104ac:	f7f6 fedc 	bl	8007268 <pbuf_alloc>
 80104b0:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80104b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	f000 80d5 	beq.w	8010664 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80104ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104bc:	895b      	ldrh	r3, [r3, #10]
 80104be:	2b13      	cmp	r3, #19
 80104c0:	d806      	bhi.n	80104d0 <ip4_frag+0xd0>
 80104c2:	4b6c      	ldr	r3, [pc, #432]	@ (8010674 <ip4_frag+0x274>)
 80104c4:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80104c8:	496d      	ldr	r1, [pc, #436]	@ (8010680 <ip4_frag+0x280>)
 80104ca:	486c      	ldr	r0, [pc, #432]	@ (801067c <ip4_frag+0x27c>)
 80104cc:	f001 fe4c 	bl	8012168 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80104d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104d2:	685b      	ldr	r3, [r3, #4]
 80104d4:	2214      	movs	r2, #20
 80104d6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80104d8:	4618      	mov	r0, r3
 80104da:	f001 ff94 	bl	8012406 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80104de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104e0:	685b      	ldr	r3, [r3, #4]
 80104e2:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80104e4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80104e6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80104ea:	e064      	b.n	80105b6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	895a      	ldrh	r2, [r3, #10]
 80104f0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80104f2:	1ad3      	subs	r3, r2, r3
 80104f4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	895b      	ldrh	r3, [r3, #10]
 80104fa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80104fc:	429a      	cmp	r2, r3
 80104fe:	d906      	bls.n	801050e <ip4_frag+0x10e>
 8010500:	4b5c      	ldr	r3, [pc, #368]	@ (8010674 <ip4_frag+0x274>)
 8010502:	f240 322d 	movw	r2, #813	@ 0x32d
 8010506:	495f      	ldr	r1, [pc, #380]	@ (8010684 <ip4_frag+0x284>)
 8010508:	485c      	ldr	r0, [pc, #368]	@ (801067c <ip4_frag+0x27c>)
 801050a:	f001 fe2d 	bl	8012168 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801050e:	8bfa      	ldrh	r2, [r7, #30]
 8010510:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010514:	4293      	cmp	r3, r2
 8010516:	bf28      	it	cs
 8010518:	4613      	movcs	r3, r2
 801051a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801051e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010522:	2b00      	cmp	r3, #0
 8010524:	d105      	bne.n	8010532 <ip4_frag+0x132>
        poff = 0;
 8010526:	2300      	movs	r3, #0
 8010528:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	60fb      	str	r3, [r7, #12]
        continue;
 8010530:	e041      	b.n	80105b6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8010532:	f7ff ff0d 	bl	8010350 <ip_frag_alloc_pbuf_custom_ref>
 8010536:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8010538:	69bb      	ldr	r3, [r7, #24]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d103      	bne.n	8010546 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801053e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010540:	f7f7 f976 	bl	8007830 <pbuf_free>
        goto memerr;
 8010544:	e08f      	b.n	8010666 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010546:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801054c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801054e:	4413      	add	r3, r2
 8010550:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8010554:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8010558:	9201      	str	r2, [sp, #4]
 801055a:	9300      	str	r3, [sp, #0]
 801055c:	4603      	mov	r3, r0
 801055e:	2241      	movs	r2, #65	@ 0x41
 8010560:	2000      	movs	r0, #0
 8010562:	f7f6 ffab 	bl	80074bc <pbuf_alloced_custom>
 8010566:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d106      	bne.n	801057c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801056e:	69b8      	ldr	r0, [r7, #24]
 8010570:	f7ff fef6 	bl	8010360 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010574:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010576:	f7f7 f95b 	bl	8007830 <pbuf_free>
        goto memerr;
 801057a:	e074      	b.n	8010666 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801057c:	68f8      	ldr	r0, [r7, #12]
 801057e:	f7f7 f9f7 	bl	8007970 <pbuf_ref>
      pcr->original = p;
 8010582:	69bb      	ldr	r3, [r7, #24]
 8010584:	68fa      	ldr	r2, [r7, #12]
 8010586:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010588:	69bb      	ldr	r3, [r7, #24]
 801058a:	4a3f      	ldr	r2, [pc, #252]	@ (8010688 <ip4_frag+0x288>)
 801058c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801058e:	6979      	ldr	r1, [r7, #20]
 8010590:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010592:	f7f7 fa0f 	bl	80079b4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010596:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801059a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801059e:	1ad3      	subs	r3, r2, r3
 80105a0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 80105a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d004      	beq.n	80105b6 <ip4_frag+0x1b6>
        poff = 0;
 80105ac:	2300      	movs	r3, #0
 80105ae:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80105b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d196      	bne.n	80104ec <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80105be:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80105c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80105c4:	4413      	add	r3, r2
 80105c6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80105c8:	68bb      	ldr	r3, [r7, #8]
 80105ca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80105cc:	f1a3 0213 	sub.w	r2, r3, #19
 80105d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80105d4:	429a      	cmp	r2, r3
 80105d6:	bfcc      	ite	gt
 80105d8:	2301      	movgt	r3, #1
 80105da:	2300      	movle	r3, #0
 80105dc:	b2db      	uxtb	r3, r3
 80105de:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80105e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80105e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80105e8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80105ea:	6a3b      	ldr	r3, [r7, #32]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d002      	beq.n	80105f6 <ip4_frag+0x1f6>
 80105f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d003      	beq.n	80105fe <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80105f6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80105f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80105fc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80105fe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010600:	4618      	mov	r0, r3
 8010602:	f7f5 fdb7 	bl	8006174 <lwip_htons>
 8010606:	4603      	mov	r3, r0
 8010608:	461a      	mov	r2, r3
 801060a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801060c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801060e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010610:	3314      	adds	r3, #20
 8010612:	b29b      	uxth	r3, r3
 8010614:	4618      	mov	r0, r3
 8010616:	f7f5 fdad 	bl	8006174 <lwip_htons>
 801061a:	4603      	mov	r3, r0
 801061c:	461a      	mov	r2, r3
 801061e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010620:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010624:	2200      	movs	r2, #0
 8010626:	729a      	strb	r2, [r3, #10]
 8010628:	2200      	movs	r2, #0
 801062a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801062c:	68bb      	ldr	r3, [r7, #8]
 801062e:	695b      	ldr	r3, [r3, #20]
 8010630:	687a      	ldr	r2, [r7, #4]
 8010632:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010634:	68b8      	ldr	r0, [r7, #8]
 8010636:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8010638:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801063a:	f7f7 f8f9 	bl	8007830 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801063e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010642:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010644:	1ad3      	subs	r3, r2, r3
 8010646:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801064a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801064e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010650:	4413      	add	r3, r2
 8010652:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8010656:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801065a:	2b00      	cmp	r3, #0
 801065c:	f47f af19 	bne.w	8010492 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010660:	2300      	movs	r3, #0
 8010662:	e002      	b.n	801066a <ip4_frag+0x26a>
      goto memerr;
 8010664:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8010666:	f04f 33ff 	mov.w	r3, #4294967295
}
 801066a:	4618      	mov	r0, r3
 801066c:	3748      	adds	r7, #72	@ 0x48
 801066e:	46bd      	mov	sp, r7
 8010670:	bd80      	pop	{r7, pc}
 8010672:	bf00      	nop
 8010674:	08015b10 	.word	0x08015b10
 8010678:	08015cec 	.word	0x08015cec
 801067c:	08015b58 	.word	0x08015b58
 8010680:	08015d08 	.word	0x08015d08
 8010684:	08015d28 	.word	0x08015d28
 8010688:	08010399 	.word	0x08010399

0801068c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b086      	sub	sp, #24
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
 8010694:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010696:	230e      	movs	r3, #14
 8010698:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	895b      	ldrh	r3, [r3, #10]
 801069e:	2b0e      	cmp	r3, #14
 80106a0:	d96e      	bls.n	8010780 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	7bdb      	ldrb	r3, [r3, #15]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d106      	bne.n	80106b8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80106aa:	683b      	ldr	r3, [r7, #0]
 80106ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80106b0:	3301      	adds	r3, #1
 80106b2:	b2da      	uxtb	r2, r3
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	685b      	ldr	r3, [r3, #4]
 80106bc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80106be:	693b      	ldr	r3, [r7, #16]
 80106c0:	7b1a      	ldrb	r2, [r3, #12]
 80106c2:	7b5b      	ldrb	r3, [r3, #13]
 80106c4:	021b      	lsls	r3, r3, #8
 80106c6:	4313      	orrs	r3, r2
 80106c8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80106ca:	693b      	ldr	r3, [r7, #16]
 80106cc:	781b      	ldrb	r3, [r3, #0]
 80106ce:	f003 0301 	and.w	r3, r3, #1
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d023      	beq.n	801071e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80106d6:	693b      	ldr	r3, [r7, #16]
 80106d8:	781b      	ldrb	r3, [r3, #0]
 80106da:	2b01      	cmp	r3, #1
 80106dc:	d10f      	bne.n	80106fe <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80106de:	693b      	ldr	r3, [r7, #16]
 80106e0:	785b      	ldrb	r3, [r3, #1]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d11b      	bne.n	801071e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80106e6:	693b      	ldr	r3, [r7, #16]
 80106e8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80106ea:	2b5e      	cmp	r3, #94	@ 0x5e
 80106ec:	d117      	bne.n	801071e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	7b5b      	ldrb	r3, [r3, #13]
 80106f2:	f043 0310 	orr.w	r3, r3, #16
 80106f6:	b2da      	uxtb	r2, r3
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	735a      	strb	r2, [r3, #13]
 80106fc:	e00f      	b.n	801071e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80106fe:	693b      	ldr	r3, [r7, #16]
 8010700:	2206      	movs	r2, #6
 8010702:	4928      	ldr	r1, [pc, #160]	@ (80107a4 <ethernet_input+0x118>)
 8010704:	4618      	mov	r0, r3
 8010706:	f001 fdba 	bl	801227e <memcmp>
 801070a:	4603      	mov	r3, r0
 801070c:	2b00      	cmp	r3, #0
 801070e:	d106      	bne.n	801071e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	7b5b      	ldrb	r3, [r3, #13]
 8010714:	f043 0308 	orr.w	r3, r3, #8
 8010718:	b2da      	uxtb	r2, r3
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801071e:	89fb      	ldrh	r3, [r7, #14]
 8010720:	2b08      	cmp	r3, #8
 8010722:	d003      	beq.n	801072c <ethernet_input+0xa0>
 8010724:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8010728:	d014      	beq.n	8010754 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801072a:	e032      	b.n	8010792 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801072c:	683b      	ldr	r3, [r7, #0]
 801072e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010732:	f003 0308 	and.w	r3, r3, #8
 8010736:	2b00      	cmp	r3, #0
 8010738:	d024      	beq.n	8010784 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801073a:	8afb      	ldrh	r3, [r7, #22]
 801073c:	4619      	mov	r1, r3
 801073e:	6878      	ldr	r0, [r7, #4]
 8010740:	f7f6 fff0 	bl	8007724 <pbuf_remove_header>
 8010744:	4603      	mov	r3, r0
 8010746:	2b00      	cmp	r3, #0
 8010748:	d11e      	bne.n	8010788 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801074a:	6839      	ldr	r1, [r7, #0]
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f7fe ff21 	bl	800f594 <ip4_input>
      break;
 8010752:	e013      	b.n	801077c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801075a:	f003 0308 	and.w	r3, r3, #8
 801075e:	2b00      	cmp	r3, #0
 8010760:	d014      	beq.n	801078c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010762:	8afb      	ldrh	r3, [r7, #22]
 8010764:	4619      	mov	r1, r3
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f7f6 ffdc 	bl	8007724 <pbuf_remove_header>
 801076c:	4603      	mov	r3, r0
 801076e:	2b00      	cmp	r3, #0
 8010770:	d10e      	bne.n	8010790 <ethernet_input+0x104>
        etharp_input(p, netif);
 8010772:	6839      	ldr	r1, [r7, #0]
 8010774:	6878      	ldr	r0, [r7, #4]
 8010776:	f7fe f8c1 	bl	800e8fc <etharp_input>
      break;
 801077a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801077c:	2300      	movs	r3, #0
 801077e:	e00c      	b.n	801079a <ethernet_input+0x10e>
    goto free_and_return;
 8010780:	bf00      	nop
 8010782:	e006      	b.n	8010792 <ethernet_input+0x106>
        goto free_and_return;
 8010784:	bf00      	nop
 8010786:	e004      	b.n	8010792 <ethernet_input+0x106>
        goto free_and_return;
 8010788:	bf00      	nop
 801078a:	e002      	b.n	8010792 <ethernet_input+0x106>
        goto free_and_return;
 801078c:	bf00      	nop
 801078e:	e000      	b.n	8010792 <ethernet_input+0x106>
        goto free_and_return;
 8010790:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010792:	6878      	ldr	r0, [r7, #4]
 8010794:	f7f7 f84c 	bl	8007830 <pbuf_free>
  return ERR_OK;
 8010798:	2300      	movs	r3, #0
}
 801079a:	4618      	mov	r0, r3
 801079c:	3718      	adds	r7, #24
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd80      	pop	{r7, pc}
 80107a2:	bf00      	nop
 80107a4:	08016018 	.word	0x08016018

080107a8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b086      	sub	sp, #24
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	60f8      	str	r0, [r7, #12]
 80107b0:	60b9      	str	r1, [r7, #8]
 80107b2:	607a      	str	r2, [r7, #4]
 80107b4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80107b6:	8c3b      	ldrh	r3, [r7, #32]
 80107b8:	4618      	mov	r0, r3
 80107ba:	f7f5 fcdb 	bl	8006174 <lwip_htons>
 80107be:	4603      	mov	r3, r0
 80107c0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80107c2:	210e      	movs	r1, #14
 80107c4:	68b8      	ldr	r0, [r7, #8]
 80107c6:	f7f6 ff9d 	bl	8007704 <pbuf_add_header>
 80107ca:	4603      	mov	r3, r0
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d125      	bne.n	801081c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	685b      	ldr	r3, [r3, #4]
 80107d4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80107d6:	693b      	ldr	r3, [r7, #16]
 80107d8:	8afa      	ldrh	r2, [r7, #22]
 80107da:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80107dc:	693b      	ldr	r3, [r7, #16]
 80107de:	2206      	movs	r2, #6
 80107e0:	6839      	ldr	r1, [r7, #0]
 80107e2:	4618      	mov	r0, r3
 80107e4:	f001 fe0f 	bl	8012406 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80107e8:	693b      	ldr	r3, [r7, #16]
 80107ea:	3306      	adds	r3, #6
 80107ec:	2206      	movs	r2, #6
 80107ee:	6879      	ldr	r1, [r7, #4]
 80107f0:	4618      	mov	r0, r3
 80107f2:	f001 fe08 	bl	8012406 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80107fc:	2b06      	cmp	r3, #6
 80107fe:	d006      	beq.n	801080e <ethernet_output+0x66>
 8010800:	4b0a      	ldr	r3, [pc, #40]	@ (801082c <ethernet_output+0x84>)
 8010802:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8010806:	490a      	ldr	r1, [pc, #40]	@ (8010830 <ethernet_output+0x88>)
 8010808:	480a      	ldr	r0, [pc, #40]	@ (8010834 <ethernet_output+0x8c>)
 801080a:	f001 fcad 	bl	8012168 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	699b      	ldr	r3, [r3, #24]
 8010812:	68b9      	ldr	r1, [r7, #8]
 8010814:	68f8      	ldr	r0, [r7, #12]
 8010816:	4798      	blx	r3
 8010818:	4603      	mov	r3, r0
 801081a:	e002      	b.n	8010822 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801081c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801081e:	f06f 0301 	mvn.w	r3, #1
}
 8010822:	4618      	mov	r0, r3
 8010824:	3718      	adds	r7, #24
 8010826:	46bd      	mov	sp, r7
 8010828:	bd80      	pop	{r7, pc}
 801082a:	bf00      	nop
 801082c:	08015d38 	.word	0x08015d38
 8010830:	08015d70 	.word	0x08015d70
 8010834:	08015da4 	.word	0x08015da4

08010838 <eMBFuncReadCoils>:
 8010838:	b580      	push	{r7, lr}
 801083a:	b086      	sub	sp, #24
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
 8010840:	6039      	str	r1, [r7, #0]
 8010842:	2300      	movs	r3, #0
 8010844:	75bb      	strb	r3, [r7, #22]
 8010846:	683b      	ldr	r3, [r7, #0]
 8010848:	881b      	ldrh	r3, [r3, #0]
 801084a:	2b05      	cmp	r3, #5
 801084c:	d16a      	bne.n	8010924 <eMBFuncReadCoils+0xec>
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	3301      	adds	r3, #1
 8010852:	781b      	ldrb	r3, [r3, #0]
 8010854:	021b      	lsls	r3, r3, #8
 8010856:	82bb      	strh	r3, [r7, #20]
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	3302      	adds	r3, #2
 801085c:	781b      	ldrb	r3, [r3, #0]
 801085e:	461a      	mov	r2, r3
 8010860:	8abb      	ldrh	r3, [r7, #20]
 8010862:	4313      	orrs	r3, r2
 8010864:	82bb      	strh	r3, [r7, #20]
 8010866:	8abb      	ldrh	r3, [r7, #20]
 8010868:	3301      	adds	r3, #1
 801086a:	82bb      	strh	r3, [r7, #20]
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	3303      	adds	r3, #3
 8010870:	781b      	ldrb	r3, [r3, #0]
 8010872:	021b      	lsls	r3, r3, #8
 8010874:	827b      	strh	r3, [r7, #18]
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	3304      	adds	r3, #4
 801087a:	781b      	ldrb	r3, [r3, #0]
 801087c:	461a      	mov	r2, r3
 801087e:	8a7b      	ldrh	r3, [r7, #18]
 8010880:	4313      	orrs	r3, r2
 8010882:	827b      	strh	r3, [r7, #18]
 8010884:	8a7b      	ldrh	r3, [r7, #18]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d049      	beq.n	801091e <eMBFuncReadCoils+0xe6>
 801088a:	8a7b      	ldrh	r3, [r7, #18]
 801088c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8010890:	d245      	bcs.n	801091e <eMBFuncReadCoils+0xe6>
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	60fb      	str	r3, [r7, #12]
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	2200      	movs	r2, #0
 801089a:	801a      	strh	r2, [r3, #0]
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	1c5a      	adds	r2, r3, #1
 80108a0:	60fa      	str	r2, [r7, #12]
 80108a2:	2201      	movs	r2, #1
 80108a4:	701a      	strb	r2, [r3, #0]
 80108a6:	683b      	ldr	r3, [r7, #0]
 80108a8:	881b      	ldrh	r3, [r3, #0]
 80108aa:	3301      	adds	r3, #1
 80108ac:	b29a      	uxth	r2, r3
 80108ae:	683b      	ldr	r3, [r7, #0]
 80108b0:	801a      	strh	r2, [r3, #0]
 80108b2:	8a7b      	ldrh	r3, [r7, #18]
 80108b4:	f003 0307 	and.w	r3, r3, #7
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d006      	beq.n	80108ca <eMBFuncReadCoils+0x92>
 80108bc:	8a7b      	ldrh	r3, [r7, #18]
 80108be:	08db      	lsrs	r3, r3, #3
 80108c0:	b29b      	uxth	r3, r3
 80108c2:	b2db      	uxtb	r3, r3
 80108c4:	3301      	adds	r3, #1
 80108c6:	75fb      	strb	r3, [r7, #23]
 80108c8:	e003      	b.n	80108d2 <eMBFuncReadCoils+0x9a>
 80108ca:	8a7b      	ldrh	r3, [r7, #18]
 80108cc:	08db      	lsrs	r3, r3, #3
 80108ce:	b29b      	uxth	r3, r3
 80108d0:	75fb      	strb	r3, [r7, #23]
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	1c5a      	adds	r2, r3, #1
 80108d6:	60fa      	str	r2, [r7, #12]
 80108d8:	7dfa      	ldrb	r2, [r7, #23]
 80108da:	701a      	strb	r2, [r3, #0]
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	881b      	ldrh	r3, [r3, #0]
 80108e0:	3301      	adds	r3, #1
 80108e2:	b29a      	uxth	r2, r3
 80108e4:	683b      	ldr	r3, [r7, #0]
 80108e6:	801a      	strh	r2, [r3, #0]
 80108e8:	8a7a      	ldrh	r2, [r7, #18]
 80108ea:	8ab9      	ldrh	r1, [r7, #20]
 80108ec:	2300      	movs	r3, #0
 80108ee:	68f8      	ldr	r0, [r7, #12]
 80108f0:	f000 fe14 	bl	801151c <eMBRegCoilsCB>
 80108f4:	4603      	mov	r3, r0
 80108f6:	72fb      	strb	r3, [r7, #11]
 80108f8:	7afb      	ldrb	r3, [r7, #11]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d006      	beq.n	801090c <eMBFuncReadCoils+0xd4>
 80108fe:	7afb      	ldrb	r3, [r7, #11]
 8010900:	4618      	mov	r0, r3
 8010902:	f000 fb77 	bl	8010ff4 <prveMBError2Exception>
 8010906:	4603      	mov	r3, r0
 8010908:	75bb      	strb	r3, [r7, #22]
 801090a:	e00d      	b.n	8010928 <eMBFuncReadCoils+0xf0>
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	881a      	ldrh	r2, [r3, #0]
 8010910:	7dfb      	ldrb	r3, [r7, #23]
 8010912:	b29b      	uxth	r3, r3
 8010914:	4413      	add	r3, r2
 8010916:	b29a      	uxth	r2, r3
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	801a      	strh	r2, [r3, #0]
 801091c:	e004      	b.n	8010928 <eMBFuncReadCoils+0xf0>
 801091e:	2303      	movs	r3, #3
 8010920:	75bb      	strb	r3, [r7, #22]
 8010922:	e001      	b.n	8010928 <eMBFuncReadCoils+0xf0>
 8010924:	2303      	movs	r3, #3
 8010926:	75bb      	strb	r3, [r7, #22]
 8010928:	7dbb      	ldrb	r3, [r7, #22]
 801092a:	4618      	mov	r0, r3
 801092c:	3718      	adds	r7, #24
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}

08010932 <eMBFuncWriteCoil>:
 8010932:	b580      	push	{r7, lr}
 8010934:	b084      	sub	sp, #16
 8010936:	af00      	add	r7, sp, #0
 8010938:	6078      	str	r0, [r7, #4]
 801093a:	6039      	str	r1, [r7, #0]
 801093c:	2300      	movs	r3, #0
 801093e:	73fb      	strb	r3, [r7, #15]
 8010940:	683b      	ldr	r3, [r7, #0]
 8010942:	881b      	ldrh	r3, [r3, #0]
 8010944:	2b05      	cmp	r3, #5
 8010946:	d13f      	bne.n	80109c8 <eMBFuncWriteCoil+0x96>
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	3301      	adds	r3, #1
 801094c:	781b      	ldrb	r3, [r3, #0]
 801094e:	021b      	lsls	r3, r3, #8
 8010950:	81bb      	strh	r3, [r7, #12]
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	3302      	adds	r3, #2
 8010956:	781b      	ldrb	r3, [r3, #0]
 8010958:	461a      	mov	r2, r3
 801095a:	89bb      	ldrh	r3, [r7, #12]
 801095c:	4313      	orrs	r3, r2
 801095e:	81bb      	strh	r3, [r7, #12]
 8010960:	89bb      	ldrh	r3, [r7, #12]
 8010962:	3301      	adds	r3, #1
 8010964:	81bb      	strh	r3, [r7, #12]
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	3304      	adds	r3, #4
 801096a:	781b      	ldrb	r3, [r3, #0]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d128      	bne.n	80109c2 <eMBFuncWriteCoil+0x90>
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	3303      	adds	r3, #3
 8010974:	781b      	ldrb	r3, [r3, #0]
 8010976:	2bff      	cmp	r3, #255	@ 0xff
 8010978:	d004      	beq.n	8010984 <eMBFuncWriteCoil+0x52>
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	3303      	adds	r3, #3
 801097e:	781b      	ldrb	r3, [r3, #0]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d11e      	bne.n	80109c2 <eMBFuncWriteCoil+0x90>
 8010984:	2300      	movs	r3, #0
 8010986:	727b      	strb	r3, [r7, #9]
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	3303      	adds	r3, #3
 801098c:	781b      	ldrb	r3, [r3, #0]
 801098e:	2bff      	cmp	r3, #255	@ 0xff
 8010990:	d102      	bne.n	8010998 <eMBFuncWriteCoil+0x66>
 8010992:	2301      	movs	r3, #1
 8010994:	723b      	strb	r3, [r7, #8]
 8010996:	e001      	b.n	801099c <eMBFuncWriteCoil+0x6a>
 8010998:	2300      	movs	r3, #0
 801099a:	723b      	strb	r3, [r7, #8]
 801099c:	89b9      	ldrh	r1, [r7, #12]
 801099e:	f107 0008 	add.w	r0, r7, #8
 80109a2:	2301      	movs	r3, #1
 80109a4:	2201      	movs	r2, #1
 80109a6:	f000 fdb9 	bl	801151c <eMBRegCoilsCB>
 80109aa:	4603      	mov	r3, r0
 80109ac:	72fb      	strb	r3, [r7, #11]
 80109ae:	7afb      	ldrb	r3, [r7, #11]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d00b      	beq.n	80109cc <eMBFuncWriteCoil+0x9a>
 80109b4:	7afb      	ldrb	r3, [r7, #11]
 80109b6:	4618      	mov	r0, r3
 80109b8:	f000 fb1c 	bl	8010ff4 <prveMBError2Exception>
 80109bc:	4603      	mov	r3, r0
 80109be:	73fb      	strb	r3, [r7, #15]
 80109c0:	e004      	b.n	80109cc <eMBFuncWriteCoil+0x9a>
 80109c2:	2303      	movs	r3, #3
 80109c4:	73fb      	strb	r3, [r7, #15]
 80109c6:	e001      	b.n	80109cc <eMBFuncWriteCoil+0x9a>
 80109c8:	2303      	movs	r3, #3
 80109ca:	73fb      	strb	r3, [r7, #15]
 80109cc:	7bfb      	ldrb	r3, [r7, #15]
 80109ce:	4618      	mov	r0, r3
 80109d0:	3710      	adds	r7, #16
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd80      	pop	{r7, pc}

080109d6 <eMBFuncWriteMultipleCoils>:
 80109d6:	b580      	push	{r7, lr}
 80109d8:	b084      	sub	sp, #16
 80109da:	af00      	add	r7, sp, #0
 80109dc:	6078      	str	r0, [r7, #4]
 80109de:	6039      	str	r1, [r7, #0]
 80109e0:	2300      	movs	r3, #0
 80109e2:	73bb      	strb	r3, [r7, #14]
 80109e4:	683b      	ldr	r3, [r7, #0]
 80109e6:	881b      	ldrh	r3, [r3, #0]
 80109e8:	2b05      	cmp	r3, #5
 80109ea:	d952      	bls.n	8010a92 <eMBFuncWriteMultipleCoils+0xbc>
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	3301      	adds	r3, #1
 80109f0:	781b      	ldrb	r3, [r3, #0]
 80109f2:	021b      	lsls	r3, r3, #8
 80109f4:	81bb      	strh	r3, [r7, #12]
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	3302      	adds	r3, #2
 80109fa:	781b      	ldrb	r3, [r3, #0]
 80109fc:	461a      	mov	r2, r3
 80109fe:	89bb      	ldrh	r3, [r7, #12]
 8010a00:	4313      	orrs	r3, r2
 8010a02:	81bb      	strh	r3, [r7, #12]
 8010a04:	89bb      	ldrh	r3, [r7, #12]
 8010a06:	3301      	adds	r3, #1
 8010a08:	81bb      	strh	r3, [r7, #12]
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	3303      	adds	r3, #3
 8010a0e:	781b      	ldrb	r3, [r3, #0]
 8010a10:	021b      	lsls	r3, r3, #8
 8010a12:	817b      	strh	r3, [r7, #10]
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	3304      	adds	r3, #4
 8010a18:	781b      	ldrb	r3, [r3, #0]
 8010a1a:	461a      	mov	r2, r3
 8010a1c:	897b      	ldrh	r3, [r7, #10]
 8010a1e:	4313      	orrs	r3, r2
 8010a20:	817b      	strh	r3, [r7, #10]
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	795b      	ldrb	r3, [r3, #5]
 8010a26:	727b      	strb	r3, [r7, #9]
 8010a28:	897b      	ldrh	r3, [r7, #10]
 8010a2a:	f003 0307 	and.w	r3, r3, #7
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d006      	beq.n	8010a40 <eMBFuncWriteMultipleCoils+0x6a>
 8010a32:	897b      	ldrh	r3, [r7, #10]
 8010a34:	08db      	lsrs	r3, r3, #3
 8010a36:	b29b      	uxth	r3, r3
 8010a38:	b2db      	uxtb	r3, r3
 8010a3a:	3301      	adds	r3, #1
 8010a3c:	73fb      	strb	r3, [r7, #15]
 8010a3e:	e003      	b.n	8010a48 <eMBFuncWriteMultipleCoils+0x72>
 8010a40:	897b      	ldrh	r3, [r7, #10]
 8010a42:	08db      	lsrs	r3, r3, #3
 8010a44:	b29b      	uxth	r3, r3
 8010a46:	73fb      	strb	r3, [r7, #15]
 8010a48:	897b      	ldrh	r3, [r7, #10]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d01e      	beq.n	8010a8c <eMBFuncWriteMultipleCoils+0xb6>
 8010a4e:	897b      	ldrh	r3, [r7, #10]
 8010a50:	f5b3 6ff6 	cmp.w	r3, #1968	@ 0x7b0
 8010a54:	d81a      	bhi.n	8010a8c <eMBFuncWriteMultipleCoils+0xb6>
 8010a56:	7bfa      	ldrb	r2, [r7, #15]
 8010a58:	7a7b      	ldrb	r3, [r7, #9]
 8010a5a:	429a      	cmp	r2, r3
 8010a5c:	d116      	bne.n	8010a8c <eMBFuncWriteMultipleCoils+0xb6>
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	1d98      	adds	r0, r3, #6
 8010a62:	897a      	ldrh	r2, [r7, #10]
 8010a64:	89b9      	ldrh	r1, [r7, #12]
 8010a66:	2301      	movs	r3, #1
 8010a68:	f000 fd58 	bl	801151c <eMBRegCoilsCB>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	723b      	strb	r3, [r7, #8]
 8010a70:	7a3b      	ldrb	r3, [r7, #8]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d006      	beq.n	8010a84 <eMBFuncWriteMultipleCoils+0xae>
 8010a76:	7a3b      	ldrb	r3, [r7, #8]
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f000 fabb 	bl	8010ff4 <prveMBError2Exception>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	73bb      	strb	r3, [r7, #14]
 8010a82:	e008      	b.n	8010a96 <eMBFuncWriteMultipleCoils+0xc0>
 8010a84:	683b      	ldr	r3, [r7, #0]
 8010a86:	2205      	movs	r2, #5
 8010a88:	801a      	strh	r2, [r3, #0]
 8010a8a:	e004      	b.n	8010a96 <eMBFuncWriteMultipleCoils+0xc0>
 8010a8c:	2303      	movs	r3, #3
 8010a8e:	73bb      	strb	r3, [r7, #14]
 8010a90:	e001      	b.n	8010a96 <eMBFuncWriteMultipleCoils+0xc0>
 8010a92:	2303      	movs	r3, #3
 8010a94:	73bb      	strb	r3, [r7, #14]
 8010a96:	7bbb      	ldrb	r3, [r7, #14]
 8010a98:	4618      	mov	r0, r3
 8010a9a:	3710      	adds	r7, #16
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	bd80      	pop	{r7, pc}

08010aa0 <eMBFuncReadDiscreteInputs>:
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b086      	sub	sp, #24
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
 8010aa8:	6039      	str	r1, [r7, #0]
 8010aaa:	2300      	movs	r3, #0
 8010aac:	75bb      	strb	r3, [r7, #22]
 8010aae:	683b      	ldr	r3, [r7, #0]
 8010ab0:	881b      	ldrh	r3, [r3, #0]
 8010ab2:	2b05      	cmp	r3, #5
 8010ab4:	d16a      	bne.n	8010b8c <eMBFuncReadDiscreteInputs+0xec>
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	3301      	adds	r3, #1
 8010aba:	781b      	ldrb	r3, [r3, #0]
 8010abc:	021b      	lsls	r3, r3, #8
 8010abe:	82bb      	strh	r3, [r7, #20]
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	3302      	adds	r3, #2
 8010ac4:	781b      	ldrb	r3, [r3, #0]
 8010ac6:	461a      	mov	r2, r3
 8010ac8:	8abb      	ldrh	r3, [r7, #20]
 8010aca:	4313      	orrs	r3, r2
 8010acc:	82bb      	strh	r3, [r7, #20]
 8010ace:	8abb      	ldrh	r3, [r7, #20]
 8010ad0:	3301      	adds	r3, #1
 8010ad2:	82bb      	strh	r3, [r7, #20]
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	3303      	adds	r3, #3
 8010ad8:	781b      	ldrb	r3, [r3, #0]
 8010ada:	021b      	lsls	r3, r3, #8
 8010adc:	827b      	strh	r3, [r7, #18]
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	3304      	adds	r3, #4
 8010ae2:	781b      	ldrb	r3, [r3, #0]
 8010ae4:	461a      	mov	r2, r3
 8010ae6:	8a7b      	ldrh	r3, [r7, #18]
 8010ae8:	4313      	orrs	r3, r2
 8010aea:	827b      	strh	r3, [r7, #18]
 8010aec:	8a7b      	ldrh	r3, [r7, #18]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d049      	beq.n	8010b86 <eMBFuncReadDiscreteInputs+0xe6>
 8010af2:	8a7b      	ldrh	r3, [r7, #18]
 8010af4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8010af8:	d245      	bcs.n	8010b86 <eMBFuncReadDiscreteInputs+0xe6>
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	60fb      	str	r3, [r7, #12]
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	2200      	movs	r2, #0
 8010b02:	801a      	strh	r2, [r3, #0]
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	1c5a      	adds	r2, r3, #1
 8010b08:	60fa      	str	r2, [r7, #12]
 8010b0a:	2202      	movs	r2, #2
 8010b0c:	701a      	strb	r2, [r3, #0]
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	881b      	ldrh	r3, [r3, #0]
 8010b12:	3301      	adds	r3, #1
 8010b14:	b29a      	uxth	r2, r3
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	801a      	strh	r2, [r3, #0]
 8010b1a:	8a7b      	ldrh	r3, [r7, #18]
 8010b1c:	f003 0307 	and.w	r3, r3, #7
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d006      	beq.n	8010b32 <eMBFuncReadDiscreteInputs+0x92>
 8010b24:	8a7b      	ldrh	r3, [r7, #18]
 8010b26:	08db      	lsrs	r3, r3, #3
 8010b28:	b29b      	uxth	r3, r3
 8010b2a:	b2db      	uxtb	r3, r3
 8010b2c:	3301      	adds	r3, #1
 8010b2e:	75fb      	strb	r3, [r7, #23]
 8010b30:	e003      	b.n	8010b3a <eMBFuncReadDiscreteInputs+0x9a>
 8010b32:	8a7b      	ldrh	r3, [r7, #18]
 8010b34:	08db      	lsrs	r3, r3, #3
 8010b36:	b29b      	uxth	r3, r3
 8010b38:	75fb      	strb	r3, [r7, #23]
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	1c5a      	adds	r2, r3, #1
 8010b3e:	60fa      	str	r2, [r7, #12]
 8010b40:	7dfa      	ldrb	r2, [r7, #23]
 8010b42:	701a      	strb	r2, [r3, #0]
 8010b44:	683b      	ldr	r3, [r7, #0]
 8010b46:	881b      	ldrh	r3, [r3, #0]
 8010b48:	3301      	adds	r3, #1
 8010b4a:	b29a      	uxth	r2, r3
 8010b4c:	683b      	ldr	r3, [r7, #0]
 8010b4e:	801a      	strh	r2, [r3, #0]
 8010b50:	8a7a      	ldrh	r2, [r7, #18]
 8010b52:	8abb      	ldrh	r3, [r7, #20]
 8010b54:	4619      	mov	r1, r3
 8010b56:	68f8      	ldr	r0, [r7, #12]
 8010b58:	f000 fdf4 	bl	8011744 <eMBRegDiscreteCB>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	72fb      	strb	r3, [r7, #11]
 8010b60:	7afb      	ldrb	r3, [r7, #11]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d006      	beq.n	8010b74 <eMBFuncReadDiscreteInputs+0xd4>
 8010b66:	7afb      	ldrb	r3, [r7, #11]
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f000 fa43 	bl	8010ff4 <prveMBError2Exception>
 8010b6e:	4603      	mov	r3, r0
 8010b70:	75bb      	strb	r3, [r7, #22]
 8010b72:	e00d      	b.n	8010b90 <eMBFuncReadDiscreteInputs+0xf0>
 8010b74:	683b      	ldr	r3, [r7, #0]
 8010b76:	881a      	ldrh	r2, [r3, #0]
 8010b78:	7dfb      	ldrb	r3, [r7, #23]
 8010b7a:	b29b      	uxth	r3, r3
 8010b7c:	4413      	add	r3, r2
 8010b7e:	b29a      	uxth	r2, r3
 8010b80:	683b      	ldr	r3, [r7, #0]
 8010b82:	801a      	strh	r2, [r3, #0]
 8010b84:	e004      	b.n	8010b90 <eMBFuncReadDiscreteInputs+0xf0>
 8010b86:	2303      	movs	r3, #3
 8010b88:	75bb      	strb	r3, [r7, #22]
 8010b8a:	e001      	b.n	8010b90 <eMBFuncReadDiscreteInputs+0xf0>
 8010b8c:	2303      	movs	r3, #3
 8010b8e:	75bb      	strb	r3, [r7, #22]
 8010b90:	7dbb      	ldrb	r3, [r7, #22]
 8010b92:	4618      	mov	r0, r3
 8010b94:	3718      	adds	r7, #24
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd80      	pop	{r7, pc}

08010b9a <eMBFuncWriteHoldingRegister>:
 8010b9a:	b580      	push	{r7, lr}
 8010b9c:	b084      	sub	sp, #16
 8010b9e:	af00      	add	r7, sp, #0
 8010ba0:	6078      	str	r0, [r7, #4]
 8010ba2:	6039      	str	r1, [r7, #0]
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	73fb      	strb	r3, [r7, #15]
 8010ba8:	683b      	ldr	r3, [r7, #0]
 8010baa:	881b      	ldrh	r3, [r3, #0]
 8010bac:	2b05      	cmp	r3, #5
 8010bae:	d121      	bne.n	8010bf4 <eMBFuncWriteHoldingRegister+0x5a>
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	3301      	adds	r3, #1
 8010bb4:	781b      	ldrb	r3, [r3, #0]
 8010bb6:	021b      	lsls	r3, r3, #8
 8010bb8:	81bb      	strh	r3, [r7, #12]
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	3302      	adds	r3, #2
 8010bbe:	781b      	ldrb	r3, [r3, #0]
 8010bc0:	461a      	mov	r2, r3
 8010bc2:	89bb      	ldrh	r3, [r7, #12]
 8010bc4:	4313      	orrs	r3, r2
 8010bc6:	81bb      	strh	r3, [r7, #12]
 8010bc8:	89bb      	ldrh	r3, [r7, #12]
 8010bca:	3301      	adds	r3, #1
 8010bcc:	81bb      	strh	r3, [r7, #12]
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	1cd8      	adds	r0, r3, #3
 8010bd2:	89b9      	ldrh	r1, [r7, #12]
 8010bd4:	2301      	movs	r3, #1
 8010bd6:	2201      	movs	r2, #1
 8010bd8:	f000 fbfc 	bl	80113d4 <eMBRegHoldingCB>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	72fb      	strb	r3, [r7, #11]
 8010be0:	7afb      	ldrb	r3, [r7, #11]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d008      	beq.n	8010bf8 <eMBFuncWriteHoldingRegister+0x5e>
 8010be6:	7afb      	ldrb	r3, [r7, #11]
 8010be8:	4618      	mov	r0, r3
 8010bea:	f000 fa03 	bl	8010ff4 <prveMBError2Exception>
 8010bee:	4603      	mov	r3, r0
 8010bf0:	73fb      	strb	r3, [r7, #15]
 8010bf2:	e001      	b.n	8010bf8 <eMBFuncWriteHoldingRegister+0x5e>
 8010bf4:	2303      	movs	r3, #3
 8010bf6:	73fb      	strb	r3, [r7, #15]
 8010bf8:	7bfb      	ldrb	r3, [r7, #15]
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	3710      	adds	r7, #16
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	bd80      	pop	{r7, pc}

08010c02 <eMBFuncWriteMultipleHoldingRegister>:
 8010c02:	b580      	push	{r7, lr}
 8010c04:	b084      	sub	sp, #16
 8010c06:	af00      	add	r7, sp, #0
 8010c08:	6078      	str	r0, [r7, #4]
 8010c0a:	6039      	str	r1, [r7, #0]
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	73fb      	strb	r3, [r7, #15]
 8010c10:	683b      	ldr	r3, [r7, #0]
 8010c12:	881b      	ldrh	r3, [r3, #0]
 8010c14:	2b05      	cmp	r3, #5
 8010c16:	d944      	bls.n	8010ca2 <eMBFuncWriteMultipleHoldingRegister+0xa0>
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	3301      	adds	r3, #1
 8010c1c:	781b      	ldrb	r3, [r3, #0]
 8010c1e:	021b      	lsls	r3, r3, #8
 8010c20:	81bb      	strh	r3, [r7, #12]
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	3302      	adds	r3, #2
 8010c26:	781b      	ldrb	r3, [r3, #0]
 8010c28:	461a      	mov	r2, r3
 8010c2a:	89bb      	ldrh	r3, [r7, #12]
 8010c2c:	4313      	orrs	r3, r2
 8010c2e:	81bb      	strh	r3, [r7, #12]
 8010c30:	89bb      	ldrh	r3, [r7, #12]
 8010c32:	3301      	adds	r3, #1
 8010c34:	81bb      	strh	r3, [r7, #12]
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	3303      	adds	r3, #3
 8010c3a:	781b      	ldrb	r3, [r3, #0]
 8010c3c:	021b      	lsls	r3, r3, #8
 8010c3e:	817b      	strh	r3, [r7, #10]
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	3304      	adds	r3, #4
 8010c44:	781b      	ldrb	r3, [r3, #0]
 8010c46:	461a      	mov	r2, r3
 8010c48:	897b      	ldrh	r3, [r7, #10]
 8010c4a:	4313      	orrs	r3, r2
 8010c4c:	817b      	strh	r3, [r7, #10]
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	795b      	ldrb	r3, [r3, #5]
 8010c52:	727b      	strb	r3, [r7, #9]
 8010c54:	897b      	ldrh	r3, [r7, #10]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d020      	beq.n	8010c9c <eMBFuncWriteMultipleHoldingRegister+0x9a>
 8010c5a:	897b      	ldrh	r3, [r7, #10]
 8010c5c:	2b78      	cmp	r3, #120	@ 0x78
 8010c5e:	d81d      	bhi.n	8010c9c <eMBFuncWriteMultipleHoldingRegister+0x9a>
 8010c60:	897b      	ldrh	r3, [r7, #10]
 8010c62:	b2db      	uxtb	r3, r3
 8010c64:	005b      	lsls	r3, r3, #1
 8010c66:	b2db      	uxtb	r3, r3
 8010c68:	7a7a      	ldrb	r2, [r7, #9]
 8010c6a:	429a      	cmp	r2, r3
 8010c6c:	d116      	bne.n	8010c9c <eMBFuncWriteMultipleHoldingRegister+0x9a>
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	1d98      	adds	r0, r3, #6
 8010c72:	897a      	ldrh	r2, [r7, #10]
 8010c74:	89b9      	ldrh	r1, [r7, #12]
 8010c76:	2301      	movs	r3, #1
 8010c78:	f000 fbac 	bl	80113d4 <eMBRegHoldingCB>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	723b      	strb	r3, [r7, #8]
 8010c80:	7a3b      	ldrb	r3, [r7, #8]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d006      	beq.n	8010c94 <eMBFuncWriteMultipleHoldingRegister+0x92>
 8010c86:	7a3b      	ldrb	r3, [r7, #8]
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f000 f9b3 	bl	8010ff4 <prveMBError2Exception>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	73fb      	strb	r3, [r7, #15]
 8010c92:	e008      	b.n	8010ca6 <eMBFuncWriteMultipleHoldingRegister+0xa4>
 8010c94:	683b      	ldr	r3, [r7, #0]
 8010c96:	2205      	movs	r2, #5
 8010c98:	801a      	strh	r2, [r3, #0]
 8010c9a:	e004      	b.n	8010ca6 <eMBFuncWriteMultipleHoldingRegister+0xa4>
 8010c9c:	2303      	movs	r3, #3
 8010c9e:	73fb      	strb	r3, [r7, #15]
 8010ca0:	e001      	b.n	8010ca6 <eMBFuncWriteMultipleHoldingRegister+0xa4>
 8010ca2:	2303      	movs	r3, #3
 8010ca4:	73fb      	strb	r3, [r7, #15]
 8010ca6:	7bfb      	ldrb	r3, [r7, #15]
 8010ca8:	4618      	mov	r0, r3
 8010caa:	3710      	adds	r7, #16
 8010cac:	46bd      	mov	sp, r7
 8010cae:	bd80      	pop	{r7, pc}

08010cb0 <eMBFuncReadHoldingRegister>:
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b086      	sub	sp, #24
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
 8010cb8:	6039      	str	r1, [r7, #0]
 8010cba:	2300      	movs	r3, #0
 8010cbc:	75fb      	strb	r3, [r7, #23]
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	881b      	ldrh	r3, [r3, #0]
 8010cc2:	2b05      	cmp	r3, #5
 8010cc4:	d15d      	bne.n	8010d82 <eMBFuncReadHoldingRegister+0xd2>
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	3301      	adds	r3, #1
 8010cca:	781b      	ldrb	r3, [r3, #0]
 8010ccc:	021b      	lsls	r3, r3, #8
 8010cce:	82bb      	strh	r3, [r7, #20]
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	3302      	adds	r3, #2
 8010cd4:	781b      	ldrb	r3, [r3, #0]
 8010cd6:	461a      	mov	r2, r3
 8010cd8:	8abb      	ldrh	r3, [r7, #20]
 8010cda:	4313      	orrs	r3, r2
 8010cdc:	82bb      	strh	r3, [r7, #20]
 8010cde:	8abb      	ldrh	r3, [r7, #20]
 8010ce0:	3301      	adds	r3, #1
 8010ce2:	82bb      	strh	r3, [r7, #20]
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	3303      	adds	r3, #3
 8010ce8:	781b      	ldrb	r3, [r3, #0]
 8010cea:	021b      	lsls	r3, r3, #8
 8010cec:	827b      	strh	r3, [r7, #18]
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	3304      	adds	r3, #4
 8010cf2:	781b      	ldrb	r3, [r3, #0]
 8010cf4:	461a      	mov	r2, r3
 8010cf6:	8a7b      	ldrh	r3, [r7, #18]
 8010cf8:	4313      	orrs	r3, r2
 8010cfa:	827b      	strh	r3, [r7, #18]
 8010cfc:	8a7b      	ldrh	r3, [r7, #18]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d03c      	beq.n	8010d7c <eMBFuncReadHoldingRegister+0xcc>
 8010d02:	8a7b      	ldrh	r3, [r7, #18]
 8010d04:	2b7d      	cmp	r3, #125	@ 0x7d
 8010d06:	d839      	bhi.n	8010d7c <eMBFuncReadHoldingRegister+0xcc>
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	60fb      	str	r3, [r7, #12]
 8010d0c:	683b      	ldr	r3, [r7, #0]
 8010d0e:	2200      	movs	r2, #0
 8010d10:	801a      	strh	r2, [r3, #0]
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	1c5a      	adds	r2, r3, #1
 8010d16:	60fa      	str	r2, [r7, #12]
 8010d18:	2203      	movs	r2, #3
 8010d1a:	701a      	strb	r2, [r3, #0]
 8010d1c:	683b      	ldr	r3, [r7, #0]
 8010d1e:	881b      	ldrh	r3, [r3, #0]
 8010d20:	3301      	adds	r3, #1
 8010d22:	b29a      	uxth	r2, r3
 8010d24:	683b      	ldr	r3, [r7, #0]
 8010d26:	801a      	strh	r2, [r3, #0]
 8010d28:	8a7b      	ldrh	r3, [r7, #18]
 8010d2a:	b2da      	uxtb	r2, r3
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	1c59      	adds	r1, r3, #1
 8010d30:	60f9      	str	r1, [r7, #12]
 8010d32:	0052      	lsls	r2, r2, #1
 8010d34:	b2d2      	uxtb	r2, r2
 8010d36:	701a      	strb	r2, [r3, #0]
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	881b      	ldrh	r3, [r3, #0]
 8010d3c:	3301      	adds	r3, #1
 8010d3e:	b29a      	uxth	r2, r3
 8010d40:	683b      	ldr	r3, [r7, #0]
 8010d42:	801a      	strh	r2, [r3, #0]
 8010d44:	8a7a      	ldrh	r2, [r7, #18]
 8010d46:	8ab9      	ldrh	r1, [r7, #20]
 8010d48:	2300      	movs	r3, #0
 8010d4a:	68f8      	ldr	r0, [r7, #12]
 8010d4c:	f000 fb42 	bl	80113d4 <eMBRegHoldingCB>
 8010d50:	4603      	mov	r3, r0
 8010d52:	72fb      	strb	r3, [r7, #11]
 8010d54:	7afb      	ldrb	r3, [r7, #11]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d006      	beq.n	8010d68 <eMBFuncReadHoldingRegister+0xb8>
 8010d5a:	7afb      	ldrb	r3, [r7, #11]
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	f000 f949 	bl	8010ff4 <prveMBError2Exception>
 8010d62:	4603      	mov	r3, r0
 8010d64:	75fb      	strb	r3, [r7, #23]
 8010d66:	e00e      	b.n	8010d86 <eMBFuncReadHoldingRegister+0xd6>
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	881a      	ldrh	r2, [r3, #0]
 8010d6c:	8a7b      	ldrh	r3, [r7, #18]
 8010d6e:	005b      	lsls	r3, r3, #1
 8010d70:	b29b      	uxth	r3, r3
 8010d72:	4413      	add	r3, r2
 8010d74:	b29a      	uxth	r2, r3
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	801a      	strh	r2, [r3, #0]
 8010d7a:	e004      	b.n	8010d86 <eMBFuncReadHoldingRegister+0xd6>
 8010d7c:	2303      	movs	r3, #3
 8010d7e:	75fb      	strb	r3, [r7, #23]
 8010d80:	e001      	b.n	8010d86 <eMBFuncReadHoldingRegister+0xd6>
 8010d82:	2303      	movs	r3, #3
 8010d84:	75fb      	strb	r3, [r7, #23]
 8010d86:	7dfb      	ldrb	r3, [r7, #23]
 8010d88:	4618      	mov	r0, r3
 8010d8a:	3718      	adds	r7, #24
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	bd80      	pop	{r7, pc}

08010d90 <eMBFuncReadWriteMultipleHoldingRegister>:
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b086      	sub	sp, #24
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
 8010d98:	6039      	str	r1, [r7, #0]
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	75fb      	strb	r3, [r7, #23]
 8010d9e:	683b      	ldr	r3, [r7, #0]
 8010da0:	881b      	ldrh	r3, [r3, #0]
 8010da2:	2b09      	cmp	r3, #9
 8010da4:	f240 8095 	bls.w	8010ed2 <eMBFuncReadWriteMultipleHoldingRegister+0x142>
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	3301      	adds	r3, #1
 8010dac:	781b      	ldrb	r3, [r3, #0]
 8010dae:	021b      	lsls	r3, r3, #8
 8010db0:	82bb      	strh	r3, [r7, #20]
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	3302      	adds	r3, #2
 8010db6:	781b      	ldrb	r3, [r3, #0]
 8010db8:	461a      	mov	r2, r3
 8010dba:	8abb      	ldrh	r3, [r7, #20]
 8010dbc:	4313      	orrs	r3, r2
 8010dbe:	82bb      	strh	r3, [r7, #20]
 8010dc0:	8abb      	ldrh	r3, [r7, #20]
 8010dc2:	3301      	adds	r3, #1
 8010dc4:	82bb      	strh	r3, [r7, #20]
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	3303      	adds	r3, #3
 8010dca:	781b      	ldrb	r3, [r3, #0]
 8010dcc:	021b      	lsls	r3, r3, #8
 8010dce:	827b      	strh	r3, [r7, #18]
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	3304      	adds	r3, #4
 8010dd4:	781b      	ldrb	r3, [r3, #0]
 8010dd6:	461a      	mov	r2, r3
 8010dd8:	8a7b      	ldrh	r3, [r7, #18]
 8010dda:	4313      	orrs	r3, r2
 8010ddc:	827b      	strh	r3, [r7, #18]
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	3305      	adds	r3, #5
 8010de2:	781b      	ldrb	r3, [r3, #0]
 8010de4:	021b      	lsls	r3, r3, #8
 8010de6:	823b      	strh	r3, [r7, #16]
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	3306      	adds	r3, #6
 8010dec:	781b      	ldrb	r3, [r3, #0]
 8010dee:	461a      	mov	r2, r3
 8010df0:	8a3b      	ldrh	r3, [r7, #16]
 8010df2:	4313      	orrs	r3, r2
 8010df4:	823b      	strh	r3, [r7, #16]
 8010df6:	8a3b      	ldrh	r3, [r7, #16]
 8010df8:	3301      	adds	r3, #1
 8010dfa:	823b      	strh	r3, [r7, #16]
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	3307      	adds	r3, #7
 8010e00:	781b      	ldrb	r3, [r3, #0]
 8010e02:	021b      	lsls	r3, r3, #8
 8010e04:	81fb      	strh	r3, [r7, #14]
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	3308      	adds	r3, #8
 8010e0a:	781b      	ldrb	r3, [r3, #0]
 8010e0c:	461a      	mov	r2, r3
 8010e0e:	89fb      	ldrh	r3, [r7, #14]
 8010e10:	4313      	orrs	r3, r2
 8010e12:	81fb      	strh	r3, [r7, #14]
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	7a5b      	ldrb	r3, [r3, #9]
 8010e18:	737b      	strb	r3, [r7, #13]
 8010e1a:	8a7b      	ldrh	r3, [r7, #18]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d056      	beq.n	8010ece <eMBFuncReadWriteMultipleHoldingRegister+0x13e>
 8010e20:	8a7b      	ldrh	r3, [r7, #18]
 8010e22:	2b7d      	cmp	r3, #125	@ 0x7d
 8010e24:	d853      	bhi.n	8010ece <eMBFuncReadWriteMultipleHoldingRegister+0x13e>
 8010e26:	89fb      	ldrh	r3, [r7, #14]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d050      	beq.n	8010ece <eMBFuncReadWriteMultipleHoldingRegister+0x13e>
 8010e2c:	89fb      	ldrh	r3, [r7, #14]
 8010e2e:	2b79      	cmp	r3, #121	@ 0x79
 8010e30:	d84d      	bhi.n	8010ece <eMBFuncReadWriteMultipleHoldingRegister+0x13e>
 8010e32:	89fb      	ldrh	r3, [r7, #14]
 8010e34:	005a      	lsls	r2, r3, #1
 8010e36:	7b7b      	ldrb	r3, [r7, #13]
 8010e38:	429a      	cmp	r2, r3
 8010e3a:	d148      	bne.n	8010ece <eMBFuncReadWriteMultipleHoldingRegister+0x13e>
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f103 000a 	add.w	r0, r3, #10
 8010e42:	89fa      	ldrh	r2, [r7, #14]
 8010e44:	8a39      	ldrh	r1, [r7, #16]
 8010e46:	2301      	movs	r3, #1
 8010e48:	f000 fac4 	bl	80113d4 <eMBRegHoldingCB>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	75bb      	strb	r3, [r7, #22]
 8010e50:	7dbb      	ldrb	r3, [r7, #22]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d131      	bne.n	8010eba <eMBFuncReadWriteMultipleHoldingRegister+0x12a>
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	60bb      	str	r3, [r7, #8]
 8010e5a:	683b      	ldr	r3, [r7, #0]
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	801a      	strh	r2, [r3, #0]
 8010e60:	68bb      	ldr	r3, [r7, #8]
 8010e62:	1c5a      	adds	r2, r3, #1
 8010e64:	60ba      	str	r2, [r7, #8]
 8010e66:	2217      	movs	r2, #23
 8010e68:	701a      	strb	r2, [r3, #0]
 8010e6a:	683b      	ldr	r3, [r7, #0]
 8010e6c:	881b      	ldrh	r3, [r3, #0]
 8010e6e:	3301      	adds	r3, #1
 8010e70:	b29a      	uxth	r2, r3
 8010e72:	683b      	ldr	r3, [r7, #0]
 8010e74:	801a      	strh	r2, [r3, #0]
 8010e76:	8a7b      	ldrh	r3, [r7, #18]
 8010e78:	b2da      	uxtb	r2, r3
 8010e7a:	68bb      	ldr	r3, [r7, #8]
 8010e7c:	1c59      	adds	r1, r3, #1
 8010e7e:	60b9      	str	r1, [r7, #8]
 8010e80:	0052      	lsls	r2, r2, #1
 8010e82:	b2d2      	uxtb	r2, r2
 8010e84:	701a      	strb	r2, [r3, #0]
 8010e86:	683b      	ldr	r3, [r7, #0]
 8010e88:	881b      	ldrh	r3, [r3, #0]
 8010e8a:	3301      	adds	r3, #1
 8010e8c:	b29a      	uxth	r2, r3
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	801a      	strh	r2, [r3, #0]
 8010e92:	8a7a      	ldrh	r2, [r7, #18]
 8010e94:	8ab9      	ldrh	r1, [r7, #20]
 8010e96:	2300      	movs	r3, #0
 8010e98:	68b8      	ldr	r0, [r7, #8]
 8010e9a:	f000 fa9b 	bl	80113d4 <eMBRegHoldingCB>
 8010e9e:	4603      	mov	r3, r0
 8010ea0:	75bb      	strb	r3, [r7, #22]
 8010ea2:	7dbb      	ldrb	r3, [r7, #22]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d108      	bne.n	8010eba <eMBFuncReadWriteMultipleHoldingRegister+0x12a>
 8010ea8:	683b      	ldr	r3, [r7, #0]
 8010eaa:	881a      	ldrh	r2, [r3, #0]
 8010eac:	8a7b      	ldrh	r3, [r7, #18]
 8010eae:	005b      	lsls	r3, r3, #1
 8010eb0:	b29b      	uxth	r3, r3
 8010eb2:	4413      	add	r3, r2
 8010eb4:	b29a      	uxth	r2, r3
 8010eb6:	683b      	ldr	r3, [r7, #0]
 8010eb8:	801a      	strh	r2, [r3, #0]
 8010eba:	7dbb      	ldrb	r3, [r7, #22]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d008      	beq.n	8010ed2 <eMBFuncReadWriteMultipleHoldingRegister+0x142>
 8010ec0:	7dbb      	ldrb	r3, [r7, #22]
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f000 f896 	bl	8010ff4 <prveMBError2Exception>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	75fb      	strb	r3, [r7, #23]
 8010ecc:	e001      	b.n	8010ed2 <eMBFuncReadWriteMultipleHoldingRegister+0x142>
 8010ece:	2303      	movs	r3, #3
 8010ed0:	75fb      	strb	r3, [r7, #23]
 8010ed2:	7dfb      	ldrb	r3, [r7, #23]
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	3718      	adds	r7, #24
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bd80      	pop	{r7, pc}

08010edc <eMBFuncReadInputRegister>:
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b086      	sub	sp, #24
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
 8010ee4:	6039      	str	r1, [r7, #0]
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	75fb      	strb	r3, [r7, #23]
 8010eea:	683b      	ldr	r3, [r7, #0]
 8010eec:	881b      	ldrh	r3, [r3, #0]
 8010eee:	2b05      	cmp	r3, #5
 8010ef0:	d15d      	bne.n	8010fae <eMBFuncReadInputRegister+0xd2>
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	3301      	adds	r3, #1
 8010ef6:	781b      	ldrb	r3, [r3, #0]
 8010ef8:	021b      	lsls	r3, r3, #8
 8010efa:	82bb      	strh	r3, [r7, #20]
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	3302      	adds	r3, #2
 8010f00:	781b      	ldrb	r3, [r3, #0]
 8010f02:	461a      	mov	r2, r3
 8010f04:	8abb      	ldrh	r3, [r7, #20]
 8010f06:	4313      	orrs	r3, r2
 8010f08:	82bb      	strh	r3, [r7, #20]
 8010f0a:	8abb      	ldrh	r3, [r7, #20]
 8010f0c:	3301      	adds	r3, #1
 8010f0e:	82bb      	strh	r3, [r7, #20]
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	3303      	adds	r3, #3
 8010f14:	781b      	ldrb	r3, [r3, #0]
 8010f16:	021b      	lsls	r3, r3, #8
 8010f18:	827b      	strh	r3, [r7, #18]
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	3304      	adds	r3, #4
 8010f1e:	781b      	ldrb	r3, [r3, #0]
 8010f20:	461a      	mov	r2, r3
 8010f22:	8a7b      	ldrh	r3, [r7, #18]
 8010f24:	4313      	orrs	r3, r2
 8010f26:	827b      	strh	r3, [r7, #18]
 8010f28:	8a7b      	ldrh	r3, [r7, #18]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d03c      	beq.n	8010fa8 <eMBFuncReadInputRegister+0xcc>
 8010f2e:	8a7b      	ldrh	r3, [r7, #18]
 8010f30:	2b7c      	cmp	r3, #124	@ 0x7c
 8010f32:	d839      	bhi.n	8010fa8 <eMBFuncReadInputRegister+0xcc>
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	60fb      	str	r3, [r7, #12]
 8010f38:	683b      	ldr	r3, [r7, #0]
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	801a      	strh	r2, [r3, #0]
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	1c5a      	adds	r2, r3, #1
 8010f42:	60fa      	str	r2, [r7, #12]
 8010f44:	2204      	movs	r2, #4
 8010f46:	701a      	strb	r2, [r3, #0]
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	881b      	ldrh	r3, [r3, #0]
 8010f4c:	3301      	adds	r3, #1
 8010f4e:	b29a      	uxth	r2, r3
 8010f50:	683b      	ldr	r3, [r7, #0]
 8010f52:	801a      	strh	r2, [r3, #0]
 8010f54:	8a7b      	ldrh	r3, [r7, #18]
 8010f56:	b2da      	uxtb	r2, r3
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	1c59      	adds	r1, r3, #1
 8010f5c:	60f9      	str	r1, [r7, #12]
 8010f5e:	0052      	lsls	r2, r2, #1
 8010f60:	b2d2      	uxtb	r2, r2
 8010f62:	701a      	strb	r2, [r3, #0]
 8010f64:	683b      	ldr	r3, [r7, #0]
 8010f66:	881b      	ldrh	r3, [r3, #0]
 8010f68:	3301      	adds	r3, #1
 8010f6a:	b29a      	uxth	r2, r3
 8010f6c:	683b      	ldr	r3, [r7, #0]
 8010f6e:	801a      	strh	r2, [r3, #0]
 8010f70:	8a7a      	ldrh	r2, [r7, #18]
 8010f72:	8abb      	ldrh	r3, [r7, #20]
 8010f74:	4619      	mov	r1, r3
 8010f76:	68f8      	ldr	r0, [r7, #12]
 8010f78:	f000 fba6 	bl	80116c8 <eMBRegInputCB>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	72fb      	strb	r3, [r7, #11]
 8010f80:	7afb      	ldrb	r3, [r7, #11]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d006      	beq.n	8010f94 <eMBFuncReadInputRegister+0xb8>
 8010f86:	7afb      	ldrb	r3, [r7, #11]
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f000 f833 	bl	8010ff4 <prveMBError2Exception>
 8010f8e:	4603      	mov	r3, r0
 8010f90:	75fb      	strb	r3, [r7, #23]
 8010f92:	e00e      	b.n	8010fb2 <eMBFuncReadInputRegister+0xd6>
 8010f94:	683b      	ldr	r3, [r7, #0]
 8010f96:	881a      	ldrh	r2, [r3, #0]
 8010f98:	8a7b      	ldrh	r3, [r7, #18]
 8010f9a:	005b      	lsls	r3, r3, #1
 8010f9c:	b29b      	uxth	r3, r3
 8010f9e:	4413      	add	r3, r2
 8010fa0:	b29a      	uxth	r2, r3
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	801a      	strh	r2, [r3, #0]
 8010fa6:	e004      	b.n	8010fb2 <eMBFuncReadInputRegister+0xd6>
 8010fa8:	2303      	movs	r3, #3
 8010faa:	75fb      	strb	r3, [r7, #23]
 8010fac:	e001      	b.n	8010fb2 <eMBFuncReadInputRegister+0xd6>
 8010fae:	2303      	movs	r3, #3
 8010fb0:	75fb      	strb	r3, [r7, #23]
 8010fb2:	7dfb      	ldrb	r3, [r7, #23]
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	3718      	adds	r7, #24
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	bd80      	pop	{r7, pc}

08010fbc <eMBFuncReportSlaveID>:
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b082      	sub	sp, #8
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
 8010fc4:	6039      	str	r1, [r7, #0]
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	3301      	adds	r3, #1
 8010fca:	4a08      	ldr	r2, [pc, #32]	@ (8010fec <eMBFuncReportSlaveID+0x30>)
 8010fcc:	8812      	ldrh	r2, [r2, #0]
 8010fce:	4908      	ldr	r1, [pc, #32]	@ (8010ff0 <eMBFuncReportSlaveID+0x34>)
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	f001 fa18 	bl	8012406 <memcpy>
 8010fd6:	4b05      	ldr	r3, [pc, #20]	@ (8010fec <eMBFuncReportSlaveID+0x30>)
 8010fd8:	881b      	ldrh	r3, [r3, #0]
 8010fda:	3301      	adds	r3, #1
 8010fdc:	b29a      	uxth	r2, r3
 8010fde:	683b      	ldr	r3, [r7, #0]
 8010fe0:	801a      	strh	r2, [r3, #0]
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	3708      	adds	r7, #8
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	bd80      	pop	{r7, pc}
 8010fec:	200085ac 	.word	0x200085ac
 8010ff0:	2000858c 	.word	0x2000858c

08010ff4 <prveMBError2Exception>:
 8010ff4:	b480      	push	{r7}
 8010ff6:	b085      	sub	sp, #20
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	71fb      	strb	r3, [r7, #7]
 8010ffe:	79fb      	ldrb	r3, [r7, #7]
 8011000:	2b07      	cmp	r3, #7
 8011002:	d00c      	beq.n	801101e <prveMBError2Exception+0x2a>
 8011004:	2b07      	cmp	r3, #7
 8011006:	dc0d      	bgt.n	8011024 <prveMBError2Exception+0x30>
 8011008:	2b00      	cmp	r3, #0
 801100a:	d002      	beq.n	8011012 <prveMBError2Exception+0x1e>
 801100c:	2b01      	cmp	r3, #1
 801100e:	d003      	beq.n	8011018 <prveMBError2Exception+0x24>
 8011010:	e008      	b.n	8011024 <prveMBError2Exception+0x30>
 8011012:	2300      	movs	r3, #0
 8011014:	73fb      	strb	r3, [r7, #15]
 8011016:	e008      	b.n	801102a <prveMBError2Exception+0x36>
 8011018:	2302      	movs	r3, #2
 801101a:	73fb      	strb	r3, [r7, #15]
 801101c:	e005      	b.n	801102a <prveMBError2Exception+0x36>
 801101e:	2306      	movs	r3, #6
 8011020:	73fb      	strb	r3, [r7, #15]
 8011022:	e002      	b.n	801102a <prveMBError2Exception+0x36>
 8011024:	2304      	movs	r3, #4
 8011026:	73fb      	strb	r3, [r7, #15]
 8011028:	bf00      	nop
 801102a:	7bfb      	ldrb	r3, [r7, #15]
 801102c:	4618      	mov	r0, r3
 801102e:	3714      	adds	r7, #20
 8011030:	46bd      	mov	sp, r7
 8011032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011036:	4770      	bx	lr

08011038 <eMBTCPInit>:
 8011038:	b580      	push	{r7, lr}
 801103a:	b084      	sub	sp, #16
 801103c:	af00      	add	r7, sp, #0
 801103e:	4603      	mov	r3, r0
 8011040:	80fb      	strh	r3, [r7, #6]
 8011042:	2300      	movs	r3, #0
 8011044:	73fb      	strb	r3, [r7, #15]
 8011046:	88fb      	ldrh	r3, [r7, #6]
 8011048:	4618      	mov	r0, r3
 801104a:	f000 fed5 	bl	8011df8 <eMBTCPDoInit>
 801104e:	4603      	mov	r3, r0
 8011050:	73fb      	strb	r3, [r7, #15]
 8011052:	7bfb      	ldrb	r3, [r7, #15]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d003      	beq.n	8011060 <eMBTCPInit+0x28>
 8011058:	4b14      	ldr	r3, [pc, #80]	@ (80110ac <eMBTCPInit+0x74>)
 801105a:	2201      	movs	r2, #1
 801105c:	701a      	strb	r2, [r3, #0]
 801105e:	e01f      	b.n	80110a0 <eMBTCPInit+0x68>
 8011060:	f000 fbe0 	bl	8011824 <xMBPortEventInit>
 8011064:	4603      	mov	r3, r0
 8011066:	2b00      	cmp	r3, #0
 8011068:	d102      	bne.n	8011070 <eMBTCPInit+0x38>
 801106a:	2303      	movs	r3, #3
 801106c:	73fb      	strb	r3, [r7, #15]
 801106e:	e017      	b.n	80110a0 <eMBTCPInit+0x68>
 8011070:	4b0f      	ldr	r3, [pc, #60]	@ (80110b0 <eMBTCPInit+0x78>)
 8011072:	4a10      	ldr	r2, [pc, #64]	@ (80110b4 <eMBTCPInit+0x7c>)
 8011074:	601a      	str	r2, [r3, #0]
 8011076:	4b10      	ldr	r3, [pc, #64]	@ (80110b8 <eMBTCPInit+0x80>)
 8011078:	4a10      	ldr	r2, [pc, #64]	@ (80110bc <eMBTCPInit+0x84>)
 801107a:	601a      	str	r2, [r3, #0]
 801107c:	4b10      	ldr	r3, [pc, #64]	@ (80110c0 <eMBTCPInit+0x88>)
 801107e:	4a11      	ldr	r2, [pc, #68]	@ (80110c4 <eMBTCPInit+0x8c>)
 8011080:	601a      	str	r2, [r3, #0]
 8011082:	4b11      	ldr	r3, [pc, #68]	@ (80110c8 <eMBTCPInit+0x90>)
 8011084:	4a11      	ldr	r2, [pc, #68]	@ (80110cc <eMBTCPInit+0x94>)
 8011086:	601a      	str	r2, [r3, #0]
 8011088:	4b11      	ldr	r3, [pc, #68]	@ (80110d0 <eMBTCPInit+0x98>)
 801108a:	2200      	movs	r2, #0
 801108c:	601a      	str	r2, [r3, #0]
 801108e:	4b11      	ldr	r3, [pc, #68]	@ (80110d4 <eMBTCPInit+0x9c>)
 8011090:	22ff      	movs	r2, #255	@ 0xff
 8011092:	701a      	strb	r2, [r3, #0]
 8011094:	4b10      	ldr	r3, [pc, #64]	@ (80110d8 <eMBTCPInit+0xa0>)
 8011096:	2202      	movs	r2, #2
 8011098:	701a      	strb	r2, [r3, #0]
 801109a:	4b04      	ldr	r3, [pc, #16]	@ (80110ac <eMBTCPInit+0x74>)
 801109c:	2201      	movs	r2, #1
 801109e:	701a      	strb	r2, [r3, #0]
 80110a0:	7bfb      	ldrb	r3, [r7, #15]
 80110a2:	4618      	mov	r0, r3
 80110a4:	3710      	adds	r7, #16
 80110a6:	46bd      	mov	sp, r7
 80110a8:	bd80      	pop	{r7, pc}
 80110aa:	bf00      	nop
 80110ac:	2000002a 	.word	0x2000002a
 80110b0:	200085b4 	.word	0x200085b4
 80110b4:	08011e23 	.word	0x08011e23
 80110b8:	200085b8 	.word	0x200085b8
 80110bc:	08011e31 	.word	0x08011e31
 80110c0:	200085bc 	.word	0x200085bc
 80110c4:	08011e3d 	.word	0x08011e3d
 80110c8:	200085b0 	.word	0x200085b0
 80110cc:	08011ead 	.word	0x08011ead
 80110d0:	200085c0 	.word	0x200085c0
 80110d4:	200085ae 	.word	0x200085ae
 80110d8:	200085af 	.word	0x200085af

080110dc <eMBEnable>:
 80110dc:	b580      	push	{r7, lr}
 80110de:	b082      	sub	sp, #8
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	2300      	movs	r3, #0
 80110e4:	71fb      	strb	r3, [r7, #7]
 80110e6:	4b09      	ldr	r3, [pc, #36]	@ (801110c <eMBEnable+0x30>)
 80110e8:	781b      	ldrb	r3, [r3, #0]
 80110ea:	2b01      	cmp	r3, #1
 80110ec:	d106      	bne.n	80110fc <eMBEnable+0x20>
 80110ee:	4b08      	ldr	r3, [pc, #32]	@ (8011110 <eMBEnable+0x34>)
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	4798      	blx	r3
 80110f4:	4b05      	ldr	r3, [pc, #20]	@ (801110c <eMBEnable+0x30>)
 80110f6:	2200      	movs	r2, #0
 80110f8:	701a      	strb	r2, [r3, #0]
 80110fa:	e001      	b.n	8011100 <eMBEnable+0x24>
 80110fc:	2306      	movs	r3, #6
 80110fe:	71fb      	strb	r3, [r7, #7]
 8011100:	79fb      	ldrb	r3, [r7, #7]
 8011102:	4618      	mov	r0, r3
 8011104:	3708      	adds	r7, #8
 8011106:	46bd      	mov	sp, r7
 8011108:	bd80      	pop	{r7, pc}
 801110a:	bf00      	nop
 801110c:	2000002a 	.word	0x2000002a
 8011110:	200085b4 	.word	0x200085b4

08011114 <eMBPoll>:
 8011114:	b590      	push	{r4, r7, lr}
 8011116:	b083      	sub	sp, #12
 8011118:	af00      	add	r7, sp, #0
 801111a:	2300      	movs	r3, #0
 801111c:	70fb      	strb	r3, [r7, #3]
 801111e:	4b50      	ldr	r3, [pc, #320]	@ (8011260 <eMBPoll+0x14c>)
 8011120:	781b      	ldrb	r3, [r3, #0]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d001      	beq.n	801112a <eMBPoll+0x16>
 8011126:	2306      	movs	r3, #6
 8011128:	e095      	b.n	8011256 <eMBPoll+0x142>
 801112a:	1cbb      	adds	r3, r7, #2
 801112c:	4618      	mov	r0, r3
 801112e:	f000 fbc1 	bl	80118b4 <xMBPortEventGet>
 8011132:	4603      	mov	r3, r0
 8011134:	2b01      	cmp	r3, #1
 8011136:	f040 808d 	bne.w	8011254 <eMBPoll+0x140>
 801113a:	78bb      	ldrb	r3, [r7, #2]
 801113c:	2b03      	cmp	r3, #3
 801113e:	f200 8089 	bhi.w	8011254 <eMBPoll+0x140>
 8011142:	a201      	add	r2, pc, #4	@ (adr r2, 8011148 <eMBPoll+0x34>)
 8011144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011148:	08011255 	.word	0x08011255
 801114c:	08011159 	.word	0x08011159
 8011150:	0801118b 	.word	0x0801118b
 8011154:	08011255 	.word	0x08011255
 8011158:	4b42      	ldr	r3, [pc, #264]	@ (8011264 <eMBPoll+0x150>)
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	4a42      	ldr	r2, [pc, #264]	@ (8011268 <eMBPoll+0x154>)
 801115e:	4943      	ldr	r1, [pc, #268]	@ (801126c <eMBPoll+0x158>)
 8011160:	4843      	ldr	r0, [pc, #268]	@ (8011270 <eMBPoll+0x15c>)
 8011162:	4798      	blx	r3
 8011164:	4603      	mov	r3, r0
 8011166:	70fb      	strb	r3, [r7, #3]
 8011168:	78fb      	ldrb	r3, [r7, #3]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d16f      	bne.n	801124e <eMBPoll+0x13a>
 801116e:	4b40      	ldr	r3, [pc, #256]	@ (8011270 <eMBPoll+0x15c>)
 8011170:	781a      	ldrb	r2, [r3, #0]
 8011172:	4b40      	ldr	r3, [pc, #256]	@ (8011274 <eMBPoll+0x160>)
 8011174:	781b      	ldrb	r3, [r3, #0]
 8011176:	429a      	cmp	r2, r3
 8011178:	d003      	beq.n	8011182 <eMBPoll+0x6e>
 801117a:	4b3d      	ldr	r3, [pc, #244]	@ (8011270 <eMBPoll+0x15c>)
 801117c:	781b      	ldrb	r3, [r3, #0]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d165      	bne.n	801124e <eMBPoll+0x13a>
 8011182:	2002      	movs	r0, #2
 8011184:	f000 fb64 	bl	8011850 <xMBPortEventPost>
 8011188:	e061      	b.n	801124e <eMBPoll+0x13a>
 801118a:	4b38      	ldr	r3, [pc, #224]	@ (801126c <eMBPoll+0x158>)
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	781a      	ldrb	r2, [r3, #0]
 8011190:	4b39      	ldr	r3, [pc, #228]	@ (8011278 <eMBPoll+0x164>)
 8011192:	701a      	strb	r2, [r3, #0]
 8011194:	4b39      	ldr	r3, [pc, #228]	@ (801127c <eMBPoll+0x168>)
 8011196:	2201      	movs	r2, #1
 8011198:	701a      	strb	r2, [r3, #0]
 801119a:	2300      	movs	r3, #0
 801119c:	607b      	str	r3, [r7, #4]
 801119e:	e01f      	b.n	80111e0 <eMBPoll+0xcc>
 80111a0:	4a37      	ldr	r2, [pc, #220]	@ (8011280 <eMBPoll+0x16c>)
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d01d      	beq.n	80111e8 <eMBPoll+0xd4>
 80111ac:	4a34      	ldr	r2, [pc, #208]	@ (8011280 <eMBPoll+0x16c>)
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80111b4:	4b30      	ldr	r3, [pc, #192]	@ (8011278 <eMBPoll+0x164>)
 80111b6:	781b      	ldrb	r3, [r3, #0]
 80111b8:	429a      	cmp	r2, r3
 80111ba:	d10e      	bne.n	80111da <eMBPoll+0xc6>
 80111bc:	4a30      	ldr	r2, [pc, #192]	@ (8011280 <eMBPoll+0x16c>)
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	00db      	lsls	r3, r3, #3
 80111c2:	4413      	add	r3, r2
 80111c4:	685b      	ldr	r3, [r3, #4]
 80111c6:	4a29      	ldr	r2, [pc, #164]	@ (801126c <eMBPoll+0x158>)
 80111c8:	6812      	ldr	r2, [r2, #0]
 80111ca:	4927      	ldr	r1, [pc, #156]	@ (8011268 <eMBPoll+0x154>)
 80111cc:	4610      	mov	r0, r2
 80111ce:	4798      	blx	r3
 80111d0:	4603      	mov	r3, r0
 80111d2:	461a      	mov	r2, r3
 80111d4:	4b29      	ldr	r3, [pc, #164]	@ (801127c <eMBPoll+0x168>)
 80111d6:	701a      	strb	r2, [r3, #0]
 80111d8:	e007      	b.n	80111ea <eMBPoll+0xd6>
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	3301      	adds	r3, #1
 80111de:	607b      	str	r3, [r7, #4]
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	2b0f      	cmp	r3, #15
 80111e4:	dddc      	ble.n	80111a0 <eMBPoll+0x8c>
 80111e6:	e000      	b.n	80111ea <eMBPoll+0xd6>
 80111e8:	bf00      	nop
 80111ea:	4b21      	ldr	r3, [pc, #132]	@ (8011270 <eMBPoll+0x15c>)
 80111ec:	781b      	ldrb	r3, [r3, #0]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d02f      	beq.n	8011252 <eMBPoll+0x13e>
 80111f2:	4b22      	ldr	r3, [pc, #136]	@ (801127c <eMBPoll+0x168>)
 80111f4:	781b      	ldrb	r3, [r3, #0]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d01d      	beq.n	8011236 <eMBPoll+0x122>
 80111fa:	4b1b      	ldr	r3, [pc, #108]	@ (8011268 <eMBPoll+0x154>)
 80111fc:	2200      	movs	r2, #0
 80111fe:	801a      	strh	r2, [r3, #0]
 8011200:	4b1d      	ldr	r3, [pc, #116]	@ (8011278 <eMBPoll+0x164>)
 8011202:	781a      	ldrb	r2, [r3, #0]
 8011204:	4b19      	ldr	r3, [pc, #100]	@ (801126c <eMBPoll+0x158>)
 8011206:	6819      	ldr	r1, [r3, #0]
 8011208:	4b17      	ldr	r3, [pc, #92]	@ (8011268 <eMBPoll+0x154>)
 801120a:	881b      	ldrh	r3, [r3, #0]
 801120c:	1c58      	adds	r0, r3, #1
 801120e:	b284      	uxth	r4, r0
 8011210:	4815      	ldr	r0, [pc, #84]	@ (8011268 <eMBPoll+0x154>)
 8011212:	8004      	strh	r4, [r0, #0]
 8011214:	440b      	add	r3, r1
 8011216:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 801121a:	b2d2      	uxtb	r2, r2
 801121c:	701a      	strb	r2, [r3, #0]
 801121e:	4b13      	ldr	r3, [pc, #76]	@ (801126c <eMBPoll+0x158>)
 8011220:	681a      	ldr	r2, [r3, #0]
 8011222:	4b11      	ldr	r3, [pc, #68]	@ (8011268 <eMBPoll+0x154>)
 8011224:	881b      	ldrh	r3, [r3, #0]
 8011226:	1c59      	adds	r1, r3, #1
 8011228:	b288      	uxth	r0, r1
 801122a:	490f      	ldr	r1, [pc, #60]	@ (8011268 <eMBPoll+0x154>)
 801122c:	8008      	strh	r0, [r1, #0]
 801122e:	4413      	add	r3, r2
 8011230:	4a12      	ldr	r2, [pc, #72]	@ (801127c <eMBPoll+0x168>)
 8011232:	7812      	ldrb	r2, [r2, #0]
 8011234:	701a      	strb	r2, [r3, #0]
 8011236:	4b13      	ldr	r3, [pc, #76]	@ (8011284 <eMBPoll+0x170>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	4a0e      	ldr	r2, [pc, #56]	@ (8011274 <eMBPoll+0x160>)
 801123c:	7810      	ldrb	r0, [r2, #0]
 801123e:	4a0b      	ldr	r2, [pc, #44]	@ (801126c <eMBPoll+0x158>)
 8011240:	6811      	ldr	r1, [r2, #0]
 8011242:	4a09      	ldr	r2, [pc, #36]	@ (8011268 <eMBPoll+0x154>)
 8011244:	8812      	ldrh	r2, [r2, #0]
 8011246:	4798      	blx	r3
 8011248:	4603      	mov	r3, r0
 801124a:	70fb      	strb	r3, [r7, #3]
 801124c:	e001      	b.n	8011252 <eMBPoll+0x13e>
 801124e:	bf00      	nop
 8011250:	e000      	b.n	8011254 <eMBPoll+0x140>
 8011252:	bf00      	nop
 8011254:	78fb      	ldrb	r3, [r7, #3]
 8011256:	4618      	mov	r0, r3
 8011258:	370c      	adds	r7, #12
 801125a:	46bd      	mov	sp, r7
 801125c:	bd90      	pop	{r4, r7, pc}
 801125e:	bf00      	nop
 8011260:	2000002a 	.word	0x2000002a
 8011264:	200085bc 	.word	0x200085bc
 8011268:	200085cc 	.word	0x200085cc
 801126c:	200085c8 	.word	0x200085c8
 8011270:	200085c4 	.word	0x200085c4
 8011274:	200085ae 	.word	0x200085ae
 8011278:	200085ce 	.word	0x200085ce
 801127c:	200085cf 	.word	0x200085cf
 8011280:	2000002c 	.word	0x2000002c
 8011284:	200085b0 	.word	0x200085b0

08011288 <Modbus_UpdateCounter>:
static UCHAR  ucCoils[REG_COIL_NCOILS];
static USHORT usInputRegs[REG_INPUT_NREGS];
static UCHAR  ucDiscreteInputs[REG_DISC_NDISCRETES];

/* ---- Helpers ---- */
static void Modbus_UpdateCounter(void) {
 8011288:	b480      	push	{r7}
 801128a:	af00      	add	r7, sp, #0
    usHoldingRegs[0]++;
 801128c:	4b05      	ldr	r3, [pc, #20]	@ (80112a4 <Modbus_UpdateCounter+0x1c>)
 801128e:	881b      	ldrh	r3, [r3, #0]
 8011290:	3301      	adds	r3, #1
 8011292:	b29a      	uxth	r2, r3
 8011294:	4b03      	ldr	r3, [pc, #12]	@ (80112a4 <Modbus_UpdateCounter+0x1c>)
 8011296:	801a      	strh	r2, [r3, #0]
}
 8011298:	bf00      	nop
 801129a:	46bd      	mov	sp, r7
 801129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a0:	4770      	bx	lr
 80112a2:	bf00      	nop
 80112a4:	200085d0 	.word	0x200085d0

080112a8 <apply_led_from_coil>:

static void apply_led_from_coil(USHORT coilIndex, UCHAR val) {
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b084      	sub	sp, #16
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	4603      	mov	r3, r0
 80112b0:	460a      	mov	r2, r1
 80112b2:	80fb      	strh	r3, [r7, #6]
 80112b4:	4613      	mov	r3, r2
 80112b6:	717b      	strb	r3, [r7, #5]
    if (coilIndex < 4) {
 80112b8:	88fb      	ldrh	r3, [r7, #6]
 80112ba:	2b03      	cmp	r3, #3
 80112bc:	d834      	bhi.n	8011328 <apply_led_from_coil+0x80>
        /* Local bridge LEDs */
        GPIO_PinState state = (val ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80112be:	797b      	ldrb	r3, [r7, #5]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	bf14      	ite	ne
 80112c4:	2301      	movne	r3, #1
 80112c6:	2300      	moveq	r3, #0
 80112c8:	b2db      	uxtb	r3, r3
 80112ca:	73fb      	strb	r3, [r7, #15]
        switch (coilIndex) {
 80112cc:	88fb      	ldrh	r3, [r7, #6]
 80112ce:	2b03      	cmp	r3, #3
 80112d0:	d837      	bhi.n	8011342 <apply_led_from_coil+0x9a>
 80112d2:	a201      	add	r2, pc, #4	@ (adr r2, 80112d8 <apply_led_from_coil+0x30>)
 80112d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112d8:	080112e9 	.word	0x080112e9
 80112dc:	080112f9 	.word	0x080112f9
 80112e0:	08011309 	.word	0x08011309
 80112e4:	08011319 	.word	0x08011319
            case 0: HAL_GPIO_WritePin(LED_PORT, LED_GREEN_PIN, state); break;
 80112e8:	7bfb      	ldrb	r3, [r7, #15]
 80112ea:	461a      	mov	r2, r3
 80112ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80112f0:	4816      	ldr	r0, [pc, #88]	@ (801134c <apply_led_from_coil+0xa4>)
 80112f2:	f7f2 fb57 	bl	80039a4 <HAL_GPIO_WritePin>
 80112f6:	e024      	b.n	8011342 <apply_led_from_coil+0x9a>
            case 1: HAL_GPIO_WritePin(LED_PORT, LED_ORANGE_PIN, state); break;
 80112f8:	7bfb      	ldrb	r3, [r7, #15]
 80112fa:	461a      	mov	r2, r3
 80112fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8011300:	4812      	ldr	r0, [pc, #72]	@ (801134c <apply_led_from_coil+0xa4>)
 8011302:	f7f2 fb4f 	bl	80039a4 <HAL_GPIO_WritePin>
 8011306:	e01c      	b.n	8011342 <apply_led_from_coil+0x9a>
            case 2: HAL_GPIO_WritePin(LED_PORT, LED_RED_PIN, state); break;
 8011308:	7bfb      	ldrb	r3, [r7, #15]
 801130a:	461a      	mov	r2, r3
 801130c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8011310:	480e      	ldr	r0, [pc, #56]	@ (801134c <apply_led_from_coil+0xa4>)
 8011312:	f7f2 fb47 	bl	80039a4 <HAL_GPIO_WritePin>
 8011316:	e014      	b.n	8011342 <apply_led_from_coil+0x9a>
            case 3: HAL_GPIO_WritePin(LED_PORT, LED_BLUE_PIN, state); break;
 8011318:	7bfb      	ldrb	r3, [r7, #15]
 801131a:	461a      	mov	r2, r3
 801131c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011320:	480a      	ldr	r0, [pc, #40]	@ (801134c <apply_led_from_coil+0xa4>)
 8011322:	f7f2 fb3f 	bl	80039a4 <HAL_GPIO_WritePin>
 8011326:	e00c      	b.n	8011342 <apply_led_from_coil+0x9a>
        }
    }
    else if (coilIndex >= 4 && coilIndex < 8) {
 8011328:	88fb      	ldrh	r3, [r7, #6]
 801132a:	2b03      	cmp	r3, #3
 801132c:	d909      	bls.n	8011342 <apply_led_from_coil+0x9a>
 801132e:	88fb      	ldrh	r3, [r7, #6]
 8011330:	2b07      	cmp	r3, #7
 8011332:	d806      	bhi.n	8011342 <apply_led_from_coil+0x9a>
        /* Forward SPI LED control */
        SPI_HandleModbusCoilWrite(coilIndex, val);
 8011334:	797a      	ldrb	r2, [r7, #5]
 8011336:	88fb      	ldrh	r3, [r7, #6]
 8011338:	4611      	mov	r1, r2
 801133a:	4618      	mov	r0, r3
 801133c:	f7ef fd62 	bl	8000e04 <SPI_HandleModbusCoilWrite>
    }
}
 8011340:	e7ff      	b.n	8011342 <apply_led_from_coil+0x9a>
 8011342:	bf00      	nop
 8011344:	3710      	adds	r7, #16
 8011346:	46bd      	mov	sp, r7
 8011348:	bd80      	pop	{r7, pc}
 801134a:	bf00      	nop
 801134c:	40020c00 	.word	0x40020c00

08011350 <Modbus_InitCallbacks>:

void Modbus_InitCallbacks(void) {
 8011350:	b580      	push	{r7, lr}
 8011352:	b082      	sub	sp, #8
 8011354:	af00      	add	r7, sp, #0
    memset(usHoldingRegs, 0, sizeof(usHoldingRegs));
 8011356:	2204      	movs	r2, #4
 8011358:	2100      	movs	r1, #0
 801135a:	481a      	ldr	r0, [pc, #104]	@ (80113c4 <Modbus_InitCallbacks+0x74>)
 801135c:	f000 ffb9 	bl	80122d2 <memset>
    memset(ucCoils, 0, sizeof(ucCoils));
 8011360:	2208      	movs	r2, #8
 8011362:	2100      	movs	r1, #0
 8011364:	4818      	ldr	r0, [pc, #96]	@ (80113c8 <Modbus_InitCallbacks+0x78>)
 8011366:	f000 ffb4 	bl	80122d2 <memset>
    memset(usInputRegs, 0, sizeof(usInputRegs));
 801136a:	2204      	movs	r2, #4
 801136c:	2100      	movs	r1, #0
 801136e:	4817      	ldr	r0, [pc, #92]	@ (80113cc <Modbus_InitCallbacks+0x7c>)
 8011370:	f000 ffaf 	bl	80122d2 <memset>
    memset(ucDiscreteInputs, 0, sizeof(ucDiscreteInputs));
 8011374:	2204      	movs	r2, #4
 8011376:	2100      	movs	r1, #0
 8011378:	4815      	ldr	r0, [pc, #84]	@ (80113d0 <Modbus_InitCallbacks+0x80>)
 801137a:	f000 ffaa 	bl	80122d2 <memset>

    /* Init local LEDs OFF */
    for (USHORT i = 0; i < 4; i++) {
 801137e:	2300      	movs	r3, #0
 8011380:	80fb      	strh	r3, [r7, #6]
 8011382:	e007      	b.n	8011394 <Modbus_InitCallbacks+0x44>
        apply_led_from_coil(i, 0);
 8011384:	88fb      	ldrh	r3, [r7, #6]
 8011386:	2100      	movs	r1, #0
 8011388:	4618      	mov	r0, r3
 801138a:	f7ff ff8d 	bl	80112a8 <apply_led_from_coil>
    for (USHORT i = 0; i < 4; i++) {
 801138e:	88fb      	ldrh	r3, [r7, #6]
 8011390:	3301      	adds	r3, #1
 8011392:	80fb      	strh	r3, [r7, #6]
 8011394:	88fb      	ldrh	r3, [r7, #6]
 8011396:	2b03      	cmp	r3, #3
 8011398:	d9f4      	bls.n	8011384 <Modbus_InitCallbacks+0x34>
    }

    /* Init SPI */
    SPI_Protocol_Init();
 801139a:	f7ef fc71 	bl	8000c80 <SPI_Protocol_Init>

    /* Init SPI LEDs OFF */
    for (USHORT i = 4; i < 8; i++) {
 801139e:	2304      	movs	r3, #4
 80113a0:	80bb      	strh	r3, [r7, #4]
 80113a2:	e007      	b.n	80113b4 <Modbus_InitCallbacks+0x64>
        apply_led_from_coil(i, 0);
 80113a4:	88bb      	ldrh	r3, [r7, #4]
 80113a6:	2100      	movs	r1, #0
 80113a8:	4618      	mov	r0, r3
 80113aa:	f7ff ff7d 	bl	80112a8 <apply_led_from_coil>
    for (USHORT i = 4; i < 8; i++) {
 80113ae:	88bb      	ldrh	r3, [r7, #4]
 80113b0:	3301      	adds	r3, #1
 80113b2:	80bb      	strh	r3, [r7, #4]
 80113b4:	88bb      	ldrh	r3, [r7, #4]
 80113b6:	2b07      	cmp	r3, #7
 80113b8:	d9f4      	bls.n	80113a4 <Modbus_InitCallbacks+0x54>
    }
}
 80113ba:	bf00      	nop
 80113bc:	bf00      	nop
 80113be:	3708      	adds	r7, #8
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bd80      	pop	{r7, pc}
 80113c4:	200085d0 	.word	0x200085d0
 80113c8:	200085d4 	.word	0x200085d4
 80113cc:	200085dc 	.word	0x200085dc
 80113d0:	200085e0 	.word	0x200085e0

080113d4 <eMBRegHoldingCB>:

/* ----------------------------------------------------------------
 * Holding registers callback
 * ----------------------------------------------------------------*/
eMBErrorCode eMBRegHoldingCB(UCHAR *pucBuffer, USHORT usAddress,
                             USHORT usNRegs, eMBRegisterMode eMode) {
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b08a      	sub	sp, #40	@ 0x28
 80113d8:	af00      	add	r7, sp, #0
 80113da:	60f8      	str	r0, [r7, #12]
 80113dc:	4608      	mov	r0, r1
 80113de:	4611      	mov	r1, r2
 80113e0:	461a      	mov	r2, r3
 80113e2:	4603      	mov	r3, r0
 80113e4:	817b      	strh	r3, [r7, #10]
 80113e6:	460b      	mov	r3, r1
 80113e8:	813b      	strh	r3, [r7, #8]
 80113ea:	4613      	mov	r3, r2
 80113ec:	71fb      	strb	r3, [r7, #7]
    if ((usAddress < REG_HOLDING_START) ||
 80113ee:	897b      	ldrh	r3, [r7, #10]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d004      	beq.n	80113fe <eMBRegHoldingCB+0x2a>
        (usAddress + usNRegs - 1) > (REG_HOLDING_START + REG_HOLDING_NREGS - 1)) {
 80113f4:	897a      	ldrh	r2, [r7, #10]
 80113f6:	893b      	ldrh	r3, [r7, #8]
 80113f8:	4413      	add	r3, r2
    if ((usAddress < REG_HOLDING_START) ||
 80113fa:	2b03      	cmp	r3, #3
 80113fc:	dd01      	ble.n	8011402 <eMBRegHoldingCB+0x2e>
        return MB_ENOREG;
 80113fe:	2301      	movs	r3, #1
 8011400:	e084      	b.n	801150c <eMBRegHoldingCB+0x138>
    }

    USHORT iRegIndex = (USHORT)(usAddress - REG_HOLDING_START);
 8011402:	897b      	ldrh	r3, [r7, #10]
 8011404:	3b01      	subs	r3, #1
 8011406:	83fb      	strh	r3, [r7, #30]

    if (eMode == MB_REG_READ) {
 8011408:	79fb      	ldrb	r3, [r7, #7]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d126      	bne.n	801145c <eMBRegHoldingCB+0x88>
        for (USHORT i = 0; i < usNRegs; i++) {
 801140e:	2300      	movs	r3, #0
 8011410:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011412:	e01e      	b.n	8011452 <eMBRegHoldingCB+0x7e>
            USHORT val = usHoldingRegs[iRegIndex + i];
 8011414:	8bfa      	ldrh	r2, [r7, #30]
 8011416:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011418:	4413      	add	r3, r2
 801141a:	4a3e      	ldr	r2, [pc, #248]	@ (8011514 <eMBRegHoldingCB+0x140>)
 801141c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011420:	82fb      	strh	r3, [r7, #22]

            if ((iRegIndex + i) == 0) {
 8011422:	8bfa      	ldrh	r2, [r7, #30]
 8011424:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011426:	4413      	add	r3, r2
 8011428:	2b00      	cmp	r3, #0
 801142a:	d101      	bne.n	8011430 <eMBRegHoldingCB+0x5c>
                Modbus_UpdateCounter(); // auto increment counter
 801142c:	f7ff ff2c 	bl	8011288 <Modbus_UpdateCounter>
            }

            *pucBuffer++ = (UCHAR)(val >> 8);
 8011430:	8afb      	ldrh	r3, [r7, #22]
 8011432:	0a1b      	lsrs	r3, r3, #8
 8011434:	b299      	uxth	r1, r3
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	1c5a      	adds	r2, r3, #1
 801143a:	60fa      	str	r2, [r7, #12]
 801143c:	b2ca      	uxtb	r2, r1
 801143e:	701a      	strb	r2, [r3, #0]
            *pucBuffer++ = (UCHAR)(val & 0xFF);
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	1c5a      	adds	r2, r3, #1
 8011444:	60fa      	str	r2, [r7, #12]
 8011446:	8afa      	ldrh	r2, [r7, #22]
 8011448:	b2d2      	uxtb	r2, r2
 801144a:	701a      	strb	r2, [r3, #0]
        for (USHORT i = 0; i < usNRegs; i++) {
 801144c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801144e:	3301      	adds	r3, #1
 8011450:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011452:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8011454:	893b      	ldrh	r3, [r7, #8]
 8011456:	429a      	cmp	r2, r3
 8011458:	d3dc      	bcc.n	8011414 <eMBRegHoldingCB+0x40>
 801145a:	e056      	b.n	801150a <eMBRegHoldingCB+0x136>
        }
    }
    else if (eMode == MB_REG_WRITE) {
 801145c:	79fb      	ldrb	r3, [r7, #7]
 801145e:	2b01      	cmp	r3, #1
 8011460:	d151      	bne.n	8011506 <eMBRegHoldingCB+0x132>
        for (USHORT i = 0; i < usNRegs; i++) {
 8011462:	2300      	movs	r3, #0
 8011464:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8011466:	e049      	b.n	80114fc <eMBRegHoldingCB+0x128>
            USHORT hi = (USHORT)(*pucBuffer++);
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	1c5a      	adds	r2, r3, #1
 801146c:	60fa      	str	r2, [r7, #12]
 801146e:	781b      	ldrb	r3, [r3, #0]
 8011470:	83bb      	strh	r3, [r7, #28]
            USHORT lo = (USHORT)(*pucBuffer++);
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	1c5a      	adds	r2, r3, #1
 8011476:	60fa      	str	r2, [r7, #12]
 8011478:	781b      	ldrb	r3, [r3, #0]
 801147a:	837b      	strh	r3, [r7, #26]
            USHORT val = (USHORT)((hi << 8) | lo);
 801147c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8011480:	021b      	lsls	r3, r3, #8
 8011482:	b21a      	sxth	r2, r3
 8011484:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8011488:	4313      	orrs	r3, r2
 801148a:	b21b      	sxth	r3, r3
 801148c:	833b      	strh	r3, [r7, #24]

            usHoldingRegs[iRegIndex + i] = val;
 801148e:	8bfa      	ldrh	r2, [r7, #30]
 8011490:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011492:	4413      	add	r3, r2
 8011494:	491f      	ldr	r1, [pc, #124]	@ (8011514 <eMBRegHoldingCB+0x140>)
 8011496:	8b3a      	ldrh	r2, [r7, #24]
 8011498:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

            /* Special commands in register 1 */
            if ((iRegIndex + i) == 1) {
 801149c:	8bfa      	ldrh	r2, [r7, #30]
 801149e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80114a0:	4413      	add	r3, r2
 80114a2:	2b01      	cmp	r3, #1
 80114a4:	d127      	bne.n	80114f6 <eMBRegHoldingCB+0x122>
                if (val == CMD_SPI_ALL_OFF) {
 80114a6:	8b3b      	ldrh	r3, [r7, #24]
 80114a8:	f5b3 4f2a 	cmp.w	r3, #43520	@ 0xaa00
 80114ac:	d10f      	bne.n	80114ce <eMBRegHoldingCB+0xfa>
                    SPI_TurnOffAllLEDs();
 80114ae:	f7ef fce3 	bl	8000e78 <SPI_TurnOffAllLEDs>
                    for (USHORT j = 4; j < 8; j++) ucCoils[j] = 0;
 80114b2:	2304      	movs	r3, #4
 80114b4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80114b6:	e006      	b.n	80114c6 <eMBRegHoldingCB+0xf2>
 80114b8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80114ba:	4a17      	ldr	r2, [pc, #92]	@ (8011518 <eMBRegHoldingCB+0x144>)
 80114bc:	2100      	movs	r1, #0
 80114be:	54d1      	strb	r1, [r2, r3]
 80114c0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80114c2:	3301      	adds	r3, #1
 80114c4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80114c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80114c8:	2b07      	cmp	r3, #7
 80114ca:	d9f5      	bls.n	80114b8 <eMBRegHoldingCB+0xe4>
 80114cc:	e013      	b.n	80114f6 <eMBRegHoldingCB+0x122>
                }
                else if (val == CMD_SPI_ALL_ON) {
 80114ce:	8b3b      	ldrh	r3, [r7, #24]
 80114d0:	f64a 2201 	movw	r2, #43521	@ 0xaa01
 80114d4:	4293      	cmp	r3, r2
 80114d6:	d10e      	bne.n	80114f6 <eMBRegHoldingCB+0x122>
                    SPI_TurnOnAllLEDs();
 80114d8:	f7ef fcd6 	bl	8000e88 <SPI_TurnOnAllLEDs>
                    for (USHORT j = 4; j < 8; j++) ucCoils[j] = 1;
 80114dc:	2304      	movs	r3, #4
 80114de:	843b      	strh	r3, [r7, #32]
 80114e0:	e006      	b.n	80114f0 <eMBRegHoldingCB+0x11c>
 80114e2:	8c3b      	ldrh	r3, [r7, #32]
 80114e4:	4a0c      	ldr	r2, [pc, #48]	@ (8011518 <eMBRegHoldingCB+0x144>)
 80114e6:	2101      	movs	r1, #1
 80114e8:	54d1      	strb	r1, [r2, r3]
 80114ea:	8c3b      	ldrh	r3, [r7, #32]
 80114ec:	3301      	adds	r3, #1
 80114ee:	843b      	strh	r3, [r7, #32]
 80114f0:	8c3b      	ldrh	r3, [r7, #32]
 80114f2:	2b07      	cmp	r3, #7
 80114f4:	d9f5      	bls.n	80114e2 <eMBRegHoldingCB+0x10e>
        for (USHORT i = 0; i < usNRegs; i++) {
 80114f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80114f8:	3301      	adds	r3, #1
 80114fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80114fc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80114fe:	893b      	ldrh	r3, [r7, #8]
 8011500:	429a      	cmp	r2, r3
 8011502:	d3b1      	bcc.n	8011468 <eMBRegHoldingCB+0x94>
 8011504:	e001      	b.n	801150a <eMBRegHoldingCB+0x136>
                }
            }
        }
    }
    else {
        return MB_ENOREG;
 8011506:	2301      	movs	r3, #1
 8011508:	e000      	b.n	801150c <eMBRegHoldingCB+0x138>
    }

    return MB_ENOERR;
 801150a:	2300      	movs	r3, #0
}
 801150c:	4618      	mov	r0, r3
 801150e:	3728      	adds	r7, #40	@ 0x28
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}
 8011514:	200085d0 	.word	0x200085d0
 8011518:	200085d4 	.word	0x200085d4

0801151c <eMBRegCoilsCB>:

/* ----------------------------------------------------------------
 * Coils callback (8 coils: 0-3 local, 4-7 SPI)
 * ----------------------------------------------------------------*/
eMBErrorCode eMBRegCoilsCB(UCHAR *pucBuffer, USHORT usAddress,
                           USHORT usNCoils, eMBRegisterMode eMode) {
 801151c:	b580      	push	{r7, lr}
 801151e:	b08c      	sub	sp, #48	@ 0x30
 8011520:	af00      	add	r7, sp, #0
 8011522:	60f8      	str	r0, [r7, #12]
 8011524:	4608      	mov	r0, r1
 8011526:	4611      	mov	r1, r2
 8011528:	461a      	mov	r2, r3
 801152a:	4603      	mov	r3, r0
 801152c:	817b      	strh	r3, [r7, #10]
 801152e:	460b      	mov	r3, r1
 8011530:	813b      	strh	r3, [r7, #8]
 8011532:	4613      	mov	r3, r2
 8011534:	71fb      	strb	r3, [r7, #7]
    if ((usAddress < REG_COIL_START) ||
 8011536:	897b      	ldrh	r3, [r7, #10]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d004      	beq.n	8011546 <eMBRegCoilsCB+0x2a>
        (usAddress + usNCoils - 1) > (REG_COIL_START + REG_COIL_NCOILS - 1)) {
 801153c:	897a      	ldrh	r2, [r7, #10]
 801153e:	893b      	ldrh	r3, [r7, #8]
 8011540:	4413      	add	r3, r2
    if ((usAddress < REG_COIL_START) ||
 8011542:	2b09      	cmp	r3, #9
 8011544:	dd01      	ble.n	801154a <eMBRegCoilsCB+0x2e>
        return MB_ENOREG;
 8011546:	2301      	movs	r3, #1
 8011548:	e0b8      	b.n	80116bc <eMBRegCoilsCB+0x1a0>
    }

    USHORT iCoilIndex = (USHORT)(usAddress - REG_COIL_START);
 801154a:	897b      	ldrh	r3, [r7, #10]
 801154c:	3b01      	subs	r3, #1
 801154e:	83fb      	strh	r3, [r7, #30]

    if (eMode == MB_REG_READ) {
 8011550:	79fb      	ldrb	r3, [r7, #7]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d166      	bne.n	8011624 <eMBRegCoilsCB+0x108>
        /* Refresh SPI coil states */
        if (iCoilIndex < 8 && (iCoilIndex + usNCoils) > 4) {
 8011556:	8bfb      	ldrh	r3, [r7, #30]
 8011558:	2b07      	cmp	r3, #7
 801155a:	d81d      	bhi.n	8011598 <eMBRegCoilsCB+0x7c>
 801155c:	8bfa      	ldrh	r2, [r7, #30]
 801155e:	893b      	ldrh	r3, [r7, #8]
 8011560:	4413      	add	r3, r2
 8011562:	2b04      	cmp	r3, #4
 8011564:	dd18      	ble.n	8011598 <eMBRegCoilsCB+0x7c>
            uint8_t g, o, r, b;
            if (SPI_GetLEDStatus(&g, &o, &r, &b) == SPI_RESULT_OK) {
 8011566:	f107 0311 	add.w	r3, r7, #17
 801156a:	f107 0212 	add.w	r2, r7, #18
 801156e:	f107 0113 	add.w	r1, r7, #19
 8011572:	f107 0014 	add.w	r0, r7, #20
 8011576:	f7ef fbef 	bl	8000d58 <SPI_GetLEDStatus>
 801157a:	4603      	mov	r3, r0
 801157c:	2b00      	cmp	r3, #0
 801157e:	d10b      	bne.n	8011598 <eMBRegCoilsCB+0x7c>
                ucCoils[4] = g;
 8011580:	7d3a      	ldrb	r2, [r7, #20]
 8011582:	4b50      	ldr	r3, [pc, #320]	@ (80116c4 <eMBRegCoilsCB+0x1a8>)
 8011584:	711a      	strb	r2, [r3, #4]
                ucCoils[5] = o;
 8011586:	7cfa      	ldrb	r2, [r7, #19]
 8011588:	4b4e      	ldr	r3, [pc, #312]	@ (80116c4 <eMBRegCoilsCB+0x1a8>)
 801158a:	715a      	strb	r2, [r3, #5]
                ucCoils[6] = r;
 801158c:	7cba      	ldrb	r2, [r7, #18]
 801158e:	4b4d      	ldr	r3, [pc, #308]	@ (80116c4 <eMBRegCoilsCB+0x1a8>)
 8011590:	719a      	strb	r2, [r3, #6]
                ucCoils[7] = b;
 8011592:	7c7a      	ldrb	r2, [r7, #17]
 8011594:	4b4b      	ldr	r3, [pc, #300]	@ (80116c4 <eMBRegCoilsCB+0x1a8>)
 8011596:	71da      	strb	r2, [r3, #7]
            }
        }

        /* Pack bits into buffer */
        UCHAR currentByte = 0;
 8011598:	2300      	movs	r3, #0
 801159a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        UCHAR bitPos = 0;
 801159e:	2300      	movs	r3, #0
 80115a0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        UCHAR *pOut = pucBuffer;
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	62bb      	str	r3, [r7, #40]	@ 0x28

        for (USHORT i = 0; i < usNCoils; i++) {
 80115a8:	2300      	movs	r3, #0
 80115aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80115ac:	e02b      	b.n	8011606 <eMBRegCoilsCB+0xea>
            UCHAR val = (ucCoils[iCoilIndex + i] & 0x01) ? 1 : 0;
 80115ae:	8bfa      	ldrh	r2, [r7, #30]
 80115b0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80115b2:	4413      	add	r3, r2
 80115b4:	4a43      	ldr	r2, [pc, #268]	@ (80116c4 <eMBRegCoilsCB+0x1a8>)
 80115b6:	5cd3      	ldrb	r3, [r2, r3]
 80115b8:	f003 0301 	and.w	r3, r3, #1
 80115bc:	757b      	strb	r3, [r7, #21]
            currentByte |= (val << bitPos);
 80115be:	7d7a      	ldrb	r2, [r7, #21]
 80115c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80115c4:	fa02 f303 	lsl.w	r3, r2, r3
 80115c8:	b25a      	sxtb	r2, r3
 80115ca:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80115ce:	4313      	orrs	r3, r2
 80115d0:	b25b      	sxtb	r3, r3
 80115d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            bitPos++;
 80115d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80115da:	3301      	adds	r3, #1
 80115dc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            if (bitPos == 8) {
 80115e0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80115e4:	2b08      	cmp	r3, #8
 80115e6:	d10b      	bne.n	8011600 <eMBRegCoilsCB+0xe4>
                *pOut++ = currentByte;
 80115e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115ea:	1c5a      	adds	r2, r3, #1
 80115ec:	62ba      	str	r2, [r7, #40]	@ 0x28
 80115ee:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80115f2:	701a      	strb	r2, [r3, #0]
                currentByte = 0;
 80115f4:	2300      	movs	r3, #0
 80115f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                bitPos = 0;
 80115fa:	2300      	movs	r3, #0
 80115fc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        for (USHORT i = 0; i < usNCoils; i++) {
 8011600:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011602:	3301      	adds	r3, #1
 8011604:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011606:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8011608:	893b      	ldrh	r3, [r7, #8]
 801160a:	429a      	cmp	r2, r3
 801160c:	d3cf      	bcc.n	80115ae <eMBRegCoilsCB+0x92>
            }
        }
        if (bitPos != 0) {
 801160e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011612:	2b00      	cmp	r3, #0
 8011614:	d051      	beq.n	80116ba <eMBRegCoilsCB+0x19e>
            *pOut++ = currentByte;
 8011616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011618:	1c5a      	adds	r2, r3, #1
 801161a:	62ba      	str	r2, [r7, #40]	@ 0x28
 801161c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8011620:	701a      	strb	r2, [r3, #0]
 8011622:	e04a      	b.n	80116ba <eMBRegCoilsCB+0x19e>
        }
    }
    else if (eMode == MB_REG_WRITE) {
 8011624:	79fb      	ldrb	r3, [r7, #7]
 8011626:	2b01      	cmp	r3, #1
 8011628:	d145      	bne.n	80116b6 <eMBRegCoilsCB+0x19a>
        /* Unpack and apply */
        UCHAR *pIn = pucBuffer;
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	61bb      	str	r3, [r7, #24]
        USHORT byteIndex = 0;
 801162e:	2300      	movs	r3, #0
 8011630:	84bb      	strh	r3, [r7, #36]	@ 0x24
        UCHAR bitIndex = 0;
 8011632:	2300      	movs	r3, #0
 8011634:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        for (USHORT i = 0; i < usNCoils; i++) {
 8011638:	2300      	movs	r3, #0
 801163a:	843b      	strh	r3, [r7, #32]
 801163c:	e036      	b.n	80116ac <eMBRegCoilsCB+0x190>
            UCHAR byte = pIn[byteIndex];
 801163e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011640:	69ba      	ldr	r2, [r7, #24]
 8011642:	4413      	add	r3, r2
 8011644:	781b      	ldrb	r3, [r3, #0]
 8011646:	75fb      	strb	r3, [r7, #23]
            UCHAR bit = (byte >> bitIndex) & 0x01;
 8011648:	7dfa      	ldrb	r2, [r7, #23]
 801164a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801164e:	fa42 f303 	asr.w	r3, r2, r3
 8011652:	b2db      	uxtb	r3, r3
 8011654:	f003 0301 	and.w	r3, r3, #1
 8011658:	75bb      	strb	r3, [r7, #22]

            ucCoils[iCoilIndex + i] = bit ? 1 : 0;
 801165a:	7dbb      	ldrb	r3, [r7, #22]
 801165c:	2b00      	cmp	r3, #0
 801165e:	bf14      	ite	ne
 8011660:	2301      	movne	r3, #1
 8011662:	2300      	moveq	r3, #0
 8011664:	b2d9      	uxtb	r1, r3
 8011666:	8bfa      	ldrh	r2, [r7, #30]
 8011668:	8c3b      	ldrh	r3, [r7, #32]
 801166a:	4413      	add	r3, r2
 801166c:	4a15      	ldr	r2, [pc, #84]	@ (80116c4 <eMBRegCoilsCB+0x1a8>)
 801166e:	54d1      	strb	r1, [r2, r3]
            apply_led_from_coil(iCoilIndex + i, ucCoils[iCoilIndex + i]);
 8011670:	8bfa      	ldrh	r2, [r7, #30]
 8011672:	8c3b      	ldrh	r3, [r7, #32]
 8011674:	4413      	add	r3, r2
 8011676:	b298      	uxth	r0, r3
 8011678:	8bfa      	ldrh	r2, [r7, #30]
 801167a:	8c3b      	ldrh	r3, [r7, #32]
 801167c:	4413      	add	r3, r2
 801167e:	4a11      	ldr	r2, [pc, #68]	@ (80116c4 <eMBRegCoilsCB+0x1a8>)
 8011680:	5cd3      	ldrb	r3, [r2, r3]
 8011682:	4619      	mov	r1, r3
 8011684:	f7ff fe10 	bl	80112a8 <apply_led_from_coil>

            bitIndex++;
 8011688:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801168c:	3301      	adds	r3, #1
 801168e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            if (bitIndex == 8) {
 8011692:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011696:	2b08      	cmp	r3, #8
 8011698:	d105      	bne.n	80116a6 <eMBRegCoilsCB+0x18a>
                bitIndex = 0;
 801169a:	2300      	movs	r3, #0
 801169c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                byteIndex++;
 80116a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80116a2:	3301      	adds	r3, #1
 80116a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
        for (USHORT i = 0; i < usNCoils; i++) {
 80116a6:	8c3b      	ldrh	r3, [r7, #32]
 80116a8:	3301      	adds	r3, #1
 80116aa:	843b      	strh	r3, [r7, #32]
 80116ac:	8c3a      	ldrh	r2, [r7, #32]
 80116ae:	893b      	ldrh	r3, [r7, #8]
 80116b0:	429a      	cmp	r2, r3
 80116b2:	d3c4      	bcc.n	801163e <eMBRegCoilsCB+0x122>
 80116b4:	e001      	b.n	80116ba <eMBRegCoilsCB+0x19e>
            }
        }
    }
    else {
        return MB_ENOREG;
 80116b6:	2301      	movs	r3, #1
 80116b8:	e000      	b.n	80116bc <eMBRegCoilsCB+0x1a0>
    }

    return MB_ENOERR;
 80116ba:	2300      	movs	r3, #0
}
 80116bc:	4618      	mov	r0, r3
 80116be:	3730      	adds	r7, #48	@ 0x30
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bd80      	pop	{r7, pc}
 80116c4:	200085d4 	.word	0x200085d4

080116c8 <eMBRegInputCB>:

/* ----------------------------------------------------------------
 * Input registers callback
 * ----------------------------------------------------------------*/
eMBErrorCode eMBRegInputCB(UCHAR *pucBuffer, USHORT usAddress, USHORT usNRegs) {
 80116c8:	b480      	push	{r7}
 80116ca:	b085      	sub	sp, #20
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
 80116d0:	460b      	mov	r3, r1
 80116d2:	807b      	strh	r3, [r7, #2]
 80116d4:	4613      	mov	r3, r2
 80116d6:	803b      	strh	r3, [r7, #0]
    if ((usAddress < REG_INPUT_START) ||
 80116d8:	887b      	ldrh	r3, [r7, #2]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d004      	beq.n	80116e8 <eMBRegInputCB+0x20>
        (usAddress + usNRegs - 1) > (REG_INPUT_START + REG_INPUT_NREGS - 1)) {
 80116de:	887a      	ldrh	r2, [r7, #2]
 80116e0:	883b      	ldrh	r3, [r7, #0]
 80116e2:	4413      	add	r3, r2
    if ((usAddress < REG_INPUT_START) ||
 80116e4:	2b03      	cmp	r3, #3
 80116e6:	dd01      	ble.n	80116ec <eMBRegInputCB+0x24>
        return MB_ENOREG;
 80116e8:	2301      	movs	r3, #1
 80116ea:	e022      	b.n	8011732 <eMBRegInputCB+0x6a>
    }

    USHORT iRegIndex = (USHORT)(usAddress - REG_INPUT_START);
 80116ec:	887b      	ldrh	r3, [r7, #2]
 80116ee:	3b01      	subs	r3, #1
 80116f0:	81bb      	strh	r3, [r7, #12]

    for (USHORT i = 0; i < usNRegs; i++) {
 80116f2:	2300      	movs	r3, #0
 80116f4:	81fb      	strh	r3, [r7, #14]
 80116f6:	e017      	b.n	8011728 <eMBRegInputCB+0x60>
        USHORT val = usInputRegs[iRegIndex + i];
 80116f8:	89ba      	ldrh	r2, [r7, #12]
 80116fa:	89fb      	ldrh	r3, [r7, #14]
 80116fc:	4413      	add	r3, r2
 80116fe:	4a10      	ldr	r2, [pc, #64]	@ (8011740 <eMBRegInputCB+0x78>)
 8011700:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011704:	817b      	strh	r3, [r7, #10]
        *pucBuffer++ = (UCHAR)(val >> 8);
 8011706:	897b      	ldrh	r3, [r7, #10]
 8011708:	0a1b      	lsrs	r3, r3, #8
 801170a:	b299      	uxth	r1, r3
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	1c5a      	adds	r2, r3, #1
 8011710:	607a      	str	r2, [r7, #4]
 8011712:	b2ca      	uxtb	r2, r1
 8011714:	701a      	strb	r2, [r3, #0]
        *pucBuffer++ = (UCHAR)(val & 0xFF);
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	1c5a      	adds	r2, r3, #1
 801171a:	607a      	str	r2, [r7, #4]
 801171c:	897a      	ldrh	r2, [r7, #10]
 801171e:	b2d2      	uxtb	r2, r2
 8011720:	701a      	strb	r2, [r3, #0]
    for (USHORT i = 0; i < usNRegs; i++) {
 8011722:	89fb      	ldrh	r3, [r7, #14]
 8011724:	3301      	adds	r3, #1
 8011726:	81fb      	strh	r3, [r7, #14]
 8011728:	89fa      	ldrh	r2, [r7, #14]
 801172a:	883b      	ldrh	r3, [r7, #0]
 801172c:	429a      	cmp	r2, r3
 801172e:	d3e3      	bcc.n	80116f8 <eMBRegInputCB+0x30>
    }

    return MB_ENOERR;
 8011730:	2300      	movs	r3, #0
}
 8011732:	4618      	mov	r0, r3
 8011734:	3714      	adds	r7, #20
 8011736:	46bd      	mov	sp, r7
 8011738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173c:	4770      	bx	lr
 801173e:	bf00      	nop
 8011740:	200085dc 	.word	0x200085dc

08011744 <eMBRegDiscreteCB>:

/* ----------------------------------------------------------------
 * Discrete inputs callback
 * ----------------------------------------------------------------*/
eMBErrorCode eMBRegDiscreteCB(UCHAR *pucBuffer, USHORT usAddress, USHORT usNDiscrete) {
 8011744:	b480      	push	{r7}
 8011746:	b087      	sub	sp, #28
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
 801174c:	460b      	mov	r3, r1
 801174e:	807b      	strh	r3, [r7, #2]
 8011750:	4613      	mov	r3, r2
 8011752:	803b      	strh	r3, [r7, #0]
    if ((usAddress < REG_DISC_START) ||
 8011754:	887b      	ldrh	r3, [r7, #2]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d004      	beq.n	8011764 <eMBRegDiscreteCB+0x20>
        (usAddress + usNDiscrete - 1) > (REG_DISC_START + REG_DISC_NDISCRETES - 1)) {
 801175a:	887a      	ldrh	r2, [r7, #2]
 801175c:	883b      	ldrh	r3, [r7, #0]
 801175e:	4413      	add	r3, r2
    if ((usAddress < REG_DISC_START) ||
 8011760:	2b05      	cmp	r3, #5
 8011762:	dd01      	ble.n	8011768 <eMBRegDiscreteCB+0x24>
        return MB_ENOREG;
 8011764:	2301      	movs	r3, #1
 8011766:	e03c      	b.n	80117e2 <eMBRegDiscreteCB+0x9e>
    }

    USHORT iDiscIndex = (USHORT)(usAddress - REG_DISC_START);
 8011768:	887b      	ldrh	r3, [r7, #2]
 801176a:	3b01      	subs	r3, #1
 801176c:	81bb      	strh	r3, [r7, #12]
    UCHAR currentByte = 0;
 801176e:	2300      	movs	r3, #0
 8011770:	75fb      	strb	r3, [r7, #23]
    UCHAR bitPos = 0;
 8011772:	2300      	movs	r3, #0
 8011774:	75bb      	strb	r3, [r7, #22]
    UCHAR *pOut = pucBuffer;
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	613b      	str	r3, [r7, #16]

    for (USHORT i = 0; i < usNDiscrete; i++) {
 801177a:	2300      	movs	r3, #0
 801177c:	81fb      	strh	r3, [r7, #14]
 801177e:	e023      	b.n	80117c8 <eMBRegDiscreteCB+0x84>
        UCHAR val = (ucDiscreteInputs[iDiscIndex + i] & 0x01) ? 1 : 0;
 8011780:	89ba      	ldrh	r2, [r7, #12]
 8011782:	89fb      	ldrh	r3, [r7, #14]
 8011784:	4413      	add	r3, r2
 8011786:	4a1a      	ldr	r2, [pc, #104]	@ (80117f0 <eMBRegDiscreteCB+0xac>)
 8011788:	5cd3      	ldrb	r3, [r2, r3]
 801178a:	f003 0301 	and.w	r3, r3, #1
 801178e:	72fb      	strb	r3, [r7, #11]
        currentByte |= (val << bitPos);
 8011790:	7afa      	ldrb	r2, [r7, #11]
 8011792:	7dbb      	ldrb	r3, [r7, #22]
 8011794:	fa02 f303 	lsl.w	r3, r2, r3
 8011798:	b25a      	sxtb	r2, r3
 801179a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801179e:	4313      	orrs	r3, r2
 80117a0:	b25b      	sxtb	r3, r3
 80117a2:	75fb      	strb	r3, [r7, #23]
        bitPos++;
 80117a4:	7dbb      	ldrb	r3, [r7, #22]
 80117a6:	3301      	adds	r3, #1
 80117a8:	75bb      	strb	r3, [r7, #22]
        if (bitPos == 8) {
 80117aa:	7dbb      	ldrb	r3, [r7, #22]
 80117ac:	2b08      	cmp	r3, #8
 80117ae:	d108      	bne.n	80117c2 <eMBRegDiscreteCB+0x7e>
            *pOut++ = currentByte;
 80117b0:	693b      	ldr	r3, [r7, #16]
 80117b2:	1c5a      	adds	r2, r3, #1
 80117b4:	613a      	str	r2, [r7, #16]
 80117b6:	7dfa      	ldrb	r2, [r7, #23]
 80117b8:	701a      	strb	r2, [r3, #0]
            currentByte = 0;
 80117ba:	2300      	movs	r3, #0
 80117bc:	75fb      	strb	r3, [r7, #23]
            bitPos = 0;
 80117be:	2300      	movs	r3, #0
 80117c0:	75bb      	strb	r3, [r7, #22]
    for (USHORT i = 0; i < usNDiscrete; i++) {
 80117c2:	89fb      	ldrh	r3, [r7, #14]
 80117c4:	3301      	adds	r3, #1
 80117c6:	81fb      	strh	r3, [r7, #14]
 80117c8:	89fa      	ldrh	r2, [r7, #14]
 80117ca:	883b      	ldrh	r3, [r7, #0]
 80117cc:	429a      	cmp	r2, r3
 80117ce:	d3d7      	bcc.n	8011780 <eMBRegDiscreteCB+0x3c>
        }
    }

    if (bitPos != 0) {
 80117d0:	7dbb      	ldrb	r3, [r7, #22]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d004      	beq.n	80117e0 <eMBRegDiscreteCB+0x9c>
        *pOut++ = currentByte;
 80117d6:	693b      	ldr	r3, [r7, #16]
 80117d8:	1c5a      	adds	r2, r3, #1
 80117da:	613a      	str	r2, [r7, #16]
 80117dc:	7dfa      	ldrb	r2, [r7, #23]
 80117de:	701a      	strb	r2, [r3, #0]
    }

    return MB_ENOERR;
 80117e0:	2300      	movs	r3, #0
}
 80117e2:	4618      	mov	r0, r3
 80117e4:	371c      	adds	r7, #28
 80117e6:	46bd      	mov	sp, r7
 80117e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ec:	4770      	bx	lr
 80117ee:	bf00      	nop
 80117f0:	200085e0 	.word	0x200085e0

080117f4 <Modbus_SetHolding>:

/* ----------------------------------------------------------------
 * Simple getters/setters for app logic
 * ----------------------------------------------------------------*/
USHORT Modbus_GetHolding(USHORT index) { return (index < REG_HOLDING_NREGS) ? usHoldingRegs[index] : 0; }
void   Modbus_SetHolding(USHORT index, USHORT value) { if (index < REG_HOLDING_NREGS) usHoldingRegs[index] = value; }
 80117f4:	b480      	push	{r7}
 80117f6:	b083      	sub	sp, #12
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	4603      	mov	r3, r0
 80117fc:	460a      	mov	r2, r1
 80117fe:	80fb      	strh	r3, [r7, #6]
 8011800:	4613      	mov	r3, r2
 8011802:	80bb      	strh	r3, [r7, #4]
 8011804:	88fb      	ldrh	r3, [r7, #6]
 8011806:	2b01      	cmp	r3, #1
 8011808:	d804      	bhi.n	8011814 <Modbus_SetHolding+0x20>
 801180a:	88fb      	ldrh	r3, [r7, #6]
 801180c:	4904      	ldr	r1, [pc, #16]	@ (8011820 <Modbus_SetHolding+0x2c>)
 801180e:	88ba      	ldrh	r2, [r7, #4]
 8011810:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8011814:	bf00      	nop
 8011816:	370c      	adds	r7, #12
 8011818:	46bd      	mov	sp, r7
 801181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181e:	4770      	bx	lr
 8011820:	200085d0 	.word	0x200085d0

08011824 <xMBPortEventInit>:
static volatile BOOL         s_event_pending = FALSE;
static volatile eMBEventType s_event_queued  = EV_READY;

/* ----------------------- TCP functions ---------------------- */
BOOL xMBPortEventInit(void)
{
 8011824:	b480      	push	{r7}
 8011826:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8011828:	b672      	cpsid	i
}
 801182a:	bf00      	nop
    __disable_irq();
    s_event_pending = FALSE;
 801182c:	4b06      	ldr	r3, [pc, #24]	@ (8011848 <xMBPortEventInit+0x24>)
 801182e:	2200      	movs	r2, #0
 8011830:	701a      	strb	r2, [r3, #0]
    s_event_queued  = EV_READY;
 8011832:	4b06      	ldr	r3, [pc, #24]	@ (801184c <xMBPortEventInit+0x28>)
 8011834:	2200      	movs	r2, #0
 8011836:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8011838:	b662      	cpsie	i
}
 801183a:	bf00      	nop
    __enable_irq();
    return TRUE;
 801183c:	2301      	movs	r3, #1
}
 801183e:	4618      	mov	r0, r3
 8011840:	46bd      	mov	sp, r7
 8011842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011846:	4770      	bx	lr
 8011848:	200085f0 	.word	0x200085f0
 801184c:	200085f1 	.word	0x200085f1

08011850 <xMBPortEventPost>:

BOOL xMBPortEventPost(eMBEventType eEvent)
{
 8011850:	b580      	push	{r7, lr}
 8011852:	b086      	sub	sp, #24
 8011854:	af02      	add	r7, sp, #8
 8011856:	4603      	mov	r3, r0
 8011858:	71fb      	strb	r3, [r7, #7]
    DEBUG_PRINTF("%s -> post event=%d\r\n", __func__, eEvent);
 801185a:	79fb      	ldrb	r3, [r7, #7]
 801185c:	9300      	str	r3, [sp, #0]
 801185e:	4b0f      	ldr	r3, [pc, #60]	@ (801189c <xMBPortEventPost+0x4c>)
 8011860:	4a0f      	ldr	r2, [pc, #60]	@ (80118a0 <xMBPortEventPost+0x50>)
 8011862:	2140      	movs	r1, #64	@ 0x40
 8011864:	480f      	ldr	r0, [pc, #60]	@ (80118a4 <xMBPortEventPost+0x54>)
 8011866:	f000 fc91 	bl	801218c <sniprintf>
 801186a:	60f8      	str	r0, [r7, #12]
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	b29a      	uxth	r2, r3
 8011870:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011874:	490b      	ldr	r1, [pc, #44]	@ (80118a4 <xMBPortEventPost+0x54>)
 8011876:	480c      	ldr	r0, [pc, #48]	@ (80118a8 <xMBPortEventPost+0x58>)
 8011878:	f7f3 fbc4 	bl	8005004 <HAL_UART_Transmit>
  __ASM volatile ("cpsid i" : : : "memory");
 801187c:	b672      	cpsid	i
}
 801187e:	bf00      	nop
    __disable_irq();
    s_event_queued  = eEvent;
 8011880:	4a0a      	ldr	r2, [pc, #40]	@ (80118ac <xMBPortEventPost+0x5c>)
 8011882:	79fb      	ldrb	r3, [r7, #7]
 8011884:	7013      	strb	r3, [r2, #0]
    s_event_pending = TRUE;
 8011886:	4b0a      	ldr	r3, [pc, #40]	@ (80118b0 <xMBPortEventPost+0x60>)
 8011888:	2201      	movs	r2, #1
 801188a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 801188c:	b662      	cpsie	i
}
 801188e:	bf00      	nop
    __enable_irq();

    return TRUE;
 8011890:	2301      	movs	r3, #1
}
 8011892:	4618      	mov	r0, r3
 8011894:	3710      	adds	r7, #16
 8011896:	46bd      	mov	sp, r7
 8011898:	bd80      	pop	{r7, pc}
 801189a:	bf00      	nop
 801189c:	08016028 	.word	0x08016028
 80118a0:	08015dcc 	.word	0x08015dcc
 80118a4:	20000254 	.word	0x20000254
 80118a8:	2000020c 	.word	0x2000020c
 80118ac:	200085f1 	.word	0x200085f1
 80118b0:	200085f0 	.word	0x200085f0

080118b4 <xMBPortEventGet>:

BOOL xMBPortEventGet(eMBEventType *eEvent)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b084      	sub	sp, #16
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
    if (!eEvent) return FALSE;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d101      	bne.n	80118c6 <xMBPortEventGet+0x12>
 80118c2:	2300      	movs	r3, #0
 80118c4:	e025      	b.n	8011912 <xMBPortEventGet+0x5e>
  __ASM volatile ("cpsid i" : : : "memory");
 80118c6:	b672      	cpsid	i
}
 80118c8:	bf00      	nop

    __disable_irq();
    if (s_event_pending) {
 80118ca:	4b14      	ldr	r3, [pc, #80]	@ (801191c <xMBPortEventGet+0x68>)
 80118cc:	781b      	ldrb	r3, [r3, #0]
 80118ce:	b2db      	uxtb	r3, r3
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d01b      	beq.n	801190c <xMBPortEventGet+0x58>
        *eEvent        = s_event_queued;
 80118d4:	4b12      	ldr	r3, [pc, #72]	@ (8011920 <xMBPortEventGet+0x6c>)
 80118d6:	781b      	ldrb	r3, [r3, #0]
 80118d8:	b2da      	uxtb	r2, r3
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	701a      	strb	r2, [r3, #0]
        s_event_pending = FALSE;
 80118de:	4b0f      	ldr	r3, [pc, #60]	@ (801191c <xMBPortEventGet+0x68>)
 80118e0:	2200      	movs	r2, #0
 80118e2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80118e4:	b662      	cpsie	i
}
 80118e6:	bf00      	nop
        __enable_irq();

        DEBUG_PRINTF(" -> got event=%d\r\n", *eEvent);
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	781b      	ldrb	r3, [r3, #0]
 80118ec:	4a0d      	ldr	r2, [pc, #52]	@ (8011924 <xMBPortEventGet+0x70>)
 80118ee:	2140      	movs	r1, #64	@ 0x40
 80118f0:	480d      	ldr	r0, [pc, #52]	@ (8011928 <xMBPortEventGet+0x74>)
 80118f2:	f000 fc4b 	bl	801218c <sniprintf>
 80118f6:	60f8      	str	r0, [r7, #12]
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	b29a      	uxth	r2, r3
 80118fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011900:	4909      	ldr	r1, [pc, #36]	@ (8011928 <xMBPortEventGet+0x74>)
 8011902:	480a      	ldr	r0, [pc, #40]	@ (801192c <xMBPortEventGet+0x78>)
 8011904:	f7f3 fb7e 	bl	8005004 <HAL_UART_Transmit>
        return TRUE;
 8011908:	2301      	movs	r3, #1
 801190a:	e002      	b.n	8011912 <xMBPortEventGet+0x5e>
  __ASM volatile ("cpsie i" : : : "memory");
 801190c:	b662      	cpsie	i
}
 801190e:	bf00      	nop
    }
    __enable_irq();
    return FALSE;
 8011910:	2300      	movs	r3, #0
}
 8011912:	4618      	mov	r0, r3
 8011914:	3710      	adds	r7, #16
 8011916:	46bd      	mov	sp, r7
 8011918:	bd80      	pop	{r7, pc}
 801191a:	bf00      	nop
 801191c:	200085f0 	.word	0x200085f0
 8011920:	200085f1 	.word	0x200085f1
 8011924:	08015de4 	.word	0x08015de4
 8011928:	20000254 	.word	0x20000254
 801192c:	2000020c 	.word	0x2000020c

08011930 <xMBTCPPortInit>:

/* ----------------------- TCP functions ---------------------- */
BOOL xMBTCPPortInit(USHORT usTCPPort)
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b084      	sub	sp, #16
 8011934:	af00      	add	r7, sp, #0
 8011936:	4603      	mov	r3, r0
 8011938:	80fb      	strh	r3, [r7, #6]
    DEBUG_PRINTF("%s\r\n", __func__);
 801193a:	4b24      	ldr	r3, [pc, #144]	@ (80119cc <xMBTCPPortInit+0x9c>)
 801193c:	4a24      	ldr	r2, [pc, #144]	@ (80119d0 <xMBTCPPortInit+0xa0>)
 801193e:	2140      	movs	r1, #64	@ 0x40
 8011940:	4824      	ldr	r0, [pc, #144]	@ (80119d4 <xMBTCPPortInit+0xa4>)
 8011942:	f000 fc23 	bl	801218c <sniprintf>
 8011946:	60f8      	str	r0, [r7, #12]
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	b29a      	uxth	r2, r3
 801194c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011950:	4920      	ldr	r1, [pc, #128]	@ (80119d4 <xMBTCPPortInit+0xa4>)
 8011952:	4821      	ldr	r0, [pc, #132]	@ (80119d8 <xMBTCPPortInit+0xa8>)
 8011954:	f7f3 fb56 	bl	8005004 <HAL_UART_Transmit>
    mb_listener = tcp_new();
 8011958:	f7f7 fd86 	bl	8009468 <tcp_new>
 801195c:	4603      	mov	r3, r0
 801195e:	4a1f      	ldr	r2, [pc, #124]	@ (80119dc <xMBTCPPortInit+0xac>)
 8011960:	6013      	str	r3, [r2, #0]
    if (!mb_listener) return FALSE;
 8011962:	4b1e      	ldr	r3, [pc, #120]	@ (80119dc <xMBTCPPortInit+0xac>)
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d101      	bne.n	801196e <xMBTCPPortInit+0x3e>
 801196a:	2300      	movs	r3, #0
 801196c:	e02a      	b.n	80119c4 <xMBTCPPortInit+0x94>

    if (tcp_bind(mb_listener, IP_ADDR_ANY, usTCPPort) != ERR_OK)
 801196e:	4b1b      	ldr	r3, [pc, #108]	@ (80119dc <xMBTCPPortInit+0xac>)
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	88fa      	ldrh	r2, [r7, #6]
 8011974:	491a      	ldr	r1, [pc, #104]	@ (80119e0 <xMBTCPPortInit+0xb0>)
 8011976:	4618      	mov	r0, r3
 8011978:	f7f6 fcee 	bl	8008358 <tcp_bind>
 801197c:	4603      	mov	r3, r0
 801197e:	2b00      	cmp	r3, #0
 8011980:	d001      	beq.n	8011986 <xMBTCPPortInit+0x56>
        return FALSE;
 8011982:	2300      	movs	r3, #0
 8011984:	e01e      	b.n	80119c4 <xMBTCPPortInit+0x94>

    mb_listener = tcp_listen(mb_listener);
 8011986:	4b15      	ldr	r3, [pc, #84]	@ (80119dc <xMBTCPPortInit+0xac>)
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	21ff      	movs	r1, #255	@ 0xff
 801198c:	4618      	mov	r0, r3
 801198e:	f7f6 fd9b 	bl	80084c8 <tcp_listen_with_backlog>
 8011992:	4603      	mov	r3, r0
 8011994:	4a11      	ldr	r2, [pc, #68]	@ (80119dc <xMBTCPPortInit+0xac>)
 8011996:	6013      	str	r3, [r2, #0]
    tcp_accept(mb_listener, mb_accept);
 8011998:	4b10      	ldr	r3, [pc, #64]	@ (80119dc <xMBTCPPortInit+0xac>)
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	4911      	ldr	r1, [pc, #68]	@ (80119e4 <xMBTCPPortInit+0xb4>)
 801199e:	4618      	mov	r0, r3
 80119a0:	f7f7 fd8c 	bl	80094bc <tcp_accept>

    DEBUG_PRINTF(" -> listening on TCP port %u\r\n", (unsigned)usTCPPort);
 80119a4:	88fb      	ldrh	r3, [r7, #6]
 80119a6:	4a10      	ldr	r2, [pc, #64]	@ (80119e8 <xMBTCPPortInit+0xb8>)
 80119a8:	2140      	movs	r1, #64	@ 0x40
 80119aa:	480a      	ldr	r0, [pc, #40]	@ (80119d4 <xMBTCPPortInit+0xa4>)
 80119ac:	f000 fbee 	bl	801218c <sniprintf>
 80119b0:	60b8      	str	r0, [r7, #8]
 80119b2:	68bb      	ldr	r3, [r7, #8]
 80119b4:	b29a      	uxth	r2, r3
 80119b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80119ba:	4906      	ldr	r1, [pc, #24]	@ (80119d4 <xMBTCPPortInit+0xa4>)
 80119bc:	4806      	ldr	r0, [pc, #24]	@ (80119d8 <xMBTCPPortInit+0xa8>)
 80119be:	f7f3 fb21 	bl	8005004 <HAL_UART_Transmit>
    return TRUE;
 80119c2:	2301      	movs	r3, #1
}
 80119c4:	4618      	mov	r0, r3
 80119c6:	3710      	adds	r7, #16
 80119c8:	46bd      	mov	sp, r7
 80119ca:	bd80      	pop	{r7, pc}
 80119cc:	0801603c 	.word	0x0801603c
 80119d0:	08015df8 	.word	0x08015df8
 80119d4:	20000254 	.word	0x20000254
 80119d8:	2000020c 	.word	0x2000020c
 80119dc:	200085e4 	.word	0x200085e4
 80119e0:	08016014 	.word	0x08016014
 80119e4:	08011bb5 	.word	0x08011bb5
 80119e8:	08015e00 	.word	0x08015e00

080119ec <vMBTCPPortDisable>:
        mb_listener = NULL;
    }
}

void vMBTCPPortDisable(void)
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b082      	sub	sp, #8
 80119f0:	af00      	add	r7, sp, #0
    DEBUG_PRINTF("%s\r\n", __func__);
 80119f2:	4b15      	ldr	r3, [pc, #84]	@ (8011a48 <vMBTCPPortDisable+0x5c>)
 80119f4:	4a15      	ldr	r2, [pc, #84]	@ (8011a4c <vMBTCPPortDisable+0x60>)
 80119f6:	2140      	movs	r1, #64	@ 0x40
 80119f8:	4815      	ldr	r0, [pc, #84]	@ (8011a50 <vMBTCPPortDisable+0x64>)
 80119fa:	f000 fbc7 	bl	801218c <sniprintf>
 80119fe:	6078      	str	r0, [r7, #4]
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	b29a      	uxth	r2, r3
 8011a04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011a08:	4911      	ldr	r1, [pc, #68]	@ (8011a50 <vMBTCPPortDisable+0x64>)
 8011a0a:	4812      	ldr	r0, [pc, #72]	@ (8011a54 <vMBTCPPortDisable+0x68>)
 8011a0c:	f7f3 fafa 	bl	8005004 <HAL_UART_Transmit>
    if (mb_client) {
 8011a10:	4b11      	ldr	r3, [pc, #68]	@ (8011a58 <vMBTCPPortDisable+0x6c>)
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d007      	beq.n	8011a28 <vMBTCPPortDisable+0x3c>
        tcp_close(mb_client);
 8011a18:	4b0f      	ldr	r3, [pc, #60]	@ (8011a58 <vMBTCPPortDisable+0x6c>)
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f7f6 fba5 	bl	800816c <tcp_close>
        mb_client = NULL;
 8011a22:	4b0d      	ldr	r3, [pc, #52]	@ (8011a58 <vMBTCPPortDisable+0x6c>)
 8011a24:	2200      	movs	r2, #0
 8011a26:	601a      	str	r2, [r3, #0]
    }
    if (rx_pbuf) {
 8011a28:	4b0c      	ldr	r3, [pc, #48]	@ (8011a5c <vMBTCPPortDisable+0x70>)
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d007      	beq.n	8011a40 <vMBTCPPortDisable+0x54>
        pbuf_free(rx_pbuf);
 8011a30:	4b0a      	ldr	r3, [pc, #40]	@ (8011a5c <vMBTCPPortDisable+0x70>)
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	4618      	mov	r0, r3
 8011a36:	f7f5 fefb 	bl	8007830 <pbuf_free>
        rx_pbuf = NULL;
 8011a3a:	4b08      	ldr	r3, [pc, #32]	@ (8011a5c <vMBTCPPortDisable+0x70>)
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	601a      	str	r2, [r3, #0]
    }
}
 8011a40:	bf00      	nop
 8011a42:	3708      	adds	r7, #8
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bd80      	pop	{r7, pc}
 8011a48:	0801604c 	.word	0x0801604c
 8011a4c:	08015df8 	.word	0x08015df8
 8011a50:	20000254 	.word	0x20000254
 8011a54:	2000020c 	.word	0x2000020c
 8011a58:	200085e8 	.word	0x200085e8
 8011a5c:	200085ec 	.word	0x200085ec

08011a60 <xMBTCPPortGetRequest>:

BOOL xMBTCPPortGetRequest(UCHAR **ppucMBTCPFrame, USHORT *pusLength)
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b084      	sub	sp, #16
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
 8011a68:	6039      	str	r1, [r7, #0]
    DEBUG_PRINTF("%s\r\n", __func__);
 8011a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8011ae4 <xMBTCPPortGetRequest+0x84>)
 8011a6c:	4a1e      	ldr	r2, [pc, #120]	@ (8011ae8 <xMBTCPPortGetRequest+0x88>)
 8011a6e:	2140      	movs	r1, #64	@ 0x40
 8011a70:	481e      	ldr	r0, [pc, #120]	@ (8011aec <xMBTCPPortGetRequest+0x8c>)
 8011a72:	f000 fb8b 	bl	801218c <sniprintf>
 8011a76:	60f8      	str	r0, [r7, #12]
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	b29a      	uxth	r2, r3
 8011a7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011a80:	491a      	ldr	r1, [pc, #104]	@ (8011aec <xMBTCPPortGetRequest+0x8c>)
 8011a82:	481b      	ldr	r0, [pc, #108]	@ (8011af0 <xMBTCPPortGetRequest+0x90>)
 8011a84:	f7f3 fabe 	bl	8005004 <HAL_UART_Transmit>
    if (!rx_pbuf) return FALSE;
 8011a88:	4b1a      	ldr	r3, [pc, #104]	@ (8011af4 <xMBTCPPortGetRequest+0x94>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d101      	bne.n	8011a94 <xMBTCPPortGetRequest+0x34>
 8011a90:	2300      	movs	r3, #0
 8011a92:	e022      	b.n	8011ada <xMBTCPPortGetRequest+0x7a>

    *ppucMBTCPFrame = rx_pbuf->payload;
 8011a94:	4b17      	ldr	r3, [pc, #92]	@ (8011af4 <xMBTCPPortGetRequest+0x94>)
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	685a      	ldr	r2, [r3, #4]
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	601a      	str	r2, [r3, #0]
    *pusLength      = rx_pbuf->len;
 8011a9e:	4b15      	ldr	r3, [pc, #84]	@ (8011af4 <xMBTCPPortGetRequest+0x94>)
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	895a      	ldrh	r2, [r3, #10]
 8011aa4:	683b      	ldr	r3, [r7, #0]
 8011aa6:	801a      	strh	r2, [r3, #0]

    DEBUG_PRINTF(" -> handing out %u bytes\r\n", (unsigned)*pusLength);
 8011aa8:	683b      	ldr	r3, [r7, #0]
 8011aaa:	881b      	ldrh	r3, [r3, #0]
 8011aac:	4a12      	ldr	r2, [pc, #72]	@ (8011af8 <xMBTCPPortGetRequest+0x98>)
 8011aae:	2140      	movs	r1, #64	@ 0x40
 8011ab0:	480e      	ldr	r0, [pc, #56]	@ (8011aec <xMBTCPPortGetRequest+0x8c>)
 8011ab2:	f000 fb6b 	bl	801218c <sniprintf>
 8011ab6:	60b8      	str	r0, [r7, #8]
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	b29a      	uxth	r2, r3
 8011abc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011ac0:	490a      	ldr	r1, [pc, #40]	@ (8011aec <xMBTCPPortGetRequest+0x8c>)
 8011ac2:	480b      	ldr	r0, [pc, #44]	@ (8011af0 <xMBTCPPortGetRequest+0x90>)
 8011ac4:	f7f3 fa9e 	bl	8005004 <HAL_UART_Transmit>

    pbuf_free(rx_pbuf);
 8011ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8011af4 <xMBTCPPortGetRequest+0x94>)
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	4618      	mov	r0, r3
 8011ace:	f7f5 feaf 	bl	8007830 <pbuf_free>
    rx_pbuf = NULL;
 8011ad2:	4b08      	ldr	r3, [pc, #32]	@ (8011af4 <xMBTCPPortGetRequest+0x94>)
 8011ad4:	2200      	movs	r2, #0
 8011ad6:	601a      	str	r2, [r3, #0]
    return TRUE;
 8011ad8:	2301      	movs	r3, #1
}
 8011ada:	4618      	mov	r0, r3
 8011adc:	3710      	adds	r7, #16
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	bd80      	pop	{r7, pc}
 8011ae2:	bf00      	nop
 8011ae4:	08016060 	.word	0x08016060
 8011ae8:	08015df8 	.word	0x08015df8
 8011aec:	20000254 	.word	0x20000254
 8011af0:	2000020c 	.word	0x2000020c
 8011af4:	200085ec 	.word	0x200085ec
 8011af8:	08015e20 	.word	0x08015e20

08011afc <xMBTCPPortSendResponse>:

BOOL xMBTCPPortSendResponse(const UCHAR *pucMBTCPFrame, USHORT usLength)
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b086      	sub	sp, #24
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
 8011b04:	460b      	mov	r3, r1
 8011b06:	807b      	strh	r3, [r7, #2]
    DEBUG_PRINTF("%s\r\n", __func__);
 8011b08:	4b23      	ldr	r3, [pc, #140]	@ (8011b98 <xMBTCPPortSendResponse+0x9c>)
 8011b0a:	4a24      	ldr	r2, [pc, #144]	@ (8011b9c <xMBTCPPortSendResponse+0xa0>)
 8011b0c:	2140      	movs	r1, #64	@ 0x40
 8011b0e:	4824      	ldr	r0, [pc, #144]	@ (8011ba0 <xMBTCPPortSendResponse+0xa4>)
 8011b10:	f000 fb3c 	bl	801218c <sniprintf>
 8011b14:	6178      	str	r0, [r7, #20]
 8011b16:	697b      	ldr	r3, [r7, #20]
 8011b18:	b29a      	uxth	r2, r3
 8011b1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011b1e:	4920      	ldr	r1, [pc, #128]	@ (8011ba0 <xMBTCPPortSendResponse+0xa4>)
 8011b20:	4820      	ldr	r0, [pc, #128]	@ (8011ba4 <xMBTCPPortSendResponse+0xa8>)
 8011b22:	f7f3 fa6f 	bl	8005004 <HAL_UART_Transmit>
    if (!mb_client) {
 8011b26:	4b20      	ldr	r3, [pc, #128]	@ (8011ba8 <xMBTCPPortSendResponse+0xac>)
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d10f      	bne.n	8011b4e <xMBTCPPortSendResponse+0x52>
        DEBUG_PRINTF(" -> no client\r\n");
 8011b2e:	4a1f      	ldr	r2, [pc, #124]	@ (8011bac <xMBTCPPortSendResponse+0xb0>)
 8011b30:	2140      	movs	r1, #64	@ 0x40
 8011b32:	481b      	ldr	r0, [pc, #108]	@ (8011ba0 <xMBTCPPortSendResponse+0xa4>)
 8011b34:	f000 fb2a 	bl	801218c <sniprintf>
 8011b38:	60f8      	str	r0, [r7, #12]
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	b29a      	uxth	r2, r3
 8011b3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011b42:	4917      	ldr	r1, [pc, #92]	@ (8011ba0 <xMBTCPPortSendResponse+0xa4>)
 8011b44:	4817      	ldr	r0, [pc, #92]	@ (8011ba4 <xMBTCPPortSendResponse+0xa8>)
 8011b46:	f7f3 fa5d 	bl	8005004 <HAL_UART_Transmit>
        return FALSE;
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	e020      	b.n	8011b90 <xMBTCPPortSendResponse+0x94>
    }

    if (tcp_write(mb_client, pucMBTCPFrame, usLength, TCP_WRITE_FLAG_COPY) != ERR_OK)
 8011b4e:	4b16      	ldr	r3, [pc, #88]	@ (8011ba8 <xMBTCPPortSendResponse+0xac>)
 8011b50:	6818      	ldr	r0, [r3, #0]
 8011b52:	887a      	ldrh	r2, [r7, #2]
 8011b54:	2301      	movs	r3, #1
 8011b56:	6879      	ldr	r1, [r7, #4]
 8011b58:	f7fa fb44 	bl	800c1e4 <tcp_write>
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d001      	beq.n	8011b66 <xMBTCPPortSendResponse+0x6a>
        return FALSE;
 8011b62:	2300      	movs	r3, #0
 8011b64:	e014      	b.n	8011b90 <xMBTCPPortSendResponse+0x94>

    tcp_output(mb_client);
 8011b66:	4b10      	ldr	r3, [pc, #64]	@ (8011ba8 <xMBTCPPortSendResponse+0xac>)
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	f7fb f924 	bl	800cdb8 <tcp_output>

    DEBUG_PRINTF(" -> sent %u bytes\r\n", (unsigned)usLength);
 8011b70:	887b      	ldrh	r3, [r7, #2]
 8011b72:	4a0f      	ldr	r2, [pc, #60]	@ (8011bb0 <xMBTCPPortSendResponse+0xb4>)
 8011b74:	2140      	movs	r1, #64	@ 0x40
 8011b76:	480a      	ldr	r0, [pc, #40]	@ (8011ba0 <xMBTCPPortSendResponse+0xa4>)
 8011b78:	f000 fb08 	bl	801218c <sniprintf>
 8011b7c:	6138      	str	r0, [r7, #16]
 8011b7e:	693b      	ldr	r3, [r7, #16]
 8011b80:	b29a      	uxth	r2, r3
 8011b82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011b86:	4906      	ldr	r1, [pc, #24]	@ (8011ba0 <xMBTCPPortSendResponse+0xa4>)
 8011b88:	4806      	ldr	r0, [pc, #24]	@ (8011ba4 <xMBTCPPortSendResponse+0xa8>)
 8011b8a:	f7f3 fa3b 	bl	8005004 <HAL_UART_Transmit>
    return TRUE;
 8011b8e:	2301      	movs	r3, #1
}
 8011b90:	4618      	mov	r0, r3
 8011b92:	3718      	adds	r7, #24
 8011b94:	46bd      	mov	sp, r7
 8011b96:	bd80      	pop	{r7, pc}
 8011b98:	08016078 	.word	0x08016078
 8011b9c:	08015df8 	.word	0x08015df8
 8011ba0:	20000254 	.word	0x20000254
 8011ba4:	2000020c 	.word	0x2000020c
 8011ba8:	200085e8 	.word	0x200085e8
 8011bac:	08015e3c 	.word	0x08015e3c
 8011bb0:	08015e4c 	.word	0x08015e4c

08011bb4 <mb_accept>:

/* ----------------------- lwIP callbacks ---------------------- */
static err_t mb_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b086      	sub	sp, #24
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	60f8      	str	r0, [r7, #12]
 8011bbc:	60b9      	str	r1, [r7, #8]
 8011bbe:	4613      	mov	r3, r2
 8011bc0:	71fb      	strb	r3, [r7, #7]
    DEBUG_PRINTF("%s\r\n", __func__);
 8011bc2:	4b17      	ldr	r3, [pc, #92]	@ (8011c20 <mb_accept+0x6c>)
 8011bc4:	4a17      	ldr	r2, [pc, #92]	@ (8011c24 <mb_accept+0x70>)
 8011bc6:	2140      	movs	r1, #64	@ 0x40
 8011bc8:	4817      	ldr	r0, [pc, #92]	@ (8011c28 <mb_accept+0x74>)
 8011bca:	f000 fadf 	bl	801218c <sniprintf>
 8011bce:	6178      	str	r0, [r7, #20]
 8011bd0:	697b      	ldr	r3, [r7, #20]
 8011bd2:	b29a      	uxth	r2, r3
 8011bd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011bd8:	4913      	ldr	r1, [pc, #76]	@ (8011c28 <mb_accept+0x74>)
 8011bda:	4814      	ldr	r0, [pc, #80]	@ (8011c2c <mb_accept+0x78>)
 8011bdc:	f7f3 fa12 	bl	8005004 <HAL_UART_Transmit>
    (void)arg; (void)err;

    mb_client = newpcb;
 8011be0:	4a13      	ldr	r2, [pc, #76]	@ (8011c30 <mb_accept+0x7c>)
 8011be2:	68bb      	ldr	r3, [r7, #8]
 8011be4:	6013      	str	r3, [r2, #0]
    tcp_recv(mb_client, mb_recv);
 8011be6:	4b12      	ldr	r3, [pc, #72]	@ (8011c30 <mb_accept+0x7c>)
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	4912      	ldr	r1, [pc, #72]	@ (8011c34 <mb_accept+0x80>)
 8011bec:	4618      	mov	r0, r3
 8011bee:	f7f7 fc43 	bl	8009478 <tcp_recv>

    DEBUG_PRINTF(" -> client connected\r\n");
 8011bf2:	4a11      	ldr	r2, [pc, #68]	@ (8011c38 <mb_accept+0x84>)
 8011bf4:	2140      	movs	r1, #64	@ 0x40
 8011bf6:	480c      	ldr	r0, [pc, #48]	@ (8011c28 <mb_accept+0x74>)
 8011bf8:	f000 fac8 	bl	801218c <sniprintf>
 8011bfc:	6138      	str	r0, [r7, #16]
 8011bfe:	693b      	ldr	r3, [r7, #16]
 8011c00:	b29a      	uxth	r2, r3
 8011c02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011c06:	4908      	ldr	r1, [pc, #32]	@ (8011c28 <mb_accept+0x74>)
 8011c08:	4808      	ldr	r0, [pc, #32]	@ (8011c2c <mb_accept+0x78>)
 8011c0a:	f7f3 f9fb 	bl	8005004 <HAL_UART_Transmit>

    xMBPortEventPost(EV_READY);
 8011c0e:	2000      	movs	r0, #0
 8011c10:	f7ff fe1e 	bl	8011850 <xMBPortEventPost>
    return ERR_OK;
 8011c14:	2300      	movs	r3, #0
}
 8011c16:	4618      	mov	r0, r3
 8011c18:	3718      	adds	r7, #24
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	bd80      	pop	{r7, pc}
 8011c1e:	bf00      	nop
 8011c20:	08016090 	.word	0x08016090
 8011c24:	08015df8 	.word	0x08015df8
 8011c28:	20000254 	.word	0x20000254
 8011c2c:	2000020c 	.word	0x2000020c
 8011c30:	200085e8 	.word	0x200085e8
 8011c34:	08011c3d 	.word	0x08011c3d
 8011c38:	08015e60 	.word	0x08015e60

08011c3c <mb_recv>:

static err_t mb_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8011c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c3e:	b095      	sub	sp, #84	@ 0x54
 8011c40:	af08      	add	r7, sp, #32
 8011c42:	60f8      	str	r0, [r7, #12]
 8011c44:	60b9      	str	r1, [r7, #8]
 8011c46:	607a      	str	r2, [r7, #4]
 8011c48:	70fb      	strb	r3, [r7, #3]
    DEBUG_PRINTF("%s\r\n", __func__);
 8011c4a:	4b60      	ldr	r3, [pc, #384]	@ (8011dcc <mb_recv+0x190>)
 8011c4c:	4a60      	ldr	r2, [pc, #384]	@ (8011dd0 <mb_recv+0x194>)
 8011c4e:	2140      	movs	r1, #64	@ 0x40
 8011c50:	4860      	ldr	r0, [pc, #384]	@ (8011dd4 <mb_recv+0x198>)
 8011c52:	f000 fa9b 	bl	801218c <sniprintf>
 8011c56:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8011c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c5a:	b29a      	uxth	r2, r3
 8011c5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011c60:	495c      	ldr	r1, [pc, #368]	@ (8011dd4 <mb_recv+0x198>)
 8011c62:	485d      	ldr	r0, [pc, #372]	@ (8011dd8 <mb_recv+0x19c>)
 8011c64:	f7f3 f9ce 	bl	8005004 <HAL_UART_Transmit>
    (void)arg; (void)tpcb;

    if (!p) {
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d12f      	bne.n	8011cce <mb_recv+0x92>
        err_t cerr = tcp_close(tpcb);
 8011c6e:	68b8      	ldr	r0, [r7, #8]
 8011c70:	f7f6 fa7c 	bl	800816c <tcp_close>
 8011c74:	4603      	mov	r3, r0
 8011c76:	76fb      	strb	r3, [r7, #27]
        if (cerr != ERR_OK) {
 8011c78:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d013      	beq.n	8011ca8 <mb_recv+0x6c>
            tcp_abort(tpcb);
 8011c80:	68b8      	ldr	r0, [r7, #8]
 8011c82:	f7f6 fb5d 	bl	8008340 <tcp_abort>
            DEBUG_PRINTF(" -> remote closed, pcb aborted (err=%d)\r\n", cerr);
 8011c86:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011c8a:	4a54      	ldr	r2, [pc, #336]	@ (8011ddc <mb_recv+0x1a0>)
 8011c8c:	2140      	movs	r1, #64	@ 0x40
 8011c8e:	4851      	ldr	r0, [pc, #324]	@ (8011dd4 <mb_recv+0x198>)
 8011c90:	f000 fa7c 	bl	801218c <sniprintf>
 8011c94:	6138      	str	r0, [r7, #16]
 8011c96:	693b      	ldr	r3, [r7, #16]
 8011c98:	b29a      	uxth	r2, r3
 8011c9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011c9e:	494d      	ldr	r1, [pc, #308]	@ (8011dd4 <mb_recv+0x198>)
 8011ca0:	484d      	ldr	r0, [pc, #308]	@ (8011dd8 <mb_recv+0x19c>)
 8011ca2:	f7f3 f9af 	bl	8005004 <HAL_UART_Transmit>
 8011ca6:	e00d      	b.n	8011cc4 <mb_recv+0x88>
        } else {
            DEBUG_PRINTF(" -> remote closed, pcb closed\r\n");
 8011ca8:	4a4d      	ldr	r2, [pc, #308]	@ (8011de0 <mb_recv+0x1a4>)
 8011caa:	2140      	movs	r1, #64	@ 0x40
 8011cac:	4849      	ldr	r0, [pc, #292]	@ (8011dd4 <mb_recv+0x198>)
 8011cae:	f000 fa6d 	bl	801218c <sniprintf>
 8011cb2:	6178      	str	r0, [r7, #20]
 8011cb4:	697b      	ldr	r3, [r7, #20]
 8011cb6:	b29a      	uxth	r2, r3
 8011cb8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011cbc:	4945      	ldr	r1, [pc, #276]	@ (8011dd4 <mb_recv+0x198>)
 8011cbe:	4846      	ldr	r0, [pc, #280]	@ (8011dd8 <mb_recv+0x19c>)
 8011cc0:	f7f3 f9a0 	bl	8005004 <HAL_UART_Transmit>
        }
        mb_client = NULL;
 8011cc4:	4b47      	ldr	r3, [pc, #284]	@ (8011de4 <mb_recv+0x1a8>)
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	601a      	str	r2, [r3, #0]
        return ERR_OK;
 8011cca:	2300      	movs	r3, #0
 8011ccc:	e07a      	b.n	8011dc4 <mb_recv+0x188>
    }

    if (err != ERR_OK) {
 8011cce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d015      	beq.n	8011d02 <mb_recv+0xc6>
        pbuf_free(p);
 8011cd6:	6878      	ldr	r0, [r7, #4]
 8011cd8:	f7f5 fdaa 	bl	8007830 <pbuf_free>
        DEBUG_PRINTF(" -> error %d\r\n", (int)err);
 8011cdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011ce0:	4a41      	ldr	r2, [pc, #260]	@ (8011de8 <mb_recv+0x1ac>)
 8011ce2:	2140      	movs	r1, #64	@ 0x40
 8011ce4:	483b      	ldr	r0, [pc, #236]	@ (8011dd4 <mb_recv+0x198>)
 8011ce6:	f000 fa51 	bl	801218c <sniprintf>
 8011cea:	61f8      	str	r0, [r7, #28]
 8011cec:	69fb      	ldr	r3, [r7, #28]
 8011cee:	b29a      	uxth	r2, r3
 8011cf0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011cf4:	4937      	ldr	r1, [pc, #220]	@ (8011dd4 <mb_recv+0x198>)
 8011cf6:	4838      	ldr	r0, [pc, #224]	@ (8011dd8 <mb_recv+0x19c>)
 8011cf8:	f7f3 f984 	bl	8005004 <HAL_UART_Transmit>
        return err;
 8011cfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011d00:	e060      	b.n	8011dc4 <mb_recv+0x188>
    }

    if (rx_pbuf) pbuf_free(rx_pbuf);
 8011d02:	4b3a      	ldr	r3, [pc, #232]	@ (8011dec <mb_recv+0x1b0>)
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d004      	beq.n	8011d14 <mb_recv+0xd8>
 8011d0a:	4b38      	ldr	r3, [pc, #224]	@ (8011dec <mb_recv+0x1b0>)
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	4618      	mov	r0, r3
 8011d10:	f7f5 fd8e 	bl	8007830 <pbuf_free>
    rx_pbuf = p;
 8011d14:	4a35      	ldr	r2, [pc, #212]	@ (8011dec <mb_recv+0x1b0>)
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	6013      	str	r3, [r2, #0]

    tcp_recved(tpcb, p->tot_len);
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	891b      	ldrh	r3, [r3, #8]
 8011d1e:	4619      	mov	r1, r3
 8011d20:	68b8      	ldr	r0, [r7, #8]
 8011d22:	f7f6 fce7 	bl	80086f4 <tcp_recved>

    DEBUG_PRINTF(" -> received %u bytes\r\n", (unsigned)p->tot_len);
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	891b      	ldrh	r3, [r3, #8]
 8011d2a:	4a31      	ldr	r2, [pc, #196]	@ (8011df0 <mb_recv+0x1b4>)
 8011d2c:	2140      	movs	r1, #64	@ 0x40
 8011d2e:	4829      	ldr	r0, [pc, #164]	@ (8011dd4 <mb_recv+0x198>)
 8011d30:	f000 fa2c 	bl	801218c <sniprintf>
 8011d34:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d38:	b29a      	uxth	r2, r3
 8011d3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011d3e:	4925      	ldr	r1, [pc, #148]	@ (8011dd4 <mb_recv+0x198>)
 8011d40:	4825      	ldr	r0, [pc, #148]	@ (8011dd8 <mb_recv+0x19c>)
 8011d42:	f7f3 f95f 	bl	8005004 <HAL_UART_Transmit>
    if (p->len >= 8) {
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	895b      	ldrh	r3, [r3, #10]
 8011d4a:	2b07      	cmp	r3, #7
 8011d4c:	d936      	bls.n	8011dbc <mb_recv+0x180>
        uint8_t *b = (uint8_t*)p->payload;
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	685b      	ldr	r3, [r3, #4]
 8011d52:	627b      	str	r3, [r7, #36]	@ 0x24
        DEBUG_PRINTF(" MBAP: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8011d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d56:	781b      	ldrb	r3, [r3, #0]
 8011d58:	469c      	mov	ip, r3
 8011d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d5c:	3301      	adds	r3, #1
 8011d5e:	781b      	ldrb	r3, [r3, #0]
 8011d60:	461a      	mov	r2, r3
 8011d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d64:	3302      	adds	r3, #2
 8011d66:	781b      	ldrb	r3, [r3, #0]
 8011d68:	4619      	mov	r1, r3
 8011d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d6c:	3303      	adds	r3, #3
 8011d6e:	781b      	ldrb	r3, [r3, #0]
 8011d70:	4618      	mov	r0, r3
 8011d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d74:	3304      	adds	r3, #4
 8011d76:	781b      	ldrb	r3, [r3, #0]
 8011d78:	461c      	mov	r4, r3
 8011d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d7c:	3305      	adds	r3, #5
 8011d7e:	781b      	ldrb	r3, [r3, #0]
 8011d80:	461d      	mov	r5, r3
 8011d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d84:	3306      	adds	r3, #6
 8011d86:	781b      	ldrb	r3, [r3, #0]
 8011d88:	461e      	mov	r6, r3
 8011d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d8c:	3307      	adds	r3, #7
 8011d8e:	781b      	ldrb	r3, [r3, #0]
 8011d90:	9306      	str	r3, [sp, #24]
 8011d92:	9605      	str	r6, [sp, #20]
 8011d94:	9504      	str	r5, [sp, #16]
 8011d96:	9403      	str	r4, [sp, #12]
 8011d98:	9002      	str	r0, [sp, #8]
 8011d9a:	9101      	str	r1, [sp, #4]
 8011d9c:	9200      	str	r2, [sp, #0]
 8011d9e:	4663      	mov	r3, ip
 8011da0:	4a14      	ldr	r2, [pc, #80]	@ (8011df4 <mb_recv+0x1b8>)
 8011da2:	2140      	movs	r1, #64	@ 0x40
 8011da4:	480b      	ldr	r0, [pc, #44]	@ (8011dd4 <mb_recv+0x198>)
 8011da6:	f000 f9f1 	bl	801218c <sniprintf>
 8011daa:	6238      	str	r0, [r7, #32]
 8011dac:	6a3b      	ldr	r3, [r7, #32]
 8011dae:	b29a      	uxth	r2, r3
 8011db0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011db4:	4907      	ldr	r1, [pc, #28]	@ (8011dd4 <mb_recv+0x198>)
 8011db6:	4808      	ldr	r0, [pc, #32]	@ (8011dd8 <mb_recv+0x19c>)
 8011db8:	f7f3 f924 	bl	8005004 <HAL_UART_Transmit>
                     b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7]);
    }

    xMBPortEventPost(EV_FRAME_RECEIVED);
 8011dbc:	2001      	movs	r0, #1
 8011dbe:	f7ff fd47 	bl	8011850 <xMBPortEventPost>
    return ERR_OK;
 8011dc2:	2300      	movs	r3, #0
}
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	3734      	adds	r7, #52	@ 0x34
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011dcc:	0801609c 	.word	0x0801609c
 8011dd0:	08015df8 	.word	0x08015df8
 8011dd4:	20000254 	.word	0x20000254
 8011dd8:	2000020c 	.word	0x2000020c
 8011ddc:	08015e78 	.word	0x08015e78
 8011de0:	08015ea4 	.word	0x08015ea4
 8011de4:	200085e8 	.word	0x200085e8
 8011de8:	08015ec4 	.word	0x08015ec4
 8011dec:	200085ec 	.word	0x200085ec
 8011df0:	08015ed4 	.word	0x08015ed4
 8011df4:	08015eec 	.word	0x08015eec

08011df8 <eMBTCPDoInit>:
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b084      	sub	sp, #16
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	4603      	mov	r3, r0
 8011e00:	80fb      	strh	r3, [r7, #6]
 8011e02:	2300      	movs	r3, #0
 8011e04:	73fb      	strb	r3, [r7, #15]
 8011e06:	88fb      	ldrh	r3, [r7, #6]
 8011e08:	4618      	mov	r0, r3
 8011e0a:	f7ff fd91 	bl	8011930 <xMBTCPPortInit>
 8011e0e:	4603      	mov	r3, r0
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d101      	bne.n	8011e18 <eMBTCPDoInit+0x20>
 8011e14:	2303      	movs	r3, #3
 8011e16:	73fb      	strb	r3, [r7, #15]
 8011e18:	7bfb      	ldrb	r3, [r7, #15]
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	3710      	adds	r7, #16
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	bd80      	pop	{r7, pc}

08011e22 <eMBTCPStart>:
 8011e22:	b480      	push	{r7}
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	bf00      	nop
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2e:	4770      	bx	lr

08011e30 <eMBTCPStop>:
 8011e30:	b580      	push	{r7, lr}
 8011e32:	af00      	add	r7, sp, #0
 8011e34:	f7ff fdda 	bl	80119ec <vMBTCPPortDisable>
 8011e38:	bf00      	nop
 8011e3a:	bd80      	pop	{r7, pc}

08011e3c <eMBTCPReceive>:
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b088      	sub	sp, #32
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	60f8      	str	r0, [r7, #12]
 8011e44:	60b9      	str	r1, [r7, #8]
 8011e46:	607a      	str	r2, [r7, #4]
 8011e48:	2305      	movs	r3, #5
 8011e4a:	77fb      	strb	r3, [r7, #31]
 8011e4c:	f107 0216 	add.w	r2, r7, #22
 8011e50:	f107 0318 	add.w	r3, r7, #24
 8011e54:	4611      	mov	r1, r2
 8011e56:	4618      	mov	r0, r3
 8011e58:	f7ff fe02 	bl	8011a60 <xMBTCPPortGetRequest>
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d01d      	beq.n	8011e9e <eMBTCPReceive+0x62>
 8011e62:	69bb      	ldr	r3, [r7, #24]
 8011e64:	3302      	adds	r3, #2
 8011e66:	781b      	ldrb	r3, [r3, #0]
 8011e68:	021b      	lsls	r3, r3, #8
 8011e6a:	83bb      	strh	r3, [r7, #28]
 8011e6c:	69bb      	ldr	r3, [r7, #24]
 8011e6e:	3303      	adds	r3, #3
 8011e70:	781b      	ldrb	r3, [r3, #0]
 8011e72:	461a      	mov	r2, r3
 8011e74:	8bbb      	ldrh	r3, [r7, #28]
 8011e76:	4313      	orrs	r3, r2
 8011e78:	83bb      	strh	r3, [r7, #28]
 8011e7a:	8bbb      	ldrh	r3, [r7, #28]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d110      	bne.n	8011ea2 <eMBTCPReceive+0x66>
 8011e80:	69bb      	ldr	r3, [r7, #24]
 8011e82:	1dda      	adds	r2, r3, #7
 8011e84:	68bb      	ldr	r3, [r7, #8]
 8011e86:	601a      	str	r2, [r3, #0]
 8011e88:	8afb      	ldrh	r3, [r7, #22]
 8011e8a:	3b07      	subs	r3, #7
 8011e8c:	b29a      	uxth	r2, r3
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	801a      	strh	r2, [r3, #0]
 8011e92:	2300      	movs	r3, #0
 8011e94:	77fb      	strb	r3, [r7, #31]
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	22ff      	movs	r2, #255	@ 0xff
 8011e9a:	701a      	strb	r2, [r3, #0]
 8011e9c:	e001      	b.n	8011ea2 <eMBTCPReceive+0x66>
 8011e9e:	2305      	movs	r3, #5
 8011ea0:	77fb      	strb	r3, [r7, #31]
 8011ea2:	7ffb      	ldrb	r3, [r7, #31]
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	3720      	adds	r7, #32
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	bd80      	pop	{r7, pc}

08011eac <eMBTCPSend>:
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b086      	sub	sp, #24
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	6039      	str	r1, [r7, #0]
 8011eb6:	71fb      	strb	r3, [r7, #7]
 8011eb8:	4613      	mov	r3, r2
 8011eba:	80bb      	strh	r3, [r7, #4]
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	75fb      	strb	r3, [r7, #23]
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	3b07      	subs	r3, #7
 8011ec4:	613b      	str	r3, [r7, #16]
 8011ec6:	88bb      	ldrh	r3, [r7, #4]
 8011ec8:	3307      	adds	r3, #7
 8011eca:	81fb      	strh	r3, [r7, #14]
 8011ecc:	88bb      	ldrh	r3, [r7, #4]
 8011ece:	3301      	adds	r3, #1
 8011ed0:	121a      	asrs	r2, r3, #8
 8011ed2:	693b      	ldr	r3, [r7, #16]
 8011ed4:	3304      	adds	r3, #4
 8011ed6:	b2d2      	uxtb	r2, r2
 8011ed8:	701a      	strb	r2, [r3, #0]
 8011eda:	88bb      	ldrh	r3, [r7, #4]
 8011edc:	b2da      	uxtb	r2, r3
 8011ede:	693b      	ldr	r3, [r7, #16]
 8011ee0:	3305      	adds	r3, #5
 8011ee2:	3201      	adds	r2, #1
 8011ee4:	b2d2      	uxtb	r2, r2
 8011ee6:	701a      	strb	r2, [r3, #0]
 8011ee8:	89fb      	ldrh	r3, [r7, #14]
 8011eea:	4619      	mov	r1, r3
 8011eec:	6938      	ldr	r0, [r7, #16]
 8011eee:	f7ff fe05 	bl	8011afc <xMBTCPPortSendResponse>
 8011ef2:	4603      	mov	r3, r0
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d101      	bne.n	8011efc <eMBTCPSend+0x50>
 8011ef8:	2305      	movs	r3, #5
 8011efa:	75fb      	strb	r3, [r7, #23]
 8011efc:	7dfb      	ldrb	r3, [r7, #23]
 8011efe:	4618      	mov	r0, r3
 8011f00:	3718      	adds	r7, #24
 8011f02:	46bd      	mov	sp, r7
 8011f04:	bd80      	pop	{r7, pc}
	...

08011f08 <__assert_func>:
 8011f08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011f0a:	4614      	mov	r4, r2
 8011f0c:	461a      	mov	r2, r3
 8011f0e:	4b09      	ldr	r3, [pc, #36]	@ (8011f34 <__assert_func+0x2c>)
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	4605      	mov	r5, r0
 8011f14:	68d8      	ldr	r0, [r3, #12]
 8011f16:	b14c      	cbz	r4, 8011f2c <__assert_func+0x24>
 8011f18:	4b07      	ldr	r3, [pc, #28]	@ (8011f38 <__assert_func+0x30>)
 8011f1a:	9100      	str	r1, [sp, #0]
 8011f1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011f20:	4906      	ldr	r1, [pc, #24]	@ (8011f3c <__assert_func+0x34>)
 8011f22:	462b      	mov	r3, r5
 8011f24:	f000 f8f0 	bl	8012108 <fiprintf>
 8011f28:	f000 fa7b 	bl	8012422 <abort>
 8011f2c:	4b04      	ldr	r3, [pc, #16]	@ (8011f40 <__assert_func+0x38>)
 8011f2e:	461c      	mov	r4, r3
 8011f30:	e7f3      	b.n	8011f1a <__assert_func+0x12>
 8011f32:	bf00      	nop
 8011f34:	200000b8 	.word	0x200000b8
 8011f38:	080160a4 	.word	0x080160a4
 8011f3c:	080160b1 	.word	0x080160b1
 8011f40:	080160df 	.word	0x080160df

08011f44 <rand>:
 8011f44:	4b16      	ldr	r3, [pc, #88]	@ (8011fa0 <rand+0x5c>)
 8011f46:	b510      	push	{r4, lr}
 8011f48:	681c      	ldr	r4, [r3, #0]
 8011f4a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011f4c:	b9b3      	cbnz	r3, 8011f7c <rand+0x38>
 8011f4e:	2018      	movs	r0, #24
 8011f50:	f000 fab8 	bl	80124c4 <malloc>
 8011f54:	4602      	mov	r2, r0
 8011f56:	6320      	str	r0, [r4, #48]	@ 0x30
 8011f58:	b920      	cbnz	r0, 8011f64 <rand+0x20>
 8011f5a:	4b12      	ldr	r3, [pc, #72]	@ (8011fa4 <rand+0x60>)
 8011f5c:	4812      	ldr	r0, [pc, #72]	@ (8011fa8 <rand+0x64>)
 8011f5e:	2152      	movs	r1, #82	@ 0x52
 8011f60:	f7ff ffd2 	bl	8011f08 <__assert_func>
 8011f64:	4911      	ldr	r1, [pc, #68]	@ (8011fac <rand+0x68>)
 8011f66:	4b12      	ldr	r3, [pc, #72]	@ (8011fb0 <rand+0x6c>)
 8011f68:	e9c0 1300 	strd	r1, r3, [r0]
 8011f6c:	4b11      	ldr	r3, [pc, #68]	@ (8011fb4 <rand+0x70>)
 8011f6e:	6083      	str	r3, [r0, #8]
 8011f70:	230b      	movs	r3, #11
 8011f72:	8183      	strh	r3, [r0, #12]
 8011f74:	2100      	movs	r1, #0
 8011f76:	2001      	movs	r0, #1
 8011f78:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011f7c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011f7e:	480e      	ldr	r0, [pc, #56]	@ (8011fb8 <rand+0x74>)
 8011f80:	690b      	ldr	r3, [r1, #16]
 8011f82:	694c      	ldr	r4, [r1, #20]
 8011f84:	4a0d      	ldr	r2, [pc, #52]	@ (8011fbc <rand+0x78>)
 8011f86:	4358      	muls	r0, r3
 8011f88:	fb02 0004 	mla	r0, r2, r4, r0
 8011f8c:	fba3 3202 	umull	r3, r2, r3, r2
 8011f90:	3301      	adds	r3, #1
 8011f92:	eb40 0002 	adc.w	r0, r0, r2
 8011f96:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8011f9a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8011f9e:	bd10      	pop	{r4, pc}
 8011fa0:	200000b8 	.word	0x200000b8
 8011fa4:	080160e0 	.word	0x080160e0
 8011fa8:	080160f7 	.word	0x080160f7
 8011fac:	abcd330e 	.word	0xabcd330e
 8011fb0:	e66d1234 	.word	0xe66d1234
 8011fb4:	0005deec 	.word	0x0005deec
 8011fb8:	5851f42d 	.word	0x5851f42d
 8011fbc:	4c957f2d 	.word	0x4c957f2d

08011fc0 <std>:
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	b510      	push	{r4, lr}
 8011fc4:	4604      	mov	r4, r0
 8011fc6:	e9c0 3300 	strd	r3, r3, [r0]
 8011fca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011fce:	6083      	str	r3, [r0, #8]
 8011fd0:	8181      	strh	r1, [r0, #12]
 8011fd2:	6643      	str	r3, [r0, #100]	@ 0x64
 8011fd4:	81c2      	strh	r2, [r0, #14]
 8011fd6:	6183      	str	r3, [r0, #24]
 8011fd8:	4619      	mov	r1, r3
 8011fda:	2208      	movs	r2, #8
 8011fdc:	305c      	adds	r0, #92	@ 0x5c
 8011fde:	f000 f978 	bl	80122d2 <memset>
 8011fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8012018 <std+0x58>)
 8011fe4:	6263      	str	r3, [r4, #36]	@ 0x24
 8011fe6:	4b0d      	ldr	r3, [pc, #52]	@ (801201c <std+0x5c>)
 8011fe8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011fea:	4b0d      	ldr	r3, [pc, #52]	@ (8012020 <std+0x60>)
 8011fec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011fee:	4b0d      	ldr	r3, [pc, #52]	@ (8012024 <std+0x64>)
 8011ff0:	6323      	str	r3, [r4, #48]	@ 0x30
 8011ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8012028 <std+0x68>)
 8011ff4:	6224      	str	r4, [r4, #32]
 8011ff6:	429c      	cmp	r4, r3
 8011ff8:	d006      	beq.n	8012008 <std+0x48>
 8011ffa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011ffe:	4294      	cmp	r4, r2
 8012000:	d002      	beq.n	8012008 <std+0x48>
 8012002:	33d0      	adds	r3, #208	@ 0xd0
 8012004:	429c      	cmp	r4, r3
 8012006:	d105      	bne.n	8012014 <std+0x54>
 8012008:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801200c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012010:	f000 b9f6 	b.w	8012400 <__retarget_lock_init_recursive>
 8012014:	bd10      	pop	{r4, pc}
 8012016:	bf00      	nop
 8012018:	080121f9 	.word	0x080121f9
 801201c:	0801221b 	.word	0x0801221b
 8012020:	08012253 	.word	0x08012253
 8012024:	08012277 	.word	0x08012277
 8012028:	200085f4 	.word	0x200085f4

0801202c <stdio_exit_handler>:
 801202c:	4a02      	ldr	r2, [pc, #8]	@ (8012038 <stdio_exit_handler+0xc>)
 801202e:	4903      	ldr	r1, [pc, #12]	@ (801203c <stdio_exit_handler+0x10>)
 8012030:	4803      	ldr	r0, [pc, #12]	@ (8012040 <stdio_exit_handler+0x14>)
 8012032:	f000 b87b 	b.w	801212c <_fwalk_sglue>
 8012036:	bf00      	nop
 8012038:	200000ac 	.word	0x200000ac
 801203c:	08012f85 	.word	0x08012f85
 8012040:	200000bc 	.word	0x200000bc

08012044 <cleanup_stdio>:
 8012044:	6841      	ldr	r1, [r0, #4]
 8012046:	4b0c      	ldr	r3, [pc, #48]	@ (8012078 <cleanup_stdio+0x34>)
 8012048:	4299      	cmp	r1, r3
 801204a:	b510      	push	{r4, lr}
 801204c:	4604      	mov	r4, r0
 801204e:	d001      	beq.n	8012054 <cleanup_stdio+0x10>
 8012050:	f000 ff98 	bl	8012f84 <_fflush_r>
 8012054:	68a1      	ldr	r1, [r4, #8]
 8012056:	4b09      	ldr	r3, [pc, #36]	@ (801207c <cleanup_stdio+0x38>)
 8012058:	4299      	cmp	r1, r3
 801205a:	d002      	beq.n	8012062 <cleanup_stdio+0x1e>
 801205c:	4620      	mov	r0, r4
 801205e:	f000 ff91 	bl	8012f84 <_fflush_r>
 8012062:	68e1      	ldr	r1, [r4, #12]
 8012064:	4b06      	ldr	r3, [pc, #24]	@ (8012080 <cleanup_stdio+0x3c>)
 8012066:	4299      	cmp	r1, r3
 8012068:	d004      	beq.n	8012074 <cleanup_stdio+0x30>
 801206a:	4620      	mov	r0, r4
 801206c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012070:	f000 bf88 	b.w	8012f84 <_fflush_r>
 8012074:	bd10      	pop	{r4, pc}
 8012076:	bf00      	nop
 8012078:	200085f4 	.word	0x200085f4
 801207c:	2000865c 	.word	0x2000865c
 8012080:	200086c4 	.word	0x200086c4

08012084 <global_stdio_init.part.0>:
 8012084:	b510      	push	{r4, lr}
 8012086:	4b0b      	ldr	r3, [pc, #44]	@ (80120b4 <global_stdio_init.part.0+0x30>)
 8012088:	4c0b      	ldr	r4, [pc, #44]	@ (80120b8 <global_stdio_init.part.0+0x34>)
 801208a:	4a0c      	ldr	r2, [pc, #48]	@ (80120bc <global_stdio_init.part.0+0x38>)
 801208c:	601a      	str	r2, [r3, #0]
 801208e:	4620      	mov	r0, r4
 8012090:	2200      	movs	r2, #0
 8012092:	2104      	movs	r1, #4
 8012094:	f7ff ff94 	bl	8011fc0 <std>
 8012098:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801209c:	2201      	movs	r2, #1
 801209e:	2109      	movs	r1, #9
 80120a0:	f7ff ff8e 	bl	8011fc0 <std>
 80120a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80120a8:	2202      	movs	r2, #2
 80120aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120ae:	2112      	movs	r1, #18
 80120b0:	f7ff bf86 	b.w	8011fc0 <std>
 80120b4:	2000872c 	.word	0x2000872c
 80120b8:	200085f4 	.word	0x200085f4
 80120bc:	0801202d 	.word	0x0801202d

080120c0 <__sfp_lock_acquire>:
 80120c0:	4801      	ldr	r0, [pc, #4]	@ (80120c8 <__sfp_lock_acquire+0x8>)
 80120c2:	f000 b99e 	b.w	8012402 <__retarget_lock_acquire_recursive>
 80120c6:	bf00      	nop
 80120c8:	20008735 	.word	0x20008735

080120cc <__sfp_lock_release>:
 80120cc:	4801      	ldr	r0, [pc, #4]	@ (80120d4 <__sfp_lock_release+0x8>)
 80120ce:	f000 b999 	b.w	8012404 <__retarget_lock_release_recursive>
 80120d2:	bf00      	nop
 80120d4:	20008735 	.word	0x20008735

080120d8 <__sinit>:
 80120d8:	b510      	push	{r4, lr}
 80120da:	4604      	mov	r4, r0
 80120dc:	f7ff fff0 	bl	80120c0 <__sfp_lock_acquire>
 80120e0:	6a23      	ldr	r3, [r4, #32]
 80120e2:	b11b      	cbz	r3, 80120ec <__sinit+0x14>
 80120e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120e8:	f7ff bff0 	b.w	80120cc <__sfp_lock_release>
 80120ec:	4b04      	ldr	r3, [pc, #16]	@ (8012100 <__sinit+0x28>)
 80120ee:	6223      	str	r3, [r4, #32]
 80120f0:	4b04      	ldr	r3, [pc, #16]	@ (8012104 <__sinit+0x2c>)
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d1f5      	bne.n	80120e4 <__sinit+0xc>
 80120f8:	f7ff ffc4 	bl	8012084 <global_stdio_init.part.0>
 80120fc:	e7f2      	b.n	80120e4 <__sinit+0xc>
 80120fe:	bf00      	nop
 8012100:	08012045 	.word	0x08012045
 8012104:	2000872c 	.word	0x2000872c

08012108 <fiprintf>:
 8012108:	b40e      	push	{r1, r2, r3}
 801210a:	b503      	push	{r0, r1, lr}
 801210c:	4601      	mov	r1, r0
 801210e:	ab03      	add	r3, sp, #12
 8012110:	4805      	ldr	r0, [pc, #20]	@ (8012128 <fiprintf+0x20>)
 8012112:	f853 2b04 	ldr.w	r2, [r3], #4
 8012116:	6800      	ldr	r0, [r0, #0]
 8012118:	9301      	str	r3, [sp, #4]
 801211a:	f000 fc0b 	bl	8012934 <_vfiprintf_r>
 801211e:	b002      	add	sp, #8
 8012120:	f85d eb04 	ldr.w	lr, [sp], #4
 8012124:	b003      	add	sp, #12
 8012126:	4770      	bx	lr
 8012128:	200000b8 	.word	0x200000b8

0801212c <_fwalk_sglue>:
 801212c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012130:	4607      	mov	r7, r0
 8012132:	4688      	mov	r8, r1
 8012134:	4614      	mov	r4, r2
 8012136:	2600      	movs	r6, #0
 8012138:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801213c:	f1b9 0901 	subs.w	r9, r9, #1
 8012140:	d505      	bpl.n	801214e <_fwalk_sglue+0x22>
 8012142:	6824      	ldr	r4, [r4, #0]
 8012144:	2c00      	cmp	r4, #0
 8012146:	d1f7      	bne.n	8012138 <_fwalk_sglue+0xc>
 8012148:	4630      	mov	r0, r6
 801214a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801214e:	89ab      	ldrh	r3, [r5, #12]
 8012150:	2b01      	cmp	r3, #1
 8012152:	d907      	bls.n	8012164 <_fwalk_sglue+0x38>
 8012154:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012158:	3301      	adds	r3, #1
 801215a:	d003      	beq.n	8012164 <_fwalk_sglue+0x38>
 801215c:	4629      	mov	r1, r5
 801215e:	4638      	mov	r0, r7
 8012160:	47c0      	blx	r8
 8012162:	4306      	orrs	r6, r0
 8012164:	3568      	adds	r5, #104	@ 0x68
 8012166:	e7e9      	b.n	801213c <_fwalk_sglue+0x10>

08012168 <iprintf>:
 8012168:	b40f      	push	{r0, r1, r2, r3}
 801216a:	b507      	push	{r0, r1, r2, lr}
 801216c:	4906      	ldr	r1, [pc, #24]	@ (8012188 <iprintf+0x20>)
 801216e:	ab04      	add	r3, sp, #16
 8012170:	6808      	ldr	r0, [r1, #0]
 8012172:	f853 2b04 	ldr.w	r2, [r3], #4
 8012176:	6881      	ldr	r1, [r0, #8]
 8012178:	9301      	str	r3, [sp, #4]
 801217a:	f000 fbdb 	bl	8012934 <_vfiprintf_r>
 801217e:	b003      	add	sp, #12
 8012180:	f85d eb04 	ldr.w	lr, [sp], #4
 8012184:	b004      	add	sp, #16
 8012186:	4770      	bx	lr
 8012188:	200000b8 	.word	0x200000b8

0801218c <sniprintf>:
 801218c:	b40c      	push	{r2, r3}
 801218e:	b530      	push	{r4, r5, lr}
 8012190:	4b18      	ldr	r3, [pc, #96]	@ (80121f4 <sniprintf+0x68>)
 8012192:	1e0c      	subs	r4, r1, #0
 8012194:	681d      	ldr	r5, [r3, #0]
 8012196:	b09d      	sub	sp, #116	@ 0x74
 8012198:	da08      	bge.n	80121ac <sniprintf+0x20>
 801219a:	238b      	movs	r3, #139	@ 0x8b
 801219c:	602b      	str	r3, [r5, #0]
 801219e:	f04f 30ff 	mov.w	r0, #4294967295
 80121a2:	b01d      	add	sp, #116	@ 0x74
 80121a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80121a8:	b002      	add	sp, #8
 80121aa:	4770      	bx	lr
 80121ac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80121b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80121b4:	f04f 0300 	mov.w	r3, #0
 80121b8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80121ba:	bf14      	ite	ne
 80121bc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80121c0:	4623      	moveq	r3, r4
 80121c2:	9304      	str	r3, [sp, #16]
 80121c4:	9307      	str	r3, [sp, #28]
 80121c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80121ca:	9002      	str	r0, [sp, #8]
 80121cc:	9006      	str	r0, [sp, #24]
 80121ce:	f8ad 3016 	strh.w	r3, [sp, #22]
 80121d2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80121d4:	ab21      	add	r3, sp, #132	@ 0x84
 80121d6:	a902      	add	r1, sp, #8
 80121d8:	4628      	mov	r0, r5
 80121da:	9301      	str	r3, [sp, #4]
 80121dc:	f000 fa84 	bl	80126e8 <_svfiprintf_r>
 80121e0:	1c43      	adds	r3, r0, #1
 80121e2:	bfbc      	itt	lt
 80121e4:	238b      	movlt	r3, #139	@ 0x8b
 80121e6:	602b      	strlt	r3, [r5, #0]
 80121e8:	2c00      	cmp	r4, #0
 80121ea:	d0da      	beq.n	80121a2 <sniprintf+0x16>
 80121ec:	9b02      	ldr	r3, [sp, #8]
 80121ee:	2200      	movs	r2, #0
 80121f0:	701a      	strb	r2, [r3, #0]
 80121f2:	e7d6      	b.n	80121a2 <sniprintf+0x16>
 80121f4:	200000b8 	.word	0x200000b8

080121f8 <__sread>:
 80121f8:	b510      	push	{r4, lr}
 80121fa:	460c      	mov	r4, r1
 80121fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012200:	f000 f8b6 	bl	8012370 <_read_r>
 8012204:	2800      	cmp	r0, #0
 8012206:	bfab      	itete	ge
 8012208:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801220a:	89a3      	ldrhlt	r3, [r4, #12]
 801220c:	181b      	addge	r3, r3, r0
 801220e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012212:	bfac      	ite	ge
 8012214:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012216:	81a3      	strhlt	r3, [r4, #12]
 8012218:	bd10      	pop	{r4, pc}

0801221a <__swrite>:
 801221a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801221e:	461f      	mov	r7, r3
 8012220:	898b      	ldrh	r3, [r1, #12]
 8012222:	05db      	lsls	r3, r3, #23
 8012224:	4605      	mov	r5, r0
 8012226:	460c      	mov	r4, r1
 8012228:	4616      	mov	r6, r2
 801222a:	d505      	bpl.n	8012238 <__swrite+0x1e>
 801222c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012230:	2302      	movs	r3, #2
 8012232:	2200      	movs	r2, #0
 8012234:	f000 f88a 	bl	801234c <_lseek_r>
 8012238:	89a3      	ldrh	r3, [r4, #12]
 801223a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801223e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012242:	81a3      	strh	r3, [r4, #12]
 8012244:	4632      	mov	r2, r6
 8012246:	463b      	mov	r3, r7
 8012248:	4628      	mov	r0, r5
 801224a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801224e:	f000 b8a1 	b.w	8012394 <_write_r>

08012252 <__sseek>:
 8012252:	b510      	push	{r4, lr}
 8012254:	460c      	mov	r4, r1
 8012256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801225a:	f000 f877 	bl	801234c <_lseek_r>
 801225e:	1c43      	adds	r3, r0, #1
 8012260:	89a3      	ldrh	r3, [r4, #12]
 8012262:	bf15      	itete	ne
 8012264:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012266:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801226a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801226e:	81a3      	strheq	r3, [r4, #12]
 8012270:	bf18      	it	ne
 8012272:	81a3      	strhne	r3, [r4, #12]
 8012274:	bd10      	pop	{r4, pc}

08012276 <__sclose>:
 8012276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801227a:	f000 b857 	b.w	801232c <_close_r>

0801227e <memcmp>:
 801227e:	b510      	push	{r4, lr}
 8012280:	3901      	subs	r1, #1
 8012282:	4402      	add	r2, r0
 8012284:	4290      	cmp	r0, r2
 8012286:	d101      	bne.n	801228c <memcmp+0xe>
 8012288:	2000      	movs	r0, #0
 801228a:	e005      	b.n	8012298 <memcmp+0x1a>
 801228c:	7803      	ldrb	r3, [r0, #0]
 801228e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012292:	42a3      	cmp	r3, r4
 8012294:	d001      	beq.n	801229a <memcmp+0x1c>
 8012296:	1b18      	subs	r0, r3, r4
 8012298:	bd10      	pop	{r4, pc}
 801229a:	3001      	adds	r0, #1
 801229c:	e7f2      	b.n	8012284 <memcmp+0x6>

0801229e <memmove>:
 801229e:	4288      	cmp	r0, r1
 80122a0:	b510      	push	{r4, lr}
 80122a2:	eb01 0402 	add.w	r4, r1, r2
 80122a6:	d902      	bls.n	80122ae <memmove+0x10>
 80122a8:	4284      	cmp	r4, r0
 80122aa:	4623      	mov	r3, r4
 80122ac:	d807      	bhi.n	80122be <memmove+0x20>
 80122ae:	1e43      	subs	r3, r0, #1
 80122b0:	42a1      	cmp	r1, r4
 80122b2:	d008      	beq.n	80122c6 <memmove+0x28>
 80122b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80122b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80122bc:	e7f8      	b.n	80122b0 <memmove+0x12>
 80122be:	4402      	add	r2, r0
 80122c0:	4601      	mov	r1, r0
 80122c2:	428a      	cmp	r2, r1
 80122c4:	d100      	bne.n	80122c8 <memmove+0x2a>
 80122c6:	bd10      	pop	{r4, pc}
 80122c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80122cc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80122d0:	e7f7      	b.n	80122c2 <memmove+0x24>

080122d2 <memset>:
 80122d2:	4402      	add	r2, r0
 80122d4:	4603      	mov	r3, r0
 80122d6:	4293      	cmp	r3, r2
 80122d8:	d100      	bne.n	80122dc <memset+0xa>
 80122da:	4770      	bx	lr
 80122dc:	f803 1b01 	strb.w	r1, [r3], #1
 80122e0:	e7f9      	b.n	80122d6 <memset+0x4>

080122e2 <strncmp>:
 80122e2:	b510      	push	{r4, lr}
 80122e4:	b16a      	cbz	r2, 8012302 <strncmp+0x20>
 80122e6:	3901      	subs	r1, #1
 80122e8:	1884      	adds	r4, r0, r2
 80122ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122ee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80122f2:	429a      	cmp	r2, r3
 80122f4:	d103      	bne.n	80122fe <strncmp+0x1c>
 80122f6:	42a0      	cmp	r0, r4
 80122f8:	d001      	beq.n	80122fe <strncmp+0x1c>
 80122fa:	2a00      	cmp	r2, #0
 80122fc:	d1f5      	bne.n	80122ea <strncmp+0x8>
 80122fe:	1ad0      	subs	r0, r2, r3
 8012300:	bd10      	pop	{r4, pc}
 8012302:	4610      	mov	r0, r2
 8012304:	e7fc      	b.n	8012300 <strncmp+0x1e>

08012306 <strncpy>:
 8012306:	b510      	push	{r4, lr}
 8012308:	3901      	subs	r1, #1
 801230a:	4603      	mov	r3, r0
 801230c:	b132      	cbz	r2, 801231c <strncpy+0x16>
 801230e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012312:	f803 4b01 	strb.w	r4, [r3], #1
 8012316:	3a01      	subs	r2, #1
 8012318:	2c00      	cmp	r4, #0
 801231a:	d1f7      	bne.n	801230c <strncpy+0x6>
 801231c:	441a      	add	r2, r3
 801231e:	2100      	movs	r1, #0
 8012320:	4293      	cmp	r3, r2
 8012322:	d100      	bne.n	8012326 <strncpy+0x20>
 8012324:	bd10      	pop	{r4, pc}
 8012326:	f803 1b01 	strb.w	r1, [r3], #1
 801232a:	e7f9      	b.n	8012320 <strncpy+0x1a>

0801232c <_close_r>:
 801232c:	b538      	push	{r3, r4, r5, lr}
 801232e:	4d06      	ldr	r5, [pc, #24]	@ (8012348 <_close_r+0x1c>)
 8012330:	2300      	movs	r3, #0
 8012332:	4604      	mov	r4, r0
 8012334:	4608      	mov	r0, r1
 8012336:	602b      	str	r3, [r5, #0]
 8012338:	f7ee ff76 	bl	8001228 <_close>
 801233c:	1c43      	adds	r3, r0, #1
 801233e:	d102      	bne.n	8012346 <_close_r+0x1a>
 8012340:	682b      	ldr	r3, [r5, #0]
 8012342:	b103      	cbz	r3, 8012346 <_close_r+0x1a>
 8012344:	6023      	str	r3, [r4, #0]
 8012346:	bd38      	pop	{r3, r4, r5, pc}
 8012348:	20008730 	.word	0x20008730

0801234c <_lseek_r>:
 801234c:	b538      	push	{r3, r4, r5, lr}
 801234e:	4d07      	ldr	r5, [pc, #28]	@ (801236c <_lseek_r+0x20>)
 8012350:	4604      	mov	r4, r0
 8012352:	4608      	mov	r0, r1
 8012354:	4611      	mov	r1, r2
 8012356:	2200      	movs	r2, #0
 8012358:	602a      	str	r2, [r5, #0]
 801235a:	461a      	mov	r2, r3
 801235c:	f7ee ff8b 	bl	8001276 <_lseek>
 8012360:	1c43      	adds	r3, r0, #1
 8012362:	d102      	bne.n	801236a <_lseek_r+0x1e>
 8012364:	682b      	ldr	r3, [r5, #0]
 8012366:	b103      	cbz	r3, 801236a <_lseek_r+0x1e>
 8012368:	6023      	str	r3, [r4, #0]
 801236a:	bd38      	pop	{r3, r4, r5, pc}
 801236c:	20008730 	.word	0x20008730

08012370 <_read_r>:
 8012370:	b538      	push	{r3, r4, r5, lr}
 8012372:	4d07      	ldr	r5, [pc, #28]	@ (8012390 <_read_r+0x20>)
 8012374:	4604      	mov	r4, r0
 8012376:	4608      	mov	r0, r1
 8012378:	4611      	mov	r1, r2
 801237a:	2200      	movs	r2, #0
 801237c:	602a      	str	r2, [r5, #0]
 801237e:	461a      	mov	r2, r3
 8012380:	f7ee ff19 	bl	80011b6 <_read>
 8012384:	1c43      	adds	r3, r0, #1
 8012386:	d102      	bne.n	801238e <_read_r+0x1e>
 8012388:	682b      	ldr	r3, [r5, #0]
 801238a:	b103      	cbz	r3, 801238e <_read_r+0x1e>
 801238c:	6023      	str	r3, [r4, #0]
 801238e:	bd38      	pop	{r3, r4, r5, pc}
 8012390:	20008730 	.word	0x20008730

08012394 <_write_r>:
 8012394:	b538      	push	{r3, r4, r5, lr}
 8012396:	4d07      	ldr	r5, [pc, #28]	@ (80123b4 <_write_r+0x20>)
 8012398:	4604      	mov	r4, r0
 801239a:	4608      	mov	r0, r1
 801239c:	4611      	mov	r1, r2
 801239e:	2200      	movs	r2, #0
 80123a0:	602a      	str	r2, [r5, #0]
 80123a2:	461a      	mov	r2, r3
 80123a4:	f7ee ff24 	bl	80011f0 <_write>
 80123a8:	1c43      	adds	r3, r0, #1
 80123aa:	d102      	bne.n	80123b2 <_write_r+0x1e>
 80123ac:	682b      	ldr	r3, [r5, #0]
 80123ae:	b103      	cbz	r3, 80123b2 <_write_r+0x1e>
 80123b0:	6023      	str	r3, [r4, #0]
 80123b2:	bd38      	pop	{r3, r4, r5, pc}
 80123b4:	20008730 	.word	0x20008730

080123b8 <__libc_init_array>:
 80123b8:	b570      	push	{r4, r5, r6, lr}
 80123ba:	4d0d      	ldr	r5, [pc, #52]	@ (80123f0 <__libc_init_array+0x38>)
 80123bc:	4c0d      	ldr	r4, [pc, #52]	@ (80123f4 <__libc_init_array+0x3c>)
 80123be:	1b64      	subs	r4, r4, r5
 80123c0:	10a4      	asrs	r4, r4, #2
 80123c2:	2600      	movs	r6, #0
 80123c4:	42a6      	cmp	r6, r4
 80123c6:	d109      	bne.n	80123dc <__libc_init_array+0x24>
 80123c8:	4d0b      	ldr	r5, [pc, #44]	@ (80123f8 <__libc_init_array+0x40>)
 80123ca:	4c0c      	ldr	r4, [pc, #48]	@ (80123fc <__libc_init_array+0x44>)
 80123cc:	f000 ffa4 	bl	8013318 <_init>
 80123d0:	1b64      	subs	r4, r4, r5
 80123d2:	10a4      	asrs	r4, r4, #2
 80123d4:	2600      	movs	r6, #0
 80123d6:	42a6      	cmp	r6, r4
 80123d8:	d105      	bne.n	80123e6 <__libc_init_array+0x2e>
 80123da:	bd70      	pop	{r4, r5, r6, pc}
 80123dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80123e0:	4798      	blx	r3
 80123e2:	3601      	adds	r6, #1
 80123e4:	e7ee      	b.n	80123c4 <__libc_init_array+0xc>
 80123e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80123ea:	4798      	blx	r3
 80123ec:	3601      	adds	r6, #1
 80123ee:	e7f2      	b.n	80123d6 <__libc_init_array+0x1e>
 80123f0:	0801618c 	.word	0x0801618c
 80123f4:	0801618c 	.word	0x0801618c
 80123f8:	0801618c 	.word	0x0801618c
 80123fc:	08016190 	.word	0x08016190

08012400 <__retarget_lock_init_recursive>:
 8012400:	4770      	bx	lr

08012402 <__retarget_lock_acquire_recursive>:
 8012402:	4770      	bx	lr

08012404 <__retarget_lock_release_recursive>:
 8012404:	4770      	bx	lr

08012406 <memcpy>:
 8012406:	440a      	add	r2, r1
 8012408:	4291      	cmp	r1, r2
 801240a:	f100 33ff 	add.w	r3, r0, #4294967295
 801240e:	d100      	bne.n	8012412 <memcpy+0xc>
 8012410:	4770      	bx	lr
 8012412:	b510      	push	{r4, lr}
 8012414:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012418:	f803 4f01 	strb.w	r4, [r3, #1]!
 801241c:	4291      	cmp	r1, r2
 801241e:	d1f9      	bne.n	8012414 <memcpy+0xe>
 8012420:	bd10      	pop	{r4, pc}

08012422 <abort>:
 8012422:	b508      	push	{r3, lr}
 8012424:	2006      	movs	r0, #6
 8012426:	f000 fe91 	bl	801314c <raise>
 801242a:	2001      	movs	r0, #1
 801242c:	f7ee feb8 	bl	80011a0 <_exit>

08012430 <_free_r>:
 8012430:	b538      	push	{r3, r4, r5, lr}
 8012432:	4605      	mov	r5, r0
 8012434:	2900      	cmp	r1, #0
 8012436:	d041      	beq.n	80124bc <_free_r+0x8c>
 8012438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801243c:	1f0c      	subs	r4, r1, #4
 801243e:	2b00      	cmp	r3, #0
 8012440:	bfb8      	it	lt
 8012442:	18e4      	addlt	r4, r4, r3
 8012444:	f000 f8e8 	bl	8012618 <__malloc_lock>
 8012448:	4a1d      	ldr	r2, [pc, #116]	@ (80124c0 <_free_r+0x90>)
 801244a:	6813      	ldr	r3, [r2, #0]
 801244c:	b933      	cbnz	r3, 801245c <_free_r+0x2c>
 801244e:	6063      	str	r3, [r4, #4]
 8012450:	6014      	str	r4, [r2, #0]
 8012452:	4628      	mov	r0, r5
 8012454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012458:	f000 b8e4 	b.w	8012624 <__malloc_unlock>
 801245c:	42a3      	cmp	r3, r4
 801245e:	d908      	bls.n	8012472 <_free_r+0x42>
 8012460:	6820      	ldr	r0, [r4, #0]
 8012462:	1821      	adds	r1, r4, r0
 8012464:	428b      	cmp	r3, r1
 8012466:	bf01      	itttt	eq
 8012468:	6819      	ldreq	r1, [r3, #0]
 801246a:	685b      	ldreq	r3, [r3, #4]
 801246c:	1809      	addeq	r1, r1, r0
 801246e:	6021      	streq	r1, [r4, #0]
 8012470:	e7ed      	b.n	801244e <_free_r+0x1e>
 8012472:	461a      	mov	r2, r3
 8012474:	685b      	ldr	r3, [r3, #4]
 8012476:	b10b      	cbz	r3, 801247c <_free_r+0x4c>
 8012478:	42a3      	cmp	r3, r4
 801247a:	d9fa      	bls.n	8012472 <_free_r+0x42>
 801247c:	6811      	ldr	r1, [r2, #0]
 801247e:	1850      	adds	r0, r2, r1
 8012480:	42a0      	cmp	r0, r4
 8012482:	d10b      	bne.n	801249c <_free_r+0x6c>
 8012484:	6820      	ldr	r0, [r4, #0]
 8012486:	4401      	add	r1, r0
 8012488:	1850      	adds	r0, r2, r1
 801248a:	4283      	cmp	r3, r0
 801248c:	6011      	str	r1, [r2, #0]
 801248e:	d1e0      	bne.n	8012452 <_free_r+0x22>
 8012490:	6818      	ldr	r0, [r3, #0]
 8012492:	685b      	ldr	r3, [r3, #4]
 8012494:	6053      	str	r3, [r2, #4]
 8012496:	4408      	add	r0, r1
 8012498:	6010      	str	r0, [r2, #0]
 801249a:	e7da      	b.n	8012452 <_free_r+0x22>
 801249c:	d902      	bls.n	80124a4 <_free_r+0x74>
 801249e:	230c      	movs	r3, #12
 80124a0:	602b      	str	r3, [r5, #0]
 80124a2:	e7d6      	b.n	8012452 <_free_r+0x22>
 80124a4:	6820      	ldr	r0, [r4, #0]
 80124a6:	1821      	adds	r1, r4, r0
 80124a8:	428b      	cmp	r3, r1
 80124aa:	bf04      	itt	eq
 80124ac:	6819      	ldreq	r1, [r3, #0]
 80124ae:	685b      	ldreq	r3, [r3, #4]
 80124b0:	6063      	str	r3, [r4, #4]
 80124b2:	bf04      	itt	eq
 80124b4:	1809      	addeq	r1, r1, r0
 80124b6:	6021      	streq	r1, [r4, #0]
 80124b8:	6054      	str	r4, [r2, #4]
 80124ba:	e7ca      	b.n	8012452 <_free_r+0x22>
 80124bc:	bd38      	pop	{r3, r4, r5, pc}
 80124be:	bf00      	nop
 80124c0:	2000873c 	.word	0x2000873c

080124c4 <malloc>:
 80124c4:	4b02      	ldr	r3, [pc, #8]	@ (80124d0 <malloc+0xc>)
 80124c6:	4601      	mov	r1, r0
 80124c8:	6818      	ldr	r0, [r3, #0]
 80124ca:	f000 b825 	b.w	8012518 <_malloc_r>
 80124ce:	bf00      	nop
 80124d0:	200000b8 	.word	0x200000b8

080124d4 <sbrk_aligned>:
 80124d4:	b570      	push	{r4, r5, r6, lr}
 80124d6:	4e0f      	ldr	r6, [pc, #60]	@ (8012514 <sbrk_aligned+0x40>)
 80124d8:	460c      	mov	r4, r1
 80124da:	6831      	ldr	r1, [r6, #0]
 80124dc:	4605      	mov	r5, r0
 80124de:	b911      	cbnz	r1, 80124e6 <sbrk_aligned+0x12>
 80124e0:	f000 fe50 	bl	8013184 <_sbrk_r>
 80124e4:	6030      	str	r0, [r6, #0]
 80124e6:	4621      	mov	r1, r4
 80124e8:	4628      	mov	r0, r5
 80124ea:	f000 fe4b 	bl	8013184 <_sbrk_r>
 80124ee:	1c43      	adds	r3, r0, #1
 80124f0:	d103      	bne.n	80124fa <sbrk_aligned+0x26>
 80124f2:	f04f 34ff 	mov.w	r4, #4294967295
 80124f6:	4620      	mov	r0, r4
 80124f8:	bd70      	pop	{r4, r5, r6, pc}
 80124fa:	1cc4      	adds	r4, r0, #3
 80124fc:	f024 0403 	bic.w	r4, r4, #3
 8012500:	42a0      	cmp	r0, r4
 8012502:	d0f8      	beq.n	80124f6 <sbrk_aligned+0x22>
 8012504:	1a21      	subs	r1, r4, r0
 8012506:	4628      	mov	r0, r5
 8012508:	f000 fe3c 	bl	8013184 <_sbrk_r>
 801250c:	3001      	adds	r0, #1
 801250e:	d1f2      	bne.n	80124f6 <sbrk_aligned+0x22>
 8012510:	e7ef      	b.n	80124f2 <sbrk_aligned+0x1e>
 8012512:	bf00      	nop
 8012514:	20008738 	.word	0x20008738

08012518 <_malloc_r>:
 8012518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801251c:	1ccd      	adds	r5, r1, #3
 801251e:	f025 0503 	bic.w	r5, r5, #3
 8012522:	3508      	adds	r5, #8
 8012524:	2d0c      	cmp	r5, #12
 8012526:	bf38      	it	cc
 8012528:	250c      	movcc	r5, #12
 801252a:	2d00      	cmp	r5, #0
 801252c:	4606      	mov	r6, r0
 801252e:	db01      	blt.n	8012534 <_malloc_r+0x1c>
 8012530:	42a9      	cmp	r1, r5
 8012532:	d904      	bls.n	801253e <_malloc_r+0x26>
 8012534:	230c      	movs	r3, #12
 8012536:	6033      	str	r3, [r6, #0]
 8012538:	2000      	movs	r0, #0
 801253a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801253e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012614 <_malloc_r+0xfc>
 8012542:	f000 f869 	bl	8012618 <__malloc_lock>
 8012546:	f8d8 3000 	ldr.w	r3, [r8]
 801254a:	461c      	mov	r4, r3
 801254c:	bb44      	cbnz	r4, 80125a0 <_malloc_r+0x88>
 801254e:	4629      	mov	r1, r5
 8012550:	4630      	mov	r0, r6
 8012552:	f7ff ffbf 	bl	80124d4 <sbrk_aligned>
 8012556:	1c43      	adds	r3, r0, #1
 8012558:	4604      	mov	r4, r0
 801255a:	d158      	bne.n	801260e <_malloc_r+0xf6>
 801255c:	f8d8 4000 	ldr.w	r4, [r8]
 8012560:	4627      	mov	r7, r4
 8012562:	2f00      	cmp	r7, #0
 8012564:	d143      	bne.n	80125ee <_malloc_r+0xd6>
 8012566:	2c00      	cmp	r4, #0
 8012568:	d04b      	beq.n	8012602 <_malloc_r+0xea>
 801256a:	6823      	ldr	r3, [r4, #0]
 801256c:	4639      	mov	r1, r7
 801256e:	4630      	mov	r0, r6
 8012570:	eb04 0903 	add.w	r9, r4, r3
 8012574:	f000 fe06 	bl	8013184 <_sbrk_r>
 8012578:	4581      	cmp	r9, r0
 801257a:	d142      	bne.n	8012602 <_malloc_r+0xea>
 801257c:	6821      	ldr	r1, [r4, #0]
 801257e:	1a6d      	subs	r5, r5, r1
 8012580:	4629      	mov	r1, r5
 8012582:	4630      	mov	r0, r6
 8012584:	f7ff ffa6 	bl	80124d4 <sbrk_aligned>
 8012588:	3001      	adds	r0, #1
 801258a:	d03a      	beq.n	8012602 <_malloc_r+0xea>
 801258c:	6823      	ldr	r3, [r4, #0]
 801258e:	442b      	add	r3, r5
 8012590:	6023      	str	r3, [r4, #0]
 8012592:	f8d8 3000 	ldr.w	r3, [r8]
 8012596:	685a      	ldr	r2, [r3, #4]
 8012598:	bb62      	cbnz	r2, 80125f4 <_malloc_r+0xdc>
 801259a:	f8c8 7000 	str.w	r7, [r8]
 801259e:	e00f      	b.n	80125c0 <_malloc_r+0xa8>
 80125a0:	6822      	ldr	r2, [r4, #0]
 80125a2:	1b52      	subs	r2, r2, r5
 80125a4:	d420      	bmi.n	80125e8 <_malloc_r+0xd0>
 80125a6:	2a0b      	cmp	r2, #11
 80125a8:	d917      	bls.n	80125da <_malloc_r+0xc2>
 80125aa:	1961      	adds	r1, r4, r5
 80125ac:	42a3      	cmp	r3, r4
 80125ae:	6025      	str	r5, [r4, #0]
 80125b0:	bf18      	it	ne
 80125b2:	6059      	strne	r1, [r3, #4]
 80125b4:	6863      	ldr	r3, [r4, #4]
 80125b6:	bf08      	it	eq
 80125b8:	f8c8 1000 	streq.w	r1, [r8]
 80125bc:	5162      	str	r2, [r4, r5]
 80125be:	604b      	str	r3, [r1, #4]
 80125c0:	4630      	mov	r0, r6
 80125c2:	f000 f82f 	bl	8012624 <__malloc_unlock>
 80125c6:	f104 000b 	add.w	r0, r4, #11
 80125ca:	1d23      	adds	r3, r4, #4
 80125cc:	f020 0007 	bic.w	r0, r0, #7
 80125d0:	1ac2      	subs	r2, r0, r3
 80125d2:	bf1c      	itt	ne
 80125d4:	1a1b      	subne	r3, r3, r0
 80125d6:	50a3      	strne	r3, [r4, r2]
 80125d8:	e7af      	b.n	801253a <_malloc_r+0x22>
 80125da:	6862      	ldr	r2, [r4, #4]
 80125dc:	42a3      	cmp	r3, r4
 80125de:	bf0c      	ite	eq
 80125e0:	f8c8 2000 	streq.w	r2, [r8]
 80125e4:	605a      	strne	r2, [r3, #4]
 80125e6:	e7eb      	b.n	80125c0 <_malloc_r+0xa8>
 80125e8:	4623      	mov	r3, r4
 80125ea:	6864      	ldr	r4, [r4, #4]
 80125ec:	e7ae      	b.n	801254c <_malloc_r+0x34>
 80125ee:	463c      	mov	r4, r7
 80125f0:	687f      	ldr	r7, [r7, #4]
 80125f2:	e7b6      	b.n	8012562 <_malloc_r+0x4a>
 80125f4:	461a      	mov	r2, r3
 80125f6:	685b      	ldr	r3, [r3, #4]
 80125f8:	42a3      	cmp	r3, r4
 80125fa:	d1fb      	bne.n	80125f4 <_malloc_r+0xdc>
 80125fc:	2300      	movs	r3, #0
 80125fe:	6053      	str	r3, [r2, #4]
 8012600:	e7de      	b.n	80125c0 <_malloc_r+0xa8>
 8012602:	230c      	movs	r3, #12
 8012604:	6033      	str	r3, [r6, #0]
 8012606:	4630      	mov	r0, r6
 8012608:	f000 f80c 	bl	8012624 <__malloc_unlock>
 801260c:	e794      	b.n	8012538 <_malloc_r+0x20>
 801260e:	6005      	str	r5, [r0, #0]
 8012610:	e7d6      	b.n	80125c0 <_malloc_r+0xa8>
 8012612:	bf00      	nop
 8012614:	2000873c 	.word	0x2000873c

08012618 <__malloc_lock>:
 8012618:	4801      	ldr	r0, [pc, #4]	@ (8012620 <__malloc_lock+0x8>)
 801261a:	f7ff bef2 	b.w	8012402 <__retarget_lock_acquire_recursive>
 801261e:	bf00      	nop
 8012620:	20008734 	.word	0x20008734

08012624 <__malloc_unlock>:
 8012624:	4801      	ldr	r0, [pc, #4]	@ (801262c <__malloc_unlock+0x8>)
 8012626:	f7ff beed 	b.w	8012404 <__retarget_lock_release_recursive>
 801262a:	bf00      	nop
 801262c:	20008734 	.word	0x20008734

08012630 <__ssputs_r>:
 8012630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012634:	688e      	ldr	r6, [r1, #8]
 8012636:	461f      	mov	r7, r3
 8012638:	42be      	cmp	r6, r7
 801263a:	680b      	ldr	r3, [r1, #0]
 801263c:	4682      	mov	sl, r0
 801263e:	460c      	mov	r4, r1
 8012640:	4690      	mov	r8, r2
 8012642:	d82d      	bhi.n	80126a0 <__ssputs_r+0x70>
 8012644:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012648:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801264c:	d026      	beq.n	801269c <__ssputs_r+0x6c>
 801264e:	6965      	ldr	r5, [r4, #20]
 8012650:	6909      	ldr	r1, [r1, #16]
 8012652:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012656:	eba3 0901 	sub.w	r9, r3, r1
 801265a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801265e:	1c7b      	adds	r3, r7, #1
 8012660:	444b      	add	r3, r9
 8012662:	106d      	asrs	r5, r5, #1
 8012664:	429d      	cmp	r5, r3
 8012666:	bf38      	it	cc
 8012668:	461d      	movcc	r5, r3
 801266a:	0553      	lsls	r3, r2, #21
 801266c:	d527      	bpl.n	80126be <__ssputs_r+0x8e>
 801266e:	4629      	mov	r1, r5
 8012670:	f7ff ff52 	bl	8012518 <_malloc_r>
 8012674:	4606      	mov	r6, r0
 8012676:	b360      	cbz	r0, 80126d2 <__ssputs_r+0xa2>
 8012678:	6921      	ldr	r1, [r4, #16]
 801267a:	464a      	mov	r2, r9
 801267c:	f7ff fec3 	bl	8012406 <memcpy>
 8012680:	89a3      	ldrh	r3, [r4, #12]
 8012682:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801268a:	81a3      	strh	r3, [r4, #12]
 801268c:	6126      	str	r6, [r4, #16]
 801268e:	6165      	str	r5, [r4, #20]
 8012690:	444e      	add	r6, r9
 8012692:	eba5 0509 	sub.w	r5, r5, r9
 8012696:	6026      	str	r6, [r4, #0]
 8012698:	60a5      	str	r5, [r4, #8]
 801269a:	463e      	mov	r6, r7
 801269c:	42be      	cmp	r6, r7
 801269e:	d900      	bls.n	80126a2 <__ssputs_r+0x72>
 80126a0:	463e      	mov	r6, r7
 80126a2:	6820      	ldr	r0, [r4, #0]
 80126a4:	4632      	mov	r2, r6
 80126a6:	4641      	mov	r1, r8
 80126a8:	f7ff fdf9 	bl	801229e <memmove>
 80126ac:	68a3      	ldr	r3, [r4, #8]
 80126ae:	1b9b      	subs	r3, r3, r6
 80126b0:	60a3      	str	r3, [r4, #8]
 80126b2:	6823      	ldr	r3, [r4, #0]
 80126b4:	4433      	add	r3, r6
 80126b6:	6023      	str	r3, [r4, #0]
 80126b8:	2000      	movs	r0, #0
 80126ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126be:	462a      	mov	r2, r5
 80126c0:	f000 fd70 	bl	80131a4 <_realloc_r>
 80126c4:	4606      	mov	r6, r0
 80126c6:	2800      	cmp	r0, #0
 80126c8:	d1e0      	bne.n	801268c <__ssputs_r+0x5c>
 80126ca:	6921      	ldr	r1, [r4, #16]
 80126cc:	4650      	mov	r0, sl
 80126ce:	f7ff feaf 	bl	8012430 <_free_r>
 80126d2:	230c      	movs	r3, #12
 80126d4:	f8ca 3000 	str.w	r3, [sl]
 80126d8:	89a3      	ldrh	r3, [r4, #12]
 80126da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80126de:	81a3      	strh	r3, [r4, #12]
 80126e0:	f04f 30ff 	mov.w	r0, #4294967295
 80126e4:	e7e9      	b.n	80126ba <__ssputs_r+0x8a>
	...

080126e8 <_svfiprintf_r>:
 80126e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126ec:	4698      	mov	r8, r3
 80126ee:	898b      	ldrh	r3, [r1, #12]
 80126f0:	061b      	lsls	r3, r3, #24
 80126f2:	b09d      	sub	sp, #116	@ 0x74
 80126f4:	4607      	mov	r7, r0
 80126f6:	460d      	mov	r5, r1
 80126f8:	4614      	mov	r4, r2
 80126fa:	d510      	bpl.n	801271e <_svfiprintf_r+0x36>
 80126fc:	690b      	ldr	r3, [r1, #16]
 80126fe:	b973      	cbnz	r3, 801271e <_svfiprintf_r+0x36>
 8012700:	2140      	movs	r1, #64	@ 0x40
 8012702:	f7ff ff09 	bl	8012518 <_malloc_r>
 8012706:	6028      	str	r0, [r5, #0]
 8012708:	6128      	str	r0, [r5, #16]
 801270a:	b930      	cbnz	r0, 801271a <_svfiprintf_r+0x32>
 801270c:	230c      	movs	r3, #12
 801270e:	603b      	str	r3, [r7, #0]
 8012710:	f04f 30ff 	mov.w	r0, #4294967295
 8012714:	b01d      	add	sp, #116	@ 0x74
 8012716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801271a:	2340      	movs	r3, #64	@ 0x40
 801271c:	616b      	str	r3, [r5, #20]
 801271e:	2300      	movs	r3, #0
 8012720:	9309      	str	r3, [sp, #36]	@ 0x24
 8012722:	2320      	movs	r3, #32
 8012724:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012728:	f8cd 800c 	str.w	r8, [sp, #12]
 801272c:	2330      	movs	r3, #48	@ 0x30
 801272e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80128cc <_svfiprintf_r+0x1e4>
 8012732:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012736:	f04f 0901 	mov.w	r9, #1
 801273a:	4623      	mov	r3, r4
 801273c:	469a      	mov	sl, r3
 801273e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012742:	b10a      	cbz	r2, 8012748 <_svfiprintf_r+0x60>
 8012744:	2a25      	cmp	r2, #37	@ 0x25
 8012746:	d1f9      	bne.n	801273c <_svfiprintf_r+0x54>
 8012748:	ebba 0b04 	subs.w	fp, sl, r4
 801274c:	d00b      	beq.n	8012766 <_svfiprintf_r+0x7e>
 801274e:	465b      	mov	r3, fp
 8012750:	4622      	mov	r2, r4
 8012752:	4629      	mov	r1, r5
 8012754:	4638      	mov	r0, r7
 8012756:	f7ff ff6b 	bl	8012630 <__ssputs_r>
 801275a:	3001      	adds	r0, #1
 801275c:	f000 80a7 	beq.w	80128ae <_svfiprintf_r+0x1c6>
 8012760:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012762:	445a      	add	r2, fp
 8012764:	9209      	str	r2, [sp, #36]	@ 0x24
 8012766:	f89a 3000 	ldrb.w	r3, [sl]
 801276a:	2b00      	cmp	r3, #0
 801276c:	f000 809f 	beq.w	80128ae <_svfiprintf_r+0x1c6>
 8012770:	2300      	movs	r3, #0
 8012772:	f04f 32ff 	mov.w	r2, #4294967295
 8012776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801277a:	f10a 0a01 	add.w	sl, sl, #1
 801277e:	9304      	str	r3, [sp, #16]
 8012780:	9307      	str	r3, [sp, #28]
 8012782:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012786:	931a      	str	r3, [sp, #104]	@ 0x68
 8012788:	4654      	mov	r4, sl
 801278a:	2205      	movs	r2, #5
 801278c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012790:	484e      	ldr	r0, [pc, #312]	@ (80128cc <_svfiprintf_r+0x1e4>)
 8012792:	f7ed fd25 	bl	80001e0 <memchr>
 8012796:	9a04      	ldr	r2, [sp, #16]
 8012798:	b9d8      	cbnz	r0, 80127d2 <_svfiprintf_r+0xea>
 801279a:	06d0      	lsls	r0, r2, #27
 801279c:	bf44      	itt	mi
 801279e:	2320      	movmi	r3, #32
 80127a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80127a4:	0711      	lsls	r1, r2, #28
 80127a6:	bf44      	itt	mi
 80127a8:	232b      	movmi	r3, #43	@ 0x2b
 80127aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80127ae:	f89a 3000 	ldrb.w	r3, [sl]
 80127b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80127b4:	d015      	beq.n	80127e2 <_svfiprintf_r+0xfa>
 80127b6:	9a07      	ldr	r2, [sp, #28]
 80127b8:	4654      	mov	r4, sl
 80127ba:	2000      	movs	r0, #0
 80127bc:	f04f 0c0a 	mov.w	ip, #10
 80127c0:	4621      	mov	r1, r4
 80127c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80127c6:	3b30      	subs	r3, #48	@ 0x30
 80127c8:	2b09      	cmp	r3, #9
 80127ca:	d94b      	bls.n	8012864 <_svfiprintf_r+0x17c>
 80127cc:	b1b0      	cbz	r0, 80127fc <_svfiprintf_r+0x114>
 80127ce:	9207      	str	r2, [sp, #28]
 80127d0:	e014      	b.n	80127fc <_svfiprintf_r+0x114>
 80127d2:	eba0 0308 	sub.w	r3, r0, r8
 80127d6:	fa09 f303 	lsl.w	r3, r9, r3
 80127da:	4313      	orrs	r3, r2
 80127dc:	9304      	str	r3, [sp, #16]
 80127de:	46a2      	mov	sl, r4
 80127e0:	e7d2      	b.n	8012788 <_svfiprintf_r+0xa0>
 80127e2:	9b03      	ldr	r3, [sp, #12]
 80127e4:	1d19      	adds	r1, r3, #4
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	9103      	str	r1, [sp, #12]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	bfbb      	ittet	lt
 80127ee:	425b      	neglt	r3, r3
 80127f0:	f042 0202 	orrlt.w	r2, r2, #2
 80127f4:	9307      	strge	r3, [sp, #28]
 80127f6:	9307      	strlt	r3, [sp, #28]
 80127f8:	bfb8      	it	lt
 80127fa:	9204      	strlt	r2, [sp, #16]
 80127fc:	7823      	ldrb	r3, [r4, #0]
 80127fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8012800:	d10a      	bne.n	8012818 <_svfiprintf_r+0x130>
 8012802:	7863      	ldrb	r3, [r4, #1]
 8012804:	2b2a      	cmp	r3, #42	@ 0x2a
 8012806:	d132      	bne.n	801286e <_svfiprintf_r+0x186>
 8012808:	9b03      	ldr	r3, [sp, #12]
 801280a:	1d1a      	adds	r2, r3, #4
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	9203      	str	r2, [sp, #12]
 8012810:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012814:	3402      	adds	r4, #2
 8012816:	9305      	str	r3, [sp, #20]
 8012818:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80128dc <_svfiprintf_r+0x1f4>
 801281c:	7821      	ldrb	r1, [r4, #0]
 801281e:	2203      	movs	r2, #3
 8012820:	4650      	mov	r0, sl
 8012822:	f7ed fcdd 	bl	80001e0 <memchr>
 8012826:	b138      	cbz	r0, 8012838 <_svfiprintf_r+0x150>
 8012828:	9b04      	ldr	r3, [sp, #16]
 801282a:	eba0 000a 	sub.w	r0, r0, sl
 801282e:	2240      	movs	r2, #64	@ 0x40
 8012830:	4082      	lsls	r2, r0
 8012832:	4313      	orrs	r3, r2
 8012834:	3401      	adds	r4, #1
 8012836:	9304      	str	r3, [sp, #16]
 8012838:	f814 1b01 	ldrb.w	r1, [r4], #1
 801283c:	4824      	ldr	r0, [pc, #144]	@ (80128d0 <_svfiprintf_r+0x1e8>)
 801283e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012842:	2206      	movs	r2, #6
 8012844:	f7ed fccc 	bl	80001e0 <memchr>
 8012848:	2800      	cmp	r0, #0
 801284a:	d036      	beq.n	80128ba <_svfiprintf_r+0x1d2>
 801284c:	4b21      	ldr	r3, [pc, #132]	@ (80128d4 <_svfiprintf_r+0x1ec>)
 801284e:	bb1b      	cbnz	r3, 8012898 <_svfiprintf_r+0x1b0>
 8012850:	9b03      	ldr	r3, [sp, #12]
 8012852:	3307      	adds	r3, #7
 8012854:	f023 0307 	bic.w	r3, r3, #7
 8012858:	3308      	adds	r3, #8
 801285a:	9303      	str	r3, [sp, #12]
 801285c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801285e:	4433      	add	r3, r6
 8012860:	9309      	str	r3, [sp, #36]	@ 0x24
 8012862:	e76a      	b.n	801273a <_svfiprintf_r+0x52>
 8012864:	fb0c 3202 	mla	r2, ip, r2, r3
 8012868:	460c      	mov	r4, r1
 801286a:	2001      	movs	r0, #1
 801286c:	e7a8      	b.n	80127c0 <_svfiprintf_r+0xd8>
 801286e:	2300      	movs	r3, #0
 8012870:	3401      	adds	r4, #1
 8012872:	9305      	str	r3, [sp, #20]
 8012874:	4619      	mov	r1, r3
 8012876:	f04f 0c0a 	mov.w	ip, #10
 801287a:	4620      	mov	r0, r4
 801287c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012880:	3a30      	subs	r2, #48	@ 0x30
 8012882:	2a09      	cmp	r2, #9
 8012884:	d903      	bls.n	801288e <_svfiprintf_r+0x1a6>
 8012886:	2b00      	cmp	r3, #0
 8012888:	d0c6      	beq.n	8012818 <_svfiprintf_r+0x130>
 801288a:	9105      	str	r1, [sp, #20]
 801288c:	e7c4      	b.n	8012818 <_svfiprintf_r+0x130>
 801288e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012892:	4604      	mov	r4, r0
 8012894:	2301      	movs	r3, #1
 8012896:	e7f0      	b.n	801287a <_svfiprintf_r+0x192>
 8012898:	ab03      	add	r3, sp, #12
 801289a:	9300      	str	r3, [sp, #0]
 801289c:	462a      	mov	r2, r5
 801289e:	4b0e      	ldr	r3, [pc, #56]	@ (80128d8 <_svfiprintf_r+0x1f0>)
 80128a0:	a904      	add	r1, sp, #16
 80128a2:	4638      	mov	r0, r7
 80128a4:	f3af 8000 	nop.w
 80128a8:	1c42      	adds	r2, r0, #1
 80128aa:	4606      	mov	r6, r0
 80128ac:	d1d6      	bne.n	801285c <_svfiprintf_r+0x174>
 80128ae:	89ab      	ldrh	r3, [r5, #12]
 80128b0:	065b      	lsls	r3, r3, #25
 80128b2:	f53f af2d 	bmi.w	8012710 <_svfiprintf_r+0x28>
 80128b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80128b8:	e72c      	b.n	8012714 <_svfiprintf_r+0x2c>
 80128ba:	ab03      	add	r3, sp, #12
 80128bc:	9300      	str	r3, [sp, #0]
 80128be:	462a      	mov	r2, r5
 80128c0:	4b05      	ldr	r3, [pc, #20]	@ (80128d8 <_svfiprintf_r+0x1f0>)
 80128c2:	a904      	add	r1, sp, #16
 80128c4:	4638      	mov	r0, r7
 80128c6:	f000 f9bb 	bl	8012c40 <_printf_i>
 80128ca:	e7ed      	b.n	80128a8 <_svfiprintf_r+0x1c0>
 80128cc:	0801614f 	.word	0x0801614f
 80128d0:	08016159 	.word	0x08016159
 80128d4:	00000000 	.word	0x00000000
 80128d8:	08012631 	.word	0x08012631
 80128dc:	08016155 	.word	0x08016155

080128e0 <__sfputc_r>:
 80128e0:	6893      	ldr	r3, [r2, #8]
 80128e2:	3b01      	subs	r3, #1
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	b410      	push	{r4}
 80128e8:	6093      	str	r3, [r2, #8]
 80128ea:	da08      	bge.n	80128fe <__sfputc_r+0x1e>
 80128ec:	6994      	ldr	r4, [r2, #24]
 80128ee:	42a3      	cmp	r3, r4
 80128f0:	db01      	blt.n	80128f6 <__sfputc_r+0x16>
 80128f2:	290a      	cmp	r1, #10
 80128f4:	d103      	bne.n	80128fe <__sfputc_r+0x1e>
 80128f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80128fa:	f000 bb6b 	b.w	8012fd4 <__swbuf_r>
 80128fe:	6813      	ldr	r3, [r2, #0]
 8012900:	1c58      	adds	r0, r3, #1
 8012902:	6010      	str	r0, [r2, #0]
 8012904:	7019      	strb	r1, [r3, #0]
 8012906:	4608      	mov	r0, r1
 8012908:	f85d 4b04 	ldr.w	r4, [sp], #4
 801290c:	4770      	bx	lr

0801290e <__sfputs_r>:
 801290e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012910:	4606      	mov	r6, r0
 8012912:	460f      	mov	r7, r1
 8012914:	4614      	mov	r4, r2
 8012916:	18d5      	adds	r5, r2, r3
 8012918:	42ac      	cmp	r4, r5
 801291a:	d101      	bne.n	8012920 <__sfputs_r+0x12>
 801291c:	2000      	movs	r0, #0
 801291e:	e007      	b.n	8012930 <__sfputs_r+0x22>
 8012920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012924:	463a      	mov	r2, r7
 8012926:	4630      	mov	r0, r6
 8012928:	f7ff ffda 	bl	80128e0 <__sfputc_r>
 801292c:	1c43      	adds	r3, r0, #1
 801292e:	d1f3      	bne.n	8012918 <__sfputs_r+0xa>
 8012930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012934 <_vfiprintf_r>:
 8012934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012938:	460d      	mov	r5, r1
 801293a:	b09d      	sub	sp, #116	@ 0x74
 801293c:	4614      	mov	r4, r2
 801293e:	4698      	mov	r8, r3
 8012940:	4606      	mov	r6, r0
 8012942:	b118      	cbz	r0, 801294c <_vfiprintf_r+0x18>
 8012944:	6a03      	ldr	r3, [r0, #32]
 8012946:	b90b      	cbnz	r3, 801294c <_vfiprintf_r+0x18>
 8012948:	f7ff fbc6 	bl	80120d8 <__sinit>
 801294c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801294e:	07d9      	lsls	r1, r3, #31
 8012950:	d405      	bmi.n	801295e <_vfiprintf_r+0x2a>
 8012952:	89ab      	ldrh	r3, [r5, #12]
 8012954:	059a      	lsls	r2, r3, #22
 8012956:	d402      	bmi.n	801295e <_vfiprintf_r+0x2a>
 8012958:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801295a:	f7ff fd52 	bl	8012402 <__retarget_lock_acquire_recursive>
 801295e:	89ab      	ldrh	r3, [r5, #12]
 8012960:	071b      	lsls	r3, r3, #28
 8012962:	d501      	bpl.n	8012968 <_vfiprintf_r+0x34>
 8012964:	692b      	ldr	r3, [r5, #16]
 8012966:	b99b      	cbnz	r3, 8012990 <_vfiprintf_r+0x5c>
 8012968:	4629      	mov	r1, r5
 801296a:	4630      	mov	r0, r6
 801296c:	f000 fb70 	bl	8013050 <__swsetup_r>
 8012970:	b170      	cbz	r0, 8012990 <_vfiprintf_r+0x5c>
 8012972:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012974:	07dc      	lsls	r4, r3, #31
 8012976:	d504      	bpl.n	8012982 <_vfiprintf_r+0x4e>
 8012978:	f04f 30ff 	mov.w	r0, #4294967295
 801297c:	b01d      	add	sp, #116	@ 0x74
 801297e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012982:	89ab      	ldrh	r3, [r5, #12]
 8012984:	0598      	lsls	r0, r3, #22
 8012986:	d4f7      	bmi.n	8012978 <_vfiprintf_r+0x44>
 8012988:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801298a:	f7ff fd3b 	bl	8012404 <__retarget_lock_release_recursive>
 801298e:	e7f3      	b.n	8012978 <_vfiprintf_r+0x44>
 8012990:	2300      	movs	r3, #0
 8012992:	9309      	str	r3, [sp, #36]	@ 0x24
 8012994:	2320      	movs	r3, #32
 8012996:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801299a:	f8cd 800c 	str.w	r8, [sp, #12]
 801299e:	2330      	movs	r3, #48	@ 0x30
 80129a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012b50 <_vfiprintf_r+0x21c>
 80129a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80129a8:	f04f 0901 	mov.w	r9, #1
 80129ac:	4623      	mov	r3, r4
 80129ae:	469a      	mov	sl, r3
 80129b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80129b4:	b10a      	cbz	r2, 80129ba <_vfiprintf_r+0x86>
 80129b6:	2a25      	cmp	r2, #37	@ 0x25
 80129b8:	d1f9      	bne.n	80129ae <_vfiprintf_r+0x7a>
 80129ba:	ebba 0b04 	subs.w	fp, sl, r4
 80129be:	d00b      	beq.n	80129d8 <_vfiprintf_r+0xa4>
 80129c0:	465b      	mov	r3, fp
 80129c2:	4622      	mov	r2, r4
 80129c4:	4629      	mov	r1, r5
 80129c6:	4630      	mov	r0, r6
 80129c8:	f7ff ffa1 	bl	801290e <__sfputs_r>
 80129cc:	3001      	adds	r0, #1
 80129ce:	f000 80a7 	beq.w	8012b20 <_vfiprintf_r+0x1ec>
 80129d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80129d4:	445a      	add	r2, fp
 80129d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80129d8:	f89a 3000 	ldrb.w	r3, [sl]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	f000 809f 	beq.w	8012b20 <_vfiprintf_r+0x1ec>
 80129e2:	2300      	movs	r3, #0
 80129e4:	f04f 32ff 	mov.w	r2, #4294967295
 80129e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80129ec:	f10a 0a01 	add.w	sl, sl, #1
 80129f0:	9304      	str	r3, [sp, #16]
 80129f2:	9307      	str	r3, [sp, #28]
 80129f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80129f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80129fa:	4654      	mov	r4, sl
 80129fc:	2205      	movs	r2, #5
 80129fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a02:	4853      	ldr	r0, [pc, #332]	@ (8012b50 <_vfiprintf_r+0x21c>)
 8012a04:	f7ed fbec 	bl	80001e0 <memchr>
 8012a08:	9a04      	ldr	r2, [sp, #16]
 8012a0a:	b9d8      	cbnz	r0, 8012a44 <_vfiprintf_r+0x110>
 8012a0c:	06d1      	lsls	r1, r2, #27
 8012a0e:	bf44      	itt	mi
 8012a10:	2320      	movmi	r3, #32
 8012a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012a16:	0713      	lsls	r3, r2, #28
 8012a18:	bf44      	itt	mi
 8012a1a:	232b      	movmi	r3, #43	@ 0x2b
 8012a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012a20:	f89a 3000 	ldrb.w	r3, [sl]
 8012a24:	2b2a      	cmp	r3, #42	@ 0x2a
 8012a26:	d015      	beq.n	8012a54 <_vfiprintf_r+0x120>
 8012a28:	9a07      	ldr	r2, [sp, #28]
 8012a2a:	4654      	mov	r4, sl
 8012a2c:	2000      	movs	r0, #0
 8012a2e:	f04f 0c0a 	mov.w	ip, #10
 8012a32:	4621      	mov	r1, r4
 8012a34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a38:	3b30      	subs	r3, #48	@ 0x30
 8012a3a:	2b09      	cmp	r3, #9
 8012a3c:	d94b      	bls.n	8012ad6 <_vfiprintf_r+0x1a2>
 8012a3e:	b1b0      	cbz	r0, 8012a6e <_vfiprintf_r+0x13a>
 8012a40:	9207      	str	r2, [sp, #28]
 8012a42:	e014      	b.n	8012a6e <_vfiprintf_r+0x13a>
 8012a44:	eba0 0308 	sub.w	r3, r0, r8
 8012a48:	fa09 f303 	lsl.w	r3, r9, r3
 8012a4c:	4313      	orrs	r3, r2
 8012a4e:	9304      	str	r3, [sp, #16]
 8012a50:	46a2      	mov	sl, r4
 8012a52:	e7d2      	b.n	80129fa <_vfiprintf_r+0xc6>
 8012a54:	9b03      	ldr	r3, [sp, #12]
 8012a56:	1d19      	adds	r1, r3, #4
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	9103      	str	r1, [sp, #12]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	bfbb      	ittet	lt
 8012a60:	425b      	neglt	r3, r3
 8012a62:	f042 0202 	orrlt.w	r2, r2, #2
 8012a66:	9307      	strge	r3, [sp, #28]
 8012a68:	9307      	strlt	r3, [sp, #28]
 8012a6a:	bfb8      	it	lt
 8012a6c:	9204      	strlt	r2, [sp, #16]
 8012a6e:	7823      	ldrb	r3, [r4, #0]
 8012a70:	2b2e      	cmp	r3, #46	@ 0x2e
 8012a72:	d10a      	bne.n	8012a8a <_vfiprintf_r+0x156>
 8012a74:	7863      	ldrb	r3, [r4, #1]
 8012a76:	2b2a      	cmp	r3, #42	@ 0x2a
 8012a78:	d132      	bne.n	8012ae0 <_vfiprintf_r+0x1ac>
 8012a7a:	9b03      	ldr	r3, [sp, #12]
 8012a7c:	1d1a      	adds	r2, r3, #4
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	9203      	str	r2, [sp, #12]
 8012a82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012a86:	3402      	adds	r4, #2
 8012a88:	9305      	str	r3, [sp, #20]
 8012a8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012b60 <_vfiprintf_r+0x22c>
 8012a8e:	7821      	ldrb	r1, [r4, #0]
 8012a90:	2203      	movs	r2, #3
 8012a92:	4650      	mov	r0, sl
 8012a94:	f7ed fba4 	bl	80001e0 <memchr>
 8012a98:	b138      	cbz	r0, 8012aaa <_vfiprintf_r+0x176>
 8012a9a:	9b04      	ldr	r3, [sp, #16]
 8012a9c:	eba0 000a 	sub.w	r0, r0, sl
 8012aa0:	2240      	movs	r2, #64	@ 0x40
 8012aa2:	4082      	lsls	r2, r0
 8012aa4:	4313      	orrs	r3, r2
 8012aa6:	3401      	adds	r4, #1
 8012aa8:	9304      	str	r3, [sp, #16]
 8012aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012aae:	4829      	ldr	r0, [pc, #164]	@ (8012b54 <_vfiprintf_r+0x220>)
 8012ab0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012ab4:	2206      	movs	r2, #6
 8012ab6:	f7ed fb93 	bl	80001e0 <memchr>
 8012aba:	2800      	cmp	r0, #0
 8012abc:	d03f      	beq.n	8012b3e <_vfiprintf_r+0x20a>
 8012abe:	4b26      	ldr	r3, [pc, #152]	@ (8012b58 <_vfiprintf_r+0x224>)
 8012ac0:	bb1b      	cbnz	r3, 8012b0a <_vfiprintf_r+0x1d6>
 8012ac2:	9b03      	ldr	r3, [sp, #12]
 8012ac4:	3307      	adds	r3, #7
 8012ac6:	f023 0307 	bic.w	r3, r3, #7
 8012aca:	3308      	adds	r3, #8
 8012acc:	9303      	str	r3, [sp, #12]
 8012ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ad0:	443b      	add	r3, r7
 8012ad2:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ad4:	e76a      	b.n	80129ac <_vfiprintf_r+0x78>
 8012ad6:	fb0c 3202 	mla	r2, ip, r2, r3
 8012ada:	460c      	mov	r4, r1
 8012adc:	2001      	movs	r0, #1
 8012ade:	e7a8      	b.n	8012a32 <_vfiprintf_r+0xfe>
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	3401      	adds	r4, #1
 8012ae4:	9305      	str	r3, [sp, #20]
 8012ae6:	4619      	mov	r1, r3
 8012ae8:	f04f 0c0a 	mov.w	ip, #10
 8012aec:	4620      	mov	r0, r4
 8012aee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012af2:	3a30      	subs	r2, #48	@ 0x30
 8012af4:	2a09      	cmp	r2, #9
 8012af6:	d903      	bls.n	8012b00 <_vfiprintf_r+0x1cc>
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d0c6      	beq.n	8012a8a <_vfiprintf_r+0x156>
 8012afc:	9105      	str	r1, [sp, #20]
 8012afe:	e7c4      	b.n	8012a8a <_vfiprintf_r+0x156>
 8012b00:	fb0c 2101 	mla	r1, ip, r1, r2
 8012b04:	4604      	mov	r4, r0
 8012b06:	2301      	movs	r3, #1
 8012b08:	e7f0      	b.n	8012aec <_vfiprintf_r+0x1b8>
 8012b0a:	ab03      	add	r3, sp, #12
 8012b0c:	9300      	str	r3, [sp, #0]
 8012b0e:	462a      	mov	r2, r5
 8012b10:	4b12      	ldr	r3, [pc, #72]	@ (8012b5c <_vfiprintf_r+0x228>)
 8012b12:	a904      	add	r1, sp, #16
 8012b14:	4630      	mov	r0, r6
 8012b16:	f3af 8000 	nop.w
 8012b1a:	4607      	mov	r7, r0
 8012b1c:	1c78      	adds	r0, r7, #1
 8012b1e:	d1d6      	bne.n	8012ace <_vfiprintf_r+0x19a>
 8012b20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012b22:	07d9      	lsls	r1, r3, #31
 8012b24:	d405      	bmi.n	8012b32 <_vfiprintf_r+0x1fe>
 8012b26:	89ab      	ldrh	r3, [r5, #12]
 8012b28:	059a      	lsls	r2, r3, #22
 8012b2a:	d402      	bmi.n	8012b32 <_vfiprintf_r+0x1fe>
 8012b2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012b2e:	f7ff fc69 	bl	8012404 <__retarget_lock_release_recursive>
 8012b32:	89ab      	ldrh	r3, [r5, #12]
 8012b34:	065b      	lsls	r3, r3, #25
 8012b36:	f53f af1f 	bmi.w	8012978 <_vfiprintf_r+0x44>
 8012b3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012b3c:	e71e      	b.n	801297c <_vfiprintf_r+0x48>
 8012b3e:	ab03      	add	r3, sp, #12
 8012b40:	9300      	str	r3, [sp, #0]
 8012b42:	462a      	mov	r2, r5
 8012b44:	4b05      	ldr	r3, [pc, #20]	@ (8012b5c <_vfiprintf_r+0x228>)
 8012b46:	a904      	add	r1, sp, #16
 8012b48:	4630      	mov	r0, r6
 8012b4a:	f000 f879 	bl	8012c40 <_printf_i>
 8012b4e:	e7e4      	b.n	8012b1a <_vfiprintf_r+0x1e6>
 8012b50:	0801614f 	.word	0x0801614f
 8012b54:	08016159 	.word	0x08016159
 8012b58:	00000000 	.word	0x00000000
 8012b5c:	0801290f 	.word	0x0801290f
 8012b60:	08016155 	.word	0x08016155

08012b64 <_printf_common>:
 8012b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b68:	4616      	mov	r6, r2
 8012b6a:	4698      	mov	r8, r3
 8012b6c:	688a      	ldr	r2, [r1, #8]
 8012b6e:	690b      	ldr	r3, [r1, #16]
 8012b70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012b74:	4293      	cmp	r3, r2
 8012b76:	bfb8      	it	lt
 8012b78:	4613      	movlt	r3, r2
 8012b7a:	6033      	str	r3, [r6, #0]
 8012b7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012b80:	4607      	mov	r7, r0
 8012b82:	460c      	mov	r4, r1
 8012b84:	b10a      	cbz	r2, 8012b8a <_printf_common+0x26>
 8012b86:	3301      	adds	r3, #1
 8012b88:	6033      	str	r3, [r6, #0]
 8012b8a:	6823      	ldr	r3, [r4, #0]
 8012b8c:	0699      	lsls	r1, r3, #26
 8012b8e:	bf42      	ittt	mi
 8012b90:	6833      	ldrmi	r3, [r6, #0]
 8012b92:	3302      	addmi	r3, #2
 8012b94:	6033      	strmi	r3, [r6, #0]
 8012b96:	6825      	ldr	r5, [r4, #0]
 8012b98:	f015 0506 	ands.w	r5, r5, #6
 8012b9c:	d106      	bne.n	8012bac <_printf_common+0x48>
 8012b9e:	f104 0a19 	add.w	sl, r4, #25
 8012ba2:	68e3      	ldr	r3, [r4, #12]
 8012ba4:	6832      	ldr	r2, [r6, #0]
 8012ba6:	1a9b      	subs	r3, r3, r2
 8012ba8:	42ab      	cmp	r3, r5
 8012baa:	dc26      	bgt.n	8012bfa <_printf_common+0x96>
 8012bac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012bb0:	6822      	ldr	r2, [r4, #0]
 8012bb2:	3b00      	subs	r3, #0
 8012bb4:	bf18      	it	ne
 8012bb6:	2301      	movne	r3, #1
 8012bb8:	0692      	lsls	r2, r2, #26
 8012bba:	d42b      	bmi.n	8012c14 <_printf_common+0xb0>
 8012bbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012bc0:	4641      	mov	r1, r8
 8012bc2:	4638      	mov	r0, r7
 8012bc4:	47c8      	blx	r9
 8012bc6:	3001      	adds	r0, #1
 8012bc8:	d01e      	beq.n	8012c08 <_printf_common+0xa4>
 8012bca:	6823      	ldr	r3, [r4, #0]
 8012bcc:	6922      	ldr	r2, [r4, #16]
 8012bce:	f003 0306 	and.w	r3, r3, #6
 8012bd2:	2b04      	cmp	r3, #4
 8012bd4:	bf02      	ittt	eq
 8012bd6:	68e5      	ldreq	r5, [r4, #12]
 8012bd8:	6833      	ldreq	r3, [r6, #0]
 8012bda:	1aed      	subeq	r5, r5, r3
 8012bdc:	68a3      	ldr	r3, [r4, #8]
 8012bde:	bf0c      	ite	eq
 8012be0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012be4:	2500      	movne	r5, #0
 8012be6:	4293      	cmp	r3, r2
 8012be8:	bfc4      	itt	gt
 8012bea:	1a9b      	subgt	r3, r3, r2
 8012bec:	18ed      	addgt	r5, r5, r3
 8012bee:	2600      	movs	r6, #0
 8012bf0:	341a      	adds	r4, #26
 8012bf2:	42b5      	cmp	r5, r6
 8012bf4:	d11a      	bne.n	8012c2c <_printf_common+0xc8>
 8012bf6:	2000      	movs	r0, #0
 8012bf8:	e008      	b.n	8012c0c <_printf_common+0xa8>
 8012bfa:	2301      	movs	r3, #1
 8012bfc:	4652      	mov	r2, sl
 8012bfe:	4641      	mov	r1, r8
 8012c00:	4638      	mov	r0, r7
 8012c02:	47c8      	blx	r9
 8012c04:	3001      	adds	r0, #1
 8012c06:	d103      	bne.n	8012c10 <_printf_common+0xac>
 8012c08:	f04f 30ff 	mov.w	r0, #4294967295
 8012c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c10:	3501      	adds	r5, #1
 8012c12:	e7c6      	b.n	8012ba2 <_printf_common+0x3e>
 8012c14:	18e1      	adds	r1, r4, r3
 8012c16:	1c5a      	adds	r2, r3, #1
 8012c18:	2030      	movs	r0, #48	@ 0x30
 8012c1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012c1e:	4422      	add	r2, r4
 8012c20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012c24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012c28:	3302      	adds	r3, #2
 8012c2a:	e7c7      	b.n	8012bbc <_printf_common+0x58>
 8012c2c:	2301      	movs	r3, #1
 8012c2e:	4622      	mov	r2, r4
 8012c30:	4641      	mov	r1, r8
 8012c32:	4638      	mov	r0, r7
 8012c34:	47c8      	blx	r9
 8012c36:	3001      	adds	r0, #1
 8012c38:	d0e6      	beq.n	8012c08 <_printf_common+0xa4>
 8012c3a:	3601      	adds	r6, #1
 8012c3c:	e7d9      	b.n	8012bf2 <_printf_common+0x8e>
	...

08012c40 <_printf_i>:
 8012c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012c44:	7e0f      	ldrb	r7, [r1, #24]
 8012c46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012c48:	2f78      	cmp	r7, #120	@ 0x78
 8012c4a:	4691      	mov	r9, r2
 8012c4c:	4680      	mov	r8, r0
 8012c4e:	460c      	mov	r4, r1
 8012c50:	469a      	mov	sl, r3
 8012c52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012c56:	d807      	bhi.n	8012c68 <_printf_i+0x28>
 8012c58:	2f62      	cmp	r7, #98	@ 0x62
 8012c5a:	d80a      	bhi.n	8012c72 <_printf_i+0x32>
 8012c5c:	2f00      	cmp	r7, #0
 8012c5e:	f000 80d1 	beq.w	8012e04 <_printf_i+0x1c4>
 8012c62:	2f58      	cmp	r7, #88	@ 0x58
 8012c64:	f000 80b8 	beq.w	8012dd8 <_printf_i+0x198>
 8012c68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012c6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012c70:	e03a      	b.n	8012ce8 <_printf_i+0xa8>
 8012c72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012c76:	2b15      	cmp	r3, #21
 8012c78:	d8f6      	bhi.n	8012c68 <_printf_i+0x28>
 8012c7a:	a101      	add	r1, pc, #4	@ (adr r1, 8012c80 <_printf_i+0x40>)
 8012c7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012c80:	08012cd9 	.word	0x08012cd9
 8012c84:	08012ced 	.word	0x08012ced
 8012c88:	08012c69 	.word	0x08012c69
 8012c8c:	08012c69 	.word	0x08012c69
 8012c90:	08012c69 	.word	0x08012c69
 8012c94:	08012c69 	.word	0x08012c69
 8012c98:	08012ced 	.word	0x08012ced
 8012c9c:	08012c69 	.word	0x08012c69
 8012ca0:	08012c69 	.word	0x08012c69
 8012ca4:	08012c69 	.word	0x08012c69
 8012ca8:	08012c69 	.word	0x08012c69
 8012cac:	08012deb 	.word	0x08012deb
 8012cb0:	08012d17 	.word	0x08012d17
 8012cb4:	08012da5 	.word	0x08012da5
 8012cb8:	08012c69 	.word	0x08012c69
 8012cbc:	08012c69 	.word	0x08012c69
 8012cc0:	08012e0d 	.word	0x08012e0d
 8012cc4:	08012c69 	.word	0x08012c69
 8012cc8:	08012d17 	.word	0x08012d17
 8012ccc:	08012c69 	.word	0x08012c69
 8012cd0:	08012c69 	.word	0x08012c69
 8012cd4:	08012dad 	.word	0x08012dad
 8012cd8:	6833      	ldr	r3, [r6, #0]
 8012cda:	1d1a      	adds	r2, r3, #4
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	6032      	str	r2, [r6, #0]
 8012ce0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012ce4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012ce8:	2301      	movs	r3, #1
 8012cea:	e09c      	b.n	8012e26 <_printf_i+0x1e6>
 8012cec:	6833      	ldr	r3, [r6, #0]
 8012cee:	6820      	ldr	r0, [r4, #0]
 8012cf0:	1d19      	adds	r1, r3, #4
 8012cf2:	6031      	str	r1, [r6, #0]
 8012cf4:	0606      	lsls	r6, r0, #24
 8012cf6:	d501      	bpl.n	8012cfc <_printf_i+0xbc>
 8012cf8:	681d      	ldr	r5, [r3, #0]
 8012cfa:	e003      	b.n	8012d04 <_printf_i+0xc4>
 8012cfc:	0645      	lsls	r5, r0, #25
 8012cfe:	d5fb      	bpl.n	8012cf8 <_printf_i+0xb8>
 8012d00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012d04:	2d00      	cmp	r5, #0
 8012d06:	da03      	bge.n	8012d10 <_printf_i+0xd0>
 8012d08:	232d      	movs	r3, #45	@ 0x2d
 8012d0a:	426d      	negs	r5, r5
 8012d0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012d10:	4858      	ldr	r0, [pc, #352]	@ (8012e74 <_printf_i+0x234>)
 8012d12:	230a      	movs	r3, #10
 8012d14:	e011      	b.n	8012d3a <_printf_i+0xfa>
 8012d16:	6821      	ldr	r1, [r4, #0]
 8012d18:	6833      	ldr	r3, [r6, #0]
 8012d1a:	0608      	lsls	r0, r1, #24
 8012d1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8012d20:	d402      	bmi.n	8012d28 <_printf_i+0xe8>
 8012d22:	0649      	lsls	r1, r1, #25
 8012d24:	bf48      	it	mi
 8012d26:	b2ad      	uxthmi	r5, r5
 8012d28:	2f6f      	cmp	r7, #111	@ 0x6f
 8012d2a:	4852      	ldr	r0, [pc, #328]	@ (8012e74 <_printf_i+0x234>)
 8012d2c:	6033      	str	r3, [r6, #0]
 8012d2e:	bf14      	ite	ne
 8012d30:	230a      	movne	r3, #10
 8012d32:	2308      	moveq	r3, #8
 8012d34:	2100      	movs	r1, #0
 8012d36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012d3a:	6866      	ldr	r6, [r4, #4]
 8012d3c:	60a6      	str	r6, [r4, #8]
 8012d3e:	2e00      	cmp	r6, #0
 8012d40:	db05      	blt.n	8012d4e <_printf_i+0x10e>
 8012d42:	6821      	ldr	r1, [r4, #0]
 8012d44:	432e      	orrs	r6, r5
 8012d46:	f021 0104 	bic.w	r1, r1, #4
 8012d4a:	6021      	str	r1, [r4, #0]
 8012d4c:	d04b      	beq.n	8012de6 <_printf_i+0x1a6>
 8012d4e:	4616      	mov	r6, r2
 8012d50:	fbb5 f1f3 	udiv	r1, r5, r3
 8012d54:	fb03 5711 	mls	r7, r3, r1, r5
 8012d58:	5dc7      	ldrb	r7, [r0, r7]
 8012d5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012d5e:	462f      	mov	r7, r5
 8012d60:	42bb      	cmp	r3, r7
 8012d62:	460d      	mov	r5, r1
 8012d64:	d9f4      	bls.n	8012d50 <_printf_i+0x110>
 8012d66:	2b08      	cmp	r3, #8
 8012d68:	d10b      	bne.n	8012d82 <_printf_i+0x142>
 8012d6a:	6823      	ldr	r3, [r4, #0]
 8012d6c:	07df      	lsls	r7, r3, #31
 8012d6e:	d508      	bpl.n	8012d82 <_printf_i+0x142>
 8012d70:	6923      	ldr	r3, [r4, #16]
 8012d72:	6861      	ldr	r1, [r4, #4]
 8012d74:	4299      	cmp	r1, r3
 8012d76:	bfde      	ittt	le
 8012d78:	2330      	movle	r3, #48	@ 0x30
 8012d7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012d7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012d82:	1b92      	subs	r2, r2, r6
 8012d84:	6122      	str	r2, [r4, #16]
 8012d86:	f8cd a000 	str.w	sl, [sp]
 8012d8a:	464b      	mov	r3, r9
 8012d8c:	aa03      	add	r2, sp, #12
 8012d8e:	4621      	mov	r1, r4
 8012d90:	4640      	mov	r0, r8
 8012d92:	f7ff fee7 	bl	8012b64 <_printf_common>
 8012d96:	3001      	adds	r0, #1
 8012d98:	d14a      	bne.n	8012e30 <_printf_i+0x1f0>
 8012d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8012d9e:	b004      	add	sp, #16
 8012da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012da4:	6823      	ldr	r3, [r4, #0]
 8012da6:	f043 0320 	orr.w	r3, r3, #32
 8012daa:	6023      	str	r3, [r4, #0]
 8012dac:	4832      	ldr	r0, [pc, #200]	@ (8012e78 <_printf_i+0x238>)
 8012dae:	2778      	movs	r7, #120	@ 0x78
 8012db0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012db4:	6823      	ldr	r3, [r4, #0]
 8012db6:	6831      	ldr	r1, [r6, #0]
 8012db8:	061f      	lsls	r7, r3, #24
 8012dba:	f851 5b04 	ldr.w	r5, [r1], #4
 8012dbe:	d402      	bmi.n	8012dc6 <_printf_i+0x186>
 8012dc0:	065f      	lsls	r7, r3, #25
 8012dc2:	bf48      	it	mi
 8012dc4:	b2ad      	uxthmi	r5, r5
 8012dc6:	6031      	str	r1, [r6, #0]
 8012dc8:	07d9      	lsls	r1, r3, #31
 8012dca:	bf44      	itt	mi
 8012dcc:	f043 0320 	orrmi.w	r3, r3, #32
 8012dd0:	6023      	strmi	r3, [r4, #0]
 8012dd2:	b11d      	cbz	r5, 8012ddc <_printf_i+0x19c>
 8012dd4:	2310      	movs	r3, #16
 8012dd6:	e7ad      	b.n	8012d34 <_printf_i+0xf4>
 8012dd8:	4826      	ldr	r0, [pc, #152]	@ (8012e74 <_printf_i+0x234>)
 8012dda:	e7e9      	b.n	8012db0 <_printf_i+0x170>
 8012ddc:	6823      	ldr	r3, [r4, #0]
 8012dde:	f023 0320 	bic.w	r3, r3, #32
 8012de2:	6023      	str	r3, [r4, #0]
 8012de4:	e7f6      	b.n	8012dd4 <_printf_i+0x194>
 8012de6:	4616      	mov	r6, r2
 8012de8:	e7bd      	b.n	8012d66 <_printf_i+0x126>
 8012dea:	6833      	ldr	r3, [r6, #0]
 8012dec:	6825      	ldr	r5, [r4, #0]
 8012dee:	6961      	ldr	r1, [r4, #20]
 8012df0:	1d18      	adds	r0, r3, #4
 8012df2:	6030      	str	r0, [r6, #0]
 8012df4:	062e      	lsls	r6, r5, #24
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	d501      	bpl.n	8012dfe <_printf_i+0x1be>
 8012dfa:	6019      	str	r1, [r3, #0]
 8012dfc:	e002      	b.n	8012e04 <_printf_i+0x1c4>
 8012dfe:	0668      	lsls	r0, r5, #25
 8012e00:	d5fb      	bpl.n	8012dfa <_printf_i+0x1ba>
 8012e02:	8019      	strh	r1, [r3, #0]
 8012e04:	2300      	movs	r3, #0
 8012e06:	6123      	str	r3, [r4, #16]
 8012e08:	4616      	mov	r6, r2
 8012e0a:	e7bc      	b.n	8012d86 <_printf_i+0x146>
 8012e0c:	6833      	ldr	r3, [r6, #0]
 8012e0e:	1d1a      	adds	r2, r3, #4
 8012e10:	6032      	str	r2, [r6, #0]
 8012e12:	681e      	ldr	r6, [r3, #0]
 8012e14:	6862      	ldr	r2, [r4, #4]
 8012e16:	2100      	movs	r1, #0
 8012e18:	4630      	mov	r0, r6
 8012e1a:	f7ed f9e1 	bl	80001e0 <memchr>
 8012e1e:	b108      	cbz	r0, 8012e24 <_printf_i+0x1e4>
 8012e20:	1b80      	subs	r0, r0, r6
 8012e22:	6060      	str	r0, [r4, #4]
 8012e24:	6863      	ldr	r3, [r4, #4]
 8012e26:	6123      	str	r3, [r4, #16]
 8012e28:	2300      	movs	r3, #0
 8012e2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012e2e:	e7aa      	b.n	8012d86 <_printf_i+0x146>
 8012e30:	6923      	ldr	r3, [r4, #16]
 8012e32:	4632      	mov	r2, r6
 8012e34:	4649      	mov	r1, r9
 8012e36:	4640      	mov	r0, r8
 8012e38:	47d0      	blx	sl
 8012e3a:	3001      	adds	r0, #1
 8012e3c:	d0ad      	beq.n	8012d9a <_printf_i+0x15a>
 8012e3e:	6823      	ldr	r3, [r4, #0]
 8012e40:	079b      	lsls	r3, r3, #30
 8012e42:	d413      	bmi.n	8012e6c <_printf_i+0x22c>
 8012e44:	68e0      	ldr	r0, [r4, #12]
 8012e46:	9b03      	ldr	r3, [sp, #12]
 8012e48:	4298      	cmp	r0, r3
 8012e4a:	bfb8      	it	lt
 8012e4c:	4618      	movlt	r0, r3
 8012e4e:	e7a6      	b.n	8012d9e <_printf_i+0x15e>
 8012e50:	2301      	movs	r3, #1
 8012e52:	4632      	mov	r2, r6
 8012e54:	4649      	mov	r1, r9
 8012e56:	4640      	mov	r0, r8
 8012e58:	47d0      	blx	sl
 8012e5a:	3001      	adds	r0, #1
 8012e5c:	d09d      	beq.n	8012d9a <_printf_i+0x15a>
 8012e5e:	3501      	adds	r5, #1
 8012e60:	68e3      	ldr	r3, [r4, #12]
 8012e62:	9903      	ldr	r1, [sp, #12]
 8012e64:	1a5b      	subs	r3, r3, r1
 8012e66:	42ab      	cmp	r3, r5
 8012e68:	dcf2      	bgt.n	8012e50 <_printf_i+0x210>
 8012e6a:	e7eb      	b.n	8012e44 <_printf_i+0x204>
 8012e6c:	2500      	movs	r5, #0
 8012e6e:	f104 0619 	add.w	r6, r4, #25
 8012e72:	e7f5      	b.n	8012e60 <_printf_i+0x220>
 8012e74:	08016160 	.word	0x08016160
 8012e78:	08016171 	.word	0x08016171

08012e7c <__sflush_r>:
 8012e7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e84:	0716      	lsls	r6, r2, #28
 8012e86:	4605      	mov	r5, r0
 8012e88:	460c      	mov	r4, r1
 8012e8a:	d454      	bmi.n	8012f36 <__sflush_r+0xba>
 8012e8c:	684b      	ldr	r3, [r1, #4]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	dc02      	bgt.n	8012e98 <__sflush_r+0x1c>
 8012e92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	dd48      	ble.n	8012f2a <__sflush_r+0xae>
 8012e98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012e9a:	2e00      	cmp	r6, #0
 8012e9c:	d045      	beq.n	8012f2a <__sflush_r+0xae>
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012ea4:	682f      	ldr	r7, [r5, #0]
 8012ea6:	6a21      	ldr	r1, [r4, #32]
 8012ea8:	602b      	str	r3, [r5, #0]
 8012eaa:	d030      	beq.n	8012f0e <__sflush_r+0x92>
 8012eac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012eae:	89a3      	ldrh	r3, [r4, #12]
 8012eb0:	0759      	lsls	r1, r3, #29
 8012eb2:	d505      	bpl.n	8012ec0 <__sflush_r+0x44>
 8012eb4:	6863      	ldr	r3, [r4, #4]
 8012eb6:	1ad2      	subs	r2, r2, r3
 8012eb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012eba:	b10b      	cbz	r3, 8012ec0 <__sflush_r+0x44>
 8012ebc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012ebe:	1ad2      	subs	r2, r2, r3
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012ec4:	6a21      	ldr	r1, [r4, #32]
 8012ec6:	4628      	mov	r0, r5
 8012ec8:	47b0      	blx	r6
 8012eca:	1c43      	adds	r3, r0, #1
 8012ecc:	89a3      	ldrh	r3, [r4, #12]
 8012ece:	d106      	bne.n	8012ede <__sflush_r+0x62>
 8012ed0:	6829      	ldr	r1, [r5, #0]
 8012ed2:	291d      	cmp	r1, #29
 8012ed4:	d82b      	bhi.n	8012f2e <__sflush_r+0xb2>
 8012ed6:	4a2a      	ldr	r2, [pc, #168]	@ (8012f80 <__sflush_r+0x104>)
 8012ed8:	40ca      	lsrs	r2, r1
 8012eda:	07d6      	lsls	r6, r2, #31
 8012edc:	d527      	bpl.n	8012f2e <__sflush_r+0xb2>
 8012ede:	2200      	movs	r2, #0
 8012ee0:	6062      	str	r2, [r4, #4]
 8012ee2:	04d9      	lsls	r1, r3, #19
 8012ee4:	6922      	ldr	r2, [r4, #16]
 8012ee6:	6022      	str	r2, [r4, #0]
 8012ee8:	d504      	bpl.n	8012ef4 <__sflush_r+0x78>
 8012eea:	1c42      	adds	r2, r0, #1
 8012eec:	d101      	bne.n	8012ef2 <__sflush_r+0x76>
 8012eee:	682b      	ldr	r3, [r5, #0]
 8012ef0:	b903      	cbnz	r3, 8012ef4 <__sflush_r+0x78>
 8012ef2:	6560      	str	r0, [r4, #84]	@ 0x54
 8012ef4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012ef6:	602f      	str	r7, [r5, #0]
 8012ef8:	b1b9      	cbz	r1, 8012f2a <__sflush_r+0xae>
 8012efa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012efe:	4299      	cmp	r1, r3
 8012f00:	d002      	beq.n	8012f08 <__sflush_r+0x8c>
 8012f02:	4628      	mov	r0, r5
 8012f04:	f7ff fa94 	bl	8012430 <_free_r>
 8012f08:	2300      	movs	r3, #0
 8012f0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8012f0c:	e00d      	b.n	8012f2a <__sflush_r+0xae>
 8012f0e:	2301      	movs	r3, #1
 8012f10:	4628      	mov	r0, r5
 8012f12:	47b0      	blx	r6
 8012f14:	4602      	mov	r2, r0
 8012f16:	1c50      	adds	r0, r2, #1
 8012f18:	d1c9      	bne.n	8012eae <__sflush_r+0x32>
 8012f1a:	682b      	ldr	r3, [r5, #0]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d0c6      	beq.n	8012eae <__sflush_r+0x32>
 8012f20:	2b1d      	cmp	r3, #29
 8012f22:	d001      	beq.n	8012f28 <__sflush_r+0xac>
 8012f24:	2b16      	cmp	r3, #22
 8012f26:	d11e      	bne.n	8012f66 <__sflush_r+0xea>
 8012f28:	602f      	str	r7, [r5, #0]
 8012f2a:	2000      	movs	r0, #0
 8012f2c:	e022      	b.n	8012f74 <__sflush_r+0xf8>
 8012f2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012f32:	b21b      	sxth	r3, r3
 8012f34:	e01b      	b.n	8012f6e <__sflush_r+0xf2>
 8012f36:	690f      	ldr	r7, [r1, #16]
 8012f38:	2f00      	cmp	r7, #0
 8012f3a:	d0f6      	beq.n	8012f2a <__sflush_r+0xae>
 8012f3c:	0793      	lsls	r3, r2, #30
 8012f3e:	680e      	ldr	r6, [r1, #0]
 8012f40:	bf08      	it	eq
 8012f42:	694b      	ldreq	r3, [r1, #20]
 8012f44:	600f      	str	r7, [r1, #0]
 8012f46:	bf18      	it	ne
 8012f48:	2300      	movne	r3, #0
 8012f4a:	eba6 0807 	sub.w	r8, r6, r7
 8012f4e:	608b      	str	r3, [r1, #8]
 8012f50:	f1b8 0f00 	cmp.w	r8, #0
 8012f54:	dde9      	ble.n	8012f2a <__sflush_r+0xae>
 8012f56:	6a21      	ldr	r1, [r4, #32]
 8012f58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012f5a:	4643      	mov	r3, r8
 8012f5c:	463a      	mov	r2, r7
 8012f5e:	4628      	mov	r0, r5
 8012f60:	47b0      	blx	r6
 8012f62:	2800      	cmp	r0, #0
 8012f64:	dc08      	bgt.n	8012f78 <__sflush_r+0xfc>
 8012f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012f6e:	81a3      	strh	r3, [r4, #12]
 8012f70:	f04f 30ff 	mov.w	r0, #4294967295
 8012f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f78:	4407      	add	r7, r0
 8012f7a:	eba8 0800 	sub.w	r8, r8, r0
 8012f7e:	e7e7      	b.n	8012f50 <__sflush_r+0xd4>
 8012f80:	20400001 	.word	0x20400001

08012f84 <_fflush_r>:
 8012f84:	b538      	push	{r3, r4, r5, lr}
 8012f86:	690b      	ldr	r3, [r1, #16]
 8012f88:	4605      	mov	r5, r0
 8012f8a:	460c      	mov	r4, r1
 8012f8c:	b913      	cbnz	r3, 8012f94 <_fflush_r+0x10>
 8012f8e:	2500      	movs	r5, #0
 8012f90:	4628      	mov	r0, r5
 8012f92:	bd38      	pop	{r3, r4, r5, pc}
 8012f94:	b118      	cbz	r0, 8012f9e <_fflush_r+0x1a>
 8012f96:	6a03      	ldr	r3, [r0, #32]
 8012f98:	b90b      	cbnz	r3, 8012f9e <_fflush_r+0x1a>
 8012f9a:	f7ff f89d 	bl	80120d8 <__sinit>
 8012f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d0f3      	beq.n	8012f8e <_fflush_r+0xa>
 8012fa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012fa8:	07d0      	lsls	r0, r2, #31
 8012faa:	d404      	bmi.n	8012fb6 <_fflush_r+0x32>
 8012fac:	0599      	lsls	r1, r3, #22
 8012fae:	d402      	bmi.n	8012fb6 <_fflush_r+0x32>
 8012fb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012fb2:	f7ff fa26 	bl	8012402 <__retarget_lock_acquire_recursive>
 8012fb6:	4628      	mov	r0, r5
 8012fb8:	4621      	mov	r1, r4
 8012fba:	f7ff ff5f 	bl	8012e7c <__sflush_r>
 8012fbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012fc0:	07da      	lsls	r2, r3, #31
 8012fc2:	4605      	mov	r5, r0
 8012fc4:	d4e4      	bmi.n	8012f90 <_fflush_r+0xc>
 8012fc6:	89a3      	ldrh	r3, [r4, #12]
 8012fc8:	059b      	lsls	r3, r3, #22
 8012fca:	d4e1      	bmi.n	8012f90 <_fflush_r+0xc>
 8012fcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012fce:	f7ff fa19 	bl	8012404 <__retarget_lock_release_recursive>
 8012fd2:	e7dd      	b.n	8012f90 <_fflush_r+0xc>

08012fd4 <__swbuf_r>:
 8012fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fd6:	460e      	mov	r6, r1
 8012fd8:	4614      	mov	r4, r2
 8012fda:	4605      	mov	r5, r0
 8012fdc:	b118      	cbz	r0, 8012fe6 <__swbuf_r+0x12>
 8012fde:	6a03      	ldr	r3, [r0, #32]
 8012fe0:	b90b      	cbnz	r3, 8012fe6 <__swbuf_r+0x12>
 8012fe2:	f7ff f879 	bl	80120d8 <__sinit>
 8012fe6:	69a3      	ldr	r3, [r4, #24]
 8012fe8:	60a3      	str	r3, [r4, #8]
 8012fea:	89a3      	ldrh	r3, [r4, #12]
 8012fec:	071a      	lsls	r2, r3, #28
 8012fee:	d501      	bpl.n	8012ff4 <__swbuf_r+0x20>
 8012ff0:	6923      	ldr	r3, [r4, #16]
 8012ff2:	b943      	cbnz	r3, 8013006 <__swbuf_r+0x32>
 8012ff4:	4621      	mov	r1, r4
 8012ff6:	4628      	mov	r0, r5
 8012ff8:	f000 f82a 	bl	8013050 <__swsetup_r>
 8012ffc:	b118      	cbz	r0, 8013006 <__swbuf_r+0x32>
 8012ffe:	f04f 37ff 	mov.w	r7, #4294967295
 8013002:	4638      	mov	r0, r7
 8013004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013006:	6823      	ldr	r3, [r4, #0]
 8013008:	6922      	ldr	r2, [r4, #16]
 801300a:	1a98      	subs	r0, r3, r2
 801300c:	6963      	ldr	r3, [r4, #20]
 801300e:	b2f6      	uxtb	r6, r6
 8013010:	4283      	cmp	r3, r0
 8013012:	4637      	mov	r7, r6
 8013014:	dc05      	bgt.n	8013022 <__swbuf_r+0x4e>
 8013016:	4621      	mov	r1, r4
 8013018:	4628      	mov	r0, r5
 801301a:	f7ff ffb3 	bl	8012f84 <_fflush_r>
 801301e:	2800      	cmp	r0, #0
 8013020:	d1ed      	bne.n	8012ffe <__swbuf_r+0x2a>
 8013022:	68a3      	ldr	r3, [r4, #8]
 8013024:	3b01      	subs	r3, #1
 8013026:	60a3      	str	r3, [r4, #8]
 8013028:	6823      	ldr	r3, [r4, #0]
 801302a:	1c5a      	adds	r2, r3, #1
 801302c:	6022      	str	r2, [r4, #0]
 801302e:	701e      	strb	r6, [r3, #0]
 8013030:	6962      	ldr	r2, [r4, #20]
 8013032:	1c43      	adds	r3, r0, #1
 8013034:	429a      	cmp	r2, r3
 8013036:	d004      	beq.n	8013042 <__swbuf_r+0x6e>
 8013038:	89a3      	ldrh	r3, [r4, #12]
 801303a:	07db      	lsls	r3, r3, #31
 801303c:	d5e1      	bpl.n	8013002 <__swbuf_r+0x2e>
 801303e:	2e0a      	cmp	r6, #10
 8013040:	d1df      	bne.n	8013002 <__swbuf_r+0x2e>
 8013042:	4621      	mov	r1, r4
 8013044:	4628      	mov	r0, r5
 8013046:	f7ff ff9d 	bl	8012f84 <_fflush_r>
 801304a:	2800      	cmp	r0, #0
 801304c:	d0d9      	beq.n	8013002 <__swbuf_r+0x2e>
 801304e:	e7d6      	b.n	8012ffe <__swbuf_r+0x2a>

08013050 <__swsetup_r>:
 8013050:	b538      	push	{r3, r4, r5, lr}
 8013052:	4b29      	ldr	r3, [pc, #164]	@ (80130f8 <__swsetup_r+0xa8>)
 8013054:	4605      	mov	r5, r0
 8013056:	6818      	ldr	r0, [r3, #0]
 8013058:	460c      	mov	r4, r1
 801305a:	b118      	cbz	r0, 8013064 <__swsetup_r+0x14>
 801305c:	6a03      	ldr	r3, [r0, #32]
 801305e:	b90b      	cbnz	r3, 8013064 <__swsetup_r+0x14>
 8013060:	f7ff f83a 	bl	80120d8 <__sinit>
 8013064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013068:	0719      	lsls	r1, r3, #28
 801306a:	d422      	bmi.n	80130b2 <__swsetup_r+0x62>
 801306c:	06da      	lsls	r2, r3, #27
 801306e:	d407      	bmi.n	8013080 <__swsetup_r+0x30>
 8013070:	2209      	movs	r2, #9
 8013072:	602a      	str	r2, [r5, #0]
 8013074:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013078:	81a3      	strh	r3, [r4, #12]
 801307a:	f04f 30ff 	mov.w	r0, #4294967295
 801307e:	e033      	b.n	80130e8 <__swsetup_r+0x98>
 8013080:	0758      	lsls	r0, r3, #29
 8013082:	d512      	bpl.n	80130aa <__swsetup_r+0x5a>
 8013084:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013086:	b141      	cbz	r1, 801309a <__swsetup_r+0x4a>
 8013088:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801308c:	4299      	cmp	r1, r3
 801308e:	d002      	beq.n	8013096 <__swsetup_r+0x46>
 8013090:	4628      	mov	r0, r5
 8013092:	f7ff f9cd 	bl	8012430 <_free_r>
 8013096:	2300      	movs	r3, #0
 8013098:	6363      	str	r3, [r4, #52]	@ 0x34
 801309a:	89a3      	ldrh	r3, [r4, #12]
 801309c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80130a0:	81a3      	strh	r3, [r4, #12]
 80130a2:	2300      	movs	r3, #0
 80130a4:	6063      	str	r3, [r4, #4]
 80130a6:	6923      	ldr	r3, [r4, #16]
 80130a8:	6023      	str	r3, [r4, #0]
 80130aa:	89a3      	ldrh	r3, [r4, #12]
 80130ac:	f043 0308 	orr.w	r3, r3, #8
 80130b0:	81a3      	strh	r3, [r4, #12]
 80130b2:	6923      	ldr	r3, [r4, #16]
 80130b4:	b94b      	cbnz	r3, 80130ca <__swsetup_r+0x7a>
 80130b6:	89a3      	ldrh	r3, [r4, #12]
 80130b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80130bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80130c0:	d003      	beq.n	80130ca <__swsetup_r+0x7a>
 80130c2:	4621      	mov	r1, r4
 80130c4:	4628      	mov	r0, r5
 80130c6:	f000 f8c1 	bl	801324c <__smakebuf_r>
 80130ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130ce:	f013 0201 	ands.w	r2, r3, #1
 80130d2:	d00a      	beq.n	80130ea <__swsetup_r+0x9a>
 80130d4:	2200      	movs	r2, #0
 80130d6:	60a2      	str	r2, [r4, #8]
 80130d8:	6962      	ldr	r2, [r4, #20]
 80130da:	4252      	negs	r2, r2
 80130dc:	61a2      	str	r2, [r4, #24]
 80130de:	6922      	ldr	r2, [r4, #16]
 80130e0:	b942      	cbnz	r2, 80130f4 <__swsetup_r+0xa4>
 80130e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80130e6:	d1c5      	bne.n	8013074 <__swsetup_r+0x24>
 80130e8:	bd38      	pop	{r3, r4, r5, pc}
 80130ea:	0799      	lsls	r1, r3, #30
 80130ec:	bf58      	it	pl
 80130ee:	6962      	ldrpl	r2, [r4, #20]
 80130f0:	60a2      	str	r2, [r4, #8]
 80130f2:	e7f4      	b.n	80130de <__swsetup_r+0x8e>
 80130f4:	2000      	movs	r0, #0
 80130f6:	e7f7      	b.n	80130e8 <__swsetup_r+0x98>
 80130f8:	200000b8 	.word	0x200000b8

080130fc <_raise_r>:
 80130fc:	291f      	cmp	r1, #31
 80130fe:	b538      	push	{r3, r4, r5, lr}
 8013100:	4605      	mov	r5, r0
 8013102:	460c      	mov	r4, r1
 8013104:	d904      	bls.n	8013110 <_raise_r+0x14>
 8013106:	2316      	movs	r3, #22
 8013108:	6003      	str	r3, [r0, #0]
 801310a:	f04f 30ff 	mov.w	r0, #4294967295
 801310e:	bd38      	pop	{r3, r4, r5, pc}
 8013110:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013112:	b112      	cbz	r2, 801311a <_raise_r+0x1e>
 8013114:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013118:	b94b      	cbnz	r3, 801312e <_raise_r+0x32>
 801311a:	4628      	mov	r0, r5
 801311c:	f000 f830 	bl	8013180 <_getpid_r>
 8013120:	4622      	mov	r2, r4
 8013122:	4601      	mov	r1, r0
 8013124:	4628      	mov	r0, r5
 8013126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801312a:	f000 b817 	b.w	801315c <_kill_r>
 801312e:	2b01      	cmp	r3, #1
 8013130:	d00a      	beq.n	8013148 <_raise_r+0x4c>
 8013132:	1c59      	adds	r1, r3, #1
 8013134:	d103      	bne.n	801313e <_raise_r+0x42>
 8013136:	2316      	movs	r3, #22
 8013138:	6003      	str	r3, [r0, #0]
 801313a:	2001      	movs	r0, #1
 801313c:	e7e7      	b.n	801310e <_raise_r+0x12>
 801313e:	2100      	movs	r1, #0
 8013140:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013144:	4620      	mov	r0, r4
 8013146:	4798      	blx	r3
 8013148:	2000      	movs	r0, #0
 801314a:	e7e0      	b.n	801310e <_raise_r+0x12>

0801314c <raise>:
 801314c:	4b02      	ldr	r3, [pc, #8]	@ (8013158 <raise+0xc>)
 801314e:	4601      	mov	r1, r0
 8013150:	6818      	ldr	r0, [r3, #0]
 8013152:	f7ff bfd3 	b.w	80130fc <_raise_r>
 8013156:	bf00      	nop
 8013158:	200000b8 	.word	0x200000b8

0801315c <_kill_r>:
 801315c:	b538      	push	{r3, r4, r5, lr}
 801315e:	4d07      	ldr	r5, [pc, #28]	@ (801317c <_kill_r+0x20>)
 8013160:	2300      	movs	r3, #0
 8013162:	4604      	mov	r4, r0
 8013164:	4608      	mov	r0, r1
 8013166:	4611      	mov	r1, r2
 8013168:	602b      	str	r3, [r5, #0]
 801316a:	f7ee f807 	bl	800117c <_kill>
 801316e:	1c43      	adds	r3, r0, #1
 8013170:	d102      	bne.n	8013178 <_kill_r+0x1c>
 8013172:	682b      	ldr	r3, [r5, #0]
 8013174:	b103      	cbz	r3, 8013178 <_kill_r+0x1c>
 8013176:	6023      	str	r3, [r4, #0]
 8013178:	bd38      	pop	{r3, r4, r5, pc}
 801317a:	bf00      	nop
 801317c:	20008730 	.word	0x20008730

08013180 <_getpid_r>:
 8013180:	f7ed bff4 	b.w	800116c <_getpid>

08013184 <_sbrk_r>:
 8013184:	b538      	push	{r3, r4, r5, lr}
 8013186:	4d06      	ldr	r5, [pc, #24]	@ (80131a0 <_sbrk_r+0x1c>)
 8013188:	2300      	movs	r3, #0
 801318a:	4604      	mov	r4, r0
 801318c:	4608      	mov	r0, r1
 801318e:	602b      	str	r3, [r5, #0]
 8013190:	f7ee f87e 	bl	8001290 <_sbrk>
 8013194:	1c43      	adds	r3, r0, #1
 8013196:	d102      	bne.n	801319e <_sbrk_r+0x1a>
 8013198:	682b      	ldr	r3, [r5, #0]
 801319a:	b103      	cbz	r3, 801319e <_sbrk_r+0x1a>
 801319c:	6023      	str	r3, [r4, #0]
 801319e:	bd38      	pop	{r3, r4, r5, pc}
 80131a0:	20008730 	.word	0x20008730

080131a4 <_realloc_r>:
 80131a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131a8:	4607      	mov	r7, r0
 80131aa:	4614      	mov	r4, r2
 80131ac:	460d      	mov	r5, r1
 80131ae:	b921      	cbnz	r1, 80131ba <_realloc_r+0x16>
 80131b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80131b4:	4611      	mov	r1, r2
 80131b6:	f7ff b9af 	b.w	8012518 <_malloc_r>
 80131ba:	b92a      	cbnz	r2, 80131c8 <_realloc_r+0x24>
 80131bc:	f7ff f938 	bl	8012430 <_free_r>
 80131c0:	4625      	mov	r5, r4
 80131c2:	4628      	mov	r0, r5
 80131c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131c8:	f000 f89e 	bl	8013308 <_malloc_usable_size_r>
 80131cc:	4284      	cmp	r4, r0
 80131ce:	4606      	mov	r6, r0
 80131d0:	d802      	bhi.n	80131d8 <_realloc_r+0x34>
 80131d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80131d6:	d8f4      	bhi.n	80131c2 <_realloc_r+0x1e>
 80131d8:	4621      	mov	r1, r4
 80131da:	4638      	mov	r0, r7
 80131dc:	f7ff f99c 	bl	8012518 <_malloc_r>
 80131e0:	4680      	mov	r8, r0
 80131e2:	b908      	cbnz	r0, 80131e8 <_realloc_r+0x44>
 80131e4:	4645      	mov	r5, r8
 80131e6:	e7ec      	b.n	80131c2 <_realloc_r+0x1e>
 80131e8:	42b4      	cmp	r4, r6
 80131ea:	4622      	mov	r2, r4
 80131ec:	4629      	mov	r1, r5
 80131ee:	bf28      	it	cs
 80131f0:	4632      	movcs	r2, r6
 80131f2:	f7ff f908 	bl	8012406 <memcpy>
 80131f6:	4629      	mov	r1, r5
 80131f8:	4638      	mov	r0, r7
 80131fa:	f7ff f919 	bl	8012430 <_free_r>
 80131fe:	e7f1      	b.n	80131e4 <_realloc_r+0x40>

08013200 <__swhatbuf_r>:
 8013200:	b570      	push	{r4, r5, r6, lr}
 8013202:	460c      	mov	r4, r1
 8013204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013208:	2900      	cmp	r1, #0
 801320a:	b096      	sub	sp, #88	@ 0x58
 801320c:	4615      	mov	r5, r2
 801320e:	461e      	mov	r6, r3
 8013210:	da0d      	bge.n	801322e <__swhatbuf_r+0x2e>
 8013212:	89a3      	ldrh	r3, [r4, #12]
 8013214:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013218:	f04f 0100 	mov.w	r1, #0
 801321c:	bf14      	ite	ne
 801321e:	2340      	movne	r3, #64	@ 0x40
 8013220:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013224:	2000      	movs	r0, #0
 8013226:	6031      	str	r1, [r6, #0]
 8013228:	602b      	str	r3, [r5, #0]
 801322a:	b016      	add	sp, #88	@ 0x58
 801322c:	bd70      	pop	{r4, r5, r6, pc}
 801322e:	466a      	mov	r2, sp
 8013230:	f000 f848 	bl	80132c4 <_fstat_r>
 8013234:	2800      	cmp	r0, #0
 8013236:	dbec      	blt.n	8013212 <__swhatbuf_r+0x12>
 8013238:	9901      	ldr	r1, [sp, #4]
 801323a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801323e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013242:	4259      	negs	r1, r3
 8013244:	4159      	adcs	r1, r3
 8013246:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801324a:	e7eb      	b.n	8013224 <__swhatbuf_r+0x24>

0801324c <__smakebuf_r>:
 801324c:	898b      	ldrh	r3, [r1, #12]
 801324e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013250:	079d      	lsls	r5, r3, #30
 8013252:	4606      	mov	r6, r0
 8013254:	460c      	mov	r4, r1
 8013256:	d507      	bpl.n	8013268 <__smakebuf_r+0x1c>
 8013258:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801325c:	6023      	str	r3, [r4, #0]
 801325e:	6123      	str	r3, [r4, #16]
 8013260:	2301      	movs	r3, #1
 8013262:	6163      	str	r3, [r4, #20]
 8013264:	b003      	add	sp, #12
 8013266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013268:	ab01      	add	r3, sp, #4
 801326a:	466a      	mov	r2, sp
 801326c:	f7ff ffc8 	bl	8013200 <__swhatbuf_r>
 8013270:	9f00      	ldr	r7, [sp, #0]
 8013272:	4605      	mov	r5, r0
 8013274:	4639      	mov	r1, r7
 8013276:	4630      	mov	r0, r6
 8013278:	f7ff f94e 	bl	8012518 <_malloc_r>
 801327c:	b948      	cbnz	r0, 8013292 <__smakebuf_r+0x46>
 801327e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013282:	059a      	lsls	r2, r3, #22
 8013284:	d4ee      	bmi.n	8013264 <__smakebuf_r+0x18>
 8013286:	f023 0303 	bic.w	r3, r3, #3
 801328a:	f043 0302 	orr.w	r3, r3, #2
 801328e:	81a3      	strh	r3, [r4, #12]
 8013290:	e7e2      	b.n	8013258 <__smakebuf_r+0xc>
 8013292:	89a3      	ldrh	r3, [r4, #12]
 8013294:	6020      	str	r0, [r4, #0]
 8013296:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801329a:	81a3      	strh	r3, [r4, #12]
 801329c:	9b01      	ldr	r3, [sp, #4]
 801329e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80132a2:	b15b      	cbz	r3, 80132bc <__smakebuf_r+0x70>
 80132a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80132a8:	4630      	mov	r0, r6
 80132aa:	f000 f81d 	bl	80132e8 <_isatty_r>
 80132ae:	b128      	cbz	r0, 80132bc <__smakebuf_r+0x70>
 80132b0:	89a3      	ldrh	r3, [r4, #12]
 80132b2:	f023 0303 	bic.w	r3, r3, #3
 80132b6:	f043 0301 	orr.w	r3, r3, #1
 80132ba:	81a3      	strh	r3, [r4, #12]
 80132bc:	89a3      	ldrh	r3, [r4, #12]
 80132be:	431d      	orrs	r5, r3
 80132c0:	81a5      	strh	r5, [r4, #12]
 80132c2:	e7cf      	b.n	8013264 <__smakebuf_r+0x18>

080132c4 <_fstat_r>:
 80132c4:	b538      	push	{r3, r4, r5, lr}
 80132c6:	4d07      	ldr	r5, [pc, #28]	@ (80132e4 <_fstat_r+0x20>)
 80132c8:	2300      	movs	r3, #0
 80132ca:	4604      	mov	r4, r0
 80132cc:	4608      	mov	r0, r1
 80132ce:	4611      	mov	r1, r2
 80132d0:	602b      	str	r3, [r5, #0]
 80132d2:	f7ed ffb5 	bl	8001240 <_fstat>
 80132d6:	1c43      	adds	r3, r0, #1
 80132d8:	d102      	bne.n	80132e0 <_fstat_r+0x1c>
 80132da:	682b      	ldr	r3, [r5, #0]
 80132dc:	b103      	cbz	r3, 80132e0 <_fstat_r+0x1c>
 80132de:	6023      	str	r3, [r4, #0]
 80132e0:	bd38      	pop	{r3, r4, r5, pc}
 80132e2:	bf00      	nop
 80132e4:	20008730 	.word	0x20008730

080132e8 <_isatty_r>:
 80132e8:	b538      	push	{r3, r4, r5, lr}
 80132ea:	4d06      	ldr	r5, [pc, #24]	@ (8013304 <_isatty_r+0x1c>)
 80132ec:	2300      	movs	r3, #0
 80132ee:	4604      	mov	r4, r0
 80132f0:	4608      	mov	r0, r1
 80132f2:	602b      	str	r3, [r5, #0]
 80132f4:	f7ed ffb4 	bl	8001260 <_isatty>
 80132f8:	1c43      	adds	r3, r0, #1
 80132fa:	d102      	bne.n	8013302 <_isatty_r+0x1a>
 80132fc:	682b      	ldr	r3, [r5, #0]
 80132fe:	b103      	cbz	r3, 8013302 <_isatty_r+0x1a>
 8013300:	6023      	str	r3, [r4, #0]
 8013302:	bd38      	pop	{r3, r4, r5, pc}
 8013304:	20008730 	.word	0x20008730

08013308 <_malloc_usable_size_r>:
 8013308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801330c:	1f18      	subs	r0, r3, #4
 801330e:	2b00      	cmp	r3, #0
 8013310:	bfbc      	itt	lt
 8013312:	580b      	ldrlt	r3, [r1, r0]
 8013314:	18c0      	addlt	r0, r0, r3
 8013316:	4770      	bx	lr

08013318 <_init>:
 8013318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801331a:	bf00      	nop
 801331c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801331e:	bc08      	pop	{r3}
 8013320:	469e      	mov	lr, r3
 8013322:	4770      	bx	lr

08013324 <_fini>:
 8013324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013326:	bf00      	nop
 8013328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801332a:	bc08      	pop	{r3}
 801332c:	469e      	mov	lr, r3
 801332e:	4770      	bx	lr


STM32F407-MODBUS-OVER-ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbf8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002be4  0800fd88  0800fd88  00010d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801296c  0801296c  00014088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801296c  0801296c  0001396c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012974  08012974  00014088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012974  08012974  00013974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012978  08012978  00013978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0801297c  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00014088  2**0
                  CONTENTS
 10 .bss          000084b8  20000088  20000088  00014088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008540  20008540  00014088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00014088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c662  00000000  00000000  000140b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000051bd  00000000  00000000  0003071a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001440  00000000  00000000  000358d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001036  00000000  00000000  00036d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ca49  00000000  00000000  00037d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022923  00000000  00000000  00064797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db7a7  00000000  00000000  000870ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00162861  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a80  00000000  00000000  001628a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  00168324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fd70 	.word	0x0800fd70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800fd70 	.word	0x0800fd70

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <send_hello_udp>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_hello_udp(void)
{
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
	if (hello_upcb == NULL) return;
 80005d2:	4b1a      	ldr	r3, [pc, #104]	@ (800063c <send_hello_udp+0x70>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d02c      	beq.n	8000634 <send_hello_udp+0x68>

	const char *msg = "Hello World from STM32F407";
 80005da:	4b19      	ldr	r3, [pc, #100]	@ (8000640 <send_hello_udp+0x74>)
 80005dc:	607b      	str	r3, [r7, #4]
	struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, strlen(msg), PBUF_RAM);
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f7ff fe00 	bl	80001e4 <strlen>
 80005e4:	4603      	mov	r3, r0
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80005ec:	4619      	mov	r1, r3
 80005ee:	2036      	movs	r0, #54	@ 0x36
 80005f0:	f005 fc64 	bl	8005ebc <pbuf_alloc>
 80005f4:	6038      	str	r0, [r7, #0]
	if (p != NULL) {
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d01c      	beq.n	8000636 <send_hello_udp+0x6a>
		memcpy(p->payload, msg, strlen(msg));
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	685c      	ldr	r4, [r3, #4]
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f7ff fdef 	bl	80001e4 <strlen>
 8000606:	4603      	mov	r3, r0
 8000608:	461a      	mov	r2, r3
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	4620      	mov	r0, r4
 800060e:	f00e fd82 	bl	800f116 <memcpy>
		udp_sendto(hello_upcb, p, &dest_ip, 5005);
 8000612:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <send_hello_udp+0x70>)
 8000614:	6818      	ldr	r0, [r3, #0]
 8000616:	f241 338d 	movw	r3, #5005	@ 0x138d
 800061a:	4a0a      	ldr	r2, [pc, #40]	@ (8000644 <send_hello_udp+0x78>)
 800061c:	6839      	ldr	r1, [r7, #0]
 800061e:	f00b fe33 	bl	800c288 <udp_sendto>
		pbuf_free(p);
 8000622:	6838      	ldr	r0, [r7, #0]
 8000624:	f005 ff2e 	bl	8006484 <pbuf_free>

		HAL_GPIO_TogglePin(LED_PORT, LED_GREEN_PIN);
 8000628:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800062c:	4806      	ldr	r0, [pc, #24]	@ (8000648 <send_hello_udp+0x7c>)
 800062e:	f002 fb12 	bl	8002c56 <HAL_GPIO_TogglePin>
 8000632:	e000      	b.n	8000636 <send_hello_udp+0x6a>
	if (hello_upcb == NULL) return;
 8000634:	bf00      	nop
	}
}
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	bd90      	pop	{r4, r7, pc}
 800063c:	200000ec 	.word	0x200000ec
 8000640:	0800fd88 	.word	0x0800fd88
 8000644:	200000f0 	.word	0x200000f0
 8000648:	40020c00 	.word	0x40020c00

0800064c <udp_rx_callback>:

static void udp_rx_callback(void *arg, struct udp_pcb *pcb,
                            struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	@ 0x28
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
 8000658:	603b      	str	r3, [r7, #0]
    if (p != NULL) {
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d025      	beq.n	80006ac <udp_rx_callback+0x60>
        // Copy incoming data into buffer
        char buffer[16] = {0};  // big enough for "Hi!" + null terminator
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
        u16_t len = (p->tot_len < sizeof(buffer)-1) ? p->tot_len : sizeof(buffer)-1;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	891b      	ldrh	r3, [r3, #8]
 8000672:	2b0f      	cmp	r3, #15
 8000674:	bf28      	it	cs
 8000676:	230f      	movcs	r3, #15
 8000678:	84fb      	strh	r3, [r7, #38]	@ 0x26

        pbuf_copy_partial(p, buffer, len, 0);
 800067a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800067c:	f107 0114 	add.w	r1, r7, #20
 8000680:	2300      	movs	r3, #0
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f006 f8f8 	bl	8006878 <pbuf_copy_partial>

        // Check if it's exactly "Hi!"
        if (strcmp(buffer, "Hi!") == 0) {
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	4909      	ldr	r1, [pc, #36]	@ (80006b4 <udp_rx_callback+0x68>)
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff fd9e 	bl	80001d0 <strcmp>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d105      	bne.n	80006a6 <udp_rx_callback+0x5a>
            HAL_GPIO_WritePin(LED_PORT, LED_RED_PIN, GPIO_PIN_SET);  // light red LED
 800069a:	2201      	movs	r2, #1
 800069c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006a0:	4805      	ldr	r0, [pc, #20]	@ (80006b8 <udp_rx_callback+0x6c>)
 80006a2:	f002 fabf 	bl	8002c24 <HAL_GPIO_WritePin>
        }

        // Free memory or you’ll leak
        pbuf_free(p);
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f005 feec 	bl	8006484 <pbuf_free>
    }
}
 80006ac:	bf00      	nop
 80006ae:	3728      	adds	r7, #40	@ 0x28
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	0800fda4 	.word	0x0800fda4
 80006b8:	40020c00 	.word	0x40020c00

080006bc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006c2:	f000 fc89 	bl	8000fd8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006c6:	f000 f853 	bl	8000770 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006ca:	f000 f8e3 	bl	8000894 <MX_GPIO_Init>
	MX_UART5_Init();
 80006ce:	f000 f8b7 	bl	8000840 <MX_UART5_Init>
	MX_LWIP_Init();
 80006d2:	f003 fe7d 	bl	80043d0 <MX_LWIP_Init>
	/* USER CODE BEGIN 2 */
	netif_set_up(&gnetif);
 80006d6:	481e      	ldr	r0, [pc, #120]	@ (8000750 <main+0x94>)
 80006d8:	f005 fa52 	bl	8005b80 <netif_set_up>

	hello_upcb = udp_new();
 80006dc:	f00c f832 	bl	800c744 <udp_new>
 80006e0:	4603      	mov	r3, r0
 80006e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000754 <main+0x98>)
 80006e4:	6013      	str	r3, [r2, #0]
	if (hello_upcb != NULL) {
 80006e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000754 <main+0x98>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d012      	beq.n	8000714 <main+0x58>
	    udp_bind(hello_upcb, IP_ADDR_ANY, 5005);
 80006ee:	4b19      	ldr	r3, [pc, #100]	@ (8000754 <main+0x98>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f241 328d 	movw	r2, #5005	@ 0x138d
 80006f6:	4918      	ldr	r1, [pc, #96]	@ (8000758 <main+0x9c>)
 80006f8:	4618      	mov	r0, r3
 80006fa:	f00b ff7b 	bl	800c5f4 <udp_bind>
	    udp_recv(hello_upcb, udp_rx_callback, NULL);  // register RX handler
 80006fe:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <main+0x98>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	2200      	movs	r2, #0
 8000704:	4915      	ldr	r1, [pc, #84]	@ (800075c <main+0xa0>)
 8000706:	4618      	mov	r0, r3
 8000708:	f00b fffc 	bl	800c704 <udp_recv>
	    IP4_ADDR(&dest_ip, 192,168,1,100);            // still used for send
 800070c:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <main+0xa4>)
 800070e:	4a15      	ldr	r2, [pc, #84]	@ (8000764 <main+0xa8>)
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	e001      	b.n	8000718 <main+0x5c>
	}else{
		Error_Handler();
 8000714:	f000 f96c 	bl	80009f0 <Error_Handler>
	}

	HAL_GPIO_WritePin(LED_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800071e:	4812      	ldr	r0, [pc, #72]	@ (8000768 <main+0xac>)
 8000720:	f002 fa80 	bl	8002c24 <HAL_GPIO_WritePin>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint32_t lastSend = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
	while (1)
	{
		MX_LWIP_Process(); // important: handles incoming/outgoing packets
 8000728:	f003 ff92 	bl	8004650 <MX_LWIP_Process>

		if (broadcastUDPFlag && HAL_GetTick() - lastSend >= 1000) {
 800072c:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <main+0xb0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d0f9      	beq.n	8000728 <main+0x6c>
 8000734:	f000 fcb6 	bl	80010a4 <HAL_GetTick>
 8000738:	4602      	mov	r2, r0
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000742:	d3f1      	bcc.n	8000728 <main+0x6c>
			send_hello_udp();
 8000744:	f7ff ff42 	bl	80005cc <send_hello_udp>
			lastSend = HAL_GetTick();
 8000748:	f000 fcac 	bl	80010a4 <HAL_GetTick>
 800074c:	6078      	str	r0, [r7, #4]
		MX_LWIP_Process(); // important: handles incoming/outgoing packets
 800074e:	e7eb      	b.n	8000728 <main+0x6c>
 8000750:	20000108 	.word	0x20000108
 8000754:	200000ec 	.word	0x200000ec
 8000758:	0801287c 	.word	0x0801287c
 800075c:	0800064d 	.word	0x0800064d
 8000760:	200000f0 	.word	0x200000f0
 8000764:	6401a8c0 	.word	0x6401a8c0
 8000768:	40020c00 	.word	0x40020c00
 800076c:	200000f4 	.word	0x200000f4

08000770 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b094      	sub	sp, #80	@ 0x50
 8000774:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	2230      	movs	r2, #48	@ 0x30
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f00e fc53 	bl	800f02a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	4b27      	ldr	r3, [pc, #156]	@ (8000838 <SystemClock_Config+0xc8>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079c:	4a26      	ldr	r2, [pc, #152]	@ (8000838 <SystemClock_Config+0xc8>)
 800079e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a4:	4b24      	ldr	r3, [pc, #144]	@ (8000838 <SystemClock_Config+0xc8>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	4b21      	ldr	r3, [pc, #132]	@ (800083c <SystemClock_Config+0xcc>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a20      	ldr	r2, [pc, #128]	@ (800083c <SystemClock_Config+0xcc>)
 80007ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	4b1e      	ldr	r3, [pc, #120]	@ (800083c <SystemClock_Config+0xcc>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007cc:	2302      	movs	r3, #2
 80007ce:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d0:	2301      	movs	r3, #1
 80007d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d4:	2310      	movs	r3, #16
 80007d6:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d8:	2302      	movs	r3, #2
 80007da:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007dc:	2300      	movs	r3, #0
 80007de:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80007e0:	2308      	movs	r3, #8
 80007e2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 64;
 80007e4:	2340      	movs	r3, #64	@ 0x40
 80007e6:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ec:	2304      	movs	r3, #4
 80007ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f0:	f107 0320 	add.w	r3, r7, #32
 80007f4:	4618      	mov	r0, r3
 80007f6:	f002 fa61 	bl	8002cbc <HAL_RCC_OscConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000800:	f000 f8f6 	bl	80009f0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000804:	230f      	movs	r3, #15
 8000806:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000808:	2302      	movs	r3, #2
 800080a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800080c:	2380      	movs	r3, #128	@ 0x80
 800080e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	2101      	movs	r1, #1
 800081e:	4618      	mov	r0, r3
 8000820:	f002 fcc4 	bl	80031ac <HAL_RCC_ClockConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0xbe>
	{
		Error_Handler();
 800082a:	f000 f8e1 	bl	80009f0 <Error_Handler>
	}
}
 800082e:	bf00      	nop
 8000830:	3750      	adds	r7, #80	@ 0x50
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800
 800083c:	40007000 	.word	0x40007000

08000840 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8000844:	4b11      	ldr	r3, [pc, #68]	@ (800088c <MX_UART5_Init+0x4c>)
 8000846:	4a12      	ldr	r2, [pc, #72]	@ (8000890 <MX_UART5_Init+0x50>)
 8000848:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 800084a:	4b10      	ldr	r3, [pc, #64]	@ (800088c <MX_UART5_Init+0x4c>)
 800084c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000850:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_UART5_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8000858:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <MX_UART5_Init+0x4c>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <MX_UART5_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8000864:	4b09      	ldr	r3, [pc, #36]	@ (800088c <MX_UART5_Init+0x4c>)
 8000866:	220c      	movs	r2, #12
 8000868:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086a:	4b08      	ldr	r3, [pc, #32]	@ (800088c <MX_UART5_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000870:	4b06      	ldr	r3, [pc, #24]	@ (800088c <MX_UART5_Init+0x4c>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	@ (800088c <MX_UART5_Init+0x4c>)
 8000878:	f002 fe78 	bl	800356c <HAL_UART_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_UART5_Init+0x46>
	{
		Error_Handler();
 8000882:	f000 f8b5 	bl	80009f0 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200000a4 	.word	0x200000a4
 8000890:	40005000 	.word	0x40005000

08000894 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	@ 0x28
 8000898:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	4b32      	ldr	r3, [pc, #200]	@ (8000978 <MX_GPIO_Init+0xe4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a31      	ldr	r2, [pc, #196]	@ (8000978 <MX_GPIO_Init+0xe4>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000978 <MX_GPIO_Init+0xe4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0304 	and.w	r3, r3, #4
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000978 <MX_GPIO_Init+0xe4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a2a      	ldr	r2, [pc, #168]	@ (8000978 <MX_GPIO_Init+0xe4>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b28      	ldr	r3, [pc, #160]	@ (8000978 <MX_GPIO_Init+0xe4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	4b24      	ldr	r3, [pc, #144]	@ (8000978 <MX_GPIO_Init+0xe4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a23      	ldr	r2, [pc, #140]	@ (8000978 <MX_GPIO_Init+0xe4>)
 80008ec:	f043 0302 	orr.w	r3, r3, #2
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b21      	ldr	r3, [pc, #132]	@ (8000978 <MX_GPIO_Init+0xe4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b1d      	ldr	r3, [pc, #116]	@ (8000978 <MX_GPIO_Init+0xe4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a1c      	ldr	r2, [pc, #112]	@ (8000978 <MX_GPIO_Init+0xe4>)
 8000908:	f043 0308 	orr.w	r3, r3, #8
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <MX_GPIO_Init+0xe4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0308 	and.w	r3, r3, #8
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000920:	4816      	ldr	r0, [pc, #88]	@ (800097c <MX_GPIO_Init+0xe8>)
 8000922:	f002 f97f 	bl	8002c24 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000926:	2301      	movs	r3, #1
 8000928:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800092a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800092e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4619      	mov	r1, r3
 800093a:	4811      	ldr	r0, [pc, #68]	@ (8000980 <MX_GPIO_Init+0xec>)
 800093c:	f001 ffd6 	bl	80028ec <HAL_GPIO_Init>

	/*Configure GPIO pins : PD12 PD13 PD14 PD15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000940:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000944:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	4808      	ldr	r0, [pc, #32]	@ (800097c <MX_GPIO_Init+0xe8>)
 800095a:	f001 ffc7 	bl	80028ec <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	2006      	movs	r0, #6
 8000964:	f000 fca9 	bl	80012ba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000968:	2006      	movs	r0, #6
 800096a:	f000 fcc2 	bl	80012f2 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 800096e:	bf00      	nop
 8000970:	3728      	adds	r7, #40	@ 0x28
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800
 800097c:	40020c00 	.word	0x40020c00
 8000980:	40020000 	.word	0x40020000

08000984 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	80fb      	strh	r3, [r7, #6]
    static uint32_t lastPress = 0;

    if (GPIO_Pin == GPIO_PIN_0) {
 800098e:	88fb      	ldrh	r3, [r7, #6]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d122      	bne.n	80009da <HAL_GPIO_EXTI_Callback+0x56>
        uint32_t now = HAL_GetTick();
 8000994:	f000 fb86 	bl	80010a4 <HAL_GetTick>
 8000998:	60f8      	str	r0, [r7, #12]
        if (now - lastPress > 100) {
 800099a:	4b12      	ldr	r3, [pc, #72]	@ (80009e4 <HAL_GPIO_EXTI_Callback+0x60>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	2b64      	cmp	r3, #100	@ 0x64
 80009a4:	d919      	bls.n	80009da <HAL_GPIO_EXTI_Callback+0x56>
            broadcastUDPFlag ^= 1;    // toggle flag
 80009a6:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <HAL_GPIO_EXTI_Callback+0x64>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f083 0301 	eor.w	r3, r3, #1
 80009ae:	4a0e      	ldr	r2, [pc, #56]	@ (80009e8 <HAL_GPIO_EXTI_Callback+0x64>)
 80009b0:	6013      	str	r3, [r2, #0]
            if (broadcastUDPFlag) {
 80009b2:	4b0d      	ldr	r3, [pc, #52]	@ (80009e8 <HAL_GPIO_EXTI_Callback+0x64>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d006      	beq.n	80009c8 <HAL_GPIO_EXTI_Callback+0x44>
                HAL_GPIO_WritePin(LED_PORT, LED_ORANGE_PIN, GPIO_PIN_SET);
 80009ba:	2201      	movs	r2, #1
 80009bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009c0:	480a      	ldr	r0, [pc, #40]	@ (80009ec <HAL_GPIO_EXTI_Callback+0x68>)
 80009c2:	f002 f92f 	bl	8002c24 <HAL_GPIO_WritePin>
 80009c6:	e005      	b.n	80009d4 <HAL_GPIO_EXTI_Callback+0x50>
            } else {
                HAL_GPIO_WritePin(LED_PORT, LED_ORANGE_PIN, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ce:	4807      	ldr	r0, [pc, #28]	@ (80009ec <HAL_GPIO_EXTI_Callback+0x68>)
 80009d0:	f002 f928 	bl	8002c24 <HAL_GPIO_WritePin>
            }
            lastPress = now;
 80009d4:	4a03      	ldr	r2, [pc, #12]	@ (80009e4 <HAL_GPIO_EXTI_Callback+0x60>)
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	6013      	str	r3, [r2, #0]
        }
    }
}
 80009da:	bf00      	nop
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200000f8 	.word	0x200000f8
 80009e8:	200000f4 	.word	0x200000f4
 80009ec:	40020c00 	.word	0x40020c00

080009f0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
}
 80009f6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <Error_Handler+0x8>

080009fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b10      	ldr	r3, [pc, #64]	@ (8000a48 <HAL_MspInit+0x4c>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a48 <HAL_MspInit+0x4c>)
 8000a0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a12:	4b0d      	ldr	r3, [pc, #52]	@ (8000a48 <HAL_MspInit+0x4c>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <HAL_MspInit+0x4c>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a26:	4a08      	ldr	r2, [pc, #32]	@ (8000a48 <HAL_MspInit+0x4c>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a2e:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <HAL_MspInit+0x4c>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800

08000a4c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	@ 0x28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a2c      	ldr	r2, [pc, #176]	@ (8000b1c <HAL_UART_MspInit+0xd0>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d152      	bne.n	8000b14 <HAL_UART_MspInit+0xc8>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	4b2b      	ldr	r3, [pc, #172]	@ (8000b20 <HAL_UART_MspInit+0xd4>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a76:	4a2a      	ldr	r2, [pc, #168]	@ (8000b20 <HAL_UART_MspInit+0xd4>)
 8000a78:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000a7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a7e:	4b28      	ldr	r3, [pc, #160]	@ (8000b20 <HAL_UART_MspInit+0xd4>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	4b24      	ldr	r3, [pc, #144]	@ (8000b20 <HAL_UART_MspInit+0xd4>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	4a23      	ldr	r2, [pc, #140]	@ (8000b20 <HAL_UART_MspInit+0xd4>)
 8000a94:	f043 0304 	orr.w	r3, r3, #4
 8000a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9a:	4b21      	ldr	r3, [pc, #132]	@ (8000b20 <HAL_UART_MspInit+0xd4>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	f003 0304 	and.w	r3, r3, #4
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8000b20 <HAL_UART_MspInit+0xd4>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	4a1c      	ldr	r2, [pc, #112]	@ (8000b20 <HAL_UART_MspInit+0xd4>)
 8000ab0:	f043 0308 	orr.w	r3, r3, #8
 8000ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b20 <HAL_UART_MspInit+0xd4>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	f003 0308 	and.w	r3, r3, #8
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ac2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	4811      	ldr	r0, [pc, #68]	@ (8000b24 <HAL_UART_MspInit+0xd8>)
 8000ae0:	f001 ff04 	bl	80028ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000af4:	2308      	movs	r3, #8
 8000af6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	480a      	ldr	r0, [pc, #40]	@ (8000b28 <HAL_UART_MspInit+0xdc>)
 8000b00:	f001 fef4 	bl	80028ec <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2100      	movs	r1, #0
 8000b08:	2035      	movs	r0, #53	@ 0x35
 8000b0a:	f000 fbd6 	bl	80012ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000b0e:	2035      	movs	r0, #53	@ 0x35
 8000b10:	f000 fbef 	bl	80012f2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART5_MspInit 1 */

  }

}
 8000b14:	bf00      	nop
 8000b16:	3728      	adds	r7, #40	@ 0x28
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40005000 	.word	0x40005000
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020800 	.word	0x40020800
 8000b28:	40020c00 	.word	0x40020c00

08000b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <NMI_Handler+0x4>

08000b34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <HardFault_Handler+0x4>

08000b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <MemManage_Handler+0x4>

08000b44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <BusFault_Handler+0x4>

08000b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <UsageFault_Handler+0x4>

08000b54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b82:	f000 fa7b 	bl	800107c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f002 f87c 	bl	8002c8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000b9c:	4802      	ldr	r0, [pc, #8]	@ (8000ba8 <UART5_IRQHandler+0x10>)
 8000b9e:	f002 fd35 	bl	800360c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200000a4 	.word	0x200000a4

08000bac <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000bb0:	4802      	ldr	r0, [pc, #8]	@ (8000bbc <ETH_IRQHandler+0x10>)
 8000bb2:	f000 ffad 	bl	8001b10 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20004c20 	.word	0x20004c20

08000bc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return 1;
 8000bc4:	2301      	movs	r3, #1
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <_kill>:

int _kill(int pid, int sig)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000bda:	4b05      	ldr	r3, [pc, #20]	@ (8000bf0 <_kill+0x20>)
 8000bdc:	2216      	movs	r2, #22
 8000bde:	601a      	str	r2, [r3, #0]
  return -1;
 8000be0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	20008530 	.word	0x20008530

08000bf4 <_exit>:

void _exit (int status)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff ffe5 	bl	8000bd0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c06:	bf00      	nop
 8000c08:	e7fd      	b.n	8000c06 <_exit+0x12>

08000c0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b086      	sub	sp, #24
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	60f8      	str	r0, [r7, #12]
 8000c12:	60b9      	str	r1, [r7, #8]
 8000c14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	e00a      	b.n	8000c32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c1c:	f3af 8000 	nop.w
 8000c20:	4601      	mov	r1, r0
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	1c5a      	adds	r2, r3, #1
 8000c26:	60ba      	str	r2, [r7, #8]
 8000c28:	b2ca      	uxtb	r2, r1
 8000c2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	697a      	ldr	r2, [r7, #20]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	dbf0      	blt.n	8000c1c <_read+0x12>
  }

  return len;
 8000c3a:	687b      	ldr	r3, [r7, #4]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	e009      	b.n	8000c6a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	1c5a      	adds	r2, r3, #1
 8000c5a:	60ba      	str	r2, [r7, #8]
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	3301      	adds	r3, #1
 8000c68:	617b      	str	r3, [r7, #20]
 8000c6a:	697a      	ldr	r2, [r7, #20]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	dbf1      	blt.n	8000c56 <_write+0x12>
  }
  return len;
 8000c72:	687b      	ldr	r3, [r7, #4]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <_close>:

int _close(int file)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ca4:	605a      	str	r2, [r3, #4]
  return 0;
 8000ca6:	2300      	movs	r3, #0
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <_isatty>:

int _isatty(int file)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cbc:	2301      	movs	r3, #1
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b085      	sub	sp, #20
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	60f8      	str	r0, [r7, #12]
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cd6:	2300      	movs	r3, #0
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b087      	sub	sp, #28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cec:	4a14      	ldr	r2, [pc, #80]	@ (8000d40 <_sbrk+0x5c>)
 8000cee:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <_sbrk+0x60>)
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf8:	4b13      	ldr	r3, [pc, #76]	@ (8000d48 <_sbrk+0x64>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d102      	bne.n	8000d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d00:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <_sbrk+0x64>)
 8000d02:	4a12      	ldr	r2, [pc, #72]	@ (8000d4c <_sbrk+0x68>)
 8000d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d06:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <_sbrk+0x64>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d205      	bcs.n	8000d20 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d14:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <_sbrk+0x6c>)
 8000d16:	220c      	movs	r2, #12
 8000d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	e009      	b.n	8000d34 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d20:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d26:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a06      	ldr	r2, [pc, #24]	@ (8000d48 <_sbrk+0x64>)
 8000d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d32:	68fb      	ldr	r3, [r7, #12]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	371c      	adds	r7, #28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	20020000 	.word	0x20020000
 8000d44:	00000400 	.word	0x00000400
 8000d48:	200000fc 	.word	0x200000fc
 8000d4c:	20008540 	.word	0x20008540
 8000d50:	20008530 	.word	0x20008530

08000d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <SystemInit+0x20>)
 8000d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d5e:	4a05      	ldr	r2, [pc, #20]	@ (8000d74 <SystemInit+0x20>)
 8000d60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000db0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d7c:	f7ff ffea 	bl	8000d54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d80:	480c      	ldr	r0, [pc, #48]	@ (8000db4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d82:	490d      	ldr	r1, [pc, #52]	@ (8000db8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d84:	4a0d      	ldr	r2, [pc, #52]	@ (8000dbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d98:	4c0a      	ldr	r4, [pc, #40]	@ (8000dc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000da6:	f00e f98f 	bl	800f0c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000daa:	f7ff fc87 	bl	80006bc <main>
  bx  lr    
 8000dae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000db0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000dbc:	0801297c 	.word	0x0801297c
  ldr r2, =_sbss
 8000dc0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000dc4:	20008540 	.word	0x20008540

08000dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC_IRQHandler>

08000dca <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d00b      	beq.n	8000df2 <LAN8742_RegisterBusIO+0x28>
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d007      	beq.n	8000df2 <LAN8742_RegisterBusIO+0x28>
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d003      	beq.n	8000df2 <LAN8742_RegisterBusIO+0x28>
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d102      	bne.n	8000df8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295
 8000df6:	e014      	b.n	8000e22 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	68da      	ldr	r2, [r3, #12]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	691a      	ldr	r2, [r3, #16]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b086      	sub	sp, #24
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d139      	bne.n	8000ebe <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d002      	beq.n	8000e58 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2220      	movs	r2, #32
 8000e5c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	e01c      	b.n	8000e9e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	f107 020c 	add.w	r2, r7, #12
 8000e6c:	2112      	movs	r1, #18
 8000e6e:	6978      	ldr	r0, [r7, #20]
 8000e70:	4798      	blx	r3
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	da03      	bge.n	8000e80 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000e78:	f06f 0304 	mvn.w	r3, #4
 8000e7c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000e7e:	e00b      	b.n	8000e98 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f003 031f 	and.w	r3, r3, #31
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d105      	bne.n	8000e98 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
         break;
 8000e96:	e005      	b.n	8000ea4 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	2b1f      	cmp	r3, #31
 8000ea2:	d9df      	bls.n	8000e64 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b1f      	cmp	r3, #31
 8000eaa:	d902      	bls.n	8000eb2 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000eac:	f06f 0302 	mvn.w	r3, #2
 8000eb0:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d102      	bne.n	8000ebe <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000ebe:	693b      	ldr	r3, [r7, #16]
 }
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	6810      	ldr	r0, [r2, #0]
 8000edc:	f107 020c 	add.w	r2, r7, #12
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	4798      	blx	r3
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	da02      	bge.n	8000ef0 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000eea:	f06f 0304 	mvn.w	r3, #4
 8000eee:	e06e      	b.n	8000fce <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	695b      	ldr	r3, [r3, #20]
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	6810      	ldr	r0, [r2, #0]
 8000ef8:	f107 020c 	add.w	r2, r7, #12
 8000efc:	2101      	movs	r1, #1
 8000efe:	4798      	blx	r3
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	da02      	bge.n	8000f0c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f06:	f06f 0304 	mvn.w	r3, #4
 8000f0a:	e060      	b.n	8000fce <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d101      	bne.n	8000f1a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e059      	b.n	8000fce <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	6810      	ldr	r0, [r2, #0]
 8000f22:	f107 020c 	add.w	r2, r7, #12
 8000f26:	2100      	movs	r1, #0
 8000f28:	4798      	blx	r3
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	da02      	bge.n	8000f36 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f30:	f06f 0304 	mvn.w	r3, #4
 8000f34:	e04b      	b.n	8000fce <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d11b      	bne.n	8000f78 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d006      	beq.n	8000f58 <LAN8742_GetLinkState+0x90>
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f54:	2302      	movs	r3, #2
 8000f56:	e03a      	b.n	8000fce <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e033      	b.n	8000fce <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f70:	2304      	movs	r3, #4
 8000f72:	e02c      	b.n	8000fce <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f74:	2305      	movs	r3, #5
 8000f76:	e02a      	b.n	8000fce <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	6810      	ldr	r0, [r2, #0]
 8000f80:	f107 020c 	add.w	r2, r7, #12
 8000f84:	211f      	movs	r1, #31
 8000f86:	4798      	blx	r3
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	da02      	bge.n	8000f94 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000f8e:	f06f 0304 	mvn.w	r3, #4
 8000f92:	e01c      	b.n	8000fce <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000f9e:	2306      	movs	r3, #6
 8000fa0:	e015      	b.n	8000fce <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f003 031c 	and.w	r3, r3, #28
 8000fa8:	2b18      	cmp	r3, #24
 8000faa:	d101      	bne.n	8000fb0 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000fac:	2302      	movs	r3, #2
 8000fae:	e00e      	b.n	8000fce <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f003 031c 	and.w	r3, r3, #28
 8000fb6:	2b08      	cmp	r3, #8
 8000fb8:	d101      	bne.n	8000fbe <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e007      	b.n	8000fce <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f003 031c 	and.w	r3, r3, #28
 8000fc4:	2b14      	cmp	r3, #20
 8000fc6:	d101      	bne.n	8000fcc <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	e000      	b.n	8000fce <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000fcc:	2305      	movs	r3, #5
    }
  }
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <HAL_Init+0x40>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8001018 <HAL_Init+0x40>)
 8000fe2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fe6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8001018 <HAL_Init+0x40>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a0a      	ldr	r2, [pc, #40]	@ (8001018 <HAL_Init+0x40>)
 8000fee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ff2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff4:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <HAL_Init+0x40>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a07      	ldr	r2, [pc, #28]	@ (8001018 <HAL_Init+0x40>)
 8000ffa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ffe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001000:	2003      	movs	r0, #3
 8001002:	f000 f94f 	bl	80012a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001006:	200f      	movs	r0, #15
 8001008:	f000 f808 	bl	800101c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800100c:	f7ff fcf6 	bl	80009fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023c00 	.word	0x40023c00

0800101c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001024:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <HAL_InitTick+0x54>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b12      	ldr	r3, [pc, #72]	@ (8001074 <HAL_InitTick+0x58>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4619      	mov	r1, r3
 800102e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001032:	fbb3 f3f1 	udiv	r3, r3, r1
 8001036:	fbb2 f3f3 	udiv	r3, r2, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f967 	bl	800130e <HAL_SYSTICK_Config>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e00e      	b.n	8001068 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b0f      	cmp	r3, #15
 800104e:	d80a      	bhi.n	8001066 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001050:	2200      	movs	r2, #0
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f000 f92f 	bl	80012ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800105c:	4a06      	ldr	r2, [pc, #24]	@ (8001078 <HAL_InitTick+0x5c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	e000      	b.n	8001068 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000000 	.word	0x20000000
 8001074:	20000008 	.word	0x20000008
 8001078:	20000004 	.word	0x20000004

0800107c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001080:	4b06      	ldr	r3, [pc, #24]	@ (800109c <HAL_IncTick+0x20>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <HAL_IncTick+0x24>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4413      	add	r3, r2
 800108c:	4a04      	ldr	r2, [pc, #16]	@ (80010a0 <HAL_IncTick+0x24>)
 800108e:	6013      	str	r3, [r2, #0]
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000008 	.word	0x20000008
 80010a0:	20000100 	.word	0x20000100

080010a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return uwTick;
 80010a8:	4b03      	ldr	r3, [pc, #12]	@ (80010b8 <HAL_GetTick+0x14>)
 80010aa:	681b      	ldr	r3, [r3, #0]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000100 	.word	0x20000100

080010bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c4:	f7ff ffee 	bl	80010a4 <HAL_GetTick>
 80010c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d4:	d005      	beq.n	80010e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <HAL_Delay+0x44>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010e2:	bf00      	nop
 80010e4:	f7ff ffde 	bl	80010a4 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d8f7      	bhi.n	80010e4 <HAL_Delay+0x28>
  {
  }
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000008 	.word	0x20000008

08001104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001114:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <__NVIC_SetPriorityGrouping+0x44>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001120:	4013      	ands	r3, r2
 8001122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800112c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001130:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001136:	4a04      	ldr	r2, [pc, #16]	@ (8001148 <__NVIC_SetPriorityGrouping+0x44>)
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	60d3      	str	r3, [r2, #12]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001150:	4b04      	ldr	r3, [pc, #16]	@ (8001164 <__NVIC_GetPriorityGrouping+0x18>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	0a1b      	lsrs	r3, r3, #8
 8001156:	f003 0307 	and.w	r3, r3, #7
}
 800115a:	4618      	mov	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	2b00      	cmp	r3, #0
 8001178:	db0b      	blt.n	8001192 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	f003 021f 	and.w	r2, r3, #31
 8001180:	4907      	ldr	r1, [pc, #28]	@ (80011a0 <__NVIC_EnableIRQ+0x38>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	095b      	lsrs	r3, r3, #5
 8001188:	2001      	movs	r0, #1
 800118a:	fa00 f202 	lsl.w	r2, r0, r2
 800118e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000e100 	.word	0xe000e100

080011a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	6039      	str	r1, [r7, #0]
 80011ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	db0a      	blt.n	80011ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	490c      	ldr	r1, [pc, #48]	@ (80011f0 <__NVIC_SetPriority+0x4c>)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	0112      	lsls	r2, r2, #4
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	440b      	add	r3, r1
 80011c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011cc:	e00a      	b.n	80011e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4908      	ldr	r1, [pc, #32]	@ (80011f4 <__NVIC_SetPriority+0x50>)
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	3b04      	subs	r3, #4
 80011dc:	0112      	lsls	r2, r2, #4
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	440b      	add	r3, r1
 80011e2:	761a      	strb	r2, [r3, #24]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000e100 	.word	0xe000e100
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b089      	sub	sp, #36	@ 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f1c3 0307 	rsb	r3, r3, #7
 8001212:	2b04      	cmp	r3, #4
 8001214:	bf28      	it	cs
 8001216:	2304      	movcs	r3, #4
 8001218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3304      	adds	r3, #4
 800121e:	2b06      	cmp	r3, #6
 8001220:	d902      	bls.n	8001228 <NVIC_EncodePriority+0x30>
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3b03      	subs	r3, #3
 8001226:	e000      	b.n	800122a <NVIC_EncodePriority+0x32>
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	f04f 32ff 	mov.w	r2, #4294967295
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43da      	mvns	r2, r3
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	401a      	ands	r2, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001240:	f04f 31ff 	mov.w	r1, #4294967295
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	fa01 f303 	lsl.w	r3, r1, r3
 800124a:	43d9      	mvns	r1, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	4313      	orrs	r3, r2
         );
}
 8001252:	4618      	mov	r0, r3
 8001254:	3724      	adds	r7, #36	@ 0x24
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3b01      	subs	r3, #1
 800126c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001270:	d301      	bcc.n	8001276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001272:	2301      	movs	r3, #1
 8001274:	e00f      	b.n	8001296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001276:	4a0a      	ldr	r2, [pc, #40]	@ (80012a0 <SysTick_Config+0x40>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800127e:	210f      	movs	r1, #15
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f7ff ff8e 	bl	80011a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001288:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <SysTick_Config+0x40>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128e:	4b04      	ldr	r3, [pc, #16]	@ (80012a0 <SysTick_Config+0x40>)
 8001290:	2207      	movs	r2, #7
 8001292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	e000e010 	.word	0xe000e010

080012a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ff29 	bl	8001104 <__NVIC_SetPriorityGrouping>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b086      	sub	sp, #24
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
 80012c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012cc:	f7ff ff3e 	bl	800114c <__NVIC_GetPriorityGrouping>
 80012d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	68b9      	ldr	r1, [r7, #8]
 80012d6:	6978      	ldr	r0, [r7, #20]
 80012d8:	f7ff ff8e 	bl	80011f8 <NVIC_EncodePriority>
 80012dc:	4602      	mov	r2, r0
 80012de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e2:	4611      	mov	r1, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff5d 	bl	80011a4 <__NVIC_SetPriority>
}
 80012ea:	bf00      	nop
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff31 	bl	8001168 <__NVIC_EnableIRQ>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff ffa2 	bl	8001260 <SysTick_Config>
 800131c:	4603      	mov	r3, r0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b084      	sub	sp, #16
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001332:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001334:	f7ff feb6 	bl	80010a4 <HAL_GetTick>
 8001338:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d008      	beq.n	8001358 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2280      	movs	r2, #128	@ 0x80
 800134a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e052      	b.n	80013fe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 0216 	bic.w	r2, r2, #22
 8001366:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	695a      	ldr	r2, [r3, #20]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001376:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137c:	2b00      	cmp	r3, #0
 800137e:	d103      	bne.n	8001388 <HAL_DMA_Abort+0x62>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001384:	2b00      	cmp	r3, #0
 8001386:	d007      	beq.n	8001398 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0208 	bic.w	r2, r2, #8
 8001396:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 0201 	bic.w	r2, r2, #1
 80013a6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013a8:	e013      	b.n	80013d2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013aa:	f7ff fe7b 	bl	80010a4 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b05      	cmp	r3, #5
 80013b6:	d90c      	bls.n	80013d2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2220      	movs	r2, #32
 80013bc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2203      	movs	r2, #3
 80013c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e015      	b.n	80013fe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1e4      	bne.n	80013aa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013e4:	223f      	movs	r2, #63	@ 0x3f
 80013e6:	409a      	lsls	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d004      	beq.n	8001424 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2280      	movs	r2, #128	@ 0x80
 800141e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e00c      	b.n	800143e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2205      	movs	r2, #5
 8001428:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 0201 	bic.w	r2, r2, #1
 800143a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e08a      	b.n	8001574 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001464:	2b00      	cmp	r3, #0
 8001466:	d106      	bne.n	8001476 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2220      	movs	r2, #32
 800146c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f003 fab1 	bl	80049d8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	4b40      	ldr	r3, [pc, #256]	@ (800157c <HAL_ETH_Init+0x130>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147e:	4a3f      	ldr	r2, [pc, #252]	@ (800157c <HAL_ETH_Init+0x130>)
 8001480:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001484:	6453      	str	r3, [r2, #68]	@ 0x44
 8001486:	4b3d      	ldr	r3, [pc, #244]	@ (800157c <HAL_ETH_Init+0x130>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001492:	4b3b      	ldr	r3, [pc, #236]	@ (8001580 <HAL_ETH_Init+0x134>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	4a3a      	ldr	r2, [pc, #232]	@ (8001580 <HAL_ETH_Init+0x134>)
 8001498:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800149c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800149e:	4b38      	ldr	r3, [pc, #224]	@ (8001580 <HAL_ETH_Init+0x134>)
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	4936      	ldr	r1, [pc, #216]	@ (8001580 <HAL_ETH_Init+0x134>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80014ac:	4b34      	ldr	r3, [pc, #208]	@ (8001580 <HAL_ETH_Init+0x134>)
 80014ae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6812      	ldr	r2, [r2, #0]
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014c8:	f7ff fdec 	bl	80010a4 <HAL_GetTick>
 80014cc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014ce:	e011      	b.n	80014f4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014d0:	f7ff fde8 	bl	80010a4 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014de:	d909      	bls.n	80014f4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2204      	movs	r2, #4
 80014e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	22e0      	movs	r2, #224	@ 0xe0
 80014ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e03f      	b.n	8001574 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1e4      	bne.n	80014d0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 ff32 	bl	8002370 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 ffdd 	bl	80024cc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f001 f833 	bl	800257e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	461a      	mov	r2, r3
 800151e:	2100      	movs	r1, #0
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 ff9b 	bl	800245c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001534:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001546:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800154a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800155e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2210      	movs	r2, #16
 800156e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40023800 	.word	0x40023800
 8001580:	40013800 	.word	0x40013800

08001584 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001592:	2b10      	cmp	r3, #16
 8001594:	d161      	bne.n	800165a <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2220      	movs	r2, #32
 800159a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2204      	movs	r2, #4
 80015a8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 fa2c 	bl	8001a08 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015b8:	2001      	movs	r0, #1
 80015ba:	f7ff fd7f 	bl	80010bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015dc:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015f4:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 fd56 	bl	80020a8 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f042 0208 	orr.w	r2, r2, #8
 800160a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001614:	2001      	movs	r0, #1
 8001616:	f7ff fd51 	bl	80010bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f042 0204 	orr.w	r2, r2, #4
 8001630:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800163a:	69db      	ldr	r3, [r3, #28]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8001644:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 8001648:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800164c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2240      	movs	r2, #64	@ 0x40
 8001652:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	e000      	b.n	800165c <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
  }
}
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001672:	2b40      	cmp	r3, #64	@ 0x40
 8001674:	d170      	bne.n	8001758 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2220      	movs	r2, #32
 800167a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8001690:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8001694:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001698:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80016ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016b0:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	f023 0302 	bic.w	r3, r3, #2
 80016c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016c8:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0204 	bic.w	r2, r2, #4
 80016d8:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016e2:	2001      	movs	r0, #1
 80016e4:	f7ff fcea 	bl	80010bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 fcd9 	bl	80020a8 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0208 	bic.w	r2, r2, #8
 8001704:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800170e:	2001      	movs	r0, #1
 8001710:	f7ff fcd4 	bl	80010bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	e00e      	b.n	8001740 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	3212      	adds	r2, #18
 8001728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	3301      	adds	r3, #1
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	2b03      	cmp	r3, #3
 8001744:	d9ed      	bls.n	8001722 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2210      	movs	r2, #16
 8001750:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	e000      	b.n	800175a <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
  }
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b086      	sub	sp, #24
 8001766:	af00      	add	r7, sp, #0
 8001768:	60f8      	str	r0, [r7, #12]
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d109      	bne.n	8001788 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800177a:	f043 0201 	orr.w	r2, r3, #1
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e07c      	b.n	8001882 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800178e:	2b40      	cmp	r3, #64	@ 0x40
 8001790:	d176      	bne.n	8001880 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001792:	2200      	movs	r2, #0
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 ff60 	bl	800265c <ETH_Prepare_Tx_Descriptors>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d009      	beq.n	80017b6 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017a8:	f043 0202 	orr.w	r2, r3, #2
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e065      	b.n	8001882 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 80017b6:	f3bf 8f4f 	dsb	sy
}
 80017ba:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	3206      	adds	r2, #6
 80017c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c8:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d8:	2b03      	cmp	r3, #3
 80017da:	d904      	bls.n	80017e6 <HAL_ETH_Transmit+0x84>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e0:	1f1a      	subs	r2, r3, #4
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	3106      	adds	r1, #6
 80017f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80017f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017fa:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80017fc:	f7ff fc52 	bl	80010a4 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001802:	e037      	b.n	8001874 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d011      	beq.n	800183a <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800181c:	f043 0208 	orr.w	r2, r3, #8
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800182e:	695a      	ldr	r2, [r3, #20]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e023      	b.n	8001882 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001840:	d018      	beq.n	8001874 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001842:	f7ff fc2f 	bl	80010a4 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	429a      	cmp	r2, r3
 8001850:	d302      	bcc.n	8001858 <HAL_ETH_Transmit+0xf6>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d10d      	bne.n	8001874 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800185e:	f043 0204 	orr.w	r2, r3, #4
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 800186e:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e006      	b.n	8001882 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	dbc3      	blt.n	8001804 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800187c:	2300      	movs	r3, #0
 800187e:	e000      	b.n	8001882 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
  }
}
 8001882:	4618      	mov	r0, r3
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b088      	sub	sp, #32
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d109      	bne.n	80018b6 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018a8:	f043 0201 	orr.w	r2, r3, #1
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e0a4      	b.n	8001a00 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018bc:	2b40      	cmp	r3, #64	@ 0x40
 80018be:	d001      	beq.n	80018c4 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e09d      	b.n	8001a00 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018c8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69fa      	ldr	r2, [r7, #28]
 80018ce:	3212      	adds	r2, #18
 80018d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d4:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80018da:	f1c3 0304 	rsb	r3, r3, #4
 80018de:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80018e0:	e066      	b.n	80019b0 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d007      	beq.n	80018fe <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	69da      	ldr	r2, [r3, #28]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	699a      	ldr	r2, [r3, #24]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001906:	2b00      	cmp	r3, #0
 8001908:	d103      	bne.n	8001912 <HAL_ETH_ReadData+0x88>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800190e:	2b00      	cmp	r3, #0
 8001910:	d03c      	beq.n	800198c <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800191a:	2b00      	cmp	r3, #0
 800191c:	d005      	beq.n	800192a <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	0c1b      	lsrs	r3, r3, #16
 8001930:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001934:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800193e:	2b00      	cmp	r3, #0
 8001940:	d005      	beq.n	800194e <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 800194a:	2301      	movs	r3, #1
 800194c:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001966:	461a      	mov	r2, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	b29b      	uxth	r3, r3
 800196c:	f003 f9ec 	bl	8004d48 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001974:	1c5a      	adds	r2, r3, #1
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	441a      	add	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	2200      	movs	r2, #0
 800198a:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	3301      	adds	r3, #1
 8001990:	61fb      	str	r3, [r7, #28]
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	2b03      	cmp	r3, #3
 8001996:	d902      	bls.n	800199e <HAL_ETH_ReadData+0x114>
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	3b04      	subs	r3, #4
 800199c:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69fa      	ldr	r2, [r7, #28]
 80019a2:	3212      	adds	r2, #18
 80019a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a8:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	3301      	adds	r3, #1
 80019ae:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	db06      	blt.n	80019c6 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d202      	bcs.n	80019c6 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80019c0:	7cfb      	ldrb	r3, [r7, #19]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d08d      	beq.n	80018e2 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	441a      	add	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d002      	beq.n	80019e0 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 f814 	bl	8001a08 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80019e6:	7cfb      	ldrb	r3, [r7, #19]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d108      	bne.n	80019fe <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	e000      	b.n	8001a00 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3720      	adds	r7, #32
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001a14:	2301      	movs	r3, #1
 8001a16:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001a1c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69fa      	ldr	r2, [r7, #28]
 8001a22:	3212      	adds	r2, #18
 8001a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a28:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a2e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001a30:	e044      	b.n	8001abc <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d112      	bne.n	8001a60 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001a3a:	f107 0308 	add.w	r3, r7, #8
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f003 f952 	bl	8004ce8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d102      	bne.n	8001a50 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	74fb      	strb	r3, [r7, #19]
 8001a4e:	e007      	b.n	8001a60 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	461a      	mov	r2, r3
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001a60:	7cfb      	ldrb	r3, [r7, #19]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d02a      	beq.n	8001abc <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d108      	bne.n	8001a80 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001a76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	6053      	str	r3, [r2, #4]
 8001a7e:	e005      	b.n	8001a8c <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	61fb      	str	r3, [r7, #28]
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	2b03      	cmp	r3, #3
 8001aa2:	d902      	bls.n	8001aaa <ETH_UpdateDescriptor+0xa2>
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	3b04      	subs	r3, #4
 8001aa8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69fa      	ldr	r2, [r7, #28]
 8001aae:	3212      	adds	r2, #18
 8001ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab4:	617b      	str	r3, [r7, #20]
      desccount--;
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <ETH_UpdateDescriptor+0xc0>
 8001ac2:	7cfb      	ldrb	r3, [r7, #19]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1b4      	bne.n	8001a32 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d01a      	beq.n	8001b08 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3303      	adds	r3, #3
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001adc:	f3bf 8f5f 	dmb	sy
}
 8001ae0:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6919      	ldr	r1, [r3, #16]
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	18ca      	adds	r2, r1, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001afa:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69fa      	ldr	r2, [r7, #28]
 8001b00:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001b08:	bf00      	nop
 8001b0a:	3720      	adds	r7, #32
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b1e:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8001b38:	4b4b      	ldr	r3, [pc, #300]	@ (8001c68 <HAL_ETH_IRQHandler+0x158>)
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00e      	beq.n	8001b66 <HAL_ETH_IRQHandler+0x56>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d009      	beq.n	8001b66 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4b43      	ldr	r3, [pc, #268]	@ (8001c6c <HAL_ETH_IRQHandler+0x15c>)
 8001b5e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f891 	bl	8001c88 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00f      	beq.n	8001b90 <HAL_ETH_IRQHandler+0x80>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00a      	beq.n	8001b90 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b82:	461a      	mov	r2, r3
 8001b84:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001b88:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f872 	bl	8001c74 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d042      	beq.n	8001c20 <HAL_ETH_IRQHandler+0x110>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d03d      	beq.n	8001c20 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001baa:	f043 0208 	orr.w	r2, r3, #8
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d01a      	beq.n	8001bf4 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bc6:	695a      	ldr	r2, [r3, #20]
 8001bc8:	4b29      	ldr	r3, [pc, #164]	@ (8001c70 <HAL_ETH_IRQHandler+0x160>)
 8001bca:	4013      	ands	r3, r2
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8001be4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001be8:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	22e0      	movs	r2, #224	@ 0xe0
 8001bee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001bf2:	e012      	b.n	8001c1a <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bfc:	695a      	ldr	r2, [r3, #20]
 8001bfe:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001c02:	4013      	ands	r3, r2
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c12:	461a      	mov	r2, r3
 8001c14:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001c18:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f83e 	bl	8001c9c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00e      	beq.n	8001c48 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c30:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f838 	bl	8001cb0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d006      	beq.n	8001c60 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001c52:	4b05      	ldr	r3, [pc, #20]	@ (8001c68 <HAL_ETH_IRQHandler+0x158>)
 8001c54:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001c58:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f832 	bl	8001cc4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001c60:	bf00      	nop
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40013c00 	.word	0x40013c00
 8001c6c:	00010040 	.word	0x00010040
 8001c70:	007e2000 	.word	0x007e2000

08001c74 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
 8001ce4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f003 031c 	and.w	r3, r3, #28
 8001cf4:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	02db      	lsls	r3, r3, #11
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	019b      	lsls	r3, r3, #6
 8001d06:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f023 0302 	bic.w	r3, r3, #2
 8001d16:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001d28:	f7ff f9bc 	bl	80010a4 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d2e:	e00d      	b.n	8001d4c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001d30:	f7ff f9b8 	bl	80010a4 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d3e:	d301      	bcc.n	8001d44 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e010      	b.n	8001d66 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1ec      	bne.n	8001d30 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	461a      	mov	r2, r3
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b086      	sub	sp, #24
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f003 031c 	and.w	r3, r3, #28
 8001d8a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	02db      	lsls	r3, r3, #11
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	019b      	lsls	r3, r3, #6
 8001d9c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dc8:	f7ff f96c 	bl	80010a4 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dce:	e00d      	b.n	8001dec <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001dd0:	f7ff f968 	bl	80010a4 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dde:	d301      	bcc.n	8001de4 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e009      	b.n	8001df8 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1ec      	bne.n	8001dd0 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e0e6      	b.n	8001fe2 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	bf14      	ite	ne
 8001e22:	2301      	movne	r3, #1
 8001e24:	2300      	moveq	r3, #0
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	461a      	mov	r2, r3
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	bf0c      	ite	eq
 8001e4c:	2301      	moveq	r3, #1
 8001e4e:	2300      	movne	r3, #0
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	461a      	mov	r2, r3
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	bf14      	ite	ne
 8001e68:	2301      	movne	r3, #1
 8001e6a:	2300      	moveq	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	bf0c      	ite	eq
 8001e82:	2301      	moveq	r3, #1
 8001e84:	2300      	movne	r3, #0
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	461a      	mov	r2, r3
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf14      	ite	ne
 8001e9c:	2301      	movne	r3, #1
 8001e9e:	2300      	moveq	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	bf0c      	ite	eq
 8001ed2:	2301      	moveq	r3, #1
 8001ed4:	2300      	movne	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	461a      	mov	r2, r3
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bf0c      	ite	eq
 8001eec:	2301      	moveq	r3, #1
 8001eee:	2300      	movne	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	bf14      	ite	ne
 8001f06:	2301      	movne	r3, #1
 8001f08:	2300      	moveq	r3, #0
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	bf14      	ite	ne
 8001f2e:	2301      	movne	r3, #1
 8001f30:	2300      	moveq	r3, #0
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	461a      	mov	r2, r3
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	bf14      	ite	ne
 8001f48:	2301      	movne	r3, #1
 8001f4a:	2300      	moveq	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	461a      	mov	r2, r3
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	bf14      	ite	ne
 8001f62:	2301      	movne	r3, #1
 8001f64:	2300      	moveq	r3, #0
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	461a      	mov	r2, r3
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	bf0c      	ite	eq
 8001f7e:	2301      	moveq	r3, #1
 8001f80:	2300      	movne	r3, #0
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	461a      	mov	r2, r3
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	0c1b      	lsrs	r3, r3, #16
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	bf14      	ite	ne
 8001fb6:	2301      	movne	r3, #1
 8001fb8:	2300      	moveq	r3, #0
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	bf14      	ite	ne
 8001fd2:	2301      	movne	r3, #1
 8001fd4:	2300      	moveq	r3, #0
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e00b      	b.n	800201a <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002008:	2b10      	cmp	r3, #16
 800200a:	d105      	bne.n	8002018 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800200c:	6839      	ldr	r1, [r7, #0]
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f870 	bl	80020f4 <ETH_SetMACConfig>

    return HAL_OK;
 8002014:	2300      	movs	r3, #0
 8002016:	e000      	b.n	800201a <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
  }
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f023 031c 	bic.w	r3, r3, #28
 800203a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800203c:	f001 fa62 	bl	8003504 <HAL_RCC_GetHCLKFreq>
 8002040:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	4a14      	ldr	r2, [pc, #80]	@ (8002098 <HAL_ETH_SetMDIOClockRange+0x74>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d804      	bhi.n	8002054 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f043 0308 	orr.w	r3, r3, #8
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	e019      	b.n	8002088 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	4a11      	ldr	r2, [pc, #68]	@ (800209c <HAL_ETH_SetMDIOClockRange+0x78>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d204      	bcs.n	8002066 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f043 030c 	orr.w	r3, r3, #12
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	e010      	b.n	8002088 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	4a0d      	ldr	r2, [pc, #52]	@ (80020a0 <HAL_ETH_SetMDIOClockRange+0x7c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d90c      	bls.n	8002088 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	4a0c      	ldr	r2, [pc, #48]	@ (80020a4 <HAL_ETH_SetMDIOClockRange+0x80>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d804      	bhi.n	8002080 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f043 0304 	orr.w	r3, r3, #4
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	e003      	b.n	8002088 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f043 0310 	orr.w	r3, r3, #16
 8002086:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	611a      	str	r2, [r3, #16]
}
 8002090:	bf00      	nop
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	02160ebf 	.word	0x02160ebf
 800209c:	03938700 	.word	0x03938700
 80020a0:	05f5e0ff 	.word	0x05f5e0ff
 80020a4:	08f0d17f 	.word	0x08f0d17f

080020a8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020ca:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020d8:	2001      	movs	r0, #1
 80020da:	f7fe ffef 	bl	80010bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020e8:	6193      	str	r3, [r2, #24]
}
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4b53      	ldr	r3, [pc, #332]	@ (8002258 <ETH_SetMACConfig+0x164>)
 800210a:	4013      	ands	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	7b9b      	ldrb	r3, [r3, #14]
 8002112:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	7c12      	ldrb	r2, [r2, #16]
 8002118:	2a00      	cmp	r2, #0
 800211a:	d102      	bne.n	8002122 <ETH_SetMACConfig+0x2e>
 800211c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002120:	e000      	b.n	8002124 <ETH_SetMACConfig+0x30>
 8002122:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002124:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	7c52      	ldrb	r2, [r2, #17]
 800212a:	2a00      	cmp	r2, #0
 800212c:	d102      	bne.n	8002134 <ETH_SetMACConfig+0x40>
 800212e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002132:	e000      	b.n	8002136 <ETH_SetMACConfig+0x42>
 8002134:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002136:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800213c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	7fdb      	ldrb	r3, [r3, #31]
 8002142:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002144:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800214a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	7f92      	ldrb	r2, [r2, #30]
 8002150:	2a00      	cmp	r2, #0
 8002152:	d102      	bne.n	800215a <ETH_SetMACConfig+0x66>
 8002154:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002158:	e000      	b.n	800215c <ETH_SetMACConfig+0x68>
 800215a:	2200      	movs	r2, #0
                        macconf->Speed |
 800215c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	7f1b      	ldrb	r3, [r3, #28]
 8002162:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002164:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800216a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	791b      	ldrb	r3, [r3, #4]
 8002170:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002172:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	f892 2020 	ldrb.w	r2, [r2, #32]
 800217a:	2a00      	cmp	r2, #0
 800217c:	d102      	bne.n	8002184 <ETH_SetMACConfig+0x90>
 800217e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002182:	e000      	b.n	8002186 <ETH_SetMACConfig+0x92>
 8002184:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002186:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	7bdb      	ldrb	r3, [r3, #15]
 800218c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800218e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002194:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800219c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800219e:	4313      	orrs	r3, r2
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021b6:	2001      	movs	r0, #1
 80021b8:	f7fe ff80 	bl	80010bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80021d2:	4013      	ands	r3, r2
 80021d4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021da:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80021e2:	2a00      	cmp	r2, #0
 80021e4:	d101      	bne.n	80021ea <ETH_SetMACConfig+0xf6>
 80021e6:	2280      	movs	r2, #128	@ 0x80
 80021e8:	e000      	b.n	80021ec <ETH_SetMACConfig+0xf8>
 80021ea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80021ec:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80021f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80021fa:	2a01      	cmp	r2, #1
 80021fc:	d101      	bne.n	8002202 <ETH_SetMACConfig+0x10e>
 80021fe:	2208      	movs	r2, #8
 8002200:	e000      	b.n	8002204 <ETH_SetMACConfig+0x110>
 8002202:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002204:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800220c:	2a01      	cmp	r2, #1
 800220e:	d101      	bne.n	8002214 <ETH_SetMACConfig+0x120>
 8002210:	2204      	movs	r2, #4
 8002212:	e000      	b.n	8002216 <ETH_SetMACConfig+0x122>
 8002214:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002216:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800221e:	2a01      	cmp	r2, #1
 8002220:	d101      	bne.n	8002226 <ETH_SetMACConfig+0x132>
 8002222:	2202      	movs	r2, #2
 8002224:	e000      	b.n	8002228 <ETH_SetMACConfig+0x134>
 8002226:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002228:	4313      	orrs	r3, r2
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	4313      	orrs	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002240:	2001      	movs	r0, #1
 8002242:	f7fe ff3b 	bl	80010bc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	619a      	str	r2, [r3, #24]
}
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	fd20810f 	.word	0xfd20810f

0800225c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	4b3d      	ldr	r3, [pc, #244]	@ (800236c <ETH_SetDMAConfig+0x110>)
 8002276:	4013      	ands	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	7b1b      	ldrb	r3, [r3, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d102      	bne.n	8002288 <ETH_SetDMAConfig+0x2c>
 8002282:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002286:	e000      	b.n	800228a <ETH_SetDMAConfig+0x2e>
 8002288:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	7b5b      	ldrb	r3, [r3, #13]
 800228e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002290:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	7f52      	ldrb	r2, [r2, #29]
 8002296:	2a00      	cmp	r2, #0
 8002298:	d102      	bne.n	80022a0 <ETH_SetDMAConfig+0x44>
 800229a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800229e:	e000      	b.n	80022a2 <ETH_SetDMAConfig+0x46>
 80022a0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80022a2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	7b9b      	ldrb	r3, [r3, #14]
 80022a8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80022aa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80022b0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	7f1b      	ldrb	r3, [r3, #28]
 80022b6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80022b8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	7f9b      	ldrb	r3, [r3, #30]
 80022be:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80022c0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80022c6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022ce:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022d0:	4313      	orrs	r3, r2
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022e0:	461a      	mov	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022f2:	2001      	movs	r0, #1
 80022f4:	f7fe fee2 	bl	80010bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002300:	461a      	mov	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	791b      	ldrb	r3, [r3, #4]
 800230a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002310:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002316:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800231c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002324:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002326:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800232e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002334:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6812      	ldr	r2, [r2, #0]
 800233a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800233e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002342:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002350:	2001      	movs	r0, #1
 8002352:	f7fe feb3 	bl	80010bc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6013      	str	r3, [r2, #0]
}
 8002364:	bf00      	nop
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	f8de3f23 	.word	0xf8de3f23

08002370 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b0a6      	sub	sp, #152	@ 0x98
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002378:	2301      	movs	r3, #1
 800237a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800237e:	2301      	movs	r3, #1
 8002380:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002384:	2300      	movs	r3, #0
 8002386:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002388:	2300      	movs	r3, #0
 800238a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800238e:	2301      	movs	r3, #1
 8002390:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002394:	2300      	movs	r3, #0
 8002396:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800239a:	2301      	movs	r3, #1
 800239c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80023a0:	2301      	movs	r3, #1
 80023a2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80023a6:	2300      	movs	r3, #0
 80023a8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80023b2:	2300      	movs	r3, #0
 80023b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80023bc:	2300      	movs	r3, #0
 80023be:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80023c0:	2300      	movs	r3, #0
 80023c2:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80023c6:	2300      	movs	r3, #0
 80023c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80023cc:	2300      	movs	r3, #0
 80023ce:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80023d2:	2300      	movs	r3, #0
 80023d4:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80023d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80023dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80023de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80023e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80023e4:	2300      	movs	r3, #0
 80023e6:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80023ea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80023ee:	4619      	mov	r1, r3
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff fe7f 	bl	80020f4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80023f6:	2301      	movs	r3, #1
 80023f8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80023fa:	2301      	movs	r3, #1
 80023fc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80023fe:	2301      	movs	r3, #1
 8002400:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002404:	2301      	movs	r3, #1
 8002406:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002408:	2300      	movs	r3, #0
 800240a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800240c:	2300      	movs	r3, #0
 800240e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002412:	2300      	movs	r3, #0
 8002414:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002418:	2300      	movs	r3, #0
 800241a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800241c:	2301      	movs	r3, #1
 800241e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002422:	2301      	movs	r3, #1
 8002424:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002426:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800242a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800242c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002430:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002432:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002436:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002438:	2301      	movs	r3, #1
 800243a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800243e:	2300      	movs	r3, #0
 8002440:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002442:	2300      	movs	r3, #0
 8002444:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002446:	f107 0308 	add.w	r3, r7, #8
 800244a:	4619      	mov	r1, r3
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff ff05 	bl	800225c <ETH_SetDMAConfig>
}
 8002452:	bf00      	nop
 8002454:	3798      	adds	r7, #152	@ 0x98
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800245c:	b480      	push	{r7}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3305      	adds	r3, #5
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	021b      	lsls	r3, r3, #8
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	3204      	adds	r2, #4
 8002474:	7812      	ldrb	r2, [r2, #0]
 8002476:	4313      	orrs	r3, r2
 8002478:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	4b11      	ldr	r3, [pc, #68]	@ (80024c4 <ETH_MACAddressConfig+0x68>)
 800247e:	4413      	add	r3, r2
 8002480:	461a      	mov	r2, r3
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3303      	adds	r3, #3
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	061a      	lsls	r2, r3, #24
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3302      	adds	r3, #2
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	041b      	lsls	r3, r3, #16
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3301      	adds	r3, #1
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	021b      	lsls	r3, r3, #8
 80024a0:	4313      	orrs	r3, r2
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	7812      	ldrb	r2, [r2, #0]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	4b06      	ldr	r3, [pc, #24]	@ (80024c8 <ETH_MACAddressConfig+0x6c>)
 80024ae:	4413      	add	r3, r2
 80024b0:	461a      	mov	r2, r3
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	6013      	str	r3, [r2, #0]
}
 80024b6:	bf00      	nop
 80024b8:	371c      	adds	r7, #28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40028040 	.word	0x40028040
 80024c8:	40028044 	.word	0x40028044

080024cc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024d4:	2300      	movs	r3, #0
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	e03e      	b.n	8002558 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68d9      	ldr	r1, [r3, #12]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	440b      	add	r3, r1
 80024ea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2200      	movs	r2, #0
 80024f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2200      	movs	r2, #0
 80024fc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2200      	movs	r2, #0
 8002502:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002504:	68b9      	ldr	r1, [r7, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	3206      	adds	r2, #6
 800250c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d80c      	bhi.n	800253c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68d9      	ldr	r1, [r3, #12]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	440b      	add	r3, r1
 8002534:	461a      	mov	r2, r3
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	e004      	b.n	8002546 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	461a      	mov	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	3301      	adds	r3, #1
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2b03      	cmp	r3, #3
 800255c:	d9bd      	bls.n	80024da <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002570:	611a      	str	r2, [r3, #16]
}
 8002572:	bf00      	nop
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800257e:	b480      	push	{r7}
 8002580:	b085      	sub	sp, #20
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002586:	2300      	movs	r3, #0
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	e048      	b.n	800261e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6919      	ldr	r1, [r3, #16]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	440b      	add	r3, r1
 800259c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	2200      	movs	r2, #0
 80025a8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2200      	movs	r2, #0
 80025ae:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2200      	movs	r2, #0
 80025b4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2200      	movs	r2, #0
 80025ba:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2200      	movs	r2, #0
 80025c0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80025c8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80025e2:	68b9      	ldr	r1, [r7, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	3212      	adds	r2, #18
 80025ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d80c      	bhi.n	800260e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6919      	ldr	r1, [r3, #16]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	4613      	mov	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	440b      	add	r3, r1
 8002606:	461a      	mov	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	60da      	str	r2, [r3, #12]
 800260c:	e004      	b.n	8002618 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	461a      	mov	r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	3301      	adds	r3, #1
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2b03      	cmp	r3, #3
 8002622:	d9b3      	bls.n	800258c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691a      	ldr	r2, [r3, #16]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800264e:	60da      	str	r2, [r3, #12]
}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 800265c:	b480      	push	{r7}
 800265e:	b091      	sub	sp, #68	@ 0x44
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	3318      	adds	r3, #24
 800266c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800266e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800267e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002680:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002686:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800268e:	2300      	movs	r3, #0
 8002690:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800269a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800269e:	d007      	beq.n	80026b0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80026a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026a4:	3304      	adds	r3, #4
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80026b0:	2302      	movs	r3, #2
 80026b2:	e115      	b.n	80028e0 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 80026b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026b6:	3301      	adds	r3, #1
 80026b8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80026ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80026c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80026cc:	f023 031f 	bic.w	r3, r3, #31
 80026d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026d2:	6852      	ldr	r2, [r2, #4]
 80026d4:	431a      	orrs	r2, r3
 80026d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d008      	beq.n	80026f8 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80026e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	431a      	orrs	r2, r3
 80026f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0320 	and.w	r3, r3, #32
 8002700:	2b00      	cmp	r3, #0
 8002702:	d008      	beq.n	8002716 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	431a      	orrs	r2, r3
 8002712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002714:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	2b00      	cmp	r3, #0
 8002720:	d005      	beq.n	800272e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800272a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800272c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800272e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002738:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800273a:	e084      	b.n	8002846 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800273c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002746:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d006      	beq.n	800275c <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800274e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	e005      	b.n	8002768 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800275c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002766:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800276a:	3301      	adds	r3, #1
 800276c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800276e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002770:	2b03      	cmp	r3, #3
 8002772:	d902      	bls.n	800277a <ETH_Prepare_Tx_Descriptors+0x11e>
 8002774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002776:	3b04      	subs	r3, #4
 8002778:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800277a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800277e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002782:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800278c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002790:	d007      	beq.n	80027a2 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002796:	3304      	adds	r3, #4
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d029      	beq.n	80027f6 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80027a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80027aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ae:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80027b0:	2300      	movs	r3, #0
 80027b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027b4:	e019      	b.n	80027ea <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 80027b6:	f3bf 8f5f 	dmb	sy
}
 80027ba:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80027bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80027c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027c6:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80027c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027ca:	3301      	adds	r3, #1
 80027cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d902      	bls.n	80027da <ETH_Prepare_Tx_Descriptors+0x17e>
 80027d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027d6:	3b04      	subs	r3, #4
 80027d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80027da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80027de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027e2:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80027e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027e6:	3301      	adds	r3, #1
 80027e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80027ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d3e1      	bcc.n	80027b6 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 80027f2:	2302      	movs	r3, #2
 80027f4:	e074      	b.n	80028e0 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80027f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80027fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002800:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002804:	3301      	adds	r3, #1
 8002806:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800280e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002816:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002820:	f023 031f 	bic.w	r3, r3, #31
 8002824:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002826:	6852      	ldr	r2, [r2, #4]
 8002828:	431a      	orrs	r2, r3
 800282a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800282c:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800282e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002830:	3301      	adds	r3, #1
 8002832:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002834:	f3bf 8f5f 	dmb	sy
}
 8002838:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800283a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002844:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	f47f af76 	bne.w	800273c <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d006      	beq.n	8002864 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800285e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	e005      	b.n	8002870 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800286c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800286e:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800287a:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800287c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287e:	6a3a      	ldr	r2, [r7, #32]
 8002880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002884:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002886:	f3bf 8f5f 	dmb	sy
}
 800288a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800288c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002896:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800289c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800289e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028a0:	3304      	adds	r3, #4
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80028a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028ac:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80028ae:	f3ef 8310 	mrs	r3, PRIMASK
 80028b2:	613b      	str	r3, [r7, #16]
  return(result);
 80028b4:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80028b6:	61fb      	str	r3, [r7, #28]
 80028b8:	2301      	movs	r3, #1
 80028ba:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	f383 8810 	msr	PRIMASK, r3
}
 80028c2:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80028c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ca:	4413      	add	r3, r2
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	f383 8810 	msr	PRIMASK, r3
}
 80028dc:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3744      	adds	r7, #68	@ 0x44
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b089      	sub	sp, #36	@ 0x24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028fe:	2300      	movs	r3, #0
 8002900:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	e16b      	b.n	8002be0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002908:	2201      	movs	r2, #1
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	4013      	ands	r3, r2
 800291a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	429a      	cmp	r2, r3
 8002922:	f040 815a 	bne.w	8002bda <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	2b01      	cmp	r3, #1
 8002930:	d005      	beq.n	800293e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800293a:	2b02      	cmp	r3, #2
 800293c:	d130      	bne.n	80029a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	2203      	movs	r2, #3
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002974:	2201      	movs	r2, #1
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	091b      	lsrs	r3, r3, #4
 800298a:	f003 0201 	and.w	r2, r3, #1
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	2b03      	cmp	r3, #3
 80029aa:	d017      	beq.n	80029dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	2203      	movs	r2, #3
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d123      	bne.n	8002a30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	08da      	lsrs	r2, r3, #3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3208      	adds	r2, #8
 80029f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	220f      	movs	r2, #15
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	08da      	lsrs	r2, r3, #3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3208      	adds	r2, #8
 8002a2a:	69b9      	ldr	r1, [r7, #24]
 8002a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0203 	and.w	r2, r3, #3
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 80b4 	beq.w	8002bda <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	4b60      	ldr	r3, [pc, #384]	@ (8002bf8 <HAL_GPIO_Init+0x30c>)
 8002a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7a:	4a5f      	ldr	r2, [pc, #380]	@ (8002bf8 <HAL_GPIO_Init+0x30c>)
 8002a7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a80:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a82:	4b5d      	ldr	r3, [pc, #372]	@ (8002bf8 <HAL_GPIO_Init+0x30c>)
 8002a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a8e:	4a5b      	ldr	r2, [pc, #364]	@ (8002bfc <HAL_GPIO_Init+0x310>)
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	089b      	lsrs	r3, r3, #2
 8002a94:	3302      	adds	r3, #2
 8002a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	220f      	movs	r2, #15
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a52      	ldr	r2, [pc, #328]	@ (8002c00 <HAL_GPIO_Init+0x314>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d02b      	beq.n	8002b12 <HAL_GPIO_Init+0x226>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a51      	ldr	r2, [pc, #324]	@ (8002c04 <HAL_GPIO_Init+0x318>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d025      	beq.n	8002b0e <HAL_GPIO_Init+0x222>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a50      	ldr	r2, [pc, #320]	@ (8002c08 <HAL_GPIO_Init+0x31c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d01f      	beq.n	8002b0a <HAL_GPIO_Init+0x21e>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a4f      	ldr	r2, [pc, #316]	@ (8002c0c <HAL_GPIO_Init+0x320>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d019      	beq.n	8002b06 <HAL_GPIO_Init+0x21a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a4e      	ldr	r2, [pc, #312]	@ (8002c10 <HAL_GPIO_Init+0x324>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d013      	beq.n	8002b02 <HAL_GPIO_Init+0x216>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a4d      	ldr	r2, [pc, #308]	@ (8002c14 <HAL_GPIO_Init+0x328>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00d      	beq.n	8002afe <HAL_GPIO_Init+0x212>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a4c      	ldr	r2, [pc, #304]	@ (8002c18 <HAL_GPIO_Init+0x32c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d007      	beq.n	8002afa <HAL_GPIO_Init+0x20e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a4b      	ldr	r2, [pc, #300]	@ (8002c1c <HAL_GPIO_Init+0x330>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d101      	bne.n	8002af6 <HAL_GPIO_Init+0x20a>
 8002af2:	2307      	movs	r3, #7
 8002af4:	e00e      	b.n	8002b14 <HAL_GPIO_Init+0x228>
 8002af6:	2308      	movs	r3, #8
 8002af8:	e00c      	b.n	8002b14 <HAL_GPIO_Init+0x228>
 8002afa:	2306      	movs	r3, #6
 8002afc:	e00a      	b.n	8002b14 <HAL_GPIO_Init+0x228>
 8002afe:	2305      	movs	r3, #5
 8002b00:	e008      	b.n	8002b14 <HAL_GPIO_Init+0x228>
 8002b02:	2304      	movs	r3, #4
 8002b04:	e006      	b.n	8002b14 <HAL_GPIO_Init+0x228>
 8002b06:	2303      	movs	r3, #3
 8002b08:	e004      	b.n	8002b14 <HAL_GPIO_Init+0x228>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e002      	b.n	8002b14 <HAL_GPIO_Init+0x228>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <HAL_GPIO_Init+0x228>
 8002b12:	2300      	movs	r3, #0
 8002b14:	69fa      	ldr	r2, [r7, #28]
 8002b16:	f002 0203 	and.w	r2, r2, #3
 8002b1a:	0092      	lsls	r2, r2, #2
 8002b1c:	4093      	lsls	r3, r2
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b24:	4935      	ldr	r1, [pc, #212]	@ (8002bfc <HAL_GPIO_Init+0x310>)
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	089b      	lsrs	r3, r3, #2
 8002b2a:	3302      	adds	r3, #2
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b32:	4b3b      	ldr	r3, [pc, #236]	@ (8002c20 <HAL_GPIO_Init+0x334>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b56:	4a32      	ldr	r2, [pc, #200]	@ (8002c20 <HAL_GPIO_Init+0x334>)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b5c:	4b30      	ldr	r3, [pc, #192]	@ (8002c20 <HAL_GPIO_Init+0x334>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b80:	4a27      	ldr	r2, [pc, #156]	@ (8002c20 <HAL_GPIO_Init+0x334>)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b86:	4b26      	ldr	r3, [pc, #152]	@ (8002c20 <HAL_GPIO_Init+0x334>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4013      	ands	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002baa:	4a1d      	ldr	r2, [pc, #116]	@ (8002c20 <HAL_GPIO_Init+0x334>)
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c20 <HAL_GPIO_Init+0x334>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bd4:	4a12      	ldr	r2, [pc, #72]	@ (8002c20 <HAL_GPIO_Init+0x334>)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	61fb      	str	r3, [r7, #28]
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	2b0f      	cmp	r3, #15
 8002be4:	f67f ae90 	bls.w	8002908 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
 8002bec:	3724      	adds	r7, #36	@ 0x24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	40013800 	.word	0x40013800
 8002c00:	40020000 	.word	0x40020000
 8002c04:	40020400 	.word	0x40020400
 8002c08:	40020800 	.word	0x40020800
 8002c0c:	40020c00 	.word	0x40020c00
 8002c10:	40021000 	.word	0x40021000
 8002c14:	40021400 	.word	0x40021400
 8002c18:	40021800 	.word	0x40021800
 8002c1c:	40021c00 	.word	0x40021c00
 8002c20:	40013c00 	.word	0x40013c00

08002c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	807b      	strh	r3, [r7, #2]
 8002c30:	4613      	mov	r3, r2
 8002c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c34:	787b      	ldrb	r3, [r7, #1]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c3a:	887a      	ldrh	r2, [r7, #2]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c40:	e003      	b.n	8002c4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c42:	887b      	ldrh	r3, [r7, #2]
 8002c44:	041a      	lsls	r2, r3, #16
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	619a      	str	r2, [r3, #24]
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b085      	sub	sp, #20
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c68:	887a      	ldrh	r2, [r7, #2]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	041a      	lsls	r2, r3, #16
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	43d9      	mvns	r1, r3
 8002c74:	887b      	ldrh	r3, [r7, #2]
 8002c76:	400b      	ands	r3, r1
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	619a      	str	r2, [r3, #24]
}
 8002c7e:	bf00      	nop
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c96:	4b08      	ldr	r3, [pc, #32]	@ (8002cb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c98:	695a      	ldr	r2, [r3, #20]
 8002c9a:	88fb      	ldrh	r3, [r7, #6]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d006      	beq.n	8002cb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ca2:	4a05      	ldr	r2, [pc, #20]	@ (8002cb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ca4:	88fb      	ldrh	r3, [r7, #6]
 8002ca6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ca8:	88fb      	ldrh	r3, [r7, #6]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fd fe6a 	bl	8000984 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cb0:	bf00      	nop
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40013c00 	.word	0x40013c00

08002cbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e267      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d075      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002cda:	4b88      	ldr	r3, [pc, #544]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d00c      	beq.n	8002d00 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ce6:	4b85      	ldr	r3, [pc, #532]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d112      	bne.n	8002d18 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cf2:	4b82      	ldr	r3, [pc, #520]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cfe:	d10b      	bne.n	8002d18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d00:	4b7e      	ldr	r3, [pc, #504]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d05b      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x108>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d157      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e242      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d20:	d106      	bne.n	8002d30 <HAL_RCC_OscConfig+0x74>
 8002d22:	4b76      	ldr	r3, [pc, #472]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a75      	ldr	r2, [pc, #468]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	e01d      	b.n	8002d6c <HAL_RCC_OscConfig+0xb0>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x98>
 8002d3a:	4b70      	ldr	r3, [pc, #448]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a6f      	ldr	r2, [pc, #444]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	4b6d      	ldr	r3, [pc, #436]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a6c      	ldr	r2, [pc, #432]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	e00b      	b.n	8002d6c <HAL_RCC_OscConfig+0xb0>
 8002d54:	4b69      	ldr	r3, [pc, #420]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a68      	ldr	r2, [pc, #416]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	4b66      	ldr	r3, [pc, #408]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a65      	ldr	r2, [pc, #404]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d013      	beq.n	8002d9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7fe f996 	bl	80010a4 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d7c:	f7fe f992 	bl	80010a4 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b64      	cmp	r3, #100	@ 0x64
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e207      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8e:	4b5b      	ldr	r3, [pc, #364]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0xc0>
 8002d9a:	e014      	b.n	8002dc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9c:	f7fe f982 	bl	80010a4 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da4:	f7fe f97e 	bl	80010a4 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b64      	cmp	r3, #100	@ 0x64
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e1f3      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002db6:	4b51      	ldr	r3, [pc, #324]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0xe8>
 8002dc2:	e000      	b.n	8002dc6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d063      	beq.n	8002e9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002dd2:	4b4a      	ldr	r3, [pc, #296]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00b      	beq.n	8002df6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dde:	4b47      	ldr	r3, [pc, #284]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002de6:	2b08      	cmp	r3, #8
 8002de8:	d11c      	bne.n	8002e24 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dea:	4b44      	ldr	r3, [pc, #272]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d116      	bne.n	8002e24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002df6:	4b41      	ldr	r3, [pc, #260]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d005      	beq.n	8002e0e <HAL_RCC_OscConfig+0x152>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d001      	beq.n	8002e0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e1c7      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	4937      	ldr	r1, [pc, #220]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e22:	e03a      	b.n	8002e9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d020      	beq.n	8002e6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e2c:	4b34      	ldr	r3, [pc, #208]	@ (8002f00 <HAL_RCC_OscConfig+0x244>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e32:	f7fe f937 	bl	80010a4 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e3a:	f7fe f933 	bl	80010a4 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e1a8      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0f0      	beq.n	8002e3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e58:	4b28      	ldr	r3, [pc, #160]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4925      	ldr	r1, [pc, #148]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	600b      	str	r3, [r1, #0]
 8002e6c:	e015      	b.n	8002e9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e6e:	4b24      	ldr	r3, [pc, #144]	@ (8002f00 <HAL_RCC_OscConfig+0x244>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e74:	f7fe f916 	bl	80010a4 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e7c:	f7fe f912 	bl	80010a4 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e187      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d036      	beq.n	8002f14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d016      	beq.n	8002edc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eae:	4b15      	ldr	r3, [pc, #84]	@ (8002f04 <HAL_RCC_OscConfig+0x248>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb4:	f7fe f8f6 	bl	80010a4 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ebc:	f7fe f8f2 	bl	80010a4 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e167      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ece:	4b0b      	ldr	r3, [pc, #44]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002ed0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0f0      	beq.n	8002ebc <HAL_RCC_OscConfig+0x200>
 8002eda:	e01b      	b.n	8002f14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002edc:	4b09      	ldr	r3, [pc, #36]	@ (8002f04 <HAL_RCC_OscConfig+0x248>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee2:	f7fe f8df 	bl	80010a4 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee8:	e00e      	b.n	8002f08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eea:	f7fe f8db 	bl	80010a4 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d907      	bls.n	8002f08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e150      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
 8002efc:	40023800 	.word	0x40023800
 8002f00:	42470000 	.word	0x42470000
 8002f04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f08:	4b88      	ldr	r3, [pc, #544]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002f0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1ea      	bne.n	8002eea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 8097 	beq.w	8003050 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f22:	2300      	movs	r3, #0
 8002f24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f26:	4b81      	ldr	r3, [pc, #516]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10f      	bne.n	8002f52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	4b7d      	ldr	r3, [pc, #500]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	4a7c      	ldr	r2, [pc, #496]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f42:	4b7a      	ldr	r3, [pc, #488]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f4a:	60bb      	str	r3, [r7, #8]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f52:	4b77      	ldr	r3, [pc, #476]	@ (8003130 <HAL_RCC_OscConfig+0x474>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d118      	bne.n	8002f90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f5e:	4b74      	ldr	r3, [pc, #464]	@ (8003130 <HAL_RCC_OscConfig+0x474>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a73      	ldr	r2, [pc, #460]	@ (8003130 <HAL_RCC_OscConfig+0x474>)
 8002f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f6a:	f7fe f89b 	bl	80010a4 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f72:	f7fe f897 	bl	80010a4 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e10c      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f84:	4b6a      	ldr	r3, [pc, #424]	@ (8003130 <HAL_RCC_OscConfig+0x474>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d106      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x2ea>
 8002f98:	4b64      	ldr	r3, [pc, #400]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9c:	4a63      	ldr	r2, [pc, #396]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002f9e:	f043 0301 	orr.w	r3, r3, #1
 8002fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fa4:	e01c      	b.n	8002fe0 <HAL_RCC_OscConfig+0x324>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b05      	cmp	r3, #5
 8002fac:	d10c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x30c>
 8002fae:	4b5f      	ldr	r3, [pc, #380]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb2:	4a5e      	ldr	r2, [pc, #376]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fb4:	f043 0304 	orr.w	r3, r3, #4
 8002fb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fba:	4b5c      	ldr	r3, [pc, #368]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fbe:	4a5b      	ldr	r2, [pc, #364]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fc6:	e00b      	b.n	8002fe0 <HAL_RCC_OscConfig+0x324>
 8002fc8:	4b58      	ldr	r3, [pc, #352]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fcc:	4a57      	ldr	r2, [pc, #348]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fce:	f023 0301 	bic.w	r3, r3, #1
 8002fd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd4:	4b55      	ldr	r3, [pc, #340]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd8:	4a54      	ldr	r2, [pc, #336]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fda:	f023 0304 	bic.w	r3, r3, #4
 8002fde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d015      	beq.n	8003014 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe8:	f7fe f85c 	bl	80010a4 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fee:	e00a      	b.n	8003006 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff0:	f7fe f858 	bl	80010a4 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e0cb      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003006:	4b49      	ldr	r3, [pc, #292]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0ee      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x334>
 8003012:	e014      	b.n	800303e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003014:	f7fe f846 	bl	80010a4 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301a:	e00a      	b.n	8003032 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800301c:	f7fe f842 	bl	80010a4 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800302a:	4293      	cmp	r3, r2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e0b5      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003032:	4b3e      	ldr	r3, [pc, #248]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8003034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1ee      	bne.n	800301c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800303e:	7dfb      	ldrb	r3, [r7, #23]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d105      	bne.n	8003050 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003044:	4b39      	ldr	r3, [pc, #228]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8003046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003048:	4a38      	ldr	r2, [pc, #224]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 800304a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800304e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 80a1 	beq.w	800319c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800305a:	4b34      	ldr	r3, [pc, #208]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 030c 	and.w	r3, r3, #12
 8003062:	2b08      	cmp	r3, #8
 8003064:	d05c      	beq.n	8003120 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d141      	bne.n	80030f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306e:	4b31      	ldr	r3, [pc, #196]	@ (8003134 <HAL_RCC_OscConfig+0x478>)
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7fe f816 	bl	80010a4 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800307c:	f7fe f812 	bl	80010a4 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e087      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308e:	4b27      	ldr	r3, [pc, #156]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69da      	ldr	r2, [r3, #28]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a8:	019b      	lsls	r3, r3, #6
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b0:	085b      	lsrs	r3, r3, #1
 80030b2:	3b01      	subs	r3, #1
 80030b4:	041b      	lsls	r3, r3, #16
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030bc:	061b      	lsls	r3, r3, #24
 80030be:	491b      	ldr	r1, [pc, #108]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003134 <HAL_RCC_OscConfig+0x478>)
 80030c6:	2201      	movs	r2, #1
 80030c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ca:	f7fd ffeb 	bl	80010a4 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d2:	f7fd ffe7 	bl	80010a4 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e05c      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e4:	4b11      	ldr	r3, [pc, #68]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0f0      	beq.n	80030d2 <HAL_RCC_OscConfig+0x416>
 80030f0:	e054      	b.n	800319c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f2:	4b10      	ldr	r3, [pc, #64]	@ (8003134 <HAL_RCC_OscConfig+0x478>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f8:	f7fd ffd4 	bl	80010a4 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003100:	f7fd ffd0 	bl	80010a4 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e045      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003112:	4b06      	ldr	r3, [pc, #24]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0x444>
 800311e:	e03d      	b.n	800319c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d107      	bne.n	8003138 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e038      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
 800312c:	40023800 	.word	0x40023800
 8003130:	40007000 	.word	0x40007000
 8003134:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003138:	4b1b      	ldr	r3, [pc, #108]	@ (80031a8 <HAL_RCC_OscConfig+0x4ec>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d028      	beq.n	8003198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003150:	429a      	cmp	r2, r3
 8003152:	d121      	bne.n	8003198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315e:	429a      	cmp	r2, r3
 8003160:	d11a      	bne.n	8003198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003168:	4013      	ands	r3, r2
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800316e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003170:	4293      	cmp	r3, r2
 8003172:	d111      	bne.n	8003198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317e:	085b      	lsrs	r3, r3, #1
 8003180:	3b01      	subs	r3, #1
 8003182:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003184:	429a      	cmp	r2, r3
 8003186:	d107      	bne.n	8003198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003192:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40023800 	.word	0x40023800

080031ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e0cc      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031c0:	4b68      	ldr	r3, [pc, #416]	@ (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d90c      	bls.n	80031e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ce:	4b65      	ldr	r3, [pc, #404]	@ (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b63      	ldr	r3, [pc, #396]	@ (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0b8      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d020      	beq.n	8003236 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003200:	4b59      	ldr	r3, [pc, #356]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4a58      	ldr	r2, [pc, #352]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800320a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003218:	4b53      	ldr	r3, [pc, #332]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	4a52      	ldr	r2, [pc, #328]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003222:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003224:	4b50      	ldr	r3, [pc, #320]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	494d      	ldr	r1, [pc, #308]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	4313      	orrs	r3, r2
 8003234:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d044      	beq.n	80032cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d107      	bne.n	800325a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324a:	4b47      	ldr	r3, [pc, #284]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d119      	bne.n	800328a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e07f      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d003      	beq.n	800326a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003266:	2b03      	cmp	r3, #3
 8003268:	d107      	bne.n	800327a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326a:	4b3f      	ldr	r3, [pc, #252]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d109      	bne.n	800328a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e06f      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327a:	4b3b      	ldr	r3, [pc, #236]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e067      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800328a:	4b37      	ldr	r3, [pc, #220]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f023 0203 	bic.w	r2, r3, #3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4934      	ldr	r1, [pc, #208]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	4313      	orrs	r3, r2
 800329a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800329c:	f7fd ff02 	bl	80010a4 <HAL_GetTick>
 80032a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a2:	e00a      	b.n	80032ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a4:	f7fd fefe 	bl	80010a4 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e04f      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ba:	4b2b      	ldr	r3, [pc, #172]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 020c 	and.w	r2, r3, #12
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d1eb      	bne.n	80032a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032cc:	4b25      	ldr	r3, [pc, #148]	@ (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d20c      	bcs.n	80032f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032da:	4b22      	ldr	r3, [pc, #136]	@ (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e2:	4b20      	ldr	r3, [pc, #128]	@ (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d001      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e032      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003300:	4b19      	ldr	r3, [pc, #100]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4916      	ldr	r1, [pc, #88]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	4313      	orrs	r3, r2
 8003310:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d009      	beq.n	8003332 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800331e:	4b12      	ldr	r3, [pc, #72]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	490e      	ldr	r1, [pc, #56]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	4313      	orrs	r3, r2
 8003330:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003332:	f000 f821 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8003336:	4602      	mov	r2, r0
 8003338:	4b0b      	ldr	r3, [pc, #44]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	091b      	lsrs	r3, r3, #4
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	490a      	ldr	r1, [pc, #40]	@ (800336c <HAL_RCC_ClockConfig+0x1c0>)
 8003344:	5ccb      	ldrb	r3, [r1, r3]
 8003346:	fa22 f303 	lsr.w	r3, r2, r3
 800334a:	4a09      	ldr	r2, [pc, #36]	@ (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 800334c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800334e:	4b09      	ldr	r3, [pc, #36]	@ (8003374 <HAL_RCC_ClockConfig+0x1c8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fd fe62 	bl	800101c <HAL_InitTick>

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40023c00 	.word	0x40023c00
 8003368:	40023800 	.word	0x40023800
 800336c:	08012788 	.word	0x08012788
 8003370:	20000000 	.word	0x20000000
 8003374:	20000004 	.word	0x20000004

08003378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800337c:	b090      	sub	sp, #64	@ 0x40
 800337e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003390:	4b59      	ldr	r3, [pc, #356]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 030c 	and.w	r3, r3, #12
 8003398:	2b08      	cmp	r3, #8
 800339a:	d00d      	beq.n	80033b8 <HAL_RCC_GetSysClockFreq+0x40>
 800339c:	2b08      	cmp	r3, #8
 800339e:	f200 80a1 	bhi.w	80034e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <HAL_RCC_GetSysClockFreq+0x34>
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d003      	beq.n	80033b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80033aa:	e09b      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033ac:	4b53      	ldr	r3, [pc, #332]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x184>)
 80033ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033b0:	e09b      	b.n	80034ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033b2:	4b53      	ldr	r3, [pc, #332]	@ (8003500 <HAL_RCC_GetSysClockFreq+0x188>)
 80033b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033b6:	e098      	b.n	80034ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033b8:	4b4f      	ldr	r3, [pc, #316]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033c0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033c2:	4b4d      	ldr	r3, [pc, #308]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d028      	beq.n	8003420 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ce:	4b4a      	ldr	r3, [pc, #296]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	099b      	lsrs	r3, r3, #6
 80033d4:	2200      	movs	r2, #0
 80033d6:	623b      	str	r3, [r7, #32]
 80033d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033e0:	2100      	movs	r1, #0
 80033e2:	4b47      	ldr	r3, [pc, #284]	@ (8003500 <HAL_RCC_GetSysClockFreq+0x188>)
 80033e4:	fb03 f201 	mul.w	r2, r3, r1
 80033e8:	2300      	movs	r3, #0
 80033ea:	fb00 f303 	mul.w	r3, r0, r3
 80033ee:	4413      	add	r3, r2
 80033f0:	4a43      	ldr	r2, [pc, #268]	@ (8003500 <HAL_RCC_GetSysClockFreq+0x188>)
 80033f2:	fba0 1202 	umull	r1, r2, r0, r2
 80033f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033f8:	460a      	mov	r2, r1
 80033fa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80033fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033fe:	4413      	add	r3, r2
 8003400:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003404:	2200      	movs	r2, #0
 8003406:	61bb      	str	r3, [r7, #24]
 8003408:	61fa      	str	r2, [r7, #28]
 800340a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800340e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003412:	f7fc ff45 	bl	80002a0 <__aeabi_uldivmod>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4613      	mov	r3, r2
 800341c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800341e:	e053      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003420:	4b35      	ldr	r3, [pc, #212]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	099b      	lsrs	r3, r3, #6
 8003426:	2200      	movs	r2, #0
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	617a      	str	r2, [r7, #20]
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003432:	f04f 0b00 	mov.w	fp, #0
 8003436:	4652      	mov	r2, sl
 8003438:	465b      	mov	r3, fp
 800343a:	f04f 0000 	mov.w	r0, #0
 800343e:	f04f 0100 	mov.w	r1, #0
 8003442:	0159      	lsls	r1, r3, #5
 8003444:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003448:	0150      	lsls	r0, r2, #5
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	ebb2 080a 	subs.w	r8, r2, sl
 8003452:	eb63 090b 	sbc.w	r9, r3, fp
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	f04f 0300 	mov.w	r3, #0
 800345e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003462:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003466:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800346a:	ebb2 0408 	subs.w	r4, r2, r8
 800346e:	eb63 0509 	sbc.w	r5, r3, r9
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	00eb      	lsls	r3, r5, #3
 800347c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003480:	00e2      	lsls	r2, r4, #3
 8003482:	4614      	mov	r4, r2
 8003484:	461d      	mov	r5, r3
 8003486:	eb14 030a 	adds.w	r3, r4, sl
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	eb45 030b 	adc.w	r3, r5, fp
 8003490:	607b      	str	r3, [r7, #4]
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	f04f 0300 	mov.w	r3, #0
 800349a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800349e:	4629      	mov	r1, r5
 80034a0:	028b      	lsls	r3, r1, #10
 80034a2:	4621      	mov	r1, r4
 80034a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034a8:	4621      	mov	r1, r4
 80034aa:	028a      	lsls	r2, r1, #10
 80034ac:	4610      	mov	r0, r2
 80034ae:	4619      	mov	r1, r3
 80034b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b2:	2200      	movs	r2, #0
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	60fa      	str	r2, [r7, #12]
 80034b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034bc:	f7fc fef0 	bl	80002a0 <__aeabi_uldivmod>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4613      	mov	r3, r2
 80034c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80034c8:	4b0b      	ldr	r3, [pc, #44]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	0c1b      	lsrs	r3, r3, #16
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	3301      	adds	r3, #1
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80034d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034e2:	e002      	b.n	80034ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034e4:	4b05      	ldr	r3, [pc, #20]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x184>)
 80034e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3740      	adds	r7, #64	@ 0x40
 80034f0:	46bd      	mov	sp, r7
 80034f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800
 80034fc:	00f42400 	.word	0x00f42400
 8003500:	017d7840 	.word	0x017d7840

08003504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003508:	4b03      	ldr	r3, [pc, #12]	@ (8003518 <HAL_RCC_GetHCLKFreq+0x14>)
 800350a:	681b      	ldr	r3, [r3, #0]
}
 800350c:	4618      	mov	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	20000000 	.word	0x20000000

0800351c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003520:	f7ff fff0 	bl	8003504 <HAL_RCC_GetHCLKFreq>
 8003524:	4602      	mov	r2, r0
 8003526:	4b05      	ldr	r3, [pc, #20]	@ (800353c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	0a9b      	lsrs	r3, r3, #10
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	4903      	ldr	r1, [pc, #12]	@ (8003540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003532:	5ccb      	ldrb	r3, [r1, r3]
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003538:	4618      	mov	r0, r3
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40023800 	.word	0x40023800
 8003540:	08012798 	.word	0x08012798

08003544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003548:	f7ff ffdc 	bl	8003504 <HAL_RCC_GetHCLKFreq>
 800354c:	4602      	mov	r2, r0
 800354e:	4b05      	ldr	r3, [pc, #20]	@ (8003564 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	0b5b      	lsrs	r3, r3, #13
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	4903      	ldr	r1, [pc, #12]	@ (8003568 <HAL_RCC_GetPCLK2Freq+0x24>)
 800355a:	5ccb      	ldrb	r3, [r1, r3]
 800355c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003560:	4618      	mov	r0, r3
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40023800 	.word	0x40023800
 8003568:	08012798 	.word	0x08012798

0800356c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e042      	b.n	8003604 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d106      	bne.n	8003598 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7fd fa5a 	bl	8000a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2224      	movs	r2, #36	@ 0x24
 800359c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 fc99 	bl	8003ee8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	691a      	ldr	r2, [r3, #16]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695a      	ldr	r2, [r3, #20]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68da      	ldr	r2, [r3, #12]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b0ba      	sub	sp, #232	@ 0xe8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003632:	2300      	movs	r3, #0
 8003634:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003638:	2300      	movs	r3, #0
 800363a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800363e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800364a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10f      	bne.n	8003672 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	2b00      	cmp	r3, #0
 800365c:	d009      	beq.n	8003672 <HAL_UART_IRQHandler+0x66>
 800365e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 fb7e 	bl	8003d6c <UART_Receive_IT>
      return;
 8003670:	e273      	b.n	8003b5a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003672:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 80de 	beq.w	8003838 <HAL_UART_IRQHandler+0x22c>
 800367c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d106      	bne.n	8003696 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800368c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 80d1 	beq.w	8003838 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00b      	beq.n	80036ba <HAL_UART_IRQHandler+0xae>
 80036a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d005      	beq.n	80036ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b2:	f043 0201 	orr.w	r2, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00b      	beq.n	80036de <HAL_UART_IRQHandler+0xd2>
 80036c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d005      	beq.n	80036de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d6:	f043 0202 	orr.w	r2, r3, #2
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00b      	beq.n	8003702 <HAL_UART_IRQHandler+0xf6>
 80036ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d005      	beq.n	8003702 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fa:	f043 0204 	orr.w	r2, r3, #4
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d011      	beq.n	8003732 <HAL_UART_IRQHandler+0x126>
 800370e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003712:	f003 0320 	and.w	r3, r3, #32
 8003716:	2b00      	cmp	r3, #0
 8003718:	d105      	bne.n	8003726 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800371a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d005      	beq.n	8003732 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372a:	f043 0208 	orr.w	r2, r3, #8
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 820a 	beq.w	8003b50 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800373c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003740:	f003 0320 	and.w	r3, r3, #32
 8003744:	2b00      	cmp	r3, #0
 8003746:	d008      	beq.n	800375a <HAL_UART_IRQHandler+0x14e>
 8003748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800374c:	f003 0320 	and.w	r3, r3, #32
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 fb09 	bl	8003d6c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003764:	2b40      	cmp	r3, #64	@ 0x40
 8003766:	bf0c      	ite	eq
 8003768:	2301      	moveq	r3, #1
 800376a:	2300      	movne	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	2b00      	cmp	r3, #0
 800377c:	d103      	bne.n	8003786 <HAL_UART_IRQHandler+0x17a>
 800377e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003782:	2b00      	cmp	r3, #0
 8003784:	d04f      	beq.n	8003826 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fa14 	bl	8003bb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003796:	2b40      	cmp	r3, #64	@ 0x40
 8003798:	d141      	bne.n	800381e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	3314      	adds	r3, #20
 80037a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037a8:	e853 3f00 	ldrex	r3, [r3]
 80037ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80037b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3314      	adds	r3, #20
 80037c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80037c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80037ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80037d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037d6:	e841 2300 	strex	r3, r2, [r1]
 80037da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1d9      	bne.n	800379a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d013      	beq.n	8003816 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f2:	4a8a      	ldr	r2, [pc, #552]	@ (8003a1c <HAL_UART_IRQHandler+0x410>)
 80037f4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fd fe03 	bl	8001406 <HAL_DMA_Abort_IT>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d016      	beq.n	8003834 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800380a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003810:	4610      	mov	r0, r2
 8003812:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003814:	e00e      	b.n	8003834 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f9b6 	bl	8003b88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800381c:	e00a      	b.n	8003834 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f9b2 	bl	8003b88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003824:	e006      	b.n	8003834 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f9ae 	bl	8003b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003832:	e18d      	b.n	8003b50 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003834:	bf00      	nop
    return;
 8003836:	e18b      	b.n	8003b50 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383c:	2b01      	cmp	r3, #1
 800383e:	f040 8167 	bne.w	8003b10 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003846:	f003 0310 	and.w	r3, r3, #16
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 8160 	beq.w	8003b10 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003854:	f003 0310 	and.w	r3, r3, #16
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 8159 	beq.w	8003b10 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800385e:	2300      	movs	r3, #0
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800387e:	2b40      	cmp	r3, #64	@ 0x40
 8003880:	f040 80ce 	bne.w	8003a20 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003890:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 80a9 	beq.w	80039ec <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800389e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038a2:	429a      	cmp	r2, r3
 80038a4:	f080 80a2 	bcs.w	80039ec <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038ae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038ba:	f000 8088 	beq.w	80039ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	330c      	adds	r3, #12
 80038c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038cc:	e853 3f00 	ldrex	r3, [r3]
 80038d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	330c      	adds	r3, #12
 80038e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80038ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80038ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80038f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80038fa:	e841 2300 	strex	r3, r2, [r1]
 80038fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003902:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1d9      	bne.n	80038be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3314      	adds	r3, #20
 8003910:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003912:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003914:	e853 3f00 	ldrex	r3, [r3]
 8003918:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800391a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800391c:	f023 0301 	bic.w	r3, r3, #1
 8003920:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3314      	adds	r3, #20
 800392a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800392e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003932:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003934:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003936:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800393a:	e841 2300 	strex	r3, r2, [r1]
 800393e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003940:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1e1      	bne.n	800390a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	3314      	adds	r3, #20
 800394c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003950:	e853 3f00 	ldrex	r3, [r3]
 8003954:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003956:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003958:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800395c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	3314      	adds	r3, #20
 8003966:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800396a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800396c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003970:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003972:	e841 2300 	strex	r3, r2, [r1]
 8003976:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003978:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1e3      	bne.n	8003946 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	330c      	adds	r3, #12
 8003992:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003994:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003996:	e853 3f00 	ldrex	r3, [r3]
 800399a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800399c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800399e:	f023 0310 	bic.w	r3, r3, #16
 80039a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	330c      	adds	r3, #12
 80039ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80039b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80039b2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039b8:	e841 2300 	strex	r3, r2, [r1]
 80039bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1e3      	bne.n	800398c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fd fcac 	bl	8001326 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2202      	movs	r2, #2
 80039d2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039dc:	b29b      	uxth	r3, r3
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	4619      	mov	r1, r3
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f8d9 	bl	8003b9c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80039ea:	e0b3      	b.n	8003b54 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039f4:	429a      	cmp	r2, r3
 80039f6:	f040 80ad 	bne.w	8003b54 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a04:	f040 80a6 	bne.w	8003b54 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a12:	4619      	mov	r1, r3
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f8c1 	bl	8003b9c <HAL_UARTEx_RxEventCallback>
      return;
 8003a1a:	e09b      	b.n	8003b54 <HAL_UART_IRQHandler+0x548>
 8003a1c:	08003c7b 	.word	0x08003c7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 808e 	beq.w	8003b58 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003a3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 8089 	beq.w	8003b58 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	330c      	adds	r3, #12
 8003a4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a50:	e853 3f00 	ldrex	r3, [r3]
 8003a54:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a5c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	330c      	adds	r3, #12
 8003a66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a72:	e841 2300 	strex	r3, r2, [r1]
 8003a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1e3      	bne.n	8003a46 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	3314      	adds	r3, #20
 8003a84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a88:	e853 3f00 	ldrex	r3, [r3]
 8003a8c:	623b      	str	r3, [r7, #32]
   return(result);
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	f023 0301 	bic.w	r3, r3, #1
 8003a94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3314      	adds	r3, #20
 8003a9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003aa2:	633a      	str	r2, [r7, #48]	@ 0x30
 8003aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003aa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003aaa:	e841 2300 	strex	r3, r2, [r1]
 8003aae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1e3      	bne.n	8003a7e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	330c      	adds	r3, #12
 8003aca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	e853 3f00 	ldrex	r3, [r3]
 8003ad2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 0310 	bic.w	r3, r3, #16
 8003ada:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	330c      	adds	r3, #12
 8003ae4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003ae8:	61fa      	str	r2, [r7, #28]
 8003aea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aec:	69b9      	ldr	r1, [r7, #24]
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	e841 2300 	strex	r3, r2, [r1]
 8003af4:	617b      	str	r3, [r7, #20]
   return(result);
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1e3      	bne.n	8003ac4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2202      	movs	r2, #2
 8003b00:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b06:	4619      	mov	r1, r3
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f847 	bl	8003b9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b0e:	e023      	b.n	8003b58 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d009      	beq.n	8003b30 <HAL_UART_IRQHandler+0x524>
 8003b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f8b7 	bl	8003c9c <UART_Transmit_IT>
    return;
 8003b2e:	e014      	b.n	8003b5a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00e      	beq.n	8003b5a <HAL_UART_IRQHandler+0x54e>
 8003b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d008      	beq.n	8003b5a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f8f7 	bl	8003d3c <UART_EndTransmit_IT>
    return;
 8003b4e:	e004      	b.n	8003b5a <HAL_UART_IRQHandler+0x54e>
    return;
 8003b50:	bf00      	nop
 8003b52:	e002      	b.n	8003b5a <HAL_UART_IRQHandler+0x54e>
      return;
 8003b54:	bf00      	nop
 8003b56:	e000      	b.n	8003b5a <HAL_UART_IRQHandler+0x54e>
      return;
 8003b58:	bf00      	nop
  }
}
 8003b5a:	37e8      	adds	r7, #232	@ 0xe8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b095      	sub	sp, #84	@ 0x54
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	330c      	adds	r3, #12
 8003bc2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bc6:	e853 3f00 	ldrex	r3, [r3]
 8003bca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	330c      	adds	r3, #12
 8003bda:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bdc:	643a      	str	r2, [r7, #64]	@ 0x40
 8003bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003be2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003be4:	e841 2300 	strex	r3, r2, [r1]
 8003be8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1e5      	bne.n	8003bbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3314      	adds	r3, #20
 8003bf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	e853 3f00 	ldrex	r3, [r3]
 8003bfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f023 0301 	bic.w	r3, r3, #1
 8003c06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	3314      	adds	r3, #20
 8003c0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c18:	e841 2300 	strex	r3, r2, [r1]
 8003c1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1e5      	bne.n	8003bf0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d119      	bne.n	8003c60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	330c      	adds	r3, #12
 8003c32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	e853 3f00 	ldrex	r3, [r3]
 8003c3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	f023 0310 	bic.w	r3, r3, #16
 8003c42:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	330c      	adds	r3, #12
 8003c4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c4c:	61ba      	str	r2, [r7, #24]
 8003c4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c50:	6979      	ldr	r1, [r7, #20]
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	e841 2300 	strex	r3, r2, [r1]
 8003c58:	613b      	str	r3, [r7, #16]
   return(result);
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1e5      	bne.n	8003c2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c6e:	bf00      	nop
 8003c70:	3754      	adds	r7, #84	@ 0x54
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f7ff ff7a 	bl	8003b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c94:	bf00      	nop
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b21      	cmp	r3, #33	@ 0x21
 8003cae:	d13e      	bne.n	8003d2e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cb8:	d114      	bne.n	8003ce4 <UART_Transmit_IT+0x48>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d110      	bne.n	8003ce4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	881b      	ldrh	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cd6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	1c9a      	adds	r2, r3, #2
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	621a      	str	r2, [r3, #32]
 8003ce2:	e008      	b.n	8003cf6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	1c59      	adds	r1, r3, #1
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6211      	str	r1, [r2, #32]
 8003cee:	781a      	ldrb	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	4619      	mov	r1, r3
 8003d04:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10f      	bne.n	8003d2a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d18:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d28:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	e000      	b.n	8003d30 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d2e:	2302      	movs	r3, #2
  }
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d52:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f7ff feff 	bl	8003b60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08c      	sub	sp, #48	@ 0x30
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003d74:	2300      	movs	r3, #0
 8003d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b22      	cmp	r3, #34	@ 0x22
 8003d86:	f040 80aa 	bne.w	8003ede <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d92:	d115      	bne.n	8003dc0 <UART_Receive_IT+0x54>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d111      	bne.n	8003dc0 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db8:	1c9a      	adds	r2, r3, #2
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	629a      	str	r2, [r3, #40]	@ 0x28
 8003dbe:	e024      	b.n	8003e0a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dce:	d007      	beq.n	8003de0 <UART_Receive_IT+0x74>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10a      	bne.n	8003dee <UART_Receive_IT+0x82>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d106      	bne.n	8003dee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dea:	701a      	strb	r2, [r3, #0]
 8003dec:	e008      	b.n	8003e00 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dfe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	4619      	mov	r1, r3
 8003e18:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d15d      	bne.n	8003eda <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0220 	bic.w	r2, r2, #32
 8003e2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695a      	ldr	r2, [r3, #20]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0201 	bic.w	r2, r2, #1
 8003e4c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d135      	bne.n	8003ed0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	330c      	adds	r3, #12
 8003e70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	e853 3f00 	ldrex	r3, [r3]
 8003e78:	613b      	str	r3, [r7, #16]
   return(result);
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f023 0310 	bic.w	r3, r3, #16
 8003e80:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	330c      	adds	r3, #12
 8003e88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e8a:	623a      	str	r2, [r7, #32]
 8003e8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8e:	69f9      	ldr	r1, [r7, #28]
 8003e90:	6a3a      	ldr	r2, [r7, #32]
 8003e92:	e841 2300 	strex	r3, r2, [r1]
 8003e96:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1e5      	bne.n	8003e6a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0310 	and.w	r3, r3, #16
 8003ea8:	2b10      	cmp	r3, #16
 8003eaa:	d10a      	bne.n	8003ec2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003eac:	2300      	movs	r3, #0
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7ff fe67 	bl	8003b9c <HAL_UARTEx_RxEventCallback>
 8003ece:	e002      	b.n	8003ed6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f7ff fe4f 	bl	8003b74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	e002      	b.n	8003ee0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	e000      	b.n	8003ee0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003ede:	2302      	movs	r3, #2
  }
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3730      	adds	r7, #48	@ 0x30
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eec:	b0c0      	sub	sp, #256	@ 0x100
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f04:	68d9      	ldr	r1, [r3, #12]
 8003f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	ea40 0301 	orr.w	r3, r0, r1
 8003f10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	431a      	orrs	r2, r3
 8003f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003f40:	f021 010c 	bic.w	r1, r1, #12
 8003f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003f4e:	430b      	orrs	r3, r1
 8003f50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f62:	6999      	ldr	r1, [r3, #24]
 8003f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	ea40 0301 	orr.w	r3, r0, r1
 8003f6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	4b8f      	ldr	r3, [pc, #572]	@ (80041b4 <UART_SetConfig+0x2cc>)
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d005      	beq.n	8003f88 <UART_SetConfig+0xa0>
 8003f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	4b8d      	ldr	r3, [pc, #564]	@ (80041b8 <UART_SetConfig+0x2d0>)
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d104      	bne.n	8003f92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f88:	f7ff fadc 	bl	8003544 <HAL_RCC_GetPCLK2Freq>
 8003f8c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003f90:	e003      	b.n	8003f9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f92:	f7ff fac3 	bl	800351c <HAL_RCC_GetPCLK1Freq>
 8003f96:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fa4:	f040 810c 	bne.w	80041c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fac:	2200      	movs	r2, #0
 8003fae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003fb2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003fb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003fba:	4622      	mov	r2, r4
 8003fbc:	462b      	mov	r3, r5
 8003fbe:	1891      	adds	r1, r2, r2
 8003fc0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003fc2:	415b      	adcs	r3, r3
 8003fc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003fca:	4621      	mov	r1, r4
 8003fcc:	eb12 0801 	adds.w	r8, r2, r1
 8003fd0:	4629      	mov	r1, r5
 8003fd2:	eb43 0901 	adc.w	r9, r3, r1
 8003fd6:	f04f 0200 	mov.w	r2, #0
 8003fda:	f04f 0300 	mov.w	r3, #0
 8003fde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fe2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fe6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fea:	4690      	mov	r8, r2
 8003fec:	4699      	mov	r9, r3
 8003fee:	4623      	mov	r3, r4
 8003ff0:	eb18 0303 	adds.w	r3, r8, r3
 8003ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ff8:	462b      	mov	r3, r5
 8003ffa:	eb49 0303 	adc.w	r3, r9, r3
 8003ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800400e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004012:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004016:	460b      	mov	r3, r1
 8004018:	18db      	adds	r3, r3, r3
 800401a:	653b      	str	r3, [r7, #80]	@ 0x50
 800401c:	4613      	mov	r3, r2
 800401e:	eb42 0303 	adc.w	r3, r2, r3
 8004022:	657b      	str	r3, [r7, #84]	@ 0x54
 8004024:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004028:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800402c:	f7fc f938 	bl	80002a0 <__aeabi_uldivmod>
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4b61      	ldr	r3, [pc, #388]	@ (80041bc <UART_SetConfig+0x2d4>)
 8004036:	fba3 2302 	umull	r2, r3, r3, r2
 800403a:	095b      	lsrs	r3, r3, #5
 800403c:	011c      	lsls	r4, r3, #4
 800403e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004042:	2200      	movs	r2, #0
 8004044:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004048:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800404c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004050:	4642      	mov	r2, r8
 8004052:	464b      	mov	r3, r9
 8004054:	1891      	adds	r1, r2, r2
 8004056:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004058:	415b      	adcs	r3, r3
 800405a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800405c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004060:	4641      	mov	r1, r8
 8004062:	eb12 0a01 	adds.w	sl, r2, r1
 8004066:	4649      	mov	r1, r9
 8004068:	eb43 0b01 	adc.w	fp, r3, r1
 800406c:	f04f 0200 	mov.w	r2, #0
 8004070:	f04f 0300 	mov.w	r3, #0
 8004074:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004078:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800407c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004080:	4692      	mov	sl, r2
 8004082:	469b      	mov	fp, r3
 8004084:	4643      	mov	r3, r8
 8004086:	eb1a 0303 	adds.w	r3, sl, r3
 800408a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800408e:	464b      	mov	r3, r9
 8004090:	eb4b 0303 	adc.w	r3, fp, r3
 8004094:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80040a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80040ac:	460b      	mov	r3, r1
 80040ae:	18db      	adds	r3, r3, r3
 80040b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80040b2:	4613      	mov	r3, r2
 80040b4:	eb42 0303 	adc.w	r3, r2, r3
 80040b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80040ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80040be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80040c2:	f7fc f8ed 	bl	80002a0 <__aeabi_uldivmod>
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	4611      	mov	r1, r2
 80040cc:	4b3b      	ldr	r3, [pc, #236]	@ (80041bc <UART_SetConfig+0x2d4>)
 80040ce:	fba3 2301 	umull	r2, r3, r3, r1
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	2264      	movs	r2, #100	@ 0x64
 80040d6:	fb02 f303 	mul.w	r3, r2, r3
 80040da:	1acb      	subs	r3, r1, r3
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80040e2:	4b36      	ldr	r3, [pc, #216]	@ (80041bc <UART_SetConfig+0x2d4>)
 80040e4:	fba3 2302 	umull	r2, r3, r3, r2
 80040e8:	095b      	lsrs	r3, r3, #5
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80040f0:	441c      	add	r4, r3
 80040f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040f6:	2200      	movs	r2, #0
 80040f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004100:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004104:	4642      	mov	r2, r8
 8004106:	464b      	mov	r3, r9
 8004108:	1891      	adds	r1, r2, r2
 800410a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800410c:	415b      	adcs	r3, r3
 800410e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004110:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004114:	4641      	mov	r1, r8
 8004116:	1851      	adds	r1, r2, r1
 8004118:	6339      	str	r1, [r7, #48]	@ 0x30
 800411a:	4649      	mov	r1, r9
 800411c:	414b      	adcs	r3, r1
 800411e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	f04f 0300 	mov.w	r3, #0
 8004128:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800412c:	4659      	mov	r1, fp
 800412e:	00cb      	lsls	r3, r1, #3
 8004130:	4651      	mov	r1, sl
 8004132:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004136:	4651      	mov	r1, sl
 8004138:	00ca      	lsls	r2, r1, #3
 800413a:	4610      	mov	r0, r2
 800413c:	4619      	mov	r1, r3
 800413e:	4603      	mov	r3, r0
 8004140:	4642      	mov	r2, r8
 8004142:	189b      	adds	r3, r3, r2
 8004144:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004148:	464b      	mov	r3, r9
 800414a:	460a      	mov	r2, r1
 800414c:	eb42 0303 	adc.w	r3, r2, r3
 8004150:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004160:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004164:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004168:	460b      	mov	r3, r1
 800416a:	18db      	adds	r3, r3, r3
 800416c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800416e:	4613      	mov	r3, r2
 8004170:	eb42 0303 	adc.w	r3, r2, r3
 8004174:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004176:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800417a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800417e:	f7fc f88f 	bl	80002a0 <__aeabi_uldivmod>
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	4b0d      	ldr	r3, [pc, #52]	@ (80041bc <UART_SetConfig+0x2d4>)
 8004188:	fba3 1302 	umull	r1, r3, r3, r2
 800418c:	095b      	lsrs	r3, r3, #5
 800418e:	2164      	movs	r1, #100	@ 0x64
 8004190:	fb01 f303 	mul.w	r3, r1, r3
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	3332      	adds	r3, #50	@ 0x32
 800419a:	4a08      	ldr	r2, [pc, #32]	@ (80041bc <UART_SetConfig+0x2d4>)
 800419c:	fba2 2303 	umull	r2, r3, r2, r3
 80041a0:	095b      	lsrs	r3, r3, #5
 80041a2:	f003 0207 	and.w	r2, r3, #7
 80041a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4422      	add	r2, r4
 80041ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041b0:	e106      	b.n	80043c0 <UART_SetConfig+0x4d8>
 80041b2:	bf00      	nop
 80041b4:	40011000 	.word	0x40011000
 80041b8:	40011400 	.word	0x40011400
 80041bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041c4:	2200      	movs	r2, #0
 80041c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80041ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80041ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80041d2:	4642      	mov	r2, r8
 80041d4:	464b      	mov	r3, r9
 80041d6:	1891      	adds	r1, r2, r2
 80041d8:	6239      	str	r1, [r7, #32]
 80041da:	415b      	adcs	r3, r3
 80041dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80041de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041e2:	4641      	mov	r1, r8
 80041e4:	1854      	adds	r4, r2, r1
 80041e6:	4649      	mov	r1, r9
 80041e8:	eb43 0501 	adc.w	r5, r3, r1
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	00eb      	lsls	r3, r5, #3
 80041f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041fa:	00e2      	lsls	r2, r4, #3
 80041fc:	4614      	mov	r4, r2
 80041fe:	461d      	mov	r5, r3
 8004200:	4643      	mov	r3, r8
 8004202:	18e3      	adds	r3, r4, r3
 8004204:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004208:	464b      	mov	r3, r9
 800420a:	eb45 0303 	adc.w	r3, r5, r3
 800420e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800421e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004222:	f04f 0200 	mov.w	r2, #0
 8004226:	f04f 0300 	mov.w	r3, #0
 800422a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800422e:	4629      	mov	r1, r5
 8004230:	008b      	lsls	r3, r1, #2
 8004232:	4621      	mov	r1, r4
 8004234:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004238:	4621      	mov	r1, r4
 800423a:	008a      	lsls	r2, r1, #2
 800423c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004240:	f7fc f82e 	bl	80002a0 <__aeabi_uldivmod>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	4b60      	ldr	r3, [pc, #384]	@ (80043cc <UART_SetConfig+0x4e4>)
 800424a:	fba3 2302 	umull	r2, r3, r3, r2
 800424e:	095b      	lsrs	r3, r3, #5
 8004250:	011c      	lsls	r4, r3, #4
 8004252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004256:	2200      	movs	r2, #0
 8004258:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800425c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004260:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004264:	4642      	mov	r2, r8
 8004266:	464b      	mov	r3, r9
 8004268:	1891      	adds	r1, r2, r2
 800426a:	61b9      	str	r1, [r7, #24]
 800426c:	415b      	adcs	r3, r3
 800426e:	61fb      	str	r3, [r7, #28]
 8004270:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004274:	4641      	mov	r1, r8
 8004276:	1851      	adds	r1, r2, r1
 8004278:	6139      	str	r1, [r7, #16]
 800427a:	4649      	mov	r1, r9
 800427c:	414b      	adcs	r3, r1
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800428c:	4659      	mov	r1, fp
 800428e:	00cb      	lsls	r3, r1, #3
 8004290:	4651      	mov	r1, sl
 8004292:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004296:	4651      	mov	r1, sl
 8004298:	00ca      	lsls	r2, r1, #3
 800429a:	4610      	mov	r0, r2
 800429c:	4619      	mov	r1, r3
 800429e:	4603      	mov	r3, r0
 80042a0:	4642      	mov	r2, r8
 80042a2:	189b      	adds	r3, r3, r2
 80042a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042a8:	464b      	mov	r3, r9
 80042aa:	460a      	mov	r2, r1
 80042ac:	eb42 0303 	adc.w	r3, r2, r3
 80042b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80042b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80042cc:	4649      	mov	r1, r9
 80042ce:	008b      	lsls	r3, r1, #2
 80042d0:	4641      	mov	r1, r8
 80042d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042d6:	4641      	mov	r1, r8
 80042d8:	008a      	lsls	r2, r1, #2
 80042da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80042de:	f7fb ffdf 	bl	80002a0 <__aeabi_uldivmod>
 80042e2:	4602      	mov	r2, r0
 80042e4:	460b      	mov	r3, r1
 80042e6:	4611      	mov	r1, r2
 80042e8:	4b38      	ldr	r3, [pc, #224]	@ (80043cc <UART_SetConfig+0x4e4>)
 80042ea:	fba3 2301 	umull	r2, r3, r3, r1
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	2264      	movs	r2, #100	@ 0x64
 80042f2:	fb02 f303 	mul.w	r3, r2, r3
 80042f6:	1acb      	subs	r3, r1, r3
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	3332      	adds	r3, #50	@ 0x32
 80042fc:	4a33      	ldr	r2, [pc, #204]	@ (80043cc <UART_SetConfig+0x4e4>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004308:	441c      	add	r4, r3
 800430a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800430e:	2200      	movs	r2, #0
 8004310:	673b      	str	r3, [r7, #112]	@ 0x70
 8004312:	677a      	str	r2, [r7, #116]	@ 0x74
 8004314:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004318:	4642      	mov	r2, r8
 800431a:	464b      	mov	r3, r9
 800431c:	1891      	adds	r1, r2, r2
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	415b      	adcs	r3, r3
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004328:	4641      	mov	r1, r8
 800432a:	1851      	adds	r1, r2, r1
 800432c:	6039      	str	r1, [r7, #0]
 800432e:	4649      	mov	r1, r9
 8004330:	414b      	adcs	r3, r1
 8004332:	607b      	str	r3, [r7, #4]
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004340:	4659      	mov	r1, fp
 8004342:	00cb      	lsls	r3, r1, #3
 8004344:	4651      	mov	r1, sl
 8004346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800434a:	4651      	mov	r1, sl
 800434c:	00ca      	lsls	r2, r1, #3
 800434e:	4610      	mov	r0, r2
 8004350:	4619      	mov	r1, r3
 8004352:	4603      	mov	r3, r0
 8004354:	4642      	mov	r2, r8
 8004356:	189b      	adds	r3, r3, r2
 8004358:	66bb      	str	r3, [r7, #104]	@ 0x68
 800435a:	464b      	mov	r3, r9
 800435c:	460a      	mov	r2, r1
 800435e:	eb42 0303 	adc.w	r3, r2, r3
 8004362:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	663b      	str	r3, [r7, #96]	@ 0x60
 800436e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004370:	f04f 0200 	mov.w	r2, #0
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800437c:	4649      	mov	r1, r9
 800437e:	008b      	lsls	r3, r1, #2
 8004380:	4641      	mov	r1, r8
 8004382:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004386:	4641      	mov	r1, r8
 8004388:	008a      	lsls	r2, r1, #2
 800438a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800438e:	f7fb ff87 	bl	80002a0 <__aeabi_uldivmod>
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	4b0d      	ldr	r3, [pc, #52]	@ (80043cc <UART_SetConfig+0x4e4>)
 8004398:	fba3 1302 	umull	r1, r3, r3, r2
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	2164      	movs	r1, #100	@ 0x64
 80043a0:	fb01 f303 	mul.w	r3, r1, r3
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	3332      	adds	r3, #50	@ 0x32
 80043aa:	4a08      	ldr	r2, [pc, #32]	@ (80043cc <UART_SetConfig+0x4e4>)
 80043ac:	fba2 2303 	umull	r2, r3, r2, r3
 80043b0:	095b      	lsrs	r3, r3, #5
 80043b2:	f003 020f 	and.w	r2, r3, #15
 80043b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4422      	add	r2, r4
 80043be:	609a      	str	r2, [r3, #8]
}
 80043c0:	bf00      	nop
 80043c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80043c6:	46bd      	mov	sp, r7
 80043c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043cc:	51eb851f 	.word	0x51eb851f

080043d0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80043d6:	4b87      	ldr	r3, [pc, #540]	@ (80045f4 <MX_LWIP_Init+0x224>)
 80043d8:	22c0      	movs	r2, #192	@ 0xc0
 80043da:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80043dc:	4b85      	ldr	r3, [pc, #532]	@ (80045f4 <MX_LWIP_Init+0x224>)
 80043de:	22a8      	movs	r2, #168	@ 0xa8
 80043e0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80043e2:	4b84      	ldr	r3, [pc, #528]	@ (80045f4 <MX_LWIP_Init+0x224>)
 80043e4:	2201      	movs	r2, #1
 80043e6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 50;
 80043e8:	4b82      	ldr	r3, [pc, #520]	@ (80045f4 <MX_LWIP_Init+0x224>)
 80043ea:	2232      	movs	r2, #50	@ 0x32
 80043ec:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80043ee:	4b82      	ldr	r3, [pc, #520]	@ (80045f8 <MX_LWIP_Init+0x228>)
 80043f0:	22ff      	movs	r2, #255	@ 0xff
 80043f2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80043f4:	4b80      	ldr	r3, [pc, #512]	@ (80045f8 <MX_LWIP_Init+0x228>)
 80043f6:	22ff      	movs	r2, #255	@ 0xff
 80043f8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80043fa:	4b7f      	ldr	r3, [pc, #508]	@ (80045f8 <MX_LWIP_Init+0x228>)
 80043fc:	22ff      	movs	r2, #255	@ 0xff
 80043fe:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004400:	4b7d      	ldr	r3, [pc, #500]	@ (80045f8 <MX_LWIP_Init+0x228>)
 8004402:	2200      	movs	r2, #0
 8004404:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004406:	4b7d      	ldr	r3, [pc, #500]	@ (80045fc <MX_LWIP_Init+0x22c>)
 8004408:	22c0      	movs	r2, #192	@ 0xc0
 800440a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800440c:	4b7b      	ldr	r3, [pc, #492]	@ (80045fc <MX_LWIP_Init+0x22c>)
 800440e:	22a8      	movs	r2, #168	@ 0xa8
 8004410:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8004412:	4b7a      	ldr	r3, [pc, #488]	@ (80045fc <MX_LWIP_Init+0x22c>)
 8004414:	2201      	movs	r2, #1
 8004416:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004418:	4b78      	ldr	r3, [pc, #480]	@ (80045fc <MX_LWIP_Init+0x22c>)
 800441a:	2201      	movs	r2, #1
 800441c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800441e:	f000 fd02 	bl	8004e26 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004422:	4b74      	ldr	r3, [pc, #464]	@ (80045f4 <MX_LWIP_Init+0x224>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	061a      	lsls	r2, r3, #24
 8004428:	4b72      	ldr	r3, [pc, #456]	@ (80045f4 <MX_LWIP_Init+0x224>)
 800442a:	785b      	ldrb	r3, [r3, #1]
 800442c:	041b      	lsls	r3, r3, #16
 800442e:	431a      	orrs	r2, r3
 8004430:	4b70      	ldr	r3, [pc, #448]	@ (80045f4 <MX_LWIP_Init+0x224>)
 8004432:	789b      	ldrb	r3, [r3, #2]
 8004434:	021b      	lsls	r3, r3, #8
 8004436:	4313      	orrs	r3, r2
 8004438:	4a6e      	ldr	r2, [pc, #440]	@ (80045f4 <MX_LWIP_Init+0x224>)
 800443a:	78d2      	ldrb	r2, [r2, #3]
 800443c:	4313      	orrs	r3, r2
 800443e:	061a      	lsls	r2, r3, #24
 8004440:	4b6c      	ldr	r3, [pc, #432]	@ (80045f4 <MX_LWIP_Init+0x224>)
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	0619      	lsls	r1, r3, #24
 8004446:	4b6b      	ldr	r3, [pc, #428]	@ (80045f4 <MX_LWIP_Init+0x224>)
 8004448:	785b      	ldrb	r3, [r3, #1]
 800444a:	041b      	lsls	r3, r3, #16
 800444c:	4319      	orrs	r1, r3
 800444e:	4b69      	ldr	r3, [pc, #420]	@ (80045f4 <MX_LWIP_Init+0x224>)
 8004450:	789b      	ldrb	r3, [r3, #2]
 8004452:	021b      	lsls	r3, r3, #8
 8004454:	430b      	orrs	r3, r1
 8004456:	4967      	ldr	r1, [pc, #412]	@ (80045f4 <MX_LWIP_Init+0x224>)
 8004458:	78c9      	ldrb	r1, [r1, #3]
 800445a:	430b      	orrs	r3, r1
 800445c:	021b      	lsls	r3, r3, #8
 800445e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004462:	431a      	orrs	r2, r3
 8004464:	4b63      	ldr	r3, [pc, #396]	@ (80045f4 <MX_LWIP_Init+0x224>)
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	0619      	lsls	r1, r3, #24
 800446a:	4b62      	ldr	r3, [pc, #392]	@ (80045f4 <MX_LWIP_Init+0x224>)
 800446c:	785b      	ldrb	r3, [r3, #1]
 800446e:	041b      	lsls	r3, r3, #16
 8004470:	4319      	orrs	r1, r3
 8004472:	4b60      	ldr	r3, [pc, #384]	@ (80045f4 <MX_LWIP_Init+0x224>)
 8004474:	789b      	ldrb	r3, [r3, #2]
 8004476:	021b      	lsls	r3, r3, #8
 8004478:	430b      	orrs	r3, r1
 800447a:	495e      	ldr	r1, [pc, #376]	@ (80045f4 <MX_LWIP_Init+0x224>)
 800447c:	78c9      	ldrb	r1, [r1, #3]
 800447e:	430b      	orrs	r3, r1
 8004480:	0a1b      	lsrs	r3, r3, #8
 8004482:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004486:	431a      	orrs	r2, r3
 8004488:	4b5a      	ldr	r3, [pc, #360]	@ (80045f4 <MX_LWIP_Init+0x224>)
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	0619      	lsls	r1, r3, #24
 800448e:	4b59      	ldr	r3, [pc, #356]	@ (80045f4 <MX_LWIP_Init+0x224>)
 8004490:	785b      	ldrb	r3, [r3, #1]
 8004492:	041b      	lsls	r3, r3, #16
 8004494:	4319      	orrs	r1, r3
 8004496:	4b57      	ldr	r3, [pc, #348]	@ (80045f4 <MX_LWIP_Init+0x224>)
 8004498:	789b      	ldrb	r3, [r3, #2]
 800449a:	021b      	lsls	r3, r3, #8
 800449c:	430b      	orrs	r3, r1
 800449e:	4955      	ldr	r1, [pc, #340]	@ (80045f4 <MX_LWIP_Init+0x224>)
 80044a0:	78c9      	ldrb	r1, [r1, #3]
 80044a2:	430b      	orrs	r3, r1
 80044a4:	0e1b      	lsrs	r3, r3, #24
 80044a6:	4313      	orrs	r3, r2
 80044a8:	4a55      	ldr	r2, [pc, #340]	@ (8004600 <MX_LWIP_Init+0x230>)
 80044aa:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80044ac:	4b52      	ldr	r3, [pc, #328]	@ (80045f8 <MX_LWIP_Init+0x228>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	061a      	lsls	r2, r3, #24
 80044b2:	4b51      	ldr	r3, [pc, #324]	@ (80045f8 <MX_LWIP_Init+0x228>)
 80044b4:	785b      	ldrb	r3, [r3, #1]
 80044b6:	041b      	lsls	r3, r3, #16
 80044b8:	431a      	orrs	r2, r3
 80044ba:	4b4f      	ldr	r3, [pc, #316]	@ (80045f8 <MX_LWIP_Init+0x228>)
 80044bc:	789b      	ldrb	r3, [r3, #2]
 80044be:	021b      	lsls	r3, r3, #8
 80044c0:	4313      	orrs	r3, r2
 80044c2:	4a4d      	ldr	r2, [pc, #308]	@ (80045f8 <MX_LWIP_Init+0x228>)
 80044c4:	78d2      	ldrb	r2, [r2, #3]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	061a      	lsls	r2, r3, #24
 80044ca:	4b4b      	ldr	r3, [pc, #300]	@ (80045f8 <MX_LWIP_Init+0x228>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	0619      	lsls	r1, r3, #24
 80044d0:	4b49      	ldr	r3, [pc, #292]	@ (80045f8 <MX_LWIP_Init+0x228>)
 80044d2:	785b      	ldrb	r3, [r3, #1]
 80044d4:	041b      	lsls	r3, r3, #16
 80044d6:	4319      	orrs	r1, r3
 80044d8:	4b47      	ldr	r3, [pc, #284]	@ (80045f8 <MX_LWIP_Init+0x228>)
 80044da:	789b      	ldrb	r3, [r3, #2]
 80044dc:	021b      	lsls	r3, r3, #8
 80044de:	430b      	orrs	r3, r1
 80044e0:	4945      	ldr	r1, [pc, #276]	@ (80045f8 <MX_LWIP_Init+0x228>)
 80044e2:	78c9      	ldrb	r1, [r1, #3]
 80044e4:	430b      	orrs	r3, r1
 80044e6:	021b      	lsls	r3, r3, #8
 80044e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80044ec:	431a      	orrs	r2, r3
 80044ee:	4b42      	ldr	r3, [pc, #264]	@ (80045f8 <MX_LWIP_Init+0x228>)
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	0619      	lsls	r1, r3, #24
 80044f4:	4b40      	ldr	r3, [pc, #256]	@ (80045f8 <MX_LWIP_Init+0x228>)
 80044f6:	785b      	ldrb	r3, [r3, #1]
 80044f8:	041b      	lsls	r3, r3, #16
 80044fa:	4319      	orrs	r1, r3
 80044fc:	4b3e      	ldr	r3, [pc, #248]	@ (80045f8 <MX_LWIP_Init+0x228>)
 80044fe:	789b      	ldrb	r3, [r3, #2]
 8004500:	021b      	lsls	r3, r3, #8
 8004502:	430b      	orrs	r3, r1
 8004504:	493c      	ldr	r1, [pc, #240]	@ (80045f8 <MX_LWIP_Init+0x228>)
 8004506:	78c9      	ldrb	r1, [r1, #3]
 8004508:	430b      	orrs	r3, r1
 800450a:	0a1b      	lsrs	r3, r3, #8
 800450c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004510:	431a      	orrs	r2, r3
 8004512:	4b39      	ldr	r3, [pc, #228]	@ (80045f8 <MX_LWIP_Init+0x228>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	0619      	lsls	r1, r3, #24
 8004518:	4b37      	ldr	r3, [pc, #220]	@ (80045f8 <MX_LWIP_Init+0x228>)
 800451a:	785b      	ldrb	r3, [r3, #1]
 800451c:	041b      	lsls	r3, r3, #16
 800451e:	4319      	orrs	r1, r3
 8004520:	4b35      	ldr	r3, [pc, #212]	@ (80045f8 <MX_LWIP_Init+0x228>)
 8004522:	789b      	ldrb	r3, [r3, #2]
 8004524:	021b      	lsls	r3, r3, #8
 8004526:	430b      	orrs	r3, r1
 8004528:	4933      	ldr	r1, [pc, #204]	@ (80045f8 <MX_LWIP_Init+0x228>)
 800452a:	78c9      	ldrb	r1, [r1, #3]
 800452c:	430b      	orrs	r3, r1
 800452e:	0e1b      	lsrs	r3, r3, #24
 8004530:	4313      	orrs	r3, r2
 8004532:	4a34      	ldr	r2, [pc, #208]	@ (8004604 <MX_LWIP_Init+0x234>)
 8004534:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004536:	4b31      	ldr	r3, [pc, #196]	@ (80045fc <MX_LWIP_Init+0x22c>)
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	061a      	lsls	r2, r3, #24
 800453c:	4b2f      	ldr	r3, [pc, #188]	@ (80045fc <MX_LWIP_Init+0x22c>)
 800453e:	785b      	ldrb	r3, [r3, #1]
 8004540:	041b      	lsls	r3, r3, #16
 8004542:	431a      	orrs	r2, r3
 8004544:	4b2d      	ldr	r3, [pc, #180]	@ (80045fc <MX_LWIP_Init+0x22c>)
 8004546:	789b      	ldrb	r3, [r3, #2]
 8004548:	021b      	lsls	r3, r3, #8
 800454a:	4313      	orrs	r3, r2
 800454c:	4a2b      	ldr	r2, [pc, #172]	@ (80045fc <MX_LWIP_Init+0x22c>)
 800454e:	78d2      	ldrb	r2, [r2, #3]
 8004550:	4313      	orrs	r3, r2
 8004552:	061a      	lsls	r2, r3, #24
 8004554:	4b29      	ldr	r3, [pc, #164]	@ (80045fc <MX_LWIP_Init+0x22c>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	0619      	lsls	r1, r3, #24
 800455a:	4b28      	ldr	r3, [pc, #160]	@ (80045fc <MX_LWIP_Init+0x22c>)
 800455c:	785b      	ldrb	r3, [r3, #1]
 800455e:	041b      	lsls	r3, r3, #16
 8004560:	4319      	orrs	r1, r3
 8004562:	4b26      	ldr	r3, [pc, #152]	@ (80045fc <MX_LWIP_Init+0x22c>)
 8004564:	789b      	ldrb	r3, [r3, #2]
 8004566:	021b      	lsls	r3, r3, #8
 8004568:	430b      	orrs	r3, r1
 800456a:	4924      	ldr	r1, [pc, #144]	@ (80045fc <MX_LWIP_Init+0x22c>)
 800456c:	78c9      	ldrb	r1, [r1, #3]
 800456e:	430b      	orrs	r3, r1
 8004570:	021b      	lsls	r3, r3, #8
 8004572:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004576:	431a      	orrs	r2, r3
 8004578:	4b20      	ldr	r3, [pc, #128]	@ (80045fc <MX_LWIP_Init+0x22c>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	0619      	lsls	r1, r3, #24
 800457e:	4b1f      	ldr	r3, [pc, #124]	@ (80045fc <MX_LWIP_Init+0x22c>)
 8004580:	785b      	ldrb	r3, [r3, #1]
 8004582:	041b      	lsls	r3, r3, #16
 8004584:	4319      	orrs	r1, r3
 8004586:	4b1d      	ldr	r3, [pc, #116]	@ (80045fc <MX_LWIP_Init+0x22c>)
 8004588:	789b      	ldrb	r3, [r3, #2]
 800458a:	021b      	lsls	r3, r3, #8
 800458c:	430b      	orrs	r3, r1
 800458e:	491b      	ldr	r1, [pc, #108]	@ (80045fc <MX_LWIP_Init+0x22c>)
 8004590:	78c9      	ldrb	r1, [r1, #3]
 8004592:	430b      	orrs	r3, r1
 8004594:	0a1b      	lsrs	r3, r3, #8
 8004596:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800459a:	431a      	orrs	r2, r3
 800459c:	4b17      	ldr	r3, [pc, #92]	@ (80045fc <MX_LWIP_Init+0x22c>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	0619      	lsls	r1, r3, #24
 80045a2:	4b16      	ldr	r3, [pc, #88]	@ (80045fc <MX_LWIP_Init+0x22c>)
 80045a4:	785b      	ldrb	r3, [r3, #1]
 80045a6:	041b      	lsls	r3, r3, #16
 80045a8:	4319      	orrs	r1, r3
 80045aa:	4b14      	ldr	r3, [pc, #80]	@ (80045fc <MX_LWIP_Init+0x22c>)
 80045ac:	789b      	ldrb	r3, [r3, #2]
 80045ae:	021b      	lsls	r3, r3, #8
 80045b0:	430b      	orrs	r3, r1
 80045b2:	4912      	ldr	r1, [pc, #72]	@ (80045fc <MX_LWIP_Init+0x22c>)
 80045b4:	78c9      	ldrb	r1, [r1, #3]
 80045b6:	430b      	orrs	r3, r1
 80045b8:	0e1b      	lsrs	r3, r3, #24
 80045ba:	4313      	orrs	r3, r2
 80045bc:	4a12      	ldr	r2, [pc, #72]	@ (8004608 <MX_LWIP_Init+0x238>)
 80045be:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80045c0:	4b12      	ldr	r3, [pc, #72]	@ (800460c <MX_LWIP_Init+0x23c>)
 80045c2:	9302      	str	r3, [sp, #8]
 80045c4:	4b12      	ldr	r3, [pc, #72]	@ (8004610 <MX_LWIP_Init+0x240>)
 80045c6:	9301      	str	r3, [sp, #4]
 80045c8:	2300      	movs	r3, #0
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004608 <MX_LWIP_Init+0x238>)
 80045ce:	4a0d      	ldr	r2, [pc, #52]	@ (8004604 <MX_LWIP_Init+0x234>)
 80045d0:	490b      	ldr	r1, [pc, #44]	@ (8004600 <MX_LWIP_Init+0x230>)
 80045d2:	4810      	ldr	r0, [pc, #64]	@ (8004614 <MX_LWIP_Init+0x244>)
 80045d4:	f001 f912 	bl	80057fc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80045d8:	480e      	ldr	r0, [pc, #56]	@ (8004614 <MX_LWIP_Init+0x244>)
 80045da:	f001 fac1 	bl	8005b60 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80045de:	480d      	ldr	r0, [pc, #52]	@ (8004614 <MX_LWIP_Init+0x244>)
 80045e0:	f001 face 	bl	8005b80 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80045e4:	490c      	ldr	r1, [pc, #48]	@ (8004618 <MX_LWIP_Init+0x248>)
 80045e6:	480b      	ldr	r0, [pc, #44]	@ (8004614 <MX_LWIP_Init+0x244>)
 80045e8:	f001 fbcc 	bl	8005d84 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80045ec:	bf00      	nop
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	20000148 	.word	0x20000148
 80045f8:	2000014c 	.word	0x2000014c
 80045fc:	20000150 	.word	0x20000150
 8004600:	2000013c 	.word	0x2000013c
 8004604:	20000140 	.word	0x20000140
 8004608:	20000144 	.word	0x20000144
 800460c:	0800ebb5 	.word	0x0800ebb5
 8004610:	08004939 	.word	0x08004939
 8004614:	20000108 	.word	0x20000108
 8004618:	0800466d 	.word	0x0800466d

0800461c <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8004624:	f7fc fd3e 	bl	80010a4 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	4b08      	ldr	r3, [pc, #32]	@ (800464c <Ethernet_Link_Periodic_Handle+0x30>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b63      	cmp	r3, #99	@ 0x63
 8004632:	d907      	bls.n	8004644 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8004634:	f7fc fd36 	bl	80010a4 <HAL_GetTick>
 8004638:	4603      	mov	r3, r0
 800463a:	4a04      	ldr	r2, [pc, #16]	@ (800464c <Ethernet_Link_Periodic_Handle+0x30>)
 800463c:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 fac6 	bl	8004bd0 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8004644:	bf00      	nop
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	20000104 	.word	0x20000104

08004650 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004654:	4804      	ldr	r0, [pc, #16]	@ (8004668 <MX_LWIP_Process+0x18>)
 8004656:	f000 f94f 	bl	80048f8 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800465a:	f007 fc11 	bl	800be80 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 800465e:	4802      	ldr	r0, [pc, #8]	@ (8004668 <MX_LWIP_Process+0x18>)
 8004660:	f7ff ffdc 	bl	800461c <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004664:	bf00      	nop
 8004666:	bd80      	pop	{r7, pc}
 8004668:	20000108 	.word	0x20000108

0800466c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800468c:	4b44      	ldr	r3, [pc, #272]	@ (80047a0 <low_level_init+0x120>)
 800468e:	4a45      	ldr	r2, [pc, #276]	@ (80047a4 <low_level_init+0x124>)
 8004690:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004692:	2300      	movs	r3, #0
 8004694:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004696:	2380      	movs	r3, #128	@ 0x80
 8004698:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800469a:	23e1      	movs	r3, #225	@ 0xe1
 800469c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800469e:	2300      	movs	r3, #0
 80046a0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80046a2:	2300      	movs	r3, #0
 80046a4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80046a6:	2300      	movs	r3, #0
 80046a8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80046aa:	4a3d      	ldr	r2, [pc, #244]	@ (80047a0 <low_level_init+0x120>)
 80046ac:	f107 0308 	add.w	r3, r7, #8
 80046b0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80046b2:	4b3b      	ldr	r3, [pc, #236]	@ (80047a0 <low_level_init+0x120>)
 80046b4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80046b8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80046ba:	4b39      	ldr	r3, [pc, #228]	@ (80047a0 <low_level_init+0x120>)
 80046bc:	4a3a      	ldr	r2, [pc, #232]	@ (80047a8 <low_level_init+0x128>)
 80046be:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80046c0:	4b37      	ldr	r3, [pc, #220]	@ (80047a0 <low_level_init+0x120>)
 80046c2:	4a3a      	ldr	r2, [pc, #232]	@ (80047ac <low_level_init+0x12c>)
 80046c4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80046c6:	4b36      	ldr	r3, [pc, #216]	@ (80047a0 <low_level_init+0x120>)
 80046c8:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80046cc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80046ce:	4834      	ldr	r0, [pc, #208]	@ (80047a0 <low_level_init+0x120>)
 80046d0:	f7fc febc 	bl	800144c <HAL_ETH_Init>
 80046d4:	4603      	mov	r3, r0
 80046d6:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80046d8:	2238      	movs	r2, #56	@ 0x38
 80046da:	2100      	movs	r1, #0
 80046dc:	4834      	ldr	r0, [pc, #208]	@ (80047b0 <low_level_init+0x130>)
 80046de:	f00a fca4 	bl	800f02a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80046e2:	4b33      	ldr	r3, [pc, #204]	@ (80047b0 <low_level_init+0x130>)
 80046e4:	2221      	movs	r2, #33	@ 0x21
 80046e6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80046e8:	4b31      	ldr	r3, [pc, #196]	@ (80047b0 <low_level_init+0x130>)
 80046ea:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80046ee:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80046f0:	4b2f      	ldr	r3, [pc, #188]	@ (80047b0 <low_level_init+0x130>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80046f6:	482f      	ldr	r0, [pc, #188]	@ (80047b4 <low_level_init+0x134>)
 80046f8:	f000 ff48 	bl	800558c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2206      	movs	r2, #6
 8004700:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004704:	4b26      	ldr	r3, [pc, #152]	@ (80047a0 <low_level_init+0x120>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	781a      	ldrb	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004710:	4b23      	ldr	r3, [pc, #140]	@ (80047a0 <low_level_init+0x120>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	785a      	ldrb	r2, [r3, #1]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800471c:	4b20      	ldr	r3, [pc, #128]	@ (80047a0 <low_level_init+0x120>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	789a      	ldrb	r2, [r3, #2]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004728:	4b1d      	ldr	r3, [pc, #116]	@ (80047a0 <low_level_init+0x120>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	78da      	ldrb	r2, [r3, #3]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004734:	4b1a      	ldr	r3, [pc, #104]	@ (80047a0 <low_level_init+0x120>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	791a      	ldrb	r2, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004740:	4b17      	ldr	r3, [pc, #92]	@ (80047a0 <low_level_init+0x120>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	795a      	ldrb	r2, [r3, #5]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004752:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800475a:	f043 030a 	orr.w	r3, r3, #10
 800475e:	b2da      	uxtb	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004766:	4914      	ldr	r1, [pc, #80]	@ (80047b8 <low_level_init+0x138>)
 8004768:	4814      	ldr	r0, [pc, #80]	@ (80047bc <low_level_init+0x13c>)
 800476a:	f7fc fb2e 	bl	8000dca <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800476e:	4813      	ldr	r0, [pc, #76]	@ (80047bc <low_level_init+0x13c>)
 8004770:	f7fc fb5d 	bl	8000e2e <LAN8742_Init>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d006      	beq.n	8004788 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f001 fad2 	bl	8005d24 <netif_set_link_down>
    netif_set_down(netif);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f001 fa69 	bl	8005c58 <netif_set_down>
 8004786:	e008      	b.n	800479a <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8004788:	7bfb      	ldrb	r3, [r7, #15]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d103      	bne.n	8004796 <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fa1e 	bl	8004bd0 <ethernet_link_check_state>
 8004794:	e001      	b.n	800479a <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 8004796:	f7fc f92b 	bl	80009f0 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	20004c20 	.word	0x20004c20
 80047a4:	40028000 	.word	0x40028000
 80047a8:	20004b80 	.word	0x20004b80
 80047ac:	20004ae0 	.word	0x20004ae0
 80047b0:	20004cd0 	.word	0x20004cd0
 80047b4:	080127a0 	.word	0x080127a0
 80047b8:	2000000c 	.word	0x2000000c
 80047bc:	20004d08 	.word	0x20004d08

080047c0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b092      	sub	sp, #72	@ 0x48
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 80047ce:	2300      	movs	r3, #0
 80047d0:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80047d8:	f107 030c 	add.w	r3, r7, #12
 80047dc:	2230      	movs	r2, #48	@ 0x30
 80047de:	2100      	movs	r1, #0
 80047e0:	4618      	mov	r0, r3
 80047e2:	f00a fc22 	bl	800f02a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80047e6:	f107 030c 	add.w	r3, r7, #12
 80047ea:	2230      	movs	r2, #48	@ 0x30
 80047ec:	2100      	movs	r1, #0
 80047ee:	4618      	mov	r0, r3
 80047f0:	f00a fc1b 	bl	800f02a <memset>

  for(q = p; q != NULL; q = q->next)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80047f8:	e045      	b.n	8004886 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80047fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047fc:	2b03      	cmp	r3, #3
 80047fe:	d902      	bls.n	8004806 <low_level_output+0x46>
      return ERR_IF;
 8004800:	f06f 030b 	mvn.w	r3, #11
 8004804:	e055      	b.n	80048b2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8004806:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004808:	6859      	ldr	r1, [r3, #4]
 800480a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800480c:	4613      	mov	r3, r2
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	4413      	add	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	3348      	adds	r3, #72	@ 0x48
 8004816:	443b      	add	r3, r7
 8004818:	3b3c      	subs	r3, #60	@ 0x3c
 800481a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800481c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800481e:	895b      	ldrh	r3, [r3, #10]
 8004820:	4619      	mov	r1, r3
 8004822:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004824:	4613      	mov	r3, r2
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	4413      	add	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	3348      	adds	r3, #72	@ 0x48
 800482e:	443b      	add	r3, r7
 8004830:	3b38      	subs	r3, #56	@ 0x38
 8004832:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004836:	2b00      	cmp	r3, #0
 8004838:	d011      	beq.n	800485e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800483a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800483c:	1e5a      	subs	r2, r3, #1
 800483e:	f107 000c 	add.w	r0, r7, #12
 8004842:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004844:	460b      	mov	r3, r1
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	440b      	add	r3, r1
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	18c1      	adds	r1, r0, r3
 800484e:	4613      	mov	r3, r2
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	4413      	add	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	3348      	adds	r3, #72	@ 0x48
 8004858:	443b      	add	r3, r7
 800485a:	3b34      	subs	r3, #52	@ 0x34
 800485c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800485e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d109      	bne.n	800487a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004866:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004868:	4613      	mov	r3, r2
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	4413      	add	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	3348      	adds	r3, #72	@ 0x48
 8004872:	443b      	add	r3, r7
 8004874:	3b34      	subs	r3, #52	@ 0x34
 8004876:	2200      	movs	r2, #0
 8004878:	601a      	str	r2, [r3, #0]
    }

    i++;
 800487a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800487c:	3301      	adds	r3, #1
 800487e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8004880:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	643b      	str	r3, [r7, #64]	@ 0x40
 8004886:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1b6      	bne.n	80047fa <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	891b      	ldrh	r3, [r3, #8]
 8004890:	461a      	mov	r2, r3
 8004892:	4b0a      	ldr	r3, [pc, #40]	@ (80048bc <low_level_output+0xfc>)
 8004894:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004896:	4a09      	ldr	r2, [pc, #36]	@ (80048bc <low_level_output+0xfc>)
 8004898:	f107 030c 	add.w	r3, r7, #12
 800489c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800489e:	4a07      	ldr	r2, [pc, #28]	@ (80048bc <low_level_output+0xfc>)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80048a4:	2214      	movs	r2, #20
 80048a6:	4905      	ldr	r1, [pc, #20]	@ (80048bc <low_level_output+0xfc>)
 80048a8:	4805      	ldr	r0, [pc, #20]	@ (80048c0 <low_level_output+0x100>)
 80048aa:	f7fc ff5a 	bl	8001762 <HAL_ETH_Transmit>

  return errval;
 80048ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3748      	adds	r7, #72	@ 0x48
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	20004cd0 	.word	0x20004cd0
 80048c0:	20004c20 	.word	0x20004c20

080048c4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80048d0:	4b07      	ldr	r3, [pc, #28]	@ (80048f0 <low_level_input+0x2c>)
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d105      	bne.n	80048e4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80048d8:	f107 030c 	add.w	r3, r7, #12
 80048dc:	4619      	mov	r1, r3
 80048de:	4805      	ldr	r0, [pc, #20]	@ (80048f4 <low_level_input+0x30>)
 80048e0:	f7fc ffd3 	bl	800188a <HAL_ETH_ReadData>
  }

  return p;
 80048e4:	68fb      	ldr	r3, [r7, #12]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20004adc 	.word	0x20004adc
 80048f4:	20004c20 	.word	0x20004c20

080048f8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004900:	2300      	movs	r3, #0
 8004902:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7ff ffdd 	bl	80048c4 <low_level_input>
 800490a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	6879      	ldr	r1, [r7, #4]
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	4798      	blx	r3
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d002      	beq.n	8004928 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f001 fdae 	bl	8006484 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1ea      	bne.n	8004904 <ethernetif_input+0xc>
}
 800492e:	bf00      	nop
 8004930:	bf00      	nop
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d106      	bne.n	8004954 <ethernetif_init+0x1c>
 8004946:	4b0e      	ldr	r3, [pc, #56]	@ (8004980 <ethernetif_init+0x48>)
 8004948:	f240 126f 	movw	r2, #367	@ 0x16f
 800494c:	490d      	ldr	r1, [pc, #52]	@ (8004984 <ethernetif_init+0x4c>)
 800494e:	480e      	ldr	r0, [pc, #56]	@ (8004988 <ethernetif_init+0x50>)
 8004950:	f00a fb06 	bl	800ef60 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2273      	movs	r2, #115	@ 0x73
 8004958:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2274      	movs	r2, #116	@ 0x74
 8004960:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a09      	ldr	r2, [pc, #36]	@ (800498c <ethernetif_init+0x54>)
 8004968:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a08      	ldr	r2, [pc, #32]	@ (8004990 <ethernetif_init+0x58>)
 800496e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7ff fe85 	bl	8004680 <low_level_init>

  return ERR_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3708      	adds	r7, #8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	0800fda8 	.word	0x0800fda8
 8004984:	0800fdc4 	.word	0x0800fdc4
 8004988:	0800fdd4 	.word	0x0800fdd4
 800498c:	0800d06d 	.word	0x0800d06d
 8004990:	080047c1 	.word	0x080047c1

08004994 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80049a0:	68f9      	ldr	r1, [r7, #12]
 80049a2:	4807      	ldr	r0, [pc, #28]	@ (80049c0 <pbuf_free_custom+0x2c>)
 80049a4:	f000 fed4 	bl	8005750 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80049a8:	4b06      	ldr	r3, [pc, #24]	@ (80049c4 <pbuf_free_custom+0x30>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d102      	bne.n	80049b6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80049b0:	4b04      	ldr	r3, [pc, #16]	@ (80049c4 <pbuf_free_custom+0x30>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	701a      	strb	r2, [r3, #0]
  }
}
 80049b6:	bf00      	nop
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	080127a0 	.word	0x080127a0
 80049c4:	20004adc 	.word	0x20004adc

080049c8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80049cc:	f7fc fb6a 	bl	80010a4 <HAL_GetTick>
 80049d0:	4603      	mov	r3, r0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	bd80      	pop	{r7, pc}
	...

080049d8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08e      	sub	sp, #56	@ 0x38
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049e4:	2200      	movs	r2, #0
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	605a      	str	r2, [r3, #4]
 80049ea:	609a      	str	r2, [r3, #8]
 80049ec:	60da      	str	r2, [r3, #12]
 80049ee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a4a      	ldr	r2, [pc, #296]	@ (8004b20 <HAL_ETH_MspInit+0x148>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	f040 808d 	bne.w	8004b16 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80049fc:	2300      	movs	r3, #0
 80049fe:	623b      	str	r3, [r7, #32]
 8004a00:	4b48      	ldr	r3, [pc, #288]	@ (8004b24 <HAL_ETH_MspInit+0x14c>)
 8004a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a04:	4a47      	ldr	r2, [pc, #284]	@ (8004b24 <HAL_ETH_MspInit+0x14c>)
 8004a06:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004a0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a0c:	4b45      	ldr	r3, [pc, #276]	@ (8004b24 <HAL_ETH_MspInit+0x14c>)
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a14:	623b      	str	r3, [r7, #32]
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	2300      	movs	r3, #0
 8004a1a:	61fb      	str	r3, [r7, #28]
 8004a1c:	4b41      	ldr	r3, [pc, #260]	@ (8004b24 <HAL_ETH_MspInit+0x14c>)
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a20:	4a40      	ldr	r2, [pc, #256]	@ (8004b24 <HAL_ETH_MspInit+0x14c>)
 8004a22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a26:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a28:	4b3e      	ldr	r3, [pc, #248]	@ (8004b24 <HAL_ETH_MspInit+0x14c>)
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a30:	61fb      	str	r3, [r7, #28]
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	2300      	movs	r3, #0
 8004a36:	61bb      	str	r3, [r7, #24]
 8004a38:	4b3a      	ldr	r3, [pc, #232]	@ (8004b24 <HAL_ETH_MspInit+0x14c>)
 8004a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a3c:	4a39      	ldr	r2, [pc, #228]	@ (8004b24 <HAL_ETH_MspInit+0x14c>)
 8004a3e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a42:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a44:	4b37      	ldr	r3, [pc, #220]	@ (8004b24 <HAL_ETH_MspInit+0x14c>)
 8004a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a4c:	61bb      	str	r3, [r7, #24]
 8004a4e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a50:	2300      	movs	r3, #0
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	4b33      	ldr	r3, [pc, #204]	@ (8004b24 <HAL_ETH_MspInit+0x14c>)
 8004a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a58:	4a32      	ldr	r2, [pc, #200]	@ (8004b24 <HAL_ETH_MspInit+0x14c>)
 8004a5a:	f043 0304 	orr.w	r3, r3, #4
 8004a5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a60:	4b30      	ldr	r3, [pc, #192]	@ (8004b24 <HAL_ETH_MspInit+0x14c>)
 8004a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a64:	f003 0304 	and.w	r3, r3, #4
 8004a68:	617b      	str	r3, [r7, #20]
 8004a6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	613b      	str	r3, [r7, #16]
 8004a70:	4b2c      	ldr	r3, [pc, #176]	@ (8004b24 <HAL_ETH_MspInit+0x14c>)
 8004a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a74:	4a2b      	ldr	r2, [pc, #172]	@ (8004b24 <HAL_ETH_MspInit+0x14c>)
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a7c:	4b29      	ldr	r3, [pc, #164]	@ (8004b24 <HAL_ETH_MspInit+0x14c>)
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	613b      	str	r3, [r7, #16]
 8004a86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	4b25      	ldr	r3, [pc, #148]	@ (8004b24 <HAL_ETH_MspInit+0x14c>)
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a90:	4a24      	ldr	r2, [pc, #144]	@ (8004b24 <HAL_ETH_MspInit+0x14c>)
 8004a92:	f043 0302 	orr.w	r3, r3, #2
 8004a96:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a98:	4b22      	ldr	r3, [pc, #136]	@ (8004b24 <HAL_ETH_MspInit+0x14c>)
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004aa4:	2332      	movs	r3, #50	@ 0x32
 8004aa6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aac:	2300      	movs	r3, #0
 8004aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004ab4:	230b      	movs	r3, #11
 8004ab6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ab8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004abc:	4619      	mov	r1, r3
 8004abe:	481a      	ldr	r0, [pc, #104]	@ (8004b28 <HAL_ETH_MspInit+0x150>)
 8004ac0:	f7fd ff14 	bl	80028ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004ac4:	2386      	movs	r3, #134	@ 0x86
 8004ac6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ac8:	2302      	movs	r3, #2
 8004aca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004acc:	2300      	movs	r3, #0
 8004ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004ad4:	230b      	movs	r3, #11
 8004ad6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ad8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004adc:	4619      	mov	r1, r3
 8004ade:	4813      	ldr	r0, [pc, #76]	@ (8004b2c <HAL_ETH_MspInit+0x154>)
 8004ae0:	f7fd ff04 	bl	80028ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004ae4:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8004ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aea:	2302      	movs	r3, #2
 8004aec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aee:	2300      	movs	r3, #0
 8004af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004af2:	2303      	movs	r3, #3
 8004af4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004af6:	230b      	movs	r3, #11
 8004af8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004afa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004afe:	4619      	mov	r1, r3
 8004b00:	480b      	ldr	r0, [pc, #44]	@ (8004b30 <HAL_ETH_MspInit+0x158>)
 8004b02:	f7fd fef3 	bl	80028ec <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8004b06:	2200      	movs	r2, #0
 8004b08:	2100      	movs	r1, #0
 8004b0a:	203d      	movs	r0, #61	@ 0x3d
 8004b0c:	f7fc fbd5 	bl	80012ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004b10:	203d      	movs	r0, #61	@ 0x3d
 8004b12:	f7fc fbee 	bl	80012f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004b16:	bf00      	nop
 8004b18:	3738      	adds	r7, #56	@ 0x38
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	40028000 	.word	0x40028000
 8004b24:	40023800 	.word	0x40023800
 8004b28:	40020800 	.word	0x40020800
 8004b2c:	40020000 	.word	0x40020000
 8004b30:	40020400 	.word	0x40020400

08004b34 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004b38:	4802      	ldr	r0, [pc, #8]	@ (8004b44 <ETH_PHY_IO_Init+0x10>)
 8004b3a:	f7fd fa73 	bl	8002024 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	20004c20 	.word	0x20004c20

08004b48 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  return 0;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	68f9      	ldr	r1, [r7, #12]
 8004b6a:	4807      	ldr	r0, [pc, #28]	@ (8004b88 <ETH_PHY_IO_ReadReg+0x30>)
 8004b6c:	f7fd f8b4 	bl	8001cd8 <HAL_ETH_ReadPHYRegister>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004b76:	f04f 33ff 	mov.w	r3, #4294967295
 8004b7a:	e000      	b.n	8004b7e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	20004c20 	.word	0x20004c20

08004b8c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	68f9      	ldr	r1, [r7, #12]
 8004b9e:	4807      	ldr	r0, [pc, #28]	@ (8004bbc <ETH_PHY_IO_WriteReg+0x30>)
 8004ba0:	f7fd f8e5 	bl	8001d6e <HAL_ETH_WritePHYRegister>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004baa:	f04f 33ff 	mov.w	r3, #4294967295
 8004bae:	e000      	b.n	8004bb2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	20004c20 	.word	0x20004c20

08004bc0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004bc4:	f7fc fa6e 	bl	80010a4 <HAL_GetTick>
 8004bc8:	4603      	mov	r3, r0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	bd80      	pop	{r7, pc}
	...

08004bd0 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b0a0      	sub	sp, #128	@ 0x80
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004bd8:	f107 030c 	add.w	r3, r7, #12
 8004bdc:	2264      	movs	r2, #100	@ 0x64
 8004bde:	2100      	movs	r1, #0
 8004be0:	4618      	mov	r0, r3
 8004be2:	f00a fa22 	bl	800f02a <memset>
  int32_t PHYLinkState = 0;
 8004be6:	2300      	movs	r3, #0
 8004be8:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004bea:	2300      	movs	r3, #0
 8004bec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004bee:	2300      	movs	r3, #0
 8004bf0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004bf6:	483a      	ldr	r0, [pc, #232]	@ (8004ce0 <ethernet_link_check_state+0x110>)
 8004bf8:	f7fc f966 	bl	8000ec8 <LAN8742_GetLinkState>
 8004bfc:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004c04:	089b      	lsrs	r3, r3, #2
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00c      	beq.n	8004c2a <ethernet_link_check_state+0x5a>
 8004c10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	dc09      	bgt.n	8004c2a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 8004c16:	4833      	ldr	r0, [pc, #204]	@ (8004ce4 <ethernet_link_check_state+0x114>)
 8004c18:	f7fc fd24 	bl	8001664 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f001 f81b 	bl	8005c58 <netif_set_down>
    netif_set_link_down(netif);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f001 f87e 	bl	8005d24 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004c28:	e055      	b.n	8004cd6 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d14e      	bne.n	8004cd6 <ethernet_link_check_state+0x106>
 8004c38:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	dd4b      	ble.n	8004cd6 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8004c3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c40:	3b02      	subs	r3, #2
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d82a      	bhi.n	8004c9c <ethernet_link_check_state+0xcc>
 8004c46:	a201      	add	r2, pc, #4	@ (adr r2, 8004c4c <ethernet_link_check_state+0x7c>)
 8004c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4c:	08004c5d 	.word	0x08004c5d
 8004c50:	08004c6f 	.word	0x08004c6f
 8004c54:	08004c7f 	.word	0x08004c7f
 8004c58:	08004c8f 	.word	0x08004c8f
      duplex = ETH_FULLDUPLEX_MODE;
 8004c5c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004c60:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8004c62:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004c66:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004c6c:	e017      	b.n	8004c9e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8004c72:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004c76:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004c7c:	e00f      	b.n	8004c9e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8004c7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004c82:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8004c84:	2300      	movs	r3, #0
 8004c86:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004c8c:	e007      	b.n	8004c9e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8004c92:	2300      	movs	r3, #0
 8004c94:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004c96:	2301      	movs	r3, #1
 8004c98:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004c9a:	e000      	b.n	8004c9e <ethernet_link_check_state+0xce>
      break;
 8004c9c:	bf00      	nop
    if(linkchanged)
 8004c9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d018      	beq.n	8004cd6 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004ca4:	f107 030c 	add.w	r3, r7, #12
 8004ca8:	4619      	mov	r1, r3
 8004caa:	480e      	ldr	r0, [pc, #56]	@ (8004ce4 <ethernet_link_check_state+0x114>)
 8004cac:	f7fd f8a8 	bl	8001e00 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004cb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cb2:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8004cb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cb6:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004cb8:	f107 030c 	add.w	r3, r7, #12
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4809      	ldr	r0, [pc, #36]	@ (8004ce4 <ethernet_link_check_state+0x114>)
 8004cc0:	f7fd f995 	bl	8001fee <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8004cc4:	4807      	ldr	r0, [pc, #28]	@ (8004ce4 <ethernet_link_check_state+0x114>)
 8004cc6:	f7fc fc5d 	bl	8001584 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 ff58 	bl	8005b80 <netif_set_up>
      netif_set_link_up(netif);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 fff3 	bl	8005cbc <netif_set_link_up>
}
 8004cd6:	bf00      	nop
 8004cd8:	3780      	adds	r7, #128	@ 0x80
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	20004d08 	.word	0x20004d08
 8004ce4:	20004c20 	.word	0x20004c20

08004ce8 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004cf0:	4812      	ldr	r0, [pc, #72]	@ (8004d3c <HAL_ETH_RxAllocateCallback+0x54>)
 8004cf2:	f000 fcbf 	bl	8005674 <memp_malloc_pool>
 8004cf6:	60f8      	str	r0, [r7, #12]
  if (p)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d014      	beq.n	8004d28 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f103 0220 	add.w	r2, r3, #32
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4a0d      	ldr	r2, [pc, #52]	@ (8004d40 <HAL_ETH_RxAllocateCallback+0x58>)
 8004d0c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004d16:	9201      	str	r2, [sp, #4]
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2241      	movs	r2, #65	@ 0x41
 8004d1e:	2100      	movs	r1, #0
 8004d20:	2000      	movs	r0, #0
 8004d22:	f001 f9f5 	bl	8006110 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004d26:	e005      	b.n	8004d34 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004d28:	4b06      	ldr	r3, [pc, #24]	@ (8004d44 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	601a      	str	r2, [r3, #0]
}
 8004d34:	bf00      	nop
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	080127a0 	.word	0x080127a0
 8004d40:	08004995 	.word	0x08004995
 8004d44:	20004adc 	.word	0x20004adc

08004d48 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b089      	sub	sp, #36	@ 0x24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
 8004d54:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	3b20      	subs	r3, #32
 8004d66:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	2200      	movs	r2, #0
 8004d72:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	887a      	ldrh	r2, [r7, #2]
 8004d78:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d103      	bne.n	8004d8a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	69fa      	ldr	r2, [r7, #28]
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	e003      	b.n	8004d92 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69fa      	ldr	r2, [r7, #28]
 8004d90:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	69fa      	ldr	r2, [r7, #28]
 8004d96:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	61fb      	str	r3, [r7, #28]
 8004d9e:	e009      	b.n	8004db4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	891a      	ldrh	r2, [r3, #8]
 8004da4:	887b      	ldrh	r3, [r7, #2]
 8004da6:	4413      	add	r3, r2
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	61fb      	str	r3, [r7, #28]
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1f2      	bne.n	8004da0 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004dba:	bf00      	nop
 8004dbc:	bf00      	nop
 8004dbe:	3724      	adds	r7, #36	@ 0x24
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	4603      	mov	r3, r0
 8004dd0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004dd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dd6:	021b      	lsls	r3, r3, #8
 8004dd8:	b21a      	sxth	r2, r3
 8004dda:	88fb      	ldrh	r3, [r7, #6]
 8004ddc:	0a1b      	lsrs	r3, r3, #8
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	b21b      	sxth	r3, r3
 8004de2:	4313      	orrs	r3, r2
 8004de4:	b21b      	sxth	r3, r3
 8004de6:	b29b      	uxth	r3, r3
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	061a      	lsls	r2, r3, #24
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	021b      	lsls	r3, r3, #8
 8004e04:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	0a1b      	lsrs	r3, r3, #8
 8004e0e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	0e1b      	lsrs	r3, r3, #24
 8004e18:	4313      	orrs	r3, r2
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b082      	sub	sp, #8
 8004e2a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004e30:	f000 f8d4 	bl	8004fdc <mem_init>
  memp_init();
 8004e34:	f000 fbda 	bl	80055ec <memp_init>
  pbuf_init();
  netif_init();
 8004e38:	f000 fcd8 	bl	80057ec <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004e3c:	f007 f862 	bl	800bf04 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004e40:	f001 fdbe 	bl	80069c0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004e44:	f006 ffd4 	bl	800bdf0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004e48:	bf00      	nop
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	4603      	mov	r3, r0
 8004e58:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004e5a:	4b05      	ldr	r3, [pc, #20]	@ (8004e70 <ptr_to_mem+0x20>)
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	88fb      	ldrh	r3, [r7, #6]
 8004e60:	4413      	add	r3, r2
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	20005394 	.word	0x20005394

08004e74 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004e7c:	4b05      	ldr	r3, [pc, #20]	@ (8004e94 <mem_to_ptr+0x20>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	b29b      	uxth	r3, r3
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	20005394 	.word	0x20005394

08004e98 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004e98:	b590      	push	{r4, r7, lr}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004ea0:	4b45      	ldr	r3, [pc, #276]	@ (8004fb8 <plug_holes+0x120>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d206      	bcs.n	8004eb8 <plug_holes+0x20>
 8004eaa:	4b44      	ldr	r3, [pc, #272]	@ (8004fbc <plug_holes+0x124>)
 8004eac:	f240 12df 	movw	r2, #479	@ 0x1df
 8004eb0:	4943      	ldr	r1, [pc, #268]	@ (8004fc0 <plug_holes+0x128>)
 8004eb2:	4844      	ldr	r0, [pc, #272]	@ (8004fc4 <plug_holes+0x12c>)
 8004eb4:	f00a f854 	bl	800ef60 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004eb8:	4b43      	ldr	r3, [pc, #268]	@ (8004fc8 <plug_holes+0x130>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d306      	bcc.n	8004ed0 <plug_holes+0x38>
 8004ec2:	4b3e      	ldr	r3, [pc, #248]	@ (8004fbc <plug_holes+0x124>)
 8004ec4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8004ec8:	4940      	ldr	r1, [pc, #256]	@ (8004fcc <plug_holes+0x134>)
 8004eca:	483e      	ldr	r0, [pc, #248]	@ (8004fc4 <plug_holes+0x12c>)
 8004ecc:	f00a f848 	bl	800ef60 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	791b      	ldrb	r3, [r3, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d006      	beq.n	8004ee6 <plug_holes+0x4e>
 8004ed8:	4b38      	ldr	r3, [pc, #224]	@ (8004fbc <plug_holes+0x124>)
 8004eda:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8004ede:	493c      	ldr	r1, [pc, #240]	@ (8004fd0 <plug_holes+0x138>)
 8004ee0:	4838      	ldr	r0, [pc, #224]	@ (8004fc4 <plug_holes+0x12c>)
 8004ee2:	f00a f83d 	bl	800ef60 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004eee:	d906      	bls.n	8004efe <plug_holes+0x66>
 8004ef0:	4b32      	ldr	r3, [pc, #200]	@ (8004fbc <plug_holes+0x124>)
 8004ef2:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8004ef6:	4937      	ldr	r1, [pc, #220]	@ (8004fd4 <plug_holes+0x13c>)
 8004ef8:	4832      	ldr	r0, [pc, #200]	@ (8004fc4 <plug_holes+0x12c>)
 8004efa:	f00a f831 	bl	800ef60 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7ff ffa4 	bl	8004e50 <ptr_to_mem>
 8004f08:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d024      	beq.n	8004f5c <plug_holes+0xc4>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	791b      	ldrb	r3, [r3, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d120      	bne.n	8004f5c <plug_holes+0xc4>
 8004f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8004fc8 <plug_holes+0x130>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d01b      	beq.n	8004f5c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004f24:	4b2c      	ldr	r3, [pc, #176]	@ (8004fd8 <plug_holes+0x140>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d102      	bne.n	8004f34 <plug_holes+0x9c>
      lfree = mem;
 8004f2e:	4a2a      	ldr	r2, [pc, #168]	@ (8004fd8 <plug_holes+0x140>)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	881a      	ldrh	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004f44:	d00a      	beq.n	8004f5c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff ff80 	bl	8004e50 <ptr_to_mem>
 8004f50:	4604      	mov	r4, r0
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7ff ff8e 	bl	8004e74 <mem_to_ptr>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	885b      	ldrh	r3, [r3, #2]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7ff ff75 	bl	8004e50 <ptr_to_mem>
 8004f66:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d01f      	beq.n	8004fb0 <plug_holes+0x118>
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	791b      	ldrb	r3, [r3, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d11b      	bne.n	8004fb0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004f78:	4b17      	ldr	r3, [pc, #92]	@ (8004fd8 <plug_holes+0x140>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d102      	bne.n	8004f88 <plug_holes+0xf0>
      lfree = pmem;
 8004f82:	4a15      	ldr	r2, [pc, #84]	@ (8004fd8 <plug_holes+0x140>)
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	881a      	ldrh	r2, [r3, #0]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	881b      	ldrh	r3, [r3, #0]
 8004f94:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004f98:	d00a      	beq.n	8004fb0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7ff ff56 	bl	8004e50 <ptr_to_mem>
 8004fa4:	4604      	mov	r4, r0
 8004fa6:	68b8      	ldr	r0, [r7, #8]
 8004fa8:	f7ff ff64 	bl	8004e74 <mem_to_ptr>
 8004fac:	4603      	mov	r3, r0
 8004fae:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004fb0:	bf00      	nop
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd90      	pop	{r4, r7, pc}
 8004fb8:	20005394 	.word	0x20005394
 8004fbc:	0800fdfc 	.word	0x0800fdfc
 8004fc0:	0800fe2c 	.word	0x0800fe2c
 8004fc4:	0800fe44 	.word	0x0800fe44
 8004fc8:	20005398 	.word	0x20005398
 8004fcc:	0800fe6c 	.word	0x0800fe6c
 8004fd0:	0800fe88 	.word	0x0800fe88
 8004fd4:	0800fea4 	.word	0x0800fea4
 8004fd8:	2000539c 	.word	0x2000539c

08004fdc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004fe2:	4b18      	ldr	r3, [pc, #96]	@ (8005044 <mem_init+0x68>)
 8004fe4:	3303      	adds	r3, #3
 8004fe6:	f023 0303 	bic.w	r3, r3, #3
 8004fea:	461a      	mov	r2, r3
 8004fec:	4b16      	ldr	r3, [pc, #88]	@ (8005048 <mem_init+0x6c>)
 8004fee:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004ff0:	4b15      	ldr	r3, [pc, #84]	@ (8005048 <mem_init+0x6c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004ffc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800500a:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800500e:	f7ff ff1f 	bl	8004e50 <ptr_to_mem>
 8005012:	4603      	mov	r3, r0
 8005014:	4a0d      	ldr	r2, [pc, #52]	@ (800504c <mem_init+0x70>)
 8005016:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8005018:	4b0c      	ldr	r3, [pc, #48]	@ (800504c <mem_init+0x70>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2201      	movs	r2, #1
 800501e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005020:	4b0a      	ldr	r3, [pc, #40]	@ (800504c <mem_init+0x70>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8005028:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800502a:	4b08      	ldr	r3, [pc, #32]	@ (800504c <mem_init+0x70>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8005032:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005034:	4b04      	ldr	r3, [pc, #16]	@ (8005048 <mem_init+0x6c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a05      	ldr	r2, [pc, #20]	@ (8005050 <mem_init+0x74>)
 800503a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800503c:	bf00      	nop
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	20004d40 	.word	0x20004d40
 8005048:	20005394 	.word	0x20005394
 800504c:	20005398 	.word	0x20005398
 8005050:	2000539c 	.word	0x2000539c

08005054 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f7ff ff09 	bl	8004e74 <mem_to_ptr>
 8005062:	4603      	mov	r3, r0
 8005064:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	881b      	ldrh	r3, [r3, #0]
 800506a:	4618      	mov	r0, r3
 800506c:	f7ff fef0 	bl	8004e50 <ptr_to_mem>
 8005070:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	885b      	ldrh	r3, [r3, #2]
 8005076:	4618      	mov	r0, r3
 8005078:	f7ff feea 	bl	8004e50 <ptr_to_mem>
 800507c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005086:	d818      	bhi.n	80050ba <mem_link_valid+0x66>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	885b      	ldrh	r3, [r3, #2]
 800508c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005090:	d813      	bhi.n	80050ba <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005096:	8afa      	ldrh	r2, [r7, #22]
 8005098:	429a      	cmp	r2, r3
 800509a:	d004      	beq.n	80050a6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	8afa      	ldrh	r2, [r7, #22]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d109      	bne.n	80050ba <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80050a6:	4b08      	ldr	r3, [pc, #32]	@ (80050c8 <mem_link_valid+0x74>)
 80050a8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d006      	beq.n	80050be <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	885b      	ldrh	r3, [r3, #2]
 80050b4:	8afa      	ldrh	r2, [r7, #22]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d001      	beq.n	80050be <mem_link_valid+0x6a>
    return 0;
 80050ba:	2300      	movs	r3, #0
 80050bc:	e000      	b.n	80050c0 <mem_link_valid+0x6c>
  }
  return 1;
 80050be:	2301      	movs	r3, #1
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	20005398 	.word	0x20005398

080050cc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d04c      	beq.n	8005174 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f003 0303 	and.w	r3, r3, #3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d007      	beq.n	80050f4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80050e4:	4b25      	ldr	r3, [pc, #148]	@ (800517c <mem_free+0xb0>)
 80050e6:	f240 2273 	movw	r2, #627	@ 0x273
 80050ea:	4925      	ldr	r1, [pc, #148]	@ (8005180 <mem_free+0xb4>)
 80050ec:	4825      	ldr	r0, [pc, #148]	@ (8005184 <mem_free+0xb8>)
 80050ee:	f009 ff37 	bl	800ef60 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80050f2:	e040      	b.n	8005176 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3b08      	subs	r3, #8
 80050f8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80050fa:	4b23      	ldr	r3, [pc, #140]	@ (8005188 <mem_free+0xbc>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	429a      	cmp	r2, r3
 8005102:	d306      	bcc.n	8005112 <mem_free+0x46>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f103 020c 	add.w	r2, r3, #12
 800510a:	4b20      	ldr	r3, [pc, #128]	@ (800518c <mem_free+0xc0>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	429a      	cmp	r2, r3
 8005110:	d907      	bls.n	8005122 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005112:	4b1a      	ldr	r3, [pc, #104]	@ (800517c <mem_free+0xb0>)
 8005114:	f240 227f 	movw	r2, #639	@ 0x27f
 8005118:	491d      	ldr	r1, [pc, #116]	@ (8005190 <mem_free+0xc4>)
 800511a:	481a      	ldr	r0, [pc, #104]	@ (8005184 <mem_free+0xb8>)
 800511c:	f009 ff20 	bl	800ef60 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005120:	e029      	b.n	8005176 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	791b      	ldrb	r3, [r3, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d107      	bne.n	800513a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800512a:	4b14      	ldr	r3, [pc, #80]	@ (800517c <mem_free+0xb0>)
 800512c:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8005130:	4918      	ldr	r1, [pc, #96]	@ (8005194 <mem_free+0xc8>)
 8005132:	4814      	ldr	r0, [pc, #80]	@ (8005184 <mem_free+0xb8>)
 8005134:	f009 ff14 	bl	800ef60 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005138:	e01d      	b.n	8005176 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f7ff ff8a 	bl	8005054 <mem_link_valid>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d107      	bne.n	8005156 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005146:	4b0d      	ldr	r3, [pc, #52]	@ (800517c <mem_free+0xb0>)
 8005148:	f240 2295 	movw	r2, #661	@ 0x295
 800514c:	4912      	ldr	r1, [pc, #72]	@ (8005198 <mem_free+0xcc>)
 800514e:	480d      	ldr	r0, [pc, #52]	@ (8005184 <mem_free+0xb8>)
 8005150:	f009 ff06 	bl	800ef60 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005154:	e00f      	b.n	8005176 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800515c:	4b0f      	ldr	r3, [pc, #60]	@ (800519c <mem_free+0xd0>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	429a      	cmp	r2, r3
 8005164:	d202      	bcs.n	800516c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005166:	4a0d      	ldr	r2, [pc, #52]	@ (800519c <mem_free+0xd0>)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f7ff fe93 	bl	8004e98 <plug_holes>
 8005172:	e000      	b.n	8005176 <mem_free+0xaa>
    return;
 8005174:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	0800fdfc 	.word	0x0800fdfc
 8005180:	0800fed0 	.word	0x0800fed0
 8005184:	0800fe44 	.word	0x0800fe44
 8005188:	20005394 	.word	0x20005394
 800518c:	20005398 	.word	0x20005398
 8005190:	0800fef4 	.word	0x0800fef4
 8005194:	0800ff10 	.word	0x0800ff10
 8005198:	0800ff38 	.word	0x0800ff38
 800519c:	2000539c 	.word	0x2000539c

080051a0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b088      	sub	sp, #32
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	460b      	mov	r3, r1
 80051aa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80051ac:	887b      	ldrh	r3, [r7, #2]
 80051ae:	3303      	adds	r3, #3
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	f023 0303 	bic.w	r3, r3, #3
 80051b6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80051b8:	8bfb      	ldrh	r3, [r7, #30]
 80051ba:	2b0b      	cmp	r3, #11
 80051bc:	d801      	bhi.n	80051c2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80051be:	230c      	movs	r3, #12
 80051c0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80051c2:	8bfb      	ldrh	r3, [r7, #30]
 80051c4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80051c8:	d803      	bhi.n	80051d2 <mem_trim+0x32>
 80051ca:	8bfa      	ldrh	r2, [r7, #30]
 80051cc:	887b      	ldrh	r3, [r7, #2]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d201      	bcs.n	80051d6 <mem_trim+0x36>
    return NULL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	e0cc      	b.n	8005370 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80051d6:	4b68      	ldr	r3, [pc, #416]	@ (8005378 <mem_trim+0x1d8>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d304      	bcc.n	80051ea <mem_trim+0x4a>
 80051e0:	4b66      	ldr	r3, [pc, #408]	@ (800537c <mem_trim+0x1dc>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d306      	bcc.n	80051f8 <mem_trim+0x58>
 80051ea:	4b65      	ldr	r3, [pc, #404]	@ (8005380 <mem_trim+0x1e0>)
 80051ec:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80051f0:	4964      	ldr	r1, [pc, #400]	@ (8005384 <mem_trim+0x1e4>)
 80051f2:	4865      	ldr	r0, [pc, #404]	@ (8005388 <mem_trim+0x1e8>)
 80051f4:	f009 feb4 	bl	800ef60 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80051f8:	4b5f      	ldr	r3, [pc, #380]	@ (8005378 <mem_trim+0x1d8>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d304      	bcc.n	800520c <mem_trim+0x6c>
 8005202:	4b5e      	ldr	r3, [pc, #376]	@ (800537c <mem_trim+0x1dc>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	429a      	cmp	r2, r3
 800520a:	d301      	bcc.n	8005210 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	e0af      	b.n	8005370 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3b08      	subs	r3, #8
 8005214:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005216:	69b8      	ldr	r0, [r7, #24]
 8005218:	f7ff fe2c 	bl	8004e74 <mem_to_ptr>
 800521c:	4603      	mov	r3, r0
 800521e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	881a      	ldrh	r2, [r3, #0]
 8005224:	8afb      	ldrh	r3, [r7, #22]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	b29b      	uxth	r3, r3
 800522a:	3b08      	subs	r3, #8
 800522c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800522e:	8bfa      	ldrh	r2, [r7, #30]
 8005230:	8abb      	ldrh	r3, [r7, #20]
 8005232:	429a      	cmp	r2, r3
 8005234:	d906      	bls.n	8005244 <mem_trim+0xa4>
 8005236:	4b52      	ldr	r3, [pc, #328]	@ (8005380 <mem_trim+0x1e0>)
 8005238:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800523c:	4953      	ldr	r1, [pc, #332]	@ (800538c <mem_trim+0x1ec>)
 800523e:	4852      	ldr	r0, [pc, #328]	@ (8005388 <mem_trim+0x1e8>)
 8005240:	f009 fe8e 	bl	800ef60 <iprintf>
  if (newsize > size) {
 8005244:	8bfa      	ldrh	r2, [r7, #30]
 8005246:	8abb      	ldrh	r3, [r7, #20]
 8005248:	429a      	cmp	r2, r3
 800524a:	d901      	bls.n	8005250 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800524c:	2300      	movs	r3, #0
 800524e:	e08f      	b.n	8005370 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005250:	8bfa      	ldrh	r2, [r7, #30]
 8005252:	8abb      	ldrh	r3, [r7, #20]
 8005254:	429a      	cmp	r2, r3
 8005256:	d101      	bne.n	800525c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	e089      	b.n	8005370 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	881b      	ldrh	r3, [r3, #0]
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff fdf5 	bl	8004e50 <ptr_to_mem>
 8005266:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	791b      	ldrb	r3, [r3, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d13f      	bne.n	80052f0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005278:	d106      	bne.n	8005288 <mem_trim+0xe8>
 800527a:	4b41      	ldr	r3, [pc, #260]	@ (8005380 <mem_trim+0x1e0>)
 800527c:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8005280:	4943      	ldr	r1, [pc, #268]	@ (8005390 <mem_trim+0x1f0>)
 8005282:	4841      	ldr	r0, [pc, #260]	@ (8005388 <mem_trim+0x1e8>)
 8005284:	f009 fe6c 	bl	800ef60 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800528e:	8afa      	ldrh	r2, [r7, #22]
 8005290:	8bfb      	ldrh	r3, [r7, #30]
 8005292:	4413      	add	r3, r2
 8005294:	b29b      	uxth	r3, r3
 8005296:	3308      	adds	r3, #8
 8005298:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800529a:	4b3e      	ldr	r3, [pc, #248]	@ (8005394 <mem_trim+0x1f4>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d106      	bne.n	80052b2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80052a4:	89fb      	ldrh	r3, [r7, #14]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7ff fdd2 	bl	8004e50 <ptr_to_mem>
 80052ac:	4603      	mov	r3, r0
 80052ae:	4a39      	ldr	r2, [pc, #228]	@ (8005394 <mem_trim+0x1f4>)
 80052b0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80052b2:	89fb      	ldrh	r3, [r7, #14]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7ff fdcb 	bl	8004e50 <ptr_to_mem>
 80052ba:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	2200      	movs	r2, #0
 80052c0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	89ba      	ldrh	r2, [r7, #12]
 80052c6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	8afa      	ldrh	r2, [r7, #22]
 80052cc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	89fa      	ldrh	r2, [r7, #14]
 80052d2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80052dc:	d047      	beq.n	800536e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7ff fdb4 	bl	8004e50 <ptr_to_mem>
 80052e8:	4602      	mov	r2, r0
 80052ea:	89fb      	ldrh	r3, [r7, #14]
 80052ec:	8053      	strh	r3, [r2, #2]
 80052ee:	e03e      	b.n	800536e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80052f0:	8bfb      	ldrh	r3, [r7, #30]
 80052f2:	f103 0214 	add.w	r2, r3, #20
 80052f6:	8abb      	ldrh	r3, [r7, #20]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d838      	bhi.n	800536e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80052fc:	8afa      	ldrh	r2, [r7, #22]
 80052fe:	8bfb      	ldrh	r3, [r7, #30]
 8005300:	4413      	add	r3, r2
 8005302:	b29b      	uxth	r3, r3
 8005304:	3308      	adds	r3, #8
 8005306:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	881b      	ldrh	r3, [r3, #0]
 800530c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005310:	d106      	bne.n	8005320 <mem_trim+0x180>
 8005312:	4b1b      	ldr	r3, [pc, #108]	@ (8005380 <mem_trim+0x1e0>)
 8005314:	f240 3216 	movw	r2, #790	@ 0x316
 8005318:	491d      	ldr	r1, [pc, #116]	@ (8005390 <mem_trim+0x1f0>)
 800531a:	481b      	ldr	r0, [pc, #108]	@ (8005388 <mem_trim+0x1e8>)
 800531c:	f009 fe20 	bl	800ef60 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005320:	89fb      	ldrh	r3, [r7, #14]
 8005322:	4618      	mov	r0, r3
 8005324:	f7ff fd94 	bl	8004e50 <ptr_to_mem>
 8005328:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800532a:	4b1a      	ldr	r3, [pc, #104]	@ (8005394 <mem_trim+0x1f4>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	429a      	cmp	r2, r3
 8005332:	d202      	bcs.n	800533a <mem_trim+0x19a>
      lfree = mem2;
 8005334:	4a17      	ldr	r2, [pc, #92]	@ (8005394 <mem_trim+0x1f4>)
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	2200      	movs	r2, #0
 800533e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	881a      	ldrh	r2, [r3, #0]
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	8afa      	ldrh	r2, [r7, #22]
 800534c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	89fa      	ldrh	r2, [r7, #14]
 8005352:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	881b      	ldrh	r3, [r3, #0]
 8005358:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800535c:	d007      	beq.n	800536e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff fd74 	bl	8004e50 <ptr_to_mem>
 8005368:	4602      	mov	r2, r0
 800536a:	89fb      	ldrh	r3, [r7, #14]
 800536c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800536e:	687b      	ldr	r3, [r7, #4]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3720      	adds	r7, #32
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	20005394 	.word	0x20005394
 800537c:	20005398 	.word	0x20005398
 8005380:	0800fdfc 	.word	0x0800fdfc
 8005384:	0800ff6c 	.word	0x0800ff6c
 8005388:	0800fe44 	.word	0x0800fe44
 800538c:	0800ff84 	.word	0x0800ff84
 8005390:	0800ffa4 	.word	0x0800ffa4
 8005394:	2000539c 	.word	0x2000539c

08005398 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b088      	sub	sp, #32
 800539c:	af00      	add	r7, sp, #0
 800539e:	4603      	mov	r3, r0
 80053a0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80053a2:	88fb      	ldrh	r3, [r7, #6]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <mem_malloc+0x14>
    return NULL;
 80053a8:	2300      	movs	r3, #0
 80053aa:	e0d9      	b.n	8005560 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80053ac:	88fb      	ldrh	r3, [r7, #6]
 80053ae:	3303      	adds	r3, #3
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	f023 0303 	bic.w	r3, r3, #3
 80053b6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80053b8:	8bbb      	ldrh	r3, [r7, #28]
 80053ba:	2b0b      	cmp	r3, #11
 80053bc:	d801      	bhi.n	80053c2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80053be:	230c      	movs	r3, #12
 80053c0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80053c2:	8bbb      	ldrh	r3, [r7, #28]
 80053c4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80053c8:	d803      	bhi.n	80053d2 <mem_malloc+0x3a>
 80053ca:	8bba      	ldrh	r2, [r7, #28]
 80053cc:	88fb      	ldrh	r3, [r7, #6]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d201      	bcs.n	80053d6 <mem_malloc+0x3e>
    return NULL;
 80053d2:	2300      	movs	r3, #0
 80053d4:	e0c4      	b.n	8005560 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80053d6:	4b64      	ldr	r3, [pc, #400]	@ (8005568 <mem_malloc+0x1d0>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4618      	mov	r0, r3
 80053dc:	f7ff fd4a 	bl	8004e74 <mem_to_ptr>
 80053e0:	4603      	mov	r3, r0
 80053e2:	83fb      	strh	r3, [r7, #30]
 80053e4:	e0b4      	b.n	8005550 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80053e6:	8bfb      	ldrh	r3, [r7, #30]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff fd31 	bl	8004e50 <ptr_to_mem>
 80053ee:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	791b      	ldrb	r3, [r3, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f040 80a4 	bne.w	8005542 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	461a      	mov	r2, r3
 8005400:	8bfb      	ldrh	r3, [r7, #30]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	f1a3 0208 	sub.w	r2, r3, #8
 8005408:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800540a:	429a      	cmp	r2, r3
 800540c:	f0c0 8099 	bcc.w	8005542 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	461a      	mov	r2, r3
 8005416:	8bfb      	ldrh	r3, [r7, #30]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	f1a3 0208 	sub.w	r2, r3, #8
 800541e:	8bbb      	ldrh	r3, [r7, #28]
 8005420:	3314      	adds	r3, #20
 8005422:	429a      	cmp	r2, r3
 8005424:	d333      	bcc.n	800548e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005426:	8bfa      	ldrh	r2, [r7, #30]
 8005428:	8bbb      	ldrh	r3, [r7, #28]
 800542a:	4413      	add	r3, r2
 800542c:	b29b      	uxth	r3, r3
 800542e:	3308      	adds	r3, #8
 8005430:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005432:	8a7b      	ldrh	r3, [r7, #18]
 8005434:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005438:	d106      	bne.n	8005448 <mem_malloc+0xb0>
 800543a:	4b4c      	ldr	r3, [pc, #304]	@ (800556c <mem_malloc+0x1d4>)
 800543c:	f240 3287 	movw	r2, #903	@ 0x387
 8005440:	494b      	ldr	r1, [pc, #300]	@ (8005570 <mem_malloc+0x1d8>)
 8005442:	484c      	ldr	r0, [pc, #304]	@ (8005574 <mem_malloc+0x1dc>)
 8005444:	f009 fd8c 	bl	800ef60 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005448:	8a7b      	ldrh	r3, [r7, #18]
 800544a:	4618      	mov	r0, r3
 800544c:	f7ff fd00 	bl	8004e50 <ptr_to_mem>
 8005450:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	881a      	ldrh	r2, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8bfa      	ldrh	r2, [r7, #30]
 8005464:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	8a7a      	ldrh	r2, [r7, #18]
 800546a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	2201      	movs	r2, #1
 8005470:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800547a:	d00b      	beq.n	8005494 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	4618      	mov	r0, r3
 8005482:	f7ff fce5 	bl	8004e50 <ptr_to_mem>
 8005486:	4602      	mov	r2, r0
 8005488:	8a7b      	ldrh	r3, [r7, #18]
 800548a:	8053      	strh	r3, [r2, #2]
 800548c:	e002      	b.n	8005494 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2201      	movs	r2, #1
 8005492:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005494:	4b34      	ldr	r3, [pc, #208]	@ (8005568 <mem_malloc+0x1d0>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	429a      	cmp	r2, r3
 800549c:	d127      	bne.n	80054ee <mem_malloc+0x156>
          struct mem *cur = lfree;
 800549e:	4b32      	ldr	r3, [pc, #200]	@ (8005568 <mem_malloc+0x1d0>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80054a4:	e005      	b.n	80054b2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7ff fcd0 	bl	8004e50 <ptr_to_mem>
 80054b0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	791b      	ldrb	r3, [r3, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d004      	beq.n	80054c4 <mem_malloc+0x12c>
 80054ba:	4b2f      	ldr	r3, [pc, #188]	@ (8005578 <mem_malloc+0x1e0>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d1f0      	bne.n	80054a6 <mem_malloc+0x10e>
          }
          lfree = cur;
 80054c4:	4a28      	ldr	r2, [pc, #160]	@ (8005568 <mem_malloc+0x1d0>)
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80054ca:	4b27      	ldr	r3, [pc, #156]	@ (8005568 <mem_malloc+0x1d0>)
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	4b2a      	ldr	r3, [pc, #168]	@ (8005578 <mem_malloc+0x1e0>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d00b      	beq.n	80054ee <mem_malloc+0x156>
 80054d6:	4b24      	ldr	r3, [pc, #144]	@ (8005568 <mem_malloc+0x1d0>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	791b      	ldrb	r3, [r3, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d006      	beq.n	80054ee <mem_malloc+0x156>
 80054e0:	4b22      	ldr	r3, [pc, #136]	@ (800556c <mem_malloc+0x1d4>)
 80054e2:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80054e6:	4925      	ldr	r1, [pc, #148]	@ (800557c <mem_malloc+0x1e4>)
 80054e8:	4822      	ldr	r0, [pc, #136]	@ (8005574 <mem_malloc+0x1dc>)
 80054ea:	f009 fd39 	bl	800ef60 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80054ee:	8bba      	ldrh	r2, [r7, #28]
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	4413      	add	r3, r2
 80054f4:	3308      	adds	r3, #8
 80054f6:	4a20      	ldr	r2, [pc, #128]	@ (8005578 <mem_malloc+0x1e0>)
 80054f8:	6812      	ldr	r2, [r2, #0]
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d906      	bls.n	800550c <mem_malloc+0x174>
 80054fe:	4b1b      	ldr	r3, [pc, #108]	@ (800556c <mem_malloc+0x1d4>)
 8005500:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8005504:	491e      	ldr	r1, [pc, #120]	@ (8005580 <mem_malloc+0x1e8>)
 8005506:	481b      	ldr	r0, [pc, #108]	@ (8005574 <mem_malloc+0x1dc>)
 8005508:	f009 fd2a 	bl	800ef60 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f003 0303 	and.w	r3, r3, #3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d006      	beq.n	8005524 <mem_malloc+0x18c>
 8005516:	4b15      	ldr	r3, [pc, #84]	@ (800556c <mem_malloc+0x1d4>)
 8005518:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800551c:	4919      	ldr	r1, [pc, #100]	@ (8005584 <mem_malloc+0x1ec>)
 800551e:	4815      	ldr	r0, [pc, #84]	@ (8005574 <mem_malloc+0x1dc>)
 8005520:	f009 fd1e 	bl	800ef60 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f003 0303 	and.w	r3, r3, #3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d006      	beq.n	800553c <mem_malloc+0x1a4>
 800552e:	4b0f      	ldr	r3, [pc, #60]	@ (800556c <mem_malloc+0x1d4>)
 8005530:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8005534:	4914      	ldr	r1, [pc, #80]	@ (8005588 <mem_malloc+0x1f0>)
 8005536:	480f      	ldr	r0, [pc, #60]	@ (8005574 <mem_malloc+0x1dc>)
 8005538:	f009 fd12 	bl	800ef60 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	3308      	adds	r3, #8
 8005540:	e00e      	b.n	8005560 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005542:	8bfb      	ldrh	r3, [r7, #30]
 8005544:	4618      	mov	r0, r3
 8005546:	f7ff fc83 	bl	8004e50 <ptr_to_mem>
 800554a:	4603      	mov	r3, r0
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005550:	8bfa      	ldrh	r2, [r7, #30]
 8005552:	8bbb      	ldrh	r3, [r7, #28]
 8005554:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8005558:	429a      	cmp	r2, r3
 800555a:	f4ff af44 	bcc.w	80053e6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3720      	adds	r7, #32
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	2000539c 	.word	0x2000539c
 800556c:	0800fdfc 	.word	0x0800fdfc
 8005570:	0800ffa4 	.word	0x0800ffa4
 8005574:	0800fe44 	.word	0x0800fe44
 8005578:	20005398 	.word	0x20005398
 800557c:	0800ffb8 	.word	0x0800ffb8
 8005580:	0800ffd4 	.word	0x0800ffd4
 8005584:	08010004 	.word	0x08010004
 8005588:	08010034 	.word	0x08010034

0800558c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	3303      	adds	r3, #3
 80055a2:	f023 0303 	bic.w	r3, r3, #3
 80055a6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80055a8:	2300      	movs	r3, #0
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	e011      	b.n	80055d2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	461a      	mov	r2, r3
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	4413      	add	r3, r2
 80055ca:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	3301      	adds	r3, #1
 80055d0:	60fb      	str	r3, [r7, #12]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	885b      	ldrh	r3, [r3, #2]
 80055d6:	461a      	mov	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4293      	cmp	r3, r2
 80055dc:	dbe7      	blt.n	80055ae <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80055de:	bf00      	nop
 80055e0:	bf00      	nop
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80055f2:	2300      	movs	r3, #0
 80055f4:	80fb      	strh	r3, [r7, #6]
 80055f6:	e009      	b.n	800560c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80055f8:	88fb      	ldrh	r3, [r7, #6]
 80055fa:	4a08      	ldr	r2, [pc, #32]	@ (800561c <memp_init+0x30>)
 80055fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff ffc3 	bl	800558c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005606:	88fb      	ldrh	r3, [r7, #6]
 8005608:	3301      	adds	r3, #1
 800560a:	80fb      	strh	r3, [r7, #6]
 800560c:	88fb      	ldrh	r3, [r7, #6]
 800560e:	2b08      	cmp	r3, #8
 8005610:	d9f2      	bls.n	80055f8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005612:	bf00      	nop
 8005614:	bf00      	nop
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	08012818 	.word	0x08012818

08005620 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d012      	beq.n	800565c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	6812      	ldr	r2, [r2, #0]
 800563e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f003 0303 	and.w	r3, r3, #3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d006      	beq.n	8005658 <do_memp_malloc_pool+0x38>
 800564a:	4b07      	ldr	r3, [pc, #28]	@ (8005668 <do_memp_malloc_pool+0x48>)
 800564c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8005650:	4906      	ldr	r1, [pc, #24]	@ (800566c <do_memp_malloc_pool+0x4c>)
 8005652:	4807      	ldr	r0, [pc, #28]	@ (8005670 <do_memp_malloc_pool+0x50>)
 8005654:	f009 fc84 	bl	800ef60 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	e000      	b.n	800565e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	08010058 	.word	0x08010058
 800566c:	08010088 	.word	0x08010088
 8005670:	080100ac 	.word	0x080100ac

08005674 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d106      	bne.n	8005690 <memp_malloc_pool+0x1c>
 8005682:	4b0a      	ldr	r3, [pc, #40]	@ (80056ac <memp_malloc_pool+0x38>)
 8005684:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8005688:	4909      	ldr	r1, [pc, #36]	@ (80056b0 <memp_malloc_pool+0x3c>)
 800568a:	480a      	ldr	r0, [pc, #40]	@ (80056b4 <memp_malloc_pool+0x40>)
 800568c:	f009 fc68 	bl	800ef60 <iprintf>
  if (desc == NULL) {
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <memp_malloc_pool+0x26>
    return NULL;
 8005696:	2300      	movs	r3, #0
 8005698:	e003      	b.n	80056a2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7ff ffc0 	bl	8005620 <do_memp_malloc_pool>
 80056a0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	08010058 	.word	0x08010058
 80056b0:	080100d4 	.word	0x080100d4
 80056b4:	080100ac 	.word	0x080100ac

080056b8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	4603      	mov	r3, r0
 80056c0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80056c2:	79fb      	ldrb	r3, [r7, #7]
 80056c4:	2b08      	cmp	r3, #8
 80056c6:	d908      	bls.n	80056da <memp_malloc+0x22>
 80056c8:	4b0a      	ldr	r3, [pc, #40]	@ (80056f4 <memp_malloc+0x3c>)
 80056ca:	f240 1257 	movw	r2, #343	@ 0x157
 80056ce:	490a      	ldr	r1, [pc, #40]	@ (80056f8 <memp_malloc+0x40>)
 80056d0:	480a      	ldr	r0, [pc, #40]	@ (80056fc <memp_malloc+0x44>)
 80056d2:	f009 fc45 	bl	800ef60 <iprintf>
 80056d6:	2300      	movs	r3, #0
 80056d8:	e008      	b.n	80056ec <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80056da:	79fb      	ldrb	r3, [r7, #7]
 80056dc:	4a08      	ldr	r2, [pc, #32]	@ (8005700 <memp_malloc+0x48>)
 80056de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff ff9c 	bl	8005620 <do_memp_malloc_pool>
 80056e8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80056ea:	68fb      	ldr	r3, [r7, #12]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	08010058 	.word	0x08010058
 80056f8:	080100e8 	.word	0x080100e8
 80056fc:	080100ac 	.word	0x080100ac
 8005700:	08012818 	.word	0x08012818

08005704 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	f003 0303 	and.w	r3, r3, #3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d006      	beq.n	8005726 <do_memp_free_pool+0x22>
 8005718:	4b0a      	ldr	r3, [pc, #40]	@ (8005744 <do_memp_free_pool+0x40>)
 800571a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800571e:	490a      	ldr	r1, [pc, #40]	@ (8005748 <do_memp_free_pool+0x44>)
 8005720:	480a      	ldr	r0, [pc, #40]	@ (800574c <do_memp_free_pool+0x48>)
 8005722:	f009 fc1d 	bl	800ef60 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800573c:	bf00      	nop
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	08010058 	.word	0x08010058
 8005748:	08010108 	.word	0x08010108
 800574c:	080100ac 	.word	0x080100ac

08005750 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d106      	bne.n	800576e <memp_free_pool+0x1e>
 8005760:	4b0a      	ldr	r3, [pc, #40]	@ (800578c <memp_free_pool+0x3c>)
 8005762:	f240 1295 	movw	r2, #405	@ 0x195
 8005766:	490a      	ldr	r1, [pc, #40]	@ (8005790 <memp_free_pool+0x40>)
 8005768:	480a      	ldr	r0, [pc, #40]	@ (8005794 <memp_free_pool+0x44>)
 800576a:	f009 fbf9 	bl	800ef60 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d007      	beq.n	8005784 <memp_free_pool+0x34>
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d004      	beq.n	8005784 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800577a:	6839      	ldr	r1, [r7, #0]
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f7ff ffc1 	bl	8005704 <do_memp_free_pool>
 8005782:	e000      	b.n	8005786 <memp_free_pool+0x36>
    return;
 8005784:	bf00      	nop
}
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	08010058 	.word	0x08010058
 8005790:	080100d4 	.word	0x080100d4
 8005794:	080100ac 	.word	0x080100ac

08005798 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	4603      	mov	r3, r0
 80057a0:	6039      	str	r1, [r7, #0]
 80057a2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80057a4:	79fb      	ldrb	r3, [r7, #7]
 80057a6:	2b08      	cmp	r3, #8
 80057a8:	d907      	bls.n	80057ba <memp_free+0x22>
 80057aa:	4b0c      	ldr	r3, [pc, #48]	@ (80057dc <memp_free+0x44>)
 80057ac:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80057b0:	490b      	ldr	r1, [pc, #44]	@ (80057e0 <memp_free+0x48>)
 80057b2:	480c      	ldr	r0, [pc, #48]	@ (80057e4 <memp_free+0x4c>)
 80057b4:	f009 fbd4 	bl	800ef60 <iprintf>
 80057b8:	e00c      	b.n	80057d4 <memp_free+0x3c>

  if (mem == NULL) {
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d008      	beq.n	80057d2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80057c0:	79fb      	ldrb	r3, [r7, #7]
 80057c2:	4a09      	ldr	r2, [pc, #36]	@ (80057e8 <memp_free+0x50>)
 80057c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057c8:	6839      	ldr	r1, [r7, #0]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7ff ff9a 	bl	8005704 <do_memp_free_pool>
 80057d0:	e000      	b.n	80057d4 <memp_free+0x3c>
    return;
 80057d2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	08010058 	.word	0x08010058
 80057e0:	08010128 	.word	0x08010128
 80057e4:	080100ac 	.word	0x080100ac
 80057e8:	08012818 	.word	0x08012818

080057ec <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80057f0:	bf00      	nop
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
	...

080057fc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
 8005808:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d108      	bne.n	8005822 <netif_add+0x26>
 8005810:	4b57      	ldr	r3, [pc, #348]	@ (8005970 <netif_add+0x174>)
 8005812:	f240 1227 	movw	r2, #295	@ 0x127
 8005816:	4957      	ldr	r1, [pc, #348]	@ (8005974 <netif_add+0x178>)
 8005818:	4857      	ldr	r0, [pc, #348]	@ (8005978 <netif_add+0x17c>)
 800581a:	f009 fba1 	bl	800ef60 <iprintf>
 800581e:	2300      	movs	r3, #0
 8005820:	e0a2      	b.n	8005968 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005824:	2b00      	cmp	r3, #0
 8005826:	d108      	bne.n	800583a <netif_add+0x3e>
 8005828:	4b51      	ldr	r3, [pc, #324]	@ (8005970 <netif_add+0x174>)
 800582a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800582e:	4953      	ldr	r1, [pc, #332]	@ (800597c <netif_add+0x180>)
 8005830:	4851      	ldr	r0, [pc, #324]	@ (8005978 <netif_add+0x17c>)
 8005832:	f009 fb95 	bl	800ef60 <iprintf>
 8005836:	2300      	movs	r3, #0
 8005838:	e096      	b.n	8005968 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d101      	bne.n	8005844 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005840:	4b4f      	ldr	r3, [pc, #316]	@ (8005980 <netif_add+0x184>)
 8005842:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800584a:	4b4d      	ldr	r3, [pc, #308]	@ (8005980 <netif_add+0x184>)
 800584c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005854:	4b4a      	ldr	r3, [pc, #296]	@ (8005980 <netif_add+0x184>)
 8005856:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	4a45      	ldr	r2, [pc, #276]	@ (8005984 <netif_add+0x188>)
 800586e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6a3a      	ldr	r2, [r7, #32]
 8005888:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800588a:	4b3f      	ldr	r3, [pc, #252]	@ (8005988 <netif_add+0x18c>)
 800588c:	781a      	ldrb	r2, [r3, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005898:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	68b9      	ldr	r1, [r7, #8]
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f000 f913 	bl	8005acc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80058a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	4798      	blx	r3
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <netif_add+0xba>
    return NULL;
 80058b2:	2300      	movs	r3, #0
 80058b4:	e058      	b.n	8005968 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80058bc:	2bff      	cmp	r3, #255	@ 0xff
 80058be:	d103      	bne.n	80058c8 <netif_add+0xcc>
        netif->num = 0;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80058c8:	2300      	movs	r3, #0
 80058ca:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80058cc:	4b2f      	ldr	r3, [pc, #188]	@ (800598c <netif_add+0x190>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	617b      	str	r3, [r7, #20]
 80058d2:	e02b      	b.n	800592c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d106      	bne.n	80058ea <netif_add+0xee>
 80058dc:	4b24      	ldr	r3, [pc, #144]	@ (8005970 <netif_add+0x174>)
 80058de:	f240 128b 	movw	r2, #395	@ 0x18b
 80058e2:	492b      	ldr	r1, [pc, #172]	@ (8005990 <netif_add+0x194>)
 80058e4:	4824      	ldr	r0, [pc, #144]	@ (8005978 <netif_add+0x17c>)
 80058e6:	f009 fb3b 	bl	800ef60 <iprintf>
        num_netifs++;
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	3301      	adds	r3, #1
 80058ee:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	2bff      	cmp	r3, #255	@ 0xff
 80058f4:	dd06      	ble.n	8005904 <netif_add+0x108>
 80058f6:	4b1e      	ldr	r3, [pc, #120]	@ (8005970 <netif_add+0x174>)
 80058f8:	f240 128d 	movw	r2, #397	@ 0x18d
 80058fc:	4925      	ldr	r1, [pc, #148]	@ (8005994 <netif_add+0x198>)
 80058fe:	481e      	ldr	r0, [pc, #120]	@ (8005978 <netif_add+0x17c>)
 8005900:	f009 fb2e 	bl	800ef60 <iprintf>
        if (netif2->num == netif->num) {
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005910:	429a      	cmp	r2, r3
 8005912:	d108      	bne.n	8005926 <netif_add+0x12a>
          netif->num++;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800591a:	3301      	adds	r3, #1
 800591c:	b2da      	uxtb	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8005924:	e005      	b.n	8005932 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	617b      	str	r3, [r7, #20]
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1d0      	bne.n	80058d4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1be      	bne.n	80058b6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800593e:	2bfe      	cmp	r3, #254	@ 0xfe
 8005940:	d103      	bne.n	800594a <netif_add+0x14e>
    netif_num = 0;
 8005942:	4b11      	ldr	r3, [pc, #68]	@ (8005988 <netif_add+0x18c>)
 8005944:	2200      	movs	r2, #0
 8005946:	701a      	strb	r2, [r3, #0]
 8005948:	e006      	b.n	8005958 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005950:	3301      	adds	r3, #1
 8005952:	b2da      	uxtb	r2, r3
 8005954:	4b0c      	ldr	r3, [pc, #48]	@ (8005988 <netif_add+0x18c>)
 8005956:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005958:	4b0c      	ldr	r3, [pc, #48]	@ (800598c <netif_add+0x190>)
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005960:	4a0a      	ldr	r2, [pc, #40]	@ (800598c <netif_add+0x190>)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005966:	68fb      	ldr	r3, [r7, #12]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3718      	adds	r7, #24
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	08010144 	.word	0x08010144
 8005974:	080101d8 	.word	0x080101d8
 8005978:	08010194 	.word	0x08010194
 800597c:	080101f4 	.word	0x080101f4
 8005980:	0801287c 	.word	0x0801287c
 8005984:	08005da7 	.word	0x08005da7
 8005988:	20008294 	.word	0x20008294
 800598c:	2000828c 	.word	0x2000828c
 8005990:	08010218 	.word	0x08010218
 8005994:	0801022c 	.word	0x0801022c

08005998 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80059a2:	6839      	ldr	r1, [r7, #0]
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f002 fb55 	bl	8008054 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80059aa:	6839      	ldr	r1, [r7, #0]
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f006 fee1 	bl	800c774 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80059b2:	bf00      	nop
 80059b4:	3708      	adds	r7, #8
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
	...

080059bc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d106      	bne.n	80059dc <netif_do_set_ipaddr+0x20>
 80059ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005a44 <netif_do_set_ipaddr+0x88>)
 80059d0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80059d4:	491c      	ldr	r1, [pc, #112]	@ (8005a48 <netif_do_set_ipaddr+0x8c>)
 80059d6:	481d      	ldr	r0, [pc, #116]	@ (8005a4c <netif_do_set_ipaddr+0x90>)
 80059d8:	f009 fac2 	bl	800ef60 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d106      	bne.n	80059f0 <netif_do_set_ipaddr+0x34>
 80059e2:	4b18      	ldr	r3, [pc, #96]	@ (8005a44 <netif_do_set_ipaddr+0x88>)
 80059e4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80059e8:	4917      	ldr	r1, [pc, #92]	@ (8005a48 <netif_do_set_ipaddr+0x8c>)
 80059ea:	4818      	ldr	r0, [pc, #96]	@ (8005a4c <netif_do_set_ipaddr+0x90>)
 80059ec:	f009 fab8 	bl	800ef60 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	3304      	adds	r3, #4
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d01c      	beq.n	8005a38 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	3304      	adds	r3, #4
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005a0e:	f107 0314 	add.w	r3, r7, #20
 8005a12:	4619      	mov	r1, r3
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7ff ffbf 	bl	8005998 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <netif_do_set_ipaddr+0x6a>
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	e000      	b.n	8005a28 <netif_do_set_ipaddr+0x6c>
 8005a26:	2300      	movs	r3, #0
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 f8d2 	bl	8005bd8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005a34:	2301      	movs	r3, #1
 8005a36:	e000      	b.n	8005a3a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	08010144 	.word	0x08010144
 8005a48:	0801025c 	.word	0x0801025c
 8005a4c:	08010194 	.word	0x08010194

08005a50 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	3308      	adds	r3, #8
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d00a      	beq.n	8005a80 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d002      	beq.n	8005a76 <netif_do_set_netmask+0x26>
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	e000      	b.n	8005a78 <netif_do_set_netmask+0x28>
 8005a76:	2300      	movs	r3, #0
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e000      	b.n	8005a82 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3714      	adds	r7, #20
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b085      	sub	sp, #20
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	60f8      	str	r0, [r7, #12]
 8005a96:	60b9      	str	r1, [r7, #8]
 8005a98:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	330c      	adds	r3, #12
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d00a      	beq.n	8005abe <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <netif_do_set_gw+0x26>
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	e000      	b.n	8005ab6 <netif_do_set_gw+0x28>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005aba:	2301      	movs	r3, #1
 8005abc:	e000      	b.n	8005ac0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b088      	sub	sp, #32
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
 8005ad8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005ada:	2300      	movs	r3, #0
 8005adc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8005b5c <netif_set_addr+0x90>)
 8005aea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005af2:	4b1a      	ldr	r3, [pc, #104]	@ (8005b5c <netif_set_addr+0x90>)
 8005af4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d101      	bne.n	8005b00 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005afc:	4b17      	ldr	r3, [pc, #92]	@ (8005b5c <netif_set_addr+0x90>)
 8005afe:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <netif_set_addr+0x42>
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <netif_set_addr+0x46>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e000      	b.n	8005b14 <netif_set_addr+0x48>
 8005b12:	2300      	movs	r3, #0
 8005b14:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d006      	beq.n	8005b2a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005b1c:	f107 0310 	add.w	r3, r7, #16
 8005b20:	461a      	mov	r2, r3
 8005b22:	68b9      	ldr	r1, [r7, #8]
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f7ff ff49 	bl	80059bc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8005b2a:	69fa      	ldr	r2, [r7, #28]
 8005b2c:	6879      	ldr	r1, [r7, #4]
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f7ff ff8e 	bl	8005a50 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	6839      	ldr	r1, [r7, #0]
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f7ff ffa8 	bl	8005a8e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d106      	bne.n	8005b52 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005b44:	f107 0310 	add.w	r3, r7, #16
 8005b48:	461a      	mov	r2, r3
 8005b4a:	68b9      	ldr	r1, [r7, #8]
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f7ff ff35 	bl	80059bc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005b52:	bf00      	nop
 8005b54:	3720      	adds	r7, #32
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	0801287c 	.word	0x0801287c

08005b60 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005b68:	4a04      	ldr	r2, [pc, #16]	@ (8005b7c <netif_set_default+0x1c>)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005b6e:	bf00      	nop
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	20008290 	.word	0x20008290

08005b80 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d107      	bne.n	8005b9e <netif_set_up+0x1e>
 8005b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8005bcc <netif_set_up+0x4c>)
 8005b90:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8005b94:	490e      	ldr	r1, [pc, #56]	@ (8005bd0 <netif_set_up+0x50>)
 8005b96:	480f      	ldr	r0, [pc, #60]	@ (8005bd4 <netif_set_up+0x54>)
 8005b98:	f009 f9e2 	bl	800ef60 <iprintf>
 8005b9c:	e013      	b.n	8005bc6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10c      	bne.n	8005bc6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005bb2:	f043 0301 	orr.w	r3, r3, #1
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005bbe:	2103      	movs	r1, #3
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f809 	bl	8005bd8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	08010144 	.word	0x08010144
 8005bd0:	080102cc 	.word	0x080102cc
 8005bd4:	08010194 	.word	0x08010194

08005bd8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	460b      	mov	r3, r1
 8005be2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d106      	bne.n	8005bf8 <netif_issue_reports+0x20>
 8005bea:	4b18      	ldr	r3, [pc, #96]	@ (8005c4c <netif_issue_reports+0x74>)
 8005bec:	f240 326d 	movw	r2, #877	@ 0x36d
 8005bf0:	4917      	ldr	r1, [pc, #92]	@ (8005c50 <netif_issue_reports+0x78>)
 8005bf2:	4818      	ldr	r0, [pc, #96]	@ (8005c54 <netif_issue_reports+0x7c>)
 8005bf4:	f009 f9b4 	bl	800ef60 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005bfe:	f003 0304 	and.w	r3, r3, #4
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d01e      	beq.n	8005c44 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005c0c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d017      	beq.n	8005c44 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005c14:	78fb      	ldrb	r3, [r7, #3]
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d013      	beq.n	8005c46 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	3304      	adds	r3, #4
 8005c22:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00e      	beq.n	8005c46 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005c2e:	f003 0308 	and.w	r3, r3, #8
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d007      	beq.n	8005c46 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	3304      	adds	r3, #4
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f007 fd03 	bl	800d648 <etharp_request>
 8005c42:	e000      	b.n	8005c46 <netif_issue_reports+0x6e>
    return;
 8005c44:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	08010144 	.word	0x08010144
 8005c50:	080102e8 	.word	0x080102e8
 8005c54:	08010194 	.word	0x08010194

08005c58 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d107      	bne.n	8005c76 <netif_set_down+0x1e>
 8005c66:	4b12      	ldr	r3, [pc, #72]	@ (8005cb0 <netif_set_down+0x58>)
 8005c68:	f240 329b 	movw	r2, #923	@ 0x39b
 8005c6c:	4911      	ldr	r1, [pc, #68]	@ (8005cb4 <netif_set_down+0x5c>)
 8005c6e:	4812      	ldr	r0, [pc, #72]	@ (8005cb8 <netif_set_down+0x60>)
 8005c70:	f009 f976 	bl	800ef60 <iprintf>
 8005c74:	e019      	b.n	8005caa <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d012      	beq.n	8005caa <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005c8a:	f023 0301 	bic.w	r3, r3, #1
 8005c8e:	b2da      	uxtb	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005c9c:	f003 0308 	and.w	r3, r3, #8
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f007 f88d 	bl	800cdc4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	08010144 	.word	0x08010144
 8005cb4:	0801030c 	.word	0x0801030c
 8005cb8:	08010194 	.word	0x08010194

08005cbc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d107      	bne.n	8005cda <netif_set_link_up+0x1e>
 8005cca:	4b13      	ldr	r3, [pc, #76]	@ (8005d18 <netif_set_link_up+0x5c>)
 8005ccc:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8005cd0:	4912      	ldr	r1, [pc, #72]	@ (8005d1c <netif_set_link_up+0x60>)
 8005cd2:	4813      	ldr	r0, [pc, #76]	@ (8005d20 <netif_set_link_up+0x64>)
 8005cd4:	f009 f944 	bl	800ef60 <iprintf>
 8005cd8:	e01b      	b.n	8005d12 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005ce0:	f003 0304 	and.w	r3, r3, #4
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d114      	bne.n	8005d12 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005cee:	f043 0304 	orr.w	r3, r3, #4
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005cfa:	2103      	movs	r1, #3
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7ff ff6b 	bl	8005bd8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <netif_set_link_up+0x56>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	08010144 	.word	0x08010144
 8005d1c:	0801032c 	.word	0x0801032c
 8005d20:	08010194 	.word	0x08010194

08005d24 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d107      	bne.n	8005d42 <netif_set_link_down+0x1e>
 8005d32:	4b11      	ldr	r3, [pc, #68]	@ (8005d78 <netif_set_link_down+0x54>)
 8005d34:	f240 4206 	movw	r2, #1030	@ 0x406
 8005d38:	4910      	ldr	r1, [pc, #64]	@ (8005d7c <netif_set_link_down+0x58>)
 8005d3a:	4811      	ldr	r0, [pc, #68]	@ (8005d80 <netif_set_link_down+0x5c>)
 8005d3c:	f009 f910 	bl	800ef60 <iprintf>
 8005d40:	e017      	b.n	8005d72 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005d48:	f003 0304 	and.w	r3, r3, #4
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d010      	beq.n	8005d72 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005d56:	f023 0304 	bic.w	r3, r3, #4
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <netif_set_link_down+0x4e>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005d72:	3708      	adds	r7, #8
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	08010144 	.word	0x08010144
 8005d7c:	08010350 	.word	0x08010350
 8005d80:	08010194 	.word	0x08010194

08005d84 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d002      	beq.n	8005d9a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	61da      	str	r2, [r3, #28]
  }
}
 8005d9a:	bf00      	nop
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b085      	sub	sp, #20
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	60f8      	str	r0, [r7, #12]
 8005dae:	60b9      	str	r1, [r7, #8]
 8005db0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005db2:	f06f 030b 	mvn.w	r3, #11
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
	...

08005dc4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	4603      	mov	r3, r0
 8005dcc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005dce:	79fb      	ldrb	r3, [r7, #7]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d013      	beq.n	8005dfc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8005e0c <netif_get_by_index+0x48>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	60fb      	str	r3, [r7, #12]
 8005dda:	e00c      	b.n	8005df6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005de2:	3301      	adds	r3, #1
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	79fa      	ldrb	r2, [r7, #7]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d101      	bne.n	8005df0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	e006      	b.n	8005dfe <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	60fb      	str	r3, [r7, #12]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1ef      	bne.n	8005ddc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	2000828c 	.word	0x2000828c

08005e10 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005e16:	4b0c      	ldr	r3, [pc, #48]	@ (8005e48 <pbuf_free_ooseq+0x38>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e4c <pbuf_free_ooseq+0x3c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	607b      	str	r3, [r7, #4]
 8005e22:	e00a      	b.n	8005e3a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d003      	beq.n	8005e34 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f002 f94f 	bl	80080d0 <tcp_free_ooseq>
      return;
 8005e32:	e005      	b.n	8005e40 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	607b      	str	r3, [r7, #4]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1f1      	bne.n	8005e24 <pbuf_free_ooseq+0x14>
    }
  }
}
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	20008295 	.word	0x20008295
 8005e4c:	200082a4 	.word	0x200082a4

08005e50 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005e50:	b480      	push	{r7}
 8005e52:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005e54:	4b03      	ldr	r3, [pc, #12]	@ (8005e64 <pbuf_pool_is_empty+0x14>)
 8005e56:	2201      	movs	r2, #1
 8005e58:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005e5a:	bf00      	nop
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	20008295 	.word	0x20008295

08005e68 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	4611      	mov	r1, r2
 8005e74:	461a      	mov	r2, r3
 8005e76:	460b      	mov	r3, r1
 8005e78:	80fb      	strh	r3, [r7, #6]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	88fa      	ldrh	r2, [r7, #6]
 8005e8e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	88ba      	ldrh	r2, [r7, #4]
 8005e94:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005e96:	8b3b      	ldrh	r3, [r7, #24]
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	7f3a      	ldrb	r2, [r7, #28]
 8005ea2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	73da      	strb	r2, [r3, #15]
}
 8005eb0:	bf00      	nop
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b08c      	sub	sp, #48	@ 0x30
 8005ec0:	af02      	add	r7, sp, #8
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	71fb      	strb	r3, [r7, #7]
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	80bb      	strh	r3, [r7, #4]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005ece:	79fb      	ldrb	r3, [r7, #7]
 8005ed0:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005ed2:	887b      	ldrh	r3, [r7, #2]
 8005ed4:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8005ed8:	d07f      	beq.n	8005fda <pbuf_alloc+0x11e>
 8005eda:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8005ede:	f300 80c8 	bgt.w	8006072 <pbuf_alloc+0x1b6>
 8005ee2:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8005ee6:	d010      	beq.n	8005f0a <pbuf_alloc+0x4e>
 8005ee8:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8005eec:	f300 80c1 	bgt.w	8006072 <pbuf_alloc+0x1b6>
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d002      	beq.n	8005efa <pbuf_alloc+0x3e>
 8005ef4:	2b41      	cmp	r3, #65	@ 0x41
 8005ef6:	f040 80bc 	bne.w	8006072 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005efa:	887a      	ldrh	r2, [r7, #2]
 8005efc:	88bb      	ldrh	r3, [r7, #4]
 8005efe:	4619      	mov	r1, r3
 8005f00:	2000      	movs	r0, #0
 8005f02:	f000 f8d1 	bl	80060a8 <pbuf_alloc_reference>
 8005f06:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8005f08:	e0bd      	b.n	8006086 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005f12:	88bb      	ldrh	r3, [r7, #4]
 8005f14:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005f16:	2008      	movs	r0, #8
 8005f18:	f7ff fbce 	bl	80056b8 <memp_malloc>
 8005f1c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d109      	bne.n	8005f38 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005f24:	f7ff ff94 	bl	8005e50 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d002      	beq.n	8005f34 <pbuf_alloc+0x78>
            pbuf_free(p);
 8005f2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f30:	f000 faa8 	bl	8006484 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005f34:	2300      	movs	r3, #0
 8005f36:	e0a7      	b.n	8006088 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005f38:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f3a:	3303      	adds	r3, #3
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	f023 0303 	bic.w	r3, r3, #3
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	8b7a      	ldrh	r2, [r7, #26]
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	bf28      	it	cs
 8005f50:	4613      	movcs	r3, r2
 8005f52:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005f54:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f56:	3310      	adds	r3, #16
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	3303      	adds	r3, #3
 8005f5e:	f023 0303 	bic.w	r3, r3, #3
 8005f62:	4618      	mov	r0, r3
 8005f64:	89f9      	ldrh	r1, [r7, #14]
 8005f66:	8b7a      	ldrh	r2, [r7, #26]
 8005f68:	2300      	movs	r3, #0
 8005f6a:	9301      	str	r3, [sp, #4]
 8005f6c:	887b      	ldrh	r3, [r7, #2]
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	460b      	mov	r3, r1
 8005f72:	4601      	mov	r1, r0
 8005f74:	6938      	ldr	r0, [r7, #16]
 8005f76:	f7ff ff77 	bl	8005e68 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f003 0303 	and.w	r3, r3, #3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d006      	beq.n	8005f94 <pbuf_alloc+0xd8>
 8005f86:	4b42      	ldr	r3, [pc, #264]	@ (8006090 <pbuf_alloc+0x1d4>)
 8005f88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f8c:	4941      	ldr	r1, [pc, #260]	@ (8006094 <pbuf_alloc+0x1d8>)
 8005f8e:	4842      	ldr	r0, [pc, #264]	@ (8006098 <pbuf_alloc+0x1dc>)
 8005f90:	f008 ffe6 	bl	800ef60 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005f94:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f96:	3303      	adds	r3, #3
 8005f98:	f023 0303 	bic.w	r3, r3, #3
 8005f9c:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8005fa0:	d106      	bne.n	8005fb0 <pbuf_alloc+0xf4>
 8005fa2:	4b3b      	ldr	r3, [pc, #236]	@ (8006090 <pbuf_alloc+0x1d4>)
 8005fa4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005fa8:	493c      	ldr	r1, [pc, #240]	@ (800609c <pbuf_alloc+0x1e0>)
 8005faa:	483b      	ldr	r0, [pc, #236]	@ (8006098 <pbuf_alloc+0x1dc>)
 8005fac:	f008 ffd8 	bl	800ef60 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d102      	bne.n	8005fbc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fba:	e002      	b.n	8005fc2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005fc6:	8b7a      	ldrh	r2, [r7, #26]
 8005fc8:	89fb      	ldrh	r3, [r7, #14]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8005fd2:	8b7b      	ldrh	r3, [r7, #26]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d19e      	bne.n	8005f16 <pbuf_alloc+0x5a>
      break;
 8005fd8:	e055      	b.n	8006086 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005fda:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005fdc:	3303      	adds	r3, #3
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	f023 0303 	bic.w	r3, r3, #3
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	88bb      	ldrh	r3, [r7, #4]
 8005fe8:	3303      	adds	r3, #3
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	f023 0303 	bic.w	r3, r3, #3
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	4413      	add	r3, r2
 8005ff4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005ff6:	8b3b      	ldrh	r3, [r7, #24]
 8005ff8:	3310      	adds	r3, #16
 8005ffa:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005ffc:	8b3a      	ldrh	r2, [r7, #24]
 8005ffe:	88bb      	ldrh	r3, [r7, #4]
 8006000:	3303      	adds	r3, #3
 8006002:	f023 0303 	bic.w	r3, r3, #3
 8006006:	429a      	cmp	r2, r3
 8006008:	d306      	bcc.n	8006018 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800600a:	8afa      	ldrh	r2, [r7, #22]
 800600c:	88bb      	ldrh	r3, [r7, #4]
 800600e:	3303      	adds	r3, #3
 8006010:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006014:	429a      	cmp	r2, r3
 8006016:	d201      	bcs.n	800601c <pbuf_alloc+0x160>
        return NULL;
 8006018:	2300      	movs	r3, #0
 800601a:	e035      	b.n	8006088 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800601c:	8afb      	ldrh	r3, [r7, #22]
 800601e:	4618      	mov	r0, r3
 8006020:	f7ff f9ba 	bl	8005398 <mem_malloc>
 8006024:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8006026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006028:	2b00      	cmp	r3, #0
 800602a:	d101      	bne.n	8006030 <pbuf_alloc+0x174>
        return NULL;
 800602c:	2300      	movs	r3, #0
 800602e:	e02b      	b.n	8006088 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006030:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006032:	3310      	adds	r3, #16
 8006034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006036:	4413      	add	r3, r2
 8006038:	3303      	adds	r3, #3
 800603a:	f023 0303 	bic.w	r3, r3, #3
 800603e:	4618      	mov	r0, r3
 8006040:	88b9      	ldrh	r1, [r7, #4]
 8006042:	88ba      	ldrh	r2, [r7, #4]
 8006044:	2300      	movs	r3, #0
 8006046:	9301      	str	r3, [sp, #4]
 8006048:	887b      	ldrh	r3, [r7, #2]
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	460b      	mov	r3, r1
 800604e:	4601      	mov	r1, r0
 8006050:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006052:	f7ff ff09 	bl	8005e68 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f003 0303 	and.w	r3, r3, #3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d010      	beq.n	8006084 <pbuf_alloc+0x1c8>
 8006062:	4b0b      	ldr	r3, [pc, #44]	@ (8006090 <pbuf_alloc+0x1d4>)
 8006064:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8006068:	490d      	ldr	r1, [pc, #52]	@ (80060a0 <pbuf_alloc+0x1e4>)
 800606a:	480b      	ldr	r0, [pc, #44]	@ (8006098 <pbuf_alloc+0x1dc>)
 800606c:	f008 ff78 	bl	800ef60 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006070:	e008      	b.n	8006084 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006072:	4b07      	ldr	r3, [pc, #28]	@ (8006090 <pbuf_alloc+0x1d4>)
 8006074:	f240 1227 	movw	r2, #295	@ 0x127
 8006078:	490a      	ldr	r1, [pc, #40]	@ (80060a4 <pbuf_alloc+0x1e8>)
 800607a:	4807      	ldr	r0, [pc, #28]	@ (8006098 <pbuf_alloc+0x1dc>)
 800607c:	f008 ff70 	bl	800ef60 <iprintf>
      return NULL;
 8006080:	2300      	movs	r3, #0
 8006082:	e001      	b.n	8006088 <pbuf_alloc+0x1cc>
      break;
 8006084:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8006086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006088:	4618      	mov	r0, r3
 800608a:	3728      	adds	r7, #40	@ 0x28
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	08010374 	.word	0x08010374
 8006094:	080103a4 	.word	0x080103a4
 8006098:	080103d4 	.word	0x080103d4
 800609c:	080103fc 	.word	0x080103fc
 80060a0:	08010430 	.word	0x08010430
 80060a4:	0801045c 	.word	0x0801045c

080060a8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b086      	sub	sp, #24
 80060ac:	af02      	add	r7, sp, #8
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	460b      	mov	r3, r1
 80060b2:	807b      	strh	r3, [r7, #2]
 80060b4:	4613      	mov	r3, r2
 80060b6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80060b8:	883b      	ldrh	r3, [r7, #0]
 80060ba:	2b41      	cmp	r3, #65	@ 0x41
 80060bc:	d009      	beq.n	80060d2 <pbuf_alloc_reference+0x2a>
 80060be:	883b      	ldrh	r3, [r7, #0]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d006      	beq.n	80060d2 <pbuf_alloc_reference+0x2a>
 80060c4:	4b0f      	ldr	r3, [pc, #60]	@ (8006104 <pbuf_alloc_reference+0x5c>)
 80060c6:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80060ca:	490f      	ldr	r1, [pc, #60]	@ (8006108 <pbuf_alloc_reference+0x60>)
 80060cc:	480f      	ldr	r0, [pc, #60]	@ (800610c <pbuf_alloc_reference+0x64>)
 80060ce:	f008 ff47 	bl	800ef60 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80060d2:	2007      	movs	r0, #7
 80060d4:	f7ff faf0 	bl	80056b8 <memp_malloc>
 80060d8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d101      	bne.n	80060e4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80060e0:	2300      	movs	r3, #0
 80060e2:	e00b      	b.n	80060fc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80060e4:	8879      	ldrh	r1, [r7, #2]
 80060e6:	887a      	ldrh	r2, [r7, #2]
 80060e8:	2300      	movs	r3, #0
 80060ea:	9301      	str	r3, [sp, #4]
 80060ec:	883b      	ldrh	r3, [r7, #0]
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	460b      	mov	r3, r1
 80060f2:	6879      	ldr	r1, [r7, #4]
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f7ff feb7 	bl	8005e68 <pbuf_init_alloced_pbuf>
  return p;
 80060fa:	68fb      	ldr	r3, [r7, #12]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	08010374 	.word	0x08010374
 8006108:	08010478 	.word	0x08010478
 800610c:	080103d4 	.word	0x080103d4

08006110 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b088      	sub	sp, #32
 8006114:	af02      	add	r7, sp, #8
 8006116:	607b      	str	r3, [r7, #4]
 8006118:	4603      	mov	r3, r0
 800611a:	73fb      	strb	r3, [r7, #15]
 800611c:	460b      	mov	r3, r1
 800611e:	81bb      	strh	r3, [r7, #12]
 8006120:	4613      	mov	r3, r2
 8006122:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006124:	7bfb      	ldrb	r3, [r7, #15]
 8006126:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006128:	8a7b      	ldrh	r3, [r7, #18]
 800612a:	3303      	adds	r3, #3
 800612c:	f023 0203 	bic.w	r2, r3, #3
 8006130:	89bb      	ldrh	r3, [r7, #12]
 8006132:	441a      	add	r2, r3
 8006134:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006136:	429a      	cmp	r2, r3
 8006138:	d901      	bls.n	800613e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800613a:	2300      	movs	r3, #0
 800613c:	e018      	b.n	8006170 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800613e:	6a3b      	ldr	r3, [r7, #32]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d007      	beq.n	8006154 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006144:	8a7b      	ldrh	r3, [r7, #18]
 8006146:	3303      	adds	r3, #3
 8006148:	f023 0303 	bic.w	r3, r3, #3
 800614c:	6a3a      	ldr	r2, [r7, #32]
 800614e:	4413      	add	r3, r2
 8006150:	617b      	str	r3, [r7, #20]
 8006152:	e001      	b.n	8006158 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006154:	2300      	movs	r3, #0
 8006156:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	89b9      	ldrh	r1, [r7, #12]
 800615c:	89ba      	ldrh	r2, [r7, #12]
 800615e:	2302      	movs	r3, #2
 8006160:	9301      	str	r3, [sp, #4]
 8006162:	897b      	ldrh	r3, [r7, #10]
 8006164:	9300      	str	r3, [sp, #0]
 8006166:	460b      	mov	r3, r1
 8006168:	6979      	ldr	r1, [r7, #20]
 800616a:	f7ff fe7d 	bl	8005e68 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800616e:	687b      	ldr	r3, [r7, #4]
}
 8006170:	4618      	mov	r0, r3
 8006172:	3718      	adds	r7, #24
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	460b      	mov	r3, r1
 8006182:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d106      	bne.n	8006198 <pbuf_realloc+0x20>
 800618a:	4b3a      	ldr	r3, [pc, #232]	@ (8006274 <pbuf_realloc+0xfc>)
 800618c:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8006190:	4939      	ldr	r1, [pc, #228]	@ (8006278 <pbuf_realloc+0x100>)
 8006192:	483a      	ldr	r0, [pc, #232]	@ (800627c <pbuf_realloc+0x104>)
 8006194:	f008 fee4 	bl	800ef60 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	891b      	ldrh	r3, [r3, #8]
 800619c:	887a      	ldrh	r2, [r7, #2]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d263      	bcs.n	800626a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	891a      	ldrh	r2, [r3, #8]
 80061a6:	887b      	ldrh	r3, [r7, #2]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80061ac:	887b      	ldrh	r3, [r7, #2]
 80061ae:	817b      	strh	r3, [r7, #10]
  q = p;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80061b4:	e018      	b.n	80061e8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	895b      	ldrh	r3, [r3, #10]
 80061ba:	897a      	ldrh	r2, [r7, #10]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	891a      	ldrh	r2, [r3, #8]
 80061c4:	893b      	ldrh	r3, [r7, #8]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d106      	bne.n	80061e8 <pbuf_realloc+0x70>
 80061da:	4b26      	ldr	r3, [pc, #152]	@ (8006274 <pbuf_realloc+0xfc>)
 80061dc:	f240 12af 	movw	r2, #431	@ 0x1af
 80061e0:	4927      	ldr	r1, [pc, #156]	@ (8006280 <pbuf_realloc+0x108>)
 80061e2:	4826      	ldr	r0, [pc, #152]	@ (800627c <pbuf_realloc+0x104>)
 80061e4:	f008 febc 	bl	800ef60 <iprintf>
  while (rem_len > q->len) {
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	895b      	ldrh	r3, [r3, #10]
 80061ec:	897a      	ldrh	r2, [r7, #10]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d8e1      	bhi.n	80061b6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	7b1b      	ldrb	r3, [r3, #12]
 80061f6:	f003 030f 	and.w	r3, r3, #15
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d121      	bne.n	8006242 <pbuf_realloc+0xca>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	895b      	ldrh	r3, [r3, #10]
 8006202:	897a      	ldrh	r2, [r7, #10]
 8006204:	429a      	cmp	r2, r3
 8006206:	d01c      	beq.n	8006242 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	7b5b      	ldrb	r3, [r3, #13]
 800620c:	f003 0302 	and.w	r3, r3, #2
 8006210:	2b00      	cmp	r3, #0
 8006212:	d116      	bne.n	8006242 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	b29a      	uxth	r2, r3
 800621e:	897b      	ldrh	r3, [r7, #10]
 8006220:	4413      	add	r3, r2
 8006222:	b29b      	uxth	r3, r3
 8006224:	4619      	mov	r1, r3
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f7fe ffba 	bl	80051a0 <mem_trim>
 800622c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d106      	bne.n	8006242 <pbuf_realloc+0xca>
 8006234:	4b0f      	ldr	r3, [pc, #60]	@ (8006274 <pbuf_realloc+0xfc>)
 8006236:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800623a:	4912      	ldr	r1, [pc, #72]	@ (8006284 <pbuf_realloc+0x10c>)
 800623c:	480f      	ldr	r0, [pc, #60]	@ (800627c <pbuf_realloc+0x104>)
 800623e:	f008 fe8f 	bl	800ef60 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	897a      	ldrh	r2, [r7, #10]
 8006246:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	895a      	ldrh	r2, [r3, #10]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d004      	beq.n	8006262 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4618      	mov	r0, r3
 800625e:	f000 f911 	bl	8006484 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	e000      	b.n	800626c <pbuf_realloc+0xf4>
    return;
 800626a:	bf00      	nop

}
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	08010374 	.word	0x08010374
 8006278:	0801048c 	.word	0x0801048c
 800627c:	080103d4 	.word	0x080103d4
 8006280:	080104a4 	.word	0x080104a4
 8006284:	080104bc 	.word	0x080104bc

08006288 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	4613      	mov	r3, r2
 8006294:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d106      	bne.n	80062aa <pbuf_add_header_impl+0x22>
 800629c:	4b2b      	ldr	r3, [pc, #172]	@ (800634c <pbuf_add_header_impl+0xc4>)
 800629e:	f240 12df 	movw	r2, #479	@ 0x1df
 80062a2:	492b      	ldr	r1, [pc, #172]	@ (8006350 <pbuf_add_header_impl+0xc8>)
 80062a4:	482b      	ldr	r0, [pc, #172]	@ (8006354 <pbuf_add_header_impl+0xcc>)
 80062a6:	f008 fe5b 	bl	800ef60 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d003      	beq.n	80062b8 <pbuf_add_header_impl+0x30>
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062b6:	d301      	bcc.n	80062bc <pbuf_add_header_impl+0x34>
    return 1;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e043      	b.n	8006344 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d101      	bne.n	80062c6 <pbuf_add_header_impl+0x3e>
    return 0;
 80062c2:	2300      	movs	r3, #0
 80062c4:	e03e      	b.n	8006344 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	891a      	ldrh	r2, [r3, #8]
 80062ce:	8a7b      	ldrh	r3, [r7, #18]
 80062d0:	4413      	add	r3, r2
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	8a7a      	ldrh	r2, [r7, #18]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d901      	bls.n	80062de <pbuf_add_header_impl+0x56>
    return 1;
 80062da:	2301      	movs	r3, #1
 80062dc:	e032      	b.n	8006344 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	7b1b      	ldrb	r3, [r3, #12]
 80062e2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80062e4:	8a3b      	ldrh	r3, [r7, #16]
 80062e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00c      	beq.n	8006308 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	425b      	negs	r3, r3
 80062f6:	4413      	add	r3, r2
 80062f8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	3310      	adds	r3, #16
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	429a      	cmp	r2, r3
 8006302:	d20d      	bcs.n	8006320 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006304:	2301      	movs	r3, #1
 8006306:	e01d      	b.n	8006344 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006308:	79fb      	ldrb	r3, [r7, #7]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d006      	beq.n	800631c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	425b      	negs	r3, r3
 8006316:	4413      	add	r3, r2
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	e001      	b.n	8006320 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800631c:	2301      	movs	r3, #1
 800631e:	e011      	b.n	8006344 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	895a      	ldrh	r2, [r3, #10]
 800632a:	8a7b      	ldrh	r3, [r7, #18]
 800632c:	4413      	add	r3, r2
 800632e:	b29a      	uxth	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	891a      	ldrh	r2, [r3, #8]
 8006338:	8a7b      	ldrh	r3, [r7, #18]
 800633a:	4413      	add	r3, r2
 800633c:	b29a      	uxth	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	811a      	strh	r2, [r3, #8]


  return 0;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3718      	adds	r7, #24
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	08010374 	.word	0x08010374
 8006350:	080104d8 	.word	0x080104d8
 8006354:	080103d4 	.word	0x080103d4

08006358 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006362:	2200      	movs	r2, #0
 8006364:	6839      	ldr	r1, [r7, #0]
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7ff ff8e 	bl	8006288 <pbuf_add_header_impl>
 800636c:	4603      	mov	r3, r0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
	...

08006378 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d106      	bne.n	8006396 <pbuf_remove_header+0x1e>
 8006388:	4b20      	ldr	r3, [pc, #128]	@ (800640c <pbuf_remove_header+0x94>)
 800638a:	f240 224b 	movw	r2, #587	@ 0x24b
 800638e:	4920      	ldr	r1, [pc, #128]	@ (8006410 <pbuf_remove_header+0x98>)
 8006390:	4820      	ldr	r0, [pc, #128]	@ (8006414 <pbuf_remove_header+0x9c>)
 8006392:	f008 fde5 	bl	800ef60 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d003      	beq.n	80063a4 <pbuf_remove_header+0x2c>
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063a2:	d301      	bcc.n	80063a8 <pbuf_remove_header+0x30>
    return 1;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e02c      	b.n	8006402 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <pbuf_remove_header+0x3a>
    return 0;
 80063ae:	2300      	movs	r3, #0
 80063b0:	e027      	b.n	8006402 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	895b      	ldrh	r3, [r3, #10]
 80063ba:	89fa      	ldrh	r2, [r7, #14]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d908      	bls.n	80063d2 <pbuf_remove_header+0x5a>
 80063c0:	4b12      	ldr	r3, [pc, #72]	@ (800640c <pbuf_remove_header+0x94>)
 80063c2:	f240 2255 	movw	r2, #597	@ 0x255
 80063c6:	4914      	ldr	r1, [pc, #80]	@ (8006418 <pbuf_remove_header+0xa0>)
 80063c8:	4812      	ldr	r0, [pc, #72]	@ (8006414 <pbuf_remove_header+0x9c>)
 80063ca:	f008 fdc9 	bl	800ef60 <iprintf>
 80063ce:	2301      	movs	r3, #1
 80063d0:	e017      	b.n	8006402 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	441a      	add	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	895a      	ldrh	r2, [r3, #10]
 80063e8:	89fb      	ldrh	r3, [r7, #14]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	891a      	ldrh	r2, [r3, #8]
 80063f6:	89fb      	ldrh	r3, [r7, #14]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	08010374 	.word	0x08010374
 8006410:	080104d8 	.word	0x080104d8
 8006414:	080103d4 	.word	0x080103d4
 8006418:	080104e4 	.word	0x080104e4

0800641c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	460b      	mov	r3, r1
 8006426:	807b      	strh	r3, [r7, #2]
 8006428:	4613      	mov	r3, r2
 800642a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800642c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006430:	2b00      	cmp	r3, #0
 8006432:	da08      	bge.n	8006446 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006434:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006438:	425b      	negs	r3, r3
 800643a:	4619      	mov	r1, r3
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f7ff ff9b 	bl	8006378 <pbuf_remove_header>
 8006442:	4603      	mov	r3, r0
 8006444:	e007      	b.n	8006456 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006446:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800644a:	787a      	ldrb	r2, [r7, #1]
 800644c:	4619      	mov	r1, r3
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7ff ff1a 	bl	8006288 <pbuf_add_header_impl>
 8006454:	4603      	mov	r3, r0
  }
}
 8006456:	4618      	mov	r0, r3
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b082      	sub	sp, #8
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	460b      	mov	r3, r1
 8006468:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800646a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800646e:	2201      	movs	r2, #1
 8006470:	4619      	mov	r1, r3
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7ff ffd2 	bl	800641c <pbuf_header_impl>
 8006478:	4603      	mov	r3, r0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
	...

08006484 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10b      	bne.n	80064aa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d106      	bne.n	80064a6 <pbuf_free+0x22>
 8006498:	4b38      	ldr	r3, [pc, #224]	@ (800657c <pbuf_free+0xf8>)
 800649a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800649e:	4938      	ldr	r1, [pc, #224]	@ (8006580 <pbuf_free+0xfc>)
 80064a0:	4838      	ldr	r0, [pc, #224]	@ (8006584 <pbuf_free+0x100>)
 80064a2:	f008 fd5d 	bl	800ef60 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80064a6:	2300      	movs	r3, #0
 80064a8:	e063      	b.n	8006572 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80064aa:	2300      	movs	r3, #0
 80064ac:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80064ae:	e05c      	b.n	800656a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	7b9b      	ldrb	r3, [r3, #14]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d106      	bne.n	80064c6 <pbuf_free+0x42>
 80064b8:	4b30      	ldr	r3, [pc, #192]	@ (800657c <pbuf_free+0xf8>)
 80064ba:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80064be:	4932      	ldr	r1, [pc, #200]	@ (8006588 <pbuf_free+0x104>)
 80064c0:	4830      	ldr	r0, [pc, #192]	@ (8006584 <pbuf_free+0x100>)
 80064c2:	f008 fd4d 	bl	800ef60 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	7b9b      	ldrb	r3, [r3, #14]
 80064ca:	3b01      	subs	r3, #1
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	739a      	strb	r2, [r3, #14]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	7b9b      	ldrb	r3, [r3, #14]
 80064d6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80064d8:	7dbb      	ldrb	r3, [r7, #22]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d143      	bne.n	8006566 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	7b1b      	ldrb	r3, [r3, #12]
 80064e8:	f003 030f 	and.w	r3, r3, #15
 80064ec:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	7b5b      	ldrb	r3, [r3, #13]
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d011      	beq.n	800651e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d106      	bne.n	8006514 <pbuf_free+0x90>
 8006506:	4b1d      	ldr	r3, [pc, #116]	@ (800657c <pbuf_free+0xf8>)
 8006508:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800650c:	491f      	ldr	r1, [pc, #124]	@ (800658c <pbuf_free+0x108>)
 800650e:	481d      	ldr	r0, [pc, #116]	@ (8006584 <pbuf_free+0x100>)
 8006510:	f008 fd26 	bl	800ef60 <iprintf>
        pc->custom_free_function(p);
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	4798      	blx	r3
 800651c:	e01d      	b.n	800655a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800651e:	7bfb      	ldrb	r3, [r7, #15]
 8006520:	2b02      	cmp	r3, #2
 8006522:	d104      	bne.n	800652e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006524:	6879      	ldr	r1, [r7, #4]
 8006526:	2008      	movs	r0, #8
 8006528:	f7ff f936 	bl	8005798 <memp_free>
 800652c:	e015      	b.n	800655a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800652e:	7bfb      	ldrb	r3, [r7, #15]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d104      	bne.n	800653e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006534:	6879      	ldr	r1, [r7, #4]
 8006536:	2007      	movs	r0, #7
 8006538:	f7ff f92e 	bl	8005798 <memp_free>
 800653c:	e00d      	b.n	800655a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800653e:	7bfb      	ldrb	r3, [r7, #15]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d103      	bne.n	800654c <pbuf_free+0xc8>
          mem_free(p);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7fe fdc1 	bl	80050cc <mem_free>
 800654a:	e006      	b.n	800655a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800654c:	4b0b      	ldr	r3, [pc, #44]	@ (800657c <pbuf_free+0xf8>)
 800654e:	f240 320f 	movw	r2, #783	@ 0x30f
 8006552:	490f      	ldr	r1, [pc, #60]	@ (8006590 <pbuf_free+0x10c>)
 8006554:	480b      	ldr	r0, [pc, #44]	@ (8006584 <pbuf_free+0x100>)
 8006556:	f008 fd03 	bl	800ef60 <iprintf>
        }
      }
      count++;
 800655a:	7dfb      	ldrb	r3, [r7, #23]
 800655c:	3301      	adds	r3, #1
 800655e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	607b      	str	r3, [r7, #4]
 8006564:	e001      	b.n	800656a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006566:	2300      	movs	r3, #0
 8006568:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d19f      	bne.n	80064b0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006570:	7dfb      	ldrb	r3, [r7, #23]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3718      	adds	r7, #24
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	08010374 	.word	0x08010374
 8006580:	080104d8 	.word	0x080104d8
 8006584:	080103d4 	.word	0x080103d4
 8006588:	08010504 	.word	0x08010504
 800658c:	0801051c 	.word	0x0801051c
 8006590:	08010540 	.word	0x08010540

08006594 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800659c:	2300      	movs	r3, #0
 800659e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80065a0:	e005      	b.n	80065ae <pbuf_clen+0x1a>
    ++len;
 80065a2:	89fb      	ldrh	r3, [r7, #14]
 80065a4:	3301      	adds	r3, #1
 80065a6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1f6      	bne.n	80065a2 <pbuf_clen+0xe>
  }
  return len;
 80065b4:	89fb      	ldrh	r3, [r7, #14]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
	...

080065c4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d010      	beq.n	80065f4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	7b9b      	ldrb	r3, [r3, #14]
 80065d6:	3301      	adds	r3, #1
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	7b9b      	ldrb	r3, [r3, #14]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d106      	bne.n	80065f4 <pbuf_ref+0x30>
 80065e6:	4b05      	ldr	r3, [pc, #20]	@ (80065fc <pbuf_ref+0x38>)
 80065e8:	f240 3242 	movw	r2, #834	@ 0x342
 80065ec:	4904      	ldr	r1, [pc, #16]	@ (8006600 <pbuf_ref+0x3c>)
 80065ee:	4805      	ldr	r0, [pc, #20]	@ (8006604 <pbuf_ref+0x40>)
 80065f0:	f008 fcb6 	bl	800ef60 <iprintf>
  }
}
 80065f4:	bf00      	nop
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	08010374 	.word	0x08010374
 8006600:	08010554 	.word	0x08010554
 8006604:	080103d4 	.word	0x080103d4

08006608 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d002      	beq.n	800661e <pbuf_cat+0x16>
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d107      	bne.n	800662e <pbuf_cat+0x26>
 800661e:	4b20      	ldr	r3, [pc, #128]	@ (80066a0 <pbuf_cat+0x98>)
 8006620:	f240 3259 	movw	r2, #857	@ 0x359
 8006624:	491f      	ldr	r1, [pc, #124]	@ (80066a4 <pbuf_cat+0x9c>)
 8006626:	4820      	ldr	r0, [pc, #128]	@ (80066a8 <pbuf_cat+0xa0>)
 8006628:	f008 fc9a 	bl	800ef60 <iprintf>
 800662c:	e034      	b.n	8006698 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	60fb      	str	r3, [r7, #12]
 8006632:	e00a      	b.n	800664a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	891a      	ldrh	r2, [r3, #8]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	891b      	ldrh	r3, [r3, #8]
 800663c:	4413      	add	r3, r2
 800663e:	b29a      	uxth	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	60fb      	str	r3, [r7, #12]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1f0      	bne.n	8006634 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	891a      	ldrh	r2, [r3, #8]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	895b      	ldrh	r3, [r3, #10]
 800665a:	429a      	cmp	r2, r3
 800665c:	d006      	beq.n	800666c <pbuf_cat+0x64>
 800665e:	4b10      	ldr	r3, [pc, #64]	@ (80066a0 <pbuf_cat+0x98>)
 8006660:	f240 3262 	movw	r2, #866	@ 0x362
 8006664:	4911      	ldr	r1, [pc, #68]	@ (80066ac <pbuf_cat+0xa4>)
 8006666:	4810      	ldr	r0, [pc, #64]	@ (80066a8 <pbuf_cat+0xa0>)
 8006668:	f008 fc7a 	bl	800ef60 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d006      	beq.n	8006682 <pbuf_cat+0x7a>
 8006674:	4b0a      	ldr	r3, [pc, #40]	@ (80066a0 <pbuf_cat+0x98>)
 8006676:	f240 3263 	movw	r2, #867	@ 0x363
 800667a:	490d      	ldr	r1, [pc, #52]	@ (80066b0 <pbuf_cat+0xa8>)
 800667c:	480a      	ldr	r0, [pc, #40]	@ (80066a8 <pbuf_cat+0xa0>)
 800667e:	f008 fc6f 	bl	800ef60 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	891a      	ldrh	r2, [r3, #8]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	891b      	ldrh	r3, [r3, #8]
 800668a:	4413      	add	r3, r2
 800668c:	b29a      	uxth	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	08010374 	.word	0x08010374
 80066a4:	08010568 	.word	0x08010568
 80066a8:	080103d4 	.word	0x080103d4
 80066ac:	080105a0 	.word	0x080105a0
 80066b0:	080105d0 	.word	0x080105d0

080066b4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80066be:	6839      	ldr	r1, [r7, #0]
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f7ff ffa1 	bl	8006608 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80066c6:	6838      	ldr	r0, [r7, #0]
 80066c8:	f7ff ff7c 	bl	80065c4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80066cc:	bf00      	nop
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80066de:	2300      	movs	r3, #0
 80066e0:	617b      	str	r3, [r7, #20]
 80066e2:	2300      	movs	r3, #0
 80066e4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d008      	beq.n	80066fe <pbuf_copy+0x2a>
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d005      	beq.n	80066fe <pbuf_copy+0x2a>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	891a      	ldrh	r2, [r3, #8]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	891b      	ldrh	r3, [r3, #8]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d209      	bcs.n	8006712 <pbuf_copy+0x3e>
 80066fe:	4b57      	ldr	r3, [pc, #348]	@ (800685c <pbuf_copy+0x188>)
 8006700:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8006704:	4956      	ldr	r1, [pc, #344]	@ (8006860 <pbuf_copy+0x18c>)
 8006706:	4857      	ldr	r0, [pc, #348]	@ (8006864 <pbuf_copy+0x190>)
 8006708:	f008 fc2a 	bl	800ef60 <iprintf>
 800670c:	f06f 030f 	mvn.w	r3, #15
 8006710:	e09f      	b.n	8006852 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	895b      	ldrh	r3, [r3, #10]
 8006716:	461a      	mov	r2, r3
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	1ad2      	subs	r2, r2, r3
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	895b      	ldrh	r3, [r3, #10]
 8006720:	4619      	mov	r1, r3
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	1acb      	subs	r3, r1, r3
 8006726:	429a      	cmp	r2, r3
 8006728:	d306      	bcc.n	8006738 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	895b      	ldrh	r3, [r3, #10]
 800672e:	461a      	mov	r2, r3
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	60fb      	str	r3, [r7, #12]
 8006736:	e005      	b.n	8006744 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	895b      	ldrh	r3, [r3, #10]
 800673c:	461a      	mov	r2, r3
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685a      	ldr	r2, [r3, #4]
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	18d0      	adds	r0, r2, r3
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	4413      	add	r3, r2
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	4619      	mov	r1, r3
 8006758:	f008 fcdd 	bl	800f116 <memcpy>
    offset_to += len;
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	4413      	add	r3, r2
 8006762:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	4413      	add	r3, r2
 800676a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	895b      	ldrh	r3, [r3, #10]
 8006770:	461a      	mov	r2, r3
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	4293      	cmp	r3, r2
 8006776:	d906      	bls.n	8006786 <pbuf_copy+0xb2>
 8006778:	4b38      	ldr	r3, [pc, #224]	@ (800685c <pbuf_copy+0x188>)
 800677a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800677e:	493a      	ldr	r1, [pc, #232]	@ (8006868 <pbuf_copy+0x194>)
 8006780:	4838      	ldr	r0, [pc, #224]	@ (8006864 <pbuf_copy+0x190>)
 8006782:	f008 fbed 	bl	800ef60 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	895b      	ldrh	r3, [r3, #10]
 800678a:	461a      	mov	r2, r3
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	4293      	cmp	r3, r2
 8006790:	d906      	bls.n	80067a0 <pbuf_copy+0xcc>
 8006792:	4b32      	ldr	r3, [pc, #200]	@ (800685c <pbuf_copy+0x188>)
 8006794:	f240 32da 	movw	r2, #986	@ 0x3da
 8006798:	4934      	ldr	r1, [pc, #208]	@ (800686c <pbuf_copy+0x198>)
 800679a:	4832      	ldr	r0, [pc, #200]	@ (8006864 <pbuf_copy+0x190>)
 800679c:	f008 fbe0 	bl	800ef60 <iprintf>
    if (offset_from >= p_from->len) {
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	895b      	ldrh	r3, [r3, #10]
 80067a4:	461a      	mov	r2, r3
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d304      	bcc.n	80067b6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80067ac:	2300      	movs	r3, #0
 80067ae:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	895b      	ldrh	r3, [r3, #10]
 80067ba:	461a      	mov	r2, r3
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	4293      	cmp	r3, r2
 80067c0:	d114      	bne.n	80067ec <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80067c2:	2300      	movs	r3, #0
 80067c4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10c      	bne.n	80067ec <pbuf_copy+0x118>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d009      	beq.n	80067ec <pbuf_copy+0x118>
 80067d8:	4b20      	ldr	r3, [pc, #128]	@ (800685c <pbuf_copy+0x188>)
 80067da:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80067de:	4924      	ldr	r1, [pc, #144]	@ (8006870 <pbuf_copy+0x19c>)
 80067e0:	4820      	ldr	r0, [pc, #128]	@ (8006864 <pbuf_copy+0x190>)
 80067e2:	f008 fbbd 	bl	800ef60 <iprintf>
 80067e6:	f06f 030f 	mvn.w	r3, #15
 80067ea:	e032      	b.n	8006852 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d013      	beq.n	800681a <pbuf_copy+0x146>
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	895a      	ldrh	r2, [r3, #10]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	891b      	ldrh	r3, [r3, #8]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d10d      	bne.n	800681a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d009      	beq.n	800681a <pbuf_copy+0x146>
 8006806:	4b15      	ldr	r3, [pc, #84]	@ (800685c <pbuf_copy+0x188>)
 8006808:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800680c:	4919      	ldr	r1, [pc, #100]	@ (8006874 <pbuf_copy+0x1a0>)
 800680e:	4815      	ldr	r0, [pc, #84]	@ (8006864 <pbuf_copy+0x190>)
 8006810:	f008 fba6 	bl	800ef60 <iprintf>
 8006814:	f06f 0305 	mvn.w	r3, #5
 8006818:	e01b      	b.n	8006852 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d013      	beq.n	8006848 <pbuf_copy+0x174>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	895a      	ldrh	r2, [r3, #10]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	891b      	ldrh	r3, [r3, #8]
 8006828:	429a      	cmp	r2, r3
 800682a:	d10d      	bne.n	8006848 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d009      	beq.n	8006848 <pbuf_copy+0x174>
 8006834:	4b09      	ldr	r3, [pc, #36]	@ (800685c <pbuf_copy+0x188>)
 8006836:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800683a:	490e      	ldr	r1, [pc, #56]	@ (8006874 <pbuf_copy+0x1a0>)
 800683c:	4809      	ldr	r0, [pc, #36]	@ (8006864 <pbuf_copy+0x190>)
 800683e:	f008 fb8f 	bl	800ef60 <iprintf>
 8006842:	f06f 0305 	mvn.w	r3, #5
 8006846:	e004      	b.n	8006852 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	f47f af61 	bne.w	8006712 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3718      	adds	r7, #24
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	08010374 	.word	0x08010374
 8006860:	0801061c 	.word	0x0801061c
 8006864:	080103d4 	.word	0x080103d4
 8006868:	0801064c 	.word	0x0801064c
 800686c:	08010664 	.word	0x08010664
 8006870:	08010680 	.word	0x08010680
 8006874:	08010690 	.word	0x08010690

08006878 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b088      	sub	sp, #32
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	4611      	mov	r1, r2
 8006884:	461a      	mov	r2, r3
 8006886:	460b      	mov	r3, r1
 8006888:	80fb      	strh	r3, [r7, #6]
 800688a:	4613      	mov	r3, r2
 800688c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800688e:	2300      	movs	r3, #0
 8006890:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006892:	2300      	movs	r3, #0
 8006894:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d108      	bne.n	80068ae <pbuf_copy_partial+0x36>
 800689c:	4b2b      	ldr	r3, [pc, #172]	@ (800694c <pbuf_copy_partial+0xd4>)
 800689e:	f240 420a 	movw	r2, #1034	@ 0x40a
 80068a2:	492b      	ldr	r1, [pc, #172]	@ (8006950 <pbuf_copy_partial+0xd8>)
 80068a4:	482b      	ldr	r0, [pc, #172]	@ (8006954 <pbuf_copy_partial+0xdc>)
 80068a6:	f008 fb5b 	bl	800ef60 <iprintf>
 80068aa:	2300      	movs	r3, #0
 80068ac:	e04a      	b.n	8006944 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d108      	bne.n	80068c6 <pbuf_copy_partial+0x4e>
 80068b4:	4b25      	ldr	r3, [pc, #148]	@ (800694c <pbuf_copy_partial+0xd4>)
 80068b6:	f240 420b 	movw	r2, #1035	@ 0x40b
 80068ba:	4927      	ldr	r1, [pc, #156]	@ (8006958 <pbuf_copy_partial+0xe0>)
 80068bc:	4825      	ldr	r0, [pc, #148]	@ (8006954 <pbuf_copy_partial+0xdc>)
 80068be:	f008 fb4f 	bl	800ef60 <iprintf>
 80068c2:	2300      	movs	r3, #0
 80068c4:	e03e      	b.n	8006944 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	61fb      	str	r3, [r7, #28]
 80068ca:	e034      	b.n	8006936 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80068cc:	88bb      	ldrh	r3, [r7, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00a      	beq.n	80068e8 <pbuf_copy_partial+0x70>
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	895b      	ldrh	r3, [r3, #10]
 80068d6:	88ba      	ldrh	r2, [r7, #4]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d305      	bcc.n	80068e8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	895b      	ldrh	r3, [r3, #10]
 80068e0:	88ba      	ldrh	r2, [r7, #4]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	80bb      	strh	r3, [r7, #4]
 80068e6:	e023      	b.n	8006930 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	895a      	ldrh	r2, [r3, #10]
 80068ec:	88bb      	ldrh	r3, [r7, #4]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80068f2:	8b3a      	ldrh	r2, [r7, #24]
 80068f4:	88fb      	ldrh	r3, [r7, #6]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d901      	bls.n	80068fe <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80068fa:	88fb      	ldrh	r3, [r7, #6]
 80068fc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80068fe:	8b7b      	ldrh	r3, [r7, #26]
 8006900:	68ba      	ldr	r2, [r7, #8]
 8006902:	18d0      	adds	r0, r2, r3
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	88bb      	ldrh	r3, [r7, #4]
 800690a:	4413      	add	r3, r2
 800690c:	8b3a      	ldrh	r2, [r7, #24]
 800690e:	4619      	mov	r1, r3
 8006910:	f008 fc01 	bl	800f116 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006914:	8afa      	ldrh	r2, [r7, #22]
 8006916:	8b3b      	ldrh	r3, [r7, #24]
 8006918:	4413      	add	r3, r2
 800691a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800691c:	8b7a      	ldrh	r2, [r7, #26]
 800691e:	8b3b      	ldrh	r3, [r7, #24]
 8006920:	4413      	add	r3, r2
 8006922:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006924:	88fa      	ldrh	r2, [r7, #6]
 8006926:	8b3b      	ldrh	r3, [r7, #24]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800692c:	2300      	movs	r3, #0
 800692e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	61fb      	str	r3, [r7, #28]
 8006936:	88fb      	ldrh	r3, [r7, #6]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d002      	beq.n	8006942 <pbuf_copy_partial+0xca>
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1c4      	bne.n	80068cc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006942:	8afb      	ldrh	r3, [r7, #22]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3720      	adds	r7, #32
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	08010374 	.word	0x08010374
 8006950:	080106bc 	.word	0x080106bc
 8006954:	080103d4 	.word	0x080103d4
 8006958:	080106dc 	.word	0x080106dc

0800695c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	4603      	mov	r3, r0
 8006964:	603a      	str	r2, [r7, #0]
 8006966:	71fb      	strb	r3, [r7, #7]
 8006968:	460b      	mov	r3, r1
 800696a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	8919      	ldrh	r1, [r3, #8]
 8006970:	88ba      	ldrh	r2, [r7, #4]
 8006972:	79fb      	ldrb	r3, [r7, #7]
 8006974:	4618      	mov	r0, r3
 8006976:	f7ff faa1 	bl	8005ebc <pbuf_alloc>
 800697a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <pbuf_clone+0x2a>
    return NULL;
 8006982:	2300      	movs	r3, #0
 8006984:	e011      	b.n	80069aa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006986:	6839      	ldr	r1, [r7, #0]
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f7ff fea3 	bl	80066d4 <pbuf_copy>
 800698e:	4603      	mov	r3, r0
 8006990:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006992:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d006      	beq.n	80069a8 <pbuf_clone+0x4c>
 800699a:	4b06      	ldr	r3, [pc, #24]	@ (80069b4 <pbuf_clone+0x58>)
 800699c:	f240 5224 	movw	r2, #1316	@ 0x524
 80069a0:	4905      	ldr	r1, [pc, #20]	@ (80069b8 <pbuf_clone+0x5c>)
 80069a2:	4806      	ldr	r0, [pc, #24]	@ (80069bc <pbuf_clone+0x60>)
 80069a4:	f008 fadc 	bl	800ef60 <iprintf>
  return q;
 80069a8:	68fb      	ldr	r3, [r7, #12]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	08010374 	.word	0x08010374
 80069b8:	080107e8 	.word	0x080107e8
 80069bc:	080103d4 	.word	0x080103d4

080069c0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80069c4:	f008 f9cc 	bl	800ed60 <rand>
 80069c8:	4603      	mov	r3, r0
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	4b01      	ldr	r3, [pc, #4]	@ (80069e0 <tcp_init+0x20>)
 80069da:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80069dc:	bf00      	nop
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	20000020 	.word	0x20000020

080069e4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	7d1b      	ldrb	r3, [r3, #20]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d105      	bne.n	8006a00 <tcp_free+0x1c>
 80069f4:	4b06      	ldr	r3, [pc, #24]	@ (8006a10 <tcp_free+0x2c>)
 80069f6:	22d4      	movs	r2, #212	@ 0xd4
 80069f8:	4906      	ldr	r1, [pc, #24]	@ (8006a14 <tcp_free+0x30>)
 80069fa:	4807      	ldr	r0, [pc, #28]	@ (8006a18 <tcp_free+0x34>)
 80069fc:	f008 fab0 	bl	800ef60 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006a00:	6879      	ldr	r1, [r7, #4]
 8006a02:	2001      	movs	r0, #1
 8006a04:	f7fe fec8 	bl	8005798 <memp_free>
}
 8006a08:	bf00      	nop
 8006a0a:	3708      	adds	r7, #8
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	08010874 	.word	0x08010874
 8006a14:	080108a4 	.word	0x080108a4
 8006a18:	080108b8 	.word	0x080108b8

08006a1c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	7d1b      	ldrb	r3, [r3, #20]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d105      	bne.n	8006a38 <tcp_free_listen+0x1c>
 8006a2c:	4b06      	ldr	r3, [pc, #24]	@ (8006a48 <tcp_free_listen+0x2c>)
 8006a2e:	22df      	movs	r2, #223	@ 0xdf
 8006a30:	4906      	ldr	r1, [pc, #24]	@ (8006a4c <tcp_free_listen+0x30>)
 8006a32:	4807      	ldr	r0, [pc, #28]	@ (8006a50 <tcp_free_listen+0x34>)
 8006a34:	f008 fa94 	bl	800ef60 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006a38:	6879      	ldr	r1, [r7, #4]
 8006a3a:	2002      	movs	r0, #2
 8006a3c:	f7fe feac 	bl	8005798 <memp_free>
}
 8006a40:	bf00      	nop
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	08010874 	.word	0x08010874
 8006a4c:	080108e0 	.word	0x080108e0
 8006a50:	080108b8 	.word	0x080108b8

08006a54 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006a58:	f000 fea4 	bl	80077a4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006a5c:	4b07      	ldr	r3, [pc, #28]	@ (8006a7c <tcp_tmr+0x28>)
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	3301      	adds	r3, #1
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	4b05      	ldr	r3, [pc, #20]	@ (8006a7c <tcp_tmr+0x28>)
 8006a66:	701a      	strb	r2, [r3, #0]
 8006a68:	4b04      	ldr	r3, [pc, #16]	@ (8006a7c <tcp_tmr+0x28>)
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006a74:	f000 fb54 	bl	8007120 <tcp_slowtmr>
  }
}
 8006a78:	bf00      	nop
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	200082ad 	.word	0x200082ad

08006a80 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d105      	bne.n	8006a9c <tcp_remove_listener+0x1c>
 8006a90:	4b0d      	ldr	r3, [pc, #52]	@ (8006ac8 <tcp_remove_listener+0x48>)
 8006a92:	22ff      	movs	r2, #255	@ 0xff
 8006a94:	490d      	ldr	r1, [pc, #52]	@ (8006acc <tcp_remove_listener+0x4c>)
 8006a96:	480e      	ldr	r0, [pc, #56]	@ (8006ad0 <tcp_remove_listener+0x50>)
 8006a98:	f008 fa62 	bl	800ef60 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	60fb      	str	r3, [r7, #12]
 8006aa0:	e00a      	b.n	8006ab8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d102      	bne.n	8006ab2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	60fb      	str	r3, [r7, #12]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1f1      	bne.n	8006aa2 <tcp_remove_listener+0x22>
    }
  }
}
 8006abe:	bf00      	nop
 8006ac0:	bf00      	nop
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	08010874 	.word	0x08010874
 8006acc:	080108fc 	.word	0x080108fc
 8006ad0:	080108b8 	.word	0x080108b8

08006ad4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d106      	bne.n	8006af0 <tcp_listen_closed+0x1c>
 8006ae2:	4b14      	ldr	r3, [pc, #80]	@ (8006b34 <tcp_listen_closed+0x60>)
 8006ae4:	f240 1211 	movw	r2, #273	@ 0x111
 8006ae8:	4913      	ldr	r1, [pc, #76]	@ (8006b38 <tcp_listen_closed+0x64>)
 8006aea:	4814      	ldr	r0, [pc, #80]	@ (8006b3c <tcp_listen_closed+0x68>)
 8006aec:	f008 fa38 	bl	800ef60 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	7d1b      	ldrb	r3, [r3, #20]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d006      	beq.n	8006b06 <tcp_listen_closed+0x32>
 8006af8:	4b0e      	ldr	r3, [pc, #56]	@ (8006b34 <tcp_listen_closed+0x60>)
 8006afa:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8006afe:	4910      	ldr	r1, [pc, #64]	@ (8006b40 <tcp_listen_closed+0x6c>)
 8006b00:	480e      	ldr	r0, [pc, #56]	@ (8006b3c <tcp_listen_closed+0x68>)
 8006b02:	f008 fa2d 	bl	800ef60 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006b06:	2301      	movs	r3, #1
 8006b08:	60fb      	str	r3, [r7, #12]
 8006b0a:	e00b      	b.n	8006b24 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8006b44 <tcp_listen_closed+0x70>)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6879      	ldr	r1, [r7, #4]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7ff ffb1 	bl	8006a80 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	3301      	adds	r3, #1
 8006b22:	60fb      	str	r3, [r7, #12]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2b03      	cmp	r3, #3
 8006b28:	d9f0      	bls.n	8006b0c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006b2a:	bf00      	nop
 8006b2c:	bf00      	nop
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	08010874 	.word	0x08010874
 8006b38:	08010924 	.word	0x08010924
 8006b3c:	080108b8 	.word	0x080108b8
 8006b40:	08010930 	.word	0x08010930
 8006b44:	08012854 	.word	0x08012854

08006b48 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006b48:	b5b0      	push	{r4, r5, r7, lr}
 8006b4a:	b088      	sub	sp, #32
 8006b4c:	af04      	add	r7, sp, #16
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	460b      	mov	r3, r1
 8006b52:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d106      	bne.n	8006b68 <tcp_close_shutdown+0x20>
 8006b5a:	4b63      	ldr	r3, [pc, #396]	@ (8006ce8 <tcp_close_shutdown+0x1a0>)
 8006b5c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8006b60:	4962      	ldr	r1, [pc, #392]	@ (8006cec <tcp_close_shutdown+0x1a4>)
 8006b62:	4863      	ldr	r0, [pc, #396]	@ (8006cf0 <tcp_close_shutdown+0x1a8>)
 8006b64:	f008 f9fc 	bl	800ef60 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006b68:	78fb      	ldrb	r3, [r7, #3]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d066      	beq.n	8006c3c <tcp_close_shutdown+0xf4>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	7d1b      	ldrb	r3, [r3, #20]
 8006b72:	2b04      	cmp	r3, #4
 8006b74:	d003      	beq.n	8006b7e <tcp_close_shutdown+0x36>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	7d1b      	ldrb	r3, [r3, #20]
 8006b7a:	2b07      	cmp	r3, #7
 8006b7c:	d15e      	bne.n	8006c3c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d104      	bne.n	8006b90 <tcp_close_shutdown+0x48>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b8a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8006b8e:	d055      	beq.n	8006c3c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	8b5b      	ldrh	r3, [r3, #26]
 8006b94:	f003 0310 	and.w	r3, r3, #16
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d106      	bne.n	8006baa <tcp_close_shutdown+0x62>
 8006b9c:	4b52      	ldr	r3, [pc, #328]	@ (8006ce8 <tcp_close_shutdown+0x1a0>)
 8006b9e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8006ba2:	4954      	ldr	r1, [pc, #336]	@ (8006cf4 <tcp_close_shutdown+0x1ac>)
 8006ba4:	4852      	ldr	r0, [pc, #328]	@ (8006cf0 <tcp_close_shutdown+0x1a8>)
 8006ba6:	f008 f9db 	bl	800ef60 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006bb2:	687d      	ldr	r5, [r7, #4]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	3304      	adds	r3, #4
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	8ad2      	ldrh	r2, [r2, #22]
 8006bbc:	6879      	ldr	r1, [r7, #4]
 8006bbe:	8b09      	ldrh	r1, [r1, #24]
 8006bc0:	9102      	str	r1, [sp, #8]
 8006bc2:	9201      	str	r2, [sp, #4]
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	462b      	mov	r3, r5
 8006bc8:	4622      	mov	r2, r4
 8006bca:	4601      	mov	r1, r0
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f004 fe8d 	bl	800b8ec <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f001 f8c8 	bl	8007d68 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006bd8:	4b47      	ldr	r3, [pc, #284]	@ (8006cf8 <tcp_close_shutdown+0x1b0>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d105      	bne.n	8006bee <tcp_close_shutdown+0xa6>
 8006be2:	4b45      	ldr	r3, [pc, #276]	@ (8006cf8 <tcp_close_shutdown+0x1b0>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	4a43      	ldr	r2, [pc, #268]	@ (8006cf8 <tcp_close_shutdown+0x1b0>)
 8006bea:	6013      	str	r3, [r2, #0]
 8006bec:	e013      	b.n	8006c16 <tcp_close_shutdown+0xce>
 8006bee:	4b42      	ldr	r3, [pc, #264]	@ (8006cf8 <tcp_close_shutdown+0x1b0>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	60fb      	str	r3, [r7, #12]
 8006bf4:	e00c      	b.n	8006c10 <tcp_close_shutdown+0xc8>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d104      	bne.n	8006c0a <tcp_close_shutdown+0xc2>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68da      	ldr	r2, [r3, #12]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	60da      	str	r2, [r3, #12]
 8006c08:	e005      	b.n	8006c16 <tcp_close_shutdown+0xce>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	60fb      	str	r3, [r7, #12]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1ef      	bne.n	8006bf6 <tcp_close_shutdown+0xae>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	60da      	str	r2, [r3, #12]
 8006c1c:	4b37      	ldr	r3, [pc, #220]	@ (8006cfc <tcp_close_shutdown+0x1b4>)
 8006c1e:	2201      	movs	r2, #1
 8006c20:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006c22:	4b37      	ldr	r3, [pc, #220]	@ (8006d00 <tcp_close_shutdown+0x1b8>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d102      	bne.n	8006c32 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006c2c:	f003 fd5c 	bl	800a6e8 <tcp_trigger_input_pcb_close>
 8006c30:	e002      	b.n	8006c38 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7ff fed6 	bl	80069e4 <tcp_free>
      }
      return ERR_OK;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	e050      	b.n	8006cde <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	7d1b      	ldrb	r3, [r3, #20]
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d03b      	beq.n	8006cbc <tcp_close_shutdown+0x174>
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	dc44      	bgt.n	8006cd2 <tcp_close_shutdown+0x18a>
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d002      	beq.n	8006c52 <tcp_close_shutdown+0x10a>
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d02a      	beq.n	8006ca6 <tcp_close_shutdown+0x15e>
 8006c50:	e03f      	b.n	8006cd2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	8adb      	ldrh	r3, [r3, #22]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d021      	beq.n	8006c9e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8006d04 <tcp_close_shutdown+0x1bc>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d105      	bne.n	8006c70 <tcp_close_shutdown+0x128>
 8006c64:	4b27      	ldr	r3, [pc, #156]	@ (8006d04 <tcp_close_shutdown+0x1bc>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	4a26      	ldr	r2, [pc, #152]	@ (8006d04 <tcp_close_shutdown+0x1bc>)
 8006c6c:	6013      	str	r3, [r2, #0]
 8006c6e:	e013      	b.n	8006c98 <tcp_close_shutdown+0x150>
 8006c70:	4b24      	ldr	r3, [pc, #144]	@ (8006d04 <tcp_close_shutdown+0x1bc>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	60bb      	str	r3, [r7, #8]
 8006c76:	e00c      	b.n	8006c92 <tcp_close_shutdown+0x14a>
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d104      	bne.n	8006c8c <tcp_close_shutdown+0x144>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68da      	ldr	r2, [r3, #12]
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	60da      	str	r2, [r3, #12]
 8006c8a:	e005      	b.n	8006c98 <tcp_close_shutdown+0x150>
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	60bb      	str	r3, [r7, #8]
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1ef      	bne.n	8006c78 <tcp_close_shutdown+0x130>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7ff fea0 	bl	80069e4 <tcp_free>
      break;
 8006ca4:	e01a      	b.n	8006cdc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7ff ff14 	bl	8006ad4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006cac:	6879      	ldr	r1, [r7, #4]
 8006cae:	4816      	ldr	r0, [pc, #88]	@ (8006d08 <tcp_close_shutdown+0x1c0>)
 8006cb0:	f001 f8aa 	bl	8007e08 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f7ff feb1 	bl	8006a1c <tcp_free_listen>
      break;
 8006cba:	e00f      	b.n	8006cdc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006cbc:	6879      	ldr	r1, [r7, #4]
 8006cbe:	480e      	ldr	r0, [pc, #56]	@ (8006cf8 <tcp_close_shutdown+0x1b0>)
 8006cc0:	f001 f8a2 	bl	8007e08 <tcp_pcb_remove>
 8006cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8006cfc <tcp_close_shutdown+0x1b4>)
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7ff fe8a 	bl	80069e4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006cd0:	e004      	b.n	8006cdc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f81a 	bl	8006d0c <tcp_close_shutdown_fin>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	e000      	b.n	8006cde <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bdb0      	pop	{r4, r5, r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	08010874 	.word	0x08010874
 8006cec:	08010948 	.word	0x08010948
 8006cf0:	080108b8 	.word	0x080108b8
 8006cf4:	08010968 	.word	0x08010968
 8006cf8:	200082a4 	.word	0x200082a4
 8006cfc:	200082ac 	.word	0x200082ac
 8006d00:	200082e4 	.word	0x200082e4
 8006d04:	2000829c 	.word	0x2000829c
 8006d08:	200082a0 	.word	0x200082a0

08006d0c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d106      	bne.n	8006d28 <tcp_close_shutdown_fin+0x1c>
 8006d1a:	4b2e      	ldr	r3, [pc, #184]	@ (8006dd4 <tcp_close_shutdown_fin+0xc8>)
 8006d1c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8006d20:	492d      	ldr	r1, [pc, #180]	@ (8006dd8 <tcp_close_shutdown_fin+0xcc>)
 8006d22:	482e      	ldr	r0, [pc, #184]	@ (8006ddc <tcp_close_shutdown_fin+0xd0>)
 8006d24:	f008 f91c 	bl	800ef60 <iprintf>

  switch (pcb->state) {
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	7d1b      	ldrb	r3, [r3, #20]
 8006d2c:	2b07      	cmp	r3, #7
 8006d2e:	d020      	beq.n	8006d72 <tcp_close_shutdown_fin+0x66>
 8006d30:	2b07      	cmp	r3, #7
 8006d32:	dc2b      	bgt.n	8006d8c <tcp_close_shutdown_fin+0x80>
 8006d34:	2b03      	cmp	r3, #3
 8006d36:	d002      	beq.n	8006d3e <tcp_close_shutdown_fin+0x32>
 8006d38:	2b04      	cmp	r3, #4
 8006d3a:	d00d      	beq.n	8006d58 <tcp_close_shutdown_fin+0x4c>
 8006d3c:	e026      	b.n	8006d8c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f003 fee2 	bl	800ab08 <tcp_send_fin>
 8006d44:	4603      	mov	r3, r0
 8006d46:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d11f      	bne.n	8006d90 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2205      	movs	r2, #5
 8006d54:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006d56:	e01b      	b.n	8006d90 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f003 fed5 	bl	800ab08 <tcp_send_fin>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d114      	bne.n	8006d94 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2205      	movs	r2, #5
 8006d6e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006d70:	e010      	b.n	8006d94 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f003 fec8 	bl	800ab08 <tcp_send_fin>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d109      	bne.n	8006d98 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2209      	movs	r2, #9
 8006d88:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006d8a:	e005      	b.n	8006d98 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	e01c      	b.n	8006dca <tcp_close_shutdown_fin+0xbe>
      break;
 8006d90:	bf00      	nop
 8006d92:	e002      	b.n	8006d9a <tcp_close_shutdown_fin+0x8e>
      break;
 8006d94:	bf00      	nop
 8006d96:	e000      	b.n	8006d9a <tcp_close_shutdown_fin+0x8e>
      break;
 8006d98:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d103      	bne.n	8006daa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f003 ffee 	bl	800ad84 <tcp_output>
 8006da8:	e00d      	b.n	8006dc6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db2:	d108      	bne.n	8006dc6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	8b5b      	ldrh	r3, [r3, #26]
 8006db8:	f043 0308 	orr.w	r3, r3, #8
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	e001      	b.n	8006dca <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	08010874 	.word	0x08010874
 8006dd8:	08010924 	.word	0x08010924
 8006ddc:	080108b8 	.word	0x080108b8

08006de0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d109      	bne.n	8006e02 <tcp_close+0x22>
 8006dee:	4b0f      	ldr	r3, [pc, #60]	@ (8006e2c <tcp_close+0x4c>)
 8006df0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8006df4:	490e      	ldr	r1, [pc, #56]	@ (8006e30 <tcp_close+0x50>)
 8006df6:	480f      	ldr	r0, [pc, #60]	@ (8006e34 <tcp_close+0x54>)
 8006df8:	f008 f8b2 	bl	800ef60 <iprintf>
 8006dfc:	f06f 030f 	mvn.w	r3, #15
 8006e00:	e00f      	b.n	8006e22 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	7d1b      	ldrb	r3, [r3, #20]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d006      	beq.n	8006e18 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	8b5b      	ldrh	r3, [r3, #26]
 8006e0e:	f043 0310 	orr.w	r3, r3, #16
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006e18:	2101      	movs	r1, #1
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7ff fe94 	bl	8006b48 <tcp_close_shutdown>
 8006e20:	4603      	mov	r3, r0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	08010874 	.word	0x08010874
 8006e30:	08010984 	.word	0x08010984
 8006e34:	080108b8 	.word	0x080108b8

08006e38 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b08e      	sub	sp, #56	@ 0x38
 8006e3c:	af04      	add	r7, sp, #16
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d107      	bne.n	8006e58 <tcp_abandon+0x20>
 8006e48:	4b52      	ldr	r3, [pc, #328]	@ (8006f94 <tcp_abandon+0x15c>)
 8006e4a:	f240 223d 	movw	r2, #573	@ 0x23d
 8006e4e:	4952      	ldr	r1, [pc, #328]	@ (8006f98 <tcp_abandon+0x160>)
 8006e50:	4852      	ldr	r0, [pc, #328]	@ (8006f9c <tcp_abandon+0x164>)
 8006e52:	f008 f885 	bl	800ef60 <iprintf>
 8006e56:	e099      	b.n	8006f8c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	7d1b      	ldrb	r3, [r3, #20]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d106      	bne.n	8006e6e <tcp_abandon+0x36>
 8006e60:	4b4c      	ldr	r3, [pc, #304]	@ (8006f94 <tcp_abandon+0x15c>)
 8006e62:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8006e66:	494e      	ldr	r1, [pc, #312]	@ (8006fa0 <tcp_abandon+0x168>)
 8006e68:	484c      	ldr	r0, [pc, #304]	@ (8006f9c <tcp_abandon+0x164>)
 8006e6a:	f008 f879 	bl	800ef60 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	7d1b      	ldrb	r3, [r3, #20]
 8006e72:	2b0a      	cmp	r3, #10
 8006e74:	d107      	bne.n	8006e86 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006e76:	6879      	ldr	r1, [r7, #4]
 8006e78:	484a      	ldr	r0, [pc, #296]	@ (8006fa4 <tcp_abandon+0x16c>)
 8006e7a:	f000 ffc5 	bl	8007e08 <tcp_pcb_remove>
    tcp_free(pcb);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7ff fdb0 	bl	80069e4 <tcp_free>
 8006e84:	e082      	b.n	8006f8c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006e86:	2300      	movs	r3, #0
 8006e88:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e92:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e98:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ea0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	7d1b      	ldrb	r3, [r3, #20]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d126      	bne.n	8006efe <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	8adb      	ldrh	r3, [r3, #22]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d02e      	beq.n	8006f16 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006eb8:	4b3b      	ldr	r3, [pc, #236]	@ (8006fa8 <tcp_abandon+0x170>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d105      	bne.n	8006ece <tcp_abandon+0x96>
 8006ec2:	4b39      	ldr	r3, [pc, #228]	@ (8006fa8 <tcp_abandon+0x170>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	4a37      	ldr	r2, [pc, #220]	@ (8006fa8 <tcp_abandon+0x170>)
 8006eca:	6013      	str	r3, [r2, #0]
 8006ecc:	e013      	b.n	8006ef6 <tcp_abandon+0xbe>
 8006ece:	4b36      	ldr	r3, [pc, #216]	@ (8006fa8 <tcp_abandon+0x170>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	61fb      	str	r3, [r7, #28]
 8006ed4:	e00c      	b.n	8006ef0 <tcp_abandon+0xb8>
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d104      	bne.n	8006eea <tcp_abandon+0xb2>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	68da      	ldr	r2, [r3, #12]
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	60da      	str	r2, [r3, #12]
 8006ee8:	e005      	b.n	8006ef6 <tcp_abandon+0xbe>
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	61fb      	str	r3, [r7, #28]
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1ef      	bne.n	8006ed6 <tcp_abandon+0x9e>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	60da      	str	r2, [r3, #12]
 8006efc:	e00b      	b.n	8006f16 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	8adb      	ldrh	r3, [r3, #22]
 8006f06:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006f08:	6879      	ldr	r1, [r7, #4]
 8006f0a:	4828      	ldr	r0, [pc, #160]	@ (8006fac <tcp_abandon+0x174>)
 8006f0c:	f000 ff7c 	bl	8007e08 <tcp_pcb_remove>
 8006f10:	4b27      	ldr	r3, [pc, #156]	@ (8006fb0 <tcp_abandon+0x178>)
 8006f12:	2201      	movs	r2, #1
 8006f14:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d004      	beq.n	8006f28 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 fd1e 	bl	8007964 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d004      	beq.n	8006f3a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f34:	4618      	mov	r0, r3
 8006f36:	f000 fd15 	bl	8007964 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d004      	beq.n	8006f4c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 fd0c 	bl	8007964 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00e      	beq.n	8006f70 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006f52:	6879      	ldr	r1, [r7, #4]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	3304      	adds	r3, #4
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	8b12      	ldrh	r2, [r2, #24]
 8006f5c:	9202      	str	r2, [sp, #8]
 8006f5e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006f60:	9201      	str	r2, [sp, #4]
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	460b      	mov	r3, r1
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	69b9      	ldr	r1, [r7, #24]
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f004 fcbe 	bl	800b8ec <tcp_rst>
    }
    last_state = pcb->state;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	7d1b      	ldrb	r3, [r3, #20]
 8006f74:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f7ff fd34 	bl	80069e4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d004      	beq.n	8006f8c <tcp_abandon+0x154>
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	f06f 010c 	mvn.w	r1, #12
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	4798      	blx	r3
  }
}
 8006f8c:	3728      	adds	r7, #40	@ 0x28
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	08010874 	.word	0x08010874
 8006f98:	080109b8 	.word	0x080109b8
 8006f9c:	080108b8 	.word	0x080108b8
 8006fa0:	080109d4 	.word	0x080109d4
 8006fa4:	200082a8 	.word	0x200082a8
 8006fa8:	2000829c 	.word	0x2000829c
 8006fac:	200082a4 	.word	0x200082a4
 8006fb0:	200082ac 	.word	0x200082ac

08006fb4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006fbc:	2101      	movs	r1, #1
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f7ff ff3a 	bl	8006e38 <tcp_abandon>
}
 8006fc4:	bf00      	nop
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d106      	bne.n	8006fe8 <tcp_update_rcv_ann_wnd+0x1c>
 8006fda:	4b25      	ldr	r3, [pc, #148]	@ (8007070 <tcp_update_rcv_ann_wnd+0xa4>)
 8006fdc:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8006fe0:	4924      	ldr	r1, [pc, #144]	@ (8007074 <tcp_update_rcv_ann_wnd+0xa8>)
 8006fe2:	4825      	ldr	r0, [pc, #148]	@ (8007078 <tcp_update_rcv_ann_wnd+0xac>)
 8006fe4:	f007 ffbc 	bl	800ef60 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006ff0:	4413      	add	r3, r2
 8006ff2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8006ffc:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8007000:	bf28      	it	cs
 8007002:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8007006:	b292      	uxth	r2, r2
 8007008:	4413      	add	r3, r2
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	db08      	blt.n	8007024 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	e020      	b.n	8007066 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	dd03      	ble.n	800703a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007038:	e014      	b.n	8007064 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800704c:	d306      	bcc.n	800705c <tcp_update_rcv_ann_wnd+0x90>
 800704e:	4b08      	ldr	r3, [pc, #32]	@ (8007070 <tcp_update_rcv_ann_wnd+0xa4>)
 8007050:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8007054:	4909      	ldr	r1, [pc, #36]	@ (800707c <tcp_update_rcv_ann_wnd+0xb0>)
 8007056:	4808      	ldr	r0, [pc, #32]	@ (8007078 <tcp_update_rcv_ann_wnd+0xac>)
 8007058:	f007 ff82 	bl	800ef60 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	b29a      	uxth	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8007064:	2300      	movs	r3, #0
  }
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	08010874 	.word	0x08010874
 8007074:	08010ad0 	.word	0x08010ad0
 8007078:	080108b8 	.word	0x080108b8
 800707c:	08010af4 	.word	0x08010af4

08007080 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	460b      	mov	r3, r1
 800708a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d107      	bne.n	80070a2 <tcp_recved+0x22>
 8007092:	4b1f      	ldr	r3, [pc, #124]	@ (8007110 <tcp_recved+0x90>)
 8007094:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8007098:	491e      	ldr	r1, [pc, #120]	@ (8007114 <tcp_recved+0x94>)
 800709a:	481f      	ldr	r0, [pc, #124]	@ (8007118 <tcp_recved+0x98>)
 800709c:	f007 ff60 	bl	800ef60 <iprintf>
 80070a0:	e032      	b.n	8007108 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	7d1b      	ldrb	r3, [r3, #20]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d106      	bne.n	80070b8 <tcp_recved+0x38>
 80070aa:	4b19      	ldr	r3, [pc, #100]	@ (8007110 <tcp_recved+0x90>)
 80070ac:	f240 32d2 	movw	r2, #978	@ 0x3d2
 80070b0:	491a      	ldr	r1, [pc, #104]	@ (800711c <tcp_recved+0x9c>)
 80070b2:	4819      	ldr	r0, [pc, #100]	@ (8007118 <tcp_recved+0x98>)
 80070b4:	f007 ff54 	bl	800ef60 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80070bc:	887b      	ldrh	r3, [r7, #2]
 80070be:	4413      	add	r3, r2
 80070c0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80070c2:	89fb      	ldrh	r3, [r7, #14]
 80070c4:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80070c8:	d804      	bhi.n	80070d4 <tcp_recved+0x54>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070ce:	89fa      	ldrh	r2, [r7, #14]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d204      	bcs.n	80070de <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80070da:	851a      	strh	r2, [r3, #40]	@ 0x28
 80070dc:	e002      	b.n	80070e4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	89fa      	ldrh	r2, [r7, #14]
 80070e2:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7ff ff71 	bl	8006fcc <tcp_update_rcv_ann_wnd>
 80070ea:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80070f2:	d309      	bcc.n	8007108 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	8b5b      	ldrh	r3, [r3, #26]
 80070f8:	f043 0302 	orr.w	r3, r3, #2
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f003 fe3e 	bl	800ad84 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	08010874 	.word	0x08010874
 8007114:	08010b10 	.word	0x08010b10
 8007118:	080108b8 	.word	0x080108b8
 800711c:	08010b28 	.word	0x08010b28

08007120 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007120:	b5b0      	push	{r4, r5, r7, lr}
 8007122:	b090      	sub	sp, #64	@ 0x40
 8007124:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007126:	2300      	movs	r3, #0
 8007128:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800712c:	4b95      	ldr	r3, [pc, #596]	@ (8007384 <tcp_slowtmr+0x264>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	3301      	adds	r3, #1
 8007132:	4a94      	ldr	r2, [pc, #592]	@ (8007384 <tcp_slowtmr+0x264>)
 8007134:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007136:	4b94      	ldr	r3, [pc, #592]	@ (8007388 <tcp_slowtmr+0x268>)
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	3301      	adds	r3, #1
 800713c:	b2da      	uxtb	r2, r3
 800713e:	4b92      	ldr	r3, [pc, #584]	@ (8007388 <tcp_slowtmr+0x268>)
 8007140:	701a      	strb	r2, [r3, #0]
 8007142:	e000      	b.n	8007146 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8007144:	bf00      	nop
  prev = NULL;
 8007146:	2300      	movs	r3, #0
 8007148:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800714a:	4b90      	ldr	r3, [pc, #576]	@ (800738c <tcp_slowtmr+0x26c>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8007150:	e29f      	b.n	8007692 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007154:	7d1b      	ldrb	r3, [r3, #20]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d106      	bne.n	8007168 <tcp_slowtmr+0x48>
 800715a:	4b8d      	ldr	r3, [pc, #564]	@ (8007390 <tcp_slowtmr+0x270>)
 800715c:	f240 42be 	movw	r2, #1214	@ 0x4be
 8007160:	498c      	ldr	r1, [pc, #560]	@ (8007394 <tcp_slowtmr+0x274>)
 8007162:	488d      	ldr	r0, [pc, #564]	@ (8007398 <tcp_slowtmr+0x278>)
 8007164:	f007 fefc 	bl	800ef60 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800716a:	7d1b      	ldrb	r3, [r3, #20]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d106      	bne.n	800717e <tcp_slowtmr+0x5e>
 8007170:	4b87      	ldr	r3, [pc, #540]	@ (8007390 <tcp_slowtmr+0x270>)
 8007172:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8007176:	4989      	ldr	r1, [pc, #548]	@ (800739c <tcp_slowtmr+0x27c>)
 8007178:	4887      	ldr	r0, [pc, #540]	@ (8007398 <tcp_slowtmr+0x278>)
 800717a:	f007 fef1 	bl	800ef60 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800717e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007180:	7d1b      	ldrb	r3, [r3, #20]
 8007182:	2b0a      	cmp	r3, #10
 8007184:	d106      	bne.n	8007194 <tcp_slowtmr+0x74>
 8007186:	4b82      	ldr	r3, [pc, #520]	@ (8007390 <tcp_slowtmr+0x270>)
 8007188:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800718c:	4984      	ldr	r1, [pc, #528]	@ (80073a0 <tcp_slowtmr+0x280>)
 800718e:	4882      	ldr	r0, [pc, #520]	@ (8007398 <tcp_slowtmr+0x278>)
 8007190:	f007 fee6 	bl	800ef60 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007196:	7f9a      	ldrb	r2, [r3, #30]
 8007198:	4b7b      	ldr	r3, [pc, #492]	@ (8007388 <tcp_slowtmr+0x268>)
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	429a      	cmp	r2, r3
 800719e:	d105      	bne.n	80071ac <tcp_slowtmr+0x8c>
      prev = pcb;
 80071a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80071a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 80071aa:	e272      	b.n	8007692 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 80071ac:	4b76      	ldr	r3, [pc, #472]	@ (8007388 <tcp_slowtmr+0x268>)
 80071ae:	781a      	ldrb	r2, [r3, #0]
 80071b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071b2:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 80071b4:	2300      	movs	r3, #0
 80071b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 80071ba:	2300      	movs	r3, #0
 80071bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80071c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071c2:	7d1b      	ldrb	r3, [r3, #20]
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d10a      	bne.n	80071de <tcp_slowtmr+0xbe>
 80071c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071ce:	2b05      	cmp	r3, #5
 80071d0:	d905      	bls.n	80071de <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80071d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80071d6:	3301      	adds	r3, #1
 80071d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80071dc:	e11e      	b.n	800741c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80071de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071e4:	2b0b      	cmp	r3, #11
 80071e6:	d905      	bls.n	80071f4 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80071e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80071ec:	3301      	adds	r3, #1
 80071ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80071f2:	e113      	b.n	800741c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80071f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071f6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d075      	beq.n	80072ea <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80071fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007202:	2b00      	cmp	r3, #0
 8007204:	d006      	beq.n	8007214 <tcp_slowtmr+0xf4>
 8007206:	4b62      	ldr	r3, [pc, #392]	@ (8007390 <tcp_slowtmr+0x270>)
 8007208:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800720c:	4965      	ldr	r1, [pc, #404]	@ (80073a4 <tcp_slowtmr+0x284>)
 800720e:	4862      	ldr	r0, [pc, #392]	@ (8007398 <tcp_slowtmr+0x278>)
 8007210:	f007 fea6 	bl	800ef60 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007216:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007218:	2b00      	cmp	r3, #0
 800721a:	d106      	bne.n	800722a <tcp_slowtmr+0x10a>
 800721c:	4b5c      	ldr	r3, [pc, #368]	@ (8007390 <tcp_slowtmr+0x270>)
 800721e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8007222:	4961      	ldr	r1, [pc, #388]	@ (80073a8 <tcp_slowtmr+0x288>)
 8007224:	485c      	ldr	r0, [pc, #368]	@ (8007398 <tcp_slowtmr+0x278>)
 8007226:	f007 fe9b 	bl	800ef60 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800722a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800722c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8007230:	2b0b      	cmp	r3, #11
 8007232:	d905      	bls.n	8007240 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8007234:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007238:	3301      	adds	r3, #1
 800723a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800723e:	e0ed      	b.n	800741c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007242:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007246:	3b01      	subs	r3, #1
 8007248:	4a58      	ldr	r2, [pc, #352]	@ (80073ac <tcp_slowtmr+0x28c>)
 800724a:	5cd3      	ldrb	r3, [r2, r3]
 800724c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800724e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007250:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007254:	7c7a      	ldrb	r2, [r7, #17]
 8007256:	429a      	cmp	r2, r3
 8007258:	d907      	bls.n	800726a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800725a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800725c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007260:	3301      	adds	r3, #1
 8007262:	b2da      	uxtb	r2, r3
 8007264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007266:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800726a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800726c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007270:	7c7a      	ldrb	r2, [r7, #17]
 8007272:	429a      	cmp	r2, r3
 8007274:	f200 80d2 	bhi.w	800741c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8007278:	2301      	movs	r3, #1
 800727a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800727c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800727e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007282:	2b00      	cmp	r3, #0
 8007284:	d108      	bne.n	8007298 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007286:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007288:	f004 fc24 	bl	800bad4 <tcp_zero_window_probe>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d014      	beq.n	80072bc <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8007292:	2300      	movs	r3, #0
 8007294:	623b      	str	r3, [r7, #32]
 8007296:	e011      	b.n	80072bc <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800729a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800729e:	4619      	mov	r1, r3
 80072a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80072a2:	f003 fae9 	bl	800a878 <tcp_split_unsent_seg>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d107      	bne.n	80072bc <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 80072ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80072ae:	f003 fd69 	bl	800ad84 <tcp_output>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d101      	bne.n	80072bc <tcp_slowtmr+0x19c>
                  next_slot = 0;
 80072b8:	2300      	movs	r3, #0
 80072ba:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 80072bc:	6a3b      	ldr	r3, [r7, #32]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f000 80ac 	beq.w	800741c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 80072c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80072cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ce:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80072d2:	2b06      	cmp	r3, #6
 80072d4:	f200 80a2 	bhi.w	800741c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80072d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072da:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80072de:	3301      	adds	r3, #1
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80072e8:	e098      	b.n	800741c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80072ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	db0f      	blt.n	8007314 <tcp_slowtmr+0x1f4>
 80072f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80072fa:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80072fe:	4293      	cmp	r3, r2
 8007300:	d008      	beq.n	8007314 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8007302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007304:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007308:	b29b      	uxth	r3, r3
 800730a:	3301      	adds	r3, #1
 800730c:	b29b      	uxth	r3, r3
 800730e:	b21a      	sxth	r2, r3
 8007310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007312:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8007314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007316:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800731a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800731c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8007320:	429a      	cmp	r2, r3
 8007322:	db7b      	blt.n	800741c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007324:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007326:	f004 f821 	bl	800b36c <tcp_rexmit_rto_prepare>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d007      	beq.n	8007340 <tcp_slowtmr+0x220>
 8007330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007334:	2b00      	cmp	r3, #0
 8007336:	d171      	bne.n	800741c <tcp_slowtmr+0x2fc>
 8007338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800733a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800733c:	2b00      	cmp	r3, #0
 800733e:	d06d      	beq.n	800741c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8007340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007342:	7d1b      	ldrb	r3, [r3, #20]
 8007344:	2b02      	cmp	r3, #2
 8007346:	d03a      	beq.n	80073be <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800734a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800734e:	2b0c      	cmp	r3, #12
 8007350:	bf28      	it	cs
 8007352:	230c      	movcs	r3, #12
 8007354:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007358:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800735c:	10db      	asrs	r3, r3, #3
 800735e:	b21b      	sxth	r3, r3
 8007360:	461a      	mov	r2, r3
 8007362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007364:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8007368:	4413      	add	r3, r2
 800736a:	7efa      	ldrb	r2, [r7, #27]
 800736c:	4910      	ldr	r1, [pc, #64]	@ (80073b0 <tcp_slowtmr+0x290>)
 800736e:	5c8a      	ldrb	r2, [r1, r2]
 8007370:	4093      	lsls	r3, r2
 8007372:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800737a:	4293      	cmp	r3, r2
 800737c:	dc1a      	bgt.n	80073b4 <tcp_slowtmr+0x294>
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	b21a      	sxth	r2, r3
 8007382:	e019      	b.n	80073b8 <tcp_slowtmr+0x298>
 8007384:	20008298 	.word	0x20008298
 8007388:	200082ae 	.word	0x200082ae
 800738c:	200082a4 	.word	0x200082a4
 8007390:	08010874 	.word	0x08010874
 8007394:	08010bb8 	.word	0x08010bb8
 8007398:	080108b8 	.word	0x080108b8
 800739c:	08010be4 	.word	0x08010be4
 80073a0:	08010c10 	.word	0x08010c10
 80073a4:	08010c40 	.word	0x08010c40
 80073a8:	08010c74 	.word	0x08010c74
 80073ac:	0801284c 	.word	0x0801284c
 80073b0:	0801283c 	.word	0x0801283c
 80073b4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80073b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 80073be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c0:	2200      	movs	r2, #0
 80073c2:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80073c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80073ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80073d0:	4293      	cmp	r3, r2
 80073d2:	bf28      	it	cs
 80073d4:	4613      	movcs	r3, r2
 80073d6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80073d8:	8a7b      	ldrh	r3, [r7, #18]
 80073da:	085b      	lsrs	r3, r3, #1
 80073dc:	b29a      	uxth	r2, r3
 80073de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80073e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80073ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80073ee:	005b      	lsls	r3, r3, #1
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d206      	bcs.n	8007404 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80073f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80073fa:	005b      	lsls	r3, r3, #1
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007400:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8007404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007406:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8007408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800740a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800740e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007410:	2200      	movs	r2, #0
 8007412:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8007416:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007418:	f004 f818 	bl	800b44c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800741c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800741e:	7d1b      	ldrb	r3, [r3, #20]
 8007420:	2b06      	cmp	r3, #6
 8007422:	d111      	bne.n	8007448 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8007424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007426:	8b5b      	ldrh	r3, [r3, #26]
 8007428:	f003 0310 	and.w	r3, r3, #16
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00b      	beq.n	8007448 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007430:	4b9d      	ldr	r3, [pc, #628]	@ (80076a8 <tcp_slowtmr+0x588>)
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007436:	6a1b      	ldr	r3, [r3, #32]
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	2b28      	cmp	r3, #40	@ 0x28
 800743c:	d904      	bls.n	8007448 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800743e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007442:	3301      	adds	r3, #1
 8007444:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800744a:	7a5b      	ldrb	r3, [r3, #9]
 800744c:	f003 0308 	and.w	r3, r3, #8
 8007450:	2b00      	cmp	r3, #0
 8007452:	d04c      	beq.n	80074ee <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8007454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007456:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007458:	2b04      	cmp	r3, #4
 800745a:	d003      	beq.n	8007464 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800745c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800745e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007460:	2b07      	cmp	r3, #7
 8007462:	d144      	bne.n	80074ee <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007464:	4b90      	ldr	r3, [pc, #576]	@ (80076a8 <tcp_slowtmr+0x588>)
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800746a:	6a1b      	ldr	r3, [r3, #32]
 800746c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800746e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007470:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007474:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8007478:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800747c:	498b      	ldr	r1, [pc, #556]	@ (80076ac <tcp_slowtmr+0x58c>)
 800747e:	fba1 1303 	umull	r1, r3, r1, r3
 8007482:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007484:	429a      	cmp	r2, r3
 8007486:	d90a      	bls.n	800749e <tcp_slowtmr+0x37e>
        ++pcb_remove;
 8007488:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800748c:	3301      	adds	r3, #1
 800748e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8007492:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007496:	3301      	adds	r3, #1
 8007498:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800749c:	e027      	b.n	80074ee <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800749e:	4b82      	ldr	r3, [pc, #520]	@ (80076a8 <tcp_slowtmr+0x588>)
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80074a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074aa:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80074ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074b0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80074b4:	4618      	mov	r0, r3
 80074b6:	4b7e      	ldr	r3, [pc, #504]	@ (80076b0 <tcp_slowtmr+0x590>)
 80074b8:	fb00 f303 	mul.w	r3, r0, r3
 80074bc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80074be:	497b      	ldr	r1, [pc, #492]	@ (80076ac <tcp_slowtmr+0x58c>)
 80074c0:	fba1 1303 	umull	r1, r3, r1, r3
 80074c4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d911      	bls.n	80074ee <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 80074ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80074cc:	f004 fac2 	bl	800ba54 <tcp_keepalive>
 80074d0:	4603      	mov	r3, r0
 80074d2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 80074d6:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d107      	bne.n	80074ee <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 80074de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074e0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80074e4:	3301      	adds	r3, #1
 80074e6:	b2da      	uxtb	r2, r3
 80074e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ea:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80074ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d011      	beq.n	800751a <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80074f6:	4b6c      	ldr	r3, [pc, #432]	@ (80076a8 <tcp_slowtmr+0x588>)
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	1ad2      	subs	r2, r2, r3
 8007500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007502:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8007506:	4619      	mov	r1, r3
 8007508:	460b      	mov	r3, r1
 800750a:	005b      	lsls	r3, r3, #1
 800750c:	440b      	add	r3, r1
 800750e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007510:	429a      	cmp	r2, r3
 8007512:	d302      	bcc.n	800751a <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8007514:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007516:	f000 fddb 	bl	80080d0 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800751a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800751c:	7d1b      	ldrb	r3, [r3, #20]
 800751e:	2b03      	cmp	r3, #3
 8007520:	d10b      	bne.n	800753a <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007522:	4b61      	ldr	r3, [pc, #388]	@ (80076a8 <tcp_slowtmr+0x588>)
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	2b28      	cmp	r3, #40	@ 0x28
 800752e:	d904      	bls.n	800753a <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8007530:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007534:	3301      	adds	r3, #1
 8007536:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800753a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800753c:	7d1b      	ldrb	r3, [r3, #20]
 800753e:	2b09      	cmp	r3, #9
 8007540:	d10b      	bne.n	800755a <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007542:	4b59      	ldr	r3, [pc, #356]	@ (80076a8 <tcp_slowtmr+0x588>)
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	2bf0      	cmp	r3, #240	@ 0xf0
 800754e:	d904      	bls.n	800755a <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8007550:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007554:	3301      	adds	r3, #1
 8007556:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800755a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800755e:	2b00      	cmp	r3, #0
 8007560:	d060      	beq.n	8007624 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8007562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007568:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800756a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800756c:	f000 fbfc 	bl	8007d68 <tcp_pcb_purge>
      if (prev != NULL) {
 8007570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007572:	2b00      	cmp	r3, #0
 8007574:	d010      	beq.n	8007598 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007576:	4b4f      	ldr	r3, [pc, #316]	@ (80076b4 <tcp_slowtmr+0x594>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800757c:	429a      	cmp	r2, r3
 800757e:	d106      	bne.n	800758e <tcp_slowtmr+0x46e>
 8007580:	4b4d      	ldr	r3, [pc, #308]	@ (80076b8 <tcp_slowtmr+0x598>)
 8007582:	f240 526d 	movw	r2, #1389	@ 0x56d
 8007586:	494d      	ldr	r1, [pc, #308]	@ (80076bc <tcp_slowtmr+0x59c>)
 8007588:	484d      	ldr	r0, [pc, #308]	@ (80076c0 <tcp_slowtmr+0x5a0>)
 800758a:	f007 fce9 	bl	800ef60 <iprintf>
        prev->next = pcb->next;
 800758e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007590:	68da      	ldr	r2, [r3, #12]
 8007592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007594:	60da      	str	r2, [r3, #12]
 8007596:	e00f      	b.n	80075b8 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007598:	4b46      	ldr	r3, [pc, #280]	@ (80076b4 <tcp_slowtmr+0x594>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800759e:	429a      	cmp	r2, r3
 80075a0:	d006      	beq.n	80075b0 <tcp_slowtmr+0x490>
 80075a2:	4b45      	ldr	r3, [pc, #276]	@ (80076b8 <tcp_slowtmr+0x598>)
 80075a4:	f240 5271 	movw	r2, #1393	@ 0x571
 80075a8:	4946      	ldr	r1, [pc, #280]	@ (80076c4 <tcp_slowtmr+0x5a4>)
 80075aa:	4845      	ldr	r0, [pc, #276]	@ (80076c0 <tcp_slowtmr+0x5a0>)
 80075ac:	f007 fcd8 	bl	800ef60 <iprintf>
        tcp_active_pcbs = pcb->next;
 80075b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	4a3f      	ldr	r2, [pc, #252]	@ (80076b4 <tcp_slowtmr+0x594>)
 80075b6:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 80075b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d013      	beq.n	80075e8 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80075c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c2:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80075c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80075c8:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80075ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075cc:	3304      	adds	r3, #4
 80075ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075d0:	8ad2      	ldrh	r2, [r2, #22]
 80075d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075d4:	8b09      	ldrh	r1, [r1, #24]
 80075d6:	9102      	str	r1, [sp, #8]
 80075d8:	9201      	str	r2, [sp, #4]
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	462b      	mov	r3, r5
 80075de:	4622      	mov	r2, r4
 80075e0:	4601      	mov	r1, r0
 80075e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80075e4:	f004 f982 	bl	800b8ec <tcp_rst>
      err_arg = pcb->callback_arg;
 80075e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80075ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f0:	7d1b      	ldrb	r3, [r3, #20]
 80075f2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80075f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80075f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80075fe:	6838      	ldr	r0, [r7, #0]
 8007600:	f7ff f9f0 	bl	80069e4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8007604:	4b30      	ldr	r3, [pc, #192]	@ (80076c8 <tcp_slowtmr+0x5a8>)
 8007606:	2200      	movs	r2, #0
 8007608:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d004      	beq.n	800761a <tcp_slowtmr+0x4fa>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f06f 010c 	mvn.w	r1, #12
 8007616:	68b8      	ldr	r0, [r7, #8]
 8007618:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800761a:	4b2b      	ldr	r3, [pc, #172]	@ (80076c8 <tcp_slowtmr+0x5a8>)
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d037      	beq.n	8007692 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 8007622:	e590      	b.n	8007146 <tcp_slowtmr+0x26>
      prev = pcb;
 8007624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007626:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8007628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800762e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007630:	7f1b      	ldrb	r3, [r3, #28]
 8007632:	3301      	adds	r3, #1
 8007634:	b2da      	uxtb	r2, r3
 8007636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007638:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800763a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800763c:	7f1a      	ldrb	r2, [r3, #28]
 800763e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007640:	7f5b      	ldrb	r3, [r3, #29]
 8007642:	429a      	cmp	r2, r3
 8007644:	d325      	bcc.n	8007692 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 8007646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007648:	2200      	movs	r2, #0
 800764a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800764c:	4b1e      	ldr	r3, [pc, #120]	@ (80076c8 <tcp_slowtmr+0x5a8>)
 800764e:	2200      	movs	r2, #0
 8007650:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007654:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00b      	beq.n	8007674 <tcp_slowtmr+0x554>
 800765c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800765e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007662:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007664:	6912      	ldr	r2, [r2, #16]
 8007666:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007668:	4610      	mov	r0, r2
 800766a:	4798      	blx	r3
 800766c:	4603      	mov	r3, r0
 800766e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8007672:	e002      	b.n	800767a <tcp_slowtmr+0x55a>
 8007674:	2300      	movs	r3, #0
 8007676:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800767a:	4b13      	ldr	r3, [pc, #76]	@ (80076c8 <tcp_slowtmr+0x5a8>)
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	f47f ad60 	bne.w	8007144 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007684:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8007688:	2b00      	cmp	r3, #0
 800768a:	d102      	bne.n	8007692 <tcp_slowtmr+0x572>
          tcp_output(prev);
 800768c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800768e:	f003 fb79 	bl	800ad84 <tcp_output>
  while (pcb != NULL) {
 8007692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007694:	2b00      	cmp	r3, #0
 8007696:	f47f ad5c 	bne.w	8007152 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800769a:	2300      	movs	r3, #0
 800769c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800769e:	4b0b      	ldr	r3, [pc, #44]	@ (80076cc <tcp_slowtmr+0x5ac>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80076a4:	e067      	b.n	8007776 <tcp_slowtmr+0x656>
 80076a6:	bf00      	nop
 80076a8:	20008298 	.word	0x20008298
 80076ac:	10624dd3 	.word	0x10624dd3
 80076b0:	000124f8 	.word	0x000124f8
 80076b4:	200082a4 	.word	0x200082a4
 80076b8:	08010874 	.word	0x08010874
 80076bc:	08010cac 	.word	0x08010cac
 80076c0:	080108b8 	.word	0x080108b8
 80076c4:	08010cd8 	.word	0x08010cd8
 80076c8:	200082ac 	.word	0x200082ac
 80076cc:	200082a8 	.word	0x200082a8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80076d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076d2:	7d1b      	ldrb	r3, [r3, #20]
 80076d4:	2b0a      	cmp	r3, #10
 80076d6:	d006      	beq.n	80076e6 <tcp_slowtmr+0x5c6>
 80076d8:	4b2b      	ldr	r3, [pc, #172]	@ (8007788 <tcp_slowtmr+0x668>)
 80076da:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80076de:	492b      	ldr	r1, [pc, #172]	@ (800778c <tcp_slowtmr+0x66c>)
 80076e0:	482b      	ldr	r0, [pc, #172]	@ (8007790 <tcp_slowtmr+0x670>)
 80076e2:	f007 fc3d 	bl	800ef60 <iprintf>
    pcb_remove = 0;
 80076e6:	2300      	movs	r3, #0
 80076e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80076ec:	4b29      	ldr	r3, [pc, #164]	@ (8007794 <tcp_slowtmr+0x674>)
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076f2:	6a1b      	ldr	r3, [r3, #32]
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	2bf0      	cmp	r3, #240	@ 0xf0
 80076f8:	d904      	bls.n	8007704 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 80076fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80076fe:	3301      	adds	r3, #1
 8007700:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007704:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007708:	2b00      	cmp	r3, #0
 800770a:	d02f      	beq.n	800776c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800770c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800770e:	f000 fb2b 	bl	8007d68 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007714:	2b00      	cmp	r3, #0
 8007716:	d010      	beq.n	800773a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007718:	4b1f      	ldr	r3, [pc, #124]	@ (8007798 <tcp_slowtmr+0x678>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800771e:	429a      	cmp	r2, r3
 8007720:	d106      	bne.n	8007730 <tcp_slowtmr+0x610>
 8007722:	4b19      	ldr	r3, [pc, #100]	@ (8007788 <tcp_slowtmr+0x668>)
 8007724:	f240 52af 	movw	r2, #1455	@ 0x5af
 8007728:	491c      	ldr	r1, [pc, #112]	@ (800779c <tcp_slowtmr+0x67c>)
 800772a:	4819      	ldr	r0, [pc, #100]	@ (8007790 <tcp_slowtmr+0x670>)
 800772c:	f007 fc18 	bl	800ef60 <iprintf>
        prev->next = pcb->next;
 8007730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007732:	68da      	ldr	r2, [r3, #12]
 8007734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007736:	60da      	str	r2, [r3, #12]
 8007738:	e00f      	b.n	800775a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800773a:	4b17      	ldr	r3, [pc, #92]	@ (8007798 <tcp_slowtmr+0x678>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007740:	429a      	cmp	r2, r3
 8007742:	d006      	beq.n	8007752 <tcp_slowtmr+0x632>
 8007744:	4b10      	ldr	r3, [pc, #64]	@ (8007788 <tcp_slowtmr+0x668>)
 8007746:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800774a:	4915      	ldr	r1, [pc, #84]	@ (80077a0 <tcp_slowtmr+0x680>)
 800774c:	4810      	ldr	r0, [pc, #64]	@ (8007790 <tcp_slowtmr+0x670>)
 800774e:	f007 fc07 	bl	800ef60 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	4a10      	ldr	r2, [pc, #64]	@ (8007798 <tcp_slowtmr+0x678>)
 8007758:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800775a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800775c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800775e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8007764:	69f8      	ldr	r0, [r7, #28]
 8007766:	f7ff f93d 	bl	80069e4 <tcp_free>
 800776a:	e004      	b.n	8007776 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800776c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800776e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8007770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8007776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1a9      	bne.n	80076d0 <tcp_slowtmr+0x5b0>
    }
  }
}
 800777c:	bf00      	nop
 800777e:	bf00      	nop
 8007780:	3730      	adds	r7, #48	@ 0x30
 8007782:	46bd      	mov	sp, r7
 8007784:	bdb0      	pop	{r4, r5, r7, pc}
 8007786:	bf00      	nop
 8007788:	08010874 	.word	0x08010874
 800778c:	08010d04 	.word	0x08010d04
 8007790:	080108b8 	.word	0x080108b8
 8007794:	20008298 	.word	0x20008298
 8007798:	200082a8 	.word	0x200082a8
 800779c:	08010d34 	.word	0x08010d34
 80077a0:	08010d5c 	.word	0x08010d5c

080077a4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80077aa:	4b2d      	ldr	r3, [pc, #180]	@ (8007860 <tcp_fasttmr+0xbc>)
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	3301      	adds	r3, #1
 80077b0:	b2da      	uxtb	r2, r3
 80077b2:	4b2b      	ldr	r3, [pc, #172]	@ (8007860 <tcp_fasttmr+0xbc>)
 80077b4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80077b6:	4b2b      	ldr	r3, [pc, #172]	@ (8007864 <tcp_fasttmr+0xc0>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80077bc:	e048      	b.n	8007850 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	7f9a      	ldrb	r2, [r3, #30]
 80077c2:	4b27      	ldr	r3, [pc, #156]	@ (8007860 <tcp_fasttmr+0xbc>)
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d03f      	beq.n	800784a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80077ca:	4b25      	ldr	r3, [pc, #148]	@ (8007860 <tcp_fasttmr+0xbc>)
 80077cc:	781a      	ldrb	r2, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	8b5b      	ldrh	r3, [r3, #26]
 80077d6:	f003 0301 	and.w	r3, r3, #1
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d010      	beq.n	8007800 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	8b5b      	ldrh	r3, [r3, #26]
 80077e2:	f043 0302 	orr.w	r3, r3, #2
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f003 fac9 	bl	800ad84 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	8b5b      	ldrh	r3, [r3, #26]
 80077f6:	f023 0303 	bic.w	r3, r3, #3
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	8b5b      	ldrh	r3, [r3, #26]
 8007804:	f003 0308 	and.w	r3, r3, #8
 8007808:	2b00      	cmp	r3, #0
 800780a:	d009      	beq.n	8007820 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	8b5b      	ldrh	r3, [r3, #26]
 8007810:	f023 0308 	bic.w	r3, r3, #8
 8007814:	b29a      	uxth	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f7ff fa76 	bl	8006d0c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00a      	beq.n	8007844 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800782e:	4b0e      	ldr	r3, [pc, #56]	@ (8007868 <tcp_fasttmr+0xc4>)
 8007830:	2200      	movs	r2, #0
 8007832:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 f819 	bl	800786c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800783a:	4b0b      	ldr	r3, [pc, #44]	@ (8007868 <tcp_fasttmr+0xc4>)
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d000      	beq.n	8007844 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007842:	e7b8      	b.n	80077b6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	607b      	str	r3, [r7, #4]
 8007848:	e002      	b.n	8007850 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1b3      	bne.n	80077be <tcp_fasttmr+0x1a>
    }
  }
}
 8007856:	bf00      	nop
 8007858:	bf00      	nop
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	200082ae 	.word	0x200082ae
 8007864:	200082a4 	.word	0x200082a4
 8007868:	200082ac 	.word	0x200082ac

0800786c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800786c:	b590      	push	{r4, r7, lr}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d109      	bne.n	800788e <tcp_process_refused_data+0x22>
 800787a:	4b37      	ldr	r3, [pc, #220]	@ (8007958 <tcp_process_refused_data+0xec>)
 800787c:	f240 6209 	movw	r2, #1545	@ 0x609
 8007880:	4936      	ldr	r1, [pc, #216]	@ (800795c <tcp_process_refused_data+0xf0>)
 8007882:	4837      	ldr	r0, [pc, #220]	@ (8007960 <tcp_process_refused_data+0xf4>)
 8007884:	f007 fb6c 	bl	800ef60 <iprintf>
 8007888:	f06f 030f 	mvn.w	r3, #15
 800788c:	e060      	b.n	8007950 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007892:	7b5b      	ldrb	r3, [r3, #13]
 8007894:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800789a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00b      	beq.n	80078c4 <tcp_process_refused_data+0x58>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6918      	ldr	r0, [r3, #16]
 80078b6:	2300      	movs	r3, #0
 80078b8:	68ba      	ldr	r2, [r7, #8]
 80078ba:	6879      	ldr	r1, [r7, #4]
 80078bc:	47a0      	blx	r4
 80078be:	4603      	mov	r3, r0
 80078c0:	73fb      	strb	r3, [r7, #15]
 80078c2:	e007      	b.n	80078d4 <tcp_process_refused_data+0x68>
 80078c4:	2300      	movs	r3, #0
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	6879      	ldr	r1, [r7, #4]
 80078ca:	2000      	movs	r0, #0
 80078cc:	f000 f8a4 	bl	8007a18 <tcp_recv_null>
 80078d0:	4603      	mov	r3, r0
 80078d2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80078d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d12a      	bne.n	8007932 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80078dc:	7bbb      	ldrb	r3, [r7, #14]
 80078de:	f003 0320 	and.w	r3, r3, #32
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d033      	beq.n	800794e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078ea:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80078ee:	d005      	beq.n	80078fc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078f4:	3301      	adds	r3, #1
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00b      	beq.n	800791e <tcp_process_refused_data+0xb2>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6918      	ldr	r0, [r3, #16]
 8007910:	2300      	movs	r3, #0
 8007912:	2200      	movs	r2, #0
 8007914:	6879      	ldr	r1, [r7, #4]
 8007916:	47a0      	blx	r4
 8007918:	4603      	mov	r3, r0
 800791a:	73fb      	strb	r3, [r7, #15]
 800791c:	e001      	b.n	8007922 <tcp_process_refused_data+0xb6>
 800791e:	2300      	movs	r3, #0
 8007920:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007926:	f113 0f0d 	cmn.w	r3, #13
 800792a:	d110      	bne.n	800794e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800792c:	f06f 030c 	mvn.w	r3, #12
 8007930:	e00e      	b.n	8007950 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007936:	f113 0f0d 	cmn.w	r3, #13
 800793a:	d102      	bne.n	8007942 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800793c:	f06f 030c 	mvn.w	r3, #12
 8007940:	e006      	b.n	8007950 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8007948:	f06f 0304 	mvn.w	r3, #4
 800794c:	e000      	b.n	8007950 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	3714      	adds	r7, #20
 8007954:	46bd      	mov	sp, r7
 8007956:	bd90      	pop	{r4, r7, pc}
 8007958:	08010874 	.word	0x08010874
 800795c:	08010d84 	.word	0x08010d84
 8007960:	080108b8 	.word	0x080108b8

08007964 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800796c:	e007      	b.n	800797e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 f80a 	bl	800798e <tcp_seg_free>
    seg = next;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1f4      	bne.n	800796e <tcp_segs_free+0xa>
  }
}
 8007984:	bf00      	nop
 8007986:	bf00      	nop
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b082      	sub	sp, #8
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00c      	beq.n	80079b6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d004      	beq.n	80079ae <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7fe fd6b 	bl	8006484 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80079ae:	6879      	ldr	r1, [r7, #4]
 80079b0:	2003      	movs	r0, #3
 80079b2:	f7fd fef1 	bl	8005798 <memp_free>
  }
}
 80079b6:	bf00      	nop
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
	...

080079c0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d106      	bne.n	80079dc <tcp_seg_copy+0x1c>
 80079ce:	4b0f      	ldr	r3, [pc, #60]	@ (8007a0c <tcp_seg_copy+0x4c>)
 80079d0:	f240 6282 	movw	r2, #1666	@ 0x682
 80079d4:	490e      	ldr	r1, [pc, #56]	@ (8007a10 <tcp_seg_copy+0x50>)
 80079d6:	480f      	ldr	r0, [pc, #60]	@ (8007a14 <tcp_seg_copy+0x54>)
 80079d8:	f007 fac2 	bl	800ef60 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80079dc:	2003      	movs	r0, #3
 80079de:	f7fd fe6b 	bl	80056b8 <memp_malloc>
 80079e2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <tcp_seg_copy+0x2e>
    return NULL;
 80079ea:	2300      	movs	r3, #0
 80079ec:	e00a      	b.n	8007a04 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80079ee:	2210      	movs	r2, #16
 80079f0:	6879      	ldr	r1, [r7, #4]
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f007 fb8f 	bl	800f116 <memcpy>
  pbuf_ref(cseg->p);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7fe fde1 	bl	80065c4 <pbuf_ref>
  return cseg;
 8007a02:	68fb      	ldr	r3, [r7, #12]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	08010874 	.word	0x08010874
 8007a10:	08010dc8 	.word	0x08010dc8
 8007a14:	080108b8 	.word	0x080108b8

08007a18 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]
 8007a24:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d109      	bne.n	8007a40 <tcp_recv_null+0x28>
 8007a2c:	4b12      	ldr	r3, [pc, #72]	@ (8007a78 <tcp_recv_null+0x60>)
 8007a2e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8007a32:	4912      	ldr	r1, [pc, #72]	@ (8007a7c <tcp_recv_null+0x64>)
 8007a34:	4812      	ldr	r0, [pc, #72]	@ (8007a80 <tcp_recv_null+0x68>)
 8007a36:	f007 fa93 	bl	800ef60 <iprintf>
 8007a3a:	f06f 030f 	mvn.w	r3, #15
 8007a3e:	e016      	b.n	8007a6e <tcp_recv_null+0x56>

  if (p != NULL) {
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d009      	beq.n	8007a5a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	891b      	ldrh	r3, [r3, #8]
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	68b8      	ldr	r0, [r7, #8]
 8007a4e:	f7ff fb17 	bl	8007080 <tcp_recved>
    pbuf_free(p);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f7fe fd16 	bl	8006484 <pbuf_free>
 8007a58:	e008      	b.n	8007a6c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007a5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d104      	bne.n	8007a6c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007a62:	68b8      	ldr	r0, [r7, #8]
 8007a64:	f7ff f9bc 	bl	8006de0 <tcp_close>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	e000      	b.n	8007a6e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	08010874 	.word	0x08010874
 8007a7c:	08010de4 	.word	0x08010de4
 8007a80:	080108b8 	.word	0x080108b8

08007a84 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b086      	sub	sp, #24
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	db01      	blt.n	8007a9a <tcp_kill_prio+0x16>
 8007a96:	79fb      	ldrb	r3, [r7, #7]
 8007a98:	e000      	b.n	8007a9c <tcp_kill_prio+0x18>
 8007a9a:	237f      	movs	r3, #127	@ 0x7f
 8007a9c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007a9e:	7afb      	ldrb	r3, [r7, #11]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d034      	beq.n	8007b0e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007aa4:	7afb      	ldrb	r3, [r7, #11]
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ab2:	4b19      	ldr	r3, [pc, #100]	@ (8007b18 <tcp_kill_prio+0x94>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	617b      	str	r3, [r7, #20]
 8007ab8:	e01f      	b.n	8007afa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	7d5b      	ldrb	r3, [r3, #21]
 8007abe:	7afa      	ldrb	r2, [r7, #11]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d80c      	bhi.n	8007ade <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007ac8:	7afa      	ldrb	r2, [r7, #11]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d112      	bne.n	8007af4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007ace:	4b13      	ldr	r3, [pc, #76]	@ (8007b1c <tcp_kill_prio+0x98>)
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d80a      	bhi.n	8007af4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007ade:	4b0f      	ldr	r3, [pc, #60]	@ (8007b1c <tcp_kill_prio+0x98>)
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	6a1b      	ldr	r3, [r3, #32]
 8007ae6:	1ad3      	subs	r3, r2, r3
 8007ae8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	7d5b      	ldrb	r3, [r3, #21]
 8007af2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	617b      	str	r3, [r7, #20]
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1dc      	bne.n	8007aba <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d004      	beq.n	8007b10 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007b06:	6938      	ldr	r0, [r7, #16]
 8007b08:	f7ff fa54 	bl	8006fb4 <tcp_abort>
 8007b0c:	e000      	b.n	8007b10 <tcp_kill_prio+0x8c>
    return;
 8007b0e:	bf00      	nop
  }
}
 8007b10:	3718      	adds	r7, #24
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	200082a4 	.word	0x200082a4
 8007b1c:	20008298 	.word	0x20008298

08007b20 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	4603      	mov	r3, r0
 8007b28:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007b2a:	79fb      	ldrb	r3, [r7, #7]
 8007b2c:	2b08      	cmp	r3, #8
 8007b2e:	d009      	beq.n	8007b44 <tcp_kill_state+0x24>
 8007b30:	79fb      	ldrb	r3, [r7, #7]
 8007b32:	2b09      	cmp	r3, #9
 8007b34:	d006      	beq.n	8007b44 <tcp_kill_state+0x24>
 8007b36:	4b1a      	ldr	r3, [pc, #104]	@ (8007ba0 <tcp_kill_state+0x80>)
 8007b38:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8007b3c:	4919      	ldr	r1, [pc, #100]	@ (8007ba4 <tcp_kill_state+0x84>)
 8007b3e:	481a      	ldr	r0, [pc, #104]	@ (8007ba8 <tcp_kill_state+0x88>)
 8007b40:	f007 fa0e 	bl	800ef60 <iprintf>

  inactivity = 0;
 8007b44:	2300      	movs	r3, #0
 8007b46:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b4c:	4b17      	ldr	r3, [pc, #92]	@ (8007bac <tcp_kill_state+0x8c>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	617b      	str	r3, [r7, #20]
 8007b52:	e017      	b.n	8007b84 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	7d1b      	ldrb	r3, [r3, #20]
 8007b58:	79fa      	ldrb	r2, [r7, #7]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d10f      	bne.n	8007b7e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007b5e:	4b14      	ldr	r3, [pc, #80]	@ (8007bb0 <tcp_kill_state+0x90>)
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d807      	bhi.n	8007b7e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007b6e:	4b10      	ldr	r3, [pc, #64]	@ (8007bb0 <tcp_kill_state+0x90>)
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	6a1b      	ldr	r3, [r3, #32]
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	617b      	str	r3, [r7, #20]
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1e4      	bne.n	8007b54 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d003      	beq.n	8007b98 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007b90:	2100      	movs	r1, #0
 8007b92:	6938      	ldr	r0, [r7, #16]
 8007b94:	f7ff f950 	bl	8006e38 <tcp_abandon>
  }
}
 8007b98:	bf00      	nop
 8007b9a:	3718      	adds	r7, #24
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	08010874 	.word	0x08010874
 8007ba4:	08010e00 	.word	0x08010e00
 8007ba8:	080108b8 	.word	0x080108b8
 8007bac:	200082a4 	.word	0x200082a4
 8007bb0:	20008298 	.word	0x20008298

08007bb4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007bc2:	4b12      	ldr	r3, [pc, #72]	@ (8007c0c <tcp_kill_timewait+0x58>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	60fb      	str	r3, [r7, #12]
 8007bc8:	e012      	b.n	8007bf0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007bca:	4b11      	ldr	r3, [pc, #68]	@ (8007c10 <tcp_kill_timewait+0x5c>)
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d807      	bhi.n	8007bea <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007bda:	4b0d      	ldr	r3, [pc, #52]	@ (8007c10 <tcp_kill_timewait+0x5c>)
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	1ad3      	subs	r3, r2, r3
 8007be4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	60fb      	str	r3, [r7, #12]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1e9      	bne.n	8007bca <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d002      	beq.n	8007c02 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007bfc:	68b8      	ldr	r0, [r7, #8]
 8007bfe:	f7ff f9d9 	bl	8006fb4 <tcp_abort>
  }
}
 8007c02:	bf00      	nop
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	200082a8 	.word	0x200082a8
 8007c10:	20008298 	.word	0x20008298

08007c14 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007c1a:	4b10      	ldr	r3, [pc, #64]	@ (8007c5c <tcp_handle_closepend+0x48>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007c20:	e014      	b.n	8007c4c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	8b5b      	ldrh	r3, [r3, #26]
 8007c2c:	f003 0308 	and.w	r3, r3, #8
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d009      	beq.n	8007c48 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	8b5b      	ldrh	r3, [r3, #26]
 8007c38:	f023 0308 	bic.w	r3, r3, #8
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7ff f862 	bl	8006d0c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1e7      	bne.n	8007c22 <tcp_handle_closepend+0xe>
  }
}
 8007c52:	bf00      	nop
 8007c54:	bf00      	nop
 8007c56:	3708      	adds	r7, #8
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	200082a4 	.word	0x200082a4

08007c60 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	4603      	mov	r3, r0
 8007c68:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007c6a:	2001      	movs	r0, #1
 8007c6c:	f7fd fd24 	bl	80056b8 <memp_malloc>
 8007c70:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d126      	bne.n	8007cc6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007c78:	f7ff ffcc 	bl	8007c14 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007c7c:	f7ff ff9a 	bl	8007bb4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007c80:	2001      	movs	r0, #1
 8007c82:	f7fd fd19 	bl	80056b8 <memp_malloc>
 8007c86:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d11b      	bne.n	8007cc6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007c8e:	2009      	movs	r0, #9
 8007c90:	f7ff ff46 	bl	8007b20 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007c94:	2001      	movs	r0, #1
 8007c96:	f7fd fd0f 	bl	80056b8 <memp_malloc>
 8007c9a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d111      	bne.n	8007cc6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007ca2:	2008      	movs	r0, #8
 8007ca4:	f7ff ff3c 	bl	8007b20 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007ca8:	2001      	movs	r0, #1
 8007caa:	f7fd fd05 	bl	80056b8 <memp_malloc>
 8007cae:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d107      	bne.n	8007cc6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007cb6:	79fb      	ldrb	r3, [r7, #7]
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7ff fee3 	bl	8007a84 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007cbe:	2001      	movs	r0, #1
 8007cc0:	f7fd fcfa 	bl	80056b8 <memp_malloc>
 8007cc4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d03f      	beq.n	8007d4c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007ccc:	229c      	movs	r2, #156	@ 0x9c
 8007cce:	2100      	movs	r1, #0
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f007 f9aa 	bl	800f02a <memset>
    pcb->prio = prio;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	79fa      	ldrb	r2, [r7, #7]
 8007cda:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8007ce2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8007cec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	22ff      	movs	r2, #255	@ 0xff
 8007cfa:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8007d02:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2206      	movs	r2, #6
 8007d08:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2206      	movs	r2, #6
 8007d10:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d18:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8007d22:	4b0d      	ldr	r3, [pc, #52]	@ (8007d58 <tcp_alloc+0xf8>)
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8007d5c <tcp_alloc+0xfc>)
 8007d2c:	781a      	ldrb	r2, [r3, #0]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8007d38:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	4a08      	ldr	r2, [pc, #32]	@ (8007d60 <tcp_alloc+0x100>)
 8007d40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	4a07      	ldr	r2, [pc, #28]	@ (8007d64 <tcp_alloc+0x104>)
 8007d48:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	20008298 	.word	0x20008298
 8007d5c:	200082ae 	.word	0x200082ae
 8007d60:	08007a19 	.word	0x08007a19
 8007d64:	006ddd00 	.word	0x006ddd00

08007d68 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d107      	bne.n	8007d86 <tcp_pcb_purge+0x1e>
 8007d76:	4b21      	ldr	r3, [pc, #132]	@ (8007dfc <tcp_pcb_purge+0x94>)
 8007d78:	f640 0251 	movw	r2, #2129	@ 0x851
 8007d7c:	4920      	ldr	r1, [pc, #128]	@ (8007e00 <tcp_pcb_purge+0x98>)
 8007d7e:	4821      	ldr	r0, [pc, #132]	@ (8007e04 <tcp_pcb_purge+0x9c>)
 8007d80:	f007 f8ee 	bl	800ef60 <iprintf>
 8007d84:	e037      	b.n	8007df6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	7d1b      	ldrb	r3, [r3, #20]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d033      	beq.n	8007df6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007d92:	2b0a      	cmp	r3, #10
 8007d94:	d02f      	beq.n	8007df6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d02b      	beq.n	8007df6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d007      	beq.n	8007db6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fe fb6a 	bl	8006484 <pbuf_free>
      pcb->refused_data = NULL;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d002      	beq.n	8007dc4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f986 	bl	80080d0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007dca:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7ff fdc7 	bl	8007964 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7ff fdc2 	bl	8007964 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	08010874 	.word	0x08010874
 8007e00:	08010ec0 	.word	0x08010ec0
 8007e04:	080108b8 	.word	0x080108b8

08007e08 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d106      	bne.n	8007e26 <tcp_pcb_remove+0x1e>
 8007e18:	4b3e      	ldr	r3, [pc, #248]	@ (8007f14 <tcp_pcb_remove+0x10c>)
 8007e1a:	f640 0283 	movw	r2, #2179	@ 0x883
 8007e1e:	493e      	ldr	r1, [pc, #248]	@ (8007f18 <tcp_pcb_remove+0x110>)
 8007e20:	483e      	ldr	r0, [pc, #248]	@ (8007f1c <tcp_pcb_remove+0x114>)
 8007e22:	f007 f89d 	bl	800ef60 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d106      	bne.n	8007e3a <tcp_pcb_remove+0x32>
 8007e2c:	4b39      	ldr	r3, [pc, #228]	@ (8007f14 <tcp_pcb_remove+0x10c>)
 8007e2e:	f640 0284 	movw	r2, #2180	@ 0x884
 8007e32:	493b      	ldr	r1, [pc, #236]	@ (8007f20 <tcp_pcb_remove+0x118>)
 8007e34:	4839      	ldr	r0, [pc, #228]	@ (8007f1c <tcp_pcb_remove+0x114>)
 8007e36:	f007 f893 	bl	800ef60 <iprintf>

  TCP_RMV(pcblist, pcb);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	683a      	ldr	r2, [r7, #0]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d105      	bne.n	8007e50 <tcp_pcb_remove+0x48>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68da      	ldr	r2, [r3, #12]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	601a      	str	r2, [r3, #0]
 8007e4e:	e013      	b.n	8007e78 <tcp_pcb_remove+0x70>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	60fb      	str	r3, [r7, #12]
 8007e56:	e00c      	b.n	8007e72 <tcp_pcb_remove+0x6a>
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	683a      	ldr	r2, [r7, #0]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d104      	bne.n	8007e6c <tcp_pcb_remove+0x64>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	68da      	ldr	r2, [r3, #12]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	60da      	str	r2, [r3, #12]
 8007e6a:	e005      	b.n	8007e78 <tcp_pcb_remove+0x70>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	60fb      	str	r3, [r7, #12]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1ef      	bne.n	8007e58 <tcp_pcb_remove+0x50>
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007e7e:	6838      	ldr	r0, [r7, #0]
 8007e80:	f7ff ff72 	bl	8007d68 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	7d1b      	ldrb	r3, [r3, #20]
 8007e88:	2b0a      	cmp	r3, #10
 8007e8a:	d013      	beq.n	8007eb4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d00f      	beq.n	8007eb4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	8b5b      	ldrh	r3, [r3, #26]
 8007e98:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d009      	beq.n	8007eb4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	8b5b      	ldrh	r3, [r3, #26]
 8007ea4:	f043 0302 	orr.w	r3, r3, #2
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007eae:	6838      	ldr	r0, [r7, #0]
 8007eb0:	f002 ff68 	bl	800ad84 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	7d1b      	ldrb	r3, [r3, #20]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d020      	beq.n	8007efe <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d006      	beq.n	8007ed2 <tcp_pcb_remove+0xca>
 8007ec4:	4b13      	ldr	r3, [pc, #76]	@ (8007f14 <tcp_pcb_remove+0x10c>)
 8007ec6:	f640 0293 	movw	r2, #2195	@ 0x893
 8007eca:	4916      	ldr	r1, [pc, #88]	@ (8007f24 <tcp_pcb_remove+0x11c>)
 8007ecc:	4813      	ldr	r0, [pc, #76]	@ (8007f1c <tcp_pcb_remove+0x114>)
 8007ece:	f007 f847 	bl	800ef60 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d006      	beq.n	8007ee8 <tcp_pcb_remove+0xe0>
 8007eda:	4b0e      	ldr	r3, [pc, #56]	@ (8007f14 <tcp_pcb_remove+0x10c>)
 8007edc:	f640 0294 	movw	r2, #2196	@ 0x894
 8007ee0:	4911      	ldr	r1, [pc, #68]	@ (8007f28 <tcp_pcb_remove+0x120>)
 8007ee2:	480e      	ldr	r0, [pc, #56]	@ (8007f1c <tcp_pcb_remove+0x114>)
 8007ee4:	f007 f83c 	bl	800ef60 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d006      	beq.n	8007efe <tcp_pcb_remove+0xf6>
 8007ef0:	4b08      	ldr	r3, [pc, #32]	@ (8007f14 <tcp_pcb_remove+0x10c>)
 8007ef2:	f640 0296 	movw	r2, #2198	@ 0x896
 8007ef6:	490d      	ldr	r1, [pc, #52]	@ (8007f2c <tcp_pcb_remove+0x124>)
 8007ef8:	4808      	ldr	r0, [pc, #32]	@ (8007f1c <tcp_pcb_remove+0x114>)
 8007efa:	f007 f831 	bl	800ef60 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2200      	movs	r2, #0
 8007f02:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	2200      	movs	r2, #0
 8007f08:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007f0a:	bf00      	nop
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	08010874 	.word	0x08010874
 8007f18:	08010edc 	.word	0x08010edc
 8007f1c:	080108b8 	.word	0x080108b8
 8007f20:	08010ef8 	.word	0x08010ef8
 8007f24:	08010f18 	.word	0x08010f18
 8007f28:	08010f30 	.word	0x08010f30
 8007f2c:	08010f4c 	.word	0x08010f4c

08007f30 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d106      	bne.n	8007f4c <tcp_next_iss+0x1c>
 8007f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8007f68 <tcp_next_iss+0x38>)
 8007f40:	f640 02af 	movw	r2, #2223	@ 0x8af
 8007f44:	4909      	ldr	r1, [pc, #36]	@ (8007f6c <tcp_next_iss+0x3c>)
 8007f46:	480a      	ldr	r0, [pc, #40]	@ (8007f70 <tcp_next_iss+0x40>)
 8007f48:	f007 f80a 	bl	800ef60 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007f4c:	4b09      	ldr	r3, [pc, #36]	@ (8007f74 <tcp_next_iss+0x44>)
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	4b09      	ldr	r3, [pc, #36]	@ (8007f78 <tcp_next_iss+0x48>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4413      	add	r3, r2
 8007f56:	4a07      	ldr	r2, [pc, #28]	@ (8007f74 <tcp_next_iss+0x44>)
 8007f58:	6013      	str	r3, [r2, #0]
  return iss;
 8007f5a:	4b06      	ldr	r3, [pc, #24]	@ (8007f74 <tcp_next_iss+0x44>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	08010874 	.word	0x08010874
 8007f6c:	08010f64 	.word	0x08010f64
 8007f70:	080108b8 	.word	0x080108b8
 8007f74:	20000024 	.word	0x20000024
 8007f78:	20008298 	.word	0x20008298

08007f7c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	4603      	mov	r3, r0
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
 8007f88:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d106      	bne.n	8007f9e <tcp_eff_send_mss_netif+0x22>
 8007f90:	4b14      	ldr	r3, [pc, #80]	@ (8007fe4 <tcp_eff_send_mss_netif+0x68>)
 8007f92:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8007f96:	4914      	ldr	r1, [pc, #80]	@ (8007fe8 <tcp_eff_send_mss_netif+0x6c>)
 8007f98:	4814      	ldr	r0, [pc, #80]	@ (8007fec <tcp_eff_send_mss_netif+0x70>)
 8007f9a:	f006 ffe1 	bl	800ef60 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d101      	bne.n	8007fa8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007fa4:	89fb      	ldrh	r3, [r7, #14]
 8007fa6:	e019      	b.n	8007fdc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007fac:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007fae:	8afb      	ldrh	r3, [r7, #22]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d012      	beq.n	8007fda <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007fb4:	2328      	movs	r3, #40	@ 0x28
 8007fb6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007fb8:	8afa      	ldrh	r2, [r7, #22]
 8007fba:	8abb      	ldrh	r3, [r7, #20]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d904      	bls.n	8007fca <tcp_eff_send_mss_netif+0x4e>
 8007fc0:	8afa      	ldrh	r2, [r7, #22]
 8007fc2:	8abb      	ldrh	r3, [r7, #20]
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	e000      	b.n	8007fcc <tcp_eff_send_mss_netif+0x50>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007fce:	8a7a      	ldrh	r2, [r7, #18]
 8007fd0:	89fb      	ldrh	r3, [r7, #14]
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	bf28      	it	cs
 8007fd6:	4613      	movcs	r3, r2
 8007fd8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8007fda:	89fb      	ldrh	r3, [r7, #14]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3718      	adds	r7, #24
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	08010874 	.word	0x08010874
 8007fe8:	08010f80 	.word	0x08010f80
 8007fec:	080108b8 	.word	0x080108b8

08007ff0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d119      	bne.n	8008038 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008004:	4b10      	ldr	r3, [pc, #64]	@ (8008048 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8008006:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800800a:	4910      	ldr	r1, [pc, #64]	@ (800804c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800800c:	4810      	ldr	r0, [pc, #64]	@ (8008050 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800800e:	f006 ffa7 	bl	800ef60 <iprintf>

  while (pcb != NULL) {
 8008012:	e011      	b.n	8008038 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	429a      	cmp	r2, r3
 800801e:	d108      	bne.n	8008032 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f7fe ffc4 	bl	8006fb4 <tcp_abort>
      pcb = next;
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	60fb      	str	r3, [r7, #12]
 8008030:	e002      	b.n	8008038 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1ea      	bne.n	8008014 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800803e:	bf00      	nop
 8008040:	bf00      	nop
 8008042:	3710      	adds	r7, #16
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	08010874 	.word	0x08010874
 800804c:	08010fa8 	.word	0x08010fa8
 8008050:	080108b8 	.word	0x080108b8

08008054 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d02a      	beq.n	80080ba <tcp_netif_ip_addr_changed+0x66>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d026      	beq.n	80080ba <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800806c:	4b15      	ldr	r3, [pc, #84]	@ (80080c4 <tcp_netif_ip_addr_changed+0x70>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4619      	mov	r1, r3
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7ff ffbc 	bl	8007ff0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008078:	4b13      	ldr	r3, [pc, #76]	@ (80080c8 <tcp_netif_ip_addr_changed+0x74>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4619      	mov	r1, r3
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f7ff ffb6 	bl	8007ff0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d017      	beq.n	80080ba <tcp_netif_ip_addr_changed+0x66>
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d013      	beq.n	80080ba <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008092:	4b0e      	ldr	r3, [pc, #56]	@ (80080cc <tcp_netif_ip_addr_changed+0x78>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	60fb      	str	r3, [r7, #12]
 8008098:	e00c      	b.n	80080b4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d103      	bne.n	80080ae <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	60fb      	str	r3, [r7, #12]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1ef      	bne.n	800809a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80080ba:	bf00      	nop
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	200082a4 	.word	0x200082a4
 80080c8:	2000829c 	.word	0x2000829c
 80080cc:	200082a0 	.word	0x200082a0

080080d0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d007      	beq.n	80080f0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7ff fc3d 	bl	8007964 <tcp_segs_free>
    pcb->ooseq = NULL;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80080f0:	bf00      	nop
 80080f2:	3708      	adds	r7, #8
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80080f8:	b590      	push	{r4, r7, lr}
 80080fa:	b08d      	sub	sp, #52	@ 0x34
 80080fc:	af04      	add	r7, sp, #16
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d105      	bne.n	8008114 <tcp_input+0x1c>
 8008108:	4b9b      	ldr	r3, [pc, #620]	@ (8008378 <tcp_input+0x280>)
 800810a:	2283      	movs	r2, #131	@ 0x83
 800810c:	499b      	ldr	r1, [pc, #620]	@ (800837c <tcp_input+0x284>)
 800810e:	489c      	ldr	r0, [pc, #624]	@ (8008380 <tcp_input+0x288>)
 8008110:	f006 ff26 	bl	800ef60 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	4a9a      	ldr	r2, [pc, #616]	@ (8008384 <tcp_input+0x28c>)
 800811a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	895b      	ldrh	r3, [r3, #10]
 8008120:	2b13      	cmp	r3, #19
 8008122:	f240 83d1 	bls.w	80088c8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008126:	4b98      	ldr	r3, [pc, #608]	@ (8008388 <tcp_input+0x290>)
 8008128:	695b      	ldr	r3, [r3, #20]
 800812a:	4a97      	ldr	r2, [pc, #604]	@ (8008388 <tcp_input+0x290>)
 800812c:	6812      	ldr	r2, [r2, #0]
 800812e:	4611      	mov	r1, r2
 8008130:	4618      	mov	r0, r3
 8008132:	f005 febf 	bl	800deb4 <ip4_addr_isbroadcast_u32>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	f040 83c7 	bne.w	80088cc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800813e:	4b92      	ldr	r3, [pc, #584]	@ (8008388 <tcp_input+0x290>)
 8008140:	695b      	ldr	r3, [r3, #20]
 8008142:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008146:	2be0      	cmp	r3, #224	@ 0xe0
 8008148:	f000 83c0 	beq.w	80088cc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800814c:	4b8d      	ldr	r3, [pc, #564]	@ (8008384 <tcp_input+0x28c>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	899b      	ldrh	r3, [r3, #12]
 8008152:	b29b      	uxth	r3, r3
 8008154:	4618      	mov	r0, r3
 8008156:	f7fc fe37 	bl	8004dc8 <lwip_htons>
 800815a:	4603      	mov	r3, r0
 800815c:	0b1b      	lsrs	r3, r3, #12
 800815e:	b29b      	uxth	r3, r3
 8008160:	b2db      	uxtb	r3, r3
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008166:	7cbb      	ldrb	r3, [r7, #18]
 8008168:	2b13      	cmp	r3, #19
 800816a:	f240 83b1 	bls.w	80088d0 <tcp_input+0x7d8>
 800816e:	7cbb      	ldrb	r3, [r7, #18]
 8008170:	b29a      	uxth	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	891b      	ldrh	r3, [r3, #8]
 8008176:	429a      	cmp	r2, r3
 8008178:	f200 83aa 	bhi.w	80088d0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800817c:	7cbb      	ldrb	r3, [r7, #18]
 800817e:	b29b      	uxth	r3, r3
 8008180:	3b14      	subs	r3, #20
 8008182:	b29a      	uxth	r2, r3
 8008184:	4b81      	ldr	r3, [pc, #516]	@ (800838c <tcp_input+0x294>)
 8008186:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008188:	4b81      	ldr	r3, [pc, #516]	@ (8008390 <tcp_input+0x298>)
 800818a:	2200      	movs	r2, #0
 800818c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	895a      	ldrh	r2, [r3, #10]
 8008192:	7cbb      	ldrb	r3, [r7, #18]
 8008194:	b29b      	uxth	r3, r3
 8008196:	429a      	cmp	r2, r3
 8008198:	d309      	bcc.n	80081ae <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800819a:	4b7c      	ldr	r3, [pc, #496]	@ (800838c <tcp_input+0x294>)
 800819c:	881a      	ldrh	r2, [r3, #0]
 800819e:	4b7d      	ldr	r3, [pc, #500]	@ (8008394 <tcp_input+0x29c>)
 80081a0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80081a2:	7cbb      	ldrb	r3, [r7, #18]
 80081a4:	4619      	mov	r1, r3
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f7fe f8e6 	bl	8006378 <pbuf_remove_header>
 80081ac:	e04e      	b.n	800824c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d105      	bne.n	80081c2 <tcp_input+0xca>
 80081b6:	4b70      	ldr	r3, [pc, #448]	@ (8008378 <tcp_input+0x280>)
 80081b8:	22c2      	movs	r2, #194	@ 0xc2
 80081ba:	4977      	ldr	r1, [pc, #476]	@ (8008398 <tcp_input+0x2a0>)
 80081bc:	4870      	ldr	r0, [pc, #448]	@ (8008380 <tcp_input+0x288>)
 80081be:	f006 fecf 	bl	800ef60 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80081c2:	2114      	movs	r1, #20
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f7fe f8d7 	bl	8006378 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	895a      	ldrh	r2, [r3, #10]
 80081ce:	4b71      	ldr	r3, [pc, #452]	@ (8008394 <tcp_input+0x29c>)
 80081d0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80081d2:	4b6e      	ldr	r3, [pc, #440]	@ (800838c <tcp_input+0x294>)
 80081d4:	881a      	ldrh	r2, [r3, #0]
 80081d6:	4b6f      	ldr	r3, [pc, #444]	@ (8008394 <tcp_input+0x29c>)
 80081d8:	881b      	ldrh	r3, [r3, #0]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80081de:	4b6d      	ldr	r3, [pc, #436]	@ (8008394 <tcp_input+0x29c>)
 80081e0:	881b      	ldrh	r3, [r3, #0]
 80081e2:	4619      	mov	r1, r3
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f7fe f8c7 	bl	8006378 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	895b      	ldrh	r3, [r3, #10]
 80081f0:	8a3a      	ldrh	r2, [r7, #16]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	f200 836e 	bhi.w	80088d4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	4a64      	ldr	r2, [pc, #400]	@ (8008390 <tcp_input+0x298>)
 8008200:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	8a3a      	ldrh	r2, [r7, #16]
 8008208:	4611      	mov	r1, r2
 800820a:	4618      	mov	r0, r3
 800820c:	f7fe f8b4 	bl	8006378 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	891a      	ldrh	r2, [r3, #8]
 8008214:	8a3b      	ldrh	r3, [r7, #16]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	b29a      	uxth	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	895b      	ldrh	r3, [r3, #10]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d005      	beq.n	8008232 <tcp_input+0x13a>
 8008226:	4b54      	ldr	r3, [pc, #336]	@ (8008378 <tcp_input+0x280>)
 8008228:	22df      	movs	r2, #223	@ 0xdf
 800822a:	495c      	ldr	r1, [pc, #368]	@ (800839c <tcp_input+0x2a4>)
 800822c:	4854      	ldr	r0, [pc, #336]	@ (8008380 <tcp_input+0x288>)
 800822e:	f006 fe97 	bl	800ef60 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	891a      	ldrh	r2, [r3, #8]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	891b      	ldrh	r3, [r3, #8]
 800823c:	429a      	cmp	r2, r3
 800823e:	d005      	beq.n	800824c <tcp_input+0x154>
 8008240:	4b4d      	ldr	r3, [pc, #308]	@ (8008378 <tcp_input+0x280>)
 8008242:	22e0      	movs	r2, #224	@ 0xe0
 8008244:	4956      	ldr	r1, [pc, #344]	@ (80083a0 <tcp_input+0x2a8>)
 8008246:	484e      	ldr	r0, [pc, #312]	@ (8008380 <tcp_input+0x288>)
 8008248:	f006 fe8a 	bl	800ef60 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800824c:	4b4d      	ldr	r3, [pc, #308]	@ (8008384 <tcp_input+0x28c>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	881b      	ldrh	r3, [r3, #0]
 8008252:	b29b      	uxth	r3, r3
 8008254:	4a4b      	ldr	r2, [pc, #300]	@ (8008384 <tcp_input+0x28c>)
 8008256:	6814      	ldr	r4, [r2, #0]
 8008258:	4618      	mov	r0, r3
 800825a:	f7fc fdb5 	bl	8004dc8 <lwip_htons>
 800825e:	4603      	mov	r3, r0
 8008260:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008262:	4b48      	ldr	r3, [pc, #288]	@ (8008384 <tcp_input+0x28c>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	885b      	ldrh	r3, [r3, #2]
 8008268:	b29b      	uxth	r3, r3
 800826a:	4a46      	ldr	r2, [pc, #280]	@ (8008384 <tcp_input+0x28c>)
 800826c:	6814      	ldr	r4, [r2, #0]
 800826e:	4618      	mov	r0, r3
 8008270:	f7fc fdaa 	bl	8004dc8 <lwip_htons>
 8008274:	4603      	mov	r3, r0
 8008276:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008278:	4b42      	ldr	r3, [pc, #264]	@ (8008384 <tcp_input+0x28c>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	4a41      	ldr	r2, [pc, #260]	@ (8008384 <tcp_input+0x28c>)
 8008280:	6814      	ldr	r4, [r2, #0]
 8008282:	4618      	mov	r0, r3
 8008284:	f7fc fdb6 	bl	8004df4 <lwip_htonl>
 8008288:	4603      	mov	r3, r0
 800828a:	6063      	str	r3, [r4, #4]
 800828c:	6863      	ldr	r3, [r4, #4]
 800828e:	4a45      	ldr	r2, [pc, #276]	@ (80083a4 <tcp_input+0x2ac>)
 8008290:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008292:	4b3c      	ldr	r3, [pc, #240]	@ (8008384 <tcp_input+0x28c>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	4a3a      	ldr	r2, [pc, #232]	@ (8008384 <tcp_input+0x28c>)
 800829a:	6814      	ldr	r4, [r2, #0]
 800829c:	4618      	mov	r0, r3
 800829e:	f7fc fda9 	bl	8004df4 <lwip_htonl>
 80082a2:	4603      	mov	r3, r0
 80082a4:	60a3      	str	r3, [r4, #8]
 80082a6:	68a3      	ldr	r3, [r4, #8]
 80082a8:	4a3f      	ldr	r2, [pc, #252]	@ (80083a8 <tcp_input+0x2b0>)
 80082aa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80082ac:	4b35      	ldr	r3, [pc, #212]	@ (8008384 <tcp_input+0x28c>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	89db      	ldrh	r3, [r3, #14]
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	4a33      	ldr	r2, [pc, #204]	@ (8008384 <tcp_input+0x28c>)
 80082b6:	6814      	ldr	r4, [r2, #0]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7fc fd85 	bl	8004dc8 <lwip_htons>
 80082be:	4603      	mov	r3, r0
 80082c0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80082c2:	4b30      	ldr	r3, [pc, #192]	@ (8008384 <tcp_input+0x28c>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	899b      	ldrh	r3, [r3, #12]
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fc fd7c 	bl	8004dc8 <lwip_htons>
 80082d0:	4603      	mov	r3, r0
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80082d8:	b2da      	uxtb	r2, r3
 80082da:	4b34      	ldr	r3, [pc, #208]	@ (80083ac <tcp_input+0x2b4>)
 80082dc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	891a      	ldrh	r2, [r3, #8]
 80082e2:	4b33      	ldr	r3, [pc, #204]	@ (80083b0 <tcp_input+0x2b8>)
 80082e4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80082e6:	4b31      	ldr	r3, [pc, #196]	@ (80083ac <tcp_input+0x2b4>)
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	f003 0303 	and.w	r3, r3, #3
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d00c      	beq.n	800830c <tcp_input+0x214>
    tcplen++;
 80082f2:	4b2f      	ldr	r3, [pc, #188]	@ (80083b0 <tcp_input+0x2b8>)
 80082f4:	881b      	ldrh	r3, [r3, #0]
 80082f6:	3301      	adds	r3, #1
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	4b2d      	ldr	r3, [pc, #180]	@ (80083b0 <tcp_input+0x2b8>)
 80082fc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	891a      	ldrh	r2, [r3, #8]
 8008302:	4b2b      	ldr	r3, [pc, #172]	@ (80083b0 <tcp_input+0x2b8>)
 8008304:	881b      	ldrh	r3, [r3, #0]
 8008306:	429a      	cmp	r2, r3
 8008308:	f200 82e6 	bhi.w	80088d8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800830c:	2300      	movs	r3, #0
 800830e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008310:	4b28      	ldr	r3, [pc, #160]	@ (80083b4 <tcp_input+0x2bc>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	61fb      	str	r3, [r7, #28]
 8008316:	e09d      	b.n	8008454 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	7d1b      	ldrb	r3, [r3, #20]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d105      	bne.n	800832c <tcp_input+0x234>
 8008320:	4b15      	ldr	r3, [pc, #84]	@ (8008378 <tcp_input+0x280>)
 8008322:	22fb      	movs	r2, #251	@ 0xfb
 8008324:	4924      	ldr	r1, [pc, #144]	@ (80083b8 <tcp_input+0x2c0>)
 8008326:	4816      	ldr	r0, [pc, #88]	@ (8008380 <tcp_input+0x288>)
 8008328:	f006 fe1a 	bl	800ef60 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	7d1b      	ldrb	r3, [r3, #20]
 8008330:	2b0a      	cmp	r3, #10
 8008332:	d105      	bne.n	8008340 <tcp_input+0x248>
 8008334:	4b10      	ldr	r3, [pc, #64]	@ (8008378 <tcp_input+0x280>)
 8008336:	22fc      	movs	r2, #252	@ 0xfc
 8008338:	4920      	ldr	r1, [pc, #128]	@ (80083bc <tcp_input+0x2c4>)
 800833a:	4811      	ldr	r0, [pc, #68]	@ (8008380 <tcp_input+0x288>)
 800833c:	f006 fe10 	bl	800ef60 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	7d1b      	ldrb	r3, [r3, #20]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d105      	bne.n	8008354 <tcp_input+0x25c>
 8008348:	4b0b      	ldr	r3, [pc, #44]	@ (8008378 <tcp_input+0x280>)
 800834a:	22fd      	movs	r2, #253	@ 0xfd
 800834c:	491c      	ldr	r1, [pc, #112]	@ (80083c0 <tcp_input+0x2c8>)
 800834e:	480c      	ldr	r0, [pc, #48]	@ (8008380 <tcp_input+0x288>)
 8008350:	f006 fe06 	bl	800ef60 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	7a1b      	ldrb	r3, [r3, #8]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d033      	beq.n	80083c4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	7a1a      	ldrb	r2, [r3, #8]
 8008360:	4b09      	ldr	r3, [pc, #36]	@ (8008388 <tcp_input+0x290>)
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008368:	3301      	adds	r3, #1
 800836a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800836c:	429a      	cmp	r2, r3
 800836e:	d029      	beq.n	80083c4 <tcp_input+0x2cc>
      prev = pcb;
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	61bb      	str	r3, [r7, #24]
      continue;
 8008374:	e06b      	b.n	800844e <tcp_input+0x356>
 8008376:	bf00      	nop
 8008378:	08010fdc 	.word	0x08010fdc
 800837c:	08011010 	.word	0x08011010
 8008380:	08011028 	.word	0x08011028
 8008384:	200082c0 	.word	0x200082c0
 8008388:	20004d28 	.word	0x20004d28
 800838c:	200082c4 	.word	0x200082c4
 8008390:	200082c8 	.word	0x200082c8
 8008394:	200082c6 	.word	0x200082c6
 8008398:	08011050 	.word	0x08011050
 800839c:	08011060 	.word	0x08011060
 80083a0:	0801106c 	.word	0x0801106c
 80083a4:	200082d0 	.word	0x200082d0
 80083a8:	200082d4 	.word	0x200082d4
 80083ac:	200082dc 	.word	0x200082dc
 80083b0:	200082da 	.word	0x200082da
 80083b4:	200082a4 	.word	0x200082a4
 80083b8:	0801108c 	.word	0x0801108c
 80083bc:	080110b4 	.word	0x080110b4
 80083c0:	080110e0 	.word	0x080110e0
    }

    if (pcb->remote_port == tcphdr->src &&
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	8b1a      	ldrh	r2, [r3, #24]
 80083c8:	4b72      	ldr	r3, [pc, #456]	@ (8008594 <tcp_input+0x49c>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	881b      	ldrh	r3, [r3, #0]
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d13a      	bne.n	800844a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	8ada      	ldrh	r2, [r3, #22]
 80083d8:	4b6e      	ldr	r3, [pc, #440]	@ (8008594 <tcp_input+0x49c>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	885b      	ldrh	r3, [r3, #2]
 80083de:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d132      	bne.n	800844a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80083e4:	69fb      	ldr	r3, [r7, #28]
 80083e6:	685a      	ldr	r2, [r3, #4]
 80083e8:	4b6b      	ldr	r3, [pc, #428]	@ (8008598 <tcp_input+0x4a0>)
 80083ea:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d12c      	bne.n	800844a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	4b68      	ldr	r3, [pc, #416]	@ (8008598 <tcp_input+0x4a0>)
 80083f6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d126      	bne.n	800844a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	69fa      	ldr	r2, [r7, #28]
 8008402:	429a      	cmp	r2, r3
 8008404:	d106      	bne.n	8008414 <tcp_input+0x31c>
 8008406:	4b65      	ldr	r3, [pc, #404]	@ (800859c <tcp_input+0x4a4>)
 8008408:	f240 120d 	movw	r2, #269	@ 0x10d
 800840c:	4964      	ldr	r1, [pc, #400]	@ (80085a0 <tcp_input+0x4a8>)
 800840e:	4865      	ldr	r0, [pc, #404]	@ (80085a4 <tcp_input+0x4ac>)
 8008410:	f006 fda6 	bl	800ef60 <iprintf>
      if (prev != NULL) {
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00a      	beq.n	8008430 <tcp_input+0x338>
        prev->next = pcb->next;
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	68da      	ldr	r2, [r3, #12]
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008422:	4b61      	ldr	r3, [pc, #388]	@ (80085a8 <tcp_input+0x4b0>)
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800842a:	4a5f      	ldr	r2, [pc, #380]	@ (80085a8 <tcp_input+0x4b0>)
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	69fa      	ldr	r2, [r7, #28]
 8008436:	429a      	cmp	r2, r3
 8008438:	d111      	bne.n	800845e <tcp_input+0x366>
 800843a:	4b58      	ldr	r3, [pc, #352]	@ (800859c <tcp_input+0x4a4>)
 800843c:	f240 1215 	movw	r2, #277	@ 0x115
 8008440:	495a      	ldr	r1, [pc, #360]	@ (80085ac <tcp_input+0x4b4>)
 8008442:	4858      	ldr	r0, [pc, #352]	@ (80085a4 <tcp_input+0x4ac>)
 8008444:	f006 fd8c 	bl	800ef60 <iprintf>
      break;
 8008448:	e009      	b.n	800845e <tcp_input+0x366>
    }
    prev = pcb;
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	61fb      	str	r3, [r7, #28]
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	2b00      	cmp	r3, #0
 8008458:	f47f af5e 	bne.w	8008318 <tcp_input+0x220>
 800845c:	e000      	b.n	8008460 <tcp_input+0x368>
      break;
 800845e:	bf00      	nop
  }

  if (pcb == NULL) {
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	2b00      	cmp	r3, #0
 8008464:	f040 80aa 	bne.w	80085bc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008468:	4b51      	ldr	r3, [pc, #324]	@ (80085b0 <tcp_input+0x4b8>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	61fb      	str	r3, [r7, #28]
 800846e:	e03f      	b.n	80084f0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	7d1b      	ldrb	r3, [r3, #20]
 8008474:	2b0a      	cmp	r3, #10
 8008476:	d006      	beq.n	8008486 <tcp_input+0x38e>
 8008478:	4b48      	ldr	r3, [pc, #288]	@ (800859c <tcp_input+0x4a4>)
 800847a:	f240 121f 	movw	r2, #287	@ 0x11f
 800847e:	494d      	ldr	r1, [pc, #308]	@ (80085b4 <tcp_input+0x4bc>)
 8008480:	4848      	ldr	r0, [pc, #288]	@ (80085a4 <tcp_input+0x4ac>)
 8008482:	f006 fd6d 	bl	800ef60 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	7a1b      	ldrb	r3, [r3, #8]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d009      	beq.n	80084a2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	7a1a      	ldrb	r2, [r3, #8]
 8008492:	4b41      	ldr	r3, [pc, #260]	@ (8008598 <tcp_input+0x4a0>)
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800849a:	3301      	adds	r3, #1
 800849c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800849e:	429a      	cmp	r2, r3
 80084a0:	d122      	bne.n	80084e8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	8b1a      	ldrh	r2, [r3, #24]
 80084a6:	4b3b      	ldr	r3, [pc, #236]	@ (8008594 <tcp_input+0x49c>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	881b      	ldrh	r3, [r3, #0]
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d11b      	bne.n	80084ea <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	8ada      	ldrh	r2, [r3, #22]
 80084b6:	4b37      	ldr	r3, [pc, #220]	@ (8008594 <tcp_input+0x49c>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	885b      	ldrh	r3, [r3, #2]
 80084bc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80084be:	429a      	cmp	r2, r3
 80084c0:	d113      	bne.n	80084ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	685a      	ldr	r2, [r3, #4]
 80084c6:	4b34      	ldr	r3, [pc, #208]	@ (8008598 <tcp_input+0x4a0>)
 80084c8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d10d      	bne.n	80084ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	4b31      	ldr	r3, [pc, #196]	@ (8008598 <tcp_input+0x4a0>)
 80084d4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d107      	bne.n	80084ea <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80084da:	69f8      	ldr	r0, [r7, #28]
 80084dc:	f000 fb56 	bl	8008b8c <tcp_timewait_input>
        }
        pbuf_free(p);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f7fd ffcf 	bl	8006484 <pbuf_free>
        return;
 80084e6:	e1fd      	b.n	80088e4 <tcp_input+0x7ec>
        continue;
 80084e8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	61fb      	str	r3, [r7, #28]
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d1bc      	bne.n	8008470 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80084f6:	2300      	movs	r3, #0
 80084f8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80084fa:	4b2f      	ldr	r3, [pc, #188]	@ (80085b8 <tcp_input+0x4c0>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	617b      	str	r3, [r7, #20]
 8008500:	e02a      	b.n	8008558 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	7a1b      	ldrb	r3, [r3, #8]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00c      	beq.n	8008524 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	7a1a      	ldrb	r2, [r3, #8]
 800850e:	4b22      	ldr	r3, [pc, #136]	@ (8008598 <tcp_input+0x4a0>)
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008516:	3301      	adds	r3, #1
 8008518:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800851a:	429a      	cmp	r2, r3
 800851c:	d002      	beq.n	8008524 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	61bb      	str	r3, [r7, #24]
        continue;
 8008522:	e016      	b.n	8008552 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	8ada      	ldrh	r2, [r3, #22]
 8008528:	4b1a      	ldr	r3, [pc, #104]	@ (8008594 <tcp_input+0x49c>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	885b      	ldrh	r3, [r3, #2]
 800852e:	b29b      	uxth	r3, r3
 8008530:	429a      	cmp	r2, r3
 8008532:	d10c      	bne.n	800854e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	4b17      	ldr	r3, [pc, #92]	@ (8008598 <tcp_input+0x4a0>)
 800853a:	695b      	ldr	r3, [r3, #20]
 800853c:	429a      	cmp	r2, r3
 800853e:	d00f      	beq.n	8008560 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00d      	beq.n	8008562 <tcp_input+0x46a>
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d009      	beq.n	8008562 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	617b      	str	r3, [r7, #20]
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d1d1      	bne.n	8008502 <tcp_input+0x40a>
 800855e:	e000      	b.n	8008562 <tcp_input+0x46a>
            break;
 8008560:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d029      	beq.n	80085bc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00a      	beq.n	8008584 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	68da      	ldr	r2, [r3, #12]
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008576:	4b10      	ldr	r3, [pc, #64]	@ (80085b8 <tcp_input+0x4c0>)
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800857e:	4a0e      	ldr	r2, [pc, #56]	@ (80085b8 <tcp_input+0x4c0>)
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008584:	6978      	ldr	r0, [r7, #20]
 8008586:	f000 fa03 	bl	8008990 <tcp_listen_input>
      }
      pbuf_free(p);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f7fd ff7a 	bl	8006484 <pbuf_free>
      return;
 8008590:	e1a8      	b.n	80088e4 <tcp_input+0x7ec>
 8008592:	bf00      	nop
 8008594:	200082c0 	.word	0x200082c0
 8008598:	20004d28 	.word	0x20004d28
 800859c:	08010fdc 	.word	0x08010fdc
 80085a0:	08011108 	.word	0x08011108
 80085a4:	08011028 	.word	0x08011028
 80085a8:	200082a4 	.word	0x200082a4
 80085ac:	08011134 	.word	0x08011134
 80085b0:	200082a8 	.word	0x200082a8
 80085b4:	08011160 	.word	0x08011160
 80085b8:	200082a0 	.word	0x200082a0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f000 8158 	beq.w	8008874 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80085c4:	4b95      	ldr	r3, [pc, #596]	@ (800881c <tcp_input+0x724>)
 80085c6:	2200      	movs	r2, #0
 80085c8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	891a      	ldrh	r2, [r3, #8]
 80085ce:	4b93      	ldr	r3, [pc, #588]	@ (800881c <tcp_input+0x724>)
 80085d0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80085d2:	4a92      	ldr	r2, [pc, #584]	@ (800881c <tcp_input+0x724>)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80085d8:	4b91      	ldr	r3, [pc, #580]	@ (8008820 <tcp_input+0x728>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a8f      	ldr	r2, [pc, #572]	@ (800881c <tcp_input+0x724>)
 80085de:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80085e0:	4b90      	ldr	r3, [pc, #576]	@ (8008824 <tcp_input+0x72c>)
 80085e2:	2200      	movs	r2, #0
 80085e4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80085e6:	4b90      	ldr	r3, [pc, #576]	@ (8008828 <tcp_input+0x730>)
 80085e8:	2200      	movs	r2, #0
 80085ea:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80085ec:	4b8f      	ldr	r3, [pc, #572]	@ (800882c <tcp_input+0x734>)
 80085ee:	2200      	movs	r2, #0
 80085f0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80085f2:	4b8f      	ldr	r3, [pc, #572]	@ (8008830 <tcp_input+0x738>)
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	f003 0308 	and.w	r3, r3, #8
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d006      	beq.n	800860c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	7b5b      	ldrb	r3, [r3, #13]
 8008602:	f043 0301 	orr.w	r3, r3, #1
 8008606:	b2da      	uxtb	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008610:	2b00      	cmp	r3, #0
 8008612:	d017      	beq.n	8008644 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008614:	69f8      	ldr	r0, [r7, #28]
 8008616:	f7ff f929 	bl	800786c <tcp_process_refused_data>
 800861a:	4603      	mov	r3, r0
 800861c:	f113 0f0d 	cmn.w	r3, #13
 8008620:	d007      	beq.n	8008632 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00c      	beq.n	8008644 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800862a:	4b82      	ldr	r3, [pc, #520]	@ (8008834 <tcp_input+0x73c>)
 800862c:	881b      	ldrh	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d008      	beq.n	8008644 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008636:	2b00      	cmp	r3, #0
 8008638:	f040 80e3 	bne.w	8008802 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800863c:	69f8      	ldr	r0, [r7, #28]
 800863e:	f003 f9a7 	bl	800b990 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008642:	e0de      	b.n	8008802 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8008644:	4a7c      	ldr	r2, [pc, #496]	@ (8008838 <tcp_input+0x740>)
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800864a:	69f8      	ldr	r0, [r7, #28]
 800864c:	f000 fb18 	bl	8008c80 <tcp_process>
 8008650:	4603      	mov	r3, r0
 8008652:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008654:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008658:	f113 0f0d 	cmn.w	r3, #13
 800865c:	f000 80d3 	beq.w	8008806 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8008660:	4b71      	ldr	r3, [pc, #452]	@ (8008828 <tcp_input+0x730>)
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	f003 0308 	and.w	r3, r3, #8
 8008668:	2b00      	cmp	r3, #0
 800866a:	d015      	beq.n	8008698 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008672:	2b00      	cmp	r3, #0
 8008674:	d008      	beq.n	8008688 <tcp_input+0x590>
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800867c:	69fa      	ldr	r2, [r7, #28]
 800867e:	6912      	ldr	r2, [r2, #16]
 8008680:	f06f 010d 	mvn.w	r1, #13
 8008684:	4610      	mov	r0, r2
 8008686:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008688:	69f9      	ldr	r1, [r7, #28]
 800868a:	486c      	ldr	r0, [pc, #432]	@ (800883c <tcp_input+0x744>)
 800868c:	f7ff fbbc 	bl	8007e08 <tcp_pcb_remove>
        tcp_free(pcb);
 8008690:	69f8      	ldr	r0, [r7, #28]
 8008692:	f7fe f9a7 	bl	80069e4 <tcp_free>
 8008696:	e0da      	b.n	800884e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8008698:	2300      	movs	r3, #0
 800869a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800869c:	4b63      	ldr	r3, [pc, #396]	@ (800882c <tcp_input+0x734>)
 800869e:	881b      	ldrh	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d01d      	beq.n	80086e0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80086a4:	4b61      	ldr	r3, [pc, #388]	@ (800882c <tcp_input+0x734>)
 80086a6:	881b      	ldrh	r3, [r3, #0]
 80086a8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00a      	beq.n	80086ca <tcp_input+0x5d2>
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086ba:	69fa      	ldr	r2, [r7, #28]
 80086bc:	6910      	ldr	r0, [r2, #16]
 80086be:	89fa      	ldrh	r2, [r7, #14]
 80086c0:	69f9      	ldr	r1, [r7, #28]
 80086c2:	4798      	blx	r3
 80086c4:	4603      	mov	r3, r0
 80086c6:	74fb      	strb	r3, [r7, #19]
 80086c8:	e001      	b.n	80086ce <tcp_input+0x5d6>
 80086ca:	2300      	movs	r3, #0
 80086cc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80086ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80086d2:	f113 0f0d 	cmn.w	r3, #13
 80086d6:	f000 8098 	beq.w	800880a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80086da:	4b54      	ldr	r3, [pc, #336]	@ (800882c <tcp_input+0x734>)
 80086dc:	2200      	movs	r2, #0
 80086de:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80086e0:	69f8      	ldr	r0, [r7, #28]
 80086e2:	f000 f915 	bl	8008910 <tcp_input_delayed_close>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f040 8090 	bne.w	800880e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80086ee:	4b4d      	ldr	r3, [pc, #308]	@ (8008824 <tcp_input+0x72c>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d041      	beq.n	800877a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d006      	beq.n	800870c <tcp_input+0x614>
 80086fe:	4b50      	ldr	r3, [pc, #320]	@ (8008840 <tcp_input+0x748>)
 8008700:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8008704:	494f      	ldr	r1, [pc, #316]	@ (8008844 <tcp_input+0x74c>)
 8008706:	4850      	ldr	r0, [pc, #320]	@ (8008848 <tcp_input+0x750>)
 8008708:	f006 fc2a 	bl	800ef60 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	8b5b      	ldrh	r3, [r3, #26]
 8008710:	f003 0310 	and.w	r3, r3, #16
 8008714:	2b00      	cmp	r3, #0
 8008716:	d008      	beq.n	800872a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008718:	4b42      	ldr	r3, [pc, #264]	@ (8008824 <tcp_input+0x72c>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4618      	mov	r0, r3
 800871e:	f7fd feb1 	bl	8006484 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008722:	69f8      	ldr	r0, [r7, #28]
 8008724:	f7fe fc46 	bl	8006fb4 <tcp_abort>
            goto aborted;
 8008728:	e091      	b.n	800884e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00c      	beq.n	800874e <tcp_input+0x656>
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	6918      	ldr	r0, [r3, #16]
 800873e:	4b39      	ldr	r3, [pc, #228]	@ (8008824 <tcp_input+0x72c>)
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	2300      	movs	r3, #0
 8008744:	69f9      	ldr	r1, [r7, #28]
 8008746:	47a0      	blx	r4
 8008748:	4603      	mov	r3, r0
 800874a:	74fb      	strb	r3, [r7, #19]
 800874c:	e008      	b.n	8008760 <tcp_input+0x668>
 800874e:	4b35      	ldr	r3, [pc, #212]	@ (8008824 <tcp_input+0x72c>)
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	2300      	movs	r3, #0
 8008754:	69f9      	ldr	r1, [r7, #28]
 8008756:	2000      	movs	r0, #0
 8008758:	f7ff f95e 	bl	8007a18 <tcp_recv_null>
 800875c:	4603      	mov	r3, r0
 800875e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008760:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008764:	f113 0f0d 	cmn.w	r3, #13
 8008768:	d053      	beq.n	8008812 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800876a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d003      	beq.n	800877a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008772:	4b2c      	ldr	r3, [pc, #176]	@ (8008824 <tcp_input+0x72c>)
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800877a:	4b2b      	ldr	r3, [pc, #172]	@ (8008828 <tcp_input+0x730>)
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	f003 0320 	and.w	r3, r3, #32
 8008782:	2b00      	cmp	r3, #0
 8008784:	d030      	beq.n	80087e8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800878a:	2b00      	cmp	r3, #0
 800878c:	d009      	beq.n	80087a2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008792:	7b5a      	ldrb	r2, [r3, #13]
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008798:	f042 0220 	orr.w	r2, r2, #32
 800879c:	b2d2      	uxtb	r2, r2
 800879e:	735a      	strb	r2, [r3, #13]
 80087a0:	e022      	b.n	80087e8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087a6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80087aa:	d005      	beq.n	80087b8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087b0:	3301      	adds	r3, #1
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00b      	beq.n	80087da <tcp_input+0x6e2>
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	6918      	ldr	r0, [r3, #16]
 80087cc:	2300      	movs	r3, #0
 80087ce:	2200      	movs	r2, #0
 80087d0:	69f9      	ldr	r1, [r7, #28]
 80087d2:	47a0      	blx	r4
 80087d4:	4603      	mov	r3, r0
 80087d6:	74fb      	strb	r3, [r7, #19]
 80087d8:	e001      	b.n	80087de <tcp_input+0x6e6>
 80087da:	2300      	movs	r3, #0
 80087dc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80087de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80087e2:	f113 0f0d 	cmn.w	r3, #13
 80087e6:	d016      	beq.n	8008816 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80087e8:	4b13      	ldr	r3, [pc, #76]	@ (8008838 <tcp_input+0x740>)
 80087ea:	2200      	movs	r2, #0
 80087ec:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80087ee:	69f8      	ldr	r0, [r7, #28]
 80087f0:	f000 f88e 	bl	8008910 <tcp_input_delayed_close>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d128      	bne.n	800884c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80087fa:	69f8      	ldr	r0, [r7, #28]
 80087fc:	f002 fac2 	bl	800ad84 <tcp_output>
 8008800:	e025      	b.n	800884e <tcp_input+0x756>
        goto aborted;
 8008802:	bf00      	nop
 8008804:	e023      	b.n	800884e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008806:	bf00      	nop
 8008808:	e021      	b.n	800884e <tcp_input+0x756>
              goto aborted;
 800880a:	bf00      	nop
 800880c:	e01f      	b.n	800884e <tcp_input+0x756>
          goto aborted;
 800880e:	bf00      	nop
 8008810:	e01d      	b.n	800884e <tcp_input+0x756>
            goto aborted;
 8008812:	bf00      	nop
 8008814:	e01b      	b.n	800884e <tcp_input+0x756>
              goto aborted;
 8008816:	bf00      	nop
 8008818:	e019      	b.n	800884e <tcp_input+0x756>
 800881a:	bf00      	nop
 800881c:	200082b0 	.word	0x200082b0
 8008820:	200082c0 	.word	0x200082c0
 8008824:	200082e0 	.word	0x200082e0
 8008828:	200082dd 	.word	0x200082dd
 800882c:	200082d8 	.word	0x200082d8
 8008830:	200082dc 	.word	0x200082dc
 8008834:	200082da 	.word	0x200082da
 8008838:	200082e4 	.word	0x200082e4
 800883c:	200082a4 	.word	0x200082a4
 8008840:	08010fdc 	.word	0x08010fdc
 8008844:	08011190 	.word	0x08011190
 8008848:	08011028 	.word	0x08011028
          goto aborted;
 800884c:	bf00      	nop
    tcp_input_pcb = NULL;
 800884e:	4b27      	ldr	r3, [pc, #156]	@ (80088ec <tcp_input+0x7f4>)
 8008850:	2200      	movs	r2, #0
 8008852:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008854:	4b26      	ldr	r3, [pc, #152]	@ (80088f0 <tcp_input+0x7f8>)
 8008856:	2200      	movs	r2, #0
 8008858:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800885a:	4b26      	ldr	r3, [pc, #152]	@ (80088f4 <tcp_input+0x7fc>)
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d03f      	beq.n	80088e2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8008862:	4b24      	ldr	r3, [pc, #144]	@ (80088f4 <tcp_input+0x7fc>)
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	4618      	mov	r0, r3
 8008868:	f7fd fe0c 	bl	8006484 <pbuf_free>
      inseg.p = NULL;
 800886c:	4b21      	ldr	r3, [pc, #132]	@ (80088f4 <tcp_input+0x7fc>)
 800886e:	2200      	movs	r2, #0
 8008870:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008872:	e036      	b.n	80088e2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008874:	4b20      	ldr	r3, [pc, #128]	@ (80088f8 <tcp_input+0x800>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	899b      	ldrh	r3, [r3, #12]
 800887a:	b29b      	uxth	r3, r3
 800887c:	4618      	mov	r0, r3
 800887e:	f7fc faa3 	bl	8004dc8 <lwip_htons>
 8008882:	4603      	mov	r3, r0
 8008884:	b2db      	uxtb	r3, r3
 8008886:	f003 0304 	and.w	r3, r3, #4
 800888a:	2b00      	cmp	r3, #0
 800888c:	d118      	bne.n	80088c0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800888e:	4b1b      	ldr	r3, [pc, #108]	@ (80088fc <tcp_input+0x804>)
 8008890:	6819      	ldr	r1, [r3, #0]
 8008892:	4b1b      	ldr	r3, [pc, #108]	@ (8008900 <tcp_input+0x808>)
 8008894:	881b      	ldrh	r3, [r3, #0]
 8008896:	461a      	mov	r2, r3
 8008898:	4b1a      	ldr	r3, [pc, #104]	@ (8008904 <tcp_input+0x80c>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800889e:	4b16      	ldr	r3, [pc, #88]	@ (80088f8 <tcp_input+0x800>)
 80088a0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80088a2:	885b      	ldrh	r3, [r3, #2]
 80088a4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80088a6:	4a14      	ldr	r2, [pc, #80]	@ (80088f8 <tcp_input+0x800>)
 80088a8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80088aa:	8812      	ldrh	r2, [r2, #0]
 80088ac:	b292      	uxth	r2, r2
 80088ae:	9202      	str	r2, [sp, #8]
 80088b0:	9301      	str	r3, [sp, #4]
 80088b2:	4b15      	ldr	r3, [pc, #84]	@ (8008908 <tcp_input+0x810>)
 80088b4:	9300      	str	r3, [sp, #0]
 80088b6:	4b15      	ldr	r3, [pc, #84]	@ (800890c <tcp_input+0x814>)
 80088b8:	4602      	mov	r2, r0
 80088ba:	2000      	movs	r0, #0
 80088bc:	f003 f816 	bl	800b8ec <tcp_rst>
    pbuf_free(p);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f7fd fddf 	bl	8006484 <pbuf_free>
  return;
 80088c6:	e00c      	b.n	80088e2 <tcp_input+0x7ea>
    goto dropped;
 80088c8:	bf00      	nop
 80088ca:	e006      	b.n	80088da <tcp_input+0x7e2>
    goto dropped;
 80088cc:	bf00      	nop
 80088ce:	e004      	b.n	80088da <tcp_input+0x7e2>
    goto dropped;
 80088d0:	bf00      	nop
 80088d2:	e002      	b.n	80088da <tcp_input+0x7e2>
      goto dropped;
 80088d4:	bf00      	nop
 80088d6:	e000      	b.n	80088da <tcp_input+0x7e2>
      goto dropped;
 80088d8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f7fd fdd2 	bl	8006484 <pbuf_free>
 80088e0:	e000      	b.n	80088e4 <tcp_input+0x7ec>
  return;
 80088e2:	bf00      	nop
}
 80088e4:	3724      	adds	r7, #36	@ 0x24
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd90      	pop	{r4, r7, pc}
 80088ea:	bf00      	nop
 80088ec:	200082e4 	.word	0x200082e4
 80088f0:	200082e0 	.word	0x200082e0
 80088f4:	200082b0 	.word	0x200082b0
 80088f8:	200082c0 	.word	0x200082c0
 80088fc:	200082d4 	.word	0x200082d4
 8008900:	200082da 	.word	0x200082da
 8008904:	200082d0 	.word	0x200082d0
 8008908:	20004d38 	.word	0x20004d38
 800890c:	20004d3c 	.word	0x20004d3c

08008910 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d106      	bne.n	800892c <tcp_input_delayed_close+0x1c>
 800891e:	4b17      	ldr	r3, [pc, #92]	@ (800897c <tcp_input_delayed_close+0x6c>)
 8008920:	f240 225a 	movw	r2, #602	@ 0x25a
 8008924:	4916      	ldr	r1, [pc, #88]	@ (8008980 <tcp_input_delayed_close+0x70>)
 8008926:	4817      	ldr	r0, [pc, #92]	@ (8008984 <tcp_input_delayed_close+0x74>)
 8008928:	f006 fb1a 	bl	800ef60 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800892c:	4b16      	ldr	r3, [pc, #88]	@ (8008988 <tcp_input_delayed_close+0x78>)
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	f003 0310 	and.w	r3, r3, #16
 8008934:	2b00      	cmp	r3, #0
 8008936:	d01c      	beq.n	8008972 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	8b5b      	ldrh	r3, [r3, #26]
 800893c:	f003 0310 	and.w	r3, r3, #16
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10d      	bne.n	8008960 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800894a:	2b00      	cmp	r3, #0
 800894c:	d008      	beq.n	8008960 <tcp_input_delayed_close+0x50>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	6912      	ldr	r2, [r2, #16]
 8008958:	f06f 010e 	mvn.w	r1, #14
 800895c:	4610      	mov	r0, r2
 800895e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008960:	6879      	ldr	r1, [r7, #4]
 8008962:	480a      	ldr	r0, [pc, #40]	@ (800898c <tcp_input_delayed_close+0x7c>)
 8008964:	f7ff fa50 	bl	8007e08 <tcp_pcb_remove>
    tcp_free(pcb);
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f7fe f83b 	bl	80069e4 <tcp_free>
    return 1;
 800896e:	2301      	movs	r3, #1
 8008970:	e000      	b.n	8008974 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3708      	adds	r7, #8
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}
 800897c:	08010fdc 	.word	0x08010fdc
 8008980:	080111ac 	.word	0x080111ac
 8008984:	08011028 	.word	0x08011028
 8008988:	200082dd 	.word	0x200082dd
 800898c:	200082a4 	.word	0x200082a4

08008990 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008990:	b590      	push	{r4, r7, lr}
 8008992:	b08b      	sub	sp, #44	@ 0x2c
 8008994:	af04      	add	r7, sp, #16
 8008996:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008998:	4b6f      	ldr	r3, [pc, #444]	@ (8008b58 <tcp_listen_input+0x1c8>)
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	f003 0304 	and.w	r3, r3, #4
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	f040 80d2 	bne.w	8008b4a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d106      	bne.n	80089ba <tcp_listen_input+0x2a>
 80089ac:	4b6b      	ldr	r3, [pc, #428]	@ (8008b5c <tcp_listen_input+0x1cc>)
 80089ae:	f240 2281 	movw	r2, #641	@ 0x281
 80089b2:	496b      	ldr	r1, [pc, #428]	@ (8008b60 <tcp_listen_input+0x1d0>)
 80089b4:	486b      	ldr	r0, [pc, #428]	@ (8008b64 <tcp_listen_input+0x1d4>)
 80089b6:	f006 fad3 	bl	800ef60 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80089ba:	4b67      	ldr	r3, [pc, #412]	@ (8008b58 <tcp_listen_input+0x1c8>)
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	f003 0310 	and.w	r3, r3, #16
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d019      	beq.n	80089fa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80089c6:	4b68      	ldr	r3, [pc, #416]	@ (8008b68 <tcp_listen_input+0x1d8>)
 80089c8:	6819      	ldr	r1, [r3, #0]
 80089ca:	4b68      	ldr	r3, [pc, #416]	@ (8008b6c <tcp_listen_input+0x1dc>)
 80089cc:	881b      	ldrh	r3, [r3, #0]
 80089ce:	461a      	mov	r2, r3
 80089d0:	4b67      	ldr	r3, [pc, #412]	@ (8008b70 <tcp_listen_input+0x1e0>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80089d6:	4b67      	ldr	r3, [pc, #412]	@ (8008b74 <tcp_listen_input+0x1e4>)
 80089d8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80089da:	885b      	ldrh	r3, [r3, #2]
 80089dc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80089de:	4a65      	ldr	r2, [pc, #404]	@ (8008b74 <tcp_listen_input+0x1e4>)
 80089e0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80089e2:	8812      	ldrh	r2, [r2, #0]
 80089e4:	b292      	uxth	r2, r2
 80089e6:	9202      	str	r2, [sp, #8]
 80089e8:	9301      	str	r3, [sp, #4]
 80089ea:	4b63      	ldr	r3, [pc, #396]	@ (8008b78 <tcp_listen_input+0x1e8>)
 80089ec:	9300      	str	r3, [sp, #0]
 80089ee:	4b63      	ldr	r3, [pc, #396]	@ (8008b7c <tcp_listen_input+0x1ec>)
 80089f0:	4602      	mov	r2, r0
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f002 ff7a 	bl	800b8ec <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80089f8:	e0a9      	b.n	8008b4e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80089fa:	4b57      	ldr	r3, [pc, #348]	@ (8008b58 <tcp_listen_input+0x1c8>)
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	f003 0302 	and.w	r3, r3, #2
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f000 80a3 	beq.w	8008b4e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	7d5b      	ldrb	r3, [r3, #21]
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7ff f927 	bl	8007c60 <tcp_alloc>
 8008a12:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d111      	bne.n	8008a3e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	699b      	ldr	r3, [r3, #24]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00a      	beq.n	8008a38 <tcp_listen_input+0xa8>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	699b      	ldr	r3, [r3, #24]
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	6910      	ldr	r0, [r2, #16]
 8008a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a2e:	2100      	movs	r1, #0
 8008a30:	4798      	blx	r3
 8008a32:	4603      	mov	r3, r0
 8008a34:	73bb      	strb	r3, [r7, #14]
      return;
 8008a36:	e08b      	b.n	8008b50 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008a38:	23f0      	movs	r3, #240	@ 0xf0
 8008a3a:	73bb      	strb	r3, [r7, #14]
      return;
 8008a3c:	e088      	b.n	8008b50 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008a3e:	4b50      	ldr	r3, [pc, #320]	@ (8008b80 <tcp_listen_input+0x1f0>)
 8008a40:	695a      	ldr	r2, [r3, #20]
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008a46:	4b4e      	ldr	r3, [pc, #312]	@ (8008b80 <tcp_listen_input+0x1f0>)
 8008a48:	691a      	ldr	r2, [r3, #16]
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	8ada      	ldrh	r2, [r3, #22]
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008a56:	4b47      	ldr	r3, [pc, #284]	@ (8008b74 <tcp_listen_input+0x1e4>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	881b      	ldrh	r3, [r3, #0]
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	2203      	movs	r2, #3
 8008a66:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008a68:	4b41      	ldr	r3, [pc, #260]	@ (8008b70 <tcp_listen_input+0x1e0>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	1c5a      	adds	r2, r3, #1
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8008a7a:	6978      	ldr	r0, [r7, #20]
 8008a7c:	f7ff fa58 	bl	8007f30 <tcp_next_iss>
 8008a80:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	693a      	ldr	r2, [r7, #16]
 8008a8c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	693a      	ldr	r2, [r7, #16]
 8008a92:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008a9a:	4b35      	ldr	r3, [pc, #212]	@ (8008b70 <tcp_listen_input+0x1e0>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	1e5a      	subs	r2, r3, #1
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	691a      	ldr	r2, [r3, #16]
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	7a5b      	ldrb	r3, [r3, #9]
 8008ab6:	f003 030c 	and.w	r3, r3, #12
 8008aba:	b2da      	uxtb	r2, r3
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	7a1a      	ldrb	r2, [r3, #8]
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008ac8:	4b2e      	ldr	r3, [pc, #184]	@ (8008b84 <tcp_listen_input+0x1f4>)
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	60da      	str	r2, [r3, #12]
 8008ad0:	4a2c      	ldr	r2, [pc, #176]	@ (8008b84 <tcp_listen_input+0x1f4>)
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	6013      	str	r3, [r2, #0]
 8008ad6:	f003 f8cb 	bl	800bc70 <tcp_timer_needed>
 8008ada:	4b2b      	ldr	r3, [pc, #172]	@ (8008b88 <tcp_listen_input+0x1f8>)
 8008adc:	2201      	movs	r2, #1
 8008ade:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008ae0:	6978      	ldr	r0, [r7, #20]
 8008ae2:	f001 fd8b 	bl	800a5fc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008ae6:	4b23      	ldr	r3, [pc, #140]	@ (8008b74 <tcp_listen_input+0x1e4>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	89db      	ldrh	r3, [r3, #14]
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	3304      	adds	r3, #4
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f004 ff3d 	bl	800d988 <ip4_route>
 8008b0e:	4601      	mov	r1, r0
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	3304      	adds	r3, #4
 8008b14:	461a      	mov	r2, r3
 8008b16:	4620      	mov	r0, r4
 8008b18:	f7ff fa30 	bl	8007f7c <tcp_eff_send_mss_netif>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	461a      	mov	r2, r3
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008b24:	2112      	movs	r1, #18
 8008b26:	6978      	ldr	r0, [r7, #20]
 8008b28:	f002 f83e 	bl	800aba8 <tcp_enqueue_flags>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d004      	beq.n	8008b42 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008b38:	2100      	movs	r1, #0
 8008b3a:	6978      	ldr	r0, [r7, #20]
 8008b3c:	f7fe f97c 	bl	8006e38 <tcp_abandon>
      return;
 8008b40:	e006      	b.n	8008b50 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8008b42:	6978      	ldr	r0, [r7, #20]
 8008b44:	f002 f91e 	bl	800ad84 <tcp_output>
  return;
 8008b48:	e001      	b.n	8008b4e <tcp_listen_input+0x1be>
    return;
 8008b4a:	bf00      	nop
 8008b4c:	e000      	b.n	8008b50 <tcp_listen_input+0x1c0>
  return;
 8008b4e:	bf00      	nop
}
 8008b50:	371c      	adds	r7, #28
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd90      	pop	{r4, r7, pc}
 8008b56:	bf00      	nop
 8008b58:	200082dc 	.word	0x200082dc
 8008b5c:	08010fdc 	.word	0x08010fdc
 8008b60:	080111d4 	.word	0x080111d4
 8008b64:	08011028 	.word	0x08011028
 8008b68:	200082d4 	.word	0x200082d4
 8008b6c:	200082da 	.word	0x200082da
 8008b70:	200082d0 	.word	0x200082d0
 8008b74:	200082c0 	.word	0x200082c0
 8008b78:	20004d38 	.word	0x20004d38
 8008b7c:	20004d3c 	.word	0x20004d3c
 8008b80:	20004d28 	.word	0x20004d28
 8008b84:	200082a4 	.word	0x200082a4
 8008b88:	200082ac 	.word	0x200082ac

08008b8c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b086      	sub	sp, #24
 8008b90:	af04      	add	r7, sp, #16
 8008b92:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008b94:	4b2f      	ldr	r3, [pc, #188]	@ (8008c54 <tcp_timewait_input+0xc8>)
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	f003 0304 	and.w	r3, r3, #4
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d153      	bne.n	8008c48 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d106      	bne.n	8008bb4 <tcp_timewait_input+0x28>
 8008ba6:	4b2c      	ldr	r3, [pc, #176]	@ (8008c58 <tcp_timewait_input+0xcc>)
 8008ba8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8008bac:	492b      	ldr	r1, [pc, #172]	@ (8008c5c <tcp_timewait_input+0xd0>)
 8008bae:	482c      	ldr	r0, [pc, #176]	@ (8008c60 <tcp_timewait_input+0xd4>)
 8008bb0:	f006 f9d6 	bl	800ef60 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008bb4:	4b27      	ldr	r3, [pc, #156]	@ (8008c54 <tcp_timewait_input+0xc8>)
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	f003 0302 	and.w	r3, r3, #2
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d02a      	beq.n	8008c16 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008bc0:	4b28      	ldr	r3, [pc, #160]	@ (8008c64 <tcp_timewait_input+0xd8>)
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	db2d      	blt.n	8008c2a <tcp_timewait_input+0x9e>
 8008bce:	4b25      	ldr	r3, [pc, #148]	@ (8008c64 <tcp_timewait_input+0xd8>)
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bd6:	6879      	ldr	r1, [r7, #4]
 8008bd8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008bda:	440b      	add	r3, r1
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	dc23      	bgt.n	8008c2a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008be2:	4b21      	ldr	r3, [pc, #132]	@ (8008c68 <tcp_timewait_input+0xdc>)
 8008be4:	6819      	ldr	r1, [r3, #0]
 8008be6:	4b21      	ldr	r3, [pc, #132]	@ (8008c6c <tcp_timewait_input+0xe0>)
 8008be8:	881b      	ldrh	r3, [r3, #0]
 8008bea:	461a      	mov	r2, r3
 8008bec:	4b1d      	ldr	r3, [pc, #116]	@ (8008c64 <tcp_timewait_input+0xd8>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8008c70 <tcp_timewait_input+0xe4>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008bf6:	885b      	ldrh	r3, [r3, #2]
 8008bf8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008bfa:	4a1d      	ldr	r2, [pc, #116]	@ (8008c70 <tcp_timewait_input+0xe4>)
 8008bfc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008bfe:	8812      	ldrh	r2, [r2, #0]
 8008c00:	b292      	uxth	r2, r2
 8008c02:	9202      	str	r2, [sp, #8]
 8008c04:	9301      	str	r3, [sp, #4]
 8008c06:	4b1b      	ldr	r3, [pc, #108]	@ (8008c74 <tcp_timewait_input+0xe8>)
 8008c08:	9300      	str	r3, [sp, #0]
 8008c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8008c78 <tcp_timewait_input+0xec>)
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f002 fe6c 	bl	800b8ec <tcp_rst>
      return;
 8008c14:	e01b      	b.n	8008c4e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008c16:	4b0f      	ldr	r3, [pc, #60]	@ (8008c54 <tcp_timewait_input+0xc8>)
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	f003 0301 	and.w	r3, r3, #1
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d003      	beq.n	8008c2a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008c22:	4b16      	ldr	r3, [pc, #88]	@ (8008c7c <tcp_timewait_input+0xf0>)
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008c2a:	4b10      	ldr	r3, [pc, #64]	@ (8008c6c <tcp_timewait_input+0xe0>)
 8008c2c:	881b      	ldrh	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00c      	beq.n	8008c4c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	8b5b      	ldrh	r3, [r3, #26]
 8008c36:	f043 0302 	orr.w	r3, r3, #2
 8008c3a:	b29a      	uxth	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f002 f89f 	bl	800ad84 <tcp_output>
  }
  return;
 8008c46:	e001      	b.n	8008c4c <tcp_timewait_input+0xc0>
    return;
 8008c48:	bf00      	nop
 8008c4a:	e000      	b.n	8008c4e <tcp_timewait_input+0xc2>
  return;
 8008c4c:	bf00      	nop
}
 8008c4e:	3708      	adds	r7, #8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	200082dc 	.word	0x200082dc
 8008c58:	08010fdc 	.word	0x08010fdc
 8008c5c:	080111f4 	.word	0x080111f4
 8008c60:	08011028 	.word	0x08011028
 8008c64:	200082d0 	.word	0x200082d0
 8008c68:	200082d4 	.word	0x200082d4
 8008c6c:	200082da 	.word	0x200082da
 8008c70:	200082c0 	.word	0x200082c0
 8008c74:	20004d38 	.word	0x20004d38
 8008c78:	20004d3c 	.word	0x20004d3c
 8008c7c:	20008298 	.word	0x20008298

08008c80 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008c80:	b590      	push	{r4, r7, lr}
 8008c82:	b08d      	sub	sp, #52	@ 0x34
 8008c84:	af04      	add	r7, sp, #16
 8008c86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d106      	bne.n	8008ca4 <tcp_process+0x24>
 8008c96:	4b9d      	ldr	r3, [pc, #628]	@ (8008f0c <tcp_process+0x28c>)
 8008c98:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8008c9c:	499c      	ldr	r1, [pc, #624]	@ (8008f10 <tcp_process+0x290>)
 8008c9e:	489d      	ldr	r0, [pc, #628]	@ (8008f14 <tcp_process+0x294>)
 8008ca0:	f006 f95e 	bl	800ef60 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008ca4:	4b9c      	ldr	r3, [pc, #624]	@ (8008f18 <tcp_process+0x298>)
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	f003 0304 	and.w	r3, r3, #4
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d04e      	beq.n	8008d4e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	7d1b      	ldrb	r3, [r3, #20]
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d108      	bne.n	8008cca <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008cbc:	4b97      	ldr	r3, [pc, #604]	@ (8008f1c <tcp_process+0x29c>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d123      	bne.n	8008d0c <tcp_process+0x8c>
        acceptable = 1;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	76fb      	strb	r3, [r7, #27]
 8008cc8:	e020      	b.n	8008d0c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008cce:	4b94      	ldr	r3, [pc, #592]	@ (8008f20 <tcp_process+0x2a0>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d102      	bne.n	8008cdc <tcp_process+0x5c>
        acceptable = 1;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	76fb      	strb	r3, [r7, #27]
 8008cda:	e017      	b.n	8008d0c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008cdc:	4b90      	ldr	r3, [pc, #576]	@ (8008f20 <tcp_process+0x2a0>)
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ce4:	1ad3      	subs	r3, r2, r3
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	db10      	blt.n	8008d0c <tcp_process+0x8c>
 8008cea:	4b8d      	ldr	r3, [pc, #564]	@ (8008f20 <tcp_process+0x2a0>)
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cf2:	6879      	ldr	r1, [r7, #4]
 8008cf4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008cf6:	440b      	add	r3, r1
 8008cf8:	1ad3      	subs	r3, r2, r3
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	dc06      	bgt.n	8008d0c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	8b5b      	ldrh	r3, [r3, #26]
 8008d02:	f043 0302 	orr.w	r3, r3, #2
 8008d06:	b29a      	uxth	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008d0c:	7efb      	ldrb	r3, [r7, #27]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d01b      	beq.n	8008d4a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	7d1b      	ldrb	r3, [r3, #20]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d106      	bne.n	8008d28 <tcp_process+0xa8>
 8008d1a:	4b7c      	ldr	r3, [pc, #496]	@ (8008f0c <tcp_process+0x28c>)
 8008d1c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8008d20:	4980      	ldr	r1, [pc, #512]	@ (8008f24 <tcp_process+0x2a4>)
 8008d22:	487c      	ldr	r0, [pc, #496]	@ (8008f14 <tcp_process+0x294>)
 8008d24:	f006 f91c 	bl	800ef60 <iprintf>
      recv_flags |= TF_RESET;
 8008d28:	4b7f      	ldr	r3, [pc, #508]	@ (8008f28 <tcp_process+0x2a8>)
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	f043 0308 	orr.w	r3, r3, #8
 8008d30:	b2da      	uxtb	r2, r3
 8008d32:	4b7d      	ldr	r3, [pc, #500]	@ (8008f28 <tcp_process+0x2a8>)
 8008d34:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	8b5b      	ldrh	r3, [r3, #26]
 8008d3a:	f023 0301 	bic.w	r3, r3, #1
 8008d3e:	b29a      	uxth	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008d44:	f06f 030d 	mvn.w	r3, #13
 8008d48:	e37a      	b.n	8009440 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	e378      	b.n	8009440 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008d4e:	4b72      	ldr	r3, [pc, #456]	@ (8008f18 <tcp_process+0x298>)
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	f003 0302 	and.w	r3, r3, #2
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d010      	beq.n	8008d7c <tcp_process+0xfc>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	7d1b      	ldrb	r3, [r3, #20]
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d00c      	beq.n	8008d7c <tcp_process+0xfc>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	7d1b      	ldrb	r3, [r3, #20]
 8008d66:	2b03      	cmp	r3, #3
 8008d68:	d008      	beq.n	8008d7c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	8b5b      	ldrh	r3, [r3, #26]
 8008d6e:	f043 0302 	orr.w	r3, r3, #2
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	e361      	b.n	8009440 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	8b5b      	ldrh	r3, [r3, #26]
 8008d80:	f003 0310 	and.w	r3, r3, #16
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d103      	bne.n	8008d90 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008d88:	4b68      	ldr	r3, [pc, #416]	@ (8008f2c <tcp_process+0x2ac>)
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f001 fc2b 	bl	800a5fc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	7d1b      	ldrb	r3, [r3, #20]
 8008daa:	3b02      	subs	r3, #2
 8008dac:	2b07      	cmp	r3, #7
 8008dae:	f200 8337 	bhi.w	8009420 <tcp_process+0x7a0>
 8008db2:	a201      	add	r2, pc, #4	@ (adr r2, 8008db8 <tcp_process+0x138>)
 8008db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db8:	08008dd9 	.word	0x08008dd9
 8008dbc:	08009009 	.word	0x08009009
 8008dc0:	08009181 	.word	0x08009181
 8008dc4:	080091ab 	.word	0x080091ab
 8008dc8:	080092cf 	.word	0x080092cf
 8008dcc:	08009181 	.word	0x08009181
 8008dd0:	0800935b 	.word	0x0800935b
 8008dd4:	080093eb 	.word	0x080093eb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008dd8:	4b4f      	ldr	r3, [pc, #316]	@ (8008f18 <tcp_process+0x298>)
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	f003 0310 	and.w	r3, r3, #16
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f000 80e4 	beq.w	8008fae <tcp_process+0x32e>
 8008de6:	4b4c      	ldr	r3, [pc, #304]	@ (8008f18 <tcp_process+0x298>)
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	f003 0302 	and.w	r3, r3, #2
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	f000 80dd 	beq.w	8008fae <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008df8:	1c5a      	adds	r2, r3, #1
 8008dfa:	4b48      	ldr	r3, [pc, #288]	@ (8008f1c <tcp_process+0x29c>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	f040 80d5 	bne.w	8008fae <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008e04:	4b46      	ldr	r3, [pc, #280]	@ (8008f20 <tcp_process+0x2a0>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	1c5a      	adds	r2, r3, #1
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8008e16:	4b41      	ldr	r3, [pc, #260]	@ (8008f1c <tcp_process+0x29c>)
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008e1e:	4b44      	ldr	r3, [pc, #272]	@ (8008f30 <tcp_process+0x2b0>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	89db      	ldrh	r3, [r3, #14]
 8008e24:	b29a      	uxth	r2, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008e38:	4b39      	ldr	r3, [pc, #228]	@ (8008f20 <tcp_process+0x2a0>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	1e5a      	subs	r2, r3, #1
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2204      	movs	r2, #4
 8008e46:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	3304      	adds	r3, #4
 8008e50:	4618      	mov	r0, r3
 8008e52:	f004 fd99 	bl	800d988 <ip4_route>
 8008e56:	4601      	mov	r1, r0
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	3304      	adds	r3, #4
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	4620      	mov	r0, r4
 8008e60:	f7ff f88c 	bl	8007f7c <tcp_eff_send_mss_netif>
 8008e64:	4603      	mov	r3, r0
 8008e66:	461a      	mov	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008e70:	009a      	lsls	r2, r3, #2
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008e76:	005b      	lsls	r3, r3, #1
 8008e78:	f241 111c 	movw	r1, #4380	@ 0x111c
 8008e7c:	428b      	cmp	r3, r1
 8008e7e:	bf38      	it	cc
 8008e80:	460b      	movcc	r3, r1
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d204      	bcs.n	8008e90 <tcp_process+0x210>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	e00d      	b.n	8008eac <tcp_process+0x22c>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008e94:	005b      	lsls	r3, r3, #1
 8008e96:	f241 121c 	movw	r2, #4380	@ 0x111c
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d904      	bls.n	8008ea8 <tcp_process+0x228>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008ea2:	005b      	lsls	r3, r3, #1
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	e001      	b.n	8008eac <tcp_process+0x22c>
 8008ea8:	f241 131c 	movw	r3, #4380	@ 0x111c
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d106      	bne.n	8008eca <tcp_process+0x24a>
 8008ebc:	4b13      	ldr	r3, [pc, #76]	@ (8008f0c <tcp_process+0x28c>)
 8008ebe:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8008ec2:	491c      	ldr	r1, [pc, #112]	@ (8008f34 <tcp_process+0x2b4>)
 8008ec4:	4813      	ldr	r0, [pc, #76]	@ (8008f14 <tcp_process+0x294>)
 8008ec6:	f006 f84b 	bl	800ef60 <iprintf>
        --pcb->snd_queuelen;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ede:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d12a      	bne.n	8008f3c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008eea:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d106      	bne.n	8008f00 <tcp_process+0x280>
 8008ef2:	4b06      	ldr	r3, [pc, #24]	@ (8008f0c <tcp_process+0x28c>)
 8008ef4:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8008ef8:	490f      	ldr	r1, [pc, #60]	@ (8008f38 <tcp_process+0x2b8>)
 8008efa:	4806      	ldr	r0, [pc, #24]	@ (8008f14 <tcp_process+0x294>)
 8008efc:	f006 f830 	bl	800ef60 <iprintf>
          pcb->unsent = rseg->next;
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008f08:	e01c      	b.n	8008f44 <tcp_process+0x2c4>
 8008f0a:	bf00      	nop
 8008f0c:	08010fdc 	.word	0x08010fdc
 8008f10:	08011214 	.word	0x08011214
 8008f14:	08011028 	.word	0x08011028
 8008f18:	200082dc 	.word	0x200082dc
 8008f1c:	200082d4 	.word	0x200082d4
 8008f20:	200082d0 	.word	0x200082d0
 8008f24:	08011230 	.word	0x08011230
 8008f28:	200082dd 	.word	0x200082dd
 8008f2c:	20008298 	.word	0x20008298
 8008f30:	200082c0 	.word	0x200082c0
 8008f34:	08011250 	.word	0x08011250
 8008f38:	08011268 	.word	0x08011268
        } else {
          pcb->unacked = rseg->next;
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8008f44:	69f8      	ldr	r0, [r7, #28]
 8008f46:	f7fe fd22 	bl	800798e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d104      	bne.n	8008f5c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008f58:	861a      	strh	r2, [r3, #48]	@ 0x30
 8008f5a:	e006      	b.n	8008f6a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2200      	movs	r2, #0
 8008f66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00a      	beq.n	8008f8a <tcp_process+0x30a>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	6910      	ldr	r0, [r2, #16]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	6879      	ldr	r1, [r7, #4]
 8008f82:	4798      	blx	r3
 8008f84:	4603      	mov	r3, r0
 8008f86:	76bb      	strb	r3, [r7, #26]
 8008f88:	e001      	b.n	8008f8e <tcp_process+0x30e>
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008f8e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008f92:	f113 0f0d 	cmn.w	r3, #13
 8008f96:	d102      	bne.n	8008f9e <tcp_process+0x31e>
          return ERR_ABRT;
 8008f98:	f06f 030c 	mvn.w	r3, #12
 8008f9c:	e250      	b.n	8009440 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	8b5b      	ldrh	r3, [r3, #26]
 8008fa2:	f043 0302 	orr.w	r3, r3, #2
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008fac:	e23a      	b.n	8009424 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008fae:	4b98      	ldr	r3, [pc, #608]	@ (8009210 <tcp_process+0x590>)
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	f003 0310 	and.w	r3, r3, #16
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	f000 8234 	beq.w	8009424 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008fbc:	4b95      	ldr	r3, [pc, #596]	@ (8009214 <tcp_process+0x594>)
 8008fbe:	6819      	ldr	r1, [r3, #0]
 8008fc0:	4b95      	ldr	r3, [pc, #596]	@ (8009218 <tcp_process+0x598>)
 8008fc2:	881b      	ldrh	r3, [r3, #0]
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	4b95      	ldr	r3, [pc, #596]	@ (800921c <tcp_process+0x59c>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008fcc:	4b94      	ldr	r3, [pc, #592]	@ (8009220 <tcp_process+0x5a0>)
 8008fce:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008fd0:	885b      	ldrh	r3, [r3, #2]
 8008fd2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008fd4:	4a92      	ldr	r2, [pc, #584]	@ (8009220 <tcp_process+0x5a0>)
 8008fd6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008fd8:	8812      	ldrh	r2, [r2, #0]
 8008fda:	b292      	uxth	r2, r2
 8008fdc:	9202      	str	r2, [sp, #8]
 8008fde:	9301      	str	r3, [sp, #4]
 8008fe0:	4b90      	ldr	r3, [pc, #576]	@ (8009224 <tcp_process+0x5a4>)
 8008fe2:	9300      	str	r3, [sp, #0]
 8008fe4:	4b90      	ldr	r3, [pc, #576]	@ (8009228 <tcp_process+0x5a8>)
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f002 fc7f 	bl	800b8ec <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ff4:	2b05      	cmp	r3, #5
 8008ff6:	f200 8215 	bhi.w	8009424 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f002 fa4b 	bl	800b49c <tcp_rexmit_rto>
      break;
 8009006:	e20d      	b.n	8009424 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009008:	4b81      	ldr	r3, [pc, #516]	@ (8009210 <tcp_process+0x590>)
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	f003 0310 	and.w	r3, r3, #16
 8009010:	2b00      	cmp	r3, #0
 8009012:	f000 80a1 	beq.w	8009158 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009016:	4b7f      	ldr	r3, [pc, #508]	@ (8009214 <tcp_process+0x594>)
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	3b01      	subs	r3, #1
 8009022:	2b00      	cmp	r3, #0
 8009024:	db7e      	blt.n	8009124 <tcp_process+0x4a4>
 8009026:	4b7b      	ldr	r3, [pc, #492]	@ (8009214 <tcp_process+0x594>)
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800902e:	1ad3      	subs	r3, r2, r3
 8009030:	2b00      	cmp	r3, #0
 8009032:	dc77      	bgt.n	8009124 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2204      	movs	r2, #4
 8009038:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800903e:	2b00      	cmp	r3, #0
 8009040:	d102      	bne.n	8009048 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8009042:	23fa      	movs	r3, #250	@ 0xfa
 8009044:	76bb      	strb	r3, [r7, #26]
 8009046:	e01d      	b.n	8009084 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800904c:	699b      	ldr	r3, [r3, #24]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d106      	bne.n	8009060 <tcp_process+0x3e0>
 8009052:	4b76      	ldr	r3, [pc, #472]	@ (800922c <tcp_process+0x5ac>)
 8009054:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8009058:	4975      	ldr	r1, [pc, #468]	@ (8009230 <tcp_process+0x5b0>)
 800905a:	4876      	ldr	r0, [pc, #472]	@ (8009234 <tcp_process+0x5b4>)
 800905c:	f005 ff80 	bl	800ef60 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009064:	699b      	ldr	r3, [r3, #24]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00a      	beq.n	8009080 <tcp_process+0x400>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800906e:	699b      	ldr	r3, [r3, #24]
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	6910      	ldr	r0, [r2, #16]
 8009074:	2200      	movs	r2, #0
 8009076:	6879      	ldr	r1, [r7, #4]
 8009078:	4798      	blx	r3
 800907a:	4603      	mov	r3, r0
 800907c:	76bb      	strb	r3, [r7, #26]
 800907e:	e001      	b.n	8009084 <tcp_process+0x404>
 8009080:	23f0      	movs	r3, #240	@ 0xf0
 8009082:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8009084:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00a      	beq.n	80090a2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800908c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009090:	f113 0f0d 	cmn.w	r3, #13
 8009094:	d002      	beq.n	800909c <tcp_process+0x41c>
              tcp_abort(pcb);
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f7fd ff8c 	bl	8006fb4 <tcp_abort>
            }
            return ERR_ABRT;
 800909c:	f06f 030c 	mvn.w	r3, #12
 80090a0:	e1ce      	b.n	8009440 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fae0 	bl	8009668 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80090a8:	4b63      	ldr	r3, [pc, #396]	@ (8009238 <tcp_process+0x5b8>)
 80090aa:	881b      	ldrh	r3, [r3, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d005      	beq.n	80090bc <tcp_process+0x43c>
            recv_acked--;
 80090b0:	4b61      	ldr	r3, [pc, #388]	@ (8009238 <tcp_process+0x5b8>)
 80090b2:	881b      	ldrh	r3, [r3, #0]
 80090b4:	3b01      	subs	r3, #1
 80090b6:	b29a      	uxth	r2, r3
 80090b8:	4b5f      	ldr	r3, [pc, #380]	@ (8009238 <tcp_process+0x5b8>)
 80090ba:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80090c0:	009a      	lsls	r2, r3, #2
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80090c6:	005b      	lsls	r3, r3, #1
 80090c8:	f241 111c 	movw	r1, #4380	@ 0x111c
 80090cc:	428b      	cmp	r3, r1
 80090ce:	bf38      	it	cc
 80090d0:	460b      	movcc	r3, r1
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d204      	bcs.n	80090e0 <tcp_process+0x460>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	b29b      	uxth	r3, r3
 80090de:	e00d      	b.n	80090fc <tcp_process+0x47c>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80090e4:	005b      	lsls	r3, r3, #1
 80090e6:	f241 121c 	movw	r2, #4380	@ 0x111c
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d904      	bls.n	80090f8 <tcp_process+0x478>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80090f2:	005b      	lsls	r3, r3, #1
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	e001      	b.n	80090fc <tcp_process+0x47c>
 80090f8:	f241 131c 	movw	r3, #4380	@ 0x111c
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009102:	4b4e      	ldr	r3, [pc, #312]	@ (800923c <tcp_process+0x5bc>)
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	f003 0320 	and.w	r3, r3, #32
 800910a:	2b00      	cmp	r3, #0
 800910c:	d037      	beq.n	800917e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	8b5b      	ldrh	r3, [r3, #26]
 8009112:	f043 0302 	orr.w	r3, r3, #2
 8009116:	b29a      	uxth	r2, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2207      	movs	r2, #7
 8009120:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009122:	e02c      	b.n	800917e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009124:	4b3b      	ldr	r3, [pc, #236]	@ (8009214 <tcp_process+0x594>)
 8009126:	6819      	ldr	r1, [r3, #0]
 8009128:	4b3b      	ldr	r3, [pc, #236]	@ (8009218 <tcp_process+0x598>)
 800912a:	881b      	ldrh	r3, [r3, #0]
 800912c:	461a      	mov	r2, r3
 800912e:	4b3b      	ldr	r3, [pc, #236]	@ (800921c <tcp_process+0x59c>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009134:	4b3a      	ldr	r3, [pc, #232]	@ (8009220 <tcp_process+0x5a0>)
 8009136:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009138:	885b      	ldrh	r3, [r3, #2]
 800913a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800913c:	4a38      	ldr	r2, [pc, #224]	@ (8009220 <tcp_process+0x5a0>)
 800913e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009140:	8812      	ldrh	r2, [r2, #0]
 8009142:	b292      	uxth	r2, r2
 8009144:	9202      	str	r2, [sp, #8]
 8009146:	9301      	str	r3, [sp, #4]
 8009148:	4b36      	ldr	r3, [pc, #216]	@ (8009224 <tcp_process+0x5a4>)
 800914a:	9300      	str	r3, [sp, #0]
 800914c:	4b36      	ldr	r3, [pc, #216]	@ (8009228 <tcp_process+0x5a8>)
 800914e:	4602      	mov	r2, r0
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f002 fbcb 	bl	800b8ec <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8009156:	e167      	b.n	8009428 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009158:	4b2d      	ldr	r3, [pc, #180]	@ (8009210 <tcp_process+0x590>)
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	f003 0302 	and.w	r3, r3, #2
 8009160:	2b00      	cmp	r3, #0
 8009162:	f000 8161 	beq.w	8009428 <tcp_process+0x7a8>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800916a:	1e5a      	subs	r2, r3, #1
 800916c:	4b2b      	ldr	r3, [pc, #172]	@ (800921c <tcp_process+0x59c>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	429a      	cmp	r2, r3
 8009172:	f040 8159 	bne.w	8009428 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f002 f9b2 	bl	800b4e0 <tcp_rexmit>
      break;
 800917c:	e154      	b.n	8009428 <tcp_process+0x7a8>
 800917e:	e153      	b.n	8009428 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 fa71 	bl	8009668 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009186:	4b2d      	ldr	r3, [pc, #180]	@ (800923c <tcp_process+0x5bc>)
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	f003 0320 	and.w	r3, r3, #32
 800918e:	2b00      	cmp	r3, #0
 8009190:	f000 814c 	beq.w	800942c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	8b5b      	ldrh	r3, [r3, #26]
 8009198:	f043 0302 	orr.w	r3, r3, #2
 800919c:	b29a      	uxth	r2, r3
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2207      	movs	r2, #7
 80091a6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80091a8:	e140      	b.n	800942c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fa5c 	bl	8009668 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80091b0:	4b22      	ldr	r3, [pc, #136]	@ (800923c <tcp_process+0x5bc>)
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	f003 0320 	and.w	r3, r3, #32
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d071      	beq.n	80092a0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80091bc:	4b14      	ldr	r3, [pc, #80]	@ (8009210 <tcp_process+0x590>)
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	f003 0310 	and.w	r3, r3, #16
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d060      	beq.n	800928a <tcp_process+0x60a>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80091cc:	4b11      	ldr	r3, [pc, #68]	@ (8009214 <tcp_process+0x594>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d15a      	bne.n	800928a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d156      	bne.n	800928a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	8b5b      	ldrh	r3, [r3, #26]
 80091e0:	f043 0302 	orr.w	r3, r3, #2
 80091e4:	b29a      	uxth	r2, r3
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f7fe fdbc 	bl	8007d68 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80091f0:	4b13      	ldr	r3, [pc, #76]	@ (8009240 <tcp_process+0x5c0>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d105      	bne.n	8009206 <tcp_process+0x586>
 80091fa:	4b11      	ldr	r3, [pc, #68]	@ (8009240 <tcp_process+0x5c0>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	4a0f      	ldr	r2, [pc, #60]	@ (8009240 <tcp_process+0x5c0>)
 8009202:	6013      	str	r3, [r2, #0]
 8009204:	e02e      	b.n	8009264 <tcp_process+0x5e4>
 8009206:	4b0e      	ldr	r3, [pc, #56]	@ (8009240 <tcp_process+0x5c0>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	617b      	str	r3, [r7, #20]
 800920c:	e027      	b.n	800925e <tcp_process+0x5de>
 800920e:	bf00      	nop
 8009210:	200082dc 	.word	0x200082dc
 8009214:	200082d4 	.word	0x200082d4
 8009218:	200082da 	.word	0x200082da
 800921c:	200082d0 	.word	0x200082d0
 8009220:	200082c0 	.word	0x200082c0
 8009224:	20004d38 	.word	0x20004d38
 8009228:	20004d3c 	.word	0x20004d3c
 800922c:	08010fdc 	.word	0x08010fdc
 8009230:	0801127c 	.word	0x0801127c
 8009234:	08011028 	.word	0x08011028
 8009238:	200082d8 	.word	0x200082d8
 800923c:	200082dd 	.word	0x200082dd
 8009240:	200082a4 	.word	0x200082a4
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	429a      	cmp	r2, r3
 800924c:	d104      	bne.n	8009258 <tcp_process+0x5d8>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	68da      	ldr	r2, [r3, #12]
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	60da      	str	r2, [r3, #12]
 8009256:	e005      	b.n	8009264 <tcp_process+0x5e4>
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	617b      	str	r3, [r7, #20]
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1ef      	bne.n	8009244 <tcp_process+0x5c4>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	60da      	str	r2, [r3, #12]
 800926a:	4b77      	ldr	r3, [pc, #476]	@ (8009448 <tcp_process+0x7c8>)
 800926c:	2201      	movs	r2, #1
 800926e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	220a      	movs	r2, #10
 8009274:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009276:	4b75      	ldr	r3, [pc, #468]	@ (800944c <tcp_process+0x7cc>)
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	60da      	str	r2, [r3, #12]
 800927e:	4a73      	ldr	r2, [pc, #460]	@ (800944c <tcp_process+0x7cc>)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6013      	str	r3, [r2, #0]
 8009284:	f002 fcf4 	bl	800bc70 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009288:	e0d2      	b.n	8009430 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	8b5b      	ldrh	r3, [r3, #26]
 800928e:	f043 0302 	orr.w	r3, r3, #2
 8009292:	b29a      	uxth	r2, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2208      	movs	r2, #8
 800929c:	751a      	strb	r2, [r3, #20]
      break;
 800929e:	e0c7      	b.n	8009430 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80092a0:	4b6b      	ldr	r3, [pc, #428]	@ (8009450 <tcp_process+0x7d0>)
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	f003 0310 	and.w	r3, r3, #16
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f000 80c1 	beq.w	8009430 <tcp_process+0x7b0>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80092b2:	4b68      	ldr	r3, [pc, #416]	@ (8009454 <tcp_process+0x7d4>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	f040 80ba 	bne.w	8009430 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f040 80b5 	bne.w	8009430 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2206      	movs	r2, #6
 80092ca:	751a      	strb	r2, [r3, #20]
      break;
 80092cc:	e0b0      	b.n	8009430 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f9ca 	bl	8009668 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80092d4:	4b60      	ldr	r3, [pc, #384]	@ (8009458 <tcp_process+0x7d8>)
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	f003 0320 	and.w	r3, r3, #32
 80092dc:	2b00      	cmp	r3, #0
 80092de:	f000 80a9 	beq.w	8009434 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	8b5b      	ldrh	r3, [r3, #26]
 80092e6:	f043 0302 	orr.w	r3, r3, #2
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f7fe fd39 	bl	8007d68 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80092f6:	4b59      	ldr	r3, [pc, #356]	@ (800945c <tcp_process+0x7dc>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d105      	bne.n	800930c <tcp_process+0x68c>
 8009300:	4b56      	ldr	r3, [pc, #344]	@ (800945c <tcp_process+0x7dc>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	4a55      	ldr	r2, [pc, #340]	@ (800945c <tcp_process+0x7dc>)
 8009308:	6013      	str	r3, [r2, #0]
 800930a:	e013      	b.n	8009334 <tcp_process+0x6b4>
 800930c:	4b53      	ldr	r3, [pc, #332]	@ (800945c <tcp_process+0x7dc>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	613b      	str	r3, [r7, #16]
 8009312:	e00c      	b.n	800932e <tcp_process+0x6ae>
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	429a      	cmp	r2, r3
 800931c:	d104      	bne.n	8009328 <tcp_process+0x6a8>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	68da      	ldr	r2, [r3, #12]
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	60da      	str	r2, [r3, #12]
 8009326:	e005      	b.n	8009334 <tcp_process+0x6b4>
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	613b      	str	r3, [r7, #16]
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1ef      	bne.n	8009314 <tcp_process+0x694>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	60da      	str	r2, [r3, #12]
 800933a:	4b43      	ldr	r3, [pc, #268]	@ (8009448 <tcp_process+0x7c8>)
 800933c:	2201      	movs	r2, #1
 800933e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	220a      	movs	r2, #10
 8009344:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009346:	4b41      	ldr	r3, [pc, #260]	@ (800944c <tcp_process+0x7cc>)
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	60da      	str	r2, [r3, #12]
 800934e:	4a3f      	ldr	r2, [pc, #252]	@ (800944c <tcp_process+0x7cc>)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6013      	str	r3, [r2, #0]
 8009354:	f002 fc8c 	bl	800bc70 <tcp_timer_needed>
      }
      break;
 8009358:	e06c      	b.n	8009434 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f984 	bl	8009668 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009360:	4b3b      	ldr	r3, [pc, #236]	@ (8009450 <tcp_process+0x7d0>)
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	f003 0310 	and.w	r3, r3, #16
 8009368:	2b00      	cmp	r3, #0
 800936a:	d065      	beq.n	8009438 <tcp_process+0x7b8>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009370:	4b38      	ldr	r3, [pc, #224]	@ (8009454 <tcp_process+0x7d4>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	429a      	cmp	r2, r3
 8009376:	d15f      	bne.n	8009438 <tcp_process+0x7b8>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800937c:	2b00      	cmp	r3, #0
 800937e:	d15b      	bne.n	8009438 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f7fe fcf1 	bl	8007d68 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009386:	4b35      	ldr	r3, [pc, #212]	@ (800945c <tcp_process+0x7dc>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	429a      	cmp	r2, r3
 800938e:	d105      	bne.n	800939c <tcp_process+0x71c>
 8009390:	4b32      	ldr	r3, [pc, #200]	@ (800945c <tcp_process+0x7dc>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	4a31      	ldr	r2, [pc, #196]	@ (800945c <tcp_process+0x7dc>)
 8009398:	6013      	str	r3, [r2, #0]
 800939a:	e013      	b.n	80093c4 <tcp_process+0x744>
 800939c:	4b2f      	ldr	r3, [pc, #188]	@ (800945c <tcp_process+0x7dc>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	60fb      	str	r3, [r7, #12]
 80093a2:	e00c      	b.n	80093be <tcp_process+0x73e>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d104      	bne.n	80093b8 <tcp_process+0x738>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	68da      	ldr	r2, [r3, #12]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	60da      	str	r2, [r3, #12]
 80093b6:	e005      	b.n	80093c4 <tcp_process+0x744>
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	60fb      	str	r3, [r7, #12]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d1ef      	bne.n	80093a4 <tcp_process+0x724>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	60da      	str	r2, [r3, #12]
 80093ca:	4b1f      	ldr	r3, [pc, #124]	@ (8009448 <tcp_process+0x7c8>)
 80093cc:	2201      	movs	r2, #1
 80093ce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	220a      	movs	r2, #10
 80093d4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80093d6:	4b1d      	ldr	r3, [pc, #116]	@ (800944c <tcp_process+0x7cc>)
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	60da      	str	r2, [r3, #12]
 80093de:	4a1b      	ldr	r2, [pc, #108]	@ (800944c <tcp_process+0x7cc>)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6013      	str	r3, [r2, #0]
 80093e4:	f002 fc44 	bl	800bc70 <tcp_timer_needed>
      }
      break;
 80093e8:	e026      	b.n	8009438 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f93c 	bl	8009668 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80093f0:	4b17      	ldr	r3, [pc, #92]	@ (8009450 <tcp_process+0x7d0>)
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	f003 0310 	and.w	r3, r3, #16
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d01f      	beq.n	800943c <tcp_process+0x7bc>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009400:	4b14      	ldr	r3, [pc, #80]	@ (8009454 <tcp_process+0x7d4>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	429a      	cmp	r2, r3
 8009406:	d119      	bne.n	800943c <tcp_process+0x7bc>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800940c:	2b00      	cmp	r3, #0
 800940e:	d115      	bne.n	800943c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009410:	4b11      	ldr	r3, [pc, #68]	@ (8009458 <tcp_process+0x7d8>)
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	f043 0310 	orr.w	r3, r3, #16
 8009418:	b2da      	uxtb	r2, r3
 800941a:	4b0f      	ldr	r3, [pc, #60]	@ (8009458 <tcp_process+0x7d8>)
 800941c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800941e:	e00d      	b.n	800943c <tcp_process+0x7bc>
    default:
      break;
 8009420:	bf00      	nop
 8009422:	e00c      	b.n	800943e <tcp_process+0x7be>
      break;
 8009424:	bf00      	nop
 8009426:	e00a      	b.n	800943e <tcp_process+0x7be>
      break;
 8009428:	bf00      	nop
 800942a:	e008      	b.n	800943e <tcp_process+0x7be>
      break;
 800942c:	bf00      	nop
 800942e:	e006      	b.n	800943e <tcp_process+0x7be>
      break;
 8009430:	bf00      	nop
 8009432:	e004      	b.n	800943e <tcp_process+0x7be>
      break;
 8009434:	bf00      	nop
 8009436:	e002      	b.n	800943e <tcp_process+0x7be>
      break;
 8009438:	bf00      	nop
 800943a:	e000      	b.n	800943e <tcp_process+0x7be>
      break;
 800943c:	bf00      	nop
  }
  return ERR_OK;
 800943e:	2300      	movs	r3, #0
}
 8009440:	4618      	mov	r0, r3
 8009442:	3724      	adds	r7, #36	@ 0x24
 8009444:	46bd      	mov	sp, r7
 8009446:	bd90      	pop	{r4, r7, pc}
 8009448:	200082ac 	.word	0x200082ac
 800944c:	200082a8 	.word	0x200082a8
 8009450:	200082dc 	.word	0x200082dc
 8009454:	200082d4 	.word	0x200082d4
 8009458:	200082dd 	.word	0x200082dd
 800945c:	200082a4 	.word	0x200082a4

08009460 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009460:	b590      	push	{r4, r7, lr}
 8009462:	b085      	sub	sp, #20
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d106      	bne.n	800947e <tcp_oos_insert_segment+0x1e>
 8009470:	4b3b      	ldr	r3, [pc, #236]	@ (8009560 <tcp_oos_insert_segment+0x100>)
 8009472:	f240 421f 	movw	r2, #1055	@ 0x41f
 8009476:	493b      	ldr	r1, [pc, #236]	@ (8009564 <tcp_oos_insert_segment+0x104>)
 8009478:	483b      	ldr	r0, [pc, #236]	@ (8009568 <tcp_oos_insert_segment+0x108>)
 800947a:	f005 fd71 	bl	800ef60 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	899b      	ldrh	r3, [r3, #12]
 8009484:	b29b      	uxth	r3, r3
 8009486:	4618      	mov	r0, r3
 8009488:	f7fb fc9e 	bl	8004dc8 <lwip_htons>
 800948c:	4603      	mov	r3, r0
 800948e:	b2db      	uxtb	r3, r3
 8009490:	f003 0301 	and.w	r3, r3, #1
 8009494:	2b00      	cmp	r3, #0
 8009496:	d028      	beq.n	80094ea <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009498:	6838      	ldr	r0, [r7, #0]
 800949a:	f7fe fa63 	bl	8007964 <tcp_segs_free>
    next = NULL;
 800949e:	2300      	movs	r3, #0
 80094a0:	603b      	str	r3, [r7, #0]
 80094a2:	e056      	b.n	8009552 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	899b      	ldrh	r3, [r3, #12]
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7fb fc8b 	bl	8004dc8 <lwip_htons>
 80094b2:	4603      	mov	r3, r0
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	f003 0301 	and.w	r3, r3, #1
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00d      	beq.n	80094da <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	899b      	ldrh	r3, [r3, #12]
 80094c4:	b29c      	uxth	r4, r3
 80094c6:	2001      	movs	r0, #1
 80094c8:	f7fb fc7e 	bl	8004dc8 <lwip_htons>
 80094cc:	4603      	mov	r3, r0
 80094ce:	461a      	mov	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	4322      	orrs	r2, r4
 80094d6:	b292      	uxth	r2, r2
 80094d8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f7fe fa52 	bl	800798e <tcp_seg_free>
    while (next &&
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00e      	beq.n	800950e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	891b      	ldrh	r3, [r3, #8]
 80094f4:	461a      	mov	r2, r3
 80094f6:	4b1d      	ldr	r3, [pc, #116]	@ (800956c <tcp_oos_insert_segment+0x10c>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	441a      	add	r2, r3
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	6839      	ldr	r1, [r7, #0]
 8009504:	8909      	ldrh	r1, [r1, #8]
 8009506:	440b      	add	r3, r1
 8009508:	1ad3      	subs	r3, r2, r3
    while (next &&
 800950a:	2b00      	cmp	r3, #0
 800950c:	daca      	bge.n	80094a4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d01e      	beq.n	8009552 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	891b      	ldrh	r3, [r3, #8]
 8009518:	461a      	mov	r2, r3
 800951a:	4b14      	ldr	r3, [pc, #80]	@ (800956c <tcp_oos_insert_segment+0x10c>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	441a      	add	r2, r3
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009528:	2b00      	cmp	r3, #0
 800952a:	dd12      	ble.n	8009552 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	b29a      	uxth	r2, r3
 8009534:	4b0d      	ldr	r3, [pc, #52]	@ (800956c <tcp_oos_insert_segment+0x10c>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	b29b      	uxth	r3, r3
 800953a:	1ad3      	subs	r3, r2, r3
 800953c:	b29a      	uxth	r2, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	685a      	ldr	r2, [r3, #4]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	891b      	ldrh	r3, [r3, #8]
 800954a:	4619      	mov	r1, r3
 800954c:	4610      	mov	r0, r2
 800954e:	f7fc fe13 	bl	8006178 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	683a      	ldr	r2, [r7, #0]
 8009556:	601a      	str	r2, [r3, #0]
}
 8009558:	bf00      	nop
 800955a:	3714      	adds	r7, #20
 800955c:	46bd      	mov	sp, r7
 800955e:	bd90      	pop	{r4, r7, pc}
 8009560:	08010fdc 	.word	0x08010fdc
 8009564:	0801129c 	.word	0x0801129c
 8009568:	08011028 	.word	0x08011028
 800956c:	200082d0 	.word	0x200082d0

08009570 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009570:	b5b0      	push	{r4, r5, r7, lr}
 8009572:	b086      	sub	sp, #24
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]
 800957c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800957e:	e03e      	b.n	80095fe <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	4618      	mov	r0, r3
 8009590:	f7fd f800 	bl	8006594 <pbuf_clen>
 8009594:	4603      	mov	r3, r0
 8009596:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800959e:	8a7a      	ldrh	r2, [r7, #18]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d906      	bls.n	80095b2 <tcp_free_acked_segments+0x42>
 80095a4:	4b2a      	ldr	r3, [pc, #168]	@ (8009650 <tcp_free_acked_segments+0xe0>)
 80095a6:	f240 4257 	movw	r2, #1111	@ 0x457
 80095aa:	492a      	ldr	r1, [pc, #168]	@ (8009654 <tcp_free_acked_segments+0xe4>)
 80095ac:	482a      	ldr	r0, [pc, #168]	@ (8009658 <tcp_free_acked_segments+0xe8>)
 80095ae:	f005 fcd7 	bl	800ef60 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80095b8:	8a7b      	ldrh	r3, [r7, #18]
 80095ba:	1ad3      	subs	r3, r2, r3
 80095bc:	b29a      	uxth	r2, r3
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	891a      	ldrh	r2, [r3, #8]
 80095c8:	4b24      	ldr	r3, [pc, #144]	@ (800965c <tcp_free_acked_segments+0xec>)
 80095ca:	881b      	ldrh	r3, [r3, #0]
 80095cc:	4413      	add	r3, r2
 80095ce:	b29a      	uxth	r2, r3
 80095d0:	4b22      	ldr	r3, [pc, #136]	@ (800965c <tcp_free_acked_segments+0xec>)
 80095d2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80095d4:	6978      	ldr	r0, [r7, #20]
 80095d6:	f7fe f9da 	bl	800798e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00c      	beq.n	80095fe <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d109      	bne.n	80095fe <tcp_free_acked_segments+0x8e>
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d106      	bne.n	80095fe <tcp_free_acked_segments+0x8e>
 80095f0:	4b17      	ldr	r3, [pc, #92]	@ (8009650 <tcp_free_acked_segments+0xe0>)
 80095f2:	f240 4261 	movw	r2, #1121	@ 0x461
 80095f6:	491a      	ldr	r1, [pc, #104]	@ (8009660 <tcp_free_acked_segments+0xf0>)
 80095f8:	4817      	ldr	r0, [pc, #92]	@ (8009658 <tcp_free_acked_segments+0xe8>)
 80095fa:	f005 fcb1 	bl	800ef60 <iprintf>
  while (seg_list != NULL &&
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d020      	beq.n	8009646 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	4618      	mov	r0, r3
 800960c:	f7fb fbf2 	bl	8004df4 <lwip_htonl>
 8009610:	4604      	mov	r4, r0
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	891b      	ldrh	r3, [r3, #8]
 8009616:	461d      	mov	r5, r3
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	899b      	ldrh	r3, [r3, #12]
 800961e:	b29b      	uxth	r3, r3
 8009620:	4618      	mov	r0, r3
 8009622:	f7fb fbd1 	bl	8004dc8 <lwip_htons>
 8009626:	4603      	mov	r3, r0
 8009628:	b2db      	uxtb	r3, r3
 800962a:	f003 0303 	and.w	r3, r3, #3
 800962e:	2b00      	cmp	r3, #0
 8009630:	d001      	beq.n	8009636 <tcp_free_acked_segments+0xc6>
 8009632:	2301      	movs	r3, #1
 8009634:	e000      	b.n	8009638 <tcp_free_acked_segments+0xc8>
 8009636:	2300      	movs	r3, #0
 8009638:	442b      	add	r3, r5
 800963a:	18e2      	adds	r2, r4, r3
 800963c:	4b09      	ldr	r3, [pc, #36]	@ (8009664 <tcp_free_acked_segments+0xf4>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009642:	2b00      	cmp	r3, #0
 8009644:	dd9c      	ble.n	8009580 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009646:	68bb      	ldr	r3, [r7, #8]
}
 8009648:	4618      	mov	r0, r3
 800964a:	3718      	adds	r7, #24
 800964c:	46bd      	mov	sp, r7
 800964e:	bdb0      	pop	{r4, r5, r7, pc}
 8009650:	08010fdc 	.word	0x08010fdc
 8009654:	080112c4 	.word	0x080112c4
 8009658:	08011028 	.word	0x08011028
 800965c:	200082d8 	.word	0x200082d8
 8009660:	080112ec 	.word	0x080112ec
 8009664:	200082d4 	.word	0x200082d4

08009668 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009668:	b5b0      	push	{r4, r5, r7, lr}
 800966a:	b094      	sub	sp, #80	@ 0x50
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009670:	2300      	movs	r3, #0
 8009672:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d106      	bne.n	8009688 <tcp_receive+0x20>
 800967a:	4b91      	ldr	r3, [pc, #580]	@ (80098c0 <tcp_receive+0x258>)
 800967c:	f240 427b 	movw	r2, #1147	@ 0x47b
 8009680:	4990      	ldr	r1, [pc, #576]	@ (80098c4 <tcp_receive+0x25c>)
 8009682:	4891      	ldr	r0, [pc, #580]	@ (80098c8 <tcp_receive+0x260>)
 8009684:	f005 fc6c 	bl	800ef60 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	7d1b      	ldrb	r3, [r3, #20]
 800968c:	2b03      	cmp	r3, #3
 800968e:	d806      	bhi.n	800969e <tcp_receive+0x36>
 8009690:	4b8b      	ldr	r3, [pc, #556]	@ (80098c0 <tcp_receive+0x258>)
 8009692:	f240 427c 	movw	r2, #1148	@ 0x47c
 8009696:	498d      	ldr	r1, [pc, #564]	@ (80098cc <tcp_receive+0x264>)
 8009698:	488b      	ldr	r0, [pc, #556]	@ (80098c8 <tcp_receive+0x260>)
 800969a:	f005 fc61 	bl	800ef60 <iprintf>

  if (flags & TCP_ACK) {
 800969e:	4b8c      	ldr	r3, [pc, #560]	@ (80098d0 <tcp_receive+0x268>)
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	f003 0310 	and.w	r3, r3, #16
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f000 8264 	beq.w	8009b74 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80096b2:	461a      	mov	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096b8:	4413      	add	r3, r2
 80096ba:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80096c0:	4b84      	ldr	r3, [pc, #528]	@ (80098d4 <tcp_receive+0x26c>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	1ad3      	subs	r3, r2, r3
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	db1b      	blt.n	8009702 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80096ce:	4b81      	ldr	r3, [pc, #516]	@ (80098d4 <tcp_receive+0x26c>)
 80096d0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d106      	bne.n	80096e4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80096da:	4b7f      	ldr	r3, [pc, #508]	@ (80098d8 <tcp_receive+0x270>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	1ad3      	subs	r3, r2, r3
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	db0e      	blt.n	8009702 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80096e8:	4b7b      	ldr	r3, [pc, #492]	@ (80098d8 <tcp_receive+0x270>)
 80096ea:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d125      	bne.n	800973c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80096f0:	4b7a      	ldr	r3, [pc, #488]	@ (80098dc <tcp_receive+0x274>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	89db      	ldrh	r3, [r3, #14]
 80096f6:	b29a      	uxth	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80096fe:	429a      	cmp	r2, r3
 8009700:	d91c      	bls.n	800973c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009702:	4b76      	ldr	r3, [pc, #472]	@ (80098dc <tcp_receive+0x274>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	89db      	ldrh	r3, [r3, #14]
 8009708:	b29a      	uxth	r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800971c:	429a      	cmp	r2, r3
 800971e:	d205      	bcs.n	800972c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800972c:	4b69      	ldr	r3, [pc, #420]	@ (80098d4 <tcp_receive+0x26c>)
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8009734:	4b68      	ldr	r3, [pc, #416]	@ (80098d8 <tcp_receive+0x270>)
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800973c:	4b66      	ldr	r3, [pc, #408]	@ (80098d8 <tcp_receive+0x270>)
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009744:	1ad3      	subs	r3, r2, r3
 8009746:	2b00      	cmp	r3, #0
 8009748:	dc58      	bgt.n	80097fc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800974a:	4b65      	ldr	r3, [pc, #404]	@ (80098e0 <tcp_receive+0x278>)
 800974c:	881b      	ldrh	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d14b      	bne.n	80097ea <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800975c:	4413      	add	r3, r2
 800975e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009760:	429a      	cmp	r2, r3
 8009762:	d142      	bne.n	80097ea <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800976a:	2b00      	cmp	r3, #0
 800976c:	db3d      	blt.n	80097ea <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009772:	4b59      	ldr	r3, [pc, #356]	@ (80098d8 <tcp_receive+0x270>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	429a      	cmp	r2, r3
 8009778:	d137      	bne.n	80097ea <tcp_receive+0x182>
              found_dupack = 1;
 800977a:	2301      	movs	r3, #1
 800977c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009784:	2bff      	cmp	r3, #255	@ 0xff
 8009786:	d007      	beq.n	8009798 <tcp_receive+0x130>
                ++pcb->dupacks;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800978e:	3301      	adds	r3, #1
 8009790:	b2da      	uxtb	r2, r3
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800979e:	2b03      	cmp	r3, #3
 80097a0:	d91b      	bls.n	80097da <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80097ac:	4413      	add	r3, r2
 80097ae:	b29a      	uxth	r2, r3
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d30a      	bcc.n	80097d0 <tcp_receive+0x168>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80097c4:	4413      	add	r3, r2
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80097ce:	e004      	b.n	80097da <tcp_receive+0x172>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80097d6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80097e0:	2b02      	cmp	r3, #2
 80097e2:	d902      	bls.n	80097ea <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f001 fee7 	bl	800b5b8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80097ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	f040 8161 	bne.w	8009ab4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80097fa:	e15b      	b.n	8009ab4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80097fc:	4b36      	ldr	r3, [pc, #216]	@ (80098d8 <tcp_receive+0x270>)
 80097fe:	681a      	ldr	r2, [r3, #0]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009804:	1ad3      	subs	r3, r2, r3
 8009806:	3b01      	subs	r3, #1
 8009808:	2b00      	cmp	r3, #0
 800980a:	f2c0 814e 	blt.w	8009aaa <tcp_receive+0x442>
 800980e:	4b32      	ldr	r3, [pc, #200]	@ (80098d8 <tcp_receive+0x270>)
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009816:	1ad3      	subs	r3, r2, r3
 8009818:	2b00      	cmp	r3, #0
 800981a:	f300 8146 	bgt.w	8009aaa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	8b5b      	ldrh	r3, [r3, #26]
 8009822:	f003 0304 	and.w	r3, r3, #4
 8009826:	2b00      	cmp	r3, #0
 8009828:	d010      	beq.n	800984c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	8b5b      	ldrh	r3, [r3, #26]
 800982e:	f023 0304 	bic.w	r3, r3, #4
 8009832:	b29a      	uxth	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800985a:	10db      	asrs	r3, r3, #3
 800985c:	b21b      	sxth	r3, r3
 800985e:	b29a      	uxth	r2, r3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009866:	b29b      	uxth	r3, r3
 8009868:	4413      	add	r3, r2
 800986a:	b29b      	uxth	r3, r3
 800986c:	b21a      	sxth	r2, r3
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009874:	4b18      	ldr	r3, [pc, #96]	@ (80098d8 <tcp_receive+0x270>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	b29a      	uxth	r2, r3
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800987e:	b29b      	uxth	r3, r3
 8009880:	1ad3      	subs	r3, r2, r3
 8009882:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800988c:	4b12      	ldr	r3, [pc, #72]	@ (80098d8 <tcp_receive+0x270>)
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	7d1b      	ldrb	r3, [r3, #20]
 8009898:	2b03      	cmp	r3, #3
 800989a:	f240 8097 	bls.w	80099cc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d245      	bcs.n	800993a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	8b5b      	ldrh	r3, [r3, #26]
 80098b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d014      	beq.n	80098e4 <tcp_receive+0x27c>
 80098ba:	2301      	movs	r3, #1
 80098bc:	e013      	b.n	80098e6 <tcp_receive+0x27e>
 80098be:	bf00      	nop
 80098c0:	08010fdc 	.word	0x08010fdc
 80098c4:	0801130c 	.word	0x0801130c
 80098c8:	08011028 	.word	0x08011028
 80098cc:	08011328 	.word	0x08011328
 80098d0:	200082dc 	.word	0x200082dc
 80098d4:	200082d0 	.word	0x200082d0
 80098d8:	200082d4 	.word	0x200082d4
 80098dc:	200082c0 	.word	0x200082c0
 80098e0:	200082da 	.word	0x200082da
 80098e4:	2302      	movs	r3, #2
 80098e6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80098ea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80098ee:	b29a      	uxth	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80098f4:	fb12 f303 	smulbb	r3, r2, r3
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80098fc:	4293      	cmp	r3, r2
 80098fe:	bf28      	it	cs
 8009900:	4613      	movcs	r3, r2
 8009902:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800990a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800990c:	4413      	add	r3, r2
 800990e:	b29a      	uxth	r2, r3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009916:	429a      	cmp	r2, r3
 8009918:	d309      	bcc.n	800992e <tcp_receive+0x2c6>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009920:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009922:	4413      	add	r3, r2
 8009924:	b29a      	uxth	r2, r3
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800992c:	e04e      	b.n	80099cc <tcp_receive+0x364>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009934:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009938:	e048      	b.n	80099cc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009940:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009942:	4413      	add	r3, r2
 8009944:	b29a      	uxth	r2, r3
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800994c:	429a      	cmp	r2, r3
 800994e:	d309      	bcc.n	8009964 <tcp_receive+0x2fc>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009956:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009958:	4413      	add	r3, r2
 800995a:	b29a      	uxth	r2, r3
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009962:	e004      	b.n	800996e <tcp_receive+0x306>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800996a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800997a:	429a      	cmp	r2, r3
 800997c:	d326      	bcc.n	80099cc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800998a:	1ad3      	subs	r3, r2, r3
 800998c:	b29a      	uxth	r2, r3
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800999e:	4413      	add	r3, r2
 80099a0:	b29a      	uxth	r2, r3
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d30a      	bcc.n	80099c2 <tcp_receive+0x35a>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80099b6:	4413      	add	r3, r2
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80099c0:	e004      	b.n	80099cc <tcp_receive+0x364>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80099c8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099d4:	4a98      	ldr	r2, [pc, #608]	@ (8009c38 <tcp_receive+0x5d0>)
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f7ff fdca 	bl	8009570 <tcp_free_acked_segments>
 80099dc:	4602      	mov	r2, r0
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099ea:	4a94      	ldr	r2, [pc, #592]	@ (8009c3c <tcp_receive+0x5d4>)
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f7ff fdbf 	bl	8009570 <tcp_free_acked_segments>
 80099f2:	4602      	mov	r2, r0
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d104      	bne.n	8009a0a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a06:	861a      	strh	r2, [r3, #48]	@ 0x30
 8009a08:	e002      	b.n	8009a10 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d103      	bne.n	8009a26 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8009a2c:	4b84      	ldr	r3, [pc, #528]	@ (8009c40 <tcp_receive+0x5d8>)
 8009a2e:	881b      	ldrh	r3, [r3, #0]
 8009a30:	4413      	add	r3, r2
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	8b5b      	ldrh	r3, [r3, #26]
 8009a3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d035      	beq.n	8009ab2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d118      	bne.n	8009a80 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00c      	beq.n	8009a70 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7fb f9c6 	bl	8004df4 <lwip_htonl>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	dc20      	bgt.n	8009ab2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	8b5b      	ldrh	r3, [r3, #26]
 8009a74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009a78:	b29a      	uxth	r2, r3
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009a7e:	e018      	b.n	8009ab2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7fb f9b1 	bl	8004df4 <lwip_htonl>
 8009a92:	4603      	mov	r3, r0
 8009a94:	1ae3      	subs	r3, r4, r3
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	dc0b      	bgt.n	8009ab2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	8b5b      	ldrh	r3, [r3, #26]
 8009a9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009aa2:	b29a      	uxth	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009aa8:	e003      	b.n	8009ab2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f001 ff70 	bl	800b990 <tcp_send_empty_ack>
 8009ab0:	e000      	b.n	8009ab4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009ab2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d05b      	beq.n	8009b74 <tcp_receive+0x50c>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ac0:	4b60      	ldr	r3, [pc, #384]	@ (8009c44 <tcp_receive+0x5dc>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	da54      	bge.n	8009b74 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009aca:	4b5f      	ldr	r3, [pc, #380]	@ (8009c48 <tcp_receive+0x5e0>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	b29a      	uxth	r2, r3
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	1ad3      	subs	r3, r2, r3
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009ade:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009ae8:	10db      	asrs	r3, r3, #3
 8009aea:	b21b      	sxth	r3, r3
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009afc:	b29a      	uxth	r2, r3
 8009afe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009b02:	4413      	add	r3, r2
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	b21a      	sxth	r2, r3
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8009b0c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	da05      	bge.n	8009b20 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009b14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009b18:	425b      	negs	r3, r3
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009b20:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009b2a:	109b      	asrs	r3, r3, #2
 8009b2c:	b21b      	sxth	r3, r3
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	1ad3      	subs	r3, r2, r3
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009b3e:	b29a      	uxth	r2, r3
 8009b40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009b44:	4413      	add	r3, r2
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	b21a      	sxth	r2, r3
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009b54:	10db      	asrs	r3, r3, #3
 8009b56:	b21b      	sxth	r3, r3
 8009b58:	b29a      	uxth	r2, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	4413      	add	r3, r2
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	b21a      	sxth	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009b74:	4b35      	ldr	r3, [pc, #212]	@ (8009c4c <tcp_receive+0x5e4>)
 8009b76:	881b      	ldrh	r3, [r3, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f000 84df 	beq.w	800a53c <tcp_receive+0xed4>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	7d1b      	ldrb	r3, [r3, #20]
 8009b82:	2b06      	cmp	r3, #6
 8009b84:	f200 84da 	bhi.w	800a53c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009b8c:	4b30      	ldr	r3, [pc, #192]	@ (8009c50 <tcp_receive+0x5e8>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	1ad3      	subs	r3, r2, r3
 8009b92:	3b01      	subs	r3, #1
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f2c0 808f 	blt.w	8009cb8 <tcp_receive+0x650>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009b9e:	4b2b      	ldr	r3, [pc, #172]	@ (8009c4c <tcp_receive+0x5e4>)
 8009ba0:	881b      	ldrh	r3, [r3, #0]
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	4b2a      	ldr	r3, [pc, #168]	@ (8009c50 <tcp_receive+0x5e8>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	440b      	add	r3, r1
 8009baa:	1ad3      	subs	r3, r2, r3
 8009bac:	3301      	adds	r3, #1
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f300 8082 	bgt.w	8009cb8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009bb4:	4b27      	ldr	r3, [pc, #156]	@ (8009c54 <tcp_receive+0x5ec>)
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009bbe:	4b24      	ldr	r3, [pc, #144]	@ (8009c50 <tcp_receive+0x5e8>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	1ad3      	subs	r3, r2, r3
 8009bc4:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009bc6:	4b23      	ldr	r3, [pc, #140]	@ (8009c54 <tcp_receive+0x5ec>)
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d106      	bne.n	8009bdc <tcp_receive+0x574>
 8009bce:	4b22      	ldr	r3, [pc, #136]	@ (8009c58 <tcp_receive+0x5f0>)
 8009bd0:	f240 5294 	movw	r2, #1428	@ 0x594
 8009bd4:	4921      	ldr	r1, [pc, #132]	@ (8009c5c <tcp_receive+0x5f4>)
 8009bd6:	4822      	ldr	r0, [pc, #136]	@ (8009c60 <tcp_receive+0x5f8>)
 8009bd8:	f005 f9c2 	bl	800ef60 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bde:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d906      	bls.n	8009bf4 <tcp_receive+0x58c>
 8009be6:	4b1c      	ldr	r3, [pc, #112]	@ (8009c58 <tcp_receive+0x5f0>)
 8009be8:	f240 5295 	movw	r2, #1429	@ 0x595
 8009bec:	491d      	ldr	r1, [pc, #116]	@ (8009c64 <tcp_receive+0x5fc>)
 8009bee:	481c      	ldr	r0, [pc, #112]	@ (8009c60 <tcp_receive+0x5f8>)
 8009bf0:	f005 f9b6 	bl	800ef60 <iprintf>
      off = (u16_t)off32;
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009bfa:	4b16      	ldr	r3, [pc, #88]	@ (8009c54 <tcp_receive+0x5ec>)
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	891b      	ldrh	r3, [r3, #8]
 8009c00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d906      	bls.n	8009c16 <tcp_receive+0x5ae>
 8009c08:	4b13      	ldr	r3, [pc, #76]	@ (8009c58 <tcp_receive+0x5f0>)
 8009c0a:	f240 5297 	movw	r2, #1431	@ 0x597
 8009c0e:	4916      	ldr	r1, [pc, #88]	@ (8009c68 <tcp_receive+0x600>)
 8009c10:	4813      	ldr	r0, [pc, #76]	@ (8009c60 <tcp_receive+0x5f8>)
 8009c12:	f005 f9a5 	bl	800ef60 <iprintf>
      inseg.len -= off;
 8009c16:	4b0f      	ldr	r3, [pc, #60]	@ (8009c54 <tcp_receive+0x5ec>)
 8009c18:	891a      	ldrh	r2, [r3, #8]
 8009c1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009c1e:	1ad3      	subs	r3, r2, r3
 8009c20:	b29a      	uxth	r2, r3
 8009c22:	4b0c      	ldr	r3, [pc, #48]	@ (8009c54 <tcp_receive+0x5ec>)
 8009c24:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009c26:	4b0b      	ldr	r3, [pc, #44]	@ (8009c54 <tcp_receive+0x5ec>)
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	891a      	ldrh	r2, [r3, #8]
 8009c2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009c30:	1ad3      	subs	r3, r2, r3
 8009c32:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8009c34:	e02a      	b.n	8009c8c <tcp_receive+0x624>
 8009c36:	bf00      	nop
 8009c38:	08011344 	.word	0x08011344
 8009c3c:	0801134c 	.word	0x0801134c
 8009c40:	200082d8 	.word	0x200082d8
 8009c44:	200082d4 	.word	0x200082d4
 8009c48:	20008298 	.word	0x20008298
 8009c4c:	200082da 	.word	0x200082da
 8009c50:	200082d0 	.word	0x200082d0
 8009c54:	200082b0 	.word	0x200082b0
 8009c58:	08010fdc 	.word	0x08010fdc
 8009c5c:	08011354 	.word	0x08011354
 8009c60:	08011028 	.word	0x08011028
 8009c64:	08011364 	.word	0x08011364
 8009c68:	08011374 	.word	0x08011374
        off -= p->len;
 8009c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c6e:	895b      	ldrh	r3, [r3, #10]
 8009c70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009c74:	1ad3      	subs	r3, r2, r3
 8009c76:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009c7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c7c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8009c7e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009c80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c82:	2200      	movs	r2, #0
 8009c84:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009c86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8009c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c8e:	895b      	ldrh	r3, [r3, #10]
 8009c90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d8e9      	bhi.n	8009c6c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009c98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8009ca0:	f7fc fb6a 	bl	8006378 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ca8:	4a90      	ldr	r2, [pc, #576]	@ (8009eec <tcp_receive+0x884>)
 8009caa:	6013      	str	r3, [r2, #0]
 8009cac:	4b90      	ldr	r3, [pc, #576]	@ (8009ef0 <tcp_receive+0x888>)
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	4a8e      	ldr	r2, [pc, #568]	@ (8009eec <tcp_receive+0x884>)
 8009cb2:	6812      	ldr	r2, [r2, #0]
 8009cb4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009cb6:	e00d      	b.n	8009cd4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009cb8:	4b8c      	ldr	r3, [pc, #560]	@ (8009eec <tcp_receive+0x884>)
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cc0:	1ad3      	subs	r3, r2, r3
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	da06      	bge.n	8009cd4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	8b5b      	ldrh	r3, [r3, #26]
 8009cca:	f043 0302 	orr.w	r3, r3, #2
 8009cce:	b29a      	uxth	r2, r3
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009cd4:	4b85      	ldr	r3, [pc, #532]	@ (8009eec <tcp_receive+0x884>)
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cdc:	1ad3      	subs	r3, r2, r3
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	f2c0 8427 	blt.w	800a532 <tcp_receive+0xeca>
 8009ce4:	4b81      	ldr	r3, [pc, #516]	@ (8009eec <tcp_receive+0x884>)
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cec:	6879      	ldr	r1, [r7, #4]
 8009cee:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009cf0:	440b      	add	r3, r1
 8009cf2:	1ad3      	subs	r3, r2, r3
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	f300 841b 	bgt.w	800a532 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d00:	4b7a      	ldr	r3, [pc, #488]	@ (8009eec <tcp_receive+0x884>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	f040 8298 	bne.w	800a23a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009d0a:	4b79      	ldr	r3, [pc, #484]	@ (8009ef0 <tcp_receive+0x888>)
 8009d0c:	891c      	ldrh	r4, [r3, #8]
 8009d0e:	4b78      	ldr	r3, [pc, #480]	@ (8009ef0 <tcp_receive+0x888>)
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	899b      	ldrh	r3, [r3, #12]
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7fb f856 	bl	8004dc8 <lwip_htons>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	f003 0303 	and.w	r3, r3, #3
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d001      	beq.n	8009d2c <tcp_receive+0x6c4>
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e000      	b.n	8009d2e <tcp_receive+0x6c6>
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	4423      	add	r3, r4
 8009d30:	b29a      	uxth	r2, r3
 8009d32:	4b70      	ldr	r3, [pc, #448]	@ (8009ef4 <tcp_receive+0x88c>)
 8009d34:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009d3a:	4b6e      	ldr	r3, [pc, #440]	@ (8009ef4 <tcp_receive+0x88c>)
 8009d3c:	881b      	ldrh	r3, [r3, #0]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d274      	bcs.n	8009e2c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009d42:	4b6b      	ldr	r3, [pc, #428]	@ (8009ef0 <tcp_receive+0x888>)
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	899b      	ldrh	r3, [r3, #12]
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7fb f83c 	bl	8004dc8 <lwip_htons>
 8009d50:	4603      	mov	r3, r0
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	f003 0301 	and.w	r3, r3, #1
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d01e      	beq.n	8009d9a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009d5c:	4b64      	ldr	r3, [pc, #400]	@ (8009ef0 <tcp_receive+0x888>)
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	899b      	ldrh	r3, [r3, #12]
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	b21b      	sxth	r3, r3
 8009d66:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009d6a:	b21c      	sxth	r4, r3
 8009d6c:	4b60      	ldr	r3, [pc, #384]	@ (8009ef0 <tcp_receive+0x888>)
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	899b      	ldrh	r3, [r3, #12]
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7fb f827 	bl	8004dc8 <lwip_htons>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	4618      	mov	r0, r3
 8009d86:	f7fb f81f 	bl	8004dc8 <lwip_htons>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	b21b      	sxth	r3, r3
 8009d8e:	4323      	orrs	r3, r4
 8009d90:	b21a      	sxth	r2, r3
 8009d92:	4b57      	ldr	r3, [pc, #348]	@ (8009ef0 <tcp_receive+0x888>)
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	b292      	uxth	r2, r2
 8009d98:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009d9e:	4b54      	ldr	r3, [pc, #336]	@ (8009ef0 <tcp_receive+0x888>)
 8009da0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009da2:	4b53      	ldr	r3, [pc, #332]	@ (8009ef0 <tcp_receive+0x888>)
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	899b      	ldrh	r3, [r3, #12]
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7fb f80c 	bl	8004dc8 <lwip_htons>
 8009db0:	4603      	mov	r3, r0
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	f003 0302 	and.w	r3, r3, #2
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d005      	beq.n	8009dc8 <tcp_receive+0x760>
            inseg.len -= 1;
 8009dbc:	4b4c      	ldr	r3, [pc, #304]	@ (8009ef0 <tcp_receive+0x888>)
 8009dbe:	891b      	ldrh	r3, [r3, #8]
 8009dc0:	3b01      	subs	r3, #1
 8009dc2:	b29a      	uxth	r2, r3
 8009dc4:	4b4a      	ldr	r3, [pc, #296]	@ (8009ef0 <tcp_receive+0x888>)
 8009dc6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009dc8:	4b49      	ldr	r3, [pc, #292]	@ (8009ef0 <tcp_receive+0x888>)
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	4a48      	ldr	r2, [pc, #288]	@ (8009ef0 <tcp_receive+0x888>)
 8009dce:	8912      	ldrh	r2, [r2, #8]
 8009dd0:	4611      	mov	r1, r2
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7fc f9d0 	bl	8006178 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009dd8:	4b45      	ldr	r3, [pc, #276]	@ (8009ef0 <tcp_receive+0x888>)
 8009dda:	891c      	ldrh	r4, [r3, #8]
 8009ddc:	4b44      	ldr	r3, [pc, #272]	@ (8009ef0 <tcp_receive+0x888>)
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	899b      	ldrh	r3, [r3, #12]
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7fa ffef 	bl	8004dc8 <lwip_htons>
 8009dea:	4603      	mov	r3, r0
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	f003 0303 	and.w	r3, r3, #3
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d001      	beq.n	8009dfa <tcp_receive+0x792>
 8009df6:	2301      	movs	r3, #1
 8009df8:	e000      	b.n	8009dfc <tcp_receive+0x794>
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	4423      	add	r3, r4
 8009dfe:	b29a      	uxth	r2, r3
 8009e00:	4b3c      	ldr	r3, [pc, #240]	@ (8009ef4 <tcp_receive+0x88c>)
 8009e02:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009e04:	4b3b      	ldr	r3, [pc, #236]	@ (8009ef4 <tcp_receive+0x88c>)
 8009e06:	881b      	ldrh	r3, [r3, #0]
 8009e08:	461a      	mov	r2, r3
 8009e0a:	4b38      	ldr	r3, [pc, #224]	@ (8009eec <tcp_receive+0x884>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	441a      	add	r2, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e14:	6879      	ldr	r1, [r7, #4]
 8009e16:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009e18:	440b      	add	r3, r1
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d006      	beq.n	8009e2c <tcp_receive+0x7c4>
 8009e1e:	4b36      	ldr	r3, [pc, #216]	@ (8009ef8 <tcp_receive+0x890>)
 8009e20:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8009e24:	4935      	ldr	r1, [pc, #212]	@ (8009efc <tcp_receive+0x894>)
 8009e26:	4836      	ldr	r0, [pc, #216]	@ (8009f00 <tcp_receive+0x898>)
 8009e28:	f005 f89a 	bl	800ef60 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f000 80e6 	beq.w	800a002 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009e36:	4b2e      	ldr	r3, [pc, #184]	@ (8009ef0 <tcp_receive+0x888>)
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	899b      	ldrh	r3, [r3, #12]
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7fa ffc2 	bl	8004dc8 <lwip_htons>
 8009e44:	4603      	mov	r3, r0
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	f003 0301 	and.w	r3, r3, #1
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d010      	beq.n	8009e72 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009e50:	e00a      	b.n	8009e68 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e56:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8009e62:	68f8      	ldr	r0, [r7, #12]
 8009e64:	f7fd fd93 	bl	800798e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d1f0      	bne.n	8009e52 <tcp_receive+0x7ea>
 8009e70:	e0c7      	b.n	800a002 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009e78:	e051      	b.n	8009f1e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	899b      	ldrh	r3, [r3, #12]
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7fa ffa0 	bl	8004dc8 <lwip_htons>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	f003 0301 	and.w	r3, r3, #1
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d03c      	beq.n	8009f0e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009e94:	4b16      	ldr	r3, [pc, #88]	@ (8009ef0 <tcp_receive+0x888>)
 8009e96:	68db      	ldr	r3, [r3, #12]
 8009e98:	899b      	ldrh	r3, [r3, #12]
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7fa ff93 	bl	8004dc8 <lwip_htons>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d12f      	bne.n	8009f0e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009eae:	4b10      	ldr	r3, [pc, #64]	@ (8009ef0 <tcp_receive+0x888>)
 8009eb0:	68db      	ldr	r3, [r3, #12]
 8009eb2:	899b      	ldrh	r3, [r3, #12]
 8009eb4:	b29c      	uxth	r4, r3
 8009eb6:	2001      	movs	r0, #1
 8009eb8:	f7fa ff86 	bl	8004dc8 <lwip_htons>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8009ef0 <tcp_receive+0x888>)
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	4322      	orrs	r2, r4
 8009ec6:	b292      	uxth	r2, r2
 8009ec8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009eca:	4b09      	ldr	r3, [pc, #36]	@ (8009ef0 <tcp_receive+0x888>)
 8009ecc:	891c      	ldrh	r4, [r3, #8]
 8009ece:	4b08      	ldr	r3, [pc, #32]	@ (8009ef0 <tcp_receive+0x888>)
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	899b      	ldrh	r3, [r3, #12]
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7fa ff76 	bl	8004dc8 <lwip_htons>
 8009edc:	4603      	mov	r3, r0
 8009ede:	b2db      	uxtb	r3, r3
 8009ee0:	f003 0303 	and.w	r3, r3, #3
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d00d      	beq.n	8009f04 <tcp_receive+0x89c>
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e00c      	b.n	8009f06 <tcp_receive+0x89e>
 8009eec:	200082d0 	.word	0x200082d0
 8009ef0:	200082b0 	.word	0x200082b0
 8009ef4:	200082da 	.word	0x200082da
 8009ef8:	08010fdc 	.word	0x08010fdc
 8009efc:	08011384 	.word	0x08011384
 8009f00:	08011028 	.word	0x08011028
 8009f04:	2300      	movs	r3, #0
 8009f06:	4423      	add	r3, r4
 8009f08:	b29a      	uxth	r2, r3
 8009f0a:	4b98      	ldr	r3, [pc, #608]	@ (800a16c <tcp_receive+0xb04>)
 8009f0c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009f0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f10:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8009f18:	6938      	ldr	r0, [r7, #16]
 8009f1a:	f7fd fd38 	bl	800798e <tcp_seg_free>
            while (next &&
 8009f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00e      	beq.n	8009f42 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009f24:	4b91      	ldr	r3, [pc, #580]	@ (800a16c <tcp_receive+0xb04>)
 8009f26:	881b      	ldrh	r3, [r3, #0]
 8009f28:	461a      	mov	r2, r3
 8009f2a:	4b91      	ldr	r3, [pc, #580]	@ (800a170 <tcp_receive+0xb08>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	441a      	add	r2, r3
 8009f30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009f38:	8909      	ldrh	r1, [r1, #8]
 8009f3a:	440b      	add	r3, r1
 8009f3c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	da9b      	bge.n	8009e7a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d059      	beq.n	8009ffc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8009f48:	4b88      	ldr	r3, [pc, #544]	@ (800a16c <tcp_receive+0xb04>)
 8009f4a:	881b      	ldrh	r3, [r3, #0]
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	4b88      	ldr	r3, [pc, #544]	@ (800a170 <tcp_receive+0xb08>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	441a      	add	r2, r3
 8009f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	dd4d      	ble.n	8009ffc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f62:	68db      	ldr	r3, [r3, #12]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	b29a      	uxth	r2, r3
 8009f68:	4b81      	ldr	r3, [pc, #516]	@ (800a170 <tcp_receive+0xb08>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	1ad3      	subs	r3, r2, r3
 8009f70:	b29a      	uxth	r2, r3
 8009f72:	4b80      	ldr	r3, [pc, #512]	@ (800a174 <tcp_receive+0xb0c>)
 8009f74:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009f76:	4b7f      	ldr	r3, [pc, #508]	@ (800a174 <tcp_receive+0xb0c>)
 8009f78:	68db      	ldr	r3, [r3, #12]
 8009f7a:	899b      	ldrh	r3, [r3, #12]
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7fa ff22 	bl	8004dc8 <lwip_htons>
 8009f84:	4603      	mov	r3, r0
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	f003 0302 	and.w	r3, r3, #2
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d005      	beq.n	8009f9c <tcp_receive+0x934>
                inseg.len -= 1;
 8009f90:	4b78      	ldr	r3, [pc, #480]	@ (800a174 <tcp_receive+0xb0c>)
 8009f92:	891b      	ldrh	r3, [r3, #8]
 8009f94:	3b01      	subs	r3, #1
 8009f96:	b29a      	uxth	r2, r3
 8009f98:	4b76      	ldr	r3, [pc, #472]	@ (800a174 <tcp_receive+0xb0c>)
 8009f9a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009f9c:	4b75      	ldr	r3, [pc, #468]	@ (800a174 <tcp_receive+0xb0c>)
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	4a74      	ldr	r2, [pc, #464]	@ (800a174 <tcp_receive+0xb0c>)
 8009fa2:	8912      	ldrh	r2, [r2, #8]
 8009fa4:	4611      	mov	r1, r2
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7fc f8e6 	bl	8006178 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009fac:	4b71      	ldr	r3, [pc, #452]	@ (800a174 <tcp_receive+0xb0c>)
 8009fae:	891c      	ldrh	r4, [r3, #8]
 8009fb0:	4b70      	ldr	r3, [pc, #448]	@ (800a174 <tcp_receive+0xb0c>)
 8009fb2:	68db      	ldr	r3, [r3, #12]
 8009fb4:	899b      	ldrh	r3, [r3, #12]
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7fa ff05 	bl	8004dc8 <lwip_htons>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	f003 0303 	and.w	r3, r3, #3
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d001      	beq.n	8009fce <tcp_receive+0x966>
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e000      	b.n	8009fd0 <tcp_receive+0x968>
 8009fce:	2300      	movs	r3, #0
 8009fd0:	4423      	add	r3, r4
 8009fd2:	b29a      	uxth	r2, r3
 8009fd4:	4b65      	ldr	r3, [pc, #404]	@ (800a16c <tcp_receive+0xb04>)
 8009fd6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009fd8:	4b64      	ldr	r3, [pc, #400]	@ (800a16c <tcp_receive+0xb04>)
 8009fda:	881b      	ldrh	r3, [r3, #0]
 8009fdc:	461a      	mov	r2, r3
 8009fde:	4b64      	ldr	r3, [pc, #400]	@ (800a170 <tcp_receive+0xb08>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	441a      	add	r2, r3
 8009fe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d006      	beq.n	8009ffc <tcp_receive+0x994>
 8009fee:	4b62      	ldr	r3, [pc, #392]	@ (800a178 <tcp_receive+0xb10>)
 8009ff0:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8009ff4:	4961      	ldr	r1, [pc, #388]	@ (800a17c <tcp_receive+0xb14>)
 8009ff6:	4862      	ldr	r0, [pc, #392]	@ (800a180 <tcp_receive+0xb18>)
 8009ff8:	f004 ffb2 	bl	800ef60 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a000:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a002:	4b5a      	ldr	r3, [pc, #360]	@ (800a16c <tcp_receive+0xb04>)
 800a004:	881b      	ldrh	r3, [r3, #0]
 800a006:	461a      	mov	r2, r3
 800a008:	4b59      	ldr	r3, [pc, #356]	@ (800a170 <tcp_receive+0xb08>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	441a      	add	r2, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a016:	4b55      	ldr	r3, [pc, #340]	@ (800a16c <tcp_receive+0xb04>)
 800a018:	881b      	ldrh	r3, [r3, #0]
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d206      	bcs.n	800a02c <tcp_receive+0x9c4>
 800a01e:	4b56      	ldr	r3, [pc, #344]	@ (800a178 <tcp_receive+0xb10>)
 800a020:	f240 6207 	movw	r2, #1543	@ 0x607
 800a024:	4957      	ldr	r1, [pc, #348]	@ (800a184 <tcp_receive+0xb1c>)
 800a026:	4856      	ldr	r0, [pc, #344]	@ (800a180 <tcp_receive+0xb18>)
 800a028:	f004 ff9a 	bl	800ef60 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a030:	4b4e      	ldr	r3, [pc, #312]	@ (800a16c <tcp_receive+0xb04>)
 800a032:	881b      	ldrh	r3, [r3, #0]
 800a034:	1ad3      	subs	r3, r2, r3
 800a036:	b29a      	uxth	r2, r3
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f7fc ffc5 	bl	8006fcc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a042:	4b4c      	ldr	r3, [pc, #304]	@ (800a174 <tcp_receive+0xb0c>)
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	891b      	ldrh	r3, [r3, #8]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d006      	beq.n	800a05a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800a04c:	4b49      	ldr	r3, [pc, #292]	@ (800a174 <tcp_receive+0xb0c>)
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	4a4d      	ldr	r2, [pc, #308]	@ (800a188 <tcp_receive+0xb20>)
 800a052:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a054:	4b47      	ldr	r3, [pc, #284]	@ (800a174 <tcp_receive+0xb0c>)
 800a056:	2200      	movs	r2, #0
 800a058:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a05a:	4b46      	ldr	r3, [pc, #280]	@ (800a174 <tcp_receive+0xb0c>)
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	899b      	ldrh	r3, [r3, #12]
 800a060:	b29b      	uxth	r3, r3
 800a062:	4618      	mov	r0, r3
 800a064:	f7fa feb0 	bl	8004dc8 <lwip_htons>
 800a068:	4603      	mov	r3, r0
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	f003 0301 	and.w	r3, r3, #1
 800a070:	2b00      	cmp	r3, #0
 800a072:	f000 80b8 	beq.w	800a1e6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a076:	4b45      	ldr	r3, [pc, #276]	@ (800a18c <tcp_receive+0xb24>)
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	f043 0320 	orr.w	r3, r3, #32
 800a07e:	b2da      	uxtb	r2, r3
 800a080:	4b42      	ldr	r3, [pc, #264]	@ (800a18c <tcp_receive+0xb24>)
 800a082:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a084:	e0af      	b.n	800a1e6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a08a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a090:	68db      	ldr	r3, [r3, #12]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	4a36      	ldr	r2, [pc, #216]	@ (800a170 <tcp_receive+0xb08>)
 800a096:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	891b      	ldrh	r3, [r3, #8]
 800a09c:	461c      	mov	r4, r3
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	899b      	ldrh	r3, [r3, #12]
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7fa fe8e 	bl	8004dc8 <lwip_htons>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	f003 0303 	and.w	r3, r3, #3
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d001      	beq.n	800a0bc <tcp_receive+0xa54>
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e000      	b.n	800a0be <tcp_receive+0xa56>
 800a0bc:	2300      	movs	r3, #0
 800a0be:	191a      	adds	r2, r3, r4
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0c4:	441a      	add	r2, r3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0ce:	461c      	mov	r4, r3
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	891b      	ldrh	r3, [r3, #8]
 800a0d4:	461d      	mov	r5, r3
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	899b      	ldrh	r3, [r3, #12]
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7fa fe72 	bl	8004dc8 <lwip_htons>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	f003 0303 	and.w	r3, r3, #3
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d001      	beq.n	800a0f4 <tcp_receive+0xa8c>
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e000      	b.n	800a0f6 <tcp_receive+0xa8e>
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	442b      	add	r3, r5
 800a0f8:	429c      	cmp	r4, r3
 800a0fa:	d206      	bcs.n	800a10a <tcp_receive+0xaa2>
 800a0fc:	4b1e      	ldr	r3, [pc, #120]	@ (800a178 <tcp_receive+0xb10>)
 800a0fe:	f240 622b 	movw	r2, #1579	@ 0x62b
 800a102:	4923      	ldr	r1, [pc, #140]	@ (800a190 <tcp_receive+0xb28>)
 800a104:	481e      	ldr	r0, [pc, #120]	@ (800a180 <tcp_receive+0xb18>)
 800a106:	f004 ff2b 	bl	800ef60 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	891b      	ldrh	r3, [r3, #8]
 800a10e:	461c      	mov	r4, r3
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	899b      	ldrh	r3, [r3, #12]
 800a116:	b29b      	uxth	r3, r3
 800a118:	4618      	mov	r0, r3
 800a11a:	f7fa fe55 	bl	8004dc8 <lwip_htons>
 800a11e:	4603      	mov	r3, r0
 800a120:	b2db      	uxtb	r3, r3
 800a122:	f003 0303 	and.w	r3, r3, #3
 800a126:	2b00      	cmp	r3, #0
 800a128:	d001      	beq.n	800a12e <tcp_receive+0xac6>
 800a12a:	2301      	movs	r3, #1
 800a12c:	e000      	b.n	800a130 <tcp_receive+0xac8>
 800a12e:	2300      	movs	r3, #0
 800a130:	1919      	adds	r1, r3, r4
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a136:	b28b      	uxth	r3, r1
 800a138:	1ad3      	subs	r3, r2, r3
 800a13a:	b29a      	uxth	r2, r3
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f7fc ff43 	bl	8006fcc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	891b      	ldrh	r3, [r3, #8]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d028      	beq.n	800a1a2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a150:	4b0d      	ldr	r3, [pc, #52]	@ (800a188 <tcp_receive+0xb20>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d01d      	beq.n	800a194 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800a158:	4b0b      	ldr	r3, [pc, #44]	@ (800a188 <tcp_receive+0xb20>)
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	4619      	mov	r1, r3
 800a162:	4610      	mov	r0, r2
 800a164:	f7fc fa50 	bl	8006608 <pbuf_cat>
 800a168:	e018      	b.n	800a19c <tcp_receive+0xb34>
 800a16a:	bf00      	nop
 800a16c:	200082da 	.word	0x200082da
 800a170:	200082d0 	.word	0x200082d0
 800a174:	200082b0 	.word	0x200082b0
 800a178:	08010fdc 	.word	0x08010fdc
 800a17c:	080113bc 	.word	0x080113bc
 800a180:	08011028 	.word	0x08011028
 800a184:	080113f8 	.word	0x080113f8
 800a188:	200082e0 	.word	0x200082e0
 800a18c:	200082dd 	.word	0x200082dd
 800a190:	08011418 	.word	0x08011418
            } else {
              recv_data = cseg->p;
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	4a70      	ldr	r2, [pc, #448]	@ (800a35c <tcp_receive+0xcf4>)
 800a19a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	899b      	ldrh	r3, [r3, #12]
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7fa fe0c 	bl	8004dc8 <lwip_htons>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	f003 0301 	and.w	r3, r3, #1
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d00d      	beq.n	800a1d8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a1bc:	4b68      	ldr	r3, [pc, #416]	@ (800a360 <tcp_receive+0xcf8>)
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	f043 0320 	orr.w	r3, r3, #32
 800a1c4:	b2da      	uxtb	r2, r3
 800a1c6:	4b66      	ldr	r3, [pc, #408]	@ (800a360 <tcp_receive+0xcf8>)
 800a1c8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	7d1b      	ldrb	r3, [r3, #20]
 800a1ce:	2b04      	cmp	r3, #4
 800a1d0:	d102      	bne.n	800a1d8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2207      	movs	r2, #7
 800a1d6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800a1e0:	68b8      	ldr	r0, [r7, #8]
 800a1e2:	f7fd fbd4 	bl	800798e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d008      	beq.n	800a200 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1f2:	68db      	ldr	r3, [r3, #12]
 800a1f4:	685a      	ldr	r2, [r3, #4]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	f43f af43 	beq.w	800a086 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	8b5b      	ldrh	r3, [r3, #26]
 800a204:	f003 0301 	and.w	r3, r3, #1
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d00e      	beq.n	800a22a <tcp_receive+0xbc2>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	8b5b      	ldrh	r3, [r3, #26]
 800a210:	f023 0301 	bic.w	r3, r3, #1
 800a214:	b29a      	uxth	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	835a      	strh	r2, [r3, #26]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	8b5b      	ldrh	r3, [r3, #26]
 800a21e:	f043 0302 	orr.w	r3, r3, #2
 800a222:	b29a      	uxth	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a228:	e187      	b.n	800a53a <tcp_receive+0xed2>
        tcp_ack(pcb);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	8b5b      	ldrh	r3, [r3, #26]
 800a22e:	f043 0301 	orr.w	r3, r3, #1
 800a232:	b29a      	uxth	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a238:	e17f      	b.n	800a53a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d106      	bne.n	800a250 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a242:	4848      	ldr	r0, [pc, #288]	@ (800a364 <tcp_receive+0xcfc>)
 800a244:	f7fd fbbc 	bl	80079c0 <tcp_seg_copy>
 800a248:	4602      	mov	r2, r0
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	675a      	str	r2, [r3, #116]	@ 0x74
 800a24e:	e16c      	b.n	800a52a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a250:	2300      	movs	r3, #0
 800a252:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a258:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a25a:	e156      	b.n	800a50a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800a25c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	685a      	ldr	r2, [r3, #4]
 800a262:	4b41      	ldr	r3, [pc, #260]	@ (800a368 <tcp_receive+0xd00>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	429a      	cmp	r2, r3
 800a268:	d11d      	bne.n	800a2a6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a26a:	4b3e      	ldr	r3, [pc, #248]	@ (800a364 <tcp_receive+0xcfc>)
 800a26c:	891a      	ldrh	r2, [r3, #8]
 800a26e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a270:	891b      	ldrh	r3, [r3, #8]
 800a272:	429a      	cmp	r2, r3
 800a274:	f240 814e 	bls.w	800a514 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a278:	483a      	ldr	r0, [pc, #232]	@ (800a364 <tcp_receive+0xcfc>)
 800a27a:	f7fd fba1 	bl	80079c0 <tcp_seg_copy>
 800a27e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	2b00      	cmp	r3, #0
 800a284:	f000 8148 	beq.w	800a518 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800a288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d003      	beq.n	800a296 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800a28e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a290:	697a      	ldr	r2, [r7, #20]
 800a292:	601a      	str	r2, [r3, #0]
 800a294:	e002      	b.n	800a29c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	697a      	ldr	r2, [r7, #20]
 800a29a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a29c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a29e:	6978      	ldr	r0, [r7, #20]
 800a2a0:	f7ff f8de 	bl	8009460 <tcp_oos_insert_segment>
                }
                break;
 800a2a4:	e138      	b.n	800a518 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a2a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d117      	bne.n	800a2dc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a2ac:	4b2e      	ldr	r3, [pc, #184]	@ (800a368 <tcp_receive+0xd00>)
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	1ad3      	subs	r3, r2, r3
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	da57      	bge.n	800a36c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a2bc:	4829      	ldr	r0, [pc, #164]	@ (800a364 <tcp_receive+0xcfc>)
 800a2be:	f7fd fb7f 	bl	80079c0 <tcp_seg_copy>
 800a2c2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	f000 8128 	beq.w	800a51c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	69ba      	ldr	r2, [r7, #24]
 800a2d0:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a2d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a2d4:	69b8      	ldr	r0, [r7, #24]
 800a2d6:	f7ff f8c3 	bl	8009460 <tcp_oos_insert_segment>
                  }
                  break;
 800a2da:	e11f      	b.n	800a51c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a2dc:	4b22      	ldr	r3, [pc, #136]	@ (800a368 <tcp_receive+0xd00>)
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	1ad3      	subs	r3, r2, r3
 800a2e8:	3b01      	subs	r3, #1
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	db3e      	blt.n	800a36c <tcp_receive+0xd04>
 800a2ee:	4b1e      	ldr	r3, [pc, #120]	@ (800a368 <tcp_receive+0xd00>)
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	1ad3      	subs	r3, r2, r3
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	dc35      	bgt.n	800a36c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a300:	4818      	ldr	r0, [pc, #96]	@ (800a364 <tcp_receive+0xcfc>)
 800a302:	f7fd fb5d 	bl	80079c0 <tcp_seg_copy>
 800a306:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a308:	69fb      	ldr	r3, [r7, #28]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	f000 8108 	beq.w	800a520 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a318:	8912      	ldrh	r2, [r2, #8]
 800a31a:	441a      	add	r2, r3
 800a31c:	4b12      	ldr	r3, [pc, #72]	@ (800a368 <tcp_receive+0xd00>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	1ad3      	subs	r3, r2, r3
 800a322:	2b00      	cmp	r3, #0
 800a324:	dd12      	ble.n	800a34c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a326:	4b10      	ldr	r3, [pc, #64]	@ (800a368 <tcp_receive+0xd00>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	b29b      	uxth	r3, r3
 800a334:	1ad3      	subs	r3, r2, r3
 800a336:	b29a      	uxth	r2, r3
 800a338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a33a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a33c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a33e:	685a      	ldr	r2, [r3, #4]
 800a340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a342:	891b      	ldrh	r3, [r3, #8]
 800a344:	4619      	mov	r1, r3
 800a346:	4610      	mov	r0, r2
 800a348:	f7fb ff16 	bl	8006178 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a34c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a34e:	69fa      	ldr	r2, [r7, #28]
 800a350:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a352:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a354:	69f8      	ldr	r0, [r7, #28]
 800a356:	f7ff f883 	bl	8009460 <tcp_oos_insert_segment>
                  }
                  break;
 800a35a:	e0e1      	b.n	800a520 <tcp_receive+0xeb8>
 800a35c:	200082e0 	.word	0x200082e0
 800a360:	200082dd 	.word	0x200082dd
 800a364:	200082b0 	.word	0x200082b0
 800a368:	200082d0 	.word	0x200082d0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a36e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	f040 80c5 	bne.w	800a504 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a37a:	4b7f      	ldr	r3, [pc, #508]	@ (800a578 <tcp_receive+0xf10>)
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a380:	68db      	ldr	r3, [r3, #12]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a386:	2b00      	cmp	r3, #0
 800a388:	f340 80bc 	ble.w	800a504 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	899b      	ldrh	r3, [r3, #12]
 800a392:	b29b      	uxth	r3, r3
 800a394:	4618      	mov	r0, r3
 800a396:	f7fa fd17 	bl	8004dc8 <lwip_htons>
 800a39a:	4603      	mov	r3, r0
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	f003 0301 	and.w	r3, r3, #1
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	f040 80be 	bne.w	800a524 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a3a8:	4874      	ldr	r0, [pc, #464]	@ (800a57c <tcp_receive+0xf14>)
 800a3aa:	f7fd fb09 	bl	80079c0 <tcp_seg_copy>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3b2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a3b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	f000 80b5 	beq.w	800a528 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a3be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a3c6:	8912      	ldrh	r2, [r2, #8]
 800a3c8:	441a      	add	r2, r3
 800a3ca:	4b6b      	ldr	r3, [pc, #428]	@ (800a578 <tcp_receive+0xf10>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	1ad3      	subs	r3, r2, r3
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	dd12      	ble.n	800a3fa <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a3d4:	4b68      	ldr	r3, [pc, #416]	@ (800a578 <tcp_receive+0xf10>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	b29a      	uxth	r2, r3
 800a3da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	1ad3      	subs	r3, r2, r3
 800a3e4:	b29a      	uxth	r2, r3
 800a3e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a3ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ec:	685a      	ldr	r2, [r3, #4]
 800a3ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f0:	891b      	ldrh	r3, [r3, #8]
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	4610      	mov	r0, r2
 800a3f6:	f7fb febf 	bl	8006178 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a3fa:	4b61      	ldr	r3, [pc, #388]	@ (800a580 <tcp_receive+0xf18>)
 800a3fc:	881b      	ldrh	r3, [r3, #0]
 800a3fe:	461a      	mov	r2, r3
 800a400:	4b5d      	ldr	r3, [pc, #372]	@ (800a578 <tcp_receive+0xf10>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	441a      	add	r2, r3
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a40a:	6879      	ldr	r1, [r7, #4]
 800a40c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a40e:	440b      	add	r3, r1
 800a410:	1ad3      	subs	r3, r2, r3
 800a412:	2b00      	cmp	r3, #0
 800a414:	f340 8088 	ble.w	800a528 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	899b      	ldrh	r3, [r3, #12]
 800a420:	b29b      	uxth	r3, r3
 800a422:	4618      	mov	r0, r3
 800a424:	f7fa fcd0 	bl	8004dc8 <lwip_htons>
 800a428:	4603      	mov	r3, r0
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	f003 0301 	and.w	r3, r3, #1
 800a430:	2b00      	cmp	r3, #0
 800a432:	d021      	beq.n	800a478 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	68db      	ldr	r3, [r3, #12]
 800a43a:	899b      	ldrh	r3, [r3, #12]
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	b21b      	sxth	r3, r3
 800a440:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a444:	b21c      	sxth	r4, r3
 800a446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	68db      	ldr	r3, [r3, #12]
 800a44c:	899b      	ldrh	r3, [r3, #12]
 800a44e:	b29b      	uxth	r3, r3
 800a450:	4618      	mov	r0, r3
 800a452:	f7fa fcb9 	bl	8004dc8 <lwip_htons>
 800a456:	4603      	mov	r3, r0
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800a45e:	b29b      	uxth	r3, r3
 800a460:	4618      	mov	r0, r3
 800a462:	f7fa fcb1 	bl	8004dc8 <lwip_htons>
 800a466:	4603      	mov	r3, r0
 800a468:	b21b      	sxth	r3, r3
 800a46a:	4323      	orrs	r3, r4
 800a46c:	b21a      	sxth	r2, r3
 800a46e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	b292      	uxth	r2, r2
 800a476:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a47c:	b29a      	uxth	r2, r3
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a482:	4413      	add	r3, r2
 800a484:	b299      	uxth	r1, r3
 800a486:	4b3c      	ldr	r3, [pc, #240]	@ (800a578 <tcp_receive+0xf10>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	b29a      	uxth	r2, r3
 800a48c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	1a8a      	subs	r2, r1, r2
 800a492:	b292      	uxth	r2, r2
 800a494:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	685a      	ldr	r2, [r3, #4]
 800a49c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	891b      	ldrh	r3, [r3, #8]
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	4610      	mov	r0, r2
 800a4a6:	f7fb fe67 	bl	8006178 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a4aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	891c      	ldrh	r4, [r3, #8]
 800a4b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	68db      	ldr	r3, [r3, #12]
 800a4b6:	899b      	ldrh	r3, [r3, #12]
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f7fa fc84 	bl	8004dc8 <lwip_htons>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	f003 0303 	and.w	r3, r3, #3
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d001      	beq.n	800a4d0 <tcp_receive+0xe68>
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e000      	b.n	800a4d2 <tcp_receive+0xe6a>
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	4423      	add	r3, r4
 800a4d4:	b29a      	uxth	r2, r3
 800a4d6:	4b2a      	ldr	r3, [pc, #168]	@ (800a580 <tcp_receive+0xf18>)
 800a4d8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a4da:	4b29      	ldr	r3, [pc, #164]	@ (800a580 <tcp_receive+0xf18>)
 800a4dc:	881b      	ldrh	r3, [r3, #0]
 800a4de:	461a      	mov	r2, r3
 800a4e0:	4b25      	ldr	r3, [pc, #148]	@ (800a578 <tcp_receive+0xf10>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	441a      	add	r2, r3
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4ea:	6879      	ldr	r1, [r7, #4]
 800a4ec:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a4ee:	440b      	add	r3, r1
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d019      	beq.n	800a528 <tcp_receive+0xec0>
 800a4f4:	4b23      	ldr	r3, [pc, #140]	@ (800a584 <tcp_receive+0xf1c>)
 800a4f6:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800a4fa:	4923      	ldr	r1, [pc, #140]	@ (800a588 <tcp_receive+0xf20>)
 800a4fc:	4823      	ldr	r0, [pc, #140]	@ (800a58c <tcp_receive+0xf24>)
 800a4fe:	f004 fd2f 	bl	800ef60 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a502:	e011      	b.n	800a528 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a50a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	f47f aea5 	bne.w	800a25c <tcp_receive+0xbf4>
 800a512:	e00a      	b.n	800a52a <tcp_receive+0xec2>
                break;
 800a514:	bf00      	nop
 800a516:	e008      	b.n	800a52a <tcp_receive+0xec2>
                break;
 800a518:	bf00      	nop
 800a51a:	e006      	b.n	800a52a <tcp_receive+0xec2>
                  break;
 800a51c:	bf00      	nop
 800a51e:	e004      	b.n	800a52a <tcp_receive+0xec2>
                  break;
 800a520:	bf00      	nop
 800a522:	e002      	b.n	800a52a <tcp_receive+0xec2>
                  break;
 800a524:	bf00      	nop
 800a526:	e000      	b.n	800a52a <tcp_receive+0xec2>
                break;
 800a528:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f001 fa30 	bl	800b990 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a530:	e003      	b.n	800a53a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f001 fa2c 	bl	800b990 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a538:	e01a      	b.n	800a570 <tcp_receive+0xf08>
 800a53a:	e019      	b.n	800a570 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a53c:	4b0e      	ldr	r3, [pc, #56]	@ (800a578 <tcp_receive+0xf10>)
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a544:	1ad3      	subs	r3, r2, r3
 800a546:	2b00      	cmp	r3, #0
 800a548:	db0a      	blt.n	800a560 <tcp_receive+0xef8>
 800a54a:	4b0b      	ldr	r3, [pc, #44]	@ (800a578 <tcp_receive+0xf10>)
 800a54c:	681a      	ldr	r2, [r3, #0]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a552:	6879      	ldr	r1, [r7, #4]
 800a554:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a556:	440b      	add	r3, r1
 800a558:	1ad3      	subs	r3, r2, r3
 800a55a:	3301      	adds	r3, #1
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	dd07      	ble.n	800a570 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	8b5b      	ldrh	r3, [r3, #26]
 800a564:	f043 0302 	orr.w	r3, r3, #2
 800a568:	b29a      	uxth	r2, r3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a56e:	e7ff      	b.n	800a570 <tcp_receive+0xf08>
 800a570:	bf00      	nop
 800a572:	3750      	adds	r7, #80	@ 0x50
 800a574:	46bd      	mov	sp, r7
 800a576:	bdb0      	pop	{r4, r5, r7, pc}
 800a578:	200082d0 	.word	0x200082d0
 800a57c:	200082b0 	.word	0x200082b0
 800a580:	200082da 	.word	0x200082da
 800a584:	08010fdc 	.word	0x08010fdc
 800a588:	08011384 	.word	0x08011384
 800a58c:	08011028 	.word	0x08011028

0800a590 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a596:	4b15      	ldr	r3, [pc, #84]	@ (800a5ec <tcp_get_next_optbyte+0x5c>)
 800a598:	881b      	ldrh	r3, [r3, #0]
 800a59a:	1c5a      	adds	r2, r3, #1
 800a59c:	b291      	uxth	r1, r2
 800a59e:	4a13      	ldr	r2, [pc, #76]	@ (800a5ec <tcp_get_next_optbyte+0x5c>)
 800a5a0:	8011      	strh	r1, [r2, #0]
 800a5a2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a5a4:	4b12      	ldr	r3, [pc, #72]	@ (800a5f0 <tcp_get_next_optbyte+0x60>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d004      	beq.n	800a5b6 <tcp_get_next_optbyte+0x26>
 800a5ac:	4b11      	ldr	r3, [pc, #68]	@ (800a5f4 <tcp_get_next_optbyte+0x64>)
 800a5ae:	881b      	ldrh	r3, [r3, #0]
 800a5b0:	88fa      	ldrh	r2, [r7, #6]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d208      	bcs.n	800a5c8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a5b6:	4b10      	ldr	r3, [pc, #64]	@ (800a5f8 <tcp_get_next_optbyte+0x68>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	3314      	adds	r3, #20
 800a5bc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a5be:	88fb      	ldrh	r3, [r7, #6]
 800a5c0:	683a      	ldr	r2, [r7, #0]
 800a5c2:	4413      	add	r3, r2
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	e00b      	b.n	800a5e0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a5c8:	88fb      	ldrh	r3, [r7, #6]
 800a5ca:	b2da      	uxtb	r2, r3
 800a5cc:	4b09      	ldr	r3, [pc, #36]	@ (800a5f4 <tcp_get_next_optbyte+0x64>)
 800a5ce:	881b      	ldrh	r3, [r3, #0]
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	1ad3      	subs	r3, r2, r3
 800a5d4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a5d6:	4b06      	ldr	r3, [pc, #24]	@ (800a5f0 <tcp_get_next_optbyte+0x60>)
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	797b      	ldrb	r3, [r7, #5]
 800a5dc:	4413      	add	r3, r2
 800a5de:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr
 800a5ec:	200082cc 	.word	0x200082cc
 800a5f0:	200082c8 	.word	0x200082c8
 800a5f4:	200082c6 	.word	0x200082c6
 800a5f8:	200082c0 	.word	0x200082c0

0800a5fc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d106      	bne.n	800a618 <tcp_parseopt+0x1c>
 800a60a:	4b32      	ldr	r3, [pc, #200]	@ (800a6d4 <tcp_parseopt+0xd8>)
 800a60c:	f240 727d 	movw	r2, #1917	@ 0x77d
 800a610:	4931      	ldr	r1, [pc, #196]	@ (800a6d8 <tcp_parseopt+0xdc>)
 800a612:	4832      	ldr	r0, [pc, #200]	@ (800a6dc <tcp_parseopt+0xe0>)
 800a614:	f004 fca4 	bl	800ef60 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a618:	4b31      	ldr	r3, [pc, #196]	@ (800a6e0 <tcp_parseopt+0xe4>)
 800a61a:	881b      	ldrh	r3, [r3, #0]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d056      	beq.n	800a6ce <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a620:	4b30      	ldr	r3, [pc, #192]	@ (800a6e4 <tcp_parseopt+0xe8>)
 800a622:	2200      	movs	r2, #0
 800a624:	801a      	strh	r2, [r3, #0]
 800a626:	e046      	b.n	800a6b6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800a628:	f7ff ffb2 	bl	800a590 <tcp_get_next_optbyte>
 800a62c:	4603      	mov	r3, r0
 800a62e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a630:	7bfb      	ldrb	r3, [r7, #15]
 800a632:	2b02      	cmp	r3, #2
 800a634:	d006      	beq.n	800a644 <tcp_parseopt+0x48>
 800a636:	2b02      	cmp	r3, #2
 800a638:	dc2a      	bgt.n	800a690 <tcp_parseopt+0x94>
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d042      	beq.n	800a6c4 <tcp_parseopt+0xc8>
 800a63e:	2b01      	cmp	r3, #1
 800a640:	d038      	beq.n	800a6b4 <tcp_parseopt+0xb8>
 800a642:	e025      	b.n	800a690 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a644:	f7ff ffa4 	bl	800a590 <tcp_get_next_optbyte>
 800a648:	4603      	mov	r3, r0
 800a64a:	2b04      	cmp	r3, #4
 800a64c:	d13c      	bne.n	800a6c8 <tcp_parseopt+0xcc>
 800a64e:	4b25      	ldr	r3, [pc, #148]	@ (800a6e4 <tcp_parseopt+0xe8>)
 800a650:	881b      	ldrh	r3, [r3, #0]
 800a652:	3301      	adds	r3, #1
 800a654:	4a22      	ldr	r2, [pc, #136]	@ (800a6e0 <tcp_parseopt+0xe4>)
 800a656:	8812      	ldrh	r2, [r2, #0]
 800a658:	4293      	cmp	r3, r2
 800a65a:	da35      	bge.n	800a6c8 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a65c:	f7ff ff98 	bl	800a590 <tcp_get_next_optbyte>
 800a660:	4603      	mov	r3, r0
 800a662:	021b      	lsls	r3, r3, #8
 800a664:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a666:	f7ff ff93 	bl	800a590 <tcp_get_next_optbyte>
 800a66a:	4603      	mov	r3, r0
 800a66c:	461a      	mov	r2, r3
 800a66e:	89bb      	ldrh	r3, [r7, #12]
 800a670:	4313      	orrs	r3, r2
 800a672:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a674:	89bb      	ldrh	r3, [r7, #12]
 800a676:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800a67a:	d804      	bhi.n	800a686 <tcp_parseopt+0x8a>
 800a67c:	89bb      	ldrh	r3, [r7, #12]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d001      	beq.n	800a686 <tcp_parseopt+0x8a>
 800a682:	89ba      	ldrh	r2, [r7, #12]
 800a684:	e001      	b.n	800a68a <tcp_parseopt+0x8e>
 800a686:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800a68e:	e012      	b.n	800a6b6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a690:	f7ff ff7e 	bl	800a590 <tcp_get_next_optbyte>
 800a694:	4603      	mov	r3, r0
 800a696:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a698:	7afb      	ldrb	r3, [r7, #11]
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d916      	bls.n	800a6cc <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a69e:	7afb      	ldrb	r3, [r7, #11]
 800a6a0:	b29a      	uxth	r2, r3
 800a6a2:	4b10      	ldr	r3, [pc, #64]	@ (800a6e4 <tcp_parseopt+0xe8>)
 800a6a4:	881b      	ldrh	r3, [r3, #0]
 800a6a6:	4413      	add	r3, r2
 800a6a8:	b29b      	uxth	r3, r3
 800a6aa:	3b02      	subs	r3, #2
 800a6ac:	b29a      	uxth	r2, r3
 800a6ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a6e4 <tcp_parseopt+0xe8>)
 800a6b0:	801a      	strh	r2, [r3, #0]
 800a6b2:	e000      	b.n	800a6b6 <tcp_parseopt+0xba>
          break;
 800a6b4:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a6b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a6e4 <tcp_parseopt+0xe8>)
 800a6b8:	881a      	ldrh	r2, [r3, #0]
 800a6ba:	4b09      	ldr	r3, [pc, #36]	@ (800a6e0 <tcp_parseopt+0xe4>)
 800a6bc:	881b      	ldrh	r3, [r3, #0]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d3b2      	bcc.n	800a628 <tcp_parseopt+0x2c>
 800a6c2:	e004      	b.n	800a6ce <tcp_parseopt+0xd2>
          return;
 800a6c4:	bf00      	nop
 800a6c6:	e002      	b.n	800a6ce <tcp_parseopt+0xd2>
            return;
 800a6c8:	bf00      	nop
 800a6ca:	e000      	b.n	800a6ce <tcp_parseopt+0xd2>
            return;
 800a6cc:	bf00      	nop
      }
    }
  }
}
 800a6ce:	3710      	adds	r7, #16
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}
 800a6d4:	08010fdc 	.word	0x08010fdc
 800a6d8:	08011440 	.word	0x08011440
 800a6dc:	08011028 	.word	0x08011028
 800a6e0:	200082c4 	.word	0x200082c4
 800a6e4:	200082cc 	.word	0x200082cc

0800a6e8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a6ec:	4b05      	ldr	r3, [pc, #20]	@ (800a704 <tcp_trigger_input_pcb_close+0x1c>)
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	f043 0310 	orr.w	r3, r3, #16
 800a6f4:	b2da      	uxtb	r2, r3
 800a6f6:	4b03      	ldr	r3, [pc, #12]	@ (800a704 <tcp_trigger_input_pcb_close+0x1c>)
 800a6f8:	701a      	strb	r2, [r3, #0]
}
 800a6fa:	bf00      	nop
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr
 800a704:	200082dd 	.word	0x200082dd

0800a708 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00a      	beq.n	800a730 <tcp_route+0x28>
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	7a1b      	ldrb	r3, [r3, #8]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d006      	beq.n	800a730 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	7a1b      	ldrb	r3, [r3, #8]
 800a726:	4618      	mov	r0, r3
 800a728:	f7fb fb4c 	bl	8005dc4 <netif_get_by_index>
 800a72c:	4603      	mov	r3, r0
 800a72e:	e003      	b.n	800a738 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f003 f929 	bl	800d988 <ip4_route>
 800a736:	4603      	mov	r3, r0
  }
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3710      	adds	r7, #16
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a740:	b590      	push	{r4, r7, lr}
 800a742:	b087      	sub	sp, #28
 800a744:	af00      	add	r7, sp, #0
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	60b9      	str	r1, [r7, #8]
 800a74a:	603b      	str	r3, [r7, #0]
 800a74c:	4613      	mov	r3, r2
 800a74e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d105      	bne.n	800a762 <tcp_create_segment+0x22>
 800a756:	4b43      	ldr	r3, [pc, #268]	@ (800a864 <tcp_create_segment+0x124>)
 800a758:	22a3      	movs	r2, #163	@ 0xa3
 800a75a:	4943      	ldr	r1, [pc, #268]	@ (800a868 <tcp_create_segment+0x128>)
 800a75c:	4843      	ldr	r0, [pc, #268]	@ (800a86c <tcp_create_segment+0x12c>)
 800a75e:	f004 fbff 	bl	800ef60 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d105      	bne.n	800a774 <tcp_create_segment+0x34>
 800a768:	4b3e      	ldr	r3, [pc, #248]	@ (800a864 <tcp_create_segment+0x124>)
 800a76a:	22a4      	movs	r2, #164	@ 0xa4
 800a76c:	4940      	ldr	r1, [pc, #256]	@ (800a870 <tcp_create_segment+0x130>)
 800a76e:	483f      	ldr	r0, [pc, #252]	@ (800a86c <tcp_create_segment+0x12c>)
 800a770:	f004 fbf6 	bl	800ef60 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a774:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	f003 0304 	and.w	r3, r3, #4
 800a780:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a782:	2003      	movs	r0, #3
 800a784:	f7fa ff98 	bl	80056b8 <memp_malloc>
 800a788:	6138      	str	r0, [r7, #16]
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d104      	bne.n	800a79a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a790:	68b8      	ldr	r0, [r7, #8]
 800a792:	f7fb fe77 	bl	8006484 <pbuf_free>
    return NULL;
 800a796:	2300      	movs	r3, #0
 800a798:	e060      	b.n	800a85c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800a7a0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	68ba      	ldr	r2, [r7, #8]
 800a7ac:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	891a      	ldrh	r2, [r3, #8]
 800a7b2:	7dfb      	ldrb	r3, [r7, #23]
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d205      	bcs.n	800a7c6 <tcp_create_segment+0x86>
 800a7ba:	4b2a      	ldr	r3, [pc, #168]	@ (800a864 <tcp_create_segment+0x124>)
 800a7bc:	22b0      	movs	r2, #176	@ 0xb0
 800a7be:	492d      	ldr	r1, [pc, #180]	@ (800a874 <tcp_create_segment+0x134>)
 800a7c0:	482a      	ldr	r0, [pc, #168]	@ (800a86c <tcp_create_segment+0x12c>)
 800a7c2:	f004 fbcd 	bl	800ef60 <iprintf>
  seg->len = p->tot_len - optlen;
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	891a      	ldrh	r2, [r3, #8]
 800a7ca:	7dfb      	ldrb	r3, [r7, #23]
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	1ad3      	subs	r3, r2, r3
 800a7d0:	b29a      	uxth	r2, r3
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a7d6:	2114      	movs	r1, #20
 800a7d8:	68b8      	ldr	r0, [r7, #8]
 800a7da:	f7fb fdbd 	bl	8006358 <pbuf_add_header>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d004      	beq.n	800a7ee <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a7e4:	6938      	ldr	r0, [r7, #16]
 800a7e6:	f7fd f8d2 	bl	800798e <tcp_seg_free>
    return NULL;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	e036      	b.n	800a85c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	685a      	ldr	r2, [r3, #4]
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	8ada      	ldrh	r2, [r3, #22]
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	68dc      	ldr	r4, [r3, #12]
 800a800:	4610      	mov	r0, r2
 800a802:	f7fa fae1 	bl	8004dc8 <lwip_htons>
 800a806:	4603      	mov	r3, r0
 800a808:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	8b1a      	ldrh	r2, [r3, #24]
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	68dc      	ldr	r4, [r3, #12]
 800a812:	4610      	mov	r0, r2
 800a814:	f7fa fad8 	bl	8004dc8 <lwip_htons>
 800a818:	4603      	mov	r3, r0
 800a81a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	68dc      	ldr	r4, [r3, #12]
 800a820:	6838      	ldr	r0, [r7, #0]
 800a822:	f7fa fae7 	bl	8004df4 <lwip_htonl>
 800a826:	4603      	mov	r3, r0
 800a828:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a82a:	7dfb      	ldrb	r3, [r7, #23]
 800a82c:	089b      	lsrs	r3, r3, #2
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	3305      	adds	r3, #5
 800a832:	b29b      	uxth	r3, r3
 800a834:	031b      	lsls	r3, r3, #12
 800a836:	b29a      	uxth	r2, r3
 800a838:	79fb      	ldrb	r3, [r7, #7]
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	4313      	orrs	r3, r2
 800a83e:	b29a      	uxth	r2, r3
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	68dc      	ldr	r4, [r3, #12]
 800a844:	4610      	mov	r0, r2
 800a846:	f7fa fabf 	bl	8004dc8 <lwip_htons>
 800a84a:	4603      	mov	r3, r0
 800a84c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	2200      	movs	r2, #0
 800a854:	749a      	strb	r2, [r3, #18]
 800a856:	2200      	movs	r2, #0
 800a858:	74da      	strb	r2, [r3, #19]
  return seg;
 800a85a:	693b      	ldr	r3, [r7, #16]
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	371c      	adds	r7, #28
 800a860:	46bd      	mov	sp, r7
 800a862:	bd90      	pop	{r4, r7, pc}
 800a864:	0801145c 	.word	0x0801145c
 800a868:	08011490 	.word	0x08011490
 800a86c:	080114b0 	.word	0x080114b0
 800a870:	080114d8 	.word	0x080114d8
 800a874:	080114fc 	.word	0x080114fc

0800a878 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a878:	b590      	push	{r4, r7, lr}
 800a87a:	b08b      	sub	sp, #44	@ 0x2c
 800a87c:	af02      	add	r7, sp, #8
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	460b      	mov	r3, r1
 800a882:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a884:	2300      	movs	r3, #0
 800a886:	61fb      	str	r3, [r7, #28]
 800a888:	2300      	movs	r3, #0
 800a88a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a88c:	2300      	movs	r3, #0
 800a88e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d106      	bne.n	800a8a4 <tcp_split_unsent_seg+0x2c>
 800a896:	4b95      	ldr	r3, [pc, #596]	@ (800aaec <tcp_split_unsent_seg+0x274>)
 800a898:	f240 324b 	movw	r2, #843	@ 0x34b
 800a89c:	4994      	ldr	r1, [pc, #592]	@ (800aaf0 <tcp_split_unsent_seg+0x278>)
 800a89e:	4895      	ldr	r0, [pc, #596]	@ (800aaf4 <tcp_split_unsent_seg+0x27c>)
 800a8a0:	f004 fb5e 	bl	800ef60 <iprintf>

  useg = pcb->unsent;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8a8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d102      	bne.n	800a8b6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a8b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a8b4:	e116      	b.n	800aae4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a8b6:	887b      	ldrh	r3, [r7, #2]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d109      	bne.n	800a8d0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a8bc:	4b8b      	ldr	r3, [pc, #556]	@ (800aaec <tcp_split_unsent_seg+0x274>)
 800a8be:	f240 3253 	movw	r2, #851	@ 0x353
 800a8c2:	498d      	ldr	r1, [pc, #564]	@ (800aaf8 <tcp_split_unsent_seg+0x280>)
 800a8c4:	488b      	ldr	r0, [pc, #556]	@ (800aaf4 <tcp_split_unsent_seg+0x27c>)
 800a8c6:	f004 fb4b 	bl	800ef60 <iprintf>
    return ERR_VAL;
 800a8ca:	f06f 0305 	mvn.w	r3, #5
 800a8ce:	e109      	b.n	800aae4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	891b      	ldrh	r3, [r3, #8]
 800a8d4:	887a      	ldrh	r2, [r7, #2]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d301      	bcc.n	800a8de <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	e102      	b.n	800aae4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a8e2:	887a      	ldrh	r2, [r7, #2]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d906      	bls.n	800a8f6 <tcp_split_unsent_seg+0x7e>
 800a8e8:	4b80      	ldr	r3, [pc, #512]	@ (800aaec <tcp_split_unsent_seg+0x274>)
 800a8ea:	f240 325b 	movw	r2, #859	@ 0x35b
 800a8ee:	4983      	ldr	r1, [pc, #524]	@ (800aafc <tcp_split_unsent_seg+0x284>)
 800a8f0:	4880      	ldr	r0, [pc, #512]	@ (800aaf4 <tcp_split_unsent_seg+0x27c>)
 800a8f2:	f004 fb35 	bl	800ef60 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	891b      	ldrh	r3, [r3, #8]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d106      	bne.n	800a90c <tcp_split_unsent_seg+0x94>
 800a8fe:	4b7b      	ldr	r3, [pc, #492]	@ (800aaec <tcp_split_unsent_seg+0x274>)
 800a900:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800a904:	497e      	ldr	r1, [pc, #504]	@ (800ab00 <tcp_split_unsent_seg+0x288>)
 800a906:	487b      	ldr	r0, [pc, #492]	@ (800aaf4 <tcp_split_unsent_seg+0x27c>)
 800a908:	f004 fb2a 	bl	800ef60 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	7a9b      	ldrb	r3, [r3, #10]
 800a910:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a912:	7bfb      	ldrb	r3, [r7, #15]
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	b2db      	uxtb	r3, r3
 800a918:	f003 0304 	and.w	r3, r3, #4
 800a91c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	891a      	ldrh	r2, [r3, #8]
 800a922:	887b      	ldrh	r3, [r7, #2]
 800a924:	1ad3      	subs	r3, r2, r3
 800a926:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a928:	7bbb      	ldrb	r3, [r7, #14]
 800a92a:	b29a      	uxth	r2, r3
 800a92c:	89bb      	ldrh	r3, [r7, #12]
 800a92e:	4413      	add	r3, r2
 800a930:	b29b      	uxth	r3, r3
 800a932:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a936:	4619      	mov	r1, r3
 800a938:	2036      	movs	r0, #54	@ 0x36
 800a93a:	f7fb fabf 	bl	8005ebc <pbuf_alloc>
 800a93e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	2b00      	cmp	r3, #0
 800a944:	f000 80b7 	beq.w	800aab6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	891a      	ldrh	r2, [r3, #8]
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	891b      	ldrh	r3, [r3, #8]
 800a952:	1ad3      	subs	r3, r2, r3
 800a954:	b29a      	uxth	r2, r3
 800a956:	887b      	ldrh	r3, [r7, #2]
 800a958:	4413      	add	r3, r2
 800a95a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	6858      	ldr	r0, [r3, #4]
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	685a      	ldr	r2, [r3, #4]
 800a964:	7bbb      	ldrb	r3, [r7, #14]
 800a966:	18d1      	adds	r1, r2, r3
 800a968:	897b      	ldrh	r3, [r7, #10]
 800a96a:	89ba      	ldrh	r2, [r7, #12]
 800a96c:	f7fb ff84 	bl	8006878 <pbuf_copy_partial>
 800a970:	4603      	mov	r3, r0
 800a972:	461a      	mov	r2, r3
 800a974:	89bb      	ldrh	r3, [r7, #12]
 800a976:	4293      	cmp	r3, r2
 800a978:	f040 809f 	bne.w	800aaba <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	899b      	ldrh	r3, [r3, #12]
 800a982:	b29b      	uxth	r3, r3
 800a984:	4618      	mov	r0, r3
 800a986:	f7fa fa1f 	bl	8004dc8 <lwip_htons>
 800a98a:	4603      	mov	r3, r0
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a992:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a994:	2300      	movs	r3, #0
 800a996:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a998:	7efb      	ldrb	r3, [r7, #27]
 800a99a:	f003 0308 	and.w	r3, r3, #8
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d007      	beq.n	800a9b2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a9a2:	7efb      	ldrb	r3, [r7, #27]
 800a9a4:	f023 0308 	bic.w	r3, r3, #8
 800a9a8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a9aa:	7ebb      	ldrb	r3, [r7, #26]
 800a9ac:	f043 0308 	orr.w	r3, r3, #8
 800a9b0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a9b2:	7efb      	ldrb	r3, [r7, #27]
 800a9b4:	f003 0301 	and.w	r3, r3, #1
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d007      	beq.n	800a9cc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a9bc:	7efb      	ldrb	r3, [r7, #27]
 800a9be:	f023 0301 	bic.w	r3, r3, #1
 800a9c2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a9c4:	7ebb      	ldrb	r3, [r7, #26]
 800a9c6:	f043 0301 	orr.w	r3, r3, #1
 800a9ca:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7fa fa0e 	bl	8004df4 <lwip_htonl>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	887b      	ldrh	r3, [r7, #2]
 800a9dc:	18d1      	adds	r1, r2, r3
 800a9de:	7eba      	ldrb	r2, [r7, #26]
 800a9e0:	7bfb      	ldrb	r3, [r7, #15]
 800a9e2:	9300      	str	r3, [sp, #0]
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	6939      	ldr	r1, [r7, #16]
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f7ff fea9 	bl	800a740 <tcp_create_segment>
 800a9ee:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a9f0:	69fb      	ldr	r3, [r7, #28]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d063      	beq.n	800aabe <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7fb fdca 	bl	8006594 <pbuf_clen>
 800aa00:	4603      	mov	r3, r0
 800aa02:	461a      	mov	r2, r3
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800aa0a:	1a9b      	subs	r3, r3, r2
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	6858      	ldr	r0, [r3, #4]
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	891a      	ldrh	r2, [r3, #8]
 800aa1e:	89bb      	ldrh	r3, [r7, #12]
 800aa20:	1ad3      	subs	r3, r2, r3
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	4619      	mov	r1, r3
 800aa26:	f7fb fba7 	bl	8006178 <pbuf_realloc>
  useg->len -= remainder;
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	891a      	ldrh	r2, [r3, #8]
 800aa2e:	89bb      	ldrh	r3, [r7, #12]
 800aa30:	1ad3      	subs	r3, r2, r3
 800aa32:	b29a      	uxth	r2, r3
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	68db      	ldr	r3, [r3, #12]
 800aa3c:	899b      	ldrh	r3, [r3, #12]
 800aa3e:	b29c      	uxth	r4, r3
 800aa40:	7efb      	ldrb	r3, [r7, #27]
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	4618      	mov	r0, r3
 800aa46:	f7fa f9bf 	bl	8004dc8 <lwip_htons>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	4322      	orrs	r2, r4
 800aa54:	b292      	uxth	r2, r2
 800aa56:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f7fb fd99 	bl	8006594 <pbuf_clen>
 800aa62:	4603      	mov	r3, r0
 800aa64:	461a      	mov	r2, r3
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800aa6c:	4413      	add	r3, r2
 800aa6e:	b29a      	uxth	r2, r3
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800aa76:	69fb      	ldr	r3, [r7, #28]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7fb fd8a 	bl	8006594 <pbuf_clen>
 800aa80:	4603      	mov	r3, r0
 800aa82:	461a      	mov	r2, r3
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800aa8a:	4413      	add	r3, r2
 800aa8c:	b29a      	uxth	r2, r3
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	681a      	ldr	r2, [r3, #0]
 800aa98:	69fb      	ldr	r3, [r7, #28]
 800aa9a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	69fa      	ldr	r2, [r7, #28]
 800aaa0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d103      	bne.n	800aab2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2200      	movs	r2, #0
 800aaae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800aab2:	2300      	movs	r3, #0
 800aab4:	e016      	b.n	800aae4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800aab6:	bf00      	nop
 800aab8:	e002      	b.n	800aac0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800aaba:	bf00      	nop
 800aabc:	e000      	b.n	800aac0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800aabe:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800aac0:	69fb      	ldr	r3, [r7, #28]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d006      	beq.n	800aad4 <tcp_split_unsent_seg+0x25c>
 800aac6:	4b09      	ldr	r3, [pc, #36]	@ (800aaec <tcp_split_unsent_seg+0x274>)
 800aac8:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800aacc:	490d      	ldr	r1, [pc, #52]	@ (800ab04 <tcp_split_unsent_seg+0x28c>)
 800aace:	4809      	ldr	r0, [pc, #36]	@ (800aaf4 <tcp_split_unsent_seg+0x27c>)
 800aad0:	f004 fa46 	bl	800ef60 <iprintf>
  if (p != NULL) {
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d002      	beq.n	800aae0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800aada:	6938      	ldr	r0, [r7, #16]
 800aadc:	f7fb fcd2 	bl	8006484 <pbuf_free>
  }

  return ERR_MEM;
 800aae0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3724      	adds	r7, #36	@ 0x24
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd90      	pop	{r4, r7, pc}
 800aaec:	0801145c 	.word	0x0801145c
 800aaf0:	080117f0 	.word	0x080117f0
 800aaf4:	080114b0 	.word	0x080114b0
 800aaf8:	08011814 	.word	0x08011814
 800aafc:	08011838 	.word	0x08011838
 800ab00:	08011848 	.word	0x08011848
 800ab04:	08011858 	.word	0x08011858

0800ab08 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800ab08:	b590      	push	{r4, r7, lr}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d106      	bne.n	800ab24 <tcp_send_fin+0x1c>
 800ab16:	4b21      	ldr	r3, [pc, #132]	@ (800ab9c <tcp_send_fin+0x94>)
 800ab18:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800ab1c:	4920      	ldr	r1, [pc, #128]	@ (800aba0 <tcp_send_fin+0x98>)
 800ab1e:	4821      	ldr	r0, [pc, #132]	@ (800aba4 <tcp_send_fin+0x9c>)
 800ab20:	f004 fa1e 	bl	800ef60 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d02e      	beq.n	800ab8a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab30:	60fb      	str	r3, [r7, #12]
 800ab32:	e002      	b.n	800ab3a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d1f8      	bne.n	800ab34 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	68db      	ldr	r3, [r3, #12]
 800ab46:	899b      	ldrh	r3, [r3, #12]
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7fa f93c 	bl	8004dc8 <lwip_htons>
 800ab50:	4603      	mov	r3, r0
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	f003 0307 	and.w	r3, r3, #7
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d116      	bne.n	800ab8a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	899b      	ldrh	r3, [r3, #12]
 800ab62:	b29c      	uxth	r4, r3
 800ab64:	2001      	movs	r0, #1
 800ab66:	f7fa f92f 	bl	8004dc8 <lwip_htons>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	68db      	ldr	r3, [r3, #12]
 800ab72:	4322      	orrs	r2, r4
 800ab74:	b292      	uxth	r2, r2
 800ab76:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	8b5b      	ldrh	r3, [r3, #26]
 800ab7c:	f043 0320 	orr.w	r3, r3, #32
 800ab80:	b29a      	uxth	r2, r3
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ab86:	2300      	movs	r3, #0
 800ab88:	e004      	b.n	800ab94 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ab8a:	2101      	movs	r1, #1
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f000 f80b 	bl	800aba8 <tcp_enqueue_flags>
 800ab92:	4603      	mov	r3, r0
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3714      	adds	r7, #20
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd90      	pop	{r4, r7, pc}
 800ab9c:	0801145c 	.word	0x0801145c
 800aba0:	08011864 	.word	0x08011864
 800aba4:	080114b0 	.word	0x080114b0

0800aba8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b08a      	sub	sp, #40	@ 0x28
 800abac:	af02      	add	r7, sp, #8
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	460b      	mov	r3, r1
 800abb2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800abb4:	2300      	movs	r3, #0
 800abb6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800abb8:	2300      	movs	r3, #0
 800abba:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800abbc:	78fb      	ldrb	r3, [r7, #3]
 800abbe:	f003 0303 	and.w	r3, r3, #3
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d106      	bne.n	800abd4 <tcp_enqueue_flags+0x2c>
 800abc6:	4b67      	ldr	r3, [pc, #412]	@ (800ad64 <tcp_enqueue_flags+0x1bc>)
 800abc8:	f240 4211 	movw	r2, #1041	@ 0x411
 800abcc:	4966      	ldr	r1, [pc, #408]	@ (800ad68 <tcp_enqueue_flags+0x1c0>)
 800abce:	4867      	ldr	r0, [pc, #412]	@ (800ad6c <tcp_enqueue_flags+0x1c4>)
 800abd0:	f004 f9c6 	bl	800ef60 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d106      	bne.n	800abe8 <tcp_enqueue_flags+0x40>
 800abda:	4b62      	ldr	r3, [pc, #392]	@ (800ad64 <tcp_enqueue_flags+0x1bc>)
 800abdc:	f240 4213 	movw	r2, #1043	@ 0x413
 800abe0:	4963      	ldr	r1, [pc, #396]	@ (800ad70 <tcp_enqueue_flags+0x1c8>)
 800abe2:	4862      	ldr	r0, [pc, #392]	@ (800ad6c <tcp_enqueue_flags+0x1c4>)
 800abe4:	f004 f9bc 	bl	800ef60 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800abe8:	78fb      	ldrb	r3, [r7, #3]
 800abea:	f003 0302 	and.w	r3, r3, #2
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d001      	beq.n	800abf6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800abf2:	2301      	movs	r3, #1
 800abf4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800abf6:	7ffb      	ldrb	r3, [r7, #31]
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	f003 0304 	and.w	r3, r3, #4
 800ac00:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ac02:	7dfb      	ldrb	r3, [r7, #23]
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	2036      	movs	r0, #54	@ 0x36
 800ac0e:	f7fb f955 	bl	8005ebc <pbuf_alloc>
 800ac12:	6138      	str	r0, [r7, #16]
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d109      	bne.n	800ac2e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	8b5b      	ldrh	r3, [r3, #26]
 800ac1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac22:	b29a      	uxth	r2, r3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ac28:	f04f 33ff 	mov.w	r3, #4294967295
 800ac2c:	e095      	b.n	800ad5a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	895a      	ldrh	r2, [r3, #10]
 800ac32:	7dfb      	ldrb	r3, [r7, #23]
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d206      	bcs.n	800ac48 <tcp_enqueue_flags+0xa0>
 800ac3a:	4b4a      	ldr	r3, [pc, #296]	@ (800ad64 <tcp_enqueue_flags+0x1bc>)
 800ac3c:	f240 4239 	movw	r2, #1081	@ 0x439
 800ac40:	494c      	ldr	r1, [pc, #304]	@ (800ad74 <tcp_enqueue_flags+0x1cc>)
 800ac42:	484a      	ldr	r0, [pc, #296]	@ (800ad6c <tcp_enqueue_flags+0x1c4>)
 800ac44:	f004 f98c 	bl	800ef60 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800ac4c:	78fa      	ldrb	r2, [r7, #3]
 800ac4e:	7ffb      	ldrb	r3, [r7, #31]
 800ac50:	9300      	str	r3, [sp, #0]
 800ac52:	460b      	mov	r3, r1
 800ac54:	6939      	ldr	r1, [r7, #16]
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f7ff fd72 	bl	800a740 <tcp_create_segment>
 800ac5c:	60f8      	str	r0, [r7, #12]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d109      	bne.n	800ac78 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	8b5b      	ldrh	r3, [r3, #26]
 800ac68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac6c:	b29a      	uxth	r2, r3
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ac72:	f04f 33ff 	mov.w	r3, #4294967295
 800ac76:	e070      	b.n	800ad5a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	f003 0303 	and.w	r3, r3, #3
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d006      	beq.n	800ac92 <tcp_enqueue_flags+0xea>
 800ac84:	4b37      	ldr	r3, [pc, #220]	@ (800ad64 <tcp_enqueue_flags+0x1bc>)
 800ac86:	f240 4242 	movw	r2, #1090	@ 0x442
 800ac8a:	493b      	ldr	r1, [pc, #236]	@ (800ad78 <tcp_enqueue_flags+0x1d0>)
 800ac8c:	4837      	ldr	r0, [pc, #220]	@ (800ad6c <tcp_enqueue_flags+0x1c4>)
 800ac8e:	f004 f967 	bl	800ef60 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	891b      	ldrh	r3, [r3, #8]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d006      	beq.n	800aca8 <tcp_enqueue_flags+0x100>
 800ac9a:	4b32      	ldr	r3, [pc, #200]	@ (800ad64 <tcp_enqueue_flags+0x1bc>)
 800ac9c:	f240 4243 	movw	r2, #1091	@ 0x443
 800aca0:	4936      	ldr	r1, [pc, #216]	@ (800ad7c <tcp_enqueue_flags+0x1d4>)
 800aca2:	4832      	ldr	r0, [pc, #200]	@ (800ad6c <tcp_enqueue_flags+0x1c4>)
 800aca4:	f004 f95c 	bl	800ef60 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acac:	2b00      	cmp	r3, #0
 800acae:	d103      	bne.n	800acb8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	68fa      	ldr	r2, [r7, #12]
 800acb4:	66da      	str	r2, [r3, #108]	@ 0x6c
 800acb6:	e00d      	b.n	800acd4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acbc:	61bb      	str	r3, [r7, #24]
 800acbe:	e002      	b.n	800acc6 <tcp_enqueue_flags+0x11e>
 800acc0:	69bb      	ldr	r3, [r7, #24]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	61bb      	str	r3, [r7, #24]
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d1f8      	bne.n	800acc0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800acce:	69bb      	ldr	r3, [r7, #24]
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2200      	movs	r2, #0
 800acd8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800acdc:	78fb      	ldrb	r3, [r7, #3]
 800acde:	f003 0302 	and.w	r3, r3, #2
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d104      	bne.n	800acf0 <tcp_enqueue_flags+0x148>
 800ace6:	78fb      	ldrb	r3, [r7, #3]
 800ace8:	f003 0301 	and.w	r3, r3, #1
 800acec:	2b00      	cmp	r3, #0
 800acee:	d004      	beq.n	800acfa <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800acf4:	1c5a      	adds	r2, r3, #1
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800acfa:	78fb      	ldrb	r3, [r7, #3]
 800acfc:	f003 0301 	and.w	r3, r3, #1
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d006      	beq.n	800ad12 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	8b5b      	ldrh	r3, [r3, #26]
 800ad08:	f043 0320 	orr.w	r3, r3, #32
 800ad0c:	b29a      	uxth	r2, r3
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7fb fc3c 	bl	8006594 <pbuf_clen>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	461a      	mov	r2, r3
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ad26:	4413      	add	r3, r2
 800ad28:	b29a      	uxth	r2, r3
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d00e      	beq.n	800ad58 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d10a      	bne.n	800ad58 <tcp_enqueue_flags+0x1b0>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d106      	bne.n	800ad58 <tcp_enqueue_flags+0x1b0>
 800ad4a:	4b06      	ldr	r3, [pc, #24]	@ (800ad64 <tcp_enqueue_flags+0x1bc>)
 800ad4c:	f240 4265 	movw	r2, #1125	@ 0x465
 800ad50:	490b      	ldr	r1, [pc, #44]	@ (800ad80 <tcp_enqueue_flags+0x1d8>)
 800ad52:	4806      	ldr	r0, [pc, #24]	@ (800ad6c <tcp_enqueue_flags+0x1c4>)
 800ad54:	f004 f904 	bl	800ef60 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ad58:	2300      	movs	r3, #0
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3720      	adds	r7, #32
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	0801145c 	.word	0x0801145c
 800ad68:	08011880 	.word	0x08011880
 800ad6c:	080114b0 	.word	0x080114b0
 800ad70:	080118d8 	.word	0x080118d8
 800ad74:	080118f8 	.word	0x080118f8
 800ad78:	08011934 	.word	0x08011934
 800ad7c:	0801194c 	.word	0x0801194c
 800ad80:	08011978 	.word	0x08011978

0800ad84 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ad84:	b5b0      	push	{r4, r5, r7, lr}
 800ad86:	b08a      	sub	sp, #40	@ 0x28
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d106      	bne.n	800ada0 <tcp_output+0x1c>
 800ad92:	4b8a      	ldr	r3, [pc, #552]	@ (800afbc <tcp_output+0x238>)
 800ad94:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800ad98:	4989      	ldr	r1, [pc, #548]	@ (800afc0 <tcp_output+0x23c>)
 800ad9a:	488a      	ldr	r0, [pc, #552]	@ (800afc4 <tcp_output+0x240>)
 800ad9c:	f004 f8e0 	bl	800ef60 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	7d1b      	ldrb	r3, [r3, #20]
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d106      	bne.n	800adb6 <tcp_output+0x32>
 800ada8:	4b84      	ldr	r3, [pc, #528]	@ (800afbc <tcp_output+0x238>)
 800adaa:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800adae:	4986      	ldr	r1, [pc, #536]	@ (800afc8 <tcp_output+0x244>)
 800adb0:	4884      	ldr	r0, [pc, #528]	@ (800afc4 <tcp_output+0x240>)
 800adb2:	f004 f8d5 	bl	800ef60 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800adb6:	4b85      	ldr	r3, [pc, #532]	@ (800afcc <tcp_output+0x248>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d101      	bne.n	800adc4 <tcp_output+0x40>
    return ERR_OK;
 800adc0:	2300      	movs	r3, #0
 800adc2:	e1ce      	b.n	800b162 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800add0:	4293      	cmp	r3, r2
 800add2:	bf28      	it	cs
 800add4:	4613      	movcs	r3, r2
 800add6:	b29b      	uxth	r3, r3
 800add8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800adde:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800ade0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d10b      	bne.n	800adfe <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	8b5b      	ldrh	r3, [r3, #26]
 800adea:	f003 0302 	and.w	r3, r3, #2
 800adee:	2b00      	cmp	r3, #0
 800adf0:	f000 81aa 	beq.w	800b148 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 fdcb 	bl	800b990 <tcp_send_empty_ack>
 800adfa:	4603      	mov	r3, r0
 800adfc:	e1b1      	b.n	800b162 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800adfe:	6879      	ldr	r1, [r7, #4]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	3304      	adds	r3, #4
 800ae04:	461a      	mov	r2, r3
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f7ff fc7e 	bl	800a708 <tcp_route>
 800ae0c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d102      	bne.n	800ae1a <tcp_output+0x96>
    return ERR_RTE;
 800ae14:	f06f 0303 	mvn.w	r3, #3
 800ae18:	e1a3      	b.n	800b162 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d003      	beq.n	800ae28 <tcp_output+0xa4>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d111      	bne.n	800ae4c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d002      	beq.n	800ae34 <tcp_output+0xb0>
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	3304      	adds	r3, #4
 800ae32:	e000      	b.n	800ae36 <tcp_output+0xb2>
 800ae34:	2300      	movs	r3, #0
 800ae36:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d102      	bne.n	800ae44 <tcp_output+0xc0>
      return ERR_RTE;
 800ae3e:	f06f 0303 	mvn.w	r3, #3
 800ae42:	e18e      	b.n	800b162 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ae4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae4e:	68db      	ldr	r3, [r3, #12]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7f9 ffce 	bl	8004df4 <lwip_htonl>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae5e:	1ad3      	subs	r3, r2, r3
 800ae60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae62:	8912      	ldrh	r2, [r2, #8]
 800ae64:	4413      	add	r3, r2
 800ae66:	69ba      	ldr	r2, [r7, #24]
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d227      	bcs.n	800aebc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ae72:	461a      	mov	r2, r3
 800ae74:	69bb      	ldr	r3, [r7, #24]
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d114      	bne.n	800aea4 <tcp_output+0x120>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d110      	bne.n	800aea4 <tcp_output+0x120>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d10b      	bne.n	800aea4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	8b5b      	ldrh	r3, [r3, #26]
 800aea8:	f003 0302 	and.w	r3, r3, #2
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	f000 814d 	beq.w	800b14c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 fd6c 	bl	800b990 <tcp_send_empty_ack>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	e152      	b.n	800b162 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aec8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800aeca:	6a3b      	ldr	r3, [r7, #32]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	f000 811c 	beq.w	800b10a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800aed2:	e002      	b.n	800aeda <tcp_output+0x156>
 800aed4:	6a3b      	ldr	r3, [r7, #32]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	623b      	str	r3, [r7, #32]
 800aeda:	6a3b      	ldr	r3, [r7, #32]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d1f8      	bne.n	800aed4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800aee2:	e112      	b.n	800b10a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800aee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	899b      	ldrh	r3, [r3, #12]
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	4618      	mov	r0, r3
 800aeee:	f7f9 ff6b 	bl	8004dc8 <lwip_htons>
 800aef2:	4603      	mov	r3, r0
 800aef4:	b2db      	uxtb	r3, r3
 800aef6:	f003 0304 	and.w	r3, r3, #4
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d006      	beq.n	800af0c <tcp_output+0x188>
 800aefe:	4b2f      	ldr	r3, [pc, #188]	@ (800afbc <tcp_output+0x238>)
 800af00:	f240 5236 	movw	r2, #1334	@ 0x536
 800af04:	4932      	ldr	r1, [pc, #200]	@ (800afd0 <tcp_output+0x24c>)
 800af06:	482f      	ldr	r0, [pc, #188]	@ (800afc4 <tcp_output+0x240>)
 800af08:	f004 f82a 	bl	800ef60 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af10:	2b00      	cmp	r3, #0
 800af12:	d01f      	beq.n	800af54 <tcp_output+0x1d0>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	8b5b      	ldrh	r3, [r3, #26]
 800af18:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d119      	bne.n	800af54 <tcp_output+0x1d0>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af24:	2b00      	cmp	r3, #0
 800af26:	d00b      	beq.n	800af40 <tcp_output+0x1bc>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d110      	bne.n	800af54 <tcp_output+0x1d0>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af36:	891a      	ldrh	r2, [r3, #8]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d209      	bcs.n	800af54 <tcp_output+0x1d0>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800af46:	2b00      	cmp	r3, #0
 800af48:	d004      	beq.n	800af54 <tcp_output+0x1d0>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800af50:	2b08      	cmp	r3, #8
 800af52:	d901      	bls.n	800af58 <tcp_output+0x1d4>
 800af54:	2301      	movs	r3, #1
 800af56:	e000      	b.n	800af5a <tcp_output+0x1d6>
 800af58:	2300      	movs	r3, #0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d106      	bne.n	800af6c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	8b5b      	ldrh	r3, [r3, #26]
 800af62:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800af66:	2b00      	cmp	r3, #0
 800af68:	f000 80e4 	beq.w	800b134 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	7d1b      	ldrb	r3, [r3, #20]
 800af70:	2b02      	cmp	r3, #2
 800af72:	d00d      	beq.n	800af90 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800af74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af76:	68db      	ldr	r3, [r3, #12]
 800af78:	899b      	ldrh	r3, [r3, #12]
 800af7a:	b29c      	uxth	r4, r3
 800af7c:	2010      	movs	r0, #16
 800af7e:	f7f9 ff23 	bl	8004dc8 <lwip_htons>
 800af82:	4603      	mov	r3, r0
 800af84:	461a      	mov	r2, r3
 800af86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af88:	68db      	ldr	r3, [r3, #12]
 800af8a:	4322      	orrs	r2, r4
 800af8c:	b292      	uxth	r2, r2
 800af8e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800af90:	697a      	ldr	r2, [r7, #20]
 800af92:	6879      	ldr	r1, [r7, #4]
 800af94:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800af96:	f000 f909 	bl	800b1ac <tcp_output_segment>
 800af9a:	4603      	mov	r3, r0
 800af9c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800af9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d016      	beq.n	800afd4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	8b5b      	ldrh	r3, [r3, #26]
 800afaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afae:	b29a      	uxth	r2, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	835a      	strh	r2, [r3, #26]
      return err;
 800afb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afb8:	e0d3      	b.n	800b162 <tcp_output+0x3de>
 800afba:	bf00      	nop
 800afbc:	0801145c 	.word	0x0801145c
 800afc0:	080119a0 	.word	0x080119a0
 800afc4:	080114b0 	.word	0x080114b0
 800afc8:	080119b8 	.word	0x080119b8
 800afcc:	200082e4 	.word	0x200082e4
 800afd0:	080119e0 	.word	0x080119e0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800afd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd6:	681a      	ldr	r2, [r3, #0]
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	7d1b      	ldrb	r3, [r3, #20]
 800afe0:	2b02      	cmp	r3, #2
 800afe2:	d006      	beq.n	800aff2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	8b5b      	ldrh	r3, [r3, #26]
 800afe8:	f023 0303 	bic.w	r3, r3, #3
 800afec:	b29a      	uxth	r2, r3
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800aff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff4:	68db      	ldr	r3, [r3, #12]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	4618      	mov	r0, r3
 800affa:	f7f9 fefb 	bl	8004df4 <lwip_htonl>
 800affe:	4604      	mov	r4, r0
 800b000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b002:	891b      	ldrh	r3, [r3, #8]
 800b004:	461d      	mov	r5, r3
 800b006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b008:	68db      	ldr	r3, [r3, #12]
 800b00a:	899b      	ldrh	r3, [r3, #12]
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	4618      	mov	r0, r3
 800b010:	f7f9 feda 	bl	8004dc8 <lwip_htons>
 800b014:	4603      	mov	r3, r0
 800b016:	b2db      	uxtb	r3, r3
 800b018:	f003 0303 	and.w	r3, r3, #3
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d001      	beq.n	800b024 <tcp_output+0x2a0>
 800b020:	2301      	movs	r3, #1
 800b022:	e000      	b.n	800b026 <tcp_output+0x2a2>
 800b024:	2300      	movs	r3, #0
 800b026:	442b      	add	r3, r5
 800b028:	4423      	add	r3, r4
 800b02a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	1ad3      	subs	r3, r2, r3
 800b034:	2b00      	cmp	r3, #0
 800b036:	da02      	bge.n	800b03e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	68ba      	ldr	r2, [r7, #8]
 800b03c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b040:	891b      	ldrh	r3, [r3, #8]
 800b042:	461c      	mov	r4, r3
 800b044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b046:	68db      	ldr	r3, [r3, #12]
 800b048:	899b      	ldrh	r3, [r3, #12]
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7f9 febb 	bl	8004dc8 <lwip_htons>
 800b052:	4603      	mov	r3, r0
 800b054:	b2db      	uxtb	r3, r3
 800b056:	f003 0303 	and.w	r3, r3, #3
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d001      	beq.n	800b062 <tcp_output+0x2de>
 800b05e:	2301      	movs	r3, #1
 800b060:	e000      	b.n	800b064 <tcp_output+0x2e0>
 800b062:	2300      	movs	r3, #0
 800b064:	4423      	add	r3, r4
 800b066:	2b00      	cmp	r3, #0
 800b068:	d049      	beq.n	800b0fe <tcp_output+0x37a>
      seg->next = NULL;
 800b06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b06c:	2200      	movs	r2, #0
 800b06e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b074:	2b00      	cmp	r3, #0
 800b076:	d105      	bne.n	800b084 <tcp_output+0x300>
        pcb->unacked = seg;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b07c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800b07e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b080:	623b      	str	r3, [r7, #32]
 800b082:	e03f      	b.n	800b104 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b086:	68db      	ldr	r3, [r3, #12]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7f9 feb2 	bl	8004df4 <lwip_htonl>
 800b090:	4604      	mov	r4, r0
 800b092:	6a3b      	ldr	r3, [r7, #32]
 800b094:	68db      	ldr	r3, [r3, #12]
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	4618      	mov	r0, r3
 800b09a:	f7f9 feab 	bl	8004df4 <lwip_htonl>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	1ae3      	subs	r3, r4, r3
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	da24      	bge.n	800b0f0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	3370      	adds	r3, #112	@ 0x70
 800b0aa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b0ac:	e002      	b.n	800b0b4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b0ae:	69fb      	ldr	r3, [r7, #28]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b0b4:	69fb      	ldr	r3, [r7, #28]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d011      	beq.n	800b0e0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b0bc:	69fb      	ldr	r3, [r7, #28]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	68db      	ldr	r3, [r3, #12]
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7f9 fe95 	bl	8004df4 <lwip_htonl>
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7f9 fe8e 	bl	8004df4 <lwip_htonl>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	dbe6      	blt.n	800b0ae <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800b0e0:	69fb      	ldr	r3, [r7, #28]
 800b0e2:	681a      	ldr	r2, [r3, #0]
 800b0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b0e8:	69fb      	ldr	r3, [r7, #28]
 800b0ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0ec:	601a      	str	r2, [r3, #0]
 800b0ee:	e009      	b.n	800b104 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b0f0:	6a3b      	ldr	r3, [r7, #32]
 800b0f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0f4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b0f6:	6a3b      	ldr	r3, [r7, #32]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	623b      	str	r3, [r7, #32]
 800b0fc:	e002      	b.n	800b104 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b0fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b100:	f7fc fc45 	bl	800798e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b108:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800b10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d012      	beq.n	800b136 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b112:	68db      	ldr	r3, [r3, #12]
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	4618      	mov	r0, r3
 800b118:	f7f9 fe6c 	bl	8004df4 <lwip_htonl>
 800b11c:	4602      	mov	r2, r0
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b122:	1ad3      	subs	r3, r2, r3
 800b124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b126:	8912      	ldrh	r2, [r2, #8]
 800b128:	4413      	add	r3, r2
  while (seg != NULL &&
 800b12a:	69ba      	ldr	r2, [r7, #24]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	f4bf aed9 	bcs.w	800aee4 <tcp_output+0x160>
 800b132:	e000      	b.n	800b136 <tcp_output+0x3b2>
      break;
 800b134:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d108      	bne.n	800b150 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2200      	movs	r2, #0
 800b142:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800b146:	e004      	b.n	800b152 <tcp_output+0x3ce>
    goto output_done;
 800b148:	bf00      	nop
 800b14a:	e002      	b.n	800b152 <tcp_output+0x3ce>
    goto output_done;
 800b14c:	bf00      	nop
 800b14e:	e000      	b.n	800b152 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b150:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	8b5b      	ldrh	r3, [r3, #26]
 800b156:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b15a:	b29a      	uxth	r2, r3
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3728      	adds	r7, #40	@ 0x28
 800b166:	46bd      	mov	sp, r7
 800b168:	bdb0      	pop	{r4, r5, r7, pc}
 800b16a:	bf00      	nop

0800b16c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d106      	bne.n	800b188 <tcp_output_segment_busy+0x1c>
 800b17a:	4b09      	ldr	r3, [pc, #36]	@ (800b1a0 <tcp_output_segment_busy+0x34>)
 800b17c:	f240 529a 	movw	r2, #1434	@ 0x59a
 800b180:	4908      	ldr	r1, [pc, #32]	@ (800b1a4 <tcp_output_segment_busy+0x38>)
 800b182:	4809      	ldr	r0, [pc, #36]	@ (800b1a8 <tcp_output_segment_busy+0x3c>)
 800b184:	f003 feec 	bl	800ef60 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	7b9b      	ldrb	r3, [r3, #14]
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d001      	beq.n	800b196 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b192:	2301      	movs	r3, #1
 800b194:	e000      	b.n	800b198 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b196:	2300      	movs	r3, #0
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3708      	adds	r7, #8
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	0801145c 	.word	0x0801145c
 800b1a4:	080119f8 	.word	0x080119f8
 800b1a8:	080114b0 	.word	0x080114b0

0800b1ac <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b1ac:	b5b0      	push	{r4, r5, r7, lr}
 800b1ae:	b08c      	sub	sp, #48	@ 0x30
 800b1b0:	af04      	add	r7, sp, #16
 800b1b2:	60f8      	str	r0, [r7, #12]
 800b1b4:	60b9      	str	r1, [r7, #8]
 800b1b6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d106      	bne.n	800b1cc <tcp_output_segment+0x20>
 800b1be:	4b64      	ldr	r3, [pc, #400]	@ (800b350 <tcp_output_segment+0x1a4>)
 800b1c0:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800b1c4:	4963      	ldr	r1, [pc, #396]	@ (800b354 <tcp_output_segment+0x1a8>)
 800b1c6:	4864      	ldr	r0, [pc, #400]	@ (800b358 <tcp_output_segment+0x1ac>)
 800b1c8:	f003 feca 	bl	800ef60 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d106      	bne.n	800b1e0 <tcp_output_segment+0x34>
 800b1d2:	4b5f      	ldr	r3, [pc, #380]	@ (800b350 <tcp_output_segment+0x1a4>)
 800b1d4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800b1d8:	4960      	ldr	r1, [pc, #384]	@ (800b35c <tcp_output_segment+0x1b0>)
 800b1da:	485f      	ldr	r0, [pc, #380]	@ (800b358 <tcp_output_segment+0x1ac>)
 800b1dc:	f003 fec0 	bl	800ef60 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d106      	bne.n	800b1f4 <tcp_output_segment+0x48>
 800b1e6:	4b5a      	ldr	r3, [pc, #360]	@ (800b350 <tcp_output_segment+0x1a4>)
 800b1e8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800b1ec:	495c      	ldr	r1, [pc, #368]	@ (800b360 <tcp_output_segment+0x1b4>)
 800b1ee:	485a      	ldr	r0, [pc, #360]	@ (800b358 <tcp_output_segment+0x1ac>)
 800b1f0:	f003 feb6 	bl	800ef60 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b1f4:	68f8      	ldr	r0, [r7, #12]
 800b1f6:	f7ff ffb9 	bl	800b16c <tcp_output_segment_busy>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d001      	beq.n	800b204 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b200:	2300      	movs	r3, #0
 800b202:	e0a1      	b.n	800b348 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	68dc      	ldr	r4, [r3, #12]
 800b20c:	4610      	mov	r0, r2
 800b20e:	f7f9 fdf1 	bl	8004df4 <lwip_htonl>
 800b212:	4603      	mov	r3, r0
 800b214:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	68dc      	ldr	r4, [r3, #12]
 800b21e:	4610      	mov	r0, r2
 800b220:	f7f9 fdd2 	bl	8004dc8 <lwip_htons>
 800b224:	4603      	mov	r3, r0
 800b226:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b22c:	68ba      	ldr	r2, [r7, #8]
 800b22e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800b230:	441a      	add	r2, r3
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	68db      	ldr	r3, [r3, #12]
 800b23a:	3314      	adds	r3, #20
 800b23c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	7a9b      	ldrb	r3, [r3, #10]
 800b242:	f003 0301 	and.w	r3, r3, #1
 800b246:	2b00      	cmp	r3, #0
 800b248:	d015      	beq.n	800b276 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	3304      	adds	r3, #4
 800b24e:	461a      	mov	r2, r3
 800b250:	6879      	ldr	r1, [r7, #4]
 800b252:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800b256:	f7fc fe91 	bl	8007f7c <tcp_eff_send_mss_netif>
 800b25a:	4603      	mov	r3, r0
 800b25c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b25e:	8b7b      	ldrh	r3, [r7, #26]
 800b260:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800b264:	4618      	mov	r0, r3
 800b266:	f7f9 fdc5 	bl	8004df4 <lwip_htonl>
 800b26a:	4602      	mov	r2, r0
 800b26c:	69fb      	ldr	r3, [r7, #28]
 800b26e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b270:	69fb      	ldr	r3, [r7, #28]
 800b272:	3304      	adds	r3, #4
 800b274:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	da02      	bge.n	800b286 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	2200      	movs	r2, #0
 800b284:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d10c      	bne.n	800b2a8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b28e:	4b35      	ldr	r3, [pc, #212]	@ (800b364 <tcp_output_segment+0x1b8>)
 800b290:	681a      	ldr	r2, [r3, #0]
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	68db      	ldr	r3, [r3, #12]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7f9 fda9 	bl	8004df4 <lwip_htonl>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	68da      	ldr	r2, [r3, #12]
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	1ad3      	subs	r3, r2, r3
 800b2b4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	8959      	ldrh	r1, [r3, #10]
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	8b3a      	ldrh	r2, [r7, #24]
 800b2c2:	1a8a      	subs	r2, r1, r2
 800b2c4:	b292      	uxth	r2, r2
 800b2c6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	8919      	ldrh	r1, [r3, #8]
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	685b      	ldr	r3, [r3, #4]
 800b2d2:	8b3a      	ldrh	r2, [r7, #24]
 800b2d4:	1a8a      	subs	r2, r1, r2
 800b2d6:	b292      	uxth	r2, r2
 800b2d8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	68fa      	ldr	r2, [r7, #12]
 800b2e0:	68d2      	ldr	r2, [r2, #12]
 800b2e2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	68db      	ldr	r3, [r3, #12]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	741a      	strb	r2, [r3, #16]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	68da      	ldr	r2, [r3, #12]
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	7a9b      	ldrb	r3, [r3, #10]
 800b2f8:	f003 0301 	and.w	r3, r3, #1
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d001      	beq.n	800b304 <tcp_output_segment+0x158>
 800b300:	2318      	movs	r3, #24
 800b302:	e000      	b.n	800b306 <tcp_output_segment+0x15a>
 800b304:	2314      	movs	r3, #20
 800b306:	4413      	add	r3, r2
 800b308:	69fa      	ldr	r2, [r7, #28]
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d006      	beq.n	800b31c <tcp_output_segment+0x170>
 800b30e:	4b10      	ldr	r3, [pc, #64]	@ (800b350 <tcp_output_segment+0x1a4>)
 800b310:	f240 621c 	movw	r2, #1564	@ 0x61c
 800b314:	4914      	ldr	r1, [pc, #80]	@ (800b368 <tcp_output_segment+0x1bc>)
 800b316:	4810      	ldr	r0, [pc, #64]	@ (800b358 <tcp_output_segment+0x1ac>)
 800b318:	f003 fe22 	bl	800ef60 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	6858      	ldr	r0, [r3, #4]
 800b320:	68b9      	ldr	r1, [r7, #8]
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	1d1c      	adds	r4, r3, #4
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	7add      	ldrb	r5, [r3, #11]
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	7a9b      	ldrb	r3, [r3, #10]
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	9202      	str	r2, [sp, #8]
 800b332:	2206      	movs	r2, #6
 800b334:	9201      	str	r2, [sp, #4]
 800b336:	9300      	str	r3, [sp, #0]
 800b338:	462b      	mov	r3, r5
 800b33a:	4622      	mov	r2, r4
 800b33c:	f002 fce2 	bl	800dd04 <ip4_output_if>
 800b340:	4603      	mov	r3, r0
 800b342:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b344:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3720      	adds	r7, #32
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bdb0      	pop	{r4, r5, r7, pc}
 800b350:	0801145c 	.word	0x0801145c
 800b354:	08011a20 	.word	0x08011a20
 800b358:	080114b0 	.word	0x080114b0
 800b35c:	08011a40 	.word	0x08011a40
 800b360:	08011a60 	.word	0x08011a60
 800b364:	20008298 	.word	0x20008298
 800b368:	08011a84 	.word	0x08011a84

0800b36c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b36c:	b5b0      	push	{r4, r5, r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d106      	bne.n	800b388 <tcp_rexmit_rto_prepare+0x1c>
 800b37a:	4b31      	ldr	r3, [pc, #196]	@ (800b440 <tcp_rexmit_rto_prepare+0xd4>)
 800b37c:	f240 6263 	movw	r2, #1635	@ 0x663
 800b380:	4930      	ldr	r1, [pc, #192]	@ (800b444 <tcp_rexmit_rto_prepare+0xd8>)
 800b382:	4831      	ldr	r0, [pc, #196]	@ (800b448 <tcp_rexmit_rto_prepare+0xdc>)
 800b384:	f003 fdec 	bl	800ef60 <iprintf>

  if (pcb->unacked == NULL) {
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d102      	bne.n	800b396 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b390:	f06f 0305 	mvn.w	r3, #5
 800b394:	e050      	b.n	800b438 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b39a:	60fb      	str	r3, [r7, #12]
 800b39c:	e00b      	b.n	800b3b6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b39e:	68f8      	ldr	r0, [r7, #12]
 800b3a0:	f7ff fee4 	bl	800b16c <tcp_output_segment_busy>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d002      	beq.n	800b3b0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b3aa:	f06f 0305 	mvn.w	r3, #5
 800b3ae:	e043      	b.n	800b438 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	60fb      	str	r3, [r7, #12]
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d1ef      	bne.n	800b39e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b3be:	68f8      	ldr	r0, [r7, #12]
 800b3c0:	f7ff fed4 	bl	800b16c <tcp_output_segment_busy>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d002      	beq.n	800b3d0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b3ca:	f06f 0305 	mvn.w	r3, #5
 800b3ce:	e033      	b.n	800b438 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	8b5b      	ldrh	r3, [r3, #26]
 800b3ea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800b3ee:	b29a      	uxth	r2, r3
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f7f9 fcfa 	bl	8004df4 <lwip_htonl>
 800b400:	4604      	mov	r4, r0
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	891b      	ldrh	r3, [r3, #8]
 800b406:	461d      	mov	r5, r3
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	899b      	ldrh	r3, [r3, #12]
 800b40e:	b29b      	uxth	r3, r3
 800b410:	4618      	mov	r0, r3
 800b412:	f7f9 fcd9 	bl	8004dc8 <lwip_htons>
 800b416:	4603      	mov	r3, r0
 800b418:	b2db      	uxtb	r3, r3
 800b41a:	f003 0303 	and.w	r3, r3, #3
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d001      	beq.n	800b426 <tcp_rexmit_rto_prepare+0xba>
 800b422:	2301      	movs	r3, #1
 800b424:	e000      	b.n	800b428 <tcp_rexmit_rto_prepare+0xbc>
 800b426:	2300      	movs	r3, #0
 800b428:	442b      	add	r3, r5
 800b42a:	18e2      	adds	r2, r4, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2200      	movs	r2, #0
 800b434:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800b436:	2300      	movs	r3, #0
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3710      	adds	r7, #16
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bdb0      	pop	{r4, r5, r7, pc}
 800b440:	0801145c 	.word	0x0801145c
 800b444:	08011a98 	.word	0x08011a98
 800b448:	080114b0 	.word	0x080114b0

0800b44c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d106      	bne.n	800b468 <tcp_rexmit_rto_commit+0x1c>
 800b45a:	4b0d      	ldr	r3, [pc, #52]	@ (800b490 <tcp_rexmit_rto_commit+0x44>)
 800b45c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800b460:	490c      	ldr	r1, [pc, #48]	@ (800b494 <tcp_rexmit_rto_commit+0x48>)
 800b462:	480d      	ldr	r0, [pc, #52]	@ (800b498 <tcp_rexmit_rto_commit+0x4c>)
 800b464:	f003 fd7c 	bl	800ef60 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b46e:	2bff      	cmp	r3, #255	@ 0xff
 800b470:	d007      	beq.n	800b482 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b478:	3301      	adds	r3, #1
 800b47a:	b2da      	uxtb	r2, r3
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f7ff fc7e 	bl	800ad84 <tcp_output>
}
 800b488:	bf00      	nop
 800b48a:	3708      	adds	r7, #8
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}
 800b490:	0801145c 	.word	0x0801145c
 800b494:	08011abc 	.word	0x08011abc
 800b498:	080114b0 	.word	0x080114b0

0800b49c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b082      	sub	sp, #8
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d106      	bne.n	800b4b8 <tcp_rexmit_rto+0x1c>
 800b4aa:	4b0a      	ldr	r3, [pc, #40]	@ (800b4d4 <tcp_rexmit_rto+0x38>)
 800b4ac:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800b4b0:	4909      	ldr	r1, [pc, #36]	@ (800b4d8 <tcp_rexmit_rto+0x3c>)
 800b4b2:	480a      	ldr	r0, [pc, #40]	@ (800b4dc <tcp_rexmit_rto+0x40>)
 800b4b4:	f003 fd54 	bl	800ef60 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f7ff ff57 	bl	800b36c <tcp_rexmit_rto_prepare>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d102      	bne.n	800b4ca <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f7ff ffc1 	bl	800b44c <tcp_rexmit_rto_commit>
  }
}
 800b4ca:	bf00      	nop
 800b4cc:	3708      	adds	r7, #8
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	0801145c 	.word	0x0801145c
 800b4d8:	08011ae0 	.word	0x08011ae0
 800b4dc:	080114b0 	.word	0x080114b0

0800b4e0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b4e0:	b590      	push	{r4, r7, lr}
 800b4e2:	b085      	sub	sp, #20
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d106      	bne.n	800b4fc <tcp_rexmit+0x1c>
 800b4ee:	4b2f      	ldr	r3, [pc, #188]	@ (800b5ac <tcp_rexmit+0xcc>)
 800b4f0:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800b4f4:	492e      	ldr	r1, [pc, #184]	@ (800b5b0 <tcp_rexmit+0xd0>)
 800b4f6:	482f      	ldr	r0, [pc, #188]	@ (800b5b4 <tcp_rexmit+0xd4>)
 800b4f8:	f003 fd32 	bl	800ef60 <iprintf>

  if (pcb->unacked == NULL) {
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b500:	2b00      	cmp	r3, #0
 800b502:	d102      	bne.n	800b50a <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b504:	f06f 0305 	mvn.w	r3, #5
 800b508:	e04c      	b.n	800b5a4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b50e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b510:	68b8      	ldr	r0, [r7, #8]
 800b512:	f7ff fe2b 	bl	800b16c <tcp_output_segment_busy>
 800b516:	4603      	mov	r3, r0
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d002      	beq.n	800b522 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b51c:	f06f 0305 	mvn.w	r3, #5
 800b520:	e040      	b.n	800b5a4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	681a      	ldr	r2, [r3, #0]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	336c      	adds	r3, #108	@ 0x6c
 800b52e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b530:	e002      	b.n	800b538 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d011      	beq.n	800b564 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	68db      	ldr	r3, [r3, #12]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	4618      	mov	r0, r3
 800b54a:	f7f9 fc53 	bl	8004df4 <lwip_htonl>
 800b54e:	4604      	mov	r4, r0
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	68db      	ldr	r3, [r3, #12]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	4618      	mov	r0, r3
 800b558:	f7f9 fc4c 	bl	8004df4 <lwip_htonl>
 800b55c:	4603      	mov	r3, r0
 800b55e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b560:	2b00      	cmp	r3, #0
 800b562:	dbe6      	blt.n	800b532 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	68ba      	ldr	r2, [r7, #8]
 800b570:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d103      	bne.n	800b582 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2200      	movs	r2, #0
 800b57e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b588:	2bff      	cmp	r3, #255	@ 0xff
 800b58a:	d007      	beq.n	800b59c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b592:	3301      	adds	r3, #1
 800b594:	b2da      	uxtb	r2, r3
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b5a2:	2300      	movs	r3, #0
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3714      	adds	r7, #20
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd90      	pop	{r4, r7, pc}
 800b5ac:	0801145c 	.word	0x0801145c
 800b5b0:	08011afc 	.word	0x08011afc
 800b5b4:	080114b0 	.word	0x080114b0

0800b5b8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b082      	sub	sp, #8
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d106      	bne.n	800b5d4 <tcp_rexmit_fast+0x1c>
 800b5c6:	4b2a      	ldr	r3, [pc, #168]	@ (800b670 <tcp_rexmit_fast+0xb8>)
 800b5c8:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800b5cc:	4929      	ldr	r1, [pc, #164]	@ (800b674 <tcp_rexmit_fast+0xbc>)
 800b5ce:	482a      	ldr	r0, [pc, #168]	@ (800b678 <tcp_rexmit_fast+0xc0>)
 800b5d0:	f003 fcc6 	bl	800ef60 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d044      	beq.n	800b666 <tcp_rexmit_fast+0xae>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	8b5b      	ldrh	r3, [r3, #26]
 800b5e0:	f003 0304 	and.w	r3, r3, #4
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d13e      	bne.n	800b666 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f7ff ff79 	bl	800b4e0 <tcp_rexmit>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d138      	bne.n	800b666 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b600:	4293      	cmp	r3, r2
 800b602:	bf28      	it	cs
 800b604:	4613      	movcs	r3, r2
 800b606:	b29b      	uxth	r3, r3
 800b608:	0fda      	lsrs	r2, r3, #31
 800b60a:	4413      	add	r3, r2
 800b60c:	105b      	asrs	r3, r3, #1
 800b60e:	b29a      	uxth	r2, r3
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800b61c:	461a      	mov	r2, r3
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b622:	005b      	lsls	r3, r3, #1
 800b624:	429a      	cmp	r2, r3
 800b626:	d206      	bcs.n	800b636 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b62c:	005b      	lsls	r3, r3, #1
 800b62e:	b29a      	uxth	r2, r3
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b640:	4619      	mov	r1, r3
 800b642:	0049      	lsls	r1, r1, #1
 800b644:	440b      	add	r3, r1
 800b646:	b29b      	uxth	r3, r3
 800b648:	4413      	add	r3, r2
 800b64a:	b29a      	uxth	r2, r3
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	8b5b      	ldrh	r3, [r3, #26]
 800b656:	f043 0304 	orr.w	r3, r3, #4
 800b65a:	b29a      	uxth	r2, r3
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2200      	movs	r2, #0
 800b664:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800b666:	bf00      	nop
 800b668:	3708      	adds	r7, #8
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
 800b66e:	bf00      	nop
 800b670:	0801145c 	.word	0x0801145c
 800b674:	08011b14 	.word	0x08011b14
 800b678:	080114b0 	.word	0x080114b0

0800b67c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b086      	sub	sp, #24
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	607b      	str	r3, [r7, #4]
 800b686:	460b      	mov	r3, r1
 800b688:	817b      	strh	r3, [r7, #10]
 800b68a:	4613      	mov	r3, r2
 800b68c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b68e:	897a      	ldrh	r2, [r7, #10]
 800b690:	893b      	ldrh	r3, [r7, #8]
 800b692:	4413      	add	r3, r2
 800b694:	b29b      	uxth	r3, r3
 800b696:	3314      	adds	r3, #20
 800b698:	b29b      	uxth	r3, r3
 800b69a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b69e:	4619      	mov	r1, r3
 800b6a0:	2022      	movs	r0, #34	@ 0x22
 800b6a2:	f7fa fc0b 	bl	8005ebc <pbuf_alloc>
 800b6a6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d04d      	beq.n	800b74a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b6ae:	897b      	ldrh	r3, [r7, #10]
 800b6b0:	3313      	adds	r3, #19
 800b6b2:	697a      	ldr	r2, [r7, #20]
 800b6b4:	8952      	ldrh	r2, [r2, #10]
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	db06      	blt.n	800b6c8 <tcp_output_alloc_header_common+0x4c>
 800b6ba:	4b26      	ldr	r3, [pc, #152]	@ (800b754 <tcp_output_alloc_header_common+0xd8>)
 800b6bc:	f240 7223 	movw	r2, #1827	@ 0x723
 800b6c0:	4925      	ldr	r1, [pc, #148]	@ (800b758 <tcp_output_alloc_header_common+0xdc>)
 800b6c2:	4826      	ldr	r0, [pc, #152]	@ (800b75c <tcp_output_alloc_header_common+0xe0>)
 800b6c4:	f003 fc4c 	bl	800ef60 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b6ce:	8c3b      	ldrh	r3, [r7, #32]
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f7f9 fb79 	bl	8004dc8 <lwip_htons>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	461a      	mov	r2, r3
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b6de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f7f9 fb71 	bl	8004dc8 <lwip_htons>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b6f4:	68f8      	ldr	r0, [r7, #12]
 800b6f6:	f7f9 fb7d 	bl	8004df4 <lwip_htonl>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b700:	897b      	ldrh	r3, [r7, #10]
 800b702:	089b      	lsrs	r3, r3, #2
 800b704:	b29b      	uxth	r3, r3
 800b706:	3305      	adds	r3, #5
 800b708:	b29b      	uxth	r3, r3
 800b70a:	031b      	lsls	r3, r3, #12
 800b70c:	b29a      	uxth	r2, r3
 800b70e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b712:	b29b      	uxth	r3, r3
 800b714:	4313      	orrs	r3, r2
 800b716:	b29b      	uxth	r3, r3
 800b718:	4618      	mov	r0, r3
 800b71a:	f7f9 fb55 	bl	8004dc8 <lwip_htons>
 800b71e:	4603      	mov	r3, r0
 800b720:	461a      	mov	r2, r3
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b726:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b728:	4618      	mov	r0, r3
 800b72a:	f7f9 fb4d 	bl	8004dc8 <lwip_htons>
 800b72e:	4603      	mov	r3, r0
 800b730:	461a      	mov	r2, r3
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	2200      	movs	r2, #0
 800b73a:	741a      	strb	r2, [r3, #16]
 800b73c:	2200      	movs	r2, #0
 800b73e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	2200      	movs	r2, #0
 800b744:	749a      	strb	r2, [r3, #18]
 800b746:	2200      	movs	r2, #0
 800b748:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b74a:	697b      	ldr	r3, [r7, #20]
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3718      	adds	r7, #24
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}
 800b754:	0801145c 	.word	0x0801145c
 800b758:	08011b34 	.word	0x08011b34
 800b75c:	080114b0 	.word	0x080114b0

0800b760 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b760:	b5b0      	push	{r4, r5, r7, lr}
 800b762:	b08a      	sub	sp, #40	@ 0x28
 800b764:	af04      	add	r7, sp, #16
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	607b      	str	r3, [r7, #4]
 800b76a:	460b      	mov	r3, r1
 800b76c:	817b      	strh	r3, [r7, #10]
 800b76e:	4613      	mov	r3, r2
 800b770:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d106      	bne.n	800b786 <tcp_output_alloc_header+0x26>
 800b778:	4b15      	ldr	r3, [pc, #84]	@ (800b7d0 <tcp_output_alloc_header+0x70>)
 800b77a:	f240 7242 	movw	r2, #1858	@ 0x742
 800b77e:	4915      	ldr	r1, [pc, #84]	@ (800b7d4 <tcp_output_alloc_header+0x74>)
 800b780:	4815      	ldr	r0, [pc, #84]	@ (800b7d8 <tcp_output_alloc_header+0x78>)
 800b782:	f003 fbed 	bl	800ef60 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	8adb      	ldrh	r3, [r3, #22]
 800b78e:	68fa      	ldr	r2, [r7, #12]
 800b790:	8b12      	ldrh	r2, [r2, #24]
 800b792:	68f9      	ldr	r1, [r7, #12]
 800b794:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800b796:	893d      	ldrh	r5, [r7, #8]
 800b798:	897c      	ldrh	r4, [r7, #10]
 800b79a:	9103      	str	r1, [sp, #12]
 800b79c:	2110      	movs	r1, #16
 800b79e:	9102      	str	r1, [sp, #8]
 800b7a0:	9201      	str	r2, [sp, #4]
 800b7a2:	9300      	str	r3, [sp, #0]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	462a      	mov	r2, r5
 800b7a8:	4621      	mov	r1, r4
 800b7aa:	f7ff ff67 	bl	800b67c <tcp_output_alloc_header_common>
 800b7ae:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d006      	beq.n	800b7c4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7ba:	68fa      	ldr	r2, [r7, #12]
 800b7bc:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800b7be:	441a      	add	r2, r3
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800b7c4:	697b      	ldr	r3, [r7, #20]
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3718      	adds	r7, #24
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bdb0      	pop	{r4, r5, r7, pc}
 800b7ce:	bf00      	nop
 800b7d0:	0801145c 	.word	0x0801145c
 800b7d4:	08011b64 	.word	0x08011b64
 800b7d8:	080114b0 	.word	0x080114b0

0800b7dc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b088      	sub	sp, #32
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	4611      	mov	r1, r2
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	460b      	mov	r3, r1
 800b7ec:	71fb      	strb	r3, [r7, #7]
 800b7ee:	4613      	mov	r3, r2
 800b7f0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d106      	bne.n	800b80a <tcp_output_fill_options+0x2e>
 800b7fc:	4b12      	ldr	r3, [pc, #72]	@ (800b848 <tcp_output_fill_options+0x6c>)
 800b7fe:	f240 7256 	movw	r2, #1878	@ 0x756
 800b802:	4912      	ldr	r1, [pc, #72]	@ (800b84c <tcp_output_fill_options+0x70>)
 800b804:	4812      	ldr	r0, [pc, #72]	@ (800b850 <tcp_output_fill_options+0x74>)
 800b806:	f003 fbab 	bl	800ef60 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b810:	69bb      	ldr	r3, [r7, #24]
 800b812:	3314      	adds	r3, #20
 800b814:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b816:	8bfb      	ldrh	r3, [r7, #30]
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	461a      	mov	r2, r3
 800b81c:	79fb      	ldrb	r3, [r7, #7]
 800b81e:	009b      	lsls	r3, r3, #2
 800b820:	f003 0304 	and.w	r3, r3, #4
 800b824:	4413      	add	r3, r2
 800b826:	3314      	adds	r3, #20
 800b828:	69ba      	ldr	r2, [r7, #24]
 800b82a:	4413      	add	r3, r2
 800b82c:	697a      	ldr	r2, [r7, #20]
 800b82e:	429a      	cmp	r2, r3
 800b830:	d006      	beq.n	800b840 <tcp_output_fill_options+0x64>
 800b832:	4b05      	ldr	r3, [pc, #20]	@ (800b848 <tcp_output_fill_options+0x6c>)
 800b834:	f240 7275 	movw	r2, #1909	@ 0x775
 800b838:	4906      	ldr	r1, [pc, #24]	@ (800b854 <tcp_output_fill_options+0x78>)
 800b83a:	4805      	ldr	r0, [pc, #20]	@ (800b850 <tcp_output_fill_options+0x74>)
 800b83c:	f003 fb90 	bl	800ef60 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b840:	bf00      	nop
 800b842:	3720      	adds	r7, #32
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	0801145c 	.word	0x0801145c
 800b84c:	08011b8c 	.word	0x08011b8c
 800b850:	080114b0 	.word	0x080114b0
 800b854:	08011a84 	.word	0x08011a84

0800b858 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b08a      	sub	sp, #40	@ 0x28
 800b85c:	af04      	add	r7, sp, #16
 800b85e:	60f8      	str	r0, [r7, #12]
 800b860:	60b9      	str	r1, [r7, #8]
 800b862:	607a      	str	r2, [r7, #4]
 800b864:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d106      	bne.n	800b87a <tcp_output_control_segment+0x22>
 800b86c:	4b1c      	ldr	r3, [pc, #112]	@ (800b8e0 <tcp_output_control_segment+0x88>)
 800b86e:	f240 7287 	movw	r2, #1927	@ 0x787
 800b872:	491c      	ldr	r1, [pc, #112]	@ (800b8e4 <tcp_output_control_segment+0x8c>)
 800b874:	481c      	ldr	r0, [pc, #112]	@ (800b8e8 <tcp_output_control_segment+0x90>)
 800b876:	f003 fb73 	bl	800ef60 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b87a:	683a      	ldr	r2, [r7, #0]
 800b87c:	6879      	ldr	r1, [r7, #4]
 800b87e:	68f8      	ldr	r0, [r7, #12]
 800b880:	f7fe ff42 	bl	800a708 <tcp_route>
 800b884:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d102      	bne.n	800b892 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b88c:	23fc      	movs	r3, #252	@ 0xfc
 800b88e:	75fb      	strb	r3, [r7, #23]
 800b890:	e01c      	b.n	800b8cc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d006      	beq.n	800b8a6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	7adb      	ldrb	r3, [r3, #11]
 800b89c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	7a9b      	ldrb	r3, [r3, #10]
 800b8a2:	757b      	strb	r3, [r7, #21]
 800b8a4:	e003      	b.n	800b8ae <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b8a6:	23ff      	movs	r3, #255	@ 0xff
 800b8a8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b8ae:	7dba      	ldrb	r2, [r7, #22]
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	9302      	str	r3, [sp, #8]
 800b8b4:	2306      	movs	r3, #6
 800b8b6:	9301      	str	r3, [sp, #4]
 800b8b8:	7d7b      	ldrb	r3, [r7, #21]
 800b8ba:	9300      	str	r3, [sp, #0]
 800b8bc:	4613      	mov	r3, r2
 800b8be:	683a      	ldr	r2, [r7, #0]
 800b8c0:	6879      	ldr	r1, [r7, #4]
 800b8c2:	68b8      	ldr	r0, [r7, #8]
 800b8c4:	f002 fa1e 	bl	800dd04 <ip4_output_if>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b8cc:	68b8      	ldr	r0, [r7, #8]
 800b8ce:	f7fa fdd9 	bl	8006484 <pbuf_free>
  return err;
 800b8d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3718      	adds	r7, #24
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
 800b8de:	bf00      	nop
 800b8e0:	0801145c 	.word	0x0801145c
 800b8e4:	08011bb4 	.word	0x08011bb4
 800b8e8:	080114b0 	.word	0x080114b0

0800b8ec <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b8ec:	b590      	push	{r4, r7, lr}
 800b8ee:	b08b      	sub	sp, #44	@ 0x2c
 800b8f0:	af04      	add	r7, sp, #16
 800b8f2:	60f8      	str	r0, [r7, #12]
 800b8f4:	60b9      	str	r1, [r7, #8]
 800b8f6:	607a      	str	r2, [r7, #4]
 800b8f8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d106      	bne.n	800b90e <tcp_rst+0x22>
 800b900:	4b1f      	ldr	r3, [pc, #124]	@ (800b980 <tcp_rst+0x94>)
 800b902:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800b906:	491f      	ldr	r1, [pc, #124]	@ (800b984 <tcp_rst+0x98>)
 800b908:	481f      	ldr	r0, [pc, #124]	@ (800b988 <tcp_rst+0x9c>)
 800b90a:	f003 fb29 	bl	800ef60 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b90e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b910:	2b00      	cmp	r3, #0
 800b912:	d106      	bne.n	800b922 <tcp_rst+0x36>
 800b914:	4b1a      	ldr	r3, [pc, #104]	@ (800b980 <tcp_rst+0x94>)
 800b916:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800b91a:	491c      	ldr	r1, [pc, #112]	@ (800b98c <tcp_rst+0xa0>)
 800b91c:	481a      	ldr	r0, [pc, #104]	@ (800b988 <tcp_rst+0x9c>)
 800b91e:	f003 fb1f 	bl	800ef60 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b922:	2300      	movs	r3, #0
 800b924:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b926:	f246 0308 	movw	r3, #24584	@ 0x6008
 800b92a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b92c:	7dfb      	ldrb	r3, [r7, #23]
 800b92e:	b29c      	uxth	r4, r3
 800b930:	68b8      	ldr	r0, [r7, #8]
 800b932:	f7f9 fa5f 	bl	8004df4 <lwip_htonl>
 800b936:	4602      	mov	r2, r0
 800b938:	8abb      	ldrh	r3, [r7, #20]
 800b93a:	9303      	str	r3, [sp, #12]
 800b93c:	2314      	movs	r3, #20
 800b93e:	9302      	str	r3, [sp, #8]
 800b940:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800b942:	9301      	str	r3, [sp, #4]
 800b944:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b946:	9300      	str	r3, [sp, #0]
 800b948:	4613      	mov	r3, r2
 800b94a:	2200      	movs	r2, #0
 800b94c:	4621      	mov	r1, r4
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f7ff fe94 	bl	800b67c <tcp_output_alloc_header_common>
 800b954:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d00c      	beq.n	800b976 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b95c:	7dfb      	ldrb	r3, [r7, #23]
 800b95e:	2200      	movs	r2, #0
 800b960:	6939      	ldr	r1, [r7, #16]
 800b962:	68f8      	ldr	r0, [r7, #12]
 800b964:	f7ff ff3a 	bl	800b7dc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b96a:	683a      	ldr	r2, [r7, #0]
 800b96c:	6939      	ldr	r1, [r7, #16]
 800b96e:	68f8      	ldr	r0, [r7, #12]
 800b970:	f7ff ff72 	bl	800b858 <tcp_output_control_segment>
 800b974:	e000      	b.n	800b978 <tcp_rst+0x8c>
    return;
 800b976:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b978:	371c      	adds	r7, #28
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd90      	pop	{r4, r7, pc}
 800b97e:	bf00      	nop
 800b980:	0801145c 	.word	0x0801145c
 800b984:	08011be0 	.word	0x08011be0
 800b988:	080114b0 	.word	0x080114b0
 800b98c:	08011bfc 	.word	0x08011bfc

0800b990 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b990:	b590      	push	{r4, r7, lr}
 800b992:	b087      	sub	sp, #28
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b998:	2300      	movs	r3, #0
 800b99a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b99c:	2300      	movs	r3, #0
 800b99e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d106      	bne.n	800b9b4 <tcp_send_empty_ack+0x24>
 800b9a6:	4b28      	ldr	r3, [pc, #160]	@ (800ba48 <tcp_send_empty_ack+0xb8>)
 800b9a8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800b9ac:	4927      	ldr	r1, [pc, #156]	@ (800ba4c <tcp_send_empty_ack+0xbc>)
 800b9ae:	4828      	ldr	r0, [pc, #160]	@ (800ba50 <tcp_send_empty_ack+0xc0>)
 800b9b0:	f003 fad6 	bl	800ef60 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b9b4:	7dfb      	ldrb	r3, [r7, #23]
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	f003 0304 	and.w	r3, r3, #4
 800b9be:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b9c0:	7d7b      	ldrb	r3, [r7, #21]
 800b9c2:	b29c      	uxth	r4, r3
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7f9 fa13 	bl	8004df4 <lwip_htonl>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	4621      	mov	r1, r4
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f7ff fec3 	bl	800b760 <tcp_output_alloc_header>
 800b9da:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d109      	bne.n	800b9f6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	8b5b      	ldrh	r3, [r3, #26]
 800b9e6:	f043 0303 	orr.w	r3, r3, #3
 800b9ea:	b29a      	uxth	r2, r3
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b9f0:	f06f 0301 	mvn.w	r3, #1
 800b9f4:	e023      	b.n	800ba3e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b9f6:	7dbb      	ldrb	r3, [r7, #22]
 800b9f8:	7dfa      	ldrb	r2, [r7, #23]
 800b9fa:	6939      	ldr	r1, [r7, #16]
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f7ff feed 	bl	800b7dc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	3304      	adds	r3, #4
 800ba08:	6939      	ldr	r1, [r7, #16]
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f7ff ff24 	bl	800b858 <tcp_output_control_segment>
 800ba10:	4603      	mov	r3, r0
 800ba12:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ba14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d007      	beq.n	800ba2c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	8b5b      	ldrh	r3, [r3, #26]
 800ba20:	f043 0303 	orr.w	r3, r3, #3
 800ba24:	b29a      	uxth	r2, r3
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	835a      	strh	r2, [r3, #26]
 800ba2a:	e006      	b.n	800ba3a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	8b5b      	ldrh	r3, [r3, #26]
 800ba30:	f023 0303 	bic.w	r3, r3, #3
 800ba34:	b29a      	uxth	r2, r3
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800ba3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	371c      	adds	r7, #28
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd90      	pop	{r4, r7, pc}
 800ba46:	bf00      	nop
 800ba48:	0801145c 	.word	0x0801145c
 800ba4c:	08011c18 	.word	0x08011c18
 800ba50:	080114b0 	.word	0x080114b0

0800ba54 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ba54:	b590      	push	{r4, r7, lr}
 800ba56:	b087      	sub	sp, #28
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d106      	bne.n	800ba74 <tcp_keepalive+0x20>
 800ba66:	4b18      	ldr	r3, [pc, #96]	@ (800bac8 <tcp_keepalive+0x74>)
 800ba68:	f640 0224 	movw	r2, #2084	@ 0x824
 800ba6c:	4917      	ldr	r1, [pc, #92]	@ (800bacc <tcp_keepalive+0x78>)
 800ba6e:	4818      	ldr	r0, [pc, #96]	@ (800bad0 <tcp_keepalive+0x7c>)
 800ba70:	f003 fa76 	bl	800ef60 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ba74:	7dfb      	ldrb	r3, [r7, #23]
 800ba76:	b29c      	uxth	r4, r3
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba7c:	3b01      	subs	r3, #1
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f7f9 f9b8 	bl	8004df4 <lwip_htonl>
 800ba84:	4603      	mov	r3, r0
 800ba86:	2200      	movs	r2, #0
 800ba88:	4621      	mov	r1, r4
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f7ff fe68 	bl	800b760 <tcp_output_alloc_header>
 800ba90:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d102      	bne.n	800ba9e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800ba98:	f04f 33ff 	mov.w	r3, #4294967295
 800ba9c:	e010      	b.n	800bac0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ba9e:	7dfb      	ldrb	r3, [r7, #23]
 800baa0:	2200      	movs	r2, #0
 800baa2:	6939      	ldr	r1, [r7, #16]
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f7ff fe99 	bl	800b7dc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	3304      	adds	r3, #4
 800bab0:	6939      	ldr	r1, [r7, #16]
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f7ff fed0 	bl	800b858 <tcp_output_control_segment>
 800bab8:	4603      	mov	r3, r0
 800baba:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800babc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	371c      	adds	r7, #28
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd90      	pop	{r4, r7, pc}
 800bac8:	0801145c 	.word	0x0801145c
 800bacc:	08011c38 	.word	0x08011c38
 800bad0:	080114b0 	.word	0x080114b0

0800bad4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800bad4:	b590      	push	{r4, r7, lr}
 800bad6:	b08b      	sub	sp, #44	@ 0x2c
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800badc:	2300      	movs	r3, #0
 800bade:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d106      	bne.n	800baf6 <tcp_zero_window_probe+0x22>
 800bae8:	4b4c      	ldr	r3, [pc, #304]	@ (800bc1c <tcp_zero_window_probe+0x148>)
 800baea:	f640 024f 	movw	r2, #2127	@ 0x84f
 800baee:	494c      	ldr	r1, [pc, #304]	@ (800bc20 <tcp_zero_window_probe+0x14c>)
 800baf0:	484c      	ldr	r0, [pc, #304]	@ (800bc24 <tcp_zero_window_probe+0x150>)
 800baf2:	f003 fa35 	bl	800ef60 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bafa:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800bafc:	6a3b      	ldr	r3, [r7, #32]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d101      	bne.n	800bb06 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800bb02:	2300      	movs	r3, #0
 800bb04:	e086      	b.n	800bc14 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800bb0c:	2bff      	cmp	r3, #255	@ 0xff
 800bb0e:	d007      	beq.n	800bb20 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800bb16:	3301      	adds	r3, #1
 800bb18:	b2da      	uxtb	r2, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800bb20:	6a3b      	ldr	r3, [r7, #32]
 800bb22:	68db      	ldr	r3, [r3, #12]
 800bb24:	899b      	ldrh	r3, [r3, #12]
 800bb26:	b29b      	uxth	r3, r3
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7f9 f94d 	bl	8004dc8 <lwip_htons>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	f003 0301 	and.w	r3, r3, #1
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d005      	beq.n	800bb46 <tcp_zero_window_probe+0x72>
 800bb3a:	6a3b      	ldr	r3, [r7, #32]
 800bb3c:	891b      	ldrh	r3, [r3, #8]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d101      	bne.n	800bb46 <tcp_zero_window_probe+0x72>
 800bb42:	2301      	movs	r3, #1
 800bb44:	e000      	b.n	800bb48 <tcp_zero_window_probe+0x74>
 800bb46:	2300      	movs	r3, #0
 800bb48:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800bb4a:	7ffb      	ldrb	r3, [r7, #31]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	bf0c      	ite	eq
 800bb50:	2301      	moveq	r3, #1
 800bb52:	2300      	movne	r3, #0
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800bb58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb5c:	b299      	uxth	r1, r3
 800bb5e:	6a3b      	ldr	r3, [r7, #32]
 800bb60:	68db      	ldr	r3, [r3, #12]
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	8bba      	ldrh	r2, [r7, #28]
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f7ff fdfa 	bl	800b760 <tcp_output_alloc_header>
 800bb6c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800bb6e:	69bb      	ldr	r3, [r7, #24]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d102      	bne.n	800bb7a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800bb74:	f04f 33ff 	mov.w	r3, #4294967295
 800bb78:	e04c      	b.n	800bc14 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800bb7a:	69bb      	ldr	r3, [r7, #24]
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800bb80:	7ffb      	ldrb	r3, [r7, #31]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d011      	beq.n	800bbaa <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	899b      	ldrh	r3, [r3, #12]
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	b21b      	sxth	r3, r3
 800bb8e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bb92:	b21c      	sxth	r4, r3
 800bb94:	2011      	movs	r0, #17
 800bb96:	f7f9 f917 	bl	8004dc8 <lwip_htons>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	b21b      	sxth	r3, r3
 800bb9e:	4323      	orrs	r3, r4
 800bba0:	b21b      	sxth	r3, r3
 800bba2:	b29a      	uxth	r2, r3
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	819a      	strh	r2, [r3, #12]
 800bba8:	e010      	b.n	800bbcc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800bbaa:	69bb      	ldr	r3, [r7, #24]
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	3314      	adds	r3, #20
 800bbb0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800bbb2:	6a3b      	ldr	r3, [r7, #32]
 800bbb4:	6858      	ldr	r0, [r3, #4]
 800bbb6:	6a3b      	ldr	r3, [r7, #32]
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	891a      	ldrh	r2, [r3, #8]
 800bbbc:	6a3b      	ldr	r3, [r7, #32]
 800bbbe:	891b      	ldrh	r3, [r3, #8]
 800bbc0:	1ad3      	subs	r3, r2, r3
 800bbc2:	b29b      	uxth	r3, r3
 800bbc4:	2201      	movs	r2, #1
 800bbc6:	6939      	ldr	r1, [r7, #16]
 800bbc8:	f7fa fe56 	bl	8006878 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800bbcc:	6a3b      	ldr	r3, [r7, #32]
 800bbce:	68db      	ldr	r3, [r3, #12]
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7f9 f90e 	bl	8004df4 <lwip_htonl>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	3301      	adds	r3, #1
 800bbdc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	1ad3      	subs	r3, r2, r3
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	da02      	bge.n	800bbf0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	68fa      	ldr	r2, [r7, #12]
 800bbee:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bbf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	69b9      	ldr	r1, [r7, #24]
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f7ff fdef 	bl	800b7dc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	3304      	adds	r3, #4
 800bc04:	69b9      	ldr	r1, [r7, #24]
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f7ff fe26 	bl	800b858 <tcp_output_control_segment>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bc10:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	372c      	adds	r7, #44	@ 0x2c
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd90      	pop	{r4, r7, pc}
 800bc1c:	0801145c 	.word	0x0801145c
 800bc20:	08011c54 	.word	0x08011c54
 800bc24:	080114b0 	.word	0x080114b0

0800bc28 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800bc30:	f7fa ff10 	bl	8006a54 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800bc34:	4b0a      	ldr	r3, [pc, #40]	@ (800bc60 <tcpip_tcp_timer+0x38>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d103      	bne.n	800bc44 <tcpip_tcp_timer+0x1c>
 800bc3c:	4b09      	ldr	r3, [pc, #36]	@ (800bc64 <tcpip_tcp_timer+0x3c>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d005      	beq.n	800bc50 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bc44:	2200      	movs	r2, #0
 800bc46:	4908      	ldr	r1, [pc, #32]	@ (800bc68 <tcpip_tcp_timer+0x40>)
 800bc48:	20fa      	movs	r0, #250	@ 0xfa
 800bc4a:	f000 f8f3 	bl	800be34 <sys_timeout>
 800bc4e:	e003      	b.n	800bc58 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800bc50:	4b06      	ldr	r3, [pc, #24]	@ (800bc6c <tcpip_tcp_timer+0x44>)
 800bc52:	2200      	movs	r2, #0
 800bc54:	601a      	str	r2, [r3, #0]
  }
}
 800bc56:	bf00      	nop
 800bc58:	bf00      	nop
 800bc5a:	3708      	adds	r7, #8
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	200082a4 	.word	0x200082a4
 800bc64:	200082a8 	.word	0x200082a8
 800bc68:	0800bc29 	.word	0x0800bc29
 800bc6c:	200082f0 	.word	0x200082f0

0800bc70 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800bc74:	4b0a      	ldr	r3, [pc, #40]	@ (800bca0 <tcp_timer_needed+0x30>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d10f      	bne.n	800bc9c <tcp_timer_needed+0x2c>
 800bc7c:	4b09      	ldr	r3, [pc, #36]	@ (800bca4 <tcp_timer_needed+0x34>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d103      	bne.n	800bc8c <tcp_timer_needed+0x1c>
 800bc84:	4b08      	ldr	r3, [pc, #32]	@ (800bca8 <tcp_timer_needed+0x38>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d007      	beq.n	800bc9c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800bc8c:	4b04      	ldr	r3, [pc, #16]	@ (800bca0 <tcp_timer_needed+0x30>)
 800bc8e:	2201      	movs	r2, #1
 800bc90:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bc92:	2200      	movs	r2, #0
 800bc94:	4905      	ldr	r1, [pc, #20]	@ (800bcac <tcp_timer_needed+0x3c>)
 800bc96:	20fa      	movs	r0, #250	@ 0xfa
 800bc98:	f000 f8cc 	bl	800be34 <sys_timeout>
  }
}
 800bc9c:	bf00      	nop
 800bc9e:	bd80      	pop	{r7, pc}
 800bca0:	200082f0 	.word	0x200082f0
 800bca4:	200082a4 	.word	0x200082a4
 800bca8:	200082a8 	.word	0x200082a8
 800bcac:	0800bc29 	.word	0x0800bc29

0800bcb0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b086      	sub	sp, #24
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	60b9      	str	r1, [r7, #8]
 800bcba:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800bcbc:	2006      	movs	r0, #6
 800bcbe:	f7f9 fcfb 	bl	80056b8 <memp_malloc>
 800bcc2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d109      	bne.n	800bcde <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d151      	bne.n	800bd74 <sys_timeout_abs+0xc4>
 800bcd0:	4b2a      	ldr	r3, [pc, #168]	@ (800bd7c <sys_timeout_abs+0xcc>)
 800bcd2:	22be      	movs	r2, #190	@ 0xbe
 800bcd4:	492a      	ldr	r1, [pc, #168]	@ (800bd80 <sys_timeout_abs+0xd0>)
 800bcd6:	482b      	ldr	r0, [pc, #172]	@ (800bd84 <sys_timeout_abs+0xd4>)
 800bcd8:	f003 f942 	bl	800ef60 <iprintf>
    return;
 800bcdc:	e04a      	b.n	800bd74 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	2200      	movs	r2, #0
 800bce2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	68ba      	ldr	r2, [r7, #8]
 800bce8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	687a      	ldr	r2, [r7, #4]
 800bcee:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	68fa      	ldr	r2, [r7, #12]
 800bcf4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800bcf6:	4b24      	ldr	r3, [pc, #144]	@ (800bd88 <sys_timeout_abs+0xd8>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d103      	bne.n	800bd06 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800bcfe:	4a22      	ldr	r2, [pc, #136]	@ (800bd88 <sys_timeout_abs+0xd8>)
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	6013      	str	r3, [r2, #0]
    return;
 800bd04:	e037      	b.n	800bd76 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	685a      	ldr	r2, [r3, #4]
 800bd0a:	4b1f      	ldr	r3, [pc, #124]	@ (800bd88 <sys_timeout_abs+0xd8>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	1ad3      	subs	r3, r2, r3
 800bd12:	0fdb      	lsrs	r3, r3, #31
 800bd14:	f003 0301 	and.w	r3, r3, #1
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d007      	beq.n	800bd2e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800bd1e:	4b1a      	ldr	r3, [pc, #104]	@ (800bd88 <sys_timeout_abs+0xd8>)
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800bd26:	4a18      	ldr	r2, [pc, #96]	@ (800bd88 <sys_timeout_abs+0xd8>)
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	6013      	str	r3, [r2, #0]
 800bd2c:	e023      	b.n	800bd76 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800bd2e:	4b16      	ldr	r3, [pc, #88]	@ (800bd88 <sys_timeout_abs+0xd8>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	617b      	str	r3, [r7, #20]
 800bd34:	e01a      	b.n	800bd6c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d00b      	beq.n	800bd56 <sys_timeout_abs+0xa6>
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	685a      	ldr	r2, [r3, #4]
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	1ad3      	subs	r3, r2, r3
 800bd4a:	0fdb      	lsrs	r3, r3, #31
 800bd4c:	f003 0301 	and.w	r3, r3, #1
 800bd50:	b2db      	uxtb	r3, r3
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d007      	beq.n	800bd66 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	681a      	ldr	r2, [r3, #0]
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	693a      	ldr	r2, [r7, #16]
 800bd62:	601a      	str	r2, [r3, #0]
        break;
 800bd64:	e007      	b.n	800bd76 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	617b      	str	r3, [r7, #20]
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d1e1      	bne.n	800bd36 <sys_timeout_abs+0x86>
 800bd72:	e000      	b.n	800bd76 <sys_timeout_abs+0xc6>
    return;
 800bd74:	bf00      	nop
      }
    }
  }
}
 800bd76:	3718      	adds	r7, #24
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}
 800bd7c:	08011c78 	.word	0x08011c78
 800bd80:	08011cac 	.word	0x08011cac
 800bd84:	08011cec 	.word	0x08011cec
 800bd88:	200082e8 	.word	0x200082e8

0800bd8c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b086      	sub	sp, #24
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	4798      	blx	r3

  now = sys_now();
 800bd9e:	f7f8 fe13 	bl	80049c8 <sys_now>
 800bda2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	681a      	ldr	r2, [r3, #0]
 800bda8:	4b0f      	ldr	r3, [pc, #60]	@ (800bde8 <lwip_cyclic_timer+0x5c>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4413      	add	r3, r2
 800bdae:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800bdb0:	68fa      	ldr	r2, [r7, #12]
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	1ad3      	subs	r3, r2, r3
 800bdb6:	0fdb      	lsrs	r3, r3, #31
 800bdb8:	f003 0301 	and.w	r3, r3, #1
 800bdbc:	b2db      	uxtb	r3, r3
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d009      	beq.n	800bdd6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	681a      	ldr	r2, [r3, #0]
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	4413      	add	r3, r2
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	4907      	ldr	r1, [pc, #28]	@ (800bdec <lwip_cyclic_timer+0x60>)
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7ff ff6e 	bl	800bcb0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800bdd4:	e004      	b.n	800bde0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800bdd6:	687a      	ldr	r2, [r7, #4]
 800bdd8:	4904      	ldr	r1, [pc, #16]	@ (800bdec <lwip_cyclic_timer+0x60>)
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f7ff ff68 	bl	800bcb0 <sys_timeout_abs>
}
 800bde0:	bf00      	nop
 800bde2:	3718      	adds	r7, #24
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}
 800bde8:	200082ec 	.word	0x200082ec
 800bdec:	0800bd8d 	.word	0x0800bd8d

0800bdf0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	607b      	str	r3, [r7, #4]
 800bdfa:	e00e      	b.n	800be1a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800bdfc:	4a0b      	ldr	r2, [pc, #44]	@ (800be2c <sys_timeouts_init+0x3c>)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	00db      	lsls	r3, r3, #3
 800be08:	4a08      	ldr	r2, [pc, #32]	@ (800be2c <sys_timeouts_init+0x3c>)
 800be0a:	4413      	add	r3, r2
 800be0c:	461a      	mov	r2, r3
 800be0e:	4908      	ldr	r1, [pc, #32]	@ (800be30 <sys_timeouts_init+0x40>)
 800be10:	f000 f810 	bl	800be34 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	3301      	adds	r3, #1
 800be18:	607b      	str	r3, [r7, #4]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2b02      	cmp	r3, #2
 800be1e:	d9ed      	bls.n	800bdfc <sys_timeouts_init+0xc>
  }
}
 800be20:	bf00      	nop
 800be22:	bf00      	nop
 800be24:	3708      	adds	r7, #8
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}
 800be2a:	bf00      	nop
 800be2c:	08012864 	.word	0x08012864
 800be30:	0800bd8d 	.word	0x0800bd8d

0800be34 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b086      	sub	sp, #24
 800be38:	af00      	add	r7, sp, #0
 800be3a:	60f8      	str	r0, [r7, #12]
 800be3c:	60b9      	str	r1, [r7, #8]
 800be3e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be46:	d306      	bcc.n	800be56 <sys_timeout+0x22>
 800be48:	4b0a      	ldr	r3, [pc, #40]	@ (800be74 <sys_timeout+0x40>)
 800be4a:	f240 1229 	movw	r2, #297	@ 0x129
 800be4e:	490a      	ldr	r1, [pc, #40]	@ (800be78 <sys_timeout+0x44>)
 800be50:	480a      	ldr	r0, [pc, #40]	@ (800be7c <sys_timeout+0x48>)
 800be52:	f003 f885 	bl	800ef60 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800be56:	f7f8 fdb7 	bl	80049c8 <sys_now>
 800be5a:	4602      	mov	r2, r0
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	4413      	add	r3, r2
 800be60:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800be62:	687a      	ldr	r2, [r7, #4]
 800be64:	68b9      	ldr	r1, [r7, #8]
 800be66:	6978      	ldr	r0, [r7, #20]
 800be68:	f7ff ff22 	bl	800bcb0 <sys_timeout_abs>
#endif
}
 800be6c:	bf00      	nop
 800be6e:	3718      	adds	r7, #24
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}
 800be74:	08011c78 	.word	0x08011c78
 800be78:	08011d14 	.word	0x08011d14
 800be7c:	08011cec 	.word	0x08011cec

0800be80 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b084      	sub	sp, #16
 800be84:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800be86:	f7f8 fd9f 	bl	80049c8 <sys_now>
 800be8a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800be8c:	4b1a      	ldr	r3, [pc, #104]	@ (800bef8 <sys_check_timeouts+0x78>)
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	b2db      	uxtb	r3, r3
 800be92:	2b00      	cmp	r3, #0
 800be94:	d001      	beq.n	800be9a <sys_check_timeouts+0x1a>
 800be96:	f7f9 ffbb 	bl	8005e10 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800be9a:	4b18      	ldr	r3, [pc, #96]	@ (800befc <sys_check_timeouts+0x7c>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d022      	beq.n	800beec <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	685b      	ldr	r3, [r3, #4]
 800beaa:	68fa      	ldr	r2, [r7, #12]
 800beac:	1ad3      	subs	r3, r2, r3
 800beae:	0fdb      	lsrs	r3, r3, #31
 800beb0:	f003 0301 	and.w	r3, r3, #1
 800beb4:	b2db      	uxtb	r3, r3
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d11a      	bne.n	800bef0 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4a0f      	ldr	r2, [pc, #60]	@ (800befc <sys_check_timeouts+0x7c>)
 800bec0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	689b      	ldr	r3, [r3, #8]
 800bec6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	68db      	ldr	r3, [r3, #12]
 800becc:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	4a0b      	ldr	r2, [pc, #44]	@ (800bf00 <sys_check_timeouts+0x80>)
 800bed4:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800bed6:	68b9      	ldr	r1, [r7, #8]
 800bed8:	2006      	movs	r0, #6
 800beda:	f7f9 fc5d 	bl	8005798 <memp_free>
    if (handler != NULL) {
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d0d3      	beq.n	800be8c <sys_check_timeouts+0xc>
      handler(arg);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6838      	ldr	r0, [r7, #0]
 800bee8:	4798      	blx	r3
  do {
 800beea:	e7cf      	b.n	800be8c <sys_check_timeouts+0xc>
      return;
 800beec:	bf00      	nop
 800beee:	e000      	b.n	800bef2 <sys_check_timeouts+0x72>
      return;
 800bef0:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800bef2:	3710      	adds	r7, #16
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}
 800bef8:	20008295 	.word	0x20008295
 800befc:	200082e8 	.word	0x200082e8
 800bf00:	200082ec 	.word	0x200082ec

0800bf04 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bf08:	f002 ff2a 	bl	800ed60 <rand>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	b29b      	uxth	r3, r3
 800bf10:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800bf1a:	b29a      	uxth	r2, r3
 800bf1c:	4b01      	ldr	r3, [pc, #4]	@ (800bf24 <udp_init+0x20>)
 800bf1e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bf20:	bf00      	nop
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	20000028 	.word	0x20000028

0800bf28 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b083      	sub	sp, #12
 800bf2c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800bf32:	4b17      	ldr	r3, [pc, #92]	@ (800bf90 <udp_new_port+0x68>)
 800bf34:	881b      	ldrh	r3, [r3, #0]
 800bf36:	1c5a      	adds	r2, r3, #1
 800bf38:	b291      	uxth	r1, r2
 800bf3a:	4a15      	ldr	r2, [pc, #84]	@ (800bf90 <udp_new_port+0x68>)
 800bf3c:	8011      	strh	r1, [r2, #0]
 800bf3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d103      	bne.n	800bf4e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800bf46:	4b12      	ldr	r3, [pc, #72]	@ (800bf90 <udp_new_port+0x68>)
 800bf48:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800bf4c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf4e:	4b11      	ldr	r3, [pc, #68]	@ (800bf94 <udp_new_port+0x6c>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	603b      	str	r3, [r7, #0]
 800bf54:	e011      	b.n	800bf7a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	8a5a      	ldrh	r2, [r3, #18]
 800bf5a:	4b0d      	ldr	r3, [pc, #52]	@ (800bf90 <udp_new_port+0x68>)
 800bf5c:	881b      	ldrh	r3, [r3, #0]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d108      	bne.n	800bf74 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800bf62:	88fb      	ldrh	r3, [r7, #6]
 800bf64:	3301      	adds	r3, #1
 800bf66:	80fb      	strh	r3, [r7, #6]
 800bf68:	88fb      	ldrh	r3, [r7, #6]
 800bf6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bf6e:	d3e0      	bcc.n	800bf32 <udp_new_port+0xa>
        return 0;
 800bf70:	2300      	movs	r3, #0
 800bf72:	e007      	b.n	800bf84 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	68db      	ldr	r3, [r3, #12]
 800bf78:	603b      	str	r3, [r7, #0]
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d1ea      	bne.n	800bf56 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800bf80:	4b03      	ldr	r3, [pc, #12]	@ (800bf90 <udp_new_port+0x68>)
 800bf82:	881b      	ldrh	r3, [r3, #0]
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	370c      	adds	r7, #12
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr
 800bf90:	20000028 	.word	0x20000028
 800bf94:	200082f4 	.word	0x200082f4

0800bf98 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	60f8      	str	r0, [r7, #12]
 800bfa0:	60b9      	str	r1, [r7, #8]
 800bfa2:	4613      	mov	r3, r2
 800bfa4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d105      	bne.n	800bfb8 <udp_input_local_match+0x20>
 800bfac:	4b27      	ldr	r3, [pc, #156]	@ (800c04c <udp_input_local_match+0xb4>)
 800bfae:	2287      	movs	r2, #135	@ 0x87
 800bfb0:	4927      	ldr	r1, [pc, #156]	@ (800c050 <udp_input_local_match+0xb8>)
 800bfb2:	4828      	ldr	r0, [pc, #160]	@ (800c054 <udp_input_local_match+0xbc>)
 800bfb4:	f002 ffd4 	bl	800ef60 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d105      	bne.n	800bfca <udp_input_local_match+0x32>
 800bfbe:	4b23      	ldr	r3, [pc, #140]	@ (800c04c <udp_input_local_match+0xb4>)
 800bfc0:	2288      	movs	r2, #136	@ 0x88
 800bfc2:	4925      	ldr	r1, [pc, #148]	@ (800c058 <udp_input_local_match+0xc0>)
 800bfc4:	4823      	ldr	r0, [pc, #140]	@ (800c054 <udp_input_local_match+0xbc>)
 800bfc6:	f002 ffcb 	bl	800ef60 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	7a1b      	ldrb	r3, [r3, #8]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d00b      	beq.n	800bfea <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	7a1a      	ldrb	r2, [r3, #8]
 800bfd6:	4b21      	ldr	r3, [pc, #132]	@ (800c05c <udp_input_local_match+0xc4>)
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bfde:	3301      	adds	r3, #1
 800bfe0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d001      	beq.n	800bfea <udp_input_local_match+0x52>
    return 0;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	e02b      	b.n	800c042 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800bfea:	79fb      	ldrb	r3, [r7, #7]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d018      	beq.n	800c022 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d013      	beq.n	800c01e <udp_input_local_match+0x86>
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d00f      	beq.n	800c01e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bffe:	4b17      	ldr	r3, [pc, #92]	@ (800c05c <udp_input_local_match+0xc4>)
 800c000:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c002:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c006:	d00a      	beq.n	800c01e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	4b13      	ldr	r3, [pc, #76]	@ (800c05c <udp_input_local_match+0xc4>)
 800c00e:	695b      	ldr	r3, [r3, #20]
 800c010:	405a      	eors	r2, r3
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	3308      	adds	r3, #8
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d110      	bne.n	800c040 <udp_input_local_match+0xa8>
          return 1;
 800c01e:	2301      	movs	r3, #1
 800c020:	e00f      	b.n	800c042 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d009      	beq.n	800c03c <udp_input_local_match+0xa4>
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d005      	beq.n	800c03c <udp_input_local_match+0xa4>
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681a      	ldr	r2, [r3, #0]
 800c034:	4b09      	ldr	r3, [pc, #36]	@ (800c05c <udp_input_local_match+0xc4>)
 800c036:	695b      	ldr	r3, [r3, #20]
 800c038:	429a      	cmp	r2, r3
 800c03a:	d101      	bne.n	800c040 <udp_input_local_match+0xa8>
        return 1;
 800c03c:	2301      	movs	r3, #1
 800c03e:	e000      	b.n	800c042 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c040:	2300      	movs	r3, #0
}
 800c042:	4618      	mov	r0, r3
 800c044:	3710      	adds	r7, #16
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	bf00      	nop
 800c04c:	08011d60 	.word	0x08011d60
 800c050:	08011d90 	.word	0x08011d90
 800c054:	08011db4 	.word	0x08011db4
 800c058:	08011ddc 	.word	0x08011ddc
 800c05c:	20004d28 	.word	0x20004d28

0800c060 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c060:	b590      	push	{r4, r7, lr}
 800c062:	b08d      	sub	sp, #52	@ 0x34
 800c064:	af02      	add	r7, sp, #8
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c06a:	2300      	movs	r3, #0
 800c06c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d105      	bne.n	800c080 <udp_input+0x20>
 800c074:	4b7c      	ldr	r3, [pc, #496]	@ (800c268 <udp_input+0x208>)
 800c076:	22cf      	movs	r2, #207	@ 0xcf
 800c078:	497c      	ldr	r1, [pc, #496]	@ (800c26c <udp_input+0x20c>)
 800c07a:	487d      	ldr	r0, [pc, #500]	@ (800c270 <udp_input+0x210>)
 800c07c:	f002 ff70 	bl	800ef60 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d105      	bne.n	800c092 <udp_input+0x32>
 800c086:	4b78      	ldr	r3, [pc, #480]	@ (800c268 <udp_input+0x208>)
 800c088:	22d0      	movs	r2, #208	@ 0xd0
 800c08a:	497a      	ldr	r1, [pc, #488]	@ (800c274 <udp_input+0x214>)
 800c08c:	4878      	ldr	r0, [pc, #480]	@ (800c270 <udp_input+0x210>)
 800c08e:	f002 ff67 	bl	800ef60 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	895b      	ldrh	r3, [r3, #10]
 800c096:	2b07      	cmp	r3, #7
 800c098:	d803      	bhi.n	800c0a2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f7fa f9f2 	bl	8006484 <pbuf_free>
    goto end;
 800c0a0:	e0de      	b.n	800c260 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c0a8:	4b73      	ldr	r3, [pc, #460]	@ (800c278 <udp_input+0x218>)
 800c0aa:	695b      	ldr	r3, [r3, #20]
 800c0ac:	4a72      	ldr	r2, [pc, #456]	@ (800c278 <udp_input+0x218>)
 800c0ae:	6812      	ldr	r2, [r2, #0]
 800c0b0:	4611      	mov	r1, r2
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f001 fefe 	bl	800deb4 <ip4_addr_isbroadcast_u32>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	881b      	ldrh	r3, [r3, #0]
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f7f8 fe80 	bl	8004dc8 <lwip_htons>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	885b      	ldrh	r3, [r3, #2]
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7f8 fe78 	bl	8004dc8 <lwip_htons>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c0e8:	4b64      	ldr	r3, [pc, #400]	@ (800c27c <udp_input+0x21c>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800c0ee:	e054      	b.n	800c19a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c0f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f2:	8a5b      	ldrh	r3, [r3, #18]
 800c0f4:	89fa      	ldrh	r2, [r7, #14]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d14a      	bne.n	800c190 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c0fa:	7cfb      	ldrb	r3, [r7, #19]
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	6839      	ldr	r1, [r7, #0]
 800c100:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c102:	f7ff ff49 	bl	800bf98 <udp_input_local_match>
 800c106:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d041      	beq.n	800c190 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c10c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c10e:	7c1b      	ldrb	r3, [r3, #16]
 800c110:	f003 0304 	and.w	r3, r3, #4
 800c114:	2b00      	cmp	r3, #0
 800c116:	d11d      	bne.n	800c154 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c118:	69fb      	ldr	r3, [r7, #28]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d102      	bne.n	800c124 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c120:	61fb      	str	r3, [r7, #28]
 800c122:	e017      	b.n	800c154 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c124:	7cfb      	ldrb	r3, [r7, #19]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d014      	beq.n	800c154 <udp_input+0xf4>
 800c12a:	4b53      	ldr	r3, [pc, #332]	@ (800c278 <udp_input+0x218>)
 800c12c:	695b      	ldr	r3, [r3, #20]
 800c12e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c132:	d10f      	bne.n	800c154 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c134:	69fb      	ldr	r3, [r7, #28]
 800c136:	681a      	ldr	r2, [r3, #0]
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	3304      	adds	r3, #4
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d008      	beq.n	800c154 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c144:	681a      	ldr	r2, [r3, #0]
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	3304      	adds	r3, #4
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d101      	bne.n	800c154 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c152:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c156:	8a9b      	ldrh	r3, [r3, #20]
 800c158:	8a3a      	ldrh	r2, [r7, #16]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d118      	bne.n	800c190 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c15e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c160:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c162:	2b00      	cmp	r3, #0
 800c164:	d005      	beq.n	800c172 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c168:	685a      	ldr	r2, [r3, #4]
 800c16a:	4b43      	ldr	r3, [pc, #268]	@ (800c278 <udp_input+0x218>)
 800c16c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c16e:	429a      	cmp	r2, r3
 800c170:	d10e      	bne.n	800c190 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c172:	6a3b      	ldr	r3, [r7, #32]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d014      	beq.n	800c1a2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c17a:	68da      	ldr	r2, [r3, #12]
 800c17c:	6a3b      	ldr	r3, [r7, #32]
 800c17e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c180:	4b3e      	ldr	r3, [pc, #248]	@ (800c27c <udp_input+0x21c>)
 800c182:	681a      	ldr	r2, [r3, #0]
 800c184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c186:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c188:	4a3c      	ldr	r2, [pc, #240]	@ (800c27c <udp_input+0x21c>)
 800c18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c18c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c18e:	e008      	b.n	800c1a2 <udp_input+0x142>
      }
    }

    prev = pcb;
 800c190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c192:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c196:	68db      	ldr	r3, [r3, #12]
 800c198:	627b      	str	r3, [r7, #36]	@ 0x24
 800c19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d1a7      	bne.n	800c0f0 <udp_input+0x90>
 800c1a0:	e000      	b.n	800c1a4 <udp_input+0x144>
        break;
 800c1a2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c1a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d101      	bne.n	800c1ae <udp_input+0x14e>
    pcb = uncon_pcb;
 800c1aa:	69fb      	ldr	r3, [r7, #28]
 800c1ac:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d002      	beq.n	800c1ba <udp_input+0x15a>
    for_us = 1;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	76fb      	strb	r3, [r7, #27]
 800c1b8:	e00a      	b.n	800c1d0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	3304      	adds	r3, #4
 800c1be:	681a      	ldr	r2, [r3, #0]
 800c1c0:	4b2d      	ldr	r3, [pc, #180]	@ (800c278 <udp_input+0x218>)
 800c1c2:	695b      	ldr	r3, [r3, #20]
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	bf0c      	ite	eq
 800c1c8:	2301      	moveq	r3, #1
 800c1ca:	2300      	movne	r3, #0
 800c1cc:	b2db      	uxtb	r3, r3
 800c1ce:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c1d0:	7efb      	ldrb	r3, [r7, #27]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d041      	beq.n	800c25a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c1d6:	2108      	movs	r1, #8
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f7fa f8cd 	bl	8006378 <pbuf_remove_header>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d00a      	beq.n	800c1fa <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c1e4:	4b20      	ldr	r3, [pc, #128]	@ (800c268 <udp_input+0x208>)
 800c1e6:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800c1ea:	4925      	ldr	r1, [pc, #148]	@ (800c280 <udp_input+0x220>)
 800c1ec:	4820      	ldr	r0, [pc, #128]	@ (800c270 <udp_input+0x210>)
 800c1ee:	f002 feb7 	bl	800ef60 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f7fa f946 	bl	8006484 <pbuf_free>
      goto end;
 800c1f8:	e032      	b.n	800c260 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d012      	beq.n	800c226 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c202:	699b      	ldr	r3, [r3, #24]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d00a      	beq.n	800c21e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c20a:	699c      	ldr	r4, [r3, #24]
 800c20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c20e:	69d8      	ldr	r0, [r3, #28]
 800c210:	8a3b      	ldrh	r3, [r7, #16]
 800c212:	9300      	str	r3, [sp, #0]
 800c214:	4b1b      	ldr	r3, [pc, #108]	@ (800c284 <udp_input+0x224>)
 800c216:	687a      	ldr	r2, [r7, #4]
 800c218:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c21a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c21c:	e021      	b.n	800c262 <udp_input+0x202>
        pbuf_free(p);
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f7fa f930 	bl	8006484 <pbuf_free>
        goto end;
 800c224:	e01c      	b.n	800c260 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c226:	7cfb      	ldrb	r3, [r7, #19]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d112      	bne.n	800c252 <udp_input+0x1f2>
 800c22c:	4b12      	ldr	r3, [pc, #72]	@ (800c278 <udp_input+0x218>)
 800c22e:	695b      	ldr	r3, [r3, #20]
 800c230:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c234:	2be0      	cmp	r3, #224	@ 0xe0
 800c236:	d00c      	beq.n	800c252 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c238:	4b0f      	ldr	r3, [pc, #60]	@ (800c278 <udp_input+0x218>)
 800c23a:	899b      	ldrh	r3, [r3, #12]
 800c23c:	3308      	adds	r3, #8
 800c23e:	b29b      	uxth	r3, r3
 800c240:	b21b      	sxth	r3, r3
 800c242:	4619      	mov	r1, r3
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f7fa f90a 	bl	800645e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c24a:	2103      	movs	r1, #3
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f001 fb11 	bl	800d874 <icmp_dest_unreach>
      pbuf_free(p);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f7fa f916 	bl	8006484 <pbuf_free>
  return;
 800c258:	e003      	b.n	800c262 <udp_input+0x202>
    pbuf_free(p);
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f7fa f912 	bl	8006484 <pbuf_free>
  return;
 800c260:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c262:	372c      	adds	r7, #44	@ 0x2c
 800c264:	46bd      	mov	sp, r7
 800c266:	bd90      	pop	{r4, r7, pc}
 800c268:	08011d60 	.word	0x08011d60
 800c26c:	08011e04 	.word	0x08011e04
 800c270:	08011db4 	.word	0x08011db4
 800c274:	08011e1c 	.word	0x08011e1c
 800c278:	20004d28 	.word	0x20004d28
 800c27c:	200082f4 	.word	0x200082f4
 800c280:	08011e38 	.word	0x08011e38
 800c284:	20004d38 	.word	0x20004d38

0800c288 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b088      	sub	sp, #32
 800c28c:	af02      	add	r7, sp, #8
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	607a      	str	r2, [r7, #4]
 800c294:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d109      	bne.n	800c2b0 <udp_sendto+0x28>
 800c29c:	4b23      	ldr	r3, [pc, #140]	@ (800c32c <udp_sendto+0xa4>)
 800c29e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800c2a2:	4923      	ldr	r1, [pc, #140]	@ (800c330 <udp_sendto+0xa8>)
 800c2a4:	4823      	ldr	r0, [pc, #140]	@ (800c334 <udp_sendto+0xac>)
 800c2a6:	f002 fe5b 	bl	800ef60 <iprintf>
 800c2aa:	f06f 030f 	mvn.w	r3, #15
 800c2ae:	e038      	b.n	800c322 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d109      	bne.n	800c2ca <udp_sendto+0x42>
 800c2b6:	4b1d      	ldr	r3, [pc, #116]	@ (800c32c <udp_sendto+0xa4>)
 800c2b8:	f240 2219 	movw	r2, #537	@ 0x219
 800c2bc:	491e      	ldr	r1, [pc, #120]	@ (800c338 <udp_sendto+0xb0>)
 800c2be:	481d      	ldr	r0, [pc, #116]	@ (800c334 <udp_sendto+0xac>)
 800c2c0:	f002 fe4e 	bl	800ef60 <iprintf>
 800c2c4:	f06f 030f 	mvn.w	r3, #15
 800c2c8:	e02b      	b.n	800c322 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d109      	bne.n	800c2e4 <udp_sendto+0x5c>
 800c2d0:	4b16      	ldr	r3, [pc, #88]	@ (800c32c <udp_sendto+0xa4>)
 800c2d2:	f240 221a 	movw	r2, #538	@ 0x21a
 800c2d6:	4919      	ldr	r1, [pc, #100]	@ (800c33c <udp_sendto+0xb4>)
 800c2d8:	4816      	ldr	r0, [pc, #88]	@ (800c334 <udp_sendto+0xac>)
 800c2da:	f002 fe41 	bl	800ef60 <iprintf>
 800c2de:	f06f 030f 	mvn.w	r3, #15
 800c2e2:	e01e      	b.n	800c322 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	7a1b      	ldrb	r3, [r3, #8]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d006      	beq.n	800c2fa <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	7a1b      	ldrb	r3, [r3, #8]
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f7f9 fd67 	bl	8005dc4 <netif_get_by_index>
 800c2f6:	6178      	str	r0, [r7, #20]
 800c2f8:	e003      	b.n	800c302 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f001 fb44 	bl	800d988 <ip4_route>
 800c300:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d102      	bne.n	800c30e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800c308:	f06f 0303 	mvn.w	r3, #3
 800c30c:	e009      	b.n	800c322 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800c30e:	887a      	ldrh	r2, [r7, #2]
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	9300      	str	r3, [sp, #0]
 800c314:	4613      	mov	r3, r2
 800c316:	687a      	ldr	r2, [r7, #4]
 800c318:	68b9      	ldr	r1, [r7, #8]
 800c31a:	68f8      	ldr	r0, [r7, #12]
 800c31c:	f000 f810 	bl	800c340 <udp_sendto_if>
 800c320:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c322:	4618      	mov	r0, r3
 800c324:	3718      	adds	r7, #24
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	08011d60 	.word	0x08011d60
 800c330:	08011e84 	.word	0x08011e84
 800c334:	08011db4 	.word	0x08011db4
 800c338:	08011e9c 	.word	0x08011e9c
 800c33c:	08011eb8 	.word	0x08011eb8

0800c340 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b088      	sub	sp, #32
 800c344:	af02      	add	r7, sp, #8
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	60b9      	str	r1, [r7, #8]
 800c34a:	607a      	str	r2, [r7, #4]
 800c34c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d109      	bne.n	800c368 <udp_sendto_if+0x28>
 800c354:	4b2e      	ldr	r3, [pc, #184]	@ (800c410 <udp_sendto_if+0xd0>)
 800c356:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c35a:	492e      	ldr	r1, [pc, #184]	@ (800c414 <udp_sendto_if+0xd4>)
 800c35c:	482e      	ldr	r0, [pc, #184]	@ (800c418 <udp_sendto_if+0xd8>)
 800c35e:	f002 fdff 	bl	800ef60 <iprintf>
 800c362:	f06f 030f 	mvn.w	r3, #15
 800c366:	e04f      	b.n	800c408 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d109      	bne.n	800c382 <udp_sendto_if+0x42>
 800c36e:	4b28      	ldr	r3, [pc, #160]	@ (800c410 <udp_sendto_if+0xd0>)
 800c370:	f240 2281 	movw	r2, #641	@ 0x281
 800c374:	4929      	ldr	r1, [pc, #164]	@ (800c41c <udp_sendto_if+0xdc>)
 800c376:	4828      	ldr	r0, [pc, #160]	@ (800c418 <udp_sendto_if+0xd8>)
 800c378:	f002 fdf2 	bl	800ef60 <iprintf>
 800c37c:	f06f 030f 	mvn.w	r3, #15
 800c380:	e042      	b.n	800c408 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d109      	bne.n	800c39c <udp_sendto_if+0x5c>
 800c388:	4b21      	ldr	r3, [pc, #132]	@ (800c410 <udp_sendto_if+0xd0>)
 800c38a:	f240 2282 	movw	r2, #642	@ 0x282
 800c38e:	4924      	ldr	r1, [pc, #144]	@ (800c420 <udp_sendto_if+0xe0>)
 800c390:	4821      	ldr	r0, [pc, #132]	@ (800c418 <udp_sendto_if+0xd8>)
 800c392:	f002 fde5 	bl	800ef60 <iprintf>
 800c396:	f06f 030f 	mvn.w	r3, #15
 800c39a:	e035      	b.n	800c408 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800c39c:	6a3b      	ldr	r3, [r7, #32]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d109      	bne.n	800c3b6 <udp_sendto_if+0x76>
 800c3a2:	4b1b      	ldr	r3, [pc, #108]	@ (800c410 <udp_sendto_if+0xd0>)
 800c3a4:	f240 2283 	movw	r2, #643	@ 0x283
 800c3a8:	491e      	ldr	r1, [pc, #120]	@ (800c424 <udp_sendto_if+0xe4>)
 800c3aa:	481b      	ldr	r0, [pc, #108]	@ (800c418 <udp_sendto_if+0xd8>)
 800c3ac:	f002 fdd8 	bl	800ef60 <iprintf>
 800c3b0:	f06f 030f 	mvn.w	r3, #15
 800c3b4:	e028      	b.n	800c408 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d009      	beq.n	800c3d0 <udp_sendto_if+0x90>
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d005      	beq.n	800c3d0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c3cc:	2be0      	cmp	r3, #224	@ 0xe0
 800c3ce:	d103      	bne.n	800c3d8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800c3d0:	6a3b      	ldr	r3, [r7, #32]
 800c3d2:	3304      	adds	r3, #4
 800c3d4:	617b      	str	r3, [r7, #20]
 800c3d6:	e00b      	b.n	800c3f0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	6a3b      	ldr	r3, [r7, #32]
 800c3de:	3304      	adds	r3, #4
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d002      	beq.n	800c3ec <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800c3e6:	f06f 0303 	mvn.w	r3, #3
 800c3ea:	e00d      	b.n	800c408 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800c3f0:	887a      	ldrh	r2, [r7, #2]
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	9301      	str	r3, [sp, #4]
 800c3f6:	6a3b      	ldr	r3, [r7, #32]
 800c3f8:	9300      	str	r3, [sp, #0]
 800c3fa:	4613      	mov	r3, r2
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	68b9      	ldr	r1, [r7, #8]
 800c400:	68f8      	ldr	r0, [r7, #12]
 800c402:	f000 f811 	bl	800c428 <udp_sendto_if_src>
 800c406:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3718      	adds	r7, #24
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}
 800c410:	08011d60 	.word	0x08011d60
 800c414:	08011ed4 	.word	0x08011ed4
 800c418:	08011db4 	.word	0x08011db4
 800c41c:	08011ef0 	.word	0x08011ef0
 800c420:	08011f0c 	.word	0x08011f0c
 800c424:	08011f2c 	.word	0x08011f2c

0800c428 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b08c      	sub	sp, #48	@ 0x30
 800c42c:	af04      	add	r7, sp, #16
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	607a      	str	r2, [r7, #4]
 800c434:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d109      	bne.n	800c450 <udp_sendto_if_src+0x28>
 800c43c:	4b65      	ldr	r3, [pc, #404]	@ (800c5d4 <udp_sendto_if_src+0x1ac>)
 800c43e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800c442:	4965      	ldr	r1, [pc, #404]	@ (800c5d8 <udp_sendto_if_src+0x1b0>)
 800c444:	4865      	ldr	r0, [pc, #404]	@ (800c5dc <udp_sendto_if_src+0x1b4>)
 800c446:	f002 fd8b 	bl	800ef60 <iprintf>
 800c44a:	f06f 030f 	mvn.w	r3, #15
 800c44e:	e0bc      	b.n	800c5ca <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d109      	bne.n	800c46a <udp_sendto_if_src+0x42>
 800c456:	4b5f      	ldr	r3, [pc, #380]	@ (800c5d4 <udp_sendto_if_src+0x1ac>)
 800c458:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800c45c:	4960      	ldr	r1, [pc, #384]	@ (800c5e0 <udp_sendto_if_src+0x1b8>)
 800c45e:	485f      	ldr	r0, [pc, #380]	@ (800c5dc <udp_sendto_if_src+0x1b4>)
 800c460:	f002 fd7e 	bl	800ef60 <iprintf>
 800c464:	f06f 030f 	mvn.w	r3, #15
 800c468:	e0af      	b.n	800c5ca <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d109      	bne.n	800c484 <udp_sendto_if_src+0x5c>
 800c470:	4b58      	ldr	r3, [pc, #352]	@ (800c5d4 <udp_sendto_if_src+0x1ac>)
 800c472:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800c476:	495b      	ldr	r1, [pc, #364]	@ (800c5e4 <udp_sendto_if_src+0x1bc>)
 800c478:	4858      	ldr	r0, [pc, #352]	@ (800c5dc <udp_sendto_if_src+0x1b4>)
 800c47a:	f002 fd71 	bl	800ef60 <iprintf>
 800c47e:	f06f 030f 	mvn.w	r3, #15
 800c482:	e0a2      	b.n	800c5ca <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800c484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c486:	2b00      	cmp	r3, #0
 800c488:	d109      	bne.n	800c49e <udp_sendto_if_src+0x76>
 800c48a:	4b52      	ldr	r3, [pc, #328]	@ (800c5d4 <udp_sendto_if_src+0x1ac>)
 800c48c:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800c490:	4955      	ldr	r1, [pc, #340]	@ (800c5e8 <udp_sendto_if_src+0x1c0>)
 800c492:	4852      	ldr	r0, [pc, #328]	@ (800c5dc <udp_sendto_if_src+0x1b4>)
 800c494:	f002 fd64 	bl	800ef60 <iprintf>
 800c498:	f06f 030f 	mvn.w	r3, #15
 800c49c:	e095      	b.n	800c5ca <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800c49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d109      	bne.n	800c4b8 <udp_sendto_if_src+0x90>
 800c4a4:	4b4b      	ldr	r3, [pc, #300]	@ (800c5d4 <udp_sendto_if_src+0x1ac>)
 800c4a6:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800c4aa:	4950      	ldr	r1, [pc, #320]	@ (800c5ec <udp_sendto_if_src+0x1c4>)
 800c4ac:	484b      	ldr	r0, [pc, #300]	@ (800c5dc <udp_sendto_if_src+0x1b4>)
 800c4ae:	f002 fd57 	bl	800ef60 <iprintf>
 800c4b2:	f06f 030f 	mvn.w	r3, #15
 800c4b6:	e088      	b.n	800c5ca <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	8a5b      	ldrh	r3, [r3, #18]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d10f      	bne.n	800c4e0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c4c0:	68f9      	ldr	r1, [r7, #12]
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	8a5b      	ldrh	r3, [r3, #18]
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	68f8      	ldr	r0, [r7, #12]
 800c4ca:	f000 f893 	bl	800c5f4 <udp_bind>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800c4d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d002      	beq.n	800c4e0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800c4da:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c4de:	e074      	b.n	800c5ca <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	891b      	ldrh	r3, [r3, #8]
 800c4e4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d902      	bls.n	800c4f2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800c4ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c4f0:	e06b      	b.n	800c5ca <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800c4f2:	2108      	movs	r1, #8
 800c4f4:	68b8      	ldr	r0, [r7, #8]
 800c4f6:	f7f9 ff2f 	bl	8006358 <pbuf_add_header>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d015      	beq.n	800c52c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800c500:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c504:	2108      	movs	r1, #8
 800c506:	2022      	movs	r0, #34	@ 0x22
 800c508:	f7f9 fcd8 	bl	8005ebc <pbuf_alloc>
 800c50c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800c50e:	69fb      	ldr	r3, [r7, #28]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d102      	bne.n	800c51a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800c514:	f04f 33ff 	mov.w	r3, #4294967295
 800c518:	e057      	b.n	800c5ca <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	891b      	ldrh	r3, [r3, #8]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d006      	beq.n	800c530 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800c522:	68b9      	ldr	r1, [r7, #8]
 800c524:	69f8      	ldr	r0, [r7, #28]
 800c526:	f7fa f8c5 	bl	80066b4 <pbuf_chain>
 800c52a:	e001      	b.n	800c530 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800c530:	69fb      	ldr	r3, [r7, #28]
 800c532:	895b      	ldrh	r3, [r3, #10]
 800c534:	2b07      	cmp	r3, #7
 800c536:	d806      	bhi.n	800c546 <udp_sendto_if_src+0x11e>
 800c538:	4b26      	ldr	r3, [pc, #152]	@ (800c5d4 <udp_sendto_if_src+0x1ac>)
 800c53a:	f240 320d 	movw	r2, #781	@ 0x30d
 800c53e:	492c      	ldr	r1, [pc, #176]	@ (800c5f0 <udp_sendto_if_src+0x1c8>)
 800c540:	4826      	ldr	r0, [pc, #152]	@ (800c5dc <udp_sendto_if_src+0x1b4>)
 800c542:	f002 fd0d 	bl	800ef60 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800c546:	69fb      	ldr	r3, [r7, #28]
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	8a5b      	ldrh	r3, [r3, #18]
 800c550:	4618      	mov	r0, r3
 800c552:	f7f8 fc39 	bl	8004dc8 <lwip_htons>
 800c556:	4603      	mov	r3, r0
 800c558:	461a      	mov	r2, r3
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800c55e:	887b      	ldrh	r3, [r7, #2]
 800c560:	4618      	mov	r0, r3
 800c562:	f7f8 fc31 	bl	8004dc8 <lwip_htons>
 800c566:	4603      	mov	r3, r0
 800c568:	461a      	mov	r2, r3
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	2200      	movs	r2, #0
 800c572:	719a      	strb	r2, [r3, #6]
 800c574:	2200      	movs	r2, #0
 800c576:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800c578:	69fb      	ldr	r3, [r7, #28]
 800c57a:	891b      	ldrh	r3, [r3, #8]
 800c57c:	4618      	mov	r0, r3
 800c57e:	f7f8 fc23 	bl	8004dc8 <lwip_htons>
 800c582:	4603      	mov	r3, r0
 800c584:	461a      	mov	r2, r3
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800c58a:	2311      	movs	r3, #17
 800c58c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	7adb      	ldrb	r3, [r3, #11]
 800c592:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	7a9b      	ldrb	r3, [r3, #10]
 800c598:	7cb9      	ldrb	r1, [r7, #18]
 800c59a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c59c:	9202      	str	r2, [sp, #8]
 800c59e:	7cfa      	ldrb	r2, [r7, #19]
 800c5a0:	9201      	str	r2, [sp, #4]
 800c5a2:	9300      	str	r3, [sp, #0]
 800c5a4:	460b      	mov	r3, r1
 800c5a6:	687a      	ldr	r2, [r7, #4]
 800c5a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c5aa:	69f8      	ldr	r0, [r7, #28]
 800c5ac:	f001 fbd4 	bl	800dd58 <ip4_output_if_src>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800c5b4:	69fa      	ldr	r2, [r7, #28]
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	d004      	beq.n	800c5c6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800c5bc:	69f8      	ldr	r0, [r7, #28]
 800c5be:	f7f9 ff61 	bl	8006484 <pbuf_free>
    q = NULL;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800c5c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3720      	adds	r7, #32
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}
 800c5d2:	bf00      	nop
 800c5d4:	08011d60 	.word	0x08011d60
 800c5d8:	08011f4c 	.word	0x08011f4c
 800c5dc:	08011db4 	.word	0x08011db4
 800c5e0:	08011f6c 	.word	0x08011f6c
 800c5e4:	08011f8c 	.word	0x08011f8c
 800c5e8:	08011fb0 	.word	0x08011fb0
 800c5ec:	08011fd4 	.word	0x08011fd4
 800c5f0:	08011ff8 	.word	0x08011ff8

0800c5f4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b086      	sub	sp, #24
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	4613      	mov	r3, r2
 800c600:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d101      	bne.n	800c60c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800c608:	4b39      	ldr	r3, [pc, #228]	@ (800c6f0 <udp_bind+0xfc>)
 800c60a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d109      	bne.n	800c626 <udp_bind+0x32>
 800c612:	4b38      	ldr	r3, [pc, #224]	@ (800c6f4 <udp_bind+0x100>)
 800c614:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800c618:	4937      	ldr	r1, [pc, #220]	@ (800c6f8 <udp_bind+0x104>)
 800c61a:	4838      	ldr	r0, [pc, #224]	@ (800c6fc <udp_bind+0x108>)
 800c61c:	f002 fca0 	bl	800ef60 <iprintf>
 800c620:	f06f 030f 	mvn.w	r3, #15
 800c624:	e060      	b.n	800c6e8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800c626:	2300      	movs	r3, #0
 800c628:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c62a:	4b35      	ldr	r3, [pc, #212]	@ (800c700 <udp_bind+0x10c>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	617b      	str	r3, [r7, #20]
 800c630:	e009      	b.n	800c646 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800c632:	68fa      	ldr	r2, [r7, #12]
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	429a      	cmp	r2, r3
 800c638:	d102      	bne.n	800c640 <udp_bind+0x4c>
      rebind = 1;
 800c63a:	2301      	movs	r3, #1
 800c63c:	74fb      	strb	r3, [r7, #19]
      break;
 800c63e:	e005      	b.n	800c64c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	68db      	ldr	r3, [r3, #12]
 800c644:	617b      	str	r3, [r7, #20]
 800c646:	697b      	ldr	r3, [r7, #20]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d1f2      	bne.n	800c632 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800c64c:	88fb      	ldrh	r3, [r7, #6]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d109      	bne.n	800c666 <udp_bind+0x72>
    port = udp_new_port();
 800c652:	f7ff fc69 	bl	800bf28 <udp_new_port>
 800c656:	4603      	mov	r3, r0
 800c658:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c65a:	88fb      	ldrh	r3, [r7, #6]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d12c      	bne.n	800c6ba <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800c660:	f06f 0307 	mvn.w	r3, #7
 800c664:	e040      	b.n	800c6e8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c666:	4b26      	ldr	r3, [pc, #152]	@ (800c700 <udp_bind+0x10c>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	617b      	str	r3, [r7, #20]
 800c66c:	e022      	b.n	800c6b4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800c66e:	68fa      	ldr	r2, [r7, #12]
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	429a      	cmp	r2, r3
 800c674:	d01b      	beq.n	800c6ae <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	8a5b      	ldrh	r3, [r3, #18]
 800c67a:	88fa      	ldrh	r2, [r7, #6]
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d116      	bne.n	800c6ae <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	681a      	ldr	r2, [r3, #0]
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800c688:	429a      	cmp	r2, r3
 800c68a:	d00d      	beq.n	800c6a8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d00a      	beq.n	800c6a8 <udp_bind+0xb4>
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d006      	beq.n	800c6a8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c69a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d003      	beq.n	800c6a8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d102      	bne.n	800c6ae <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800c6a8:	f06f 0307 	mvn.w	r3, #7
 800c6ac:	e01c      	b.n	800c6e8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	68db      	ldr	r3, [r3, #12]
 800c6b2:	617b      	str	r3, [r7, #20]
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d1d9      	bne.n	800c66e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d002      	beq.n	800c6c6 <udp_bind+0xd2>
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	e000      	b.n	800c6c8 <udp_bind+0xd4>
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	68fa      	ldr	r2, [r7, #12]
 800c6ca:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	88fa      	ldrh	r2, [r7, #6]
 800c6d0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800c6d2:	7cfb      	ldrb	r3, [r7, #19]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d106      	bne.n	800c6e6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800c6d8:	4b09      	ldr	r3, [pc, #36]	@ (800c700 <udp_bind+0x10c>)
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800c6e0:	4a07      	ldr	r2, [pc, #28]	@ (800c700 <udp_bind+0x10c>)
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800c6e6:	2300      	movs	r3, #0
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3718      	adds	r7, #24
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}
 800c6f0:	0801287c 	.word	0x0801287c
 800c6f4:	08011d60 	.word	0x08011d60
 800c6f8:	08012028 	.word	0x08012028
 800c6fc:	08011db4 	.word	0x08011db4
 800c700:	200082f4 	.word	0x200082f4

0800c704 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b084      	sub	sp, #16
 800c708:	af00      	add	r7, sp, #0
 800c70a:	60f8      	str	r0, [r7, #12]
 800c70c:	60b9      	str	r1, [r7, #8]
 800c70e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d107      	bne.n	800c726 <udp_recv+0x22>
 800c716:	4b08      	ldr	r3, [pc, #32]	@ (800c738 <udp_recv+0x34>)
 800c718:	f240 428a 	movw	r2, #1162	@ 0x48a
 800c71c:	4907      	ldr	r1, [pc, #28]	@ (800c73c <udp_recv+0x38>)
 800c71e:	4808      	ldr	r0, [pc, #32]	@ (800c740 <udp_recv+0x3c>)
 800c720:	f002 fc1e 	bl	800ef60 <iprintf>
 800c724:	e005      	b.n	800c732 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	68ba      	ldr	r2, [r7, #8]
 800c72a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	61da      	str	r2, [r3, #28]
}
 800c732:	3710      	adds	r7, #16
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}
 800c738:	08011d60 	.word	0x08011d60
 800c73c:	08012094 	.word	0x08012094
 800c740:	08011db4 	.word	0x08011db4

0800c744 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b082      	sub	sp, #8
 800c748:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800c74a:	2000      	movs	r0, #0
 800c74c:	f7f8 ffb4 	bl	80056b8 <memp_malloc>
 800c750:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d007      	beq.n	800c768 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800c758:	2220      	movs	r2, #32
 800c75a:	2100      	movs	r1, #0
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f002 fc64 	bl	800f02a <memset>
    pcb->ttl = UDP_TTL;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	22ff      	movs	r2, #255	@ 0xff
 800c766:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800c768:	687b      	ldr	r3, [r7, #4]
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	3708      	adds	r7, #8
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}
	...

0800c774 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c774:	b480      	push	{r7}
 800c776:	b085      	sub	sp, #20
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d01e      	beq.n	800c7c2 <udp_netif_ip_addr_changed+0x4e>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d01a      	beq.n	800c7c2 <udp_netif_ip_addr_changed+0x4e>
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d017      	beq.n	800c7c2 <udp_netif_ip_addr_changed+0x4e>
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d013      	beq.n	800c7c2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c79a:	4b0d      	ldr	r3, [pc, #52]	@ (800c7d0 <udp_netif_ip_addr_changed+0x5c>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	60fb      	str	r3, [r7, #12]
 800c7a0:	e00c      	b.n	800c7bc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	681a      	ldr	r2, [r3, #0]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d103      	bne.n	800c7b6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	68db      	ldr	r3, [r3, #12]
 800c7ba:	60fb      	str	r3, [r7, #12]
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d1ef      	bne.n	800c7a2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c7c2:	bf00      	nop
 800c7c4:	3714      	adds	r7, #20
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7cc:	4770      	bx	lr
 800c7ce:	bf00      	nop
 800c7d0:	200082f4 	.word	0x200082f4

0800c7d4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b082      	sub	sp, #8
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c7dc:	4915      	ldr	r1, [pc, #84]	@ (800c834 <etharp_free_entry+0x60>)
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	4613      	mov	r3, r2
 800c7e2:	005b      	lsls	r3, r3, #1
 800c7e4:	4413      	add	r3, r2
 800c7e6:	00db      	lsls	r3, r3, #3
 800c7e8:	440b      	add	r3, r1
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d013      	beq.n	800c818 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c7f0:	4910      	ldr	r1, [pc, #64]	@ (800c834 <etharp_free_entry+0x60>)
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	4613      	mov	r3, r2
 800c7f6:	005b      	lsls	r3, r3, #1
 800c7f8:	4413      	add	r3, r2
 800c7fa:	00db      	lsls	r3, r3, #3
 800c7fc:	440b      	add	r3, r1
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	4618      	mov	r0, r3
 800c802:	f7f9 fe3f 	bl	8006484 <pbuf_free>
    arp_table[i].q = NULL;
 800c806:	490b      	ldr	r1, [pc, #44]	@ (800c834 <etharp_free_entry+0x60>)
 800c808:	687a      	ldr	r2, [r7, #4]
 800c80a:	4613      	mov	r3, r2
 800c80c:	005b      	lsls	r3, r3, #1
 800c80e:	4413      	add	r3, r2
 800c810:	00db      	lsls	r3, r3, #3
 800c812:	440b      	add	r3, r1
 800c814:	2200      	movs	r2, #0
 800c816:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c818:	4906      	ldr	r1, [pc, #24]	@ (800c834 <etharp_free_entry+0x60>)
 800c81a:	687a      	ldr	r2, [r7, #4]
 800c81c:	4613      	mov	r3, r2
 800c81e:	005b      	lsls	r3, r3, #1
 800c820:	4413      	add	r3, r2
 800c822:	00db      	lsls	r3, r3, #3
 800c824:	440b      	add	r3, r1
 800c826:	3314      	adds	r3, #20
 800c828:	2200      	movs	r2, #0
 800c82a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c82c:	bf00      	nop
 800c82e:	3708      	adds	r7, #8
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}
 800c834:	200082f8 	.word	0x200082f8

0800c838 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b082      	sub	sp, #8
 800c83c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c83e:	2300      	movs	r3, #0
 800c840:	607b      	str	r3, [r7, #4]
 800c842:	e096      	b.n	800c972 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c844:	494f      	ldr	r1, [pc, #316]	@ (800c984 <etharp_tmr+0x14c>)
 800c846:	687a      	ldr	r2, [r7, #4]
 800c848:	4613      	mov	r3, r2
 800c84a:	005b      	lsls	r3, r3, #1
 800c84c:	4413      	add	r3, r2
 800c84e:	00db      	lsls	r3, r3, #3
 800c850:	440b      	add	r3, r1
 800c852:	3314      	adds	r3, #20
 800c854:	781b      	ldrb	r3, [r3, #0]
 800c856:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c858:	78fb      	ldrb	r3, [r7, #3]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	f000 8086 	beq.w	800c96c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c860:	4948      	ldr	r1, [pc, #288]	@ (800c984 <etharp_tmr+0x14c>)
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	4613      	mov	r3, r2
 800c866:	005b      	lsls	r3, r3, #1
 800c868:	4413      	add	r3, r2
 800c86a:	00db      	lsls	r3, r3, #3
 800c86c:	440b      	add	r3, r1
 800c86e:	3312      	adds	r3, #18
 800c870:	881b      	ldrh	r3, [r3, #0]
 800c872:	3301      	adds	r3, #1
 800c874:	b298      	uxth	r0, r3
 800c876:	4943      	ldr	r1, [pc, #268]	@ (800c984 <etharp_tmr+0x14c>)
 800c878:	687a      	ldr	r2, [r7, #4]
 800c87a:	4613      	mov	r3, r2
 800c87c:	005b      	lsls	r3, r3, #1
 800c87e:	4413      	add	r3, r2
 800c880:	00db      	lsls	r3, r3, #3
 800c882:	440b      	add	r3, r1
 800c884:	3312      	adds	r3, #18
 800c886:	4602      	mov	r2, r0
 800c888:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c88a:	493e      	ldr	r1, [pc, #248]	@ (800c984 <etharp_tmr+0x14c>)
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	4613      	mov	r3, r2
 800c890:	005b      	lsls	r3, r3, #1
 800c892:	4413      	add	r3, r2
 800c894:	00db      	lsls	r3, r3, #3
 800c896:	440b      	add	r3, r1
 800c898:	3312      	adds	r3, #18
 800c89a:	881b      	ldrh	r3, [r3, #0]
 800c89c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800c8a0:	d215      	bcs.n	800c8ce <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c8a2:	4938      	ldr	r1, [pc, #224]	@ (800c984 <etharp_tmr+0x14c>)
 800c8a4:	687a      	ldr	r2, [r7, #4]
 800c8a6:	4613      	mov	r3, r2
 800c8a8:	005b      	lsls	r3, r3, #1
 800c8aa:	4413      	add	r3, r2
 800c8ac:	00db      	lsls	r3, r3, #3
 800c8ae:	440b      	add	r3, r1
 800c8b0:	3314      	adds	r3, #20
 800c8b2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d10e      	bne.n	800c8d6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c8b8:	4932      	ldr	r1, [pc, #200]	@ (800c984 <etharp_tmr+0x14c>)
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	4613      	mov	r3, r2
 800c8be:	005b      	lsls	r3, r3, #1
 800c8c0:	4413      	add	r3, r2
 800c8c2:	00db      	lsls	r3, r3, #3
 800c8c4:	440b      	add	r3, r1
 800c8c6:	3312      	adds	r3, #18
 800c8c8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c8ca:	2b04      	cmp	r3, #4
 800c8cc:	d903      	bls.n	800c8d6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f7ff ff80 	bl	800c7d4 <etharp_free_entry>
 800c8d4:	e04a      	b.n	800c96c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c8d6:	492b      	ldr	r1, [pc, #172]	@ (800c984 <etharp_tmr+0x14c>)
 800c8d8:	687a      	ldr	r2, [r7, #4]
 800c8da:	4613      	mov	r3, r2
 800c8dc:	005b      	lsls	r3, r3, #1
 800c8de:	4413      	add	r3, r2
 800c8e0:	00db      	lsls	r3, r3, #3
 800c8e2:	440b      	add	r3, r1
 800c8e4:	3314      	adds	r3, #20
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	2b03      	cmp	r3, #3
 800c8ea:	d10a      	bne.n	800c902 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c8ec:	4925      	ldr	r1, [pc, #148]	@ (800c984 <etharp_tmr+0x14c>)
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	4613      	mov	r3, r2
 800c8f2:	005b      	lsls	r3, r3, #1
 800c8f4:	4413      	add	r3, r2
 800c8f6:	00db      	lsls	r3, r3, #3
 800c8f8:	440b      	add	r3, r1
 800c8fa:	3314      	adds	r3, #20
 800c8fc:	2204      	movs	r2, #4
 800c8fe:	701a      	strb	r2, [r3, #0]
 800c900:	e034      	b.n	800c96c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c902:	4920      	ldr	r1, [pc, #128]	@ (800c984 <etharp_tmr+0x14c>)
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	4613      	mov	r3, r2
 800c908:	005b      	lsls	r3, r3, #1
 800c90a:	4413      	add	r3, r2
 800c90c:	00db      	lsls	r3, r3, #3
 800c90e:	440b      	add	r3, r1
 800c910:	3314      	adds	r3, #20
 800c912:	781b      	ldrb	r3, [r3, #0]
 800c914:	2b04      	cmp	r3, #4
 800c916:	d10a      	bne.n	800c92e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c918:	491a      	ldr	r1, [pc, #104]	@ (800c984 <etharp_tmr+0x14c>)
 800c91a:	687a      	ldr	r2, [r7, #4]
 800c91c:	4613      	mov	r3, r2
 800c91e:	005b      	lsls	r3, r3, #1
 800c920:	4413      	add	r3, r2
 800c922:	00db      	lsls	r3, r3, #3
 800c924:	440b      	add	r3, r1
 800c926:	3314      	adds	r3, #20
 800c928:	2202      	movs	r2, #2
 800c92a:	701a      	strb	r2, [r3, #0]
 800c92c:	e01e      	b.n	800c96c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c92e:	4915      	ldr	r1, [pc, #84]	@ (800c984 <etharp_tmr+0x14c>)
 800c930:	687a      	ldr	r2, [r7, #4]
 800c932:	4613      	mov	r3, r2
 800c934:	005b      	lsls	r3, r3, #1
 800c936:	4413      	add	r3, r2
 800c938:	00db      	lsls	r3, r3, #3
 800c93a:	440b      	add	r3, r1
 800c93c:	3314      	adds	r3, #20
 800c93e:	781b      	ldrb	r3, [r3, #0]
 800c940:	2b01      	cmp	r3, #1
 800c942:	d113      	bne.n	800c96c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c944:	490f      	ldr	r1, [pc, #60]	@ (800c984 <etharp_tmr+0x14c>)
 800c946:	687a      	ldr	r2, [r7, #4]
 800c948:	4613      	mov	r3, r2
 800c94a:	005b      	lsls	r3, r3, #1
 800c94c:	4413      	add	r3, r2
 800c94e:	00db      	lsls	r3, r3, #3
 800c950:	440b      	add	r3, r1
 800c952:	3308      	adds	r3, #8
 800c954:	6818      	ldr	r0, [r3, #0]
 800c956:	687a      	ldr	r2, [r7, #4]
 800c958:	4613      	mov	r3, r2
 800c95a:	005b      	lsls	r3, r3, #1
 800c95c:	4413      	add	r3, r2
 800c95e:	00db      	lsls	r3, r3, #3
 800c960:	4a08      	ldr	r2, [pc, #32]	@ (800c984 <etharp_tmr+0x14c>)
 800c962:	4413      	add	r3, r2
 800c964:	3304      	adds	r3, #4
 800c966:	4619      	mov	r1, r3
 800c968:	f000 fe6e 	bl	800d648 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	3301      	adds	r3, #1
 800c970:	607b      	str	r3, [r7, #4]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2b09      	cmp	r3, #9
 800c976:	f77f af65 	ble.w	800c844 <etharp_tmr+0xc>
      }
    }
  }
}
 800c97a:	bf00      	nop
 800c97c:	bf00      	nop
 800c97e:	3708      	adds	r7, #8
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}
 800c984:	200082f8 	.word	0x200082f8

0800c988 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b08a      	sub	sp, #40	@ 0x28
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	60f8      	str	r0, [r7, #12]
 800c990:	460b      	mov	r3, r1
 800c992:	607a      	str	r2, [r7, #4]
 800c994:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c996:	230a      	movs	r3, #10
 800c998:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c99a:	230a      	movs	r3, #10
 800c99c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c99e:	230a      	movs	r3, #10
 800c9a0:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c9a6:	230a      	movs	r3, #10
 800c9a8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	83bb      	strh	r3, [r7, #28]
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	837b      	strh	r3, [r7, #26]
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	843b      	strh	r3, [r7, #32]
 800c9ba:	e0ae      	b.n	800cb1a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c9bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c9c0:	49a6      	ldr	r1, [pc, #664]	@ (800cc5c <etharp_find_entry+0x2d4>)
 800c9c2:	4613      	mov	r3, r2
 800c9c4:	005b      	lsls	r3, r3, #1
 800c9c6:	4413      	add	r3, r2
 800c9c8:	00db      	lsls	r3, r3, #3
 800c9ca:	440b      	add	r3, r1
 800c9cc:	3314      	adds	r3, #20
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c9d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c9d6:	2b0a      	cmp	r3, #10
 800c9d8:	d105      	bne.n	800c9e6 <etharp_find_entry+0x5e>
 800c9da:	7dfb      	ldrb	r3, [r7, #23]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d102      	bne.n	800c9e6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c9e0:	8c3b      	ldrh	r3, [r7, #32]
 800c9e2:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c9e4:	e095      	b.n	800cb12 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c9e6:	7dfb      	ldrb	r3, [r7, #23]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	f000 8092 	beq.w	800cb12 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c9ee:	7dfb      	ldrb	r3, [r7, #23]
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	d009      	beq.n	800ca08 <etharp_find_entry+0x80>
 800c9f4:	7dfb      	ldrb	r3, [r7, #23]
 800c9f6:	2b01      	cmp	r3, #1
 800c9f8:	d806      	bhi.n	800ca08 <etharp_find_entry+0x80>
 800c9fa:	4b99      	ldr	r3, [pc, #612]	@ (800cc60 <etharp_find_entry+0x2d8>)
 800c9fc:	f240 1223 	movw	r2, #291	@ 0x123
 800ca00:	4998      	ldr	r1, [pc, #608]	@ (800cc64 <etharp_find_entry+0x2dc>)
 800ca02:	4899      	ldr	r0, [pc, #612]	@ (800cc68 <etharp_find_entry+0x2e0>)
 800ca04:	f002 faac 	bl	800ef60 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d020      	beq.n	800ca50 <etharp_find_entry+0xc8>
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	6819      	ldr	r1, [r3, #0]
 800ca12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca16:	4891      	ldr	r0, [pc, #580]	@ (800cc5c <etharp_find_entry+0x2d4>)
 800ca18:	4613      	mov	r3, r2
 800ca1a:	005b      	lsls	r3, r3, #1
 800ca1c:	4413      	add	r3, r2
 800ca1e:	00db      	lsls	r3, r3, #3
 800ca20:	4403      	add	r3, r0
 800ca22:	3304      	adds	r3, #4
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	4299      	cmp	r1, r3
 800ca28:	d112      	bne.n	800ca50 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d00c      	beq.n	800ca4a <etharp_find_entry+0xc2>
 800ca30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca34:	4989      	ldr	r1, [pc, #548]	@ (800cc5c <etharp_find_entry+0x2d4>)
 800ca36:	4613      	mov	r3, r2
 800ca38:	005b      	lsls	r3, r3, #1
 800ca3a:	4413      	add	r3, r2
 800ca3c:	00db      	lsls	r3, r3, #3
 800ca3e:	440b      	add	r3, r1
 800ca40:	3308      	adds	r3, #8
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	687a      	ldr	r2, [r7, #4]
 800ca46:	429a      	cmp	r2, r3
 800ca48:	d102      	bne.n	800ca50 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800ca4a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ca4e:	e100      	b.n	800cc52 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800ca50:	7dfb      	ldrb	r3, [r7, #23]
 800ca52:	2b01      	cmp	r3, #1
 800ca54:	d140      	bne.n	800cad8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800ca56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca5a:	4980      	ldr	r1, [pc, #512]	@ (800cc5c <etharp_find_entry+0x2d4>)
 800ca5c:	4613      	mov	r3, r2
 800ca5e:	005b      	lsls	r3, r3, #1
 800ca60:	4413      	add	r3, r2
 800ca62:	00db      	lsls	r3, r3, #3
 800ca64:	440b      	add	r3, r1
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d01a      	beq.n	800caa2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800ca6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca70:	497a      	ldr	r1, [pc, #488]	@ (800cc5c <etharp_find_entry+0x2d4>)
 800ca72:	4613      	mov	r3, r2
 800ca74:	005b      	lsls	r3, r3, #1
 800ca76:	4413      	add	r3, r2
 800ca78:	00db      	lsls	r3, r3, #3
 800ca7a:	440b      	add	r3, r1
 800ca7c:	3312      	adds	r3, #18
 800ca7e:	881b      	ldrh	r3, [r3, #0]
 800ca80:	8bba      	ldrh	r2, [r7, #28]
 800ca82:	429a      	cmp	r2, r3
 800ca84:	d845      	bhi.n	800cb12 <etharp_find_entry+0x18a>
            old_queue = i;
 800ca86:	8c3b      	ldrh	r3, [r7, #32]
 800ca88:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800ca8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca8e:	4973      	ldr	r1, [pc, #460]	@ (800cc5c <etharp_find_entry+0x2d4>)
 800ca90:	4613      	mov	r3, r2
 800ca92:	005b      	lsls	r3, r3, #1
 800ca94:	4413      	add	r3, r2
 800ca96:	00db      	lsls	r3, r3, #3
 800ca98:	440b      	add	r3, r1
 800ca9a:	3312      	adds	r3, #18
 800ca9c:	881b      	ldrh	r3, [r3, #0]
 800ca9e:	83bb      	strh	r3, [r7, #28]
 800caa0:	e037      	b.n	800cb12 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800caa2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800caa6:	496d      	ldr	r1, [pc, #436]	@ (800cc5c <etharp_find_entry+0x2d4>)
 800caa8:	4613      	mov	r3, r2
 800caaa:	005b      	lsls	r3, r3, #1
 800caac:	4413      	add	r3, r2
 800caae:	00db      	lsls	r3, r3, #3
 800cab0:	440b      	add	r3, r1
 800cab2:	3312      	adds	r3, #18
 800cab4:	881b      	ldrh	r3, [r3, #0]
 800cab6:	8b7a      	ldrh	r2, [r7, #26]
 800cab8:	429a      	cmp	r2, r3
 800caba:	d82a      	bhi.n	800cb12 <etharp_find_entry+0x18a>
            old_pending = i;
 800cabc:	8c3b      	ldrh	r3, [r7, #32]
 800cabe:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800cac0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cac4:	4965      	ldr	r1, [pc, #404]	@ (800cc5c <etharp_find_entry+0x2d4>)
 800cac6:	4613      	mov	r3, r2
 800cac8:	005b      	lsls	r3, r3, #1
 800caca:	4413      	add	r3, r2
 800cacc:	00db      	lsls	r3, r3, #3
 800cace:	440b      	add	r3, r1
 800cad0:	3312      	adds	r3, #18
 800cad2:	881b      	ldrh	r3, [r3, #0]
 800cad4:	837b      	strh	r3, [r7, #26]
 800cad6:	e01c      	b.n	800cb12 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800cad8:	7dfb      	ldrb	r3, [r7, #23]
 800cada:	2b01      	cmp	r3, #1
 800cadc:	d919      	bls.n	800cb12 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800cade:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cae2:	495e      	ldr	r1, [pc, #376]	@ (800cc5c <etharp_find_entry+0x2d4>)
 800cae4:	4613      	mov	r3, r2
 800cae6:	005b      	lsls	r3, r3, #1
 800cae8:	4413      	add	r3, r2
 800caea:	00db      	lsls	r3, r3, #3
 800caec:	440b      	add	r3, r1
 800caee:	3312      	adds	r3, #18
 800caf0:	881b      	ldrh	r3, [r3, #0]
 800caf2:	8b3a      	ldrh	r2, [r7, #24]
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d80c      	bhi.n	800cb12 <etharp_find_entry+0x18a>
            old_stable = i;
 800caf8:	8c3b      	ldrh	r3, [r7, #32]
 800cafa:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800cafc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb00:	4956      	ldr	r1, [pc, #344]	@ (800cc5c <etharp_find_entry+0x2d4>)
 800cb02:	4613      	mov	r3, r2
 800cb04:	005b      	lsls	r3, r3, #1
 800cb06:	4413      	add	r3, r2
 800cb08:	00db      	lsls	r3, r3, #3
 800cb0a:	440b      	add	r3, r1
 800cb0c:	3312      	adds	r3, #18
 800cb0e:	881b      	ldrh	r3, [r3, #0]
 800cb10:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cb12:	8c3b      	ldrh	r3, [r7, #32]
 800cb14:	3301      	adds	r3, #1
 800cb16:	b29b      	uxth	r3, r3
 800cb18:	843b      	strh	r3, [r7, #32]
 800cb1a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cb1e:	2b09      	cmp	r3, #9
 800cb20:	f77f af4c 	ble.w	800c9bc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800cb24:	7afb      	ldrb	r3, [r7, #11]
 800cb26:	f003 0302 	and.w	r3, r3, #2
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d108      	bne.n	800cb40 <etharp_find_entry+0x1b8>
 800cb2e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800cb32:	2b0a      	cmp	r3, #10
 800cb34:	d107      	bne.n	800cb46 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800cb36:	7afb      	ldrb	r3, [r7, #11]
 800cb38:	f003 0301 	and.w	r3, r3, #1
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d102      	bne.n	800cb46 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800cb40:	f04f 33ff 	mov.w	r3, #4294967295
 800cb44:	e085      	b.n	800cc52 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800cb46:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800cb4a:	2b09      	cmp	r3, #9
 800cb4c:	dc02      	bgt.n	800cb54 <etharp_find_entry+0x1cc>
    i = empty;
 800cb4e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cb50:	843b      	strh	r3, [r7, #32]
 800cb52:	e039      	b.n	800cbc8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800cb54:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800cb58:	2b09      	cmp	r3, #9
 800cb5a:	dc14      	bgt.n	800cb86 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800cb5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb5e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800cb60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb64:	493d      	ldr	r1, [pc, #244]	@ (800cc5c <etharp_find_entry+0x2d4>)
 800cb66:	4613      	mov	r3, r2
 800cb68:	005b      	lsls	r3, r3, #1
 800cb6a:	4413      	add	r3, r2
 800cb6c:	00db      	lsls	r3, r3, #3
 800cb6e:	440b      	add	r3, r1
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d018      	beq.n	800cba8 <etharp_find_entry+0x220>
 800cb76:	4b3a      	ldr	r3, [pc, #232]	@ (800cc60 <etharp_find_entry+0x2d8>)
 800cb78:	f240 126d 	movw	r2, #365	@ 0x16d
 800cb7c:	493b      	ldr	r1, [pc, #236]	@ (800cc6c <etharp_find_entry+0x2e4>)
 800cb7e:	483a      	ldr	r0, [pc, #232]	@ (800cc68 <etharp_find_entry+0x2e0>)
 800cb80:	f002 f9ee 	bl	800ef60 <iprintf>
 800cb84:	e010      	b.n	800cba8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800cb86:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800cb8a:	2b09      	cmp	r3, #9
 800cb8c:	dc02      	bgt.n	800cb94 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800cb8e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cb90:	843b      	strh	r3, [r7, #32]
 800cb92:	e009      	b.n	800cba8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800cb94:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cb98:	2b09      	cmp	r3, #9
 800cb9a:	dc02      	bgt.n	800cba2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800cb9c:	8bfb      	ldrh	r3, [r7, #30]
 800cb9e:	843b      	strh	r3, [r7, #32]
 800cba0:	e002      	b.n	800cba8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800cba2:	f04f 33ff 	mov.w	r3, #4294967295
 800cba6:	e054      	b.n	800cc52 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cba8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cbac:	2b09      	cmp	r3, #9
 800cbae:	dd06      	ble.n	800cbbe <etharp_find_entry+0x236>
 800cbb0:	4b2b      	ldr	r3, [pc, #172]	@ (800cc60 <etharp_find_entry+0x2d8>)
 800cbb2:	f240 127f 	movw	r2, #383	@ 0x17f
 800cbb6:	492e      	ldr	r1, [pc, #184]	@ (800cc70 <etharp_find_entry+0x2e8>)
 800cbb8:	482b      	ldr	r0, [pc, #172]	@ (800cc68 <etharp_find_entry+0x2e0>)
 800cbba:	f002 f9d1 	bl	800ef60 <iprintf>
    etharp_free_entry(i);
 800cbbe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f7ff fe06 	bl	800c7d4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cbc8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cbcc:	2b09      	cmp	r3, #9
 800cbce:	dd06      	ble.n	800cbde <etharp_find_entry+0x256>
 800cbd0:	4b23      	ldr	r3, [pc, #140]	@ (800cc60 <etharp_find_entry+0x2d8>)
 800cbd2:	f240 1283 	movw	r2, #387	@ 0x183
 800cbd6:	4926      	ldr	r1, [pc, #152]	@ (800cc70 <etharp_find_entry+0x2e8>)
 800cbd8:	4823      	ldr	r0, [pc, #140]	@ (800cc68 <etharp_find_entry+0x2e0>)
 800cbda:	f002 f9c1 	bl	800ef60 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800cbde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cbe2:	491e      	ldr	r1, [pc, #120]	@ (800cc5c <etharp_find_entry+0x2d4>)
 800cbe4:	4613      	mov	r3, r2
 800cbe6:	005b      	lsls	r3, r3, #1
 800cbe8:	4413      	add	r3, r2
 800cbea:	00db      	lsls	r3, r3, #3
 800cbec:	440b      	add	r3, r1
 800cbee:	3314      	adds	r3, #20
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d006      	beq.n	800cc04 <etharp_find_entry+0x27c>
 800cbf6:	4b1a      	ldr	r3, [pc, #104]	@ (800cc60 <etharp_find_entry+0x2d8>)
 800cbf8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800cbfc:	491d      	ldr	r1, [pc, #116]	@ (800cc74 <etharp_find_entry+0x2ec>)
 800cbfe:	481a      	ldr	r0, [pc, #104]	@ (800cc68 <etharp_find_entry+0x2e0>)
 800cc00:	f002 f9ae 	bl	800ef60 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d00b      	beq.n	800cc22 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800cc0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	6819      	ldr	r1, [r3, #0]
 800cc12:	4812      	ldr	r0, [pc, #72]	@ (800cc5c <etharp_find_entry+0x2d4>)
 800cc14:	4613      	mov	r3, r2
 800cc16:	005b      	lsls	r3, r3, #1
 800cc18:	4413      	add	r3, r2
 800cc1a:	00db      	lsls	r3, r3, #3
 800cc1c:	4403      	add	r3, r0
 800cc1e:	3304      	adds	r3, #4
 800cc20:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800cc22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc26:	490d      	ldr	r1, [pc, #52]	@ (800cc5c <etharp_find_entry+0x2d4>)
 800cc28:	4613      	mov	r3, r2
 800cc2a:	005b      	lsls	r3, r3, #1
 800cc2c:	4413      	add	r3, r2
 800cc2e:	00db      	lsls	r3, r3, #3
 800cc30:	440b      	add	r3, r1
 800cc32:	3312      	adds	r3, #18
 800cc34:	2200      	movs	r2, #0
 800cc36:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800cc38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc3c:	4907      	ldr	r1, [pc, #28]	@ (800cc5c <etharp_find_entry+0x2d4>)
 800cc3e:	4613      	mov	r3, r2
 800cc40:	005b      	lsls	r3, r3, #1
 800cc42:	4413      	add	r3, r2
 800cc44:	00db      	lsls	r3, r3, #3
 800cc46:	440b      	add	r3, r1
 800cc48:	3308      	adds	r3, #8
 800cc4a:	687a      	ldr	r2, [r7, #4]
 800cc4c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800cc4e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3728      	adds	r7, #40	@ 0x28
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}
 800cc5a:	bf00      	nop
 800cc5c:	200082f8 	.word	0x200082f8
 800cc60:	080120c4 	.word	0x080120c4
 800cc64:	080120fc 	.word	0x080120fc
 800cc68:	0801213c 	.word	0x0801213c
 800cc6c:	08012164 	.word	0x08012164
 800cc70:	0801217c 	.word	0x0801217c
 800cc74:	08012190 	.word	0x08012190

0800cc78 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b088      	sub	sp, #32
 800cc7c:	af02      	add	r7, sp, #8
 800cc7e:	60f8      	str	r0, [r7, #12]
 800cc80:	60b9      	str	r1, [r7, #8]
 800cc82:	607a      	str	r2, [r7, #4]
 800cc84:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cc8c:	2b06      	cmp	r3, #6
 800cc8e:	d006      	beq.n	800cc9e <etharp_update_arp_entry+0x26>
 800cc90:	4b48      	ldr	r3, [pc, #288]	@ (800cdb4 <etharp_update_arp_entry+0x13c>)
 800cc92:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800cc96:	4948      	ldr	r1, [pc, #288]	@ (800cdb8 <etharp_update_arp_entry+0x140>)
 800cc98:	4848      	ldr	r0, [pc, #288]	@ (800cdbc <etharp_update_arp_entry+0x144>)
 800cc9a:	f002 f961 	bl	800ef60 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d012      	beq.n	800ccca <etharp_update_arp_entry+0x52>
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d00e      	beq.n	800ccca <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	68f9      	ldr	r1, [r7, #12]
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f001 f8fe 	bl	800deb4 <ip4_addr_isbroadcast_u32>
 800ccb8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d105      	bne.n	800ccca <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ccc6:	2be0      	cmp	r3, #224	@ 0xe0
 800ccc8:	d102      	bne.n	800ccd0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ccca:	f06f 030f 	mvn.w	r3, #15
 800ccce:	e06c      	b.n	800cdaa <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800ccd0:	78fb      	ldrb	r3, [r7, #3]
 800ccd2:	68fa      	ldr	r2, [r7, #12]
 800ccd4:	4619      	mov	r1, r3
 800ccd6:	68b8      	ldr	r0, [r7, #8]
 800ccd8:	f7ff fe56 	bl	800c988 <etharp_find_entry>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800cce0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	da02      	bge.n	800ccee <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800cce8:	8afb      	ldrh	r3, [r7, #22]
 800ccea:	b25b      	sxtb	r3, r3
 800ccec:	e05d      	b.n	800cdaa <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800ccee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ccf2:	4933      	ldr	r1, [pc, #204]	@ (800cdc0 <etharp_update_arp_entry+0x148>)
 800ccf4:	4613      	mov	r3, r2
 800ccf6:	005b      	lsls	r3, r3, #1
 800ccf8:	4413      	add	r3, r2
 800ccfa:	00db      	lsls	r3, r3, #3
 800ccfc:	440b      	add	r3, r1
 800ccfe:	3314      	adds	r3, #20
 800cd00:	2202      	movs	r2, #2
 800cd02:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800cd04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cd08:	492d      	ldr	r1, [pc, #180]	@ (800cdc0 <etharp_update_arp_entry+0x148>)
 800cd0a:	4613      	mov	r3, r2
 800cd0c:	005b      	lsls	r3, r3, #1
 800cd0e:	4413      	add	r3, r2
 800cd10:	00db      	lsls	r3, r3, #3
 800cd12:	440b      	add	r3, r1
 800cd14:	3308      	adds	r3, #8
 800cd16:	68fa      	ldr	r2, [r7, #12]
 800cd18:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800cd1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cd1e:	4613      	mov	r3, r2
 800cd20:	005b      	lsls	r3, r3, #1
 800cd22:	4413      	add	r3, r2
 800cd24:	00db      	lsls	r3, r3, #3
 800cd26:	3308      	adds	r3, #8
 800cd28:	4a25      	ldr	r2, [pc, #148]	@ (800cdc0 <etharp_update_arp_entry+0x148>)
 800cd2a:	4413      	add	r3, r2
 800cd2c:	3304      	adds	r3, #4
 800cd2e:	2206      	movs	r2, #6
 800cd30:	6879      	ldr	r1, [r7, #4]
 800cd32:	4618      	mov	r0, r3
 800cd34:	f002 f9ef 	bl	800f116 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800cd38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cd3c:	4920      	ldr	r1, [pc, #128]	@ (800cdc0 <etharp_update_arp_entry+0x148>)
 800cd3e:	4613      	mov	r3, r2
 800cd40:	005b      	lsls	r3, r3, #1
 800cd42:	4413      	add	r3, r2
 800cd44:	00db      	lsls	r3, r3, #3
 800cd46:	440b      	add	r3, r1
 800cd48:	3312      	adds	r3, #18
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800cd4e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cd52:	491b      	ldr	r1, [pc, #108]	@ (800cdc0 <etharp_update_arp_entry+0x148>)
 800cd54:	4613      	mov	r3, r2
 800cd56:	005b      	lsls	r3, r3, #1
 800cd58:	4413      	add	r3, r2
 800cd5a:	00db      	lsls	r3, r3, #3
 800cd5c:	440b      	add	r3, r1
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d021      	beq.n	800cda8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800cd64:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cd68:	4915      	ldr	r1, [pc, #84]	@ (800cdc0 <etharp_update_arp_entry+0x148>)
 800cd6a:	4613      	mov	r3, r2
 800cd6c:	005b      	lsls	r3, r3, #1
 800cd6e:	4413      	add	r3, r2
 800cd70:	00db      	lsls	r3, r3, #3
 800cd72:	440b      	add	r3, r1
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800cd78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cd7c:	4910      	ldr	r1, [pc, #64]	@ (800cdc0 <etharp_update_arp_entry+0x148>)
 800cd7e:	4613      	mov	r3, r2
 800cd80:	005b      	lsls	r3, r3, #1
 800cd82:	4413      	add	r3, r2
 800cd84:	00db      	lsls	r3, r3, #3
 800cd86:	440b      	add	r3, r1
 800cd88:	2200      	movs	r2, #0
 800cd8a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800cd92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cd96:	9300      	str	r3, [sp, #0]
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6939      	ldr	r1, [r7, #16]
 800cd9c:	68f8      	ldr	r0, [r7, #12]
 800cd9e:	f001 ff97 	bl	800ecd0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800cda2:	6938      	ldr	r0, [r7, #16]
 800cda4:	f7f9 fb6e 	bl	8006484 <pbuf_free>
  }
  return ERR_OK;
 800cda8:	2300      	movs	r3, #0
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	3718      	adds	r7, #24
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}
 800cdb2:	bf00      	nop
 800cdb4:	080120c4 	.word	0x080120c4
 800cdb8:	080121bc 	.word	0x080121bc
 800cdbc:	0801213c 	.word	0x0801213c
 800cdc0:	200082f8 	.word	0x200082f8

0800cdc4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b084      	sub	sp, #16
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cdcc:	2300      	movs	r3, #0
 800cdce:	60fb      	str	r3, [r7, #12]
 800cdd0:	e01e      	b.n	800ce10 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800cdd2:	4913      	ldr	r1, [pc, #76]	@ (800ce20 <etharp_cleanup_netif+0x5c>)
 800cdd4:	68fa      	ldr	r2, [r7, #12]
 800cdd6:	4613      	mov	r3, r2
 800cdd8:	005b      	lsls	r3, r3, #1
 800cdda:	4413      	add	r3, r2
 800cddc:	00db      	lsls	r3, r3, #3
 800cdde:	440b      	add	r3, r1
 800cde0:	3314      	adds	r3, #20
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800cde6:	7afb      	ldrb	r3, [r7, #11]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d00e      	beq.n	800ce0a <etharp_cleanup_netif+0x46>
 800cdec:	490c      	ldr	r1, [pc, #48]	@ (800ce20 <etharp_cleanup_netif+0x5c>)
 800cdee:	68fa      	ldr	r2, [r7, #12]
 800cdf0:	4613      	mov	r3, r2
 800cdf2:	005b      	lsls	r3, r3, #1
 800cdf4:	4413      	add	r3, r2
 800cdf6:	00db      	lsls	r3, r3, #3
 800cdf8:	440b      	add	r3, r1
 800cdfa:	3308      	adds	r3, #8
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d102      	bne.n	800ce0a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800ce04:	68f8      	ldr	r0, [r7, #12]
 800ce06:	f7ff fce5 	bl	800c7d4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	3301      	adds	r3, #1
 800ce0e:	60fb      	str	r3, [r7, #12]
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2b09      	cmp	r3, #9
 800ce14:	dddd      	ble.n	800cdd2 <etharp_cleanup_netif+0xe>
    }
  }
}
 800ce16:	bf00      	nop
 800ce18:	bf00      	nop
 800ce1a:	3710      	adds	r7, #16
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}
 800ce20:	200082f8 	.word	0x200082f8

0800ce24 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800ce24:	b5b0      	push	{r4, r5, r7, lr}
 800ce26:	b08a      	sub	sp, #40	@ 0x28
 800ce28:	af04      	add	r7, sp, #16
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d107      	bne.n	800ce44 <etharp_input+0x20>
 800ce34:	4b3d      	ldr	r3, [pc, #244]	@ (800cf2c <etharp_input+0x108>)
 800ce36:	f240 228a 	movw	r2, #650	@ 0x28a
 800ce3a:	493d      	ldr	r1, [pc, #244]	@ (800cf30 <etharp_input+0x10c>)
 800ce3c:	483d      	ldr	r0, [pc, #244]	@ (800cf34 <etharp_input+0x110>)
 800ce3e:	f002 f88f 	bl	800ef60 <iprintf>
 800ce42:	e06f      	b.n	800cf24 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	881b      	ldrh	r3, [r3, #0]
 800ce4e:	b29b      	uxth	r3, r3
 800ce50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce54:	d10c      	bne.n	800ce70 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ce5a:	2b06      	cmp	r3, #6
 800ce5c:	d108      	bne.n	800ce70 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ce62:	2b04      	cmp	r3, #4
 800ce64:	d104      	bne.n	800ce70 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	885b      	ldrh	r3, [r3, #2]
 800ce6a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ce6c:	2b08      	cmp	r3, #8
 800ce6e:	d003      	beq.n	800ce78 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f7f9 fb07 	bl	8006484 <pbuf_free>
    return;
 800ce76:	e055      	b.n	800cf24 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	330e      	adds	r3, #14
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	3318      	adds	r3, #24
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	3304      	adds	r3, #4
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d102      	bne.n	800ce98 <etharp_input+0x74>
    for_us = 0;
 800ce92:	2300      	movs	r3, #0
 800ce94:	75fb      	strb	r3, [r7, #23]
 800ce96:	e009      	b.n	800ceac <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800ce98:	68ba      	ldr	r2, [r7, #8]
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	3304      	adds	r3, #4
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	429a      	cmp	r2, r3
 800cea2:	bf0c      	ite	eq
 800cea4:	2301      	moveq	r3, #1
 800cea6:	2300      	movne	r3, #0
 800cea8:	b2db      	uxtb	r3, r3
 800ceaa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	f103 0208 	add.w	r2, r3, #8
 800ceb2:	7dfb      	ldrb	r3, [r7, #23]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d001      	beq.n	800cebc <etharp_input+0x98>
 800ceb8:	2301      	movs	r3, #1
 800ceba:	e000      	b.n	800cebe <etharp_input+0x9a>
 800cebc:	2302      	movs	r3, #2
 800cebe:	f107 010c 	add.w	r1, r7, #12
 800cec2:	6838      	ldr	r0, [r7, #0]
 800cec4:	f7ff fed8 	bl	800cc78 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	88db      	ldrh	r3, [r3, #6]
 800cecc:	b29b      	uxth	r3, r3
 800cece:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ced2:	d003      	beq.n	800cedc <etharp_input+0xb8>
 800ced4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ced8:	d01e      	beq.n	800cf18 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800ceda:	e020      	b.n	800cf1e <etharp_input+0xfa>
      if (for_us) {
 800cedc:	7dfb      	ldrb	r3, [r7, #23]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d01c      	beq.n	800cf1c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800cef8:	693a      	ldr	r2, [r7, #16]
 800cefa:	3208      	adds	r2, #8
        etharp_raw(netif,
 800cefc:	2102      	movs	r1, #2
 800cefe:	9103      	str	r1, [sp, #12]
 800cf00:	f107 010c 	add.w	r1, r7, #12
 800cf04:	9102      	str	r1, [sp, #8]
 800cf06:	9201      	str	r2, [sp, #4]
 800cf08:	9300      	str	r3, [sp, #0]
 800cf0a:	462b      	mov	r3, r5
 800cf0c:	4622      	mov	r2, r4
 800cf0e:	4601      	mov	r1, r0
 800cf10:	6838      	ldr	r0, [r7, #0]
 800cf12:	f000 faeb 	bl	800d4ec <etharp_raw>
      break;
 800cf16:	e001      	b.n	800cf1c <etharp_input+0xf8>
      break;
 800cf18:	bf00      	nop
 800cf1a:	e000      	b.n	800cf1e <etharp_input+0xfa>
      break;
 800cf1c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f7f9 fab0 	bl	8006484 <pbuf_free>
}
 800cf24:	3718      	adds	r7, #24
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bdb0      	pop	{r4, r5, r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	080120c4 	.word	0x080120c4
 800cf30:	08012214 	.word	0x08012214
 800cf34:	0801213c 	.word	0x0801213c

0800cf38 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b086      	sub	sp, #24
 800cf3c:	af02      	add	r7, sp, #8
 800cf3e:	60f8      	str	r0, [r7, #12]
 800cf40:	60b9      	str	r1, [r7, #8]
 800cf42:	4613      	mov	r3, r2
 800cf44:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800cf46:	79fa      	ldrb	r2, [r7, #7]
 800cf48:	4944      	ldr	r1, [pc, #272]	@ (800d05c <etharp_output_to_arp_index+0x124>)
 800cf4a:	4613      	mov	r3, r2
 800cf4c:	005b      	lsls	r3, r3, #1
 800cf4e:	4413      	add	r3, r2
 800cf50:	00db      	lsls	r3, r3, #3
 800cf52:	440b      	add	r3, r1
 800cf54:	3314      	adds	r3, #20
 800cf56:	781b      	ldrb	r3, [r3, #0]
 800cf58:	2b01      	cmp	r3, #1
 800cf5a:	d806      	bhi.n	800cf6a <etharp_output_to_arp_index+0x32>
 800cf5c:	4b40      	ldr	r3, [pc, #256]	@ (800d060 <etharp_output_to_arp_index+0x128>)
 800cf5e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800cf62:	4940      	ldr	r1, [pc, #256]	@ (800d064 <etharp_output_to_arp_index+0x12c>)
 800cf64:	4840      	ldr	r0, [pc, #256]	@ (800d068 <etharp_output_to_arp_index+0x130>)
 800cf66:	f001 fffb 	bl	800ef60 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800cf6a:	79fa      	ldrb	r2, [r7, #7]
 800cf6c:	493b      	ldr	r1, [pc, #236]	@ (800d05c <etharp_output_to_arp_index+0x124>)
 800cf6e:	4613      	mov	r3, r2
 800cf70:	005b      	lsls	r3, r3, #1
 800cf72:	4413      	add	r3, r2
 800cf74:	00db      	lsls	r3, r3, #3
 800cf76:	440b      	add	r3, r1
 800cf78:	3314      	adds	r3, #20
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	2b02      	cmp	r3, #2
 800cf7e:	d153      	bne.n	800d028 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800cf80:	79fa      	ldrb	r2, [r7, #7]
 800cf82:	4936      	ldr	r1, [pc, #216]	@ (800d05c <etharp_output_to_arp_index+0x124>)
 800cf84:	4613      	mov	r3, r2
 800cf86:	005b      	lsls	r3, r3, #1
 800cf88:	4413      	add	r3, r2
 800cf8a:	00db      	lsls	r3, r3, #3
 800cf8c:	440b      	add	r3, r1
 800cf8e:	3312      	adds	r3, #18
 800cf90:	881b      	ldrh	r3, [r3, #0]
 800cf92:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800cf96:	d919      	bls.n	800cfcc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800cf98:	79fa      	ldrb	r2, [r7, #7]
 800cf9a:	4613      	mov	r3, r2
 800cf9c:	005b      	lsls	r3, r3, #1
 800cf9e:	4413      	add	r3, r2
 800cfa0:	00db      	lsls	r3, r3, #3
 800cfa2:	4a2e      	ldr	r2, [pc, #184]	@ (800d05c <etharp_output_to_arp_index+0x124>)
 800cfa4:	4413      	add	r3, r2
 800cfa6:	3304      	adds	r3, #4
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	68f8      	ldr	r0, [r7, #12]
 800cfac:	f000 fb4c 	bl	800d648 <etharp_request>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d138      	bne.n	800d028 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cfb6:	79fa      	ldrb	r2, [r7, #7]
 800cfb8:	4928      	ldr	r1, [pc, #160]	@ (800d05c <etharp_output_to_arp_index+0x124>)
 800cfba:	4613      	mov	r3, r2
 800cfbc:	005b      	lsls	r3, r3, #1
 800cfbe:	4413      	add	r3, r2
 800cfc0:	00db      	lsls	r3, r3, #3
 800cfc2:	440b      	add	r3, r1
 800cfc4:	3314      	adds	r3, #20
 800cfc6:	2203      	movs	r2, #3
 800cfc8:	701a      	strb	r2, [r3, #0]
 800cfca:	e02d      	b.n	800d028 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800cfcc:	79fa      	ldrb	r2, [r7, #7]
 800cfce:	4923      	ldr	r1, [pc, #140]	@ (800d05c <etharp_output_to_arp_index+0x124>)
 800cfd0:	4613      	mov	r3, r2
 800cfd2:	005b      	lsls	r3, r3, #1
 800cfd4:	4413      	add	r3, r2
 800cfd6:	00db      	lsls	r3, r3, #3
 800cfd8:	440b      	add	r3, r1
 800cfda:	3312      	adds	r3, #18
 800cfdc:	881b      	ldrh	r3, [r3, #0]
 800cfde:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800cfe2:	d321      	bcc.n	800d028 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800cfe4:	79fa      	ldrb	r2, [r7, #7]
 800cfe6:	4613      	mov	r3, r2
 800cfe8:	005b      	lsls	r3, r3, #1
 800cfea:	4413      	add	r3, r2
 800cfec:	00db      	lsls	r3, r3, #3
 800cfee:	4a1b      	ldr	r2, [pc, #108]	@ (800d05c <etharp_output_to_arp_index+0x124>)
 800cff0:	4413      	add	r3, r2
 800cff2:	1d19      	adds	r1, r3, #4
 800cff4:	79fa      	ldrb	r2, [r7, #7]
 800cff6:	4613      	mov	r3, r2
 800cff8:	005b      	lsls	r3, r3, #1
 800cffa:	4413      	add	r3, r2
 800cffc:	00db      	lsls	r3, r3, #3
 800cffe:	3308      	adds	r3, #8
 800d000:	4a16      	ldr	r2, [pc, #88]	@ (800d05c <etharp_output_to_arp_index+0x124>)
 800d002:	4413      	add	r3, r2
 800d004:	3304      	adds	r3, #4
 800d006:	461a      	mov	r2, r3
 800d008:	68f8      	ldr	r0, [r7, #12]
 800d00a:	f000 fafb 	bl	800d604 <etharp_request_dst>
 800d00e:	4603      	mov	r3, r0
 800d010:	2b00      	cmp	r3, #0
 800d012:	d109      	bne.n	800d028 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d014:	79fa      	ldrb	r2, [r7, #7]
 800d016:	4911      	ldr	r1, [pc, #68]	@ (800d05c <etharp_output_to_arp_index+0x124>)
 800d018:	4613      	mov	r3, r2
 800d01a:	005b      	lsls	r3, r3, #1
 800d01c:	4413      	add	r3, r2
 800d01e:	00db      	lsls	r3, r3, #3
 800d020:	440b      	add	r3, r1
 800d022:	3314      	adds	r3, #20
 800d024:	2203      	movs	r2, #3
 800d026:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800d02e:	79fa      	ldrb	r2, [r7, #7]
 800d030:	4613      	mov	r3, r2
 800d032:	005b      	lsls	r3, r3, #1
 800d034:	4413      	add	r3, r2
 800d036:	00db      	lsls	r3, r3, #3
 800d038:	3308      	adds	r3, #8
 800d03a:	4a08      	ldr	r2, [pc, #32]	@ (800d05c <etharp_output_to_arp_index+0x124>)
 800d03c:	4413      	add	r3, r2
 800d03e:	3304      	adds	r3, #4
 800d040:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d044:	9200      	str	r2, [sp, #0]
 800d046:	460a      	mov	r2, r1
 800d048:	68b9      	ldr	r1, [r7, #8]
 800d04a:	68f8      	ldr	r0, [r7, #12]
 800d04c:	f001 fe40 	bl	800ecd0 <ethernet_output>
 800d050:	4603      	mov	r3, r0
}
 800d052:	4618      	mov	r0, r3
 800d054:	3710      	adds	r7, #16
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	200082f8 	.word	0x200082f8
 800d060:	080120c4 	.word	0x080120c4
 800d064:	08012234 	.word	0x08012234
 800d068:	0801213c 	.word	0x0801213c

0800d06c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b08a      	sub	sp, #40	@ 0x28
 800d070:	af02      	add	r7, sp, #8
 800d072:	60f8      	str	r0, [r7, #12]
 800d074:	60b9      	str	r1, [r7, #8]
 800d076:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d106      	bne.n	800d090 <etharp_output+0x24>
 800d082:	4b73      	ldr	r3, [pc, #460]	@ (800d250 <etharp_output+0x1e4>)
 800d084:	f240 321e 	movw	r2, #798	@ 0x31e
 800d088:	4972      	ldr	r1, [pc, #456]	@ (800d254 <etharp_output+0x1e8>)
 800d08a:	4873      	ldr	r0, [pc, #460]	@ (800d258 <etharp_output+0x1ec>)
 800d08c:	f001 ff68 	bl	800ef60 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d106      	bne.n	800d0a4 <etharp_output+0x38>
 800d096:	4b6e      	ldr	r3, [pc, #440]	@ (800d250 <etharp_output+0x1e4>)
 800d098:	f240 321f 	movw	r2, #799	@ 0x31f
 800d09c:	496f      	ldr	r1, [pc, #444]	@ (800d25c <etharp_output+0x1f0>)
 800d09e:	486e      	ldr	r0, [pc, #440]	@ (800d258 <etharp_output+0x1ec>)
 800d0a0:	f001 ff5e 	bl	800ef60 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d106      	bne.n	800d0b8 <etharp_output+0x4c>
 800d0aa:	4b69      	ldr	r3, [pc, #420]	@ (800d250 <etharp_output+0x1e4>)
 800d0ac:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800d0b0:	496b      	ldr	r1, [pc, #428]	@ (800d260 <etharp_output+0x1f4>)
 800d0b2:	4869      	ldr	r0, [pc, #420]	@ (800d258 <etharp_output+0x1ec>)
 800d0b4:	f001 ff54 	bl	800ef60 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	68f9      	ldr	r1, [r7, #12]
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f000 fef8 	bl	800deb4 <ip4_addr_isbroadcast_u32>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d002      	beq.n	800d0d0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d0ca:	4b66      	ldr	r3, [pc, #408]	@ (800d264 <etharp_output+0x1f8>)
 800d0cc:	61fb      	str	r3, [r7, #28]
 800d0ce:	e0af      	b.n	800d230 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d0d8:	2be0      	cmp	r3, #224	@ 0xe0
 800d0da:	d118      	bne.n	800d10e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d0dc:	2301      	movs	r3, #1
 800d0de:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d0e4:	235e      	movs	r3, #94	@ 0x5e
 800d0e6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	3301      	adds	r3, #1
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d0f2:	b2db      	uxtb	r3, r3
 800d0f4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	3302      	adds	r3, #2
 800d0fa:	781b      	ldrb	r3, [r3, #0]
 800d0fc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	3303      	adds	r3, #3
 800d102:	781b      	ldrb	r3, [r3, #0]
 800d104:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d106:	f107 0310 	add.w	r3, r7, #16
 800d10a:	61fb      	str	r3, [r7, #28]
 800d10c:	e090      	b.n	800d230 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681a      	ldr	r2, [r3, #0]
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	3304      	adds	r3, #4
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	405a      	eors	r2, r3
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	3308      	adds	r3, #8
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	4013      	ands	r3, r2
 800d122:	2b00      	cmp	r3, #0
 800d124:	d012      	beq.n	800d14c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d12c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800d130:	4293      	cmp	r3, r2
 800d132:	d00b      	beq.n	800d14c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	330c      	adds	r3, #12
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d003      	beq.n	800d146 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	330c      	adds	r3, #12
 800d142:	61bb      	str	r3, [r7, #24]
 800d144:	e002      	b.n	800d14c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d146:	f06f 0303 	mvn.w	r3, #3
 800d14a:	e07d      	b.n	800d248 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d14c:	4b46      	ldr	r3, [pc, #280]	@ (800d268 <etharp_output+0x1fc>)
 800d14e:	781b      	ldrb	r3, [r3, #0]
 800d150:	4619      	mov	r1, r3
 800d152:	4a46      	ldr	r2, [pc, #280]	@ (800d26c <etharp_output+0x200>)
 800d154:	460b      	mov	r3, r1
 800d156:	005b      	lsls	r3, r3, #1
 800d158:	440b      	add	r3, r1
 800d15a:	00db      	lsls	r3, r3, #3
 800d15c:	4413      	add	r3, r2
 800d15e:	3314      	adds	r3, #20
 800d160:	781b      	ldrb	r3, [r3, #0]
 800d162:	2b01      	cmp	r3, #1
 800d164:	d925      	bls.n	800d1b2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d166:	4b40      	ldr	r3, [pc, #256]	@ (800d268 <etharp_output+0x1fc>)
 800d168:	781b      	ldrb	r3, [r3, #0]
 800d16a:	4619      	mov	r1, r3
 800d16c:	4a3f      	ldr	r2, [pc, #252]	@ (800d26c <etharp_output+0x200>)
 800d16e:	460b      	mov	r3, r1
 800d170:	005b      	lsls	r3, r3, #1
 800d172:	440b      	add	r3, r1
 800d174:	00db      	lsls	r3, r3, #3
 800d176:	4413      	add	r3, r2
 800d178:	3308      	adds	r3, #8
 800d17a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d17c:	68fa      	ldr	r2, [r7, #12]
 800d17e:	429a      	cmp	r2, r3
 800d180:	d117      	bne.n	800d1b2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d182:	69bb      	ldr	r3, [r7, #24]
 800d184:	681a      	ldr	r2, [r3, #0]
 800d186:	4b38      	ldr	r3, [pc, #224]	@ (800d268 <etharp_output+0x1fc>)
 800d188:	781b      	ldrb	r3, [r3, #0]
 800d18a:	4618      	mov	r0, r3
 800d18c:	4937      	ldr	r1, [pc, #220]	@ (800d26c <etharp_output+0x200>)
 800d18e:	4603      	mov	r3, r0
 800d190:	005b      	lsls	r3, r3, #1
 800d192:	4403      	add	r3, r0
 800d194:	00db      	lsls	r3, r3, #3
 800d196:	440b      	add	r3, r1
 800d198:	3304      	adds	r3, #4
 800d19a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d108      	bne.n	800d1b2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d1a0:	4b31      	ldr	r3, [pc, #196]	@ (800d268 <etharp_output+0x1fc>)
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	461a      	mov	r2, r3
 800d1a6:	68b9      	ldr	r1, [r7, #8]
 800d1a8:	68f8      	ldr	r0, [r7, #12]
 800d1aa:	f7ff fec5 	bl	800cf38 <etharp_output_to_arp_index>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	e04a      	b.n	800d248 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	75fb      	strb	r3, [r7, #23]
 800d1b6:	e031      	b.n	800d21c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d1b8:	7dfa      	ldrb	r2, [r7, #23]
 800d1ba:	492c      	ldr	r1, [pc, #176]	@ (800d26c <etharp_output+0x200>)
 800d1bc:	4613      	mov	r3, r2
 800d1be:	005b      	lsls	r3, r3, #1
 800d1c0:	4413      	add	r3, r2
 800d1c2:	00db      	lsls	r3, r3, #3
 800d1c4:	440b      	add	r3, r1
 800d1c6:	3314      	adds	r3, #20
 800d1c8:	781b      	ldrb	r3, [r3, #0]
 800d1ca:	2b01      	cmp	r3, #1
 800d1cc:	d923      	bls.n	800d216 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d1ce:	7dfa      	ldrb	r2, [r7, #23]
 800d1d0:	4926      	ldr	r1, [pc, #152]	@ (800d26c <etharp_output+0x200>)
 800d1d2:	4613      	mov	r3, r2
 800d1d4:	005b      	lsls	r3, r3, #1
 800d1d6:	4413      	add	r3, r2
 800d1d8:	00db      	lsls	r3, r3, #3
 800d1da:	440b      	add	r3, r1
 800d1dc:	3308      	adds	r3, #8
 800d1de:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d1e0:	68fa      	ldr	r2, [r7, #12]
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d117      	bne.n	800d216 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d1e6:	69bb      	ldr	r3, [r7, #24]
 800d1e8:	6819      	ldr	r1, [r3, #0]
 800d1ea:	7dfa      	ldrb	r2, [r7, #23]
 800d1ec:	481f      	ldr	r0, [pc, #124]	@ (800d26c <etharp_output+0x200>)
 800d1ee:	4613      	mov	r3, r2
 800d1f0:	005b      	lsls	r3, r3, #1
 800d1f2:	4413      	add	r3, r2
 800d1f4:	00db      	lsls	r3, r3, #3
 800d1f6:	4403      	add	r3, r0
 800d1f8:	3304      	adds	r3, #4
 800d1fa:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d1fc:	4299      	cmp	r1, r3
 800d1fe:	d10a      	bne.n	800d216 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d200:	4a19      	ldr	r2, [pc, #100]	@ (800d268 <etharp_output+0x1fc>)
 800d202:	7dfb      	ldrb	r3, [r7, #23]
 800d204:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d206:	7dfb      	ldrb	r3, [r7, #23]
 800d208:	461a      	mov	r2, r3
 800d20a:	68b9      	ldr	r1, [r7, #8]
 800d20c:	68f8      	ldr	r0, [r7, #12]
 800d20e:	f7ff fe93 	bl	800cf38 <etharp_output_to_arp_index>
 800d212:	4603      	mov	r3, r0
 800d214:	e018      	b.n	800d248 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d216:	7dfb      	ldrb	r3, [r7, #23]
 800d218:	3301      	adds	r3, #1
 800d21a:	75fb      	strb	r3, [r7, #23]
 800d21c:	7dfb      	ldrb	r3, [r7, #23]
 800d21e:	2b09      	cmp	r3, #9
 800d220:	d9ca      	bls.n	800d1b8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d222:	68ba      	ldr	r2, [r7, #8]
 800d224:	69b9      	ldr	r1, [r7, #24]
 800d226:	68f8      	ldr	r0, [r7, #12]
 800d228:	f000 f822 	bl	800d270 <etharp_query>
 800d22c:	4603      	mov	r3, r0
 800d22e:	e00b      	b.n	800d248 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800d236:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d23a:	9300      	str	r3, [sp, #0]
 800d23c:	69fb      	ldr	r3, [r7, #28]
 800d23e:	68b9      	ldr	r1, [r7, #8]
 800d240:	68f8      	ldr	r0, [r7, #12]
 800d242:	f001 fd45 	bl	800ecd0 <ethernet_output>
 800d246:	4603      	mov	r3, r0
}
 800d248:	4618      	mov	r0, r3
 800d24a:	3720      	adds	r7, #32
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}
 800d250:	080120c4 	.word	0x080120c4
 800d254:	08012214 	.word	0x08012214
 800d258:	0801213c 	.word	0x0801213c
 800d25c:	08012264 	.word	0x08012264
 800d260:	08012204 	.word	0x08012204
 800d264:	08012880 	.word	0x08012880
 800d268:	200083e8 	.word	0x200083e8
 800d26c:	200082f8 	.word	0x200082f8

0800d270 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b08c      	sub	sp, #48	@ 0x30
 800d274:	af02      	add	r7, sp, #8
 800d276:	60f8      	str	r0, [r7, #12]
 800d278:	60b9      	str	r1, [r7, #8]
 800d27a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	3326      	adds	r3, #38	@ 0x26
 800d280:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d282:	23ff      	movs	r3, #255	@ 0xff
 800d284:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800d288:	2300      	movs	r3, #0
 800d28a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	68f9      	ldr	r1, [r7, #12]
 800d292:	4618      	mov	r0, r3
 800d294:	f000 fe0e 	bl	800deb4 <ip4_addr_isbroadcast_u32>
 800d298:	4603      	mov	r3, r0
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d10c      	bne.n	800d2b8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d2a6:	2be0      	cmp	r3, #224	@ 0xe0
 800d2a8:	d006      	beq.n	800d2b8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d003      	beq.n	800d2b8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d102      	bne.n	800d2be <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d2b8:	f06f 030f 	mvn.w	r3, #15
 800d2bc:	e101      	b.n	800d4c2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d2be:	68fa      	ldr	r2, [r7, #12]
 800d2c0:	2101      	movs	r1, #1
 800d2c2:	68b8      	ldr	r0, [r7, #8]
 800d2c4:	f7ff fb60 	bl	800c988 <etharp_find_entry>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d2cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	da02      	bge.n	800d2da <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d2d4:	8a7b      	ldrh	r3, [r7, #18]
 800d2d6:	b25b      	sxtb	r3, r3
 800d2d8:	e0f3      	b.n	800d4c2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d2da:	8a7b      	ldrh	r3, [r7, #18]
 800d2dc:	2b7e      	cmp	r3, #126	@ 0x7e
 800d2de:	d906      	bls.n	800d2ee <etharp_query+0x7e>
 800d2e0:	4b7a      	ldr	r3, [pc, #488]	@ (800d4cc <etharp_query+0x25c>)
 800d2e2:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800d2e6:	497a      	ldr	r1, [pc, #488]	@ (800d4d0 <etharp_query+0x260>)
 800d2e8:	487a      	ldr	r0, [pc, #488]	@ (800d4d4 <etharp_query+0x264>)
 800d2ea:	f001 fe39 	bl	800ef60 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d2ee:	8a7b      	ldrh	r3, [r7, #18]
 800d2f0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d2f2:	7c7a      	ldrb	r2, [r7, #17]
 800d2f4:	4978      	ldr	r1, [pc, #480]	@ (800d4d8 <etharp_query+0x268>)
 800d2f6:	4613      	mov	r3, r2
 800d2f8:	005b      	lsls	r3, r3, #1
 800d2fa:	4413      	add	r3, r2
 800d2fc:	00db      	lsls	r3, r3, #3
 800d2fe:	440b      	add	r3, r1
 800d300:	3314      	adds	r3, #20
 800d302:	781b      	ldrb	r3, [r3, #0]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d115      	bne.n	800d334 <etharp_query+0xc4>
    is_new_entry = 1;
 800d308:	2301      	movs	r3, #1
 800d30a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d30c:	7c7a      	ldrb	r2, [r7, #17]
 800d30e:	4972      	ldr	r1, [pc, #456]	@ (800d4d8 <etharp_query+0x268>)
 800d310:	4613      	mov	r3, r2
 800d312:	005b      	lsls	r3, r3, #1
 800d314:	4413      	add	r3, r2
 800d316:	00db      	lsls	r3, r3, #3
 800d318:	440b      	add	r3, r1
 800d31a:	3314      	adds	r3, #20
 800d31c:	2201      	movs	r2, #1
 800d31e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d320:	7c7a      	ldrb	r2, [r7, #17]
 800d322:	496d      	ldr	r1, [pc, #436]	@ (800d4d8 <etharp_query+0x268>)
 800d324:	4613      	mov	r3, r2
 800d326:	005b      	lsls	r3, r3, #1
 800d328:	4413      	add	r3, r2
 800d32a:	00db      	lsls	r3, r3, #3
 800d32c:	440b      	add	r3, r1
 800d32e:	3308      	adds	r3, #8
 800d330:	68fa      	ldr	r2, [r7, #12]
 800d332:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d334:	7c7a      	ldrb	r2, [r7, #17]
 800d336:	4968      	ldr	r1, [pc, #416]	@ (800d4d8 <etharp_query+0x268>)
 800d338:	4613      	mov	r3, r2
 800d33a:	005b      	lsls	r3, r3, #1
 800d33c:	4413      	add	r3, r2
 800d33e:	00db      	lsls	r3, r3, #3
 800d340:	440b      	add	r3, r1
 800d342:	3314      	adds	r3, #20
 800d344:	781b      	ldrb	r3, [r3, #0]
 800d346:	2b01      	cmp	r3, #1
 800d348:	d011      	beq.n	800d36e <etharp_query+0xfe>
 800d34a:	7c7a      	ldrb	r2, [r7, #17]
 800d34c:	4962      	ldr	r1, [pc, #392]	@ (800d4d8 <etharp_query+0x268>)
 800d34e:	4613      	mov	r3, r2
 800d350:	005b      	lsls	r3, r3, #1
 800d352:	4413      	add	r3, r2
 800d354:	00db      	lsls	r3, r3, #3
 800d356:	440b      	add	r3, r1
 800d358:	3314      	adds	r3, #20
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	2b01      	cmp	r3, #1
 800d35e:	d806      	bhi.n	800d36e <etharp_query+0xfe>
 800d360:	4b5a      	ldr	r3, [pc, #360]	@ (800d4cc <etharp_query+0x25c>)
 800d362:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800d366:	495d      	ldr	r1, [pc, #372]	@ (800d4dc <etharp_query+0x26c>)
 800d368:	485a      	ldr	r0, [pc, #360]	@ (800d4d4 <etharp_query+0x264>)
 800d36a:	f001 fdf9 	bl	800ef60 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d36e:	6a3b      	ldr	r3, [r7, #32]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d102      	bne.n	800d37a <etharp_query+0x10a>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d10c      	bne.n	800d394 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d37a:	68b9      	ldr	r1, [r7, #8]
 800d37c:	68f8      	ldr	r0, [r7, #12]
 800d37e:	f000 f963 	bl	800d648 <etharp_request>
 800d382:	4603      	mov	r3, r0
 800d384:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d102      	bne.n	800d394 <etharp_query+0x124>
      return result;
 800d38e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d392:	e096      	b.n	800d4c2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d106      	bne.n	800d3a8 <etharp_query+0x138>
 800d39a:	4b4c      	ldr	r3, [pc, #304]	@ (800d4cc <etharp_query+0x25c>)
 800d39c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800d3a0:	494f      	ldr	r1, [pc, #316]	@ (800d4e0 <etharp_query+0x270>)
 800d3a2:	484c      	ldr	r0, [pc, #304]	@ (800d4d4 <etharp_query+0x264>)
 800d3a4:	f001 fddc 	bl	800ef60 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d3a8:	7c7a      	ldrb	r2, [r7, #17]
 800d3aa:	494b      	ldr	r1, [pc, #300]	@ (800d4d8 <etharp_query+0x268>)
 800d3ac:	4613      	mov	r3, r2
 800d3ae:	005b      	lsls	r3, r3, #1
 800d3b0:	4413      	add	r3, r2
 800d3b2:	00db      	lsls	r3, r3, #3
 800d3b4:	440b      	add	r3, r1
 800d3b6:	3314      	adds	r3, #20
 800d3b8:	781b      	ldrb	r3, [r3, #0]
 800d3ba:	2b01      	cmp	r3, #1
 800d3bc:	d917      	bls.n	800d3ee <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d3be:	4a49      	ldr	r2, [pc, #292]	@ (800d4e4 <etharp_query+0x274>)
 800d3c0:	7c7b      	ldrb	r3, [r7, #17]
 800d3c2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d3c4:	7c7a      	ldrb	r2, [r7, #17]
 800d3c6:	4613      	mov	r3, r2
 800d3c8:	005b      	lsls	r3, r3, #1
 800d3ca:	4413      	add	r3, r2
 800d3cc:	00db      	lsls	r3, r3, #3
 800d3ce:	3308      	adds	r3, #8
 800d3d0:	4a41      	ldr	r2, [pc, #260]	@ (800d4d8 <etharp_query+0x268>)
 800d3d2:	4413      	add	r3, r2
 800d3d4:	3304      	adds	r3, #4
 800d3d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d3da:	9200      	str	r2, [sp, #0]
 800d3dc:	697a      	ldr	r2, [r7, #20]
 800d3de:	6879      	ldr	r1, [r7, #4]
 800d3e0:	68f8      	ldr	r0, [r7, #12]
 800d3e2:	f001 fc75 	bl	800ecd0 <ethernet_output>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d3ec:	e067      	b.n	800d4be <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d3ee:	7c7a      	ldrb	r2, [r7, #17]
 800d3f0:	4939      	ldr	r1, [pc, #228]	@ (800d4d8 <etharp_query+0x268>)
 800d3f2:	4613      	mov	r3, r2
 800d3f4:	005b      	lsls	r3, r3, #1
 800d3f6:	4413      	add	r3, r2
 800d3f8:	00db      	lsls	r3, r3, #3
 800d3fa:	440b      	add	r3, r1
 800d3fc:	3314      	adds	r3, #20
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	2b01      	cmp	r3, #1
 800d402:	d15c      	bne.n	800d4be <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d404:	2300      	movs	r3, #0
 800d406:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d40c:	e01c      	b.n	800d448 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d40e:	69fb      	ldr	r3, [r7, #28]
 800d410:	895a      	ldrh	r2, [r3, #10]
 800d412:	69fb      	ldr	r3, [r7, #28]
 800d414:	891b      	ldrh	r3, [r3, #8]
 800d416:	429a      	cmp	r2, r3
 800d418:	d10a      	bne.n	800d430 <etharp_query+0x1c0>
 800d41a:	69fb      	ldr	r3, [r7, #28]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d006      	beq.n	800d430 <etharp_query+0x1c0>
 800d422:	4b2a      	ldr	r3, [pc, #168]	@ (800d4cc <etharp_query+0x25c>)
 800d424:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800d428:	492f      	ldr	r1, [pc, #188]	@ (800d4e8 <etharp_query+0x278>)
 800d42a:	482a      	ldr	r0, [pc, #168]	@ (800d4d4 <etharp_query+0x264>)
 800d42c:	f001 fd98 	bl	800ef60 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d430:	69fb      	ldr	r3, [r7, #28]
 800d432:	7b1b      	ldrb	r3, [r3, #12]
 800d434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d002      	beq.n	800d442 <etharp_query+0x1d2>
        copy_needed = 1;
 800d43c:	2301      	movs	r3, #1
 800d43e:	61bb      	str	r3, [r7, #24]
        break;
 800d440:	e005      	b.n	800d44e <etharp_query+0x1de>
      }
      p = p->next;
 800d442:	69fb      	ldr	r3, [r7, #28]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d448:	69fb      	ldr	r3, [r7, #28]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d1df      	bne.n	800d40e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d44e:	69bb      	ldr	r3, [r7, #24]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d007      	beq.n	800d464 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d454:	687a      	ldr	r2, [r7, #4]
 800d456:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800d45a:	200e      	movs	r0, #14
 800d45c:	f7f9 fa7e 	bl	800695c <pbuf_clone>
 800d460:	61f8      	str	r0, [r7, #28]
 800d462:	e004      	b.n	800d46e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d468:	69f8      	ldr	r0, [r7, #28]
 800d46a:	f7f9 f8ab 	bl	80065c4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d46e:	69fb      	ldr	r3, [r7, #28]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d021      	beq.n	800d4b8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d474:	7c7a      	ldrb	r2, [r7, #17]
 800d476:	4918      	ldr	r1, [pc, #96]	@ (800d4d8 <etharp_query+0x268>)
 800d478:	4613      	mov	r3, r2
 800d47a:	005b      	lsls	r3, r3, #1
 800d47c:	4413      	add	r3, r2
 800d47e:	00db      	lsls	r3, r3, #3
 800d480:	440b      	add	r3, r1
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d00a      	beq.n	800d49e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d488:	7c7a      	ldrb	r2, [r7, #17]
 800d48a:	4913      	ldr	r1, [pc, #76]	@ (800d4d8 <etharp_query+0x268>)
 800d48c:	4613      	mov	r3, r2
 800d48e:	005b      	lsls	r3, r3, #1
 800d490:	4413      	add	r3, r2
 800d492:	00db      	lsls	r3, r3, #3
 800d494:	440b      	add	r3, r1
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4618      	mov	r0, r3
 800d49a:	f7f8 fff3 	bl	8006484 <pbuf_free>
      }
      arp_table[i].q = p;
 800d49e:	7c7a      	ldrb	r2, [r7, #17]
 800d4a0:	490d      	ldr	r1, [pc, #52]	@ (800d4d8 <etharp_query+0x268>)
 800d4a2:	4613      	mov	r3, r2
 800d4a4:	005b      	lsls	r3, r3, #1
 800d4a6:	4413      	add	r3, r2
 800d4a8:	00db      	lsls	r3, r3, #3
 800d4aa:	440b      	add	r3, r1
 800d4ac:	69fa      	ldr	r2, [r7, #28]
 800d4ae:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d4b6:	e002      	b.n	800d4be <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d4b8:	23ff      	movs	r3, #255	@ 0xff
 800d4ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800d4be:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3728      	adds	r7, #40	@ 0x28
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	080120c4 	.word	0x080120c4
 800d4d0:	08012270 	.word	0x08012270
 800d4d4:	0801213c 	.word	0x0801213c
 800d4d8:	200082f8 	.word	0x200082f8
 800d4dc:	08012280 	.word	0x08012280
 800d4e0:	08012264 	.word	0x08012264
 800d4e4:	200083e8 	.word	0x200083e8
 800d4e8:	080122a8 	.word	0x080122a8

0800d4ec <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b08a      	sub	sp, #40	@ 0x28
 800d4f0:	af02      	add	r7, sp, #8
 800d4f2:	60f8      	str	r0, [r7, #12]
 800d4f4:	60b9      	str	r1, [r7, #8]
 800d4f6:	607a      	str	r2, [r7, #4]
 800d4f8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d106      	bne.n	800d512 <etharp_raw+0x26>
 800d504:	4b3a      	ldr	r3, [pc, #232]	@ (800d5f0 <etharp_raw+0x104>)
 800d506:	f240 4257 	movw	r2, #1111	@ 0x457
 800d50a:	493a      	ldr	r1, [pc, #232]	@ (800d5f4 <etharp_raw+0x108>)
 800d50c:	483a      	ldr	r0, [pc, #232]	@ (800d5f8 <etharp_raw+0x10c>)
 800d50e:	f001 fd27 	bl	800ef60 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d512:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d516:	211c      	movs	r1, #28
 800d518:	200e      	movs	r0, #14
 800d51a:	f7f8 fccf 	bl	8005ebc <pbuf_alloc>
 800d51e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d520:	69bb      	ldr	r3, [r7, #24]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d102      	bne.n	800d52c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d526:	f04f 33ff 	mov.w	r3, #4294967295
 800d52a:	e05d      	b.n	800d5e8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d52c:	69bb      	ldr	r3, [r7, #24]
 800d52e:	895b      	ldrh	r3, [r3, #10]
 800d530:	2b1b      	cmp	r3, #27
 800d532:	d806      	bhi.n	800d542 <etharp_raw+0x56>
 800d534:	4b2e      	ldr	r3, [pc, #184]	@ (800d5f0 <etharp_raw+0x104>)
 800d536:	f240 4262 	movw	r2, #1122	@ 0x462
 800d53a:	4930      	ldr	r1, [pc, #192]	@ (800d5fc <etharp_raw+0x110>)
 800d53c:	482e      	ldr	r0, [pc, #184]	@ (800d5f8 <etharp_raw+0x10c>)
 800d53e:	f001 fd0f 	bl	800ef60 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d542:	69bb      	ldr	r3, [r7, #24]
 800d544:	685b      	ldr	r3, [r3, #4]
 800d546:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d548:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d54a:	4618      	mov	r0, r3
 800d54c:	f7f7 fc3c 	bl	8004dc8 <lwip_htons>
 800d550:	4603      	mov	r3, r0
 800d552:	461a      	mov	r2, r3
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d55e:	2b06      	cmp	r3, #6
 800d560:	d006      	beq.n	800d570 <etharp_raw+0x84>
 800d562:	4b23      	ldr	r3, [pc, #140]	@ (800d5f0 <etharp_raw+0x104>)
 800d564:	f240 4269 	movw	r2, #1129	@ 0x469
 800d568:	4925      	ldr	r1, [pc, #148]	@ (800d600 <etharp_raw+0x114>)
 800d56a:	4823      	ldr	r0, [pc, #140]	@ (800d5f8 <etharp_raw+0x10c>)
 800d56c:	f001 fcf8 	bl	800ef60 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	3308      	adds	r3, #8
 800d574:	2206      	movs	r2, #6
 800d576:	6839      	ldr	r1, [r7, #0]
 800d578:	4618      	mov	r0, r3
 800d57a:	f001 fdcc 	bl	800f116 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	3312      	adds	r3, #18
 800d582:	2206      	movs	r2, #6
 800d584:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d586:	4618      	mov	r0, r3
 800d588:	f001 fdc5 	bl	800f116 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	330e      	adds	r3, #14
 800d590:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d592:	6812      	ldr	r2, [r2, #0]
 800d594:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	3318      	adds	r3, #24
 800d59a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d59c:	6812      	ldr	r2, [r2, #0]
 800d59e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	701a      	strb	r2, [r3, #0]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	f042 0201 	orr.w	r2, r2, #1
 800d5ac:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	f042 0208 	orr.w	r2, r2, #8
 800d5b6:	709a      	strb	r2, [r3, #2]
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	2206      	movs	r2, #6
 800d5c0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	2204      	movs	r2, #4
 800d5c6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d5c8:	f640 0306 	movw	r3, #2054	@ 0x806
 800d5cc:	9300      	str	r3, [sp, #0]
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	68ba      	ldr	r2, [r7, #8]
 800d5d2:	69b9      	ldr	r1, [r7, #24]
 800d5d4:	68f8      	ldr	r0, [r7, #12]
 800d5d6:	f001 fb7b 	bl	800ecd0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d5da:	69b8      	ldr	r0, [r7, #24]
 800d5dc:	f7f8 ff52 	bl	8006484 <pbuf_free>
  p = NULL;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d5e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3720      	adds	r7, #32
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}
 800d5f0:	080120c4 	.word	0x080120c4
 800d5f4:	08012214 	.word	0x08012214
 800d5f8:	0801213c 	.word	0x0801213c
 800d5fc:	080122c4 	.word	0x080122c4
 800d600:	080122f8 	.word	0x080122f8

0800d604 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b088      	sub	sp, #32
 800d608:	af04      	add	r7, sp, #16
 800d60a:	60f8      	str	r0, [r7, #12]
 800d60c:	60b9      	str	r1, [r7, #8]
 800d60e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d620:	2201      	movs	r2, #1
 800d622:	9203      	str	r2, [sp, #12]
 800d624:	68ba      	ldr	r2, [r7, #8]
 800d626:	9202      	str	r2, [sp, #8]
 800d628:	4a06      	ldr	r2, [pc, #24]	@ (800d644 <etharp_request_dst+0x40>)
 800d62a:	9201      	str	r2, [sp, #4]
 800d62c:	9300      	str	r3, [sp, #0]
 800d62e:	4603      	mov	r3, r0
 800d630:	687a      	ldr	r2, [r7, #4]
 800d632:	68f8      	ldr	r0, [r7, #12]
 800d634:	f7ff ff5a 	bl	800d4ec <etharp_raw>
 800d638:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3710      	adds	r7, #16
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}
 800d642:	bf00      	nop
 800d644:	08012888 	.word	0x08012888

0800d648 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b082      	sub	sp, #8
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
 800d650:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d652:	4a05      	ldr	r2, [pc, #20]	@ (800d668 <etharp_request+0x20>)
 800d654:	6839      	ldr	r1, [r7, #0]
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f7ff ffd4 	bl	800d604 <etharp_request_dst>
 800d65c:	4603      	mov	r3, r0
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3708      	adds	r7, #8
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	08012880 	.word	0x08012880

0800d66c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b08e      	sub	sp, #56	@ 0x38
 800d670:	af04      	add	r7, sp, #16
 800d672:	6078      	str	r0, [r7, #4]
 800d674:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d676:	4b79      	ldr	r3, [pc, #484]	@ (800d85c <icmp_input+0x1f0>)
 800d678:	689b      	ldr	r3, [r3, #8]
 800d67a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d67e:	781b      	ldrb	r3, [r3, #0]
 800d680:	f003 030f 	and.w	r3, r3, #15
 800d684:	b2db      	uxtb	r3, r3
 800d686:	009b      	lsls	r3, r3, #2
 800d688:	b2db      	uxtb	r3, r3
 800d68a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800d68c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d68e:	2b13      	cmp	r3, #19
 800d690:	f240 80cd 	bls.w	800d82e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	895b      	ldrh	r3, [r3, #10]
 800d698:	2b03      	cmp	r3, #3
 800d69a:	f240 80ca 	bls.w	800d832 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	685b      	ldr	r3, [r3, #4]
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d6a8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	f000 80b7 	beq.w	800d820 <icmp_input+0x1b4>
 800d6b2:	2b08      	cmp	r3, #8
 800d6b4:	f040 80b7 	bne.w	800d826 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d6b8:	4b69      	ldr	r3, [pc, #420]	@ (800d860 <icmp_input+0x1f4>)
 800d6ba:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d6bc:	4b67      	ldr	r3, [pc, #412]	@ (800d85c <icmp_input+0x1f0>)
 800d6be:	695b      	ldr	r3, [r3, #20]
 800d6c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d6c4:	2be0      	cmp	r3, #224	@ 0xe0
 800d6c6:	f000 80bb 	beq.w	800d840 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d6ca:	4b64      	ldr	r3, [pc, #400]	@ (800d85c <icmp_input+0x1f0>)
 800d6cc:	695b      	ldr	r3, [r3, #20]
 800d6ce:	4a63      	ldr	r2, [pc, #396]	@ (800d85c <icmp_input+0x1f0>)
 800d6d0:	6812      	ldr	r2, [r2, #0]
 800d6d2:	4611      	mov	r1, r2
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f000 fbed 	bl	800deb4 <ip4_addr_isbroadcast_u32>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	f040 80b1 	bne.w	800d844 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	891b      	ldrh	r3, [r3, #8]
 800d6e6:	2b07      	cmp	r3, #7
 800d6e8:	f240 80a5 	bls.w	800d836 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d6ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d6ee:	330e      	adds	r3, #14
 800d6f0:	4619      	mov	r1, r3
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f7f8 fe30 	bl	8006358 <pbuf_add_header>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d04b      	beq.n	800d796 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	891a      	ldrh	r2, [r3, #8]
 800d702:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d704:	4413      	add	r3, r2
 800d706:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	891b      	ldrh	r3, [r3, #8]
 800d70c:	8b7a      	ldrh	r2, [r7, #26]
 800d70e:	429a      	cmp	r2, r3
 800d710:	f0c0 809a 	bcc.w	800d848 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d714:	8b7b      	ldrh	r3, [r7, #26]
 800d716:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d71a:	4619      	mov	r1, r3
 800d71c:	200e      	movs	r0, #14
 800d71e:	f7f8 fbcd 	bl	8005ebc <pbuf_alloc>
 800d722:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	2b00      	cmp	r3, #0
 800d728:	f000 8090 	beq.w	800d84c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d72c:	697b      	ldr	r3, [r7, #20]
 800d72e:	895b      	ldrh	r3, [r3, #10]
 800d730:	461a      	mov	r2, r3
 800d732:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d734:	3308      	adds	r3, #8
 800d736:	429a      	cmp	r2, r3
 800d738:	d203      	bcs.n	800d742 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d73a:	6978      	ldr	r0, [r7, #20]
 800d73c:	f7f8 fea2 	bl	8006484 <pbuf_free>
          goto icmperr;
 800d740:	e085      	b.n	800d84e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	685b      	ldr	r3, [r3, #4]
 800d746:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d748:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d74a:	4618      	mov	r0, r3
 800d74c:	f001 fce3 	bl	800f116 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d750:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d752:	4619      	mov	r1, r3
 800d754:	6978      	ldr	r0, [r7, #20]
 800d756:	f7f8 fe0f 	bl	8006378 <pbuf_remove_header>
 800d75a:	4603      	mov	r3, r0
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d009      	beq.n	800d774 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d760:	4b40      	ldr	r3, [pc, #256]	@ (800d864 <icmp_input+0x1f8>)
 800d762:	22b6      	movs	r2, #182	@ 0xb6
 800d764:	4940      	ldr	r1, [pc, #256]	@ (800d868 <icmp_input+0x1fc>)
 800d766:	4841      	ldr	r0, [pc, #260]	@ (800d86c <icmp_input+0x200>)
 800d768:	f001 fbfa 	bl	800ef60 <iprintf>
          pbuf_free(r);
 800d76c:	6978      	ldr	r0, [r7, #20]
 800d76e:	f7f8 fe89 	bl	8006484 <pbuf_free>
          goto icmperr;
 800d772:	e06c      	b.n	800d84e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d774:	6879      	ldr	r1, [r7, #4]
 800d776:	6978      	ldr	r0, [r7, #20]
 800d778:	f7f8 ffac 	bl	80066d4 <pbuf_copy>
 800d77c:	4603      	mov	r3, r0
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d003      	beq.n	800d78a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d782:	6978      	ldr	r0, [r7, #20]
 800d784:	f7f8 fe7e 	bl	8006484 <pbuf_free>
          goto icmperr;
 800d788:	e061      	b.n	800d84e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f7f8 fe7a 	bl	8006484 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d790:	697b      	ldr	r3, [r7, #20]
 800d792:	607b      	str	r3, [r7, #4]
 800d794:	e00f      	b.n	800d7b6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d796:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d798:	330e      	adds	r3, #14
 800d79a:	4619      	mov	r1, r3
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f7f8 fdeb 	bl	8006378 <pbuf_remove_header>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d006      	beq.n	800d7b6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d7a8:	4b2e      	ldr	r3, [pc, #184]	@ (800d864 <icmp_input+0x1f8>)
 800d7aa:	22c7      	movs	r2, #199	@ 0xc7
 800d7ac:	4930      	ldr	r1, [pc, #192]	@ (800d870 <icmp_input+0x204>)
 800d7ae:	482f      	ldr	r0, [pc, #188]	@ (800d86c <icmp_input+0x200>)
 800d7b0:	f001 fbd6 	bl	800ef60 <iprintf>
          goto icmperr;
 800d7b4:	e04b      	b.n	800d84e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d7bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d7be:	4619      	mov	r1, r3
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f7f8 fdc9 	bl	8006358 <pbuf_add_header>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d12b      	bne.n	800d824 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	685b      	ldr	r3, [r3, #4]
 800d7d0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d7d2:	69fb      	ldr	r3, [r7, #28]
 800d7d4:	681a      	ldr	r2, [r3, #0]
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d7da:	4b20      	ldr	r3, [pc, #128]	@ (800d85c <icmp_input+0x1f0>)
 800d7dc:	691a      	ldr	r2, [r3, #16]
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d7e8:	693b      	ldr	r3, [r7, #16]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	709a      	strb	r2, [r3, #2]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	22ff      	movs	r2, #255	@ 0xff
 800d7f6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	729a      	strb	r2, [r3, #10]
 800d7fe:	2200      	movs	r2, #0
 800d800:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	9302      	str	r3, [sp, #8]
 800d806:	2301      	movs	r3, #1
 800d808:	9301      	str	r3, [sp, #4]
 800d80a:	2300      	movs	r3, #0
 800d80c:	9300      	str	r3, [sp, #0]
 800d80e:	23ff      	movs	r3, #255	@ 0xff
 800d810:	2200      	movs	r2, #0
 800d812:	69f9      	ldr	r1, [r7, #28]
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f000 fa75 	bl	800dd04 <ip4_output_if>
 800d81a:	4603      	mov	r3, r0
 800d81c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d81e:	e001      	b.n	800d824 <icmp_input+0x1b8>
      break;
 800d820:	bf00      	nop
 800d822:	e000      	b.n	800d826 <icmp_input+0x1ba>
      break;
 800d824:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f7f8 fe2c 	bl	8006484 <pbuf_free>
  return;
 800d82c:	e013      	b.n	800d856 <icmp_input+0x1ea>
    goto lenerr;
 800d82e:	bf00      	nop
 800d830:	e002      	b.n	800d838 <icmp_input+0x1cc>
    goto lenerr;
 800d832:	bf00      	nop
 800d834:	e000      	b.n	800d838 <icmp_input+0x1cc>
        goto lenerr;
 800d836:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f7f8 fe23 	bl	8006484 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d83e:	e00a      	b.n	800d856 <icmp_input+0x1ea>
        goto icmperr;
 800d840:	bf00      	nop
 800d842:	e004      	b.n	800d84e <icmp_input+0x1e2>
        goto icmperr;
 800d844:	bf00      	nop
 800d846:	e002      	b.n	800d84e <icmp_input+0x1e2>
          goto icmperr;
 800d848:	bf00      	nop
 800d84a:	e000      	b.n	800d84e <icmp_input+0x1e2>
          goto icmperr;
 800d84c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f7f8 fe18 	bl	8006484 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d854:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d856:	3728      	adds	r7, #40	@ 0x28
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}
 800d85c:	20004d28 	.word	0x20004d28
 800d860:	20004d3c 	.word	0x20004d3c
 800d864:	0801233c 	.word	0x0801233c
 800d868:	08012374 	.word	0x08012374
 800d86c:	080123ac 	.word	0x080123ac
 800d870:	080123d4 	.word	0x080123d4

0800d874 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b082      	sub	sp, #8
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
 800d87c:	460b      	mov	r3, r1
 800d87e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d880:	78fb      	ldrb	r3, [r7, #3]
 800d882:	461a      	mov	r2, r3
 800d884:	2103      	movs	r1, #3
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f000 f814 	bl	800d8b4 <icmp_send_response>
}
 800d88c:	bf00      	nop
 800d88e:	3708      	adds	r7, #8
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}

0800d894 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b082      	sub	sp, #8
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	460b      	mov	r3, r1
 800d89e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d8a0:	78fb      	ldrb	r3, [r7, #3]
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	210b      	movs	r1, #11
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f000 f804 	bl	800d8b4 <icmp_send_response>
}
 800d8ac:	bf00      	nop
 800d8ae:	3708      	adds	r7, #8
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}

0800d8b4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b08c      	sub	sp, #48	@ 0x30
 800d8b8:	af04      	add	r7, sp, #16
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	460b      	mov	r3, r1
 800d8be:	70fb      	strb	r3, [r7, #3]
 800d8c0:	4613      	mov	r3, r2
 800d8c2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d8c4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d8c8:	2124      	movs	r1, #36	@ 0x24
 800d8ca:	2022      	movs	r0, #34	@ 0x22
 800d8cc:	f7f8 faf6 	bl	8005ebc <pbuf_alloc>
 800d8d0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d8d2:	69fb      	ldr	r3, [r7, #28]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d04c      	beq.n	800d972 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d8d8:	69fb      	ldr	r3, [r7, #28]
 800d8da:	895b      	ldrh	r3, [r3, #10]
 800d8dc:	2b23      	cmp	r3, #35	@ 0x23
 800d8de:	d806      	bhi.n	800d8ee <icmp_send_response+0x3a>
 800d8e0:	4b26      	ldr	r3, [pc, #152]	@ (800d97c <icmp_send_response+0xc8>)
 800d8e2:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800d8e6:	4926      	ldr	r1, [pc, #152]	@ (800d980 <icmp_send_response+0xcc>)
 800d8e8:	4826      	ldr	r0, [pc, #152]	@ (800d984 <icmp_send_response+0xd0>)
 800d8ea:	f001 fb39 	bl	800ef60 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	685b      	ldr	r3, [r3, #4]
 800d8f2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d8f4:	69fb      	ldr	r3, [r7, #28]
 800d8f6:	685b      	ldr	r3, [r3, #4]
 800d8f8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	78fa      	ldrb	r2, [r7, #3]
 800d8fe:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d900:	697b      	ldr	r3, [r7, #20]
 800d902:	78ba      	ldrb	r2, [r7, #2]
 800d904:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	2200      	movs	r2, #0
 800d90a:	711a      	strb	r2, [r3, #4]
 800d90c:	2200      	movs	r2, #0
 800d90e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	2200      	movs	r2, #0
 800d914:	719a      	strb	r2, [r3, #6]
 800d916:	2200      	movs	r2, #0
 800d918:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d91a:	69fb      	ldr	r3, [r7, #28]
 800d91c:	685b      	ldr	r3, [r3, #4]
 800d91e:	f103 0008 	add.w	r0, r3, #8
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	685b      	ldr	r3, [r3, #4]
 800d926:	221c      	movs	r2, #28
 800d928:	4619      	mov	r1, r3
 800d92a:	f001 fbf4 	bl	800f116 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d92e:	69bb      	ldr	r3, [r7, #24]
 800d930:	68db      	ldr	r3, [r3, #12]
 800d932:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d934:	f107 030c 	add.w	r3, r7, #12
 800d938:	4618      	mov	r0, r3
 800d93a:	f000 f825 	bl	800d988 <ip4_route>
 800d93e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d011      	beq.n	800d96a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	2200      	movs	r2, #0
 800d94a:	709a      	strb	r2, [r3, #2]
 800d94c:	2200      	movs	r2, #0
 800d94e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d950:	f107 020c 	add.w	r2, r7, #12
 800d954:	693b      	ldr	r3, [r7, #16]
 800d956:	9302      	str	r3, [sp, #8]
 800d958:	2301      	movs	r3, #1
 800d95a:	9301      	str	r3, [sp, #4]
 800d95c:	2300      	movs	r3, #0
 800d95e:	9300      	str	r3, [sp, #0]
 800d960:	23ff      	movs	r3, #255	@ 0xff
 800d962:	2100      	movs	r1, #0
 800d964:	69f8      	ldr	r0, [r7, #28]
 800d966:	f000 f9cd 	bl	800dd04 <ip4_output_if>
  }
  pbuf_free(q);
 800d96a:	69f8      	ldr	r0, [r7, #28]
 800d96c:	f7f8 fd8a 	bl	8006484 <pbuf_free>
 800d970:	e000      	b.n	800d974 <icmp_send_response+0xc0>
    return;
 800d972:	bf00      	nop
}
 800d974:	3720      	adds	r7, #32
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop
 800d97c:	0801233c 	.word	0x0801233c
 800d980:	08012408 	.word	0x08012408
 800d984:	080123ac 	.word	0x080123ac

0800d988 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d988:	b480      	push	{r7}
 800d98a:	b085      	sub	sp, #20
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d990:	4b33      	ldr	r3, [pc, #204]	@ (800da60 <ip4_route+0xd8>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	60fb      	str	r3, [r7, #12]
 800d996:	e036      	b.n	800da06 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d99e:	f003 0301 	and.w	r3, r3, #1
 800d9a2:	b2db      	uxtb	r3, r3
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d02b      	beq.n	800da00 <ip4_route+0x78>
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d9ae:	089b      	lsrs	r3, r3, #2
 800d9b0:	f003 0301 	and.w	r3, r3, #1
 800d9b4:	b2db      	uxtb	r3, r3
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d022      	beq.n	800da00 <ip4_route+0x78>
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	3304      	adds	r3, #4
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d01d      	beq.n	800da00 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681a      	ldr	r2, [r3, #0]
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	3304      	adds	r3, #4
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	405a      	eors	r2, r3
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	3308      	adds	r3, #8
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	4013      	ands	r3, r2
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d101      	bne.n	800d9e0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	e038      	b.n	800da52 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d9e6:	f003 0302 	and.w	r3, r3, #2
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d108      	bne.n	800da00 <ip4_route+0x78>
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681a      	ldr	r2, [r3, #0]
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	330c      	adds	r3, #12
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	d101      	bne.n	800da00 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	e028      	b.n	800da52 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	60fb      	str	r3, [r7, #12]
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d1c5      	bne.n	800d998 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800da0c:	4b15      	ldr	r3, [pc, #84]	@ (800da64 <ip4_route+0xdc>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d01a      	beq.n	800da4a <ip4_route+0xc2>
 800da14:	4b13      	ldr	r3, [pc, #76]	@ (800da64 <ip4_route+0xdc>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800da1c:	f003 0301 	and.w	r3, r3, #1
 800da20:	2b00      	cmp	r3, #0
 800da22:	d012      	beq.n	800da4a <ip4_route+0xc2>
 800da24:	4b0f      	ldr	r3, [pc, #60]	@ (800da64 <ip4_route+0xdc>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800da2c:	f003 0304 	and.w	r3, r3, #4
 800da30:	2b00      	cmp	r3, #0
 800da32:	d00a      	beq.n	800da4a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800da34:	4b0b      	ldr	r3, [pc, #44]	@ (800da64 <ip4_route+0xdc>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	3304      	adds	r3, #4
 800da3a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d004      	beq.n	800da4a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	b2db      	uxtb	r3, r3
 800da46:	2b7f      	cmp	r3, #127	@ 0x7f
 800da48:	d101      	bne.n	800da4e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800da4a:	2300      	movs	r3, #0
 800da4c:	e001      	b.n	800da52 <ip4_route+0xca>
  }

  return netif_default;
 800da4e:	4b05      	ldr	r3, [pc, #20]	@ (800da64 <ip4_route+0xdc>)
 800da50:	681b      	ldr	r3, [r3, #0]
}
 800da52:	4618      	mov	r0, r3
 800da54:	3714      	adds	r7, #20
 800da56:	46bd      	mov	sp, r7
 800da58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5c:	4770      	bx	lr
 800da5e:	bf00      	nop
 800da60:	2000828c 	.word	0x2000828c
 800da64:	20008290 	.word	0x20008290

0800da68 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b082      	sub	sp, #8
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800da76:	f003 0301 	and.w	r3, r3, #1
 800da7a:	b2db      	uxtb	r3, r3
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d016      	beq.n	800daae <ip4_input_accept+0x46>
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	3304      	adds	r3, #4
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d011      	beq.n	800daae <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800da8a:	4b0b      	ldr	r3, [pc, #44]	@ (800dab8 <ip4_input_accept+0x50>)
 800da8c:	695a      	ldr	r2, [r3, #20]
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	3304      	adds	r3, #4
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	429a      	cmp	r2, r3
 800da96:	d008      	beq.n	800daaa <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800da98:	4b07      	ldr	r3, [pc, #28]	@ (800dab8 <ip4_input_accept+0x50>)
 800da9a:	695b      	ldr	r3, [r3, #20]
 800da9c:	6879      	ldr	r1, [r7, #4]
 800da9e:	4618      	mov	r0, r3
 800daa0:	f000 fa08 	bl	800deb4 <ip4_addr_isbroadcast_u32>
 800daa4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d001      	beq.n	800daae <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800daaa:	2301      	movs	r3, #1
 800daac:	e000      	b.n	800dab0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800daae:	2300      	movs	r3, #0
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3708      	adds	r7, #8
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}
 800dab8:	20004d28 	.word	0x20004d28

0800dabc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b086      	sub	sp, #24
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
 800dac4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	685b      	ldr	r3, [r3, #4]
 800daca:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	781b      	ldrb	r3, [r3, #0]
 800dad0:	091b      	lsrs	r3, r3, #4
 800dad2:	b2db      	uxtb	r3, r3
 800dad4:	2b04      	cmp	r3, #4
 800dad6:	d004      	beq.n	800dae2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f7f8 fcd3 	bl	8006484 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800dade:	2300      	movs	r3, #0
 800dae0:	e107      	b.n	800dcf2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	781b      	ldrb	r3, [r3, #0]
 800dae6:	f003 030f 	and.w	r3, r3, #15
 800daea:	b2db      	uxtb	r3, r3
 800daec:	009b      	lsls	r3, r3, #2
 800daee:	b2db      	uxtb	r3, r3
 800daf0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	885b      	ldrh	r3, [r3, #2]
 800daf6:	b29b      	uxth	r3, r3
 800daf8:	4618      	mov	r0, r3
 800dafa:	f7f7 f965 	bl	8004dc8 <lwip_htons>
 800dafe:	4603      	mov	r3, r0
 800db00:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	891b      	ldrh	r3, [r3, #8]
 800db06:	89ba      	ldrh	r2, [r7, #12]
 800db08:	429a      	cmp	r2, r3
 800db0a:	d204      	bcs.n	800db16 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800db0c:	89bb      	ldrh	r3, [r7, #12]
 800db0e:	4619      	mov	r1, r3
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f7f8 fb31 	bl	8006178 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	895b      	ldrh	r3, [r3, #10]
 800db1a:	89fa      	ldrh	r2, [r7, #14]
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d807      	bhi.n	800db30 <ip4_input+0x74>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	891b      	ldrh	r3, [r3, #8]
 800db24:	89ba      	ldrh	r2, [r7, #12]
 800db26:	429a      	cmp	r2, r3
 800db28:	d802      	bhi.n	800db30 <ip4_input+0x74>
 800db2a:	89fb      	ldrh	r3, [r7, #14]
 800db2c:	2b13      	cmp	r3, #19
 800db2e:	d804      	bhi.n	800db3a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f7f8 fca7 	bl	8006484 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800db36:	2300      	movs	r3, #0
 800db38:	e0db      	b.n	800dcf2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	691b      	ldr	r3, [r3, #16]
 800db3e:	4a6f      	ldr	r2, [pc, #444]	@ (800dcfc <ip4_input+0x240>)
 800db40:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	68db      	ldr	r3, [r3, #12]
 800db46:	4a6d      	ldr	r2, [pc, #436]	@ (800dcfc <ip4_input+0x240>)
 800db48:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800db4a:	4b6c      	ldr	r3, [pc, #432]	@ (800dcfc <ip4_input+0x240>)
 800db4c:	695b      	ldr	r3, [r3, #20]
 800db4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800db52:	2be0      	cmp	r3, #224	@ 0xe0
 800db54:	d112      	bne.n	800db7c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800db5c:	f003 0301 	and.w	r3, r3, #1
 800db60:	b2db      	uxtb	r3, r3
 800db62:	2b00      	cmp	r3, #0
 800db64:	d007      	beq.n	800db76 <ip4_input+0xba>
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	3304      	adds	r3, #4
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d002      	beq.n	800db76 <ip4_input+0xba>
      netif = inp;
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	613b      	str	r3, [r7, #16]
 800db74:	e02a      	b.n	800dbcc <ip4_input+0x110>
    } else {
      netif = NULL;
 800db76:	2300      	movs	r3, #0
 800db78:	613b      	str	r3, [r7, #16]
 800db7a:	e027      	b.n	800dbcc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800db7c:	6838      	ldr	r0, [r7, #0]
 800db7e:	f7ff ff73 	bl	800da68 <ip4_input_accept>
 800db82:	4603      	mov	r3, r0
 800db84:	2b00      	cmp	r3, #0
 800db86:	d002      	beq.n	800db8e <ip4_input+0xd2>
      netif = inp;
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	613b      	str	r3, [r7, #16]
 800db8c:	e01e      	b.n	800dbcc <ip4_input+0x110>
    } else {
      netif = NULL;
 800db8e:	2300      	movs	r3, #0
 800db90:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800db92:	4b5a      	ldr	r3, [pc, #360]	@ (800dcfc <ip4_input+0x240>)
 800db94:	695b      	ldr	r3, [r3, #20]
 800db96:	b2db      	uxtb	r3, r3
 800db98:	2b7f      	cmp	r3, #127	@ 0x7f
 800db9a:	d017      	beq.n	800dbcc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800db9c:	4b58      	ldr	r3, [pc, #352]	@ (800dd00 <ip4_input+0x244>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	613b      	str	r3, [r7, #16]
 800dba2:	e00e      	b.n	800dbc2 <ip4_input+0x106>
          if (netif == inp) {
 800dba4:	693a      	ldr	r2, [r7, #16]
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	d006      	beq.n	800dbba <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800dbac:	6938      	ldr	r0, [r7, #16]
 800dbae:	f7ff ff5b 	bl	800da68 <ip4_input_accept>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d108      	bne.n	800dbca <ip4_input+0x10e>
 800dbb8:	e000      	b.n	800dbbc <ip4_input+0x100>
            continue;
 800dbba:	bf00      	nop
        NETIF_FOREACH(netif) {
 800dbbc:	693b      	ldr	r3, [r7, #16]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	613b      	str	r3, [r7, #16]
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d1ed      	bne.n	800dba4 <ip4_input+0xe8>
 800dbc8:	e000      	b.n	800dbcc <ip4_input+0x110>
            break;
 800dbca:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800dbcc:	4b4b      	ldr	r3, [pc, #300]	@ (800dcfc <ip4_input+0x240>)
 800dbce:	691b      	ldr	r3, [r3, #16]
 800dbd0:	6839      	ldr	r1, [r7, #0]
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f000 f96e 	bl	800deb4 <ip4_addr_isbroadcast_u32>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d105      	bne.n	800dbea <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800dbde:	4b47      	ldr	r3, [pc, #284]	@ (800dcfc <ip4_input+0x240>)
 800dbe0:	691b      	ldr	r3, [r3, #16]
 800dbe2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800dbe6:	2be0      	cmp	r3, #224	@ 0xe0
 800dbe8:	d104      	bne.n	800dbf4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f7f8 fc4a 	bl	8006484 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	e07e      	b.n	800dcf2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d104      	bne.n	800dc04 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f7f8 fc42 	bl	8006484 <pbuf_free>
    return ERR_OK;
 800dc00:	2300      	movs	r3, #0
 800dc02:	e076      	b.n	800dcf2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	88db      	ldrh	r3, [r3, #6]
 800dc08:	b29b      	uxth	r3, r3
 800dc0a:	461a      	mov	r2, r3
 800dc0c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800dc10:	4013      	ands	r3, r2
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d00b      	beq.n	800dc2e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f000 fc92 	bl	800e540 <ip4_reass>
 800dc1c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d101      	bne.n	800dc28 <ip4_input+0x16c>
      return ERR_OK;
 800dc24:	2300      	movs	r3, #0
 800dc26:	e064      	b.n	800dcf2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	685b      	ldr	r3, [r3, #4]
 800dc2c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800dc2e:	4a33      	ldr	r2, [pc, #204]	@ (800dcfc <ip4_input+0x240>)
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800dc34:	4a31      	ldr	r2, [pc, #196]	@ (800dcfc <ip4_input+0x240>)
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800dc3a:	4a30      	ldr	r2, [pc, #192]	@ (800dcfc <ip4_input+0x240>)
 800dc3c:	697b      	ldr	r3, [r7, #20]
 800dc3e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	781b      	ldrb	r3, [r3, #0]
 800dc44:	f003 030f 	and.w	r3, r3, #15
 800dc48:	b2db      	uxtb	r3, r3
 800dc4a:	009b      	lsls	r3, r3, #2
 800dc4c:	b2db      	uxtb	r3, r3
 800dc4e:	461a      	mov	r2, r3
 800dc50:	4b2a      	ldr	r3, [pc, #168]	@ (800dcfc <ip4_input+0x240>)
 800dc52:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800dc54:	89fb      	ldrh	r3, [r7, #14]
 800dc56:	4619      	mov	r1, r3
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f7f8 fb8d 	bl	8006378 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	7a5b      	ldrb	r3, [r3, #9]
 800dc62:	2b11      	cmp	r3, #17
 800dc64:	d006      	beq.n	800dc74 <ip4_input+0x1b8>
 800dc66:	2b11      	cmp	r3, #17
 800dc68:	dc13      	bgt.n	800dc92 <ip4_input+0x1d6>
 800dc6a:	2b01      	cmp	r3, #1
 800dc6c:	d00c      	beq.n	800dc88 <ip4_input+0x1cc>
 800dc6e:	2b06      	cmp	r3, #6
 800dc70:	d005      	beq.n	800dc7e <ip4_input+0x1c2>
 800dc72:	e00e      	b.n	800dc92 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800dc74:	6839      	ldr	r1, [r7, #0]
 800dc76:	6878      	ldr	r0, [r7, #4]
 800dc78:	f7fe f9f2 	bl	800c060 <udp_input>
        break;
 800dc7c:	e026      	b.n	800dccc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800dc7e:	6839      	ldr	r1, [r7, #0]
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f7fa fa39 	bl	80080f8 <tcp_input>
        break;
 800dc86:	e021      	b.n	800dccc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800dc88:	6839      	ldr	r1, [r7, #0]
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f7ff fcee 	bl	800d66c <icmp_input>
        break;
 800dc90:	e01c      	b.n	800dccc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800dc92:	4b1a      	ldr	r3, [pc, #104]	@ (800dcfc <ip4_input+0x240>)
 800dc94:	695b      	ldr	r3, [r3, #20]
 800dc96:	6939      	ldr	r1, [r7, #16]
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f000 f90b 	bl	800deb4 <ip4_addr_isbroadcast_u32>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d10f      	bne.n	800dcc4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dca4:	4b15      	ldr	r3, [pc, #84]	@ (800dcfc <ip4_input+0x240>)
 800dca6:	695b      	ldr	r3, [r3, #20]
 800dca8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800dcac:	2be0      	cmp	r3, #224	@ 0xe0
 800dcae:	d009      	beq.n	800dcc4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800dcb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dcb4:	4619      	mov	r1, r3
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f7f8 fbd1 	bl	800645e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800dcbc:	2102      	movs	r1, #2
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f7ff fdd8 	bl	800d874 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f7f8 fbdd 	bl	8006484 <pbuf_free>
        break;
 800dcca:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800dccc:	4b0b      	ldr	r3, [pc, #44]	@ (800dcfc <ip4_input+0x240>)
 800dcce:	2200      	movs	r2, #0
 800dcd0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800dcd2:	4b0a      	ldr	r3, [pc, #40]	@ (800dcfc <ip4_input+0x240>)
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800dcd8:	4b08      	ldr	r3, [pc, #32]	@ (800dcfc <ip4_input+0x240>)
 800dcda:	2200      	movs	r2, #0
 800dcdc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800dcde:	4b07      	ldr	r3, [pc, #28]	@ (800dcfc <ip4_input+0x240>)
 800dce0:	2200      	movs	r2, #0
 800dce2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800dce4:	4b05      	ldr	r3, [pc, #20]	@ (800dcfc <ip4_input+0x240>)
 800dce6:	2200      	movs	r2, #0
 800dce8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800dcea:	4b04      	ldr	r3, [pc, #16]	@ (800dcfc <ip4_input+0x240>)
 800dcec:	2200      	movs	r2, #0
 800dcee:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800dcf0:	2300      	movs	r3, #0
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3718      	adds	r7, #24
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	20004d28 	.word	0x20004d28
 800dd00:	2000828c 	.word	0x2000828c

0800dd04 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b08a      	sub	sp, #40	@ 0x28
 800dd08:	af04      	add	r7, sp, #16
 800dd0a:	60f8      	str	r0, [r7, #12]
 800dd0c:	60b9      	str	r1, [r7, #8]
 800dd0e:	607a      	str	r2, [r7, #4]
 800dd10:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d009      	beq.n	800dd30 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d003      	beq.n	800dd2a <ip4_output_if+0x26>
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d102      	bne.n	800dd30 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800dd2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd2c:	3304      	adds	r3, #4
 800dd2e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800dd30:	78fa      	ldrb	r2, [r7, #3]
 800dd32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd34:	9302      	str	r3, [sp, #8]
 800dd36:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dd3a:	9301      	str	r3, [sp, #4]
 800dd3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dd40:	9300      	str	r3, [sp, #0]
 800dd42:	4613      	mov	r3, r2
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	6979      	ldr	r1, [r7, #20]
 800dd48:	68f8      	ldr	r0, [r7, #12]
 800dd4a:	f000 f805 	bl	800dd58 <ip4_output_if_src>
 800dd4e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800dd50:	4618      	mov	r0, r3
 800dd52:	3718      	adds	r7, #24
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}

0800dd58 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b088      	sub	sp, #32
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	60f8      	str	r0, [r7, #12]
 800dd60:	60b9      	str	r1, [r7, #8]
 800dd62:	607a      	str	r2, [r7, #4]
 800dd64:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	7b9b      	ldrb	r3, [r3, #14]
 800dd6a:	2b01      	cmp	r3, #1
 800dd6c:	d006      	beq.n	800dd7c <ip4_output_if_src+0x24>
 800dd6e:	4b4b      	ldr	r3, [pc, #300]	@ (800de9c <ip4_output_if_src+0x144>)
 800dd70:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800dd74:	494a      	ldr	r1, [pc, #296]	@ (800dea0 <ip4_output_if_src+0x148>)
 800dd76:	484b      	ldr	r0, [pc, #300]	@ (800dea4 <ip4_output_if_src+0x14c>)
 800dd78:	f001 f8f2 	bl	800ef60 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d060      	beq.n	800de44 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800dd82:	2314      	movs	r3, #20
 800dd84:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800dd86:	2114      	movs	r1, #20
 800dd88:	68f8      	ldr	r0, [r7, #12]
 800dd8a:	f7f8 fae5 	bl	8006358 <pbuf_add_header>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d002      	beq.n	800dd9a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800dd94:	f06f 0301 	mvn.w	r3, #1
 800dd98:	e07c      	b.n	800de94 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	685b      	ldr	r3, [r3, #4]
 800dd9e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	895b      	ldrh	r3, [r3, #10]
 800dda4:	2b13      	cmp	r3, #19
 800dda6:	d806      	bhi.n	800ddb6 <ip4_output_if_src+0x5e>
 800dda8:	4b3c      	ldr	r3, [pc, #240]	@ (800de9c <ip4_output_if_src+0x144>)
 800ddaa:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800ddae:	493e      	ldr	r1, [pc, #248]	@ (800dea8 <ip4_output_if_src+0x150>)
 800ddb0:	483c      	ldr	r0, [pc, #240]	@ (800dea4 <ip4_output_if_src+0x14c>)
 800ddb2:	f001 f8d5 	bl	800ef60 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800ddb6:	69fb      	ldr	r3, [r7, #28]
 800ddb8:	78fa      	ldrb	r2, [r7, #3]
 800ddba:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ddbc:	69fb      	ldr	r3, [r7, #28]
 800ddbe:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800ddc2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681a      	ldr	r2, [r3, #0]
 800ddc8:	69fb      	ldr	r3, [r7, #28]
 800ddca:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ddcc:	8b7b      	ldrh	r3, [r7, #26]
 800ddce:	089b      	lsrs	r3, r3, #2
 800ddd0:	b29b      	uxth	r3, r3
 800ddd2:	b2db      	uxtb	r3, r3
 800ddd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ddd8:	b2da      	uxtb	r2, r3
 800ddda:	69fb      	ldr	r3, [r7, #28]
 800dddc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ddde:	69fb      	ldr	r3, [r7, #28]
 800dde0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800dde4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	891b      	ldrh	r3, [r3, #8]
 800ddea:	4618      	mov	r0, r3
 800ddec:	f7f6 ffec 	bl	8004dc8 <lwip_htons>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	461a      	mov	r2, r3
 800ddf4:	69fb      	ldr	r3, [r7, #28]
 800ddf6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ddf8:	69fb      	ldr	r3, [r7, #28]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	719a      	strb	r2, [r3, #6]
 800ddfe:	2200      	movs	r2, #0
 800de00:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800de02:	4b2a      	ldr	r3, [pc, #168]	@ (800deac <ip4_output_if_src+0x154>)
 800de04:	881b      	ldrh	r3, [r3, #0]
 800de06:	4618      	mov	r0, r3
 800de08:	f7f6 ffde 	bl	8004dc8 <lwip_htons>
 800de0c:	4603      	mov	r3, r0
 800de0e:	461a      	mov	r2, r3
 800de10:	69fb      	ldr	r3, [r7, #28]
 800de12:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800de14:	4b25      	ldr	r3, [pc, #148]	@ (800deac <ip4_output_if_src+0x154>)
 800de16:	881b      	ldrh	r3, [r3, #0]
 800de18:	3301      	adds	r3, #1
 800de1a:	b29a      	uxth	r2, r3
 800de1c:	4b23      	ldr	r3, [pc, #140]	@ (800deac <ip4_output_if_src+0x154>)
 800de1e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d104      	bne.n	800de30 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800de26:	4b22      	ldr	r3, [pc, #136]	@ (800deb0 <ip4_output_if_src+0x158>)
 800de28:	681a      	ldr	r2, [r3, #0]
 800de2a:	69fb      	ldr	r3, [r7, #28]
 800de2c:	60da      	str	r2, [r3, #12]
 800de2e:	e003      	b.n	800de38 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	681a      	ldr	r2, [r3, #0]
 800de34:	69fb      	ldr	r3, [r7, #28]
 800de36:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800de38:	69fb      	ldr	r3, [r7, #28]
 800de3a:	2200      	movs	r2, #0
 800de3c:	729a      	strb	r2, [r3, #10]
 800de3e:	2200      	movs	r2, #0
 800de40:	72da      	strb	r2, [r3, #11]
 800de42:	e00f      	b.n	800de64 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	895b      	ldrh	r3, [r3, #10]
 800de48:	2b13      	cmp	r3, #19
 800de4a:	d802      	bhi.n	800de52 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800de4c:	f06f 0301 	mvn.w	r3, #1
 800de50:	e020      	b.n	800de94 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	685b      	ldr	r3, [r3, #4]
 800de56:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800de58:	69fb      	ldr	r3, [r7, #28]
 800de5a:	691b      	ldr	r3, [r3, #16]
 800de5c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800de5e:	f107 0314 	add.w	r3, r7, #20
 800de62:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800de64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de66:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d00c      	beq.n	800de86 <ip4_output_if_src+0x12e>
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	891a      	ldrh	r2, [r3, #8]
 800de70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de72:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800de74:	429a      	cmp	r2, r3
 800de76:	d906      	bls.n	800de86 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800de78:	687a      	ldr	r2, [r7, #4]
 800de7a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800de7c:	68f8      	ldr	r0, [r7, #12]
 800de7e:	f000 fd53 	bl	800e928 <ip4_frag>
 800de82:	4603      	mov	r3, r0
 800de84:	e006      	b.n	800de94 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800de86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de88:	695b      	ldr	r3, [r3, #20]
 800de8a:	687a      	ldr	r2, [r7, #4]
 800de8c:	68f9      	ldr	r1, [r7, #12]
 800de8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800de90:	4798      	blx	r3
 800de92:	4603      	mov	r3, r0
}
 800de94:	4618      	mov	r0, r3
 800de96:	3720      	adds	r7, #32
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}
 800de9c:	08012434 	.word	0x08012434
 800dea0:	08012468 	.word	0x08012468
 800dea4:	08012474 	.word	0x08012474
 800dea8:	0801249c 	.word	0x0801249c
 800deac:	200083ea 	.word	0x200083ea
 800deb0:	0801287c 	.word	0x0801287c

0800deb4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800deb4:	b480      	push	{r7}
 800deb6:	b085      	sub	sp, #20
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
 800debc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dec8:	d002      	beq.n	800ded0 <ip4_addr_isbroadcast_u32+0x1c>
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d101      	bne.n	800ded4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800ded0:	2301      	movs	r3, #1
 800ded2:	e02a      	b.n	800df2a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800deda:	f003 0302 	and.w	r3, r3, #2
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d101      	bne.n	800dee6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800dee2:	2300      	movs	r3, #0
 800dee4:	e021      	b.n	800df2a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	3304      	adds	r3, #4
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	687a      	ldr	r2, [r7, #4]
 800deee:	429a      	cmp	r2, r3
 800def0:	d101      	bne.n	800def6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800def2:	2300      	movs	r3, #0
 800def4:	e019      	b.n	800df2a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800def6:	68fa      	ldr	r2, [r7, #12]
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	3304      	adds	r3, #4
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	405a      	eors	r2, r3
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	3308      	adds	r3, #8
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	4013      	ands	r3, r2
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d10d      	bne.n	800df28 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	3308      	adds	r3, #8
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	43da      	mvns	r2, r3
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	3308      	adds	r3, #8
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800df20:	429a      	cmp	r2, r3
 800df22:	d101      	bne.n	800df28 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800df24:	2301      	movs	r3, #1
 800df26:	e000      	b.n	800df2a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800df28:	2300      	movs	r3, #0
  }
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	3714      	adds	r7, #20
 800df2e:	46bd      	mov	sp, r7
 800df30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df34:	4770      	bx	lr
	...

0800df38 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b084      	sub	sp, #16
 800df3c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800df3e:	2300      	movs	r3, #0
 800df40:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800df42:	4b12      	ldr	r3, [pc, #72]	@ (800df8c <ip_reass_tmr+0x54>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800df48:	e018      	b.n	800df7c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	7fdb      	ldrb	r3, [r3, #31]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d00b      	beq.n	800df6a <ip_reass_tmr+0x32>
      r->timer--;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	7fdb      	ldrb	r3, [r3, #31]
 800df56:	3b01      	subs	r3, #1
 800df58:	b2da      	uxtb	r2, r3
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	60fb      	str	r3, [r7, #12]
 800df68:	e008      	b.n	800df7c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800df74:	68b9      	ldr	r1, [r7, #8]
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f000 f80a 	bl	800df90 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d1e3      	bne.n	800df4a <ip_reass_tmr+0x12>
    }
  }
}
 800df82:	bf00      	nop
 800df84:	bf00      	nop
 800df86:	3710      	adds	r7, #16
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}
 800df8c:	200083ec 	.word	0x200083ec

0800df90 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b088      	sub	sp, #32
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
 800df98:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800df9a:	2300      	movs	r3, #0
 800df9c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800df9e:	683a      	ldr	r2, [r7, #0]
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	d105      	bne.n	800dfb2 <ip_reass_free_complete_datagram+0x22>
 800dfa6:	4b45      	ldr	r3, [pc, #276]	@ (800e0bc <ip_reass_free_complete_datagram+0x12c>)
 800dfa8:	22ab      	movs	r2, #171	@ 0xab
 800dfaa:	4945      	ldr	r1, [pc, #276]	@ (800e0c0 <ip_reass_free_complete_datagram+0x130>)
 800dfac:	4845      	ldr	r0, [pc, #276]	@ (800e0c4 <ip_reass_free_complete_datagram+0x134>)
 800dfae:	f000 ffd7 	bl	800ef60 <iprintf>
  if (prev != NULL) {
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d00a      	beq.n	800dfce <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	687a      	ldr	r2, [r7, #4]
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	d005      	beq.n	800dfce <ip_reass_free_complete_datagram+0x3e>
 800dfc2:	4b3e      	ldr	r3, [pc, #248]	@ (800e0bc <ip_reass_free_complete_datagram+0x12c>)
 800dfc4:	22ad      	movs	r2, #173	@ 0xad
 800dfc6:	4940      	ldr	r1, [pc, #256]	@ (800e0c8 <ip_reass_free_complete_datagram+0x138>)
 800dfc8:	483e      	ldr	r0, [pc, #248]	@ (800e0c4 <ip_reass_free_complete_datagram+0x134>)
 800dfca:	f000 ffc9 	bl	800ef60 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	685b      	ldr	r3, [r3, #4]
 800dfd2:	685b      	ldr	r3, [r3, #4]
 800dfd4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	889b      	ldrh	r3, [r3, #4]
 800dfda:	b29b      	uxth	r3, r3
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d12a      	bne.n	800e036 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	685b      	ldr	r3, [r3, #4]
 800dfe4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	681a      	ldr	r2, [r3, #0]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800dfee:	69bb      	ldr	r3, [r7, #24]
 800dff0:	6858      	ldr	r0, [r3, #4]
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	3308      	adds	r3, #8
 800dff6:	2214      	movs	r2, #20
 800dff8:	4619      	mov	r1, r3
 800dffa:	f001 f88c 	bl	800f116 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800dffe:	2101      	movs	r1, #1
 800e000:	69b8      	ldr	r0, [r7, #24]
 800e002:	f7ff fc47 	bl	800d894 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e006:	69b8      	ldr	r0, [r7, #24]
 800e008:	f7f8 fac4 	bl	8006594 <pbuf_clen>
 800e00c:	4603      	mov	r3, r0
 800e00e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e010:	8bfa      	ldrh	r2, [r7, #30]
 800e012:	8a7b      	ldrh	r3, [r7, #18]
 800e014:	4413      	add	r3, r2
 800e016:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e01a:	db05      	blt.n	800e028 <ip_reass_free_complete_datagram+0x98>
 800e01c:	4b27      	ldr	r3, [pc, #156]	@ (800e0bc <ip_reass_free_complete_datagram+0x12c>)
 800e01e:	22bc      	movs	r2, #188	@ 0xbc
 800e020:	492a      	ldr	r1, [pc, #168]	@ (800e0cc <ip_reass_free_complete_datagram+0x13c>)
 800e022:	4828      	ldr	r0, [pc, #160]	@ (800e0c4 <ip_reass_free_complete_datagram+0x134>)
 800e024:	f000 ff9c 	bl	800ef60 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e028:	8bfa      	ldrh	r2, [r7, #30]
 800e02a:	8a7b      	ldrh	r3, [r7, #18]
 800e02c:	4413      	add	r3, r2
 800e02e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e030:	69b8      	ldr	r0, [r7, #24]
 800e032:	f7f8 fa27 	bl	8006484 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	685b      	ldr	r3, [r3, #4]
 800e03a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e03c:	e01f      	b.n	800e07e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e03e:	69bb      	ldr	r3, [r7, #24]
 800e040:	685b      	ldr	r3, [r3, #4]
 800e042:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e044:	69bb      	ldr	r3, [r7, #24]
 800e046:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e04e:	68f8      	ldr	r0, [r7, #12]
 800e050:	f7f8 faa0 	bl	8006594 <pbuf_clen>
 800e054:	4603      	mov	r3, r0
 800e056:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e058:	8bfa      	ldrh	r2, [r7, #30]
 800e05a:	8a7b      	ldrh	r3, [r7, #18]
 800e05c:	4413      	add	r3, r2
 800e05e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e062:	db05      	blt.n	800e070 <ip_reass_free_complete_datagram+0xe0>
 800e064:	4b15      	ldr	r3, [pc, #84]	@ (800e0bc <ip_reass_free_complete_datagram+0x12c>)
 800e066:	22cc      	movs	r2, #204	@ 0xcc
 800e068:	4918      	ldr	r1, [pc, #96]	@ (800e0cc <ip_reass_free_complete_datagram+0x13c>)
 800e06a:	4816      	ldr	r0, [pc, #88]	@ (800e0c4 <ip_reass_free_complete_datagram+0x134>)
 800e06c:	f000 ff78 	bl	800ef60 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e070:	8bfa      	ldrh	r2, [r7, #30]
 800e072:	8a7b      	ldrh	r3, [r7, #18]
 800e074:	4413      	add	r3, r2
 800e076:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e078:	68f8      	ldr	r0, [r7, #12]
 800e07a:	f7f8 fa03 	bl	8006484 <pbuf_free>
  while (p != NULL) {
 800e07e:	69bb      	ldr	r3, [r7, #24]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d1dc      	bne.n	800e03e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e084:	6839      	ldr	r1, [r7, #0]
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f000 f8c2 	bl	800e210 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e08c:	4b10      	ldr	r3, [pc, #64]	@ (800e0d0 <ip_reass_free_complete_datagram+0x140>)
 800e08e:	881b      	ldrh	r3, [r3, #0]
 800e090:	8bfa      	ldrh	r2, [r7, #30]
 800e092:	429a      	cmp	r2, r3
 800e094:	d905      	bls.n	800e0a2 <ip_reass_free_complete_datagram+0x112>
 800e096:	4b09      	ldr	r3, [pc, #36]	@ (800e0bc <ip_reass_free_complete_datagram+0x12c>)
 800e098:	22d2      	movs	r2, #210	@ 0xd2
 800e09a:	490e      	ldr	r1, [pc, #56]	@ (800e0d4 <ip_reass_free_complete_datagram+0x144>)
 800e09c:	4809      	ldr	r0, [pc, #36]	@ (800e0c4 <ip_reass_free_complete_datagram+0x134>)
 800e09e:	f000 ff5f 	bl	800ef60 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e0a2:	4b0b      	ldr	r3, [pc, #44]	@ (800e0d0 <ip_reass_free_complete_datagram+0x140>)
 800e0a4:	881a      	ldrh	r2, [r3, #0]
 800e0a6:	8bfb      	ldrh	r3, [r7, #30]
 800e0a8:	1ad3      	subs	r3, r2, r3
 800e0aa:	b29a      	uxth	r2, r3
 800e0ac:	4b08      	ldr	r3, [pc, #32]	@ (800e0d0 <ip_reass_free_complete_datagram+0x140>)
 800e0ae:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e0b0:	8bfb      	ldrh	r3, [r7, #30]
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	3720      	adds	r7, #32
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}
 800e0ba:	bf00      	nop
 800e0bc:	080124cc 	.word	0x080124cc
 800e0c0:	08012508 	.word	0x08012508
 800e0c4:	08012514 	.word	0x08012514
 800e0c8:	0801253c 	.word	0x0801253c
 800e0cc:	08012550 	.word	0x08012550
 800e0d0:	200083f0 	.word	0x200083f0
 800e0d4:	08012570 	.word	0x08012570

0800e0d8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b08a      	sub	sp, #40	@ 0x28
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e0f6:	4b28      	ldr	r3, [pc, #160]	@ (800e198 <ip_reass_remove_oldest_datagram+0xc0>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800e0fc:	e030      	b.n	800e160 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e100:	695a      	ldr	r2, [r3, #20]
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	68db      	ldr	r3, [r3, #12]
 800e106:	429a      	cmp	r2, r3
 800e108:	d10c      	bne.n	800e124 <ip_reass_remove_oldest_datagram+0x4c>
 800e10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e10c:	699a      	ldr	r2, [r3, #24]
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	691b      	ldr	r3, [r3, #16]
 800e112:	429a      	cmp	r2, r3
 800e114:	d106      	bne.n	800e124 <ip_reass_remove_oldest_datagram+0x4c>
 800e116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e118:	899a      	ldrh	r2, [r3, #12]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	889b      	ldrh	r3, [r3, #4]
 800e11e:	b29b      	uxth	r3, r3
 800e120:	429a      	cmp	r2, r3
 800e122:	d014      	beq.n	800e14e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e124:	693b      	ldr	r3, [r7, #16]
 800e126:	3301      	adds	r3, #1
 800e128:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e12a:	6a3b      	ldr	r3, [r7, #32]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d104      	bne.n	800e13a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e132:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e134:	69fb      	ldr	r3, [r7, #28]
 800e136:	61bb      	str	r3, [r7, #24]
 800e138:	e009      	b.n	800e14e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e13c:	7fda      	ldrb	r2, [r3, #31]
 800e13e:	6a3b      	ldr	r3, [r7, #32]
 800e140:	7fdb      	ldrb	r3, [r3, #31]
 800e142:	429a      	cmp	r2, r3
 800e144:	d803      	bhi.n	800e14e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e148:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e14a:	69fb      	ldr	r3, [r7, #28]
 800e14c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d001      	beq.n	800e15a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e158:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800e160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e162:	2b00      	cmp	r3, #0
 800e164:	d1cb      	bne.n	800e0fe <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e166:	6a3b      	ldr	r3, [r7, #32]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d008      	beq.n	800e17e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e16c:	69b9      	ldr	r1, [r7, #24]
 800e16e:	6a38      	ldr	r0, [r7, #32]
 800e170:	f7ff ff0e 	bl	800df90 <ip_reass_free_complete_datagram>
 800e174:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e176:	697a      	ldr	r2, [r7, #20]
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	4413      	add	r3, r2
 800e17c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e17e:	697a      	ldr	r2, [r7, #20]
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	429a      	cmp	r2, r3
 800e184:	da02      	bge.n	800e18c <ip_reass_remove_oldest_datagram+0xb4>
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	2b01      	cmp	r3, #1
 800e18a:	dcac      	bgt.n	800e0e6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e18c:	697b      	ldr	r3, [r7, #20]
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3728      	adds	r7, #40	@ 0x28
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
 800e196:	bf00      	nop
 800e198:	200083ec 	.word	0x200083ec

0800e19c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b084      	sub	sp, #16
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
 800e1a4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e1a6:	2004      	movs	r0, #4
 800e1a8:	f7f7 fa86 	bl	80056b8 <memp_malloc>
 800e1ac:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d110      	bne.n	800e1d6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e1b4:	6839      	ldr	r1, [r7, #0]
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f7ff ff8e 	bl	800e0d8 <ip_reass_remove_oldest_datagram>
 800e1bc:	4602      	mov	r2, r0
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	4293      	cmp	r3, r2
 800e1c2:	dc03      	bgt.n	800e1cc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e1c4:	2004      	movs	r0, #4
 800e1c6:	f7f7 fa77 	bl	80056b8 <memp_malloc>
 800e1ca:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d101      	bne.n	800e1d6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	e016      	b.n	800e204 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e1d6:	2220      	movs	r2, #32
 800e1d8:	2100      	movs	r1, #0
 800e1da:	68f8      	ldr	r0, [r7, #12]
 800e1dc:	f000 ff25 	bl	800f02a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	220f      	movs	r2, #15
 800e1e4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e1e6:	4b09      	ldr	r3, [pc, #36]	@ (800e20c <ip_reass_enqueue_new_datagram+0x70>)
 800e1e8:	681a      	ldr	r2, [r3, #0]
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e1ee:	4a07      	ldr	r2, [pc, #28]	@ (800e20c <ip_reass_enqueue_new_datagram+0x70>)
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	3308      	adds	r3, #8
 800e1f8:	2214      	movs	r2, #20
 800e1fa:	6879      	ldr	r1, [r7, #4]
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f000 ff8a 	bl	800f116 <memcpy>
  return ipr;
 800e202:	68fb      	ldr	r3, [r7, #12]
}
 800e204:	4618      	mov	r0, r3
 800e206:	3710      	adds	r7, #16
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}
 800e20c:	200083ec 	.word	0x200083ec

0800e210 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b082      	sub	sp, #8
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
 800e218:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e21a:	4b10      	ldr	r3, [pc, #64]	@ (800e25c <ip_reass_dequeue_datagram+0x4c>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	687a      	ldr	r2, [r7, #4]
 800e220:	429a      	cmp	r2, r3
 800e222:	d104      	bne.n	800e22e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	4a0c      	ldr	r2, [pc, #48]	@ (800e25c <ip_reass_dequeue_datagram+0x4c>)
 800e22a:	6013      	str	r3, [r2, #0]
 800e22c:	e00d      	b.n	800e24a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d106      	bne.n	800e242 <ip_reass_dequeue_datagram+0x32>
 800e234:	4b0a      	ldr	r3, [pc, #40]	@ (800e260 <ip_reass_dequeue_datagram+0x50>)
 800e236:	f240 1245 	movw	r2, #325	@ 0x145
 800e23a:	490a      	ldr	r1, [pc, #40]	@ (800e264 <ip_reass_dequeue_datagram+0x54>)
 800e23c:	480a      	ldr	r0, [pc, #40]	@ (800e268 <ip_reass_dequeue_datagram+0x58>)
 800e23e:	f000 fe8f 	bl	800ef60 <iprintf>
    prev->next = ipr->next;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681a      	ldr	r2, [r3, #0]
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e24a:	6879      	ldr	r1, [r7, #4]
 800e24c:	2004      	movs	r0, #4
 800e24e:	f7f7 faa3 	bl	8005798 <memp_free>
}
 800e252:	bf00      	nop
 800e254:	3708      	adds	r7, #8
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}
 800e25a:	bf00      	nop
 800e25c:	200083ec 	.word	0x200083ec
 800e260:	080124cc 	.word	0x080124cc
 800e264:	08012594 	.word	0x08012594
 800e268:	08012514 	.word	0x08012514

0800e26c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b08c      	sub	sp, #48	@ 0x30
 800e270:	af00      	add	r7, sp, #0
 800e272:	60f8      	str	r0, [r7, #12]
 800e274:	60b9      	str	r1, [r7, #8]
 800e276:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e278:	2300      	movs	r3, #0
 800e27a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e27c:	2301      	movs	r3, #1
 800e27e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	685b      	ldr	r3, [r3, #4]
 800e284:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e286:	69fb      	ldr	r3, [r7, #28]
 800e288:	885b      	ldrh	r3, [r3, #2]
 800e28a:	b29b      	uxth	r3, r3
 800e28c:	4618      	mov	r0, r3
 800e28e:	f7f6 fd9b 	bl	8004dc8 <lwip_htons>
 800e292:	4603      	mov	r3, r0
 800e294:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e296:	69fb      	ldr	r3, [r7, #28]
 800e298:	781b      	ldrb	r3, [r3, #0]
 800e29a:	f003 030f 	and.w	r3, r3, #15
 800e29e:	b2db      	uxtb	r3, r3
 800e2a0:	009b      	lsls	r3, r3, #2
 800e2a2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e2a4:	7e7b      	ldrb	r3, [r7, #25]
 800e2a6:	b29b      	uxth	r3, r3
 800e2a8:	8b7a      	ldrh	r2, [r7, #26]
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d202      	bcs.n	800e2b4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e2ae:	f04f 33ff 	mov.w	r3, #4294967295
 800e2b2:	e135      	b.n	800e520 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e2b4:	7e7b      	ldrb	r3, [r7, #25]
 800e2b6:	b29b      	uxth	r3, r3
 800e2b8:	8b7a      	ldrh	r2, [r7, #26]
 800e2ba:	1ad3      	subs	r3, r2, r3
 800e2bc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e2be:	69fb      	ldr	r3, [r7, #28]
 800e2c0:	88db      	ldrh	r3, [r3, #6]
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f7f6 fd7f 	bl	8004dc8 <lwip_htons>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e2d0:	b29b      	uxth	r3, r3
 800e2d2:	00db      	lsls	r3, r3, #3
 800e2d4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800e2dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2de:	2200      	movs	r2, #0
 800e2e0:	701a      	strb	r2, [r3, #0]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	705a      	strb	r2, [r3, #1]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	709a      	strb	r2, [r3, #2]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e2ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2f0:	8afa      	ldrh	r2, [r7, #22]
 800e2f2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e2f4:	8afa      	ldrh	r2, [r7, #22]
 800e2f6:	8b7b      	ldrh	r3, [r7, #26]
 800e2f8:	4413      	add	r3, r2
 800e2fa:	b29a      	uxth	r2, r3
 800e2fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2fe:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e302:	88db      	ldrh	r3, [r3, #6]
 800e304:	b29b      	uxth	r3, r3
 800e306:	8afa      	ldrh	r2, [r7, #22]
 800e308:	429a      	cmp	r2, r3
 800e30a:	d902      	bls.n	800e312 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e30c:	f04f 33ff 	mov.w	r3, #4294967295
 800e310:	e106      	b.n	800e520 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	685b      	ldr	r3, [r3, #4]
 800e316:	627b      	str	r3, [r7, #36]	@ 0x24
 800e318:	e068      	b.n	800e3ec <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e31c:	685b      	ldr	r3, [r3, #4]
 800e31e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e322:	889b      	ldrh	r3, [r3, #4]
 800e324:	b29a      	uxth	r2, r3
 800e326:	693b      	ldr	r3, [r7, #16]
 800e328:	889b      	ldrh	r3, [r3, #4]
 800e32a:	b29b      	uxth	r3, r3
 800e32c:	429a      	cmp	r2, r3
 800e32e:	d235      	bcs.n	800e39c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e334:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d020      	beq.n	800e37e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e33c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e33e:	889b      	ldrh	r3, [r3, #4]
 800e340:	b29a      	uxth	r2, r3
 800e342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e344:	88db      	ldrh	r3, [r3, #6]
 800e346:	b29b      	uxth	r3, r3
 800e348:	429a      	cmp	r2, r3
 800e34a:	d307      	bcc.n	800e35c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e34c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e34e:	88db      	ldrh	r3, [r3, #6]
 800e350:	b29a      	uxth	r2, r3
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	889b      	ldrh	r3, [r3, #4]
 800e356:	b29b      	uxth	r3, r3
 800e358:	429a      	cmp	r2, r3
 800e35a:	d902      	bls.n	800e362 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e35c:	f04f 33ff 	mov.w	r3, #4294967295
 800e360:	e0de      	b.n	800e520 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e364:	68ba      	ldr	r2, [r7, #8]
 800e366:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e36a:	88db      	ldrh	r3, [r3, #6]
 800e36c:	b29a      	uxth	r2, r3
 800e36e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e370:	889b      	ldrh	r3, [r3, #4]
 800e372:	b29b      	uxth	r3, r3
 800e374:	429a      	cmp	r2, r3
 800e376:	d03d      	beq.n	800e3f4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e378:	2300      	movs	r3, #0
 800e37a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e37c:	e03a      	b.n	800e3f4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e37e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e380:	88db      	ldrh	r3, [r3, #6]
 800e382:	b29a      	uxth	r2, r3
 800e384:	693b      	ldr	r3, [r7, #16]
 800e386:	889b      	ldrh	r3, [r3, #4]
 800e388:	b29b      	uxth	r3, r3
 800e38a:	429a      	cmp	r2, r3
 800e38c:	d902      	bls.n	800e394 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e38e:	f04f 33ff 	mov.w	r3, #4294967295
 800e392:	e0c5      	b.n	800e520 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	68ba      	ldr	r2, [r7, #8]
 800e398:	605a      	str	r2, [r3, #4]
      break;
 800e39a:	e02b      	b.n	800e3f4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e39c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e39e:	889b      	ldrh	r3, [r3, #4]
 800e3a0:	b29a      	uxth	r2, r3
 800e3a2:	693b      	ldr	r3, [r7, #16]
 800e3a4:	889b      	ldrh	r3, [r3, #4]
 800e3a6:	b29b      	uxth	r3, r3
 800e3a8:	429a      	cmp	r2, r3
 800e3aa:	d102      	bne.n	800e3b2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e3ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e3b0:	e0b6      	b.n	800e520 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e3b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3b4:	889b      	ldrh	r3, [r3, #4]
 800e3b6:	b29a      	uxth	r2, r3
 800e3b8:	693b      	ldr	r3, [r7, #16]
 800e3ba:	88db      	ldrh	r3, [r3, #6]
 800e3bc:	b29b      	uxth	r3, r3
 800e3be:	429a      	cmp	r2, r3
 800e3c0:	d202      	bcs.n	800e3c8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e3c2:	f04f 33ff 	mov.w	r3, #4294967295
 800e3c6:	e0ab      	b.n	800e520 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e3c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d009      	beq.n	800e3e2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e3ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3d0:	88db      	ldrh	r3, [r3, #6]
 800e3d2:	b29a      	uxth	r2, r3
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	889b      	ldrh	r3, [r3, #4]
 800e3d8:	b29b      	uxth	r3, r3
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	d001      	beq.n	800e3e2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e3e2:	693b      	ldr	r3, [r7, #16]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800e3e8:	693b      	ldr	r3, [r7, #16]
 800e3ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800e3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d193      	bne.n	800e31a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e3f2:	e000      	b.n	800e3f6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e3f4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d12d      	bne.n	800e458 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e3fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d01c      	beq.n	800e43c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e404:	88db      	ldrh	r3, [r3, #6]
 800e406:	b29a      	uxth	r2, r3
 800e408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e40a:	889b      	ldrh	r3, [r3, #4]
 800e40c:	b29b      	uxth	r3, r3
 800e40e:	429a      	cmp	r2, r3
 800e410:	d906      	bls.n	800e420 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e412:	4b45      	ldr	r3, [pc, #276]	@ (800e528 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e414:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800e418:	4944      	ldr	r1, [pc, #272]	@ (800e52c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e41a:	4845      	ldr	r0, [pc, #276]	@ (800e530 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e41c:	f000 fda0 	bl	800ef60 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e422:	68ba      	ldr	r2, [r7, #8]
 800e424:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e428:	88db      	ldrh	r3, [r3, #6]
 800e42a:	b29a      	uxth	r2, r3
 800e42c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e42e:	889b      	ldrh	r3, [r3, #4]
 800e430:	b29b      	uxth	r3, r3
 800e432:	429a      	cmp	r2, r3
 800e434:	d010      	beq.n	800e458 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e436:	2300      	movs	r3, #0
 800e438:	623b      	str	r3, [r7, #32]
 800e43a:	e00d      	b.n	800e458 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	685b      	ldr	r3, [r3, #4]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d006      	beq.n	800e452 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e444:	4b38      	ldr	r3, [pc, #224]	@ (800e528 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e446:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800e44a:	493a      	ldr	r1, [pc, #232]	@ (800e534 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e44c:	4838      	ldr	r0, [pc, #224]	@ (800e530 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e44e:	f000 fd87 	bl	800ef60 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	68ba      	ldr	r2, [r7, #8]
 800e456:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d105      	bne.n	800e46a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	7f9b      	ldrb	r3, [r3, #30]
 800e462:	f003 0301 	and.w	r3, r3, #1
 800e466:	2b00      	cmp	r3, #0
 800e468:	d059      	beq.n	800e51e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e46a:	6a3b      	ldr	r3, [r7, #32]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d04f      	beq.n	800e510 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	685b      	ldr	r3, [r3, #4]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d006      	beq.n	800e486 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	685b      	ldr	r3, [r3, #4]
 800e47c:	685b      	ldr	r3, [r3, #4]
 800e47e:	889b      	ldrh	r3, [r3, #4]
 800e480:	b29b      	uxth	r3, r3
 800e482:	2b00      	cmp	r3, #0
 800e484:	d002      	beq.n	800e48c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e486:	2300      	movs	r3, #0
 800e488:	623b      	str	r3, [r7, #32]
 800e48a:	e041      	b.n	800e510 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e48c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e48e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800e490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800e496:	e012      	b.n	800e4be <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e49a:	685b      	ldr	r3, [r3, #4]
 800e49c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800e49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4a0:	88db      	ldrh	r3, [r3, #6]
 800e4a2:	b29a      	uxth	r2, r3
 800e4a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4a6:	889b      	ldrh	r3, [r3, #4]
 800e4a8:	b29b      	uxth	r3, r3
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d002      	beq.n	800e4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	623b      	str	r3, [r7, #32]
            break;
 800e4b2:	e007      	b.n	800e4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e4b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4b6:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800e4b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800e4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d1e9      	bne.n	800e498 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e4c4:	6a3b      	ldr	r3, [r7, #32]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d022      	beq.n	800e510 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	685b      	ldr	r3, [r3, #4]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d106      	bne.n	800e4e0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e4d2:	4b15      	ldr	r3, [pc, #84]	@ (800e528 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e4d4:	f240 12df 	movw	r2, #479	@ 0x1df
 800e4d8:	4917      	ldr	r1, [pc, #92]	@ (800e538 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e4da:	4815      	ldr	r0, [pc, #84]	@ (800e530 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e4dc:	f000 fd40 	bl	800ef60 <iprintf>
          LWIP_ASSERT("sanity check",
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	685b      	ldr	r3, [r3, #4]
 800e4e4:	685b      	ldr	r3, [r3, #4]
 800e4e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d106      	bne.n	800e4fa <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e4ec:	4b0e      	ldr	r3, [pc, #56]	@ (800e528 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e4ee:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800e4f2:	4911      	ldr	r1, [pc, #68]	@ (800e538 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e4f4:	480e      	ldr	r0, [pc, #56]	@ (800e530 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e4f6:	f000 fd33 	bl	800ef60 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d006      	beq.n	800e510 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e502:	4b09      	ldr	r3, [pc, #36]	@ (800e528 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e504:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800e508:	490c      	ldr	r1, [pc, #48]	@ (800e53c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e50a:	4809      	ldr	r0, [pc, #36]	@ (800e530 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e50c:	f000 fd28 	bl	800ef60 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e510:	6a3b      	ldr	r3, [r7, #32]
 800e512:	2b00      	cmp	r3, #0
 800e514:	bf14      	ite	ne
 800e516:	2301      	movne	r3, #1
 800e518:	2300      	moveq	r3, #0
 800e51a:	b2db      	uxtb	r3, r3
 800e51c:	e000      	b.n	800e520 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e51e:	2300      	movs	r3, #0
}
 800e520:	4618      	mov	r0, r3
 800e522:	3730      	adds	r7, #48	@ 0x30
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}
 800e528:	080124cc 	.word	0x080124cc
 800e52c:	080125b0 	.word	0x080125b0
 800e530:	08012514 	.word	0x08012514
 800e534:	080125d0 	.word	0x080125d0
 800e538:	08012608 	.word	0x08012608
 800e53c:	08012618 	.word	0x08012618

0800e540 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b08e      	sub	sp, #56	@ 0x38
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	685b      	ldr	r3, [r3, #4]
 800e54c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e54e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e550:	781b      	ldrb	r3, [r3, #0]
 800e552:	f003 030f 	and.w	r3, r3, #15
 800e556:	b2db      	uxtb	r3, r3
 800e558:	009b      	lsls	r3, r3, #2
 800e55a:	b2db      	uxtb	r3, r3
 800e55c:	2b14      	cmp	r3, #20
 800e55e:	f040 8171 	bne.w	800e844 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e564:	88db      	ldrh	r3, [r3, #6]
 800e566:	b29b      	uxth	r3, r3
 800e568:	4618      	mov	r0, r3
 800e56a:	f7f6 fc2d 	bl	8004dc8 <lwip_htons>
 800e56e:	4603      	mov	r3, r0
 800e570:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e574:	b29b      	uxth	r3, r3
 800e576:	00db      	lsls	r3, r3, #3
 800e578:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e57a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e57c:	885b      	ldrh	r3, [r3, #2]
 800e57e:	b29b      	uxth	r3, r3
 800e580:	4618      	mov	r0, r3
 800e582:	f7f6 fc21 	bl	8004dc8 <lwip_htons>
 800e586:	4603      	mov	r3, r0
 800e588:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e58c:	781b      	ldrb	r3, [r3, #0]
 800e58e:	f003 030f 	and.w	r3, r3, #15
 800e592:	b2db      	uxtb	r3, r3
 800e594:	009b      	lsls	r3, r3, #2
 800e596:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800e59a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e59e:	b29b      	uxth	r3, r3
 800e5a0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	f0c0 8150 	bcc.w	800e848 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e5a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e5ac:	b29b      	uxth	r3, r3
 800e5ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e5b0:	1ad3      	subs	r3, r2, r3
 800e5b2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f7f7 ffed 	bl	8006594 <pbuf_clen>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e5be:	4b8c      	ldr	r3, [pc, #560]	@ (800e7f0 <ip4_reass+0x2b0>)
 800e5c0:	881b      	ldrh	r3, [r3, #0]
 800e5c2:	461a      	mov	r2, r3
 800e5c4:	8c3b      	ldrh	r3, [r7, #32]
 800e5c6:	4413      	add	r3, r2
 800e5c8:	2b0a      	cmp	r3, #10
 800e5ca:	dd10      	ble.n	800e5ee <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e5cc:	8c3b      	ldrh	r3, [r7, #32]
 800e5ce:	4619      	mov	r1, r3
 800e5d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e5d2:	f7ff fd81 	bl	800e0d8 <ip_reass_remove_oldest_datagram>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	f000 8137 	beq.w	800e84c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e5de:	4b84      	ldr	r3, [pc, #528]	@ (800e7f0 <ip4_reass+0x2b0>)
 800e5e0:	881b      	ldrh	r3, [r3, #0]
 800e5e2:	461a      	mov	r2, r3
 800e5e4:	8c3b      	ldrh	r3, [r7, #32]
 800e5e6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e5e8:	2b0a      	cmp	r3, #10
 800e5ea:	f300 812f 	bgt.w	800e84c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e5ee:	4b81      	ldr	r3, [pc, #516]	@ (800e7f4 <ip4_reass+0x2b4>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	633b      	str	r3, [r7, #48]	@ 0x30
 800e5f4:	e015      	b.n	800e622 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5f8:	695a      	ldr	r2, [r3, #20]
 800e5fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5fc:	68db      	ldr	r3, [r3, #12]
 800e5fe:	429a      	cmp	r2, r3
 800e600:	d10c      	bne.n	800e61c <ip4_reass+0xdc>
 800e602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e604:	699a      	ldr	r2, [r3, #24]
 800e606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e608:	691b      	ldr	r3, [r3, #16]
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d106      	bne.n	800e61c <ip4_reass+0xdc>
 800e60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e610:	899a      	ldrh	r2, [r3, #12]
 800e612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e614:	889b      	ldrh	r3, [r3, #4]
 800e616:	b29b      	uxth	r3, r3
 800e618:	429a      	cmp	r2, r3
 800e61a:	d006      	beq.n	800e62a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e61c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	633b      	str	r3, [r7, #48]	@ 0x30
 800e622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e624:	2b00      	cmp	r3, #0
 800e626:	d1e6      	bne.n	800e5f6 <ip4_reass+0xb6>
 800e628:	e000      	b.n	800e62c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e62a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e62c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d109      	bne.n	800e646 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e632:	8c3b      	ldrh	r3, [r7, #32]
 800e634:	4619      	mov	r1, r3
 800e636:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e638:	f7ff fdb0 	bl	800e19c <ip_reass_enqueue_new_datagram>
 800e63c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e63e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e640:	2b00      	cmp	r3, #0
 800e642:	d11c      	bne.n	800e67e <ip4_reass+0x13e>
      goto nullreturn;
 800e644:	e105      	b.n	800e852 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e648:	88db      	ldrh	r3, [r3, #6]
 800e64a:	b29b      	uxth	r3, r3
 800e64c:	4618      	mov	r0, r3
 800e64e:	f7f6 fbbb 	bl	8004dc8 <lwip_htons>
 800e652:	4603      	mov	r3, r0
 800e654:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d110      	bne.n	800e67e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e65c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e65e:	89db      	ldrh	r3, [r3, #14]
 800e660:	4618      	mov	r0, r3
 800e662:	f7f6 fbb1 	bl	8004dc8 <lwip_htons>
 800e666:	4603      	mov	r3, r0
 800e668:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d006      	beq.n	800e67e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e672:	3308      	adds	r3, #8
 800e674:	2214      	movs	r2, #20
 800e676:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e678:	4618      	mov	r0, r3
 800e67a:	f000 fd4c 	bl	800f116 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e67e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e680:	88db      	ldrh	r3, [r3, #6]
 800e682:	b29b      	uxth	r3, r3
 800e684:	f003 0320 	and.w	r3, r3, #32
 800e688:	2b00      	cmp	r3, #0
 800e68a:	bf0c      	ite	eq
 800e68c:	2301      	moveq	r3, #1
 800e68e:	2300      	movne	r3, #0
 800e690:	b2db      	uxtb	r3, r3
 800e692:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e694:	69fb      	ldr	r3, [r7, #28]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d00e      	beq.n	800e6b8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e69a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e69c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e69e:	4413      	add	r3, r2
 800e6a0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e6a2:	8b7a      	ldrh	r2, [r7, #26]
 800e6a4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	f0c0 80a0 	bcc.w	800e7ec <ip4_reass+0x2ac>
 800e6ac:	8b7b      	ldrh	r3, [r7, #26]
 800e6ae:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800e6b2:	4293      	cmp	r3, r2
 800e6b4:	f200 809a 	bhi.w	800e7ec <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e6b8:	69fa      	ldr	r2, [r7, #28]
 800e6ba:	6879      	ldr	r1, [r7, #4]
 800e6bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e6be:	f7ff fdd5 	bl	800e26c <ip_reass_chain_frag_into_datagram_and_validate>
 800e6c2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e6c4:	697b      	ldr	r3, [r7, #20]
 800e6c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6ca:	f000 809b 	beq.w	800e804 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e6ce:	4b48      	ldr	r3, [pc, #288]	@ (800e7f0 <ip4_reass+0x2b0>)
 800e6d0:	881a      	ldrh	r2, [r3, #0]
 800e6d2:	8c3b      	ldrh	r3, [r7, #32]
 800e6d4:	4413      	add	r3, r2
 800e6d6:	b29a      	uxth	r2, r3
 800e6d8:	4b45      	ldr	r3, [pc, #276]	@ (800e7f0 <ip4_reass+0x2b0>)
 800e6da:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e6dc:	69fb      	ldr	r3, [r7, #28]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d00d      	beq.n	800e6fe <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e6e2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e6e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e6e6:	4413      	add	r3, r2
 800e6e8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e6ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6ec:	8a7a      	ldrh	r2, [r7, #18]
 800e6ee:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e6f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6f2:	7f9b      	ldrb	r3, [r3, #30]
 800e6f4:	f043 0301 	orr.w	r3, r3, #1
 800e6f8:	b2da      	uxtb	r2, r3
 800e6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6fc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	2b01      	cmp	r3, #1
 800e702:	d171      	bne.n	800e7e8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e706:	8b9b      	ldrh	r3, [r3, #28]
 800e708:	3314      	adds	r3, #20
 800e70a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e70c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e70e:	685b      	ldr	r3, [r3, #4]
 800e710:	685b      	ldr	r3, [r3, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e718:	685b      	ldr	r3, [r3, #4]
 800e71a:	685b      	ldr	r3, [r3, #4]
 800e71c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e720:	3308      	adds	r3, #8
 800e722:	2214      	movs	r2, #20
 800e724:	4619      	mov	r1, r3
 800e726:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e728:	f000 fcf5 	bl	800f116 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e72c:	8a3b      	ldrh	r3, [r7, #16]
 800e72e:	4618      	mov	r0, r3
 800e730:	f7f6 fb4a 	bl	8004dc8 <lwip_htons>
 800e734:	4603      	mov	r3, r0
 800e736:	461a      	mov	r2, r3
 800e738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e73a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e73c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e73e:	2200      	movs	r2, #0
 800e740:	719a      	strb	r2, [r3, #6]
 800e742:	2200      	movs	r2, #0
 800e744:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e748:	2200      	movs	r2, #0
 800e74a:	729a      	strb	r2, [r3, #10]
 800e74c:	2200      	movs	r2, #0
 800e74e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e752:	685b      	ldr	r3, [r3, #4]
 800e754:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e756:	e00d      	b.n	800e774 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e75a:	685b      	ldr	r3, [r3, #4]
 800e75c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e75e:	2114      	movs	r1, #20
 800e760:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e762:	f7f7 fe09 	bl	8006378 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e766:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f7f7 ff4d 	bl	8006608 <pbuf_cat>
      r = iprh->next_pbuf;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800e774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e776:	2b00      	cmp	r3, #0
 800e778:	d1ee      	bne.n	800e758 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e77a:	4b1e      	ldr	r3, [pc, #120]	@ (800e7f4 <ip4_reass+0x2b4>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e780:	429a      	cmp	r2, r3
 800e782:	d102      	bne.n	800e78a <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e784:	2300      	movs	r3, #0
 800e786:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e788:	e010      	b.n	800e7ac <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e78a:	4b1a      	ldr	r3, [pc, #104]	@ (800e7f4 <ip4_reass+0x2b4>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e790:	e007      	b.n	800e7a2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e798:	429a      	cmp	r2, r3
 800e79a:	d006      	beq.n	800e7aa <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e79c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e7a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d1f4      	bne.n	800e792 <ip4_reass+0x252>
 800e7a8:	e000      	b.n	800e7ac <ip4_reass+0x26c>
          break;
 800e7aa:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e7ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e7ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e7b0:	f7ff fd2e 	bl	800e210 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f7f7 feed 	bl	8006594 <pbuf_clen>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e7be:	4b0c      	ldr	r3, [pc, #48]	@ (800e7f0 <ip4_reass+0x2b0>)
 800e7c0:	881b      	ldrh	r3, [r3, #0]
 800e7c2:	8c3a      	ldrh	r2, [r7, #32]
 800e7c4:	429a      	cmp	r2, r3
 800e7c6:	d906      	bls.n	800e7d6 <ip4_reass+0x296>
 800e7c8:	4b0b      	ldr	r3, [pc, #44]	@ (800e7f8 <ip4_reass+0x2b8>)
 800e7ca:	f240 229b 	movw	r2, #667	@ 0x29b
 800e7ce:	490b      	ldr	r1, [pc, #44]	@ (800e7fc <ip4_reass+0x2bc>)
 800e7d0:	480b      	ldr	r0, [pc, #44]	@ (800e800 <ip4_reass+0x2c0>)
 800e7d2:	f000 fbc5 	bl	800ef60 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e7d6:	4b06      	ldr	r3, [pc, #24]	@ (800e7f0 <ip4_reass+0x2b0>)
 800e7d8:	881a      	ldrh	r2, [r3, #0]
 800e7da:	8c3b      	ldrh	r3, [r7, #32]
 800e7dc:	1ad3      	subs	r3, r2, r3
 800e7de:	b29a      	uxth	r2, r3
 800e7e0:	4b03      	ldr	r3, [pc, #12]	@ (800e7f0 <ip4_reass+0x2b0>)
 800e7e2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	e038      	b.n	800e85a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	e036      	b.n	800e85a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800e7ec:	bf00      	nop
 800e7ee:	e00a      	b.n	800e806 <ip4_reass+0x2c6>
 800e7f0:	200083f0 	.word	0x200083f0
 800e7f4:	200083ec 	.word	0x200083ec
 800e7f8:	080124cc 	.word	0x080124cc
 800e7fc:	0801263c 	.word	0x0801263c
 800e800:	08012514 	.word	0x08012514
    goto nullreturn_ipr;
 800e804:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d106      	bne.n	800e81a <ip4_reass+0x2da>
 800e80c:	4b15      	ldr	r3, [pc, #84]	@ (800e864 <ip4_reass+0x324>)
 800e80e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800e812:	4915      	ldr	r1, [pc, #84]	@ (800e868 <ip4_reass+0x328>)
 800e814:	4815      	ldr	r0, [pc, #84]	@ (800e86c <ip4_reass+0x32c>)
 800e816:	f000 fba3 	bl	800ef60 <iprintf>
  if (ipr->p == NULL) {
 800e81a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e81c:	685b      	ldr	r3, [r3, #4]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d116      	bne.n	800e850 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e822:	4b13      	ldr	r3, [pc, #76]	@ (800e870 <ip4_reass+0x330>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e828:	429a      	cmp	r2, r3
 800e82a:	d006      	beq.n	800e83a <ip4_reass+0x2fa>
 800e82c:	4b0d      	ldr	r3, [pc, #52]	@ (800e864 <ip4_reass+0x324>)
 800e82e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800e832:	4910      	ldr	r1, [pc, #64]	@ (800e874 <ip4_reass+0x334>)
 800e834:	480d      	ldr	r0, [pc, #52]	@ (800e86c <ip4_reass+0x32c>)
 800e836:	f000 fb93 	bl	800ef60 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e83a:	2100      	movs	r1, #0
 800e83c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e83e:	f7ff fce7 	bl	800e210 <ip_reass_dequeue_datagram>
 800e842:	e006      	b.n	800e852 <ip4_reass+0x312>
    goto nullreturn;
 800e844:	bf00      	nop
 800e846:	e004      	b.n	800e852 <ip4_reass+0x312>
    goto nullreturn;
 800e848:	bf00      	nop
 800e84a:	e002      	b.n	800e852 <ip4_reass+0x312>
      goto nullreturn;
 800e84c:	bf00      	nop
 800e84e:	e000      	b.n	800e852 <ip4_reass+0x312>
  }

nullreturn:
 800e850:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f7f7 fe16 	bl	8006484 <pbuf_free>
  return NULL;
 800e858:	2300      	movs	r3, #0
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3738      	adds	r7, #56	@ 0x38
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}
 800e862:	bf00      	nop
 800e864:	080124cc 	.word	0x080124cc
 800e868:	08012658 	.word	0x08012658
 800e86c:	08012514 	.word	0x08012514
 800e870:	200083ec 	.word	0x200083ec
 800e874:	08012664 	.word	0x08012664

0800e878 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e87c:	2005      	movs	r0, #5
 800e87e:	f7f6 ff1b 	bl	80056b8 <memp_malloc>
 800e882:	4603      	mov	r3, r0
}
 800e884:	4618      	mov	r0, r3
 800e886:	bd80      	pop	{r7, pc}

0800e888 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b082      	sub	sp, #8
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d106      	bne.n	800e8a4 <ip_frag_free_pbuf_custom_ref+0x1c>
 800e896:	4b07      	ldr	r3, [pc, #28]	@ (800e8b4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e898:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800e89c:	4906      	ldr	r1, [pc, #24]	@ (800e8b8 <ip_frag_free_pbuf_custom_ref+0x30>)
 800e89e:	4807      	ldr	r0, [pc, #28]	@ (800e8bc <ip_frag_free_pbuf_custom_ref+0x34>)
 800e8a0:	f000 fb5e 	bl	800ef60 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e8a4:	6879      	ldr	r1, [r7, #4]
 800e8a6:	2005      	movs	r0, #5
 800e8a8:	f7f6 ff76 	bl	8005798 <memp_free>
}
 800e8ac:	bf00      	nop
 800e8ae:	3708      	adds	r7, #8
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}
 800e8b4:	080124cc 	.word	0x080124cc
 800e8b8:	08012684 	.word	0x08012684
 800e8bc:	08012514 	.word	0x08012514

0800e8c0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b084      	sub	sp, #16
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d106      	bne.n	800e8e0 <ipfrag_free_pbuf_custom+0x20>
 800e8d2:	4b11      	ldr	r3, [pc, #68]	@ (800e918 <ipfrag_free_pbuf_custom+0x58>)
 800e8d4:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800e8d8:	4910      	ldr	r1, [pc, #64]	@ (800e91c <ipfrag_free_pbuf_custom+0x5c>)
 800e8da:	4811      	ldr	r0, [pc, #68]	@ (800e920 <ipfrag_free_pbuf_custom+0x60>)
 800e8dc:	f000 fb40 	bl	800ef60 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e8e0:	68fa      	ldr	r2, [r7, #12]
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	429a      	cmp	r2, r3
 800e8e6:	d006      	beq.n	800e8f6 <ipfrag_free_pbuf_custom+0x36>
 800e8e8:	4b0b      	ldr	r3, [pc, #44]	@ (800e918 <ipfrag_free_pbuf_custom+0x58>)
 800e8ea:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800e8ee:	490d      	ldr	r1, [pc, #52]	@ (800e924 <ipfrag_free_pbuf_custom+0x64>)
 800e8f0:	480b      	ldr	r0, [pc, #44]	@ (800e920 <ipfrag_free_pbuf_custom+0x60>)
 800e8f2:	f000 fb35 	bl	800ef60 <iprintf>
  if (pcr->original != NULL) {
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	695b      	ldr	r3, [r3, #20]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d004      	beq.n	800e908 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	695b      	ldr	r3, [r3, #20]
 800e902:	4618      	mov	r0, r3
 800e904:	f7f7 fdbe 	bl	8006484 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e908:	68f8      	ldr	r0, [r7, #12]
 800e90a:	f7ff ffbd 	bl	800e888 <ip_frag_free_pbuf_custom_ref>
}
 800e90e:	bf00      	nop
 800e910:	3710      	adds	r7, #16
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}
 800e916:	bf00      	nop
 800e918:	080124cc 	.word	0x080124cc
 800e91c:	08012690 	.word	0x08012690
 800e920:	08012514 	.word	0x08012514
 800e924:	0801269c 	.word	0x0801269c

0800e928 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b094      	sub	sp, #80	@ 0x50
 800e92c:	af02      	add	r7, sp, #8
 800e92e:	60f8      	str	r0, [r7, #12]
 800e930:	60b9      	str	r1, [r7, #8]
 800e932:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e934:	2300      	movs	r3, #0
 800e936:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e93a:	68bb      	ldr	r3, [r7, #8]
 800e93c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e93e:	3b14      	subs	r3, #20
 800e940:	2b00      	cmp	r3, #0
 800e942:	da00      	bge.n	800e946 <ip4_frag+0x1e>
 800e944:	3307      	adds	r3, #7
 800e946:	10db      	asrs	r3, r3, #3
 800e948:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e94a:	2314      	movs	r3, #20
 800e94c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	685b      	ldr	r3, [r3, #4]
 800e952:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800e954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e956:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e95a:	781b      	ldrb	r3, [r3, #0]
 800e95c:	f003 030f 	and.w	r3, r3, #15
 800e960:	b2db      	uxtb	r3, r3
 800e962:	009b      	lsls	r3, r3, #2
 800e964:	b2db      	uxtb	r3, r3
 800e966:	2b14      	cmp	r3, #20
 800e968:	d002      	beq.n	800e970 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e96a:	f06f 0305 	mvn.w	r3, #5
 800e96e:	e110      	b.n	800eb92 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	895b      	ldrh	r3, [r3, #10]
 800e974:	2b13      	cmp	r3, #19
 800e976:	d809      	bhi.n	800e98c <ip4_frag+0x64>
 800e978:	4b88      	ldr	r3, [pc, #544]	@ (800eb9c <ip4_frag+0x274>)
 800e97a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800e97e:	4988      	ldr	r1, [pc, #544]	@ (800eba0 <ip4_frag+0x278>)
 800e980:	4888      	ldr	r0, [pc, #544]	@ (800eba4 <ip4_frag+0x27c>)
 800e982:	f000 faed 	bl	800ef60 <iprintf>
 800e986:	f06f 0305 	mvn.w	r3, #5
 800e98a:	e102      	b.n	800eb92 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e98c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e98e:	88db      	ldrh	r3, [r3, #6]
 800e990:	b29b      	uxth	r3, r3
 800e992:	4618      	mov	r0, r3
 800e994:	f7f6 fa18 	bl	8004dc8 <lwip_htons>
 800e998:	4603      	mov	r3, r0
 800e99a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800e99c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800e99e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e9a2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e9a6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800e9a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e9ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	891b      	ldrh	r3, [r3, #8]
 800e9b2:	3b14      	subs	r3, #20
 800e9b4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800e9b8:	e0e1      	b.n	800eb7e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e9ba:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e9bc:	00db      	lsls	r3, r3, #3
 800e9be:	b29b      	uxth	r3, r3
 800e9c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800e9c4:	4293      	cmp	r3, r2
 800e9c6:	bf28      	it	cs
 800e9c8:	4613      	movcs	r3, r2
 800e9ca:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e9cc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e9d0:	2114      	movs	r1, #20
 800e9d2:	200e      	movs	r0, #14
 800e9d4:	f7f7 fa72 	bl	8005ebc <pbuf_alloc>
 800e9d8:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800e9da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	f000 80d5 	beq.w	800eb8c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9e4:	895b      	ldrh	r3, [r3, #10]
 800e9e6:	2b13      	cmp	r3, #19
 800e9e8:	d806      	bhi.n	800e9f8 <ip4_frag+0xd0>
 800e9ea:	4b6c      	ldr	r3, [pc, #432]	@ (800eb9c <ip4_frag+0x274>)
 800e9ec:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800e9f0:	496d      	ldr	r1, [pc, #436]	@ (800eba8 <ip4_frag+0x280>)
 800e9f2:	486c      	ldr	r0, [pc, #432]	@ (800eba4 <ip4_frag+0x27c>)
 800e9f4:	f000 fab4 	bl	800ef60 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9fa:	685b      	ldr	r3, [r3, #4]
 800e9fc:	2214      	movs	r2, #20
 800e9fe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ea00:	4618      	mov	r0, r3
 800ea02:	f000 fb88 	bl	800f116 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ea06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea08:	685b      	ldr	r3, [r3, #4]
 800ea0a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800ea0c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ea0e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800ea12:	e064      	b.n	800eade <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	895a      	ldrh	r2, [r3, #10]
 800ea18:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ea1a:	1ad3      	subs	r3, r2, r3
 800ea1c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	895b      	ldrh	r3, [r3, #10]
 800ea22:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800ea24:	429a      	cmp	r2, r3
 800ea26:	d906      	bls.n	800ea36 <ip4_frag+0x10e>
 800ea28:	4b5c      	ldr	r3, [pc, #368]	@ (800eb9c <ip4_frag+0x274>)
 800ea2a:	f240 322d 	movw	r2, #813	@ 0x32d
 800ea2e:	495f      	ldr	r1, [pc, #380]	@ (800ebac <ip4_frag+0x284>)
 800ea30:	485c      	ldr	r0, [pc, #368]	@ (800eba4 <ip4_frag+0x27c>)
 800ea32:	f000 fa95 	bl	800ef60 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800ea36:	8bfa      	ldrh	r2, [r7, #30]
 800ea38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ea3c:	4293      	cmp	r3, r2
 800ea3e:	bf28      	it	cs
 800ea40:	4613      	movcs	r3, r2
 800ea42:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800ea46:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d105      	bne.n	800ea5a <ip4_frag+0x132>
        poff = 0;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	60fb      	str	r3, [r7, #12]
        continue;
 800ea58:	e041      	b.n	800eade <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800ea5a:	f7ff ff0d 	bl	800e878 <ip_frag_alloc_pbuf_custom_ref>
 800ea5e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800ea60:	69bb      	ldr	r3, [r7, #24]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d103      	bne.n	800ea6e <ip4_frag+0x146>
        pbuf_free(rambuf);
 800ea66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ea68:	f7f7 fd0c 	bl	8006484 <pbuf_free>
        goto memerr;
 800ea6c:	e08f      	b.n	800eb8e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ea6e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ea74:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ea76:	4413      	add	r3, r2
 800ea78:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800ea7c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800ea80:	9201      	str	r2, [sp, #4]
 800ea82:	9300      	str	r3, [sp, #0]
 800ea84:	4603      	mov	r3, r0
 800ea86:	2241      	movs	r2, #65	@ 0x41
 800ea88:	2000      	movs	r0, #0
 800ea8a:	f7f7 fb41 	bl	8006110 <pbuf_alloced_custom>
 800ea8e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800ea90:	697b      	ldr	r3, [r7, #20]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d106      	bne.n	800eaa4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ea96:	69b8      	ldr	r0, [r7, #24]
 800ea98:	f7ff fef6 	bl	800e888 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800ea9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ea9e:	f7f7 fcf1 	bl	8006484 <pbuf_free>
        goto memerr;
 800eaa2:	e074      	b.n	800eb8e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800eaa4:	68f8      	ldr	r0, [r7, #12]
 800eaa6:	f7f7 fd8d 	bl	80065c4 <pbuf_ref>
      pcr->original = p;
 800eaaa:	69bb      	ldr	r3, [r7, #24]
 800eaac:	68fa      	ldr	r2, [r7, #12]
 800eaae:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800eab0:	69bb      	ldr	r3, [r7, #24]
 800eab2:	4a3f      	ldr	r2, [pc, #252]	@ (800ebb0 <ip4_frag+0x288>)
 800eab4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800eab6:	6979      	ldr	r1, [r7, #20]
 800eab8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eaba:	f7f7 fda5 	bl	8006608 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800eabe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800eac2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800eac6:	1ad3      	subs	r3, r2, r3
 800eac8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800eacc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d004      	beq.n	800eade <ip4_frag+0x1b6>
        poff = 0;
 800ead4:	2300      	movs	r3, #0
 800ead6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800eade:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d196      	bne.n	800ea14 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800eae6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800eae8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800eaec:	4413      	add	r3, r2
 800eaee:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800eaf4:	f1a3 0213 	sub.w	r2, r3, #19
 800eaf8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800eafc:	429a      	cmp	r2, r3
 800eafe:	bfcc      	ite	gt
 800eb00:	2301      	movgt	r3, #1
 800eb02:	2300      	movle	r3, #0
 800eb04:	b2db      	uxtb	r3, r3
 800eb06:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800eb08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800eb0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eb10:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800eb12:	6a3b      	ldr	r3, [r7, #32]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d002      	beq.n	800eb1e <ip4_frag+0x1f6>
 800eb18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d003      	beq.n	800eb26 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800eb1e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800eb20:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800eb24:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800eb26:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f7f6 f94d 	bl	8004dc8 <lwip_htons>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	461a      	mov	r2, r3
 800eb32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb34:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800eb36:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800eb38:	3314      	adds	r3, #20
 800eb3a:	b29b      	uxth	r3, r3
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f7f6 f943 	bl	8004dc8 <lwip_htons>
 800eb42:	4603      	mov	r3, r0
 800eb44:	461a      	mov	r2, r3
 800eb46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb48:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800eb4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	729a      	strb	r2, [r3, #10]
 800eb50:	2200      	movs	r2, #0
 800eb52:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	695b      	ldr	r3, [r3, #20]
 800eb58:	687a      	ldr	r2, [r7, #4]
 800eb5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800eb5c:	68b8      	ldr	r0, [r7, #8]
 800eb5e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800eb60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eb62:	f7f7 fc8f 	bl	8006484 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800eb66:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800eb6a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800eb6c:	1ad3      	subs	r3, r2, r3
 800eb6e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800eb72:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800eb76:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800eb78:	4413      	add	r3, r2
 800eb7a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800eb7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	f47f af19 	bne.w	800e9ba <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800eb88:	2300      	movs	r3, #0
 800eb8a:	e002      	b.n	800eb92 <ip4_frag+0x26a>
      goto memerr;
 800eb8c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800eb8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	3748      	adds	r7, #72	@ 0x48
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}
 800eb9a:	bf00      	nop
 800eb9c:	080124cc 	.word	0x080124cc
 800eba0:	080126a8 	.word	0x080126a8
 800eba4:	08012514 	.word	0x08012514
 800eba8:	080126c4 	.word	0x080126c4
 800ebac:	080126e4 	.word	0x080126e4
 800ebb0:	0800e8c1 	.word	0x0800e8c1

0800ebb4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b086      	sub	sp, #24
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
 800ebbc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800ebbe:	230e      	movs	r3, #14
 800ebc0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	895b      	ldrh	r3, [r3, #10]
 800ebc6:	2b0e      	cmp	r3, #14
 800ebc8:	d96e      	bls.n	800eca8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	7bdb      	ldrb	r3, [r3, #15]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d106      	bne.n	800ebe0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ebd8:	3301      	adds	r3, #1
 800ebda:	b2da      	uxtb	r2, r3
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	685b      	ldr	r3, [r3, #4]
 800ebe4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	7b1a      	ldrb	r2, [r3, #12]
 800ebea:	7b5b      	ldrb	r3, [r3, #13]
 800ebec:	021b      	lsls	r3, r3, #8
 800ebee:	4313      	orrs	r3, r2
 800ebf0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	781b      	ldrb	r3, [r3, #0]
 800ebf6:	f003 0301 	and.w	r3, r3, #1
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d023      	beq.n	800ec46 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ebfe:	693b      	ldr	r3, [r7, #16]
 800ec00:	781b      	ldrb	r3, [r3, #0]
 800ec02:	2b01      	cmp	r3, #1
 800ec04:	d10f      	bne.n	800ec26 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ec06:	693b      	ldr	r3, [r7, #16]
 800ec08:	785b      	ldrb	r3, [r3, #1]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d11b      	bne.n	800ec46 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800ec0e:	693b      	ldr	r3, [r7, #16]
 800ec10:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ec12:	2b5e      	cmp	r3, #94	@ 0x5e
 800ec14:	d117      	bne.n	800ec46 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	7b5b      	ldrb	r3, [r3, #13]
 800ec1a:	f043 0310 	orr.w	r3, r3, #16
 800ec1e:	b2da      	uxtb	r2, r3
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	735a      	strb	r2, [r3, #13]
 800ec24:	e00f      	b.n	800ec46 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800ec26:	693b      	ldr	r3, [r7, #16]
 800ec28:	2206      	movs	r2, #6
 800ec2a:	4928      	ldr	r1, [pc, #160]	@ (800eccc <ethernet_input+0x118>)
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f000 f9ec 	bl	800f00a <memcmp>
 800ec32:	4603      	mov	r3, r0
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d106      	bne.n	800ec46 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	7b5b      	ldrb	r3, [r3, #13]
 800ec3c:	f043 0308 	orr.w	r3, r3, #8
 800ec40:	b2da      	uxtb	r2, r3
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800ec46:	89fb      	ldrh	r3, [r7, #14]
 800ec48:	2b08      	cmp	r3, #8
 800ec4a:	d003      	beq.n	800ec54 <ethernet_input+0xa0>
 800ec4c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800ec50:	d014      	beq.n	800ec7c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800ec52:	e032      	b.n	800ecba <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ec5a:	f003 0308 	and.w	r3, r3, #8
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d024      	beq.n	800ecac <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ec62:	8afb      	ldrh	r3, [r7, #22]
 800ec64:	4619      	mov	r1, r3
 800ec66:	6878      	ldr	r0, [r7, #4]
 800ec68:	f7f7 fb86 	bl	8006378 <pbuf_remove_header>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d11e      	bne.n	800ecb0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800ec72:	6839      	ldr	r1, [r7, #0]
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f7fe ff21 	bl	800dabc <ip4_input>
      break;
 800ec7a:	e013      	b.n	800eca4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ec82:	f003 0308 	and.w	r3, r3, #8
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d014      	beq.n	800ecb4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ec8a:	8afb      	ldrh	r3, [r7, #22]
 800ec8c:	4619      	mov	r1, r3
 800ec8e:	6878      	ldr	r0, [r7, #4]
 800ec90:	f7f7 fb72 	bl	8006378 <pbuf_remove_header>
 800ec94:	4603      	mov	r3, r0
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d10e      	bne.n	800ecb8 <ethernet_input+0x104>
        etharp_input(p, netif);
 800ec9a:	6839      	ldr	r1, [r7, #0]
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	f7fe f8c1 	bl	800ce24 <etharp_input>
      break;
 800eca2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800eca4:	2300      	movs	r3, #0
 800eca6:	e00c      	b.n	800ecc2 <ethernet_input+0x10e>
    goto free_and_return;
 800eca8:	bf00      	nop
 800ecaa:	e006      	b.n	800ecba <ethernet_input+0x106>
        goto free_and_return;
 800ecac:	bf00      	nop
 800ecae:	e004      	b.n	800ecba <ethernet_input+0x106>
        goto free_and_return;
 800ecb0:	bf00      	nop
 800ecb2:	e002      	b.n	800ecba <ethernet_input+0x106>
        goto free_and_return;
 800ecb4:	bf00      	nop
 800ecb6:	e000      	b.n	800ecba <ethernet_input+0x106>
        goto free_and_return;
 800ecb8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f7f7 fbe2 	bl	8006484 <pbuf_free>
  return ERR_OK;
 800ecc0:	2300      	movs	r3, #0
}
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	3718      	adds	r7, #24
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}
 800ecca:	bf00      	nop
 800eccc:	08012880 	.word	0x08012880

0800ecd0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b086      	sub	sp, #24
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	60f8      	str	r0, [r7, #12]
 800ecd8:	60b9      	str	r1, [r7, #8]
 800ecda:	607a      	str	r2, [r7, #4]
 800ecdc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800ecde:	8c3b      	ldrh	r3, [r7, #32]
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7f6 f871 	bl	8004dc8 <lwip_htons>
 800ece6:	4603      	mov	r3, r0
 800ece8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800ecea:	210e      	movs	r1, #14
 800ecec:	68b8      	ldr	r0, [r7, #8]
 800ecee:	f7f7 fb33 	bl	8006358 <pbuf_add_header>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d125      	bne.n	800ed44 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	685b      	ldr	r3, [r3, #4]
 800ecfc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800ecfe:	693b      	ldr	r3, [r7, #16]
 800ed00:	8afa      	ldrh	r2, [r7, #22]
 800ed02:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800ed04:	693b      	ldr	r3, [r7, #16]
 800ed06:	2206      	movs	r2, #6
 800ed08:	6839      	ldr	r1, [r7, #0]
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f000 fa03 	bl	800f116 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800ed10:	693b      	ldr	r3, [r7, #16]
 800ed12:	3306      	adds	r3, #6
 800ed14:	2206      	movs	r2, #6
 800ed16:	6879      	ldr	r1, [r7, #4]
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f000 f9fc 	bl	800f116 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ed24:	2b06      	cmp	r3, #6
 800ed26:	d006      	beq.n	800ed36 <ethernet_output+0x66>
 800ed28:	4b0a      	ldr	r3, [pc, #40]	@ (800ed54 <ethernet_output+0x84>)
 800ed2a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800ed2e:	490a      	ldr	r1, [pc, #40]	@ (800ed58 <ethernet_output+0x88>)
 800ed30:	480a      	ldr	r0, [pc, #40]	@ (800ed5c <ethernet_output+0x8c>)
 800ed32:	f000 f915 	bl	800ef60 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	699b      	ldr	r3, [r3, #24]
 800ed3a:	68b9      	ldr	r1, [r7, #8]
 800ed3c:	68f8      	ldr	r0, [r7, #12]
 800ed3e:	4798      	blx	r3
 800ed40:	4603      	mov	r3, r0
 800ed42:	e002      	b.n	800ed4a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800ed44:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800ed46:	f06f 0301 	mvn.w	r3, #1
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3718      	adds	r7, #24
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	bf00      	nop
 800ed54:	080126f4 	.word	0x080126f4
 800ed58:	0801272c 	.word	0x0801272c
 800ed5c:	08012760 	.word	0x08012760

0800ed60 <rand>:
 800ed60:	4b16      	ldr	r3, [pc, #88]	@ (800edbc <rand+0x5c>)
 800ed62:	b510      	push	{r4, lr}
 800ed64:	681c      	ldr	r4, [r3, #0]
 800ed66:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ed68:	b9b3      	cbnz	r3, 800ed98 <rand+0x38>
 800ed6a:	2018      	movs	r0, #24
 800ed6c:	f000 fa4a 	bl	800f204 <malloc>
 800ed70:	4602      	mov	r2, r0
 800ed72:	6320      	str	r0, [r4, #48]	@ 0x30
 800ed74:	b920      	cbnz	r0, 800ed80 <rand+0x20>
 800ed76:	4b12      	ldr	r3, [pc, #72]	@ (800edc0 <rand+0x60>)
 800ed78:	4812      	ldr	r0, [pc, #72]	@ (800edc4 <rand+0x64>)
 800ed7a:	2152      	movs	r1, #82	@ 0x52
 800ed7c:	f000 f9da 	bl	800f134 <__assert_func>
 800ed80:	4911      	ldr	r1, [pc, #68]	@ (800edc8 <rand+0x68>)
 800ed82:	4b12      	ldr	r3, [pc, #72]	@ (800edcc <rand+0x6c>)
 800ed84:	e9c0 1300 	strd	r1, r3, [r0]
 800ed88:	4b11      	ldr	r3, [pc, #68]	@ (800edd0 <rand+0x70>)
 800ed8a:	6083      	str	r3, [r0, #8]
 800ed8c:	230b      	movs	r3, #11
 800ed8e:	8183      	strh	r3, [r0, #12]
 800ed90:	2100      	movs	r1, #0
 800ed92:	2001      	movs	r0, #1
 800ed94:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ed98:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ed9a:	480e      	ldr	r0, [pc, #56]	@ (800edd4 <rand+0x74>)
 800ed9c:	690b      	ldr	r3, [r1, #16]
 800ed9e:	694c      	ldr	r4, [r1, #20]
 800eda0:	4a0d      	ldr	r2, [pc, #52]	@ (800edd8 <rand+0x78>)
 800eda2:	4358      	muls	r0, r3
 800eda4:	fb02 0004 	mla	r0, r2, r4, r0
 800eda8:	fba3 3202 	umull	r3, r2, r3, r2
 800edac:	3301      	adds	r3, #1
 800edae:	eb40 0002 	adc.w	r0, r0, r2
 800edb2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800edb6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800edba:	bd10      	pop	{r4, pc}
 800edbc:	20000038 	.word	0x20000038
 800edc0:	0801288e 	.word	0x0801288e
 800edc4:	080128a5 	.word	0x080128a5
 800edc8:	abcd330e 	.word	0xabcd330e
 800edcc:	e66d1234 	.word	0xe66d1234
 800edd0:	0005deec 	.word	0x0005deec
 800edd4:	5851f42d 	.word	0x5851f42d
 800edd8:	4c957f2d 	.word	0x4c957f2d

0800eddc <std>:
 800eddc:	2300      	movs	r3, #0
 800edde:	b510      	push	{r4, lr}
 800ede0:	4604      	mov	r4, r0
 800ede2:	e9c0 3300 	strd	r3, r3, [r0]
 800ede6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800edea:	6083      	str	r3, [r0, #8]
 800edec:	8181      	strh	r1, [r0, #12]
 800edee:	6643      	str	r3, [r0, #100]	@ 0x64
 800edf0:	81c2      	strh	r2, [r0, #14]
 800edf2:	6183      	str	r3, [r0, #24]
 800edf4:	4619      	mov	r1, r3
 800edf6:	2208      	movs	r2, #8
 800edf8:	305c      	adds	r0, #92	@ 0x5c
 800edfa:	f000 f916 	bl	800f02a <memset>
 800edfe:	4b0d      	ldr	r3, [pc, #52]	@ (800ee34 <std+0x58>)
 800ee00:	6263      	str	r3, [r4, #36]	@ 0x24
 800ee02:	4b0d      	ldr	r3, [pc, #52]	@ (800ee38 <std+0x5c>)
 800ee04:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ee06:	4b0d      	ldr	r3, [pc, #52]	@ (800ee3c <std+0x60>)
 800ee08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ee0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ee40 <std+0x64>)
 800ee0c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ee0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ee44 <std+0x68>)
 800ee10:	6224      	str	r4, [r4, #32]
 800ee12:	429c      	cmp	r4, r3
 800ee14:	d006      	beq.n	800ee24 <std+0x48>
 800ee16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ee1a:	4294      	cmp	r4, r2
 800ee1c:	d002      	beq.n	800ee24 <std+0x48>
 800ee1e:	33d0      	adds	r3, #208	@ 0xd0
 800ee20:	429c      	cmp	r4, r3
 800ee22:	d105      	bne.n	800ee30 <std+0x54>
 800ee24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ee28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee2c:	f000 b970 	b.w	800f110 <__retarget_lock_init_recursive>
 800ee30:	bd10      	pop	{r4, pc}
 800ee32:	bf00      	nop
 800ee34:	0800ef85 	.word	0x0800ef85
 800ee38:	0800efa7 	.word	0x0800efa7
 800ee3c:	0800efdf 	.word	0x0800efdf
 800ee40:	0800f003 	.word	0x0800f003
 800ee44:	200083f4 	.word	0x200083f4

0800ee48 <stdio_exit_handler>:
 800ee48:	4a02      	ldr	r2, [pc, #8]	@ (800ee54 <stdio_exit_handler+0xc>)
 800ee4a:	4903      	ldr	r1, [pc, #12]	@ (800ee58 <stdio_exit_handler+0x10>)
 800ee4c:	4803      	ldr	r0, [pc, #12]	@ (800ee5c <stdio_exit_handler+0x14>)
 800ee4e:	f000 b869 	b.w	800ef24 <_fwalk_sglue>
 800ee52:	bf00      	nop
 800ee54:	2000002c 	.word	0x2000002c
 800ee58:	0800fa15 	.word	0x0800fa15
 800ee5c:	2000003c 	.word	0x2000003c

0800ee60 <cleanup_stdio>:
 800ee60:	6841      	ldr	r1, [r0, #4]
 800ee62:	4b0c      	ldr	r3, [pc, #48]	@ (800ee94 <cleanup_stdio+0x34>)
 800ee64:	4299      	cmp	r1, r3
 800ee66:	b510      	push	{r4, lr}
 800ee68:	4604      	mov	r4, r0
 800ee6a:	d001      	beq.n	800ee70 <cleanup_stdio+0x10>
 800ee6c:	f000 fdd2 	bl	800fa14 <_fflush_r>
 800ee70:	68a1      	ldr	r1, [r4, #8]
 800ee72:	4b09      	ldr	r3, [pc, #36]	@ (800ee98 <cleanup_stdio+0x38>)
 800ee74:	4299      	cmp	r1, r3
 800ee76:	d002      	beq.n	800ee7e <cleanup_stdio+0x1e>
 800ee78:	4620      	mov	r0, r4
 800ee7a:	f000 fdcb 	bl	800fa14 <_fflush_r>
 800ee7e:	68e1      	ldr	r1, [r4, #12]
 800ee80:	4b06      	ldr	r3, [pc, #24]	@ (800ee9c <cleanup_stdio+0x3c>)
 800ee82:	4299      	cmp	r1, r3
 800ee84:	d004      	beq.n	800ee90 <cleanup_stdio+0x30>
 800ee86:	4620      	mov	r0, r4
 800ee88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee8c:	f000 bdc2 	b.w	800fa14 <_fflush_r>
 800ee90:	bd10      	pop	{r4, pc}
 800ee92:	bf00      	nop
 800ee94:	200083f4 	.word	0x200083f4
 800ee98:	2000845c 	.word	0x2000845c
 800ee9c:	200084c4 	.word	0x200084c4

0800eea0 <global_stdio_init.part.0>:
 800eea0:	b510      	push	{r4, lr}
 800eea2:	4b0b      	ldr	r3, [pc, #44]	@ (800eed0 <global_stdio_init.part.0+0x30>)
 800eea4:	4c0b      	ldr	r4, [pc, #44]	@ (800eed4 <global_stdio_init.part.0+0x34>)
 800eea6:	4a0c      	ldr	r2, [pc, #48]	@ (800eed8 <global_stdio_init.part.0+0x38>)
 800eea8:	601a      	str	r2, [r3, #0]
 800eeaa:	4620      	mov	r0, r4
 800eeac:	2200      	movs	r2, #0
 800eeae:	2104      	movs	r1, #4
 800eeb0:	f7ff ff94 	bl	800eddc <std>
 800eeb4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800eeb8:	2201      	movs	r2, #1
 800eeba:	2109      	movs	r1, #9
 800eebc:	f7ff ff8e 	bl	800eddc <std>
 800eec0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800eec4:	2202      	movs	r2, #2
 800eec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eeca:	2112      	movs	r1, #18
 800eecc:	f7ff bf86 	b.w	800eddc <std>
 800eed0:	2000852c 	.word	0x2000852c
 800eed4:	200083f4 	.word	0x200083f4
 800eed8:	0800ee49 	.word	0x0800ee49

0800eedc <__sfp_lock_acquire>:
 800eedc:	4801      	ldr	r0, [pc, #4]	@ (800eee4 <__sfp_lock_acquire+0x8>)
 800eede:	f000 b918 	b.w	800f112 <__retarget_lock_acquire_recursive>
 800eee2:	bf00      	nop
 800eee4:	20008535 	.word	0x20008535

0800eee8 <__sfp_lock_release>:
 800eee8:	4801      	ldr	r0, [pc, #4]	@ (800eef0 <__sfp_lock_release+0x8>)
 800eeea:	f000 b913 	b.w	800f114 <__retarget_lock_release_recursive>
 800eeee:	bf00      	nop
 800eef0:	20008535 	.word	0x20008535

0800eef4 <__sinit>:
 800eef4:	b510      	push	{r4, lr}
 800eef6:	4604      	mov	r4, r0
 800eef8:	f7ff fff0 	bl	800eedc <__sfp_lock_acquire>
 800eefc:	6a23      	ldr	r3, [r4, #32]
 800eefe:	b11b      	cbz	r3, 800ef08 <__sinit+0x14>
 800ef00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef04:	f7ff bff0 	b.w	800eee8 <__sfp_lock_release>
 800ef08:	4b04      	ldr	r3, [pc, #16]	@ (800ef1c <__sinit+0x28>)
 800ef0a:	6223      	str	r3, [r4, #32]
 800ef0c:	4b04      	ldr	r3, [pc, #16]	@ (800ef20 <__sinit+0x2c>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d1f5      	bne.n	800ef00 <__sinit+0xc>
 800ef14:	f7ff ffc4 	bl	800eea0 <global_stdio_init.part.0>
 800ef18:	e7f2      	b.n	800ef00 <__sinit+0xc>
 800ef1a:	bf00      	nop
 800ef1c:	0800ee61 	.word	0x0800ee61
 800ef20:	2000852c 	.word	0x2000852c

0800ef24 <_fwalk_sglue>:
 800ef24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef28:	4607      	mov	r7, r0
 800ef2a:	4688      	mov	r8, r1
 800ef2c:	4614      	mov	r4, r2
 800ef2e:	2600      	movs	r6, #0
 800ef30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ef34:	f1b9 0901 	subs.w	r9, r9, #1
 800ef38:	d505      	bpl.n	800ef46 <_fwalk_sglue+0x22>
 800ef3a:	6824      	ldr	r4, [r4, #0]
 800ef3c:	2c00      	cmp	r4, #0
 800ef3e:	d1f7      	bne.n	800ef30 <_fwalk_sglue+0xc>
 800ef40:	4630      	mov	r0, r6
 800ef42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef46:	89ab      	ldrh	r3, [r5, #12]
 800ef48:	2b01      	cmp	r3, #1
 800ef4a:	d907      	bls.n	800ef5c <_fwalk_sglue+0x38>
 800ef4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ef50:	3301      	adds	r3, #1
 800ef52:	d003      	beq.n	800ef5c <_fwalk_sglue+0x38>
 800ef54:	4629      	mov	r1, r5
 800ef56:	4638      	mov	r0, r7
 800ef58:	47c0      	blx	r8
 800ef5a:	4306      	orrs	r6, r0
 800ef5c:	3568      	adds	r5, #104	@ 0x68
 800ef5e:	e7e9      	b.n	800ef34 <_fwalk_sglue+0x10>

0800ef60 <iprintf>:
 800ef60:	b40f      	push	{r0, r1, r2, r3}
 800ef62:	b507      	push	{r0, r1, r2, lr}
 800ef64:	4906      	ldr	r1, [pc, #24]	@ (800ef80 <iprintf+0x20>)
 800ef66:	ab04      	add	r3, sp, #16
 800ef68:	6808      	ldr	r0, [r1, #0]
 800ef6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef6e:	6881      	ldr	r1, [r0, #8]
 800ef70:	9301      	str	r3, [sp, #4]
 800ef72:	f000 fa27 	bl	800f3c4 <_vfiprintf_r>
 800ef76:	b003      	add	sp, #12
 800ef78:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef7c:	b004      	add	sp, #16
 800ef7e:	4770      	bx	lr
 800ef80:	20000038 	.word	0x20000038

0800ef84 <__sread>:
 800ef84:	b510      	push	{r4, lr}
 800ef86:	460c      	mov	r4, r1
 800ef88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef8c:	f000 f878 	bl	800f080 <_read_r>
 800ef90:	2800      	cmp	r0, #0
 800ef92:	bfab      	itete	ge
 800ef94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ef96:	89a3      	ldrhlt	r3, [r4, #12]
 800ef98:	181b      	addge	r3, r3, r0
 800ef9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ef9e:	bfac      	ite	ge
 800efa0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800efa2:	81a3      	strhlt	r3, [r4, #12]
 800efa4:	bd10      	pop	{r4, pc}

0800efa6 <__swrite>:
 800efa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efaa:	461f      	mov	r7, r3
 800efac:	898b      	ldrh	r3, [r1, #12]
 800efae:	05db      	lsls	r3, r3, #23
 800efb0:	4605      	mov	r5, r0
 800efb2:	460c      	mov	r4, r1
 800efb4:	4616      	mov	r6, r2
 800efb6:	d505      	bpl.n	800efc4 <__swrite+0x1e>
 800efb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efbc:	2302      	movs	r3, #2
 800efbe:	2200      	movs	r2, #0
 800efc0:	f000 f84c 	bl	800f05c <_lseek_r>
 800efc4:	89a3      	ldrh	r3, [r4, #12]
 800efc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800efca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800efce:	81a3      	strh	r3, [r4, #12]
 800efd0:	4632      	mov	r2, r6
 800efd2:	463b      	mov	r3, r7
 800efd4:	4628      	mov	r0, r5
 800efd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efda:	f000 b863 	b.w	800f0a4 <_write_r>

0800efde <__sseek>:
 800efde:	b510      	push	{r4, lr}
 800efe0:	460c      	mov	r4, r1
 800efe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efe6:	f000 f839 	bl	800f05c <_lseek_r>
 800efea:	1c43      	adds	r3, r0, #1
 800efec:	89a3      	ldrh	r3, [r4, #12]
 800efee:	bf15      	itete	ne
 800eff0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800eff2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800eff6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800effa:	81a3      	strheq	r3, [r4, #12]
 800effc:	bf18      	it	ne
 800effe:	81a3      	strhne	r3, [r4, #12]
 800f000:	bd10      	pop	{r4, pc}

0800f002 <__sclose>:
 800f002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f006:	f000 b819 	b.w	800f03c <_close_r>

0800f00a <memcmp>:
 800f00a:	b510      	push	{r4, lr}
 800f00c:	3901      	subs	r1, #1
 800f00e:	4402      	add	r2, r0
 800f010:	4290      	cmp	r0, r2
 800f012:	d101      	bne.n	800f018 <memcmp+0xe>
 800f014:	2000      	movs	r0, #0
 800f016:	e005      	b.n	800f024 <memcmp+0x1a>
 800f018:	7803      	ldrb	r3, [r0, #0]
 800f01a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f01e:	42a3      	cmp	r3, r4
 800f020:	d001      	beq.n	800f026 <memcmp+0x1c>
 800f022:	1b18      	subs	r0, r3, r4
 800f024:	bd10      	pop	{r4, pc}
 800f026:	3001      	adds	r0, #1
 800f028:	e7f2      	b.n	800f010 <memcmp+0x6>

0800f02a <memset>:
 800f02a:	4402      	add	r2, r0
 800f02c:	4603      	mov	r3, r0
 800f02e:	4293      	cmp	r3, r2
 800f030:	d100      	bne.n	800f034 <memset+0xa>
 800f032:	4770      	bx	lr
 800f034:	f803 1b01 	strb.w	r1, [r3], #1
 800f038:	e7f9      	b.n	800f02e <memset+0x4>
	...

0800f03c <_close_r>:
 800f03c:	b538      	push	{r3, r4, r5, lr}
 800f03e:	4d06      	ldr	r5, [pc, #24]	@ (800f058 <_close_r+0x1c>)
 800f040:	2300      	movs	r3, #0
 800f042:	4604      	mov	r4, r0
 800f044:	4608      	mov	r0, r1
 800f046:	602b      	str	r3, [r5, #0]
 800f048:	f7f1 fe18 	bl	8000c7c <_close>
 800f04c:	1c43      	adds	r3, r0, #1
 800f04e:	d102      	bne.n	800f056 <_close_r+0x1a>
 800f050:	682b      	ldr	r3, [r5, #0]
 800f052:	b103      	cbz	r3, 800f056 <_close_r+0x1a>
 800f054:	6023      	str	r3, [r4, #0]
 800f056:	bd38      	pop	{r3, r4, r5, pc}
 800f058:	20008530 	.word	0x20008530

0800f05c <_lseek_r>:
 800f05c:	b538      	push	{r3, r4, r5, lr}
 800f05e:	4d07      	ldr	r5, [pc, #28]	@ (800f07c <_lseek_r+0x20>)
 800f060:	4604      	mov	r4, r0
 800f062:	4608      	mov	r0, r1
 800f064:	4611      	mov	r1, r2
 800f066:	2200      	movs	r2, #0
 800f068:	602a      	str	r2, [r5, #0]
 800f06a:	461a      	mov	r2, r3
 800f06c:	f7f1 fe2d 	bl	8000cca <_lseek>
 800f070:	1c43      	adds	r3, r0, #1
 800f072:	d102      	bne.n	800f07a <_lseek_r+0x1e>
 800f074:	682b      	ldr	r3, [r5, #0]
 800f076:	b103      	cbz	r3, 800f07a <_lseek_r+0x1e>
 800f078:	6023      	str	r3, [r4, #0]
 800f07a:	bd38      	pop	{r3, r4, r5, pc}
 800f07c:	20008530 	.word	0x20008530

0800f080 <_read_r>:
 800f080:	b538      	push	{r3, r4, r5, lr}
 800f082:	4d07      	ldr	r5, [pc, #28]	@ (800f0a0 <_read_r+0x20>)
 800f084:	4604      	mov	r4, r0
 800f086:	4608      	mov	r0, r1
 800f088:	4611      	mov	r1, r2
 800f08a:	2200      	movs	r2, #0
 800f08c:	602a      	str	r2, [r5, #0]
 800f08e:	461a      	mov	r2, r3
 800f090:	f7f1 fdbb 	bl	8000c0a <_read>
 800f094:	1c43      	adds	r3, r0, #1
 800f096:	d102      	bne.n	800f09e <_read_r+0x1e>
 800f098:	682b      	ldr	r3, [r5, #0]
 800f09a:	b103      	cbz	r3, 800f09e <_read_r+0x1e>
 800f09c:	6023      	str	r3, [r4, #0]
 800f09e:	bd38      	pop	{r3, r4, r5, pc}
 800f0a0:	20008530 	.word	0x20008530

0800f0a4 <_write_r>:
 800f0a4:	b538      	push	{r3, r4, r5, lr}
 800f0a6:	4d07      	ldr	r5, [pc, #28]	@ (800f0c4 <_write_r+0x20>)
 800f0a8:	4604      	mov	r4, r0
 800f0aa:	4608      	mov	r0, r1
 800f0ac:	4611      	mov	r1, r2
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	602a      	str	r2, [r5, #0]
 800f0b2:	461a      	mov	r2, r3
 800f0b4:	f7f1 fdc6 	bl	8000c44 <_write>
 800f0b8:	1c43      	adds	r3, r0, #1
 800f0ba:	d102      	bne.n	800f0c2 <_write_r+0x1e>
 800f0bc:	682b      	ldr	r3, [r5, #0]
 800f0be:	b103      	cbz	r3, 800f0c2 <_write_r+0x1e>
 800f0c0:	6023      	str	r3, [r4, #0]
 800f0c2:	bd38      	pop	{r3, r4, r5, pc}
 800f0c4:	20008530 	.word	0x20008530

0800f0c8 <__libc_init_array>:
 800f0c8:	b570      	push	{r4, r5, r6, lr}
 800f0ca:	4d0d      	ldr	r5, [pc, #52]	@ (800f100 <__libc_init_array+0x38>)
 800f0cc:	4c0d      	ldr	r4, [pc, #52]	@ (800f104 <__libc_init_array+0x3c>)
 800f0ce:	1b64      	subs	r4, r4, r5
 800f0d0:	10a4      	asrs	r4, r4, #2
 800f0d2:	2600      	movs	r6, #0
 800f0d4:	42a6      	cmp	r6, r4
 800f0d6:	d109      	bne.n	800f0ec <__libc_init_array+0x24>
 800f0d8:	4d0b      	ldr	r5, [pc, #44]	@ (800f108 <__libc_init_array+0x40>)
 800f0da:	4c0c      	ldr	r4, [pc, #48]	@ (800f10c <__libc_init_array+0x44>)
 800f0dc:	f000 fe48 	bl	800fd70 <_init>
 800f0e0:	1b64      	subs	r4, r4, r5
 800f0e2:	10a4      	asrs	r4, r4, #2
 800f0e4:	2600      	movs	r6, #0
 800f0e6:	42a6      	cmp	r6, r4
 800f0e8:	d105      	bne.n	800f0f6 <__libc_init_array+0x2e>
 800f0ea:	bd70      	pop	{r4, r5, r6, pc}
 800f0ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0f0:	4798      	blx	r3
 800f0f2:	3601      	adds	r6, #1
 800f0f4:	e7ee      	b.n	800f0d4 <__libc_init_array+0xc>
 800f0f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0fa:	4798      	blx	r3
 800f0fc:	3601      	adds	r6, #1
 800f0fe:	e7f2      	b.n	800f0e6 <__libc_init_array+0x1e>
 800f100:	08012974 	.word	0x08012974
 800f104:	08012974 	.word	0x08012974
 800f108:	08012974 	.word	0x08012974
 800f10c:	08012978 	.word	0x08012978

0800f110 <__retarget_lock_init_recursive>:
 800f110:	4770      	bx	lr

0800f112 <__retarget_lock_acquire_recursive>:
 800f112:	4770      	bx	lr

0800f114 <__retarget_lock_release_recursive>:
 800f114:	4770      	bx	lr

0800f116 <memcpy>:
 800f116:	440a      	add	r2, r1
 800f118:	4291      	cmp	r1, r2
 800f11a:	f100 33ff 	add.w	r3, r0, #4294967295
 800f11e:	d100      	bne.n	800f122 <memcpy+0xc>
 800f120:	4770      	bx	lr
 800f122:	b510      	push	{r4, lr}
 800f124:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f128:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f12c:	4291      	cmp	r1, r2
 800f12e:	d1f9      	bne.n	800f124 <memcpy+0xe>
 800f130:	bd10      	pop	{r4, pc}
	...

0800f134 <__assert_func>:
 800f134:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f136:	4614      	mov	r4, r2
 800f138:	461a      	mov	r2, r3
 800f13a:	4b09      	ldr	r3, [pc, #36]	@ (800f160 <__assert_func+0x2c>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	4605      	mov	r5, r0
 800f140:	68d8      	ldr	r0, [r3, #12]
 800f142:	b14c      	cbz	r4, 800f158 <__assert_func+0x24>
 800f144:	4b07      	ldr	r3, [pc, #28]	@ (800f164 <__assert_func+0x30>)
 800f146:	9100      	str	r1, [sp, #0]
 800f148:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f14c:	4906      	ldr	r1, [pc, #24]	@ (800f168 <__assert_func+0x34>)
 800f14e:	462b      	mov	r3, r5
 800f150:	f000 fc88 	bl	800fa64 <fiprintf>
 800f154:	f000 fd3c 	bl	800fbd0 <abort>
 800f158:	4b04      	ldr	r3, [pc, #16]	@ (800f16c <__assert_func+0x38>)
 800f15a:	461c      	mov	r4, r3
 800f15c:	e7f3      	b.n	800f146 <__assert_func+0x12>
 800f15e:	bf00      	nop
 800f160:	20000038 	.word	0x20000038
 800f164:	080128fd 	.word	0x080128fd
 800f168:	0801290a 	.word	0x0801290a
 800f16c:	08012938 	.word	0x08012938

0800f170 <_free_r>:
 800f170:	b538      	push	{r3, r4, r5, lr}
 800f172:	4605      	mov	r5, r0
 800f174:	2900      	cmp	r1, #0
 800f176:	d041      	beq.n	800f1fc <_free_r+0x8c>
 800f178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f17c:	1f0c      	subs	r4, r1, #4
 800f17e:	2b00      	cmp	r3, #0
 800f180:	bfb8      	it	lt
 800f182:	18e4      	addlt	r4, r4, r3
 800f184:	f000 f8e8 	bl	800f358 <__malloc_lock>
 800f188:	4a1d      	ldr	r2, [pc, #116]	@ (800f200 <_free_r+0x90>)
 800f18a:	6813      	ldr	r3, [r2, #0]
 800f18c:	b933      	cbnz	r3, 800f19c <_free_r+0x2c>
 800f18e:	6063      	str	r3, [r4, #4]
 800f190:	6014      	str	r4, [r2, #0]
 800f192:	4628      	mov	r0, r5
 800f194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f198:	f000 b8e4 	b.w	800f364 <__malloc_unlock>
 800f19c:	42a3      	cmp	r3, r4
 800f19e:	d908      	bls.n	800f1b2 <_free_r+0x42>
 800f1a0:	6820      	ldr	r0, [r4, #0]
 800f1a2:	1821      	adds	r1, r4, r0
 800f1a4:	428b      	cmp	r3, r1
 800f1a6:	bf01      	itttt	eq
 800f1a8:	6819      	ldreq	r1, [r3, #0]
 800f1aa:	685b      	ldreq	r3, [r3, #4]
 800f1ac:	1809      	addeq	r1, r1, r0
 800f1ae:	6021      	streq	r1, [r4, #0]
 800f1b0:	e7ed      	b.n	800f18e <_free_r+0x1e>
 800f1b2:	461a      	mov	r2, r3
 800f1b4:	685b      	ldr	r3, [r3, #4]
 800f1b6:	b10b      	cbz	r3, 800f1bc <_free_r+0x4c>
 800f1b8:	42a3      	cmp	r3, r4
 800f1ba:	d9fa      	bls.n	800f1b2 <_free_r+0x42>
 800f1bc:	6811      	ldr	r1, [r2, #0]
 800f1be:	1850      	adds	r0, r2, r1
 800f1c0:	42a0      	cmp	r0, r4
 800f1c2:	d10b      	bne.n	800f1dc <_free_r+0x6c>
 800f1c4:	6820      	ldr	r0, [r4, #0]
 800f1c6:	4401      	add	r1, r0
 800f1c8:	1850      	adds	r0, r2, r1
 800f1ca:	4283      	cmp	r3, r0
 800f1cc:	6011      	str	r1, [r2, #0]
 800f1ce:	d1e0      	bne.n	800f192 <_free_r+0x22>
 800f1d0:	6818      	ldr	r0, [r3, #0]
 800f1d2:	685b      	ldr	r3, [r3, #4]
 800f1d4:	6053      	str	r3, [r2, #4]
 800f1d6:	4408      	add	r0, r1
 800f1d8:	6010      	str	r0, [r2, #0]
 800f1da:	e7da      	b.n	800f192 <_free_r+0x22>
 800f1dc:	d902      	bls.n	800f1e4 <_free_r+0x74>
 800f1de:	230c      	movs	r3, #12
 800f1e0:	602b      	str	r3, [r5, #0]
 800f1e2:	e7d6      	b.n	800f192 <_free_r+0x22>
 800f1e4:	6820      	ldr	r0, [r4, #0]
 800f1e6:	1821      	adds	r1, r4, r0
 800f1e8:	428b      	cmp	r3, r1
 800f1ea:	bf04      	itt	eq
 800f1ec:	6819      	ldreq	r1, [r3, #0]
 800f1ee:	685b      	ldreq	r3, [r3, #4]
 800f1f0:	6063      	str	r3, [r4, #4]
 800f1f2:	bf04      	itt	eq
 800f1f4:	1809      	addeq	r1, r1, r0
 800f1f6:	6021      	streq	r1, [r4, #0]
 800f1f8:	6054      	str	r4, [r2, #4]
 800f1fa:	e7ca      	b.n	800f192 <_free_r+0x22>
 800f1fc:	bd38      	pop	{r3, r4, r5, pc}
 800f1fe:	bf00      	nop
 800f200:	2000853c 	.word	0x2000853c

0800f204 <malloc>:
 800f204:	4b02      	ldr	r3, [pc, #8]	@ (800f210 <malloc+0xc>)
 800f206:	4601      	mov	r1, r0
 800f208:	6818      	ldr	r0, [r3, #0]
 800f20a:	f000 b825 	b.w	800f258 <_malloc_r>
 800f20e:	bf00      	nop
 800f210:	20000038 	.word	0x20000038

0800f214 <sbrk_aligned>:
 800f214:	b570      	push	{r4, r5, r6, lr}
 800f216:	4e0f      	ldr	r6, [pc, #60]	@ (800f254 <sbrk_aligned+0x40>)
 800f218:	460c      	mov	r4, r1
 800f21a:	6831      	ldr	r1, [r6, #0]
 800f21c:	4605      	mov	r5, r0
 800f21e:	b911      	cbnz	r1, 800f226 <sbrk_aligned+0x12>
 800f220:	f000 fcc6 	bl	800fbb0 <_sbrk_r>
 800f224:	6030      	str	r0, [r6, #0]
 800f226:	4621      	mov	r1, r4
 800f228:	4628      	mov	r0, r5
 800f22a:	f000 fcc1 	bl	800fbb0 <_sbrk_r>
 800f22e:	1c43      	adds	r3, r0, #1
 800f230:	d103      	bne.n	800f23a <sbrk_aligned+0x26>
 800f232:	f04f 34ff 	mov.w	r4, #4294967295
 800f236:	4620      	mov	r0, r4
 800f238:	bd70      	pop	{r4, r5, r6, pc}
 800f23a:	1cc4      	adds	r4, r0, #3
 800f23c:	f024 0403 	bic.w	r4, r4, #3
 800f240:	42a0      	cmp	r0, r4
 800f242:	d0f8      	beq.n	800f236 <sbrk_aligned+0x22>
 800f244:	1a21      	subs	r1, r4, r0
 800f246:	4628      	mov	r0, r5
 800f248:	f000 fcb2 	bl	800fbb0 <_sbrk_r>
 800f24c:	3001      	adds	r0, #1
 800f24e:	d1f2      	bne.n	800f236 <sbrk_aligned+0x22>
 800f250:	e7ef      	b.n	800f232 <sbrk_aligned+0x1e>
 800f252:	bf00      	nop
 800f254:	20008538 	.word	0x20008538

0800f258 <_malloc_r>:
 800f258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f25c:	1ccd      	adds	r5, r1, #3
 800f25e:	f025 0503 	bic.w	r5, r5, #3
 800f262:	3508      	adds	r5, #8
 800f264:	2d0c      	cmp	r5, #12
 800f266:	bf38      	it	cc
 800f268:	250c      	movcc	r5, #12
 800f26a:	2d00      	cmp	r5, #0
 800f26c:	4606      	mov	r6, r0
 800f26e:	db01      	blt.n	800f274 <_malloc_r+0x1c>
 800f270:	42a9      	cmp	r1, r5
 800f272:	d904      	bls.n	800f27e <_malloc_r+0x26>
 800f274:	230c      	movs	r3, #12
 800f276:	6033      	str	r3, [r6, #0]
 800f278:	2000      	movs	r0, #0
 800f27a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f27e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f354 <_malloc_r+0xfc>
 800f282:	f000 f869 	bl	800f358 <__malloc_lock>
 800f286:	f8d8 3000 	ldr.w	r3, [r8]
 800f28a:	461c      	mov	r4, r3
 800f28c:	bb44      	cbnz	r4, 800f2e0 <_malloc_r+0x88>
 800f28e:	4629      	mov	r1, r5
 800f290:	4630      	mov	r0, r6
 800f292:	f7ff ffbf 	bl	800f214 <sbrk_aligned>
 800f296:	1c43      	adds	r3, r0, #1
 800f298:	4604      	mov	r4, r0
 800f29a:	d158      	bne.n	800f34e <_malloc_r+0xf6>
 800f29c:	f8d8 4000 	ldr.w	r4, [r8]
 800f2a0:	4627      	mov	r7, r4
 800f2a2:	2f00      	cmp	r7, #0
 800f2a4:	d143      	bne.n	800f32e <_malloc_r+0xd6>
 800f2a6:	2c00      	cmp	r4, #0
 800f2a8:	d04b      	beq.n	800f342 <_malloc_r+0xea>
 800f2aa:	6823      	ldr	r3, [r4, #0]
 800f2ac:	4639      	mov	r1, r7
 800f2ae:	4630      	mov	r0, r6
 800f2b0:	eb04 0903 	add.w	r9, r4, r3
 800f2b4:	f000 fc7c 	bl	800fbb0 <_sbrk_r>
 800f2b8:	4581      	cmp	r9, r0
 800f2ba:	d142      	bne.n	800f342 <_malloc_r+0xea>
 800f2bc:	6821      	ldr	r1, [r4, #0]
 800f2be:	1a6d      	subs	r5, r5, r1
 800f2c0:	4629      	mov	r1, r5
 800f2c2:	4630      	mov	r0, r6
 800f2c4:	f7ff ffa6 	bl	800f214 <sbrk_aligned>
 800f2c8:	3001      	adds	r0, #1
 800f2ca:	d03a      	beq.n	800f342 <_malloc_r+0xea>
 800f2cc:	6823      	ldr	r3, [r4, #0]
 800f2ce:	442b      	add	r3, r5
 800f2d0:	6023      	str	r3, [r4, #0]
 800f2d2:	f8d8 3000 	ldr.w	r3, [r8]
 800f2d6:	685a      	ldr	r2, [r3, #4]
 800f2d8:	bb62      	cbnz	r2, 800f334 <_malloc_r+0xdc>
 800f2da:	f8c8 7000 	str.w	r7, [r8]
 800f2de:	e00f      	b.n	800f300 <_malloc_r+0xa8>
 800f2e0:	6822      	ldr	r2, [r4, #0]
 800f2e2:	1b52      	subs	r2, r2, r5
 800f2e4:	d420      	bmi.n	800f328 <_malloc_r+0xd0>
 800f2e6:	2a0b      	cmp	r2, #11
 800f2e8:	d917      	bls.n	800f31a <_malloc_r+0xc2>
 800f2ea:	1961      	adds	r1, r4, r5
 800f2ec:	42a3      	cmp	r3, r4
 800f2ee:	6025      	str	r5, [r4, #0]
 800f2f0:	bf18      	it	ne
 800f2f2:	6059      	strne	r1, [r3, #4]
 800f2f4:	6863      	ldr	r3, [r4, #4]
 800f2f6:	bf08      	it	eq
 800f2f8:	f8c8 1000 	streq.w	r1, [r8]
 800f2fc:	5162      	str	r2, [r4, r5]
 800f2fe:	604b      	str	r3, [r1, #4]
 800f300:	4630      	mov	r0, r6
 800f302:	f000 f82f 	bl	800f364 <__malloc_unlock>
 800f306:	f104 000b 	add.w	r0, r4, #11
 800f30a:	1d23      	adds	r3, r4, #4
 800f30c:	f020 0007 	bic.w	r0, r0, #7
 800f310:	1ac2      	subs	r2, r0, r3
 800f312:	bf1c      	itt	ne
 800f314:	1a1b      	subne	r3, r3, r0
 800f316:	50a3      	strne	r3, [r4, r2]
 800f318:	e7af      	b.n	800f27a <_malloc_r+0x22>
 800f31a:	6862      	ldr	r2, [r4, #4]
 800f31c:	42a3      	cmp	r3, r4
 800f31e:	bf0c      	ite	eq
 800f320:	f8c8 2000 	streq.w	r2, [r8]
 800f324:	605a      	strne	r2, [r3, #4]
 800f326:	e7eb      	b.n	800f300 <_malloc_r+0xa8>
 800f328:	4623      	mov	r3, r4
 800f32a:	6864      	ldr	r4, [r4, #4]
 800f32c:	e7ae      	b.n	800f28c <_malloc_r+0x34>
 800f32e:	463c      	mov	r4, r7
 800f330:	687f      	ldr	r7, [r7, #4]
 800f332:	e7b6      	b.n	800f2a2 <_malloc_r+0x4a>
 800f334:	461a      	mov	r2, r3
 800f336:	685b      	ldr	r3, [r3, #4]
 800f338:	42a3      	cmp	r3, r4
 800f33a:	d1fb      	bne.n	800f334 <_malloc_r+0xdc>
 800f33c:	2300      	movs	r3, #0
 800f33e:	6053      	str	r3, [r2, #4]
 800f340:	e7de      	b.n	800f300 <_malloc_r+0xa8>
 800f342:	230c      	movs	r3, #12
 800f344:	6033      	str	r3, [r6, #0]
 800f346:	4630      	mov	r0, r6
 800f348:	f000 f80c 	bl	800f364 <__malloc_unlock>
 800f34c:	e794      	b.n	800f278 <_malloc_r+0x20>
 800f34e:	6005      	str	r5, [r0, #0]
 800f350:	e7d6      	b.n	800f300 <_malloc_r+0xa8>
 800f352:	bf00      	nop
 800f354:	2000853c 	.word	0x2000853c

0800f358 <__malloc_lock>:
 800f358:	4801      	ldr	r0, [pc, #4]	@ (800f360 <__malloc_lock+0x8>)
 800f35a:	f7ff beda 	b.w	800f112 <__retarget_lock_acquire_recursive>
 800f35e:	bf00      	nop
 800f360:	20008534 	.word	0x20008534

0800f364 <__malloc_unlock>:
 800f364:	4801      	ldr	r0, [pc, #4]	@ (800f36c <__malloc_unlock+0x8>)
 800f366:	f7ff bed5 	b.w	800f114 <__retarget_lock_release_recursive>
 800f36a:	bf00      	nop
 800f36c:	20008534 	.word	0x20008534

0800f370 <__sfputc_r>:
 800f370:	6893      	ldr	r3, [r2, #8]
 800f372:	3b01      	subs	r3, #1
 800f374:	2b00      	cmp	r3, #0
 800f376:	b410      	push	{r4}
 800f378:	6093      	str	r3, [r2, #8]
 800f37a:	da08      	bge.n	800f38e <__sfputc_r+0x1e>
 800f37c:	6994      	ldr	r4, [r2, #24]
 800f37e:	42a3      	cmp	r3, r4
 800f380:	db01      	blt.n	800f386 <__sfputc_r+0x16>
 800f382:	290a      	cmp	r1, #10
 800f384:	d103      	bne.n	800f38e <__sfputc_r+0x1e>
 800f386:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f38a:	f000 bb7d 	b.w	800fa88 <__swbuf_r>
 800f38e:	6813      	ldr	r3, [r2, #0]
 800f390:	1c58      	adds	r0, r3, #1
 800f392:	6010      	str	r0, [r2, #0]
 800f394:	7019      	strb	r1, [r3, #0]
 800f396:	4608      	mov	r0, r1
 800f398:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f39c:	4770      	bx	lr

0800f39e <__sfputs_r>:
 800f39e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3a0:	4606      	mov	r6, r0
 800f3a2:	460f      	mov	r7, r1
 800f3a4:	4614      	mov	r4, r2
 800f3a6:	18d5      	adds	r5, r2, r3
 800f3a8:	42ac      	cmp	r4, r5
 800f3aa:	d101      	bne.n	800f3b0 <__sfputs_r+0x12>
 800f3ac:	2000      	movs	r0, #0
 800f3ae:	e007      	b.n	800f3c0 <__sfputs_r+0x22>
 800f3b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3b4:	463a      	mov	r2, r7
 800f3b6:	4630      	mov	r0, r6
 800f3b8:	f7ff ffda 	bl	800f370 <__sfputc_r>
 800f3bc:	1c43      	adds	r3, r0, #1
 800f3be:	d1f3      	bne.n	800f3a8 <__sfputs_r+0xa>
 800f3c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f3c4 <_vfiprintf_r>:
 800f3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3c8:	460d      	mov	r5, r1
 800f3ca:	b09d      	sub	sp, #116	@ 0x74
 800f3cc:	4614      	mov	r4, r2
 800f3ce:	4698      	mov	r8, r3
 800f3d0:	4606      	mov	r6, r0
 800f3d2:	b118      	cbz	r0, 800f3dc <_vfiprintf_r+0x18>
 800f3d4:	6a03      	ldr	r3, [r0, #32]
 800f3d6:	b90b      	cbnz	r3, 800f3dc <_vfiprintf_r+0x18>
 800f3d8:	f7ff fd8c 	bl	800eef4 <__sinit>
 800f3dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f3de:	07d9      	lsls	r1, r3, #31
 800f3e0:	d405      	bmi.n	800f3ee <_vfiprintf_r+0x2a>
 800f3e2:	89ab      	ldrh	r3, [r5, #12]
 800f3e4:	059a      	lsls	r2, r3, #22
 800f3e6:	d402      	bmi.n	800f3ee <_vfiprintf_r+0x2a>
 800f3e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f3ea:	f7ff fe92 	bl	800f112 <__retarget_lock_acquire_recursive>
 800f3ee:	89ab      	ldrh	r3, [r5, #12]
 800f3f0:	071b      	lsls	r3, r3, #28
 800f3f2:	d501      	bpl.n	800f3f8 <_vfiprintf_r+0x34>
 800f3f4:	692b      	ldr	r3, [r5, #16]
 800f3f6:	b99b      	cbnz	r3, 800f420 <_vfiprintf_r+0x5c>
 800f3f8:	4629      	mov	r1, r5
 800f3fa:	4630      	mov	r0, r6
 800f3fc:	f000 fb82 	bl	800fb04 <__swsetup_r>
 800f400:	b170      	cbz	r0, 800f420 <_vfiprintf_r+0x5c>
 800f402:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f404:	07dc      	lsls	r4, r3, #31
 800f406:	d504      	bpl.n	800f412 <_vfiprintf_r+0x4e>
 800f408:	f04f 30ff 	mov.w	r0, #4294967295
 800f40c:	b01d      	add	sp, #116	@ 0x74
 800f40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f412:	89ab      	ldrh	r3, [r5, #12]
 800f414:	0598      	lsls	r0, r3, #22
 800f416:	d4f7      	bmi.n	800f408 <_vfiprintf_r+0x44>
 800f418:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f41a:	f7ff fe7b 	bl	800f114 <__retarget_lock_release_recursive>
 800f41e:	e7f3      	b.n	800f408 <_vfiprintf_r+0x44>
 800f420:	2300      	movs	r3, #0
 800f422:	9309      	str	r3, [sp, #36]	@ 0x24
 800f424:	2320      	movs	r3, #32
 800f426:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f42a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f42e:	2330      	movs	r3, #48	@ 0x30
 800f430:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f5e0 <_vfiprintf_r+0x21c>
 800f434:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f438:	f04f 0901 	mov.w	r9, #1
 800f43c:	4623      	mov	r3, r4
 800f43e:	469a      	mov	sl, r3
 800f440:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f444:	b10a      	cbz	r2, 800f44a <_vfiprintf_r+0x86>
 800f446:	2a25      	cmp	r2, #37	@ 0x25
 800f448:	d1f9      	bne.n	800f43e <_vfiprintf_r+0x7a>
 800f44a:	ebba 0b04 	subs.w	fp, sl, r4
 800f44e:	d00b      	beq.n	800f468 <_vfiprintf_r+0xa4>
 800f450:	465b      	mov	r3, fp
 800f452:	4622      	mov	r2, r4
 800f454:	4629      	mov	r1, r5
 800f456:	4630      	mov	r0, r6
 800f458:	f7ff ffa1 	bl	800f39e <__sfputs_r>
 800f45c:	3001      	adds	r0, #1
 800f45e:	f000 80a7 	beq.w	800f5b0 <_vfiprintf_r+0x1ec>
 800f462:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f464:	445a      	add	r2, fp
 800f466:	9209      	str	r2, [sp, #36]	@ 0x24
 800f468:	f89a 3000 	ldrb.w	r3, [sl]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	f000 809f 	beq.w	800f5b0 <_vfiprintf_r+0x1ec>
 800f472:	2300      	movs	r3, #0
 800f474:	f04f 32ff 	mov.w	r2, #4294967295
 800f478:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f47c:	f10a 0a01 	add.w	sl, sl, #1
 800f480:	9304      	str	r3, [sp, #16]
 800f482:	9307      	str	r3, [sp, #28]
 800f484:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f488:	931a      	str	r3, [sp, #104]	@ 0x68
 800f48a:	4654      	mov	r4, sl
 800f48c:	2205      	movs	r2, #5
 800f48e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f492:	4853      	ldr	r0, [pc, #332]	@ (800f5e0 <_vfiprintf_r+0x21c>)
 800f494:	f7f0 feb4 	bl	8000200 <memchr>
 800f498:	9a04      	ldr	r2, [sp, #16]
 800f49a:	b9d8      	cbnz	r0, 800f4d4 <_vfiprintf_r+0x110>
 800f49c:	06d1      	lsls	r1, r2, #27
 800f49e:	bf44      	itt	mi
 800f4a0:	2320      	movmi	r3, #32
 800f4a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f4a6:	0713      	lsls	r3, r2, #28
 800f4a8:	bf44      	itt	mi
 800f4aa:	232b      	movmi	r3, #43	@ 0x2b
 800f4ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f4b0:	f89a 3000 	ldrb.w	r3, [sl]
 800f4b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800f4b6:	d015      	beq.n	800f4e4 <_vfiprintf_r+0x120>
 800f4b8:	9a07      	ldr	r2, [sp, #28]
 800f4ba:	4654      	mov	r4, sl
 800f4bc:	2000      	movs	r0, #0
 800f4be:	f04f 0c0a 	mov.w	ip, #10
 800f4c2:	4621      	mov	r1, r4
 800f4c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f4c8:	3b30      	subs	r3, #48	@ 0x30
 800f4ca:	2b09      	cmp	r3, #9
 800f4cc:	d94b      	bls.n	800f566 <_vfiprintf_r+0x1a2>
 800f4ce:	b1b0      	cbz	r0, 800f4fe <_vfiprintf_r+0x13a>
 800f4d0:	9207      	str	r2, [sp, #28]
 800f4d2:	e014      	b.n	800f4fe <_vfiprintf_r+0x13a>
 800f4d4:	eba0 0308 	sub.w	r3, r0, r8
 800f4d8:	fa09 f303 	lsl.w	r3, r9, r3
 800f4dc:	4313      	orrs	r3, r2
 800f4de:	9304      	str	r3, [sp, #16]
 800f4e0:	46a2      	mov	sl, r4
 800f4e2:	e7d2      	b.n	800f48a <_vfiprintf_r+0xc6>
 800f4e4:	9b03      	ldr	r3, [sp, #12]
 800f4e6:	1d19      	adds	r1, r3, #4
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	9103      	str	r1, [sp, #12]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	bfbb      	ittet	lt
 800f4f0:	425b      	neglt	r3, r3
 800f4f2:	f042 0202 	orrlt.w	r2, r2, #2
 800f4f6:	9307      	strge	r3, [sp, #28]
 800f4f8:	9307      	strlt	r3, [sp, #28]
 800f4fa:	bfb8      	it	lt
 800f4fc:	9204      	strlt	r2, [sp, #16]
 800f4fe:	7823      	ldrb	r3, [r4, #0]
 800f500:	2b2e      	cmp	r3, #46	@ 0x2e
 800f502:	d10a      	bne.n	800f51a <_vfiprintf_r+0x156>
 800f504:	7863      	ldrb	r3, [r4, #1]
 800f506:	2b2a      	cmp	r3, #42	@ 0x2a
 800f508:	d132      	bne.n	800f570 <_vfiprintf_r+0x1ac>
 800f50a:	9b03      	ldr	r3, [sp, #12]
 800f50c:	1d1a      	adds	r2, r3, #4
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	9203      	str	r2, [sp, #12]
 800f512:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f516:	3402      	adds	r4, #2
 800f518:	9305      	str	r3, [sp, #20]
 800f51a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f5f0 <_vfiprintf_r+0x22c>
 800f51e:	7821      	ldrb	r1, [r4, #0]
 800f520:	2203      	movs	r2, #3
 800f522:	4650      	mov	r0, sl
 800f524:	f7f0 fe6c 	bl	8000200 <memchr>
 800f528:	b138      	cbz	r0, 800f53a <_vfiprintf_r+0x176>
 800f52a:	9b04      	ldr	r3, [sp, #16]
 800f52c:	eba0 000a 	sub.w	r0, r0, sl
 800f530:	2240      	movs	r2, #64	@ 0x40
 800f532:	4082      	lsls	r2, r0
 800f534:	4313      	orrs	r3, r2
 800f536:	3401      	adds	r4, #1
 800f538:	9304      	str	r3, [sp, #16]
 800f53a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f53e:	4829      	ldr	r0, [pc, #164]	@ (800f5e4 <_vfiprintf_r+0x220>)
 800f540:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f544:	2206      	movs	r2, #6
 800f546:	f7f0 fe5b 	bl	8000200 <memchr>
 800f54a:	2800      	cmp	r0, #0
 800f54c:	d03f      	beq.n	800f5ce <_vfiprintf_r+0x20a>
 800f54e:	4b26      	ldr	r3, [pc, #152]	@ (800f5e8 <_vfiprintf_r+0x224>)
 800f550:	bb1b      	cbnz	r3, 800f59a <_vfiprintf_r+0x1d6>
 800f552:	9b03      	ldr	r3, [sp, #12]
 800f554:	3307      	adds	r3, #7
 800f556:	f023 0307 	bic.w	r3, r3, #7
 800f55a:	3308      	adds	r3, #8
 800f55c:	9303      	str	r3, [sp, #12]
 800f55e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f560:	443b      	add	r3, r7
 800f562:	9309      	str	r3, [sp, #36]	@ 0x24
 800f564:	e76a      	b.n	800f43c <_vfiprintf_r+0x78>
 800f566:	fb0c 3202 	mla	r2, ip, r2, r3
 800f56a:	460c      	mov	r4, r1
 800f56c:	2001      	movs	r0, #1
 800f56e:	e7a8      	b.n	800f4c2 <_vfiprintf_r+0xfe>
 800f570:	2300      	movs	r3, #0
 800f572:	3401      	adds	r4, #1
 800f574:	9305      	str	r3, [sp, #20]
 800f576:	4619      	mov	r1, r3
 800f578:	f04f 0c0a 	mov.w	ip, #10
 800f57c:	4620      	mov	r0, r4
 800f57e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f582:	3a30      	subs	r2, #48	@ 0x30
 800f584:	2a09      	cmp	r2, #9
 800f586:	d903      	bls.n	800f590 <_vfiprintf_r+0x1cc>
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d0c6      	beq.n	800f51a <_vfiprintf_r+0x156>
 800f58c:	9105      	str	r1, [sp, #20]
 800f58e:	e7c4      	b.n	800f51a <_vfiprintf_r+0x156>
 800f590:	fb0c 2101 	mla	r1, ip, r1, r2
 800f594:	4604      	mov	r4, r0
 800f596:	2301      	movs	r3, #1
 800f598:	e7f0      	b.n	800f57c <_vfiprintf_r+0x1b8>
 800f59a:	ab03      	add	r3, sp, #12
 800f59c:	9300      	str	r3, [sp, #0]
 800f59e:	462a      	mov	r2, r5
 800f5a0:	4b12      	ldr	r3, [pc, #72]	@ (800f5ec <_vfiprintf_r+0x228>)
 800f5a2:	a904      	add	r1, sp, #16
 800f5a4:	4630      	mov	r0, r6
 800f5a6:	f3af 8000 	nop.w
 800f5aa:	4607      	mov	r7, r0
 800f5ac:	1c78      	adds	r0, r7, #1
 800f5ae:	d1d6      	bne.n	800f55e <_vfiprintf_r+0x19a>
 800f5b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f5b2:	07d9      	lsls	r1, r3, #31
 800f5b4:	d405      	bmi.n	800f5c2 <_vfiprintf_r+0x1fe>
 800f5b6:	89ab      	ldrh	r3, [r5, #12]
 800f5b8:	059a      	lsls	r2, r3, #22
 800f5ba:	d402      	bmi.n	800f5c2 <_vfiprintf_r+0x1fe>
 800f5bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f5be:	f7ff fda9 	bl	800f114 <__retarget_lock_release_recursive>
 800f5c2:	89ab      	ldrh	r3, [r5, #12]
 800f5c4:	065b      	lsls	r3, r3, #25
 800f5c6:	f53f af1f 	bmi.w	800f408 <_vfiprintf_r+0x44>
 800f5ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f5cc:	e71e      	b.n	800f40c <_vfiprintf_r+0x48>
 800f5ce:	ab03      	add	r3, sp, #12
 800f5d0:	9300      	str	r3, [sp, #0]
 800f5d2:	462a      	mov	r2, r5
 800f5d4:	4b05      	ldr	r3, [pc, #20]	@ (800f5ec <_vfiprintf_r+0x228>)
 800f5d6:	a904      	add	r1, sp, #16
 800f5d8:	4630      	mov	r0, r6
 800f5da:	f000 f879 	bl	800f6d0 <_printf_i>
 800f5de:	e7e4      	b.n	800f5aa <_vfiprintf_r+0x1e6>
 800f5e0:	08012939 	.word	0x08012939
 800f5e4:	08012943 	.word	0x08012943
 800f5e8:	00000000 	.word	0x00000000
 800f5ec:	0800f39f 	.word	0x0800f39f
 800f5f0:	0801293f 	.word	0x0801293f

0800f5f4 <_printf_common>:
 800f5f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5f8:	4616      	mov	r6, r2
 800f5fa:	4698      	mov	r8, r3
 800f5fc:	688a      	ldr	r2, [r1, #8]
 800f5fe:	690b      	ldr	r3, [r1, #16]
 800f600:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f604:	4293      	cmp	r3, r2
 800f606:	bfb8      	it	lt
 800f608:	4613      	movlt	r3, r2
 800f60a:	6033      	str	r3, [r6, #0]
 800f60c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f610:	4607      	mov	r7, r0
 800f612:	460c      	mov	r4, r1
 800f614:	b10a      	cbz	r2, 800f61a <_printf_common+0x26>
 800f616:	3301      	adds	r3, #1
 800f618:	6033      	str	r3, [r6, #0]
 800f61a:	6823      	ldr	r3, [r4, #0]
 800f61c:	0699      	lsls	r1, r3, #26
 800f61e:	bf42      	ittt	mi
 800f620:	6833      	ldrmi	r3, [r6, #0]
 800f622:	3302      	addmi	r3, #2
 800f624:	6033      	strmi	r3, [r6, #0]
 800f626:	6825      	ldr	r5, [r4, #0]
 800f628:	f015 0506 	ands.w	r5, r5, #6
 800f62c:	d106      	bne.n	800f63c <_printf_common+0x48>
 800f62e:	f104 0a19 	add.w	sl, r4, #25
 800f632:	68e3      	ldr	r3, [r4, #12]
 800f634:	6832      	ldr	r2, [r6, #0]
 800f636:	1a9b      	subs	r3, r3, r2
 800f638:	42ab      	cmp	r3, r5
 800f63a:	dc26      	bgt.n	800f68a <_printf_common+0x96>
 800f63c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f640:	6822      	ldr	r2, [r4, #0]
 800f642:	3b00      	subs	r3, #0
 800f644:	bf18      	it	ne
 800f646:	2301      	movne	r3, #1
 800f648:	0692      	lsls	r2, r2, #26
 800f64a:	d42b      	bmi.n	800f6a4 <_printf_common+0xb0>
 800f64c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f650:	4641      	mov	r1, r8
 800f652:	4638      	mov	r0, r7
 800f654:	47c8      	blx	r9
 800f656:	3001      	adds	r0, #1
 800f658:	d01e      	beq.n	800f698 <_printf_common+0xa4>
 800f65a:	6823      	ldr	r3, [r4, #0]
 800f65c:	6922      	ldr	r2, [r4, #16]
 800f65e:	f003 0306 	and.w	r3, r3, #6
 800f662:	2b04      	cmp	r3, #4
 800f664:	bf02      	ittt	eq
 800f666:	68e5      	ldreq	r5, [r4, #12]
 800f668:	6833      	ldreq	r3, [r6, #0]
 800f66a:	1aed      	subeq	r5, r5, r3
 800f66c:	68a3      	ldr	r3, [r4, #8]
 800f66e:	bf0c      	ite	eq
 800f670:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f674:	2500      	movne	r5, #0
 800f676:	4293      	cmp	r3, r2
 800f678:	bfc4      	itt	gt
 800f67a:	1a9b      	subgt	r3, r3, r2
 800f67c:	18ed      	addgt	r5, r5, r3
 800f67e:	2600      	movs	r6, #0
 800f680:	341a      	adds	r4, #26
 800f682:	42b5      	cmp	r5, r6
 800f684:	d11a      	bne.n	800f6bc <_printf_common+0xc8>
 800f686:	2000      	movs	r0, #0
 800f688:	e008      	b.n	800f69c <_printf_common+0xa8>
 800f68a:	2301      	movs	r3, #1
 800f68c:	4652      	mov	r2, sl
 800f68e:	4641      	mov	r1, r8
 800f690:	4638      	mov	r0, r7
 800f692:	47c8      	blx	r9
 800f694:	3001      	adds	r0, #1
 800f696:	d103      	bne.n	800f6a0 <_printf_common+0xac>
 800f698:	f04f 30ff 	mov.w	r0, #4294967295
 800f69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6a0:	3501      	adds	r5, #1
 800f6a2:	e7c6      	b.n	800f632 <_printf_common+0x3e>
 800f6a4:	18e1      	adds	r1, r4, r3
 800f6a6:	1c5a      	adds	r2, r3, #1
 800f6a8:	2030      	movs	r0, #48	@ 0x30
 800f6aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f6ae:	4422      	add	r2, r4
 800f6b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f6b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f6b8:	3302      	adds	r3, #2
 800f6ba:	e7c7      	b.n	800f64c <_printf_common+0x58>
 800f6bc:	2301      	movs	r3, #1
 800f6be:	4622      	mov	r2, r4
 800f6c0:	4641      	mov	r1, r8
 800f6c2:	4638      	mov	r0, r7
 800f6c4:	47c8      	blx	r9
 800f6c6:	3001      	adds	r0, #1
 800f6c8:	d0e6      	beq.n	800f698 <_printf_common+0xa4>
 800f6ca:	3601      	adds	r6, #1
 800f6cc:	e7d9      	b.n	800f682 <_printf_common+0x8e>
	...

0800f6d0 <_printf_i>:
 800f6d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f6d4:	7e0f      	ldrb	r7, [r1, #24]
 800f6d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f6d8:	2f78      	cmp	r7, #120	@ 0x78
 800f6da:	4691      	mov	r9, r2
 800f6dc:	4680      	mov	r8, r0
 800f6de:	460c      	mov	r4, r1
 800f6e0:	469a      	mov	sl, r3
 800f6e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f6e6:	d807      	bhi.n	800f6f8 <_printf_i+0x28>
 800f6e8:	2f62      	cmp	r7, #98	@ 0x62
 800f6ea:	d80a      	bhi.n	800f702 <_printf_i+0x32>
 800f6ec:	2f00      	cmp	r7, #0
 800f6ee:	f000 80d1 	beq.w	800f894 <_printf_i+0x1c4>
 800f6f2:	2f58      	cmp	r7, #88	@ 0x58
 800f6f4:	f000 80b8 	beq.w	800f868 <_printf_i+0x198>
 800f6f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f6fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f700:	e03a      	b.n	800f778 <_printf_i+0xa8>
 800f702:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f706:	2b15      	cmp	r3, #21
 800f708:	d8f6      	bhi.n	800f6f8 <_printf_i+0x28>
 800f70a:	a101      	add	r1, pc, #4	@ (adr r1, 800f710 <_printf_i+0x40>)
 800f70c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f710:	0800f769 	.word	0x0800f769
 800f714:	0800f77d 	.word	0x0800f77d
 800f718:	0800f6f9 	.word	0x0800f6f9
 800f71c:	0800f6f9 	.word	0x0800f6f9
 800f720:	0800f6f9 	.word	0x0800f6f9
 800f724:	0800f6f9 	.word	0x0800f6f9
 800f728:	0800f77d 	.word	0x0800f77d
 800f72c:	0800f6f9 	.word	0x0800f6f9
 800f730:	0800f6f9 	.word	0x0800f6f9
 800f734:	0800f6f9 	.word	0x0800f6f9
 800f738:	0800f6f9 	.word	0x0800f6f9
 800f73c:	0800f87b 	.word	0x0800f87b
 800f740:	0800f7a7 	.word	0x0800f7a7
 800f744:	0800f835 	.word	0x0800f835
 800f748:	0800f6f9 	.word	0x0800f6f9
 800f74c:	0800f6f9 	.word	0x0800f6f9
 800f750:	0800f89d 	.word	0x0800f89d
 800f754:	0800f6f9 	.word	0x0800f6f9
 800f758:	0800f7a7 	.word	0x0800f7a7
 800f75c:	0800f6f9 	.word	0x0800f6f9
 800f760:	0800f6f9 	.word	0x0800f6f9
 800f764:	0800f83d 	.word	0x0800f83d
 800f768:	6833      	ldr	r3, [r6, #0]
 800f76a:	1d1a      	adds	r2, r3, #4
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	6032      	str	r2, [r6, #0]
 800f770:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f774:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f778:	2301      	movs	r3, #1
 800f77a:	e09c      	b.n	800f8b6 <_printf_i+0x1e6>
 800f77c:	6833      	ldr	r3, [r6, #0]
 800f77e:	6820      	ldr	r0, [r4, #0]
 800f780:	1d19      	adds	r1, r3, #4
 800f782:	6031      	str	r1, [r6, #0]
 800f784:	0606      	lsls	r6, r0, #24
 800f786:	d501      	bpl.n	800f78c <_printf_i+0xbc>
 800f788:	681d      	ldr	r5, [r3, #0]
 800f78a:	e003      	b.n	800f794 <_printf_i+0xc4>
 800f78c:	0645      	lsls	r5, r0, #25
 800f78e:	d5fb      	bpl.n	800f788 <_printf_i+0xb8>
 800f790:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f794:	2d00      	cmp	r5, #0
 800f796:	da03      	bge.n	800f7a0 <_printf_i+0xd0>
 800f798:	232d      	movs	r3, #45	@ 0x2d
 800f79a:	426d      	negs	r5, r5
 800f79c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f7a0:	4858      	ldr	r0, [pc, #352]	@ (800f904 <_printf_i+0x234>)
 800f7a2:	230a      	movs	r3, #10
 800f7a4:	e011      	b.n	800f7ca <_printf_i+0xfa>
 800f7a6:	6821      	ldr	r1, [r4, #0]
 800f7a8:	6833      	ldr	r3, [r6, #0]
 800f7aa:	0608      	lsls	r0, r1, #24
 800f7ac:	f853 5b04 	ldr.w	r5, [r3], #4
 800f7b0:	d402      	bmi.n	800f7b8 <_printf_i+0xe8>
 800f7b2:	0649      	lsls	r1, r1, #25
 800f7b4:	bf48      	it	mi
 800f7b6:	b2ad      	uxthmi	r5, r5
 800f7b8:	2f6f      	cmp	r7, #111	@ 0x6f
 800f7ba:	4852      	ldr	r0, [pc, #328]	@ (800f904 <_printf_i+0x234>)
 800f7bc:	6033      	str	r3, [r6, #0]
 800f7be:	bf14      	ite	ne
 800f7c0:	230a      	movne	r3, #10
 800f7c2:	2308      	moveq	r3, #8
 800f7c4:	2100      	movs	r1, #0
 800f7c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f7ca:	6866      	ldr	r6, [r4, #4]
 800f7cc:	60a6      	str	r6, [r4, #8]
 800f7ce:	2e00      	cmp	r6, #0
 800f7d0:	db05      	blt.n	800f7de <_printf_i+0x10e>
 800f7d2:	6821      	ldr	r1, [r4, #0]
 800f7d4:	432e      	orrs	r6, r5
 800f7d6:	f021 0104 	bic.w	r1, r1, #4
 800f7da:	6021      	str	r1, [r4, #0]
 800f7dc:	d04b      	beq.n	800f876 <_printf_i+0x1a6>
 800f7de:	4616      	mov	r6, r2
 800f7e0:	fbb5 f1f3 	udiv	r1, r5, r3
 800f7e4:	fb03 5711 	mls	r7, r3, r1, r5
 800f7e8:	5dc7      	ldrb	r7, [r0, r7]
 800f7ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f7ee:	462f      	mov	r7, r5
 800f7f0:	42bb      	cmp	r3, r7
 800f7f2:	460d      	mov	r5, r1
 800f7f4:	d9f4      	bls.n	800f7e0 <_printf_i+0x110>
 800f7f6:	2b08      	cmp	r3, #8
 800f7f8:	d10b      	bne.n	800f812 <_printf_i+0x142>
 800f7fa:	6823      	ldr	r3, [r4, #0]
 800f7fc:	07df      	lsls	r7, r3, #31
 800f7fe:	d508      	bpl.n	800f812 <_printf_i+0x142>
 800f800:	6923      	ldr	r3, [r4, #16]
 800f802:	6861      	ldr	r1, [r4, #4]
 800f804:	4299      	cmp	r1, r3
 800f806:	bfde      	ittt	le
 800f808:	2330      	movle	r3, #48	@ 0x30
 800f80a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f80e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f812:	1b92      	subs	r2, r2, r6
 800f814:	6122      	str	r2, [r4, #16]
 800f816:	f8cd a000 	str.w	sl, [sp]
 800f81a:	464b      	mov	r3, r9
 800f81c:	aa03      	add	r2, sp, #12
 800f81e:	4621      	mov	r1, r4
 800f820:	4640      	mov	r0, r8
 800f822:	f7ff fee7 	bl	800f5f4 <_printf_common>
 800f826:	3001      	adds	r0, #1
 800f828:	d14a      	bne.n	800f8c0 <_printf_i+0x1f0>
 800f82a:	f04f 30ff 	mov.w	r0, #4294967295
 800f82e:	b004      	add	sp, #16
 800f830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f834:	6823      	ldr	r3, [r4, #0]
 800f836:	f043 0320 	orr.w	r3, r3, #32
 800f83a:	6023      	str	r3, [r4, #0]
 800f83c:	4832      	ldr	r0, [pc, #200]	@ (800f908 <_printf_i+0x238>)
 800f83e:	2778      	movs	r7, #120	@ 0x78
 800f840:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f844:	6823      	ldr	r3, [r4, #0]
 800f846:	6831      	ldr	r1, [r6, #0]
 800f848:	061f      	lsls	r7, r3, #24
 800f84a:	f851 5b04 	ldr.w	r5, [r1], #4
 800f84e:	d402      	bmi.n	800f856 <_printf_i+0x186>
 800f850:	065f      	lsls	r7, r3, #25
 800f852:	bf48      	it	mi
 800f854:	b2ad      	uxthmi	r5, r5
 800f856:	6031      	str	r1, [r6, #0]
 800f858:	07d9      	lsls	r1, r3, #31
 800f85a:	bf44      	itt	mi
 800f85c:	f043 0320 	orrmi.w	r3, r3, #32
 800f860:	6023      	strmi	r3, [r4, #0]
 800f862:	b11d      	cbz	r5, 800f86c <_printf_i+0x19c>
 800f864:	2310      	movs	r3, #16
 800f866:	e7ad      	b.n	800f7c4 <_printf_i+0xf4>
 800f868:	4826      	ldr	r0, [pc, #152]	@ (800f904 <_printf_i+0x234>)
 800f86a:	e7e9      	b.n	800f840 <_printf_i+0x170>
 800f86c:	6823      	ldr	r3, [r4, #0]
 800f86e:	f023 0320 	bic.w	r3, r3, #32
 800f872:	6023      	str	r3, [r4, #0]
 800f874:	e7f6      	b.n	800f864 <_printf_i+0x194>
 800f876:	4616      	mov	r6, r2
 800f878:	e7bd      	b.n	800f7f6 <_printf_i+0x126>
 800f87a:	6833      	ldr	r3, [r6, #0]
 800f87c:	6825      	ldr	r5, [r4, #0]
 800f87e:	6961      	ldr	r1, [r4, #20]
 800f880:	1d18      	adds	r0, r3, #4
 800f882:	6030      	str	r0, [r6, #0]
 800f884:	062e      	lsls	r6, r5, #24
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	d501      	bpl.n	800f88e <_printf_i+0x1be>
 800f88a:	6019      	str	r1, [r3, #0]
 800f88c:	e002      	b.n	800f894 <_printf_i+0x1c4>
 800f88e:	0668      	lsls	r0, r5, #25
 800f890:	d5fb      	bpl.n	800f88a <_printf_i+0x1ba>
 800f892:	8019      	strh	r1, [r3, #0]
 800f894:	2300      	movs	r3, #0
 800f896:	6123      	str	r3, [r4, #16]
 800f898:	4616      	mov	r6, r2
 800f89a:	e7bc      	b.n	800f816 <_printf_i+0x146>
 800f89c:	6833      	ldr	r3, [r6, #0]
 800f89e:	1d1a      	adds	r2, r3, #4
 800f8a0:	6032      	str	r2, [r6, #0]
 800f8a2:	681e      	ldr	r6, [r3, #0]
 800f8a4:	6862      	ldr	r2, [r4, #4]
 800f8a6:	2100      	movs	r1, #0
 800f8a8:	4630      	mov	r0, r6
 800f8aa:	f7f0 fca9 	bl	8000200 <memchr>
 800f8ae:	b108      	cbz	r0, 800f8b4 <_printf_i+0x1e4>
 800f8b0:	1b80      	subs	r0, r0, r6
 800f8b2:	6060      	str	r0, [r4, #4]
 800f8b4:	6863      	ldr	r3, [r4, #4]
 800f8b6:	6123      	str	r3, [r4, #16]
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f8be:	e7aa      	b.n	800f816 <_printf_i+0x146>
 800f8c0:	6923      	ldr	r3, [r4, #16]
 800f8c2:	4632      	mov	r2, r6
 800f8c4:	4649      	mov	r1, r9
 800f8c6:	4640      	mov	r0, r8
 800f8c8:	47d0      	blx	sl
 800f8ca:	3001      	adds	r0, #1
 800f8cc:	d0ad      	beq.n	800f82a <_printf_i+0x15a>
 800f8ce:	6823      	ldr	r3, [r4, #0]
 800f8d0:	079b      	lsls	r3, r3, #30
 800f8d2:	d413      	bmi.n	800f8fc <_printf_i+0x22c>
 800f8d4:	68e0      	ldr	r0, [r4, #12]
 800f8d6:	9b03      	ldr	r3, [sp, #12]
 800f8d8:	4298      	cmp	r0, r3
 800f8da:	bfb8      	it	lt
 800f8dc:	4618      	movlt	r0, r3
 800f8de:	e7a6      	b.n	800f82e <_printf_i+0x15e>
 800f8e0:	2301      	movs	r3, #1
 800f8e2:	4632      	mov	r2, r6
 800f8e4:	4649      	mov	r1, r9
 800f8e6:	4640      	mov	r0, r8
 800f8e8:	47d0      	blx	sl
 800f8ea:	3001      	adds	r0, #1
 800f8ec:	d09d      	beq.n	800f82a <_printf_i+0x15a>
 800f8ee:	3501      	adds	r5, #1
 800f8f0:	68e3      	ldr	r3, [r4, #12]
 800f8f2:	9903      	ldr	r1, [sp, #12]
 800f8f4:	1a5b      	subs	r3, r3, r1
 800f8f6:	42ab      	cmp	r3, r5
 800f8f8:	dcf2      	bgt.n	800f8e0 <_printf_i+0x210>
 800f8fa:	e7eb      	b.n	800f8d4 <_printf_i+0x204>
 800f8fc:	2500      	movs	r5, #0
 800f8fe:	f104 0619 	add.w	r6, r4, #25
 800f902:	e7f5      	b.n	800f8f0 <_printf_i+0x220>
 800f904:	0801294a 	.word	0x0801294a
 800f908:	0801295b 	.word	0x0801295b

0800f90c <__sflush_r>:
 800f90c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f914:	0716      	lsls	r6, r2, #28
 800f916:	4605      	mov	r5, r0
 800f918:	460c      	mov	r4, r1
 800f91a:	d454      	bmi.n	800f9c6 <__sflush_r+0xba>
 800f91c:	684b      	ldr	r3, [r1, #4]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	dc02      	bgt.n	800f928 <__sflush_r+0x1c>
 800f922:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f924:	2b00      	cmp	r3, #0
 800f926:	dd48      	ble.n	800f9ba <__sflush_r+0xae>
 800f928:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f92a:	2e00      	cmp	r6, #0
 800f92c:	d045      	beq.n	800f9ba <__sflush_r+0xae>
 800f92e:	2300      	movs	r3, #0
 800f930:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f934:	682f      	ldr	r7, [r5, #0]
 800f936:	6a21      	ldr	r1, [r4, #32]
 800f938:	602b      	str	r3, [r5, #0]
 800f93a:	d030      	beq.n	800f99e <__sflush_r+0x92>
 800f93c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f93e:	89a3      	ldrh	r3, [r4, #12]
 800f940:	0759      	lsls	r1, r3, #29
 800f942:	d505      	bpl.n	800f950 <__sflush_r+0x44>
 800f944:	6863      	ldr	r3, [r4, #4]
 800f946:	1ad2      	subs	r2, r2, r3
 800f948:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f94a:	b10b      	cbz	r3, 800f950 <__sflush_r+0x44>
 800f94c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f94e:	1ad2      	subs	r2, r2, r3
 800f950:	2300      	movs	r3, #0
 800f952:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f954:	6a21      	ldr	r1, [r4, #32]
 800f956:	4628      	mov	r0, r5
 800f958:	47b0      	blx	r6
 800f95a:	1c43      	adds	r3, r0, #1
 800f95c:	89a3      	ldrh	r3, [r4, #12]
 800f95e:	d106      	bne.n	800f96e <__sflush_r+0x62>
 800f960:	6829      	ldr	r1, [r5, #0]
 800f962:	291d      	cmp	r1, #29
 800f964:	d82b      	bhi.n	800f9be <__sflush_r+0xb2>
 800f966:	4a2a      	ldr	r2, [pc, #168]	@ (800fa10 <__sflush_r+0x104>)
 800f968:	40ca      	lsrs	r2, r1
 800f96a:	07d6      	lsls	r6, r2, #31
 800f96c:	d527      	bpl.n	800f9be <__sflush_r+0xb2>
 800f96e:	2200      	movs	r2, #0
 800f970:	6062      	str	r2, [r4, #4]
 800f972:	04d9      	lsls	r1, r3, #19
 800f974:	6922      	ldr	r2, [r4, #16]
 800f976:	6022      	str	r2, [r4, #0]
 800f978:	d504      	bpl.n	800f984 <__sflush_r+0x78>
 800f97a:	1c42      	adds	r2, r0, #1
 800f97c:	d101      	bne.n	800f982 <__sflush_r+0x76>
 800f97e:	682b      	ldr	r3, [r5, #0]
 800f980:	b903      	cbnz	r3, 800f984 <__sflush_r+0x78>
 800f982:	6560      	str	r0, [r4, #84]	@ 0x54
 800f984:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f986:	602f      	str	r7, [r5, #0]
 800f988:	b1b9      	cbz	r1, 800f9ba <__sflush_r+0xae>
 800f98a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f98e:	4299      	cmp	r1, r3
 800f990:	d002      	beq.n	800f998 <__sflush_r+0x8c>
 800f992:	4628      	mov	r0, r5
 800f994:	f7ff fbec 	bl	800f170 <_free_r>
 800f998:	2300      	movs	r3, #0
 800f99a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f99c:	e00d      	b.n	800f9ba <__sflush_r+0xae>
 800f99e:	2301      	movs	r3, #1
 800f9a0:	4628      	mov	r0, r5
 800f9a2:	47b0      	blx	r6
 800f9a4:	4602      	mov	r2, r0
 800f9a6:	1c50      	adds	r0, r2, #1
 800f9a8:	d1c9      	bne.n	800f93e <__sflush_r+0x32>
 800f9aa:	682b      	ldr	r3, [r5, #0]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d0c6      	beq.n	800f93e <__sflush_r+0x32>
 800f9b0:	2b1d      	cmp	r3, #29
 800f9b2:	d001      	beq.n	800f9b8 <__sflush_r+0xac>
 800f9b4:	2b16      	cmp	r3, #22
 800f9b6:	d11e      	bne.n	800f9f6 <__sflush_r+0xea>
 800f9b8:	602f      	str	r7, [r5, #0]
 800f9ba:	2000      	movs	r0, #0
 800f9bc:	e022      	b.n	800fa04 <__sflush_r+0xf8>
 800f9be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9c2:	b21b      	sxth	r3, r3
 800f9c4:	e01b      	b.n	800f9fe <__sflush_r+0xf2>
 800f9c6:	690f      	ldr	r7, [r1, #16]
 800f9c8:	2f00      	cmp	r7, #0
 800f9ca:	d0f6      	beq.n	800f9ba <__sflush_r+0xae>
 800f9cc:	0793      	lsls	r3, r2, #30
 800f9ce:	680e      	ldr	r6, [r1, #0]
 800f9d0:	bf08      	it	eq
 800f9d2:	694b      	ldreq	r3, [r1, #20]
 800f9d4:	600f      	str	r7, [r1, #0]
 800f9d6:	bf18      	it	ne
 800f9d8:	2300      	movne	r3, #0
 800f9da:	eba6 0807 	sub.w	r8, r6, r7
 800f9de:	608b      	str	r3, [r1, #8]
 800f9e0:	f1b8 0f00 	cmp.w	r8, #0
 800f9e4:	dde9      	ble.n	800f9ba <__sflush_r+0xae>
 800f9e6:	6a21      	ldr	r1, [r4, #32]
 800f9e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f9ea:	4643      	mov	r3, r8
 800f9ec:	463a      	mov	r2, r7
 800f9ee:	4628      	mov	r0, r5
 800f9f0:	47b0      	blx	r6
 800f9f2:	2800      	cmp	r0, #0
 800f9f4:	dc08      	bgt.n	800fa08 <__sflush_r+0xfc>
 800f9f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9fe:	81a3      	strh	r3, [r4, #12]
 800fa00:	f04f 30ff 	mov.w	r0, #4294967295
 800fa04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa08:	4407      	add	r7, r0
 800fa0a:	eba8 0800 	sub.w	r8, r8, r0
 800fa0e:	e7e7      	b.n	800f9e0 <__sflush_r+0xd4>
 800fa10:	20400001 	.word	0x20400001

0800fa14 <_fflush_r>:
 800fa14:	b538      	push	{r3, r4, r5, lr}
 800fa16:	690b      	ldr	r3, [r1, #16]
 800fa18:	4605      	mov	r5, r0
 800fa1a:	460c      	mov	r4, r1
 800fa1c:	b913      	cbnz	r3, 800fa24 <_fflush_r+0x10>
 800fa1e:	2500      	movs	r5, #0
 800fa20:	4628      	mov	r0, r5
 800fa22:	bd38      	pop	{r3, r4, r5, pc}
 800fa24:	b118      	cbz	r0, 800fa2e <_fflush_r+0x1a>
 800fa26:	6a03      	ldr	r3, [r0, #32]
 800fa28:	b90b      	cbnz	r3, 800fa2e <_fflush_r+0x1a>
 800fa2a:	f7ff fa63 	bl	800eef4 <__sinit>
 800fa2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d0f3      	beq.n	800fa1e <_fflush_r+0xa>
 800fa36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fa38:	07d0      	lsls	r0, r2, #31
 800fa3a:	d404      	bmi.n	800fa46 <_fflush_r+0x32>
 800fa3c:	0599      	lsls	r1, r3, #22
 800fa3e:	d402      	bmi.n	800fa46 <_fflush_r+0x32>
 800fa40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fa42:	f7ff fb66 	bl	800f112 <__retarget_lock_acquire_recursive>
 800fa46:	4628      	mov	r0, r5
 800fa48:	4621      	mov	r1, r4
 800fa4a:	f7ff ff5f 	bl	800f90c <__sflush_r>
 800fa4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fa50:	07da      	lsls	r2, r3, #31
 800fa52:	4605      	mov	r5, r0
 800fa54:	d4e4      	bmi.n	800fa20 <_fflush_r+0xc>
 800fa56:	89a3      	ldrh	r3, [r4, #12]
 800fa58:	059b      	lsls	r3, r3, #22
 800fa5a:	d4e1      	bmi.n	800fa20 <_fflush_r+0xc>
 800fa5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fa5e:	f7ff fb59 	bl	800f114 <__retarget_lock_release_recursive>
 800fa62:	e7dd      	b.n	800fa20 <_fflush_r+0xc>

0800fa64 <fiprintf>:
 800fa64:	b40e      	push	{r1, r2, r3}
 800fa66:	b503      	push	{r0, r1, lr}
 800fa68:	4601      	mov	r1, r0
 800fa6a:	ab03      	add	r3, sp, #12
 800fa6c:	4805      	ldr	r0, [pc, #20]	@ (800fa84 <fiprintf+0x20>)
 800fa6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa72:	6800      	ldr	r0, [r0, #0]
 800fa74:	9301      	str	r3, [sp, #4]
 800fa76:	f7ff fca5 	bl	800f3c4 <_vfiprintf_r>
 800fa7a:	b002      	add	sp, #8
 800fa7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa80:	b003      	add	sp, #12
 800fa82:	4770      	bx	lr
 800fa84:	20000038 	.word	0x20000038

0800fa88 <__swbuf_r>:
 800fa88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa8a:	460e      	mov	r6, r1
 800fa8c:	4614      	mov	r4, r2
 800fa8e:	4605      	mov	r5, r0
 800fa90:	b118      	cbz	r0, 800fa9a <__swbuf_r+0x12>
 800fa92:	6a03      	ldr	r3, [r0, #32]
 800fa94:	b90b      	cbnz	r3, 800fa9a <__swbuf_r+0x12>
 800fa96:	f7ff fa2d 	bl	800eef4 <__sinit>
 800fa9a:	69a3      	ldr	r3, [r4, #24]
 800fa9c:	60a3      	str	r3, [r4, #8]
 800fa9e:	89a3      	ldrh	r3, [r4, #12]
 800faa0:	071a      	lsls	r2, r3, #28
 800faa2:	d501      	bpl.n	800faa8 <__swbuf_r+0x20>
 800faa4:	6923      	ldr	r3, [r4, #16]
 800faa6:	b943      	cbnz	r3, 800faba <__swbuf_r+0x32>
 800faa8:	4621      	mov	r1, r4
 800faaa:	4628      	mov	r0, r5
 800faac:	f000 f82a 	bl	800fb04 <__swsetup_r>
 800fab0:	b118      	cbz	r0, 800faba <__swbuf_r+0x32>
 800fab2:	f04f 37ff 	mov.w	r7, #4294967295
 800fab6:	4638      	mov	r0, r7
 800fab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800faba:	6823      	ldr	r3, [r4, #0]
 800fabc:	6922      	ldr	r2, [r4, #16]
 800fabe:	1a98      	subs	r0, r3, r2
 800fac0:	6963      	ldr	r3, [r4, #20]
 800fac2:	b2f6      	uxtb	r6, r6
 800fac4:	4283      	cmp	r3, r0
 800fac6:	4637      	mov	r7, r6
 800fac8:	dc05      	bgt.n	800fad6 <__swbuf_r+0x4e>
 800faca:	4621      	mov	r1, r4
 800facc:	4628      	mov	r0, r5
 800face:	f7ff ffa1 	bl	800fa14 <_fflush_r>
 800fad2:	2800      	cmp	r0, #0
 800fad4:	d1ed      	bne.n	800fab2 <__swbuf_r+0x2a>
 800fad6:	68a3      	ldr	r3, [r4, #8]
 800fad8:	3b01      	subs	r3, #1
 800fada:	60a3      	str	r3, [r4, #8]
 800fadc:	6823      	ldr	r3, [r4, #0]
 800fade:	1c5a      	adds	r2, r3, #1
 800fae0:	6022      	str	r2, [r4, #0]
 800fae2:	701e      	strb	r6, [r3, #0]
 800fae4:	6962      	ldr	r2, [r4, #20]
 800fae6:	1c43      	adds	r3, r0, #1
 800fae8:	429a      	cmp	r2, r3
 800faea:	d004      	beq.n	800faf6 <__swbuf_r+0x6e>
 800faec:	89a3      	ldrh	r3, [r4, #12]
 800faee:	07db      	lsls	r3, r3, #31
 800faf0:	d5e1      	bpl.n	800fab6 <__swbuf_r+0x2e>
 800faf2:	2e0a      	cmp	r6, #10
 800faf4:	d1df      	bne.n	800fab6 <__swbuf_r+0x2e>
 800faf6:	4621      	mov	r1, r4
 800faf8:	4628      	mov	r0, r5
 800fafa:	f7ff ff8b 	bl	800fa14 <_fflush_r>
 800fafe:	2800      	cmp	r0, #0
 800fb00:	d0d9      	beq.n	800fab6 <__swbuf_r+0x2e>
 800fb02:	e7d6      	b.n	800fab2 <__swbuf_r+0x2a>

0800fb04 <__swsetup_r>:
 800fb04:	b538      	push	{r3, r4, r5, lr}
 800fb06:	4b29      	ldr	r3, [pc, #164]	@ (800fbac <__swsetup_r+0xa8>)
 800fb08:	4605      	mov	r5, r0
 800fb0a:	6818      	ldr	r0, [r3, #0]
 800fb0c:	460c      	mov	r4, r1
 800fb0e:	b118      	cbz	r0, 800fb18 <__swsetup_r+0x14>
 800fb10:	6a03      	ldr	r3, [r0, #32]
 800fb12:	b90b      	cbnz	r3, 800fb18 <__swsetup_r+0x14>
 800fb14:	f7ff f9ee 	bl	800eef4 <__sinit>
 800fb18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb1c:	0719      	lsls	r1, r3, #28
 800fb1e:	d422      	bmi.n	800fb66 <__swsetup_r+0x62>
 800fb20:	06da      	lsls	r2, r3, #27
 800fb22:	d407      	bmi.n	800fb34 <__swsetup_r+0x30>
 800fb24:	2209      	movs	r2, #9
 800fb26:	602a      	str	r2, [r5, #0]
 800fb28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb2c:	81a3      	strh	r3, [r4, #12]
 800fb2e:	f04f 30ff 	mov.w	r0, #4294967295
 800fb32:	e033      	b.n	800fb9c <__swsetup_r+0x98>
 800fb34:	0758      	lsls	r0, r3, #29
 800fb36:	d512      	bpl.n	800fb5e <__swsetup_r+0x5a>
 800fb38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fb3a:	b141      	cbz	r1, 800fb4e <__swsetup_r+0x4a>
 800fb3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fb40:	4299      	cmp	r1, r3
 800fb42:	d002      	beq.n	800fb4a <__swsetup_r+0x46>
 800fb44:	4628      	mov	r0, r5
 800fb46:	f7ff fb13 	bl	800f170 <_free_r>
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	6363      	str	r3, [r4, #52]	@ 0x34
 800fb4e:	89a3      	ldrh	r3, [r4, #12]
 800fb50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fb54:	81a3      	strh	r3, [r4, #12]
 800fb56:	2300      	movs	r3, #0
 800fb58:	6063      	str	r3, [r4, #4]
 800fb5a:	6923      	ldr	r3, [r4, #16]
 800fb5c:	6023      	str	r3, [r4, #0]
 800fb5e:	89a3      	ldrh	r3, [r4, #12]
 800fb60:	f043 0308 	orr.w	r3, r3, #8
 800fb64:	81a3      	strh	r3, [r4, #12]
 800fb66:	6923      	ldr	r3, [r4, #16]
 800fb68:	b94b      	cbnz	r3, 800fb7e <__swsetup_r+0x7a>
 800fb6a:	89a3      	ldrh	r3, [r4, #12]
 800fb6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fb70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fb74:	d003      	beq.n	800fb7e <__swsetup_r+0x7a>
 800fb76:	4621      	mov	r1, r4
 800fb78:	4628      	mov	r0, r5
 800fb7a:	f000 f856 	bl	800fc2a <__smakebuf_r>
 800fb7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb82:	f013 0201 	ands.w	r2, r3, #1
 800fb86:	d00a      	beq.n	800fb9e <__swsetup_r+0x9a>
 800fb88:	2200      	movs	r2, #0
 800fb8a:	60a2      	str	r2, [r4, #8]
 800fb8c:	6962      	ldr	r2, [r4, #20]
 800fb8e:	4252      	negs	r2, r2
 800fb90:	61a2      	str	r2, [r4, #24]
 800fb92:	6922      	ldr	r2, [r4, #16]
 800fb94:	b942      	cbnz	r2, 800fba8 <__swsetup_r+0xa4>
 800fb96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fb9a:	d1c5      	bne.n	800fb28 <__swsetup_r+0x24>
 800fb9c:	bd38      	pop	{r3, r4, r5, pc}
 800fb9e:	0799      	lsls	r1, r3, #30
 800fba0:	bf58      	it	pl
 800fba2:	6962      	ldrpl	r2, [r4, #20]
 800fba4:	60a2      	str	r2, [r4, #8]
 800fba6:	e7f4      	b.n	800fb92 <__swsetup_r+0x8e>
 800fba8:	2000      	movs	r0, #0
 800fbaa:	e7f7      	b.n	800fb9c <__swsetup_r+0x98>
 800fbac:	20000038 	.word	0x20000038

0800fbb0 <_sbrk_r>:
 800fbb0:	b538      	push	{r3, r4, r5, lr}
 800fbb2:	4d06      	ldr	r5, [pc, #24]	@ (800fbcc <_sbrk_r+0x1c>)
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	4604      	mov	r4, r0
 800fbb8:	4608      	mov	r0, r1
 800fbba:	602b      	str	r3, [r5, #0]
 800fbbc:	f7f1 f892 	bl	8000ce4 <_sbrk>
 800fbc0:	1c43      	adds	r3, r0, #1
 800fbc2:	d102      	bne.n	800fbca <_sbrk_r+0x1a>
 800fbc4:	682b      	ldr	r3, [r5, #0]
 800fbc6:	b103      	cbz	r3, 800fbca <_sbrk_r+0x1a>
 800fbc8:	6023      	str	r3, [r4, #0]
 800fbca:	bd38      	pop	{r3, r4, r5, pc}
 800fbcc:	20008530 	.word	0x20008530

0800fbd0 <abort>:
 800fbd0:	b508      	push	{r3, lr}
 800fbd2:	2006      	movs	r0, #6
 800fbd4:	f000 f88e 	bl	800fcf4 <raise>
 800fbd8:	2001      	movs	r0, #1
 800fbda:	f7f1 f80b 	bl	8000bf4 <_exit>

0800fbde <__swhatbuf_r>:
 800fbde:	b570      	push	{r4, r5, r6, lr}
 800fbe0:	460c      	mov	r4, r1
 800fbe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbe6:	2900      	cmp	r1, #0
 800fbe8:	b096      	sub	sp, #88	@ 0x58
 800fbea:	4615      	mov	r5, r2
 800fbec:	461e      	mov	r6, r3
 800fbee:	da0d      	bge.n	800fc0c <__swhatbuf_r+0x2e>
 800fbf0:	89a3      	ldrh	r3, [r4, #12]
 800fbf2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fbf6:	f04f 0100 	mov.w	r1, #0
 800fbfa:	bf14      	ite	ne
 800fbfc:	2340      	movne	r3, #64	@ 0x40
 800fbfe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fc02:	2000      	movs	r0, #0
 800fc04:	6031      	str	r1, [r6, #0]
 800fc06:	602b      	str	r3, [r5, #0]
 800fc08:	b016      	add	sp, #88	@ 0x58
 800fc0a:	bd70      	pop	{r4, r5, r6, pc}
 800fc0c:	466a      	mov	r2, sp
 800fc0e:	f000 f879 	bl	800fd04 <_fstat_r>
 800fc12:	2800      	cmp	r0, #0
 800fc14:	dbec      	blt.n	800fbf0 <__swhatbuf_r+0x12>
 800fc16:	9901      	ldr	r1, [sp, #4]
 800fc18:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fc1c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fc20:	4259      	negs	r1, r3
 800fc22:	4159      	adcs	r1, r3
 800fc24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc28:	e7eb      	b.n	800fc02 <__swhatbuf_r+0x24>

0800fc2a <__smakebuf_r>:
 800fc2a:	898b      	ldrh	r3, [r1, #12]
 800fc2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc2e:	079d      	lsls	r5, r3, #30
 800fc30:	4606      	mov	r6, r0
 800fc32:	460c      	mov	r4, r1
 800fc34:	d507      	bpl.n	800fc46 <__smakebuf_r+0x1c>
 800fc36:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fc3a:	6023      	str	r3, [r4, #0]
 800fc3c:	6123      	str	r3, [r4, #16]
 800fc3e:	2301      	movs	r3, #1
 800fc40:	6163      	str	r3, [r4, #20]
 800fc42:	b003      	add	sp, #12
 800fc44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc46:	ab01      	add	r3, sp, #4
 800fc48:	466a      	mov	r2, sp
 800fc4a:	f7ff ffc8 	bl	800fbde <__swhatbuf_r>
 800fc4e:	9f00      	ldr	r7, [sp, #0]
 800fc50:	4605      	mov	r5, r0
 800fc52:	4639      	mov	r1, r7
 800fc54:	4630      	mov	r0, r6
 800fc56:	f7ff faff 	bl	800f258 <_malloc_r>
 800fc5a:	b948      	cbnz	r0, 800fc70 <__smakebuf_r+0x46>
 800fc5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc60:	059a      	lsls	r2, r3, #22
 800fc62:	d4ee      	bmi.n	800fc42 <__smakebuf_r+0x18>
 800fc64:	f023 0303 	bic.w	r3, r3, #3
 800fc68:	f043 0302 	orr.w	r3, r3, #2
 800fc6c:	81a3      	strh	r3, [r4, #12]
 800fc6e:	e7e2      	b.n	800fc36 <__smakebuf_r+0xc>
 800fc70:	89a3      	ldrh	r3, [r4, #12]
 800fc72:	6020      	str	r0, [r4, #0]
 800fc74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc78:	81a3      	strh	r3, [r4, #12]
 800fc7a:	9b01      	ldr	r3, [sp, #4]
 800fc7c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fc80:	b15b      	cbz	r3, 800fc9a <__smakebuf_r+0x70>
 800fc82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc86:	4630      	mov	r0, r6
 800fc88:	f000 f84e 	bl	800fd28 <_isatty_r>
 800fc8c:	b128      	cbz	r0, 800fc9a <__smakebuf_r+0x70>
 800fc8e:	89a3      	ldrh	r3, [r4, #12]
 800fc90:	f023 0303 	bic.w	r3, r3, #3
 800fc94:	f043 0301 	orr.w	r3, r3, #1
 800fc98:	81a3      	strh	r3, [r4, #12]
 800fc9a:	89a3      	ldrh	r3, [r4, #12]
 800fc9c:	431d      	orrs	r5, r3
 800fc9e:	81a5      	strh	r5, [r4, #12]
 800fca0:	e7cf      	b.n	800fc42 <__smakebuf_r+0x18>

0800fca2 <_raise_r>:
 800fca2:	291f      	cmp	r1, #31
 800fca4:	b538      	push	{r3, r4, r5, lr}
 800fca6:	4605      	mov	r5, r0
 800fca8:	460c      	mov	r4, r1
 800fcaa:	d904      	bls.n	800fcb6 <_raise_r+0x14>
 800fcac:	2316      	movs	r3, #22
 800fcae:	6003      	str	r3, [r0, #0]
 800fcb0:	f04f 30ff 	mov.w	r0, #4294967295
 800fcb4:	bd38      	pop	{r3, r4, r5, pc}
 800fcb6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fcb8:	b112      	cbz	r2, 800fcc0 <_raise_r+0x1e>
 800fcba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fcbe:	b94b      	cbnz	r3, 800fcd4 <_raise_r+0x32>
 800fcc0:	4628      	mov	r0, r5
 800fcc2:	f000 f853 	bl	800fd6c <_getpid_r>
 800fcc6:	4622      	mov	r2, r4
 800fcc8:	4601      	mov	r1, r0
 800fcca:	4628      	mov	r0, r5
 800fccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fcd0:	f000 b83a 	b.w	800fd48 <_kill_r>
 800fcd4:	2b01      	cmp	r3, #1
 800fcd6:	d00a      	beq.n	800fcee <_raise_r+0x4c>
 800fcd8:	1c59      	adds	r1, r3, #1
 800fcda:	d103      	bne.n	800fce4 <_raise_r+0x42>
 800fcdc:	2316      	movs	r3, #22
 800fcde:	6003      	str	r3, [r0, #0]
 800fce0:	2001      	movs	r0, #1
 800fce2:	e7e7      	b.n	800fcb4 <_raise_r+0x12>
 800fce4:	2100      	movs	r1, #0
 800fce6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fcea:	4620      	mov	r0, r4
 800fcec:	4798      	blx	r3
 800fcee:	2000      	movs	r0, #0
 800fcf0:	e7e0      	b.n	800fcb4 <_raise_r+0x12>
	...

0800fcf4 <raise>:
 800fcf4:	4b02      	ldr	r3, [pc, #8]	@ (800fd00 <raise+0xc>)
 800fcf6:	4601      	mov	r1, r0
 800fcf8:	6818      	ldr	r0, [r3, #0]
 800fcfa:	f7ff bfd2 	b.w	800fca2 <_raise_r>
 800fcfe:	bf00      	nop
 800fd00:	20000038 	.word	0x20000038

0800fd04 <_fstat_r>:
 800fd04:	b538      	push	{r3, r4, r5, lr}
 800fd06:	4d07      	ldr	r5, [pc, #28]	@ (800fd24 <_fstat_r+0x20>)
 800fd08:	2300      	movs	r3, #0
 800fd0a:	4604      	mov	r4, r0
 800fd0c:	4608      	mov	r0, r1
 800fd0e:	4611      	mov	r1, r2
 800fd10:	602b      	str	r3, [r5, #0]
 800fd12:	f7f0 ffbf 	bl	8000c94 <_fstat>
 800fd16:	1c43      	adds	r3, r0, #1
 800fd18:	d102      	bne.n	800fd20 <_fstat_r+0x1c>
 800fd1a:	682b      	ldr	r3, [r5, #0]
 800fd1c:	b103      	cbz	r3, 800fd20 <_fstat_r+0x1c>
 800fd1e:	6023      	str	r3, [r4, #0]
 800fd20:	bd38      	pop	{r3, r4, r5, pc}
 800fd22:	bf00      	nop
 800fd24:	20008530 	.word	0x20008530

0800fd28 <_isatty_r>:
 800fd28:	b538      	push	{r3, r4, r5, lr}
 800fd2a:	4d06      	ldr	r5, [pc, #24]	@ (800fd44 <_isatty_r+0x1c>)
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	4604      	mov	r4, r0
 800fd30:	4608      	mov	r0, r1
 800fd32:	602b      	str	r3, [r5, #0]
 800fd34:	f7f0 ffbe 	bl	8000cb4 <_isatty>
 800fd38:	1c43      	adds	r3, r0, #1
 800fd3a:	d102      	bne.n	800fd42 <_isatty_r+0x1a>
 800fd3c:	682b      	ldr	r3, [r5, #0]
 800fd3e:	b103      	cbz	r3, 800fd42 <_isatty_r+0x1a>
 800fd40:	6023      	str	r3, [r4, #0]
 800fd42:	bd38      	pop	{r3, r4, r5, pc}
 800fd44:	20008530 	.word	0x20008530

0800fd48 <_kill_r>:
 800fd48:	b538      	push	{r3, r4, r5, lr}
 800fd4a:	4d07      	ldr	r5, [pc, #28]	@ (800fd68 <_kill_r+0x20>)
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	4604      	mov	r4, r0
 800fd50:	4608      	mov	r0, r1
 800fd52:	4611      	mov	r1, r2
 800fd54:	602b      	str	r3, [r5, #0]
 800fd56:	f7f0 ff3b 	bl	8000bd0 <_kill>
 800fd5a:	1c43      	adds	r3, r0, #1
 800fd5c:	d102      	bne.n	800fd64 <_kill_r+0x1c>
 800fd5e:	682b      	ldr	r3, [r5, #0]
 800fd60:	b103      	cbz	r3, 800fd64 <_kill_r+0x1c>
 800fd62:	6023      	str	r3, [r4, #0]
 800fd64:	bd38      	pop	{r3, r4, r5, pc}
 800fd66:	bf00      	nop
 800fd68:	20008530 	.word	0x20008530

0800fd6c <_getpid_r>:
 800fd6c:	f7f0 bf28 	b.w	8000bc0 <_getpid>

0800fd70 <_init>:
 800fd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd72:	bf00      	nop
 800fd74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd76:	bc08      	pop	{r3}
 800fd78:	469e      	mov	lr, r3
 800fd7a:	4770      	bx	lr

0800fd7c <_fini>:
 800fd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd7e:	bf00      	nop
 800fd80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd82:	bc08      	pop	{r3}
 800fd84:	469e      	mov	lr, r3
 800fd86:	4770      	bx	lr

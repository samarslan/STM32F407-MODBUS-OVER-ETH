
STM32F407-MODBUS-OVER-ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001139c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002df8  0801152c  0801152c  0001252c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014324  08014324  00016108  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08014324  08014324  00015324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801432c  0801432c  00016108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801432c  0801432c  0001532c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014330  08014330  00015330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000108  20000000  08014334  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00016108  2**0
                  CONTENTS
 10 .bss          0000854c  20000108  20000108  00016108  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008654  20008654  00016108  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00016108  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001eb34  00000000  00000000  00016138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005c59  00000000  00000000  00034c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001670  00000000  00000000  0003a8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011b9  00000000  00000000  0003bf38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e19a  00000000  00000000  0003d0f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000272a8  00000000  00000000  0006b28b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd1e3  00000000  00000000  00092533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016f716  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006290  00000000  00000000  0016f75c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  001759ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000108 	.word	0x20000108
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011514 	.word	0x08011514

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000010c 	.word	0x2000010c
 80001cc:	08011514 	.word	0x08011514

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005a2:	f000 fc7d 	bl	8000ea0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005a6:	f000 f8af 	bl	8000708 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005aa:	f000 f93f 	bl	800082c <MX_GPIO_Init>
	MX_LWIP_Init();
 80005ae:	f003 faad 	bl	8003b0c <MX_LWIP_Init>
	MX_UART4_Init();
 80005b2:	f000 f911 	bl	80007d8 <MX_UART4_Init>
	/* USER CODE BEGIN 2 */
	eMBErrorCode err;
	err = eMBTCPInit(502);
 80005b6:	f44f 70fb 	mov.w	r0, #502	@ 0x1f6
 80005ba:	f00e ff05 	bl	800f3c8 <eMBTCPInit>
 80005be:	4603      	mov	r3, r0
 80005c0:	77fb      	strb	r3, [r7, #31]
	if (err != MB_ENOERR) {
 80005c2:	7ffb      	ldrb	r3, [r7, #31]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d016      	beq.n	80005f6 <main+0x5a>
		DEBUG_PRINTF("eMBTCPInit failed: %d\r\n", err);
 80005c8:	7ffb      	ldrb	r3, [r7, #31]
 80005ca:	4a45      	ldr	r2, [pc, #276]	@ (80006e0 <main+0x144>)
 80005cc:	2140      	movs	r1, #64	@ 0x40
 80005ce:	4845      	ldr	r0, [pc, #276]	@ (80006e4 <main+0x148>)
 80005d0:	f00f fefe 	bl	80103d0 <sniprintf>
 80005d4:	6038      	str	r0, [r7, #0]
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b29a      	uxth	r2, r3
 80005da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005de:	4941      	ldr	r1, [pc, #260]	@ (80006e4 <main+0x148>)
 80005e0:	4841      	ldr	r0, [pc, #260]	@ (80006e8 <main+0x14c>)
 80005e2:	f002 fed7 	bl	8003394 <HAL_UART_Transmit>
		LED_ON(LED_RED_PIN);
 80005e6:	2201      	movs	r2, #1
 80005e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005ec:	483f      	ldr	r0, [pc, #252]	@ (80006ec <main+0x150>)
 80005ee:	f002 f9eb 	bl	80029c8 <HAL_GPIO_WritePin>
		while (1); // hang on error
 80005f2:	bf00      	nop
 80005f4:	e7fd      	b.n	80005f2 <main+0x56>
	} else {
		DEBUG_PRINTF("eMBTCPInit OK.\r\n");
 80005f6:	4a3e      	ldr	r2, [pc, #248]	@ (80006f0 <main+0x154>)
 80005f8:	2140      	movs	r1, #64	@ 0x40
 80005fa:	483a      	ldr	r0, [pc, #232]	@ (80006e4 <main+0x148>)
 80005fc:	f00f fee8 	bl	80103d0 <sniprintf>
 8000600:	61b8      	str	r0, [r7, #24]
 8000602:	69bb      	ldr	r3, [r7, #24]
 8000604:	b29a      	uxth	r2, r3
 8000606:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800060a:	4936      	ldr	r1, [pc, #216]	@ (80006e4 <main+0x148>)
 800060c:	4836      	ldr	r0, [pc, #216]	@ (80006e8 <main+0x14c>)
 800060e:	f002 fec1 	bl	8003394 <HAL_UART_Transmit>
	}

	err = eMBEnable();
 8000612:	f00e ff2b 	bl	800f46c <eMBEnable>
 8000616:	4603      	mov	r3, r0
 8000618:	77fb      	strb	r3, [r7, #31]
	if (err != MB_ENOERR) {
 800061a:	7ffb      	ldrb	r3, [r7, #31]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d016      	beq.n	800064e <main+0xb2>
		DEBUG_PRINTF("eMBEnable failed: %d\r\n", err);
 8000620:	7ffb      	ldrb	r3, [r7, #31]
 8000622:	4a34      	ldr	r2, [pc, #208]	@ (80006f4 <main+0x158>)
 8000624:	2140      	movs	r1, #64	@ 0x40
 8000626:	482f      	ldr	r0, [pc, #188]	@ (80006e4 <main+0x148>)
 8000628:	f00f fed2 	bl	80103d0 <sniprintf>
 800062c:	6078      	str	r0, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	b29a      	uxth	r2, r3
 8000632:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000636:	492b      	ldr	r1, [pc, #172]	@ (80006e4 <main+0x148>)
 8000638:	482b      	ldr	r0, [pc, #172]	@ (80006e8 <main+0x14c>)
 800063a:	f002 feab 	bl	8003394 <HAL_UART_Transmit>
		LED_ON(LED_RED_PIN);
 800063e:	2201      	movs	r2, #1
 8000640:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000644:	4829      	ldr	r0, [pc, #164]	@ (80006ec <main+0x150>)
 8000646:	f002 f9bf 	bl	80029c8 <HAL_GPIO_WritePin>
		while (1);
 800064a:	bf00      	nop
 800064c:	e7fd      	b.n	800064a <main+0xae>
	} else {
		DEBUG_PRINTF("eMBEnable OK.\r\n");
 800064e:	4a2a      	ldr	r2, [pc, #168]	@ (80006f8 <main+0x15c>)
 8000650:	2140      	movs	r1, #64	@ 0x40
 8000652:	4824      	ldr	r0, [pc, #144]	@ (80006e4 <main+0x148>)
 8000654:	f00f febc 	bl	80103d0 <sniprintf>
 8000658:	6178      	str	r0, [r7, #20]
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	b29a      	uxth	r2, r3
 800065e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000662:	4920      	ldr	r1, [pc, #128]	@ (80006e4 <main+0x148>)
 8000664:	4820      	ldr	r0, [pc, #128]	@ (80006e8 <main+0x14c>)
 8000666:	f002 fe95 	bl	8003394 <HAL_UART_Transmit>
	}
	Modbus_InitCallbacks();
 800066a:	f00f f81b 	bl	800f6a4 <Modbus_InitCallbacks>
	DEBUG_PRINTF("Callbacks registered.\r\n");
 800066e:	4a23      	ldr	r2, [pc, #140]	@ (80006fc <main+0x160>)
 8000670:	2140      	movs	r1, #64	@ 0x40
 8000672:	481c      	ldr	r0, [pc, #112]	@ (80006e4 <main+0x148>)
 8000674:	f00f feac 	bl	80103d0 <sniprintf>
 8000678:	6138      	str	r0, [r7, #16]
 800067a:	693b      	ldr	r3, [r7, #16]
 800067c:	b29a      	uxth	r2, r3
 800067e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000682:	4918      	ldr	r1, [pc, #96]	@ (80006e4 <main+0x148>)
 8000684:	4818      	ldr	r0, [pc, #96]	@ (80006e8 <main+0x14c>)
 8000686:	f002 fe85 	bl	8003394 <HAL_UART_Transmit>

	Modbus_SetHolding(0, 65);
 800068a:	2141      	movs	r1, #65	@ 0x41
 800068c:	2000      	movs	r0, #0
 800068e:	f00f f9f1 	bl	800fa74 <Modbus_SetHolding>
	DEBUG_PRINTF("Holding[0] = 65 set.\r\n");
 8000692:	4a1b      	ldr	r2, [pc, #108]	@ (8000700 <main+0x164>)
 8000694:	2140      	movs	r1, #64	@ 0x40
 8000696:	4813      	ldr	r0, [pc, #76]	@ (80006e4 <main+0x148>)
 8000698:	f00f fe9a 	bl	80103d0 <sniprintf>
 800069c:	60f8      	str	r0, [r7, #12]
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006a6:	490f      	ldr	r1, [pc, #60]	@ (80006e4 <main+0x148>)
 80006a8:	480f      	ldr	r0, [pc, #60]	@ (80006e8 <main+0x14c>)
 80006aa:	f002 fe73 	bl	8003394 <HAL_UART_Transmit>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		MX_LWIP_Process();
 80006ae:	f003 fb6d 	bl	8003d8c <MX_LWIP_Process>

		err = eMBPoll();
 80006b2:	f00e fef7 	bl	800f4a4 <eMBPoll>
 80006b6:	4603      	mov	r3, r0
 80006b8:	77fb      	strb	r3, [r7, #31]
		if (err != MB_ENOERR) {
 80006ba:	7ffb      	ldrb	r3, [r7, #31]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d0f6      	beq.n	80006ae <main+0x112>
			DEBUG_PRINTF("eMBPoll error: %d\r\n", err);
 80006c0:	7ffb      	ldrb	r3, [r7, #31]
 80006c2:	4a10      	ldr	r2, [pc, #64]	@ (8000704 <main+0x168>)
 80006c4:	2140      	movs	r1, #64	@ 0x40
 80006c6:	4807      	ldr	r0, [pc, #28]	@ (80006e4 <main+0x148>)
 80006c8:	f00f fe82 	bl	80103d0 <sniprintf>
 80006cc:	60b8      	str	r0, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006d6:	4903      	ldr	r1, [pc, #12]	@ (80006e4 <main+0x148>)
 80006d8:	4803      	ldr	r0, [pc, #12]	@ (80006e8 <main+0x14c>)
 80006da:	f002 fe5b 	bl	8003394 <HAL_UART_Transmit>
		MX_LWIP_Process();
 80006de:	e7e6      	b.n	80006ae <main+0x112>
 80006e0:	0801152c 	.word	0x0801152c
 80006e4:	2000016c 	.word	0x2000016c
 80006e8:	20000124 	.word	0x20000124
 80006ec:	40020c00 	.word	0x40020c00
 80006f0:	08011544 	.word	0x08011544
 80006f4:	08011558 	.word	0x08011558
 80006f8:	08011570 	.word	0x08011570
 80006fc:	08011580 	.word	0x08011580
 8000700:	08011598 	.word	0x08011598
 8000704:	080115b0 	.word	0x080115b0

08000708 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	@ 0x50
 800070c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0320 	add.w	r3, r7, #32
 8000712:	2230      	movs	r2, #48	@ 0x30
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f00f fefd 	bl	8010516 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	4b27      	ldr	r3, [pc, #156]	@ (80007d0 <SystemClock_Config+0xc8>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000734:	4a26      	ldr	r2, [pc, #152]	@ (80007d0 <SystemClock_Config+0xc8>)
 8000736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800073a:	6413      	str	r3, [r2, #64]	@ 0x40
 800073c:	4b24      	ldr	r3, [pc, #144]	@ (80007d0 <SystemClock_Config+0xc8>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	4b21      	ldr	r3, [pc, #132]	@ (80007d4 <SystemClock_Config+0xcc>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a20      	ldr	r2, [pc, #128]	@ (80007d4 <SystemClock_Config+0xcc>)
 8000752:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	4b1e      	ldr	r3, [pc, #120]	@ (80007d4 <SystemClock_Config+0xcc>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000764:	2302      	movs	r3, #2
 8000766:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000768:	2301      	movs	r3, #1
 800076a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076c:	2310      	movs	r3, #16
 800076e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000770:	2302      	movs	r3, #2
 8000772:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000774:	2300      	movs	r3, #0
 8000776:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000778:	2308      	movs	r3, #8
 800077a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 64;
 800077c:	2340      	movs	r3, #64	@ 0x40
 800077e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000780:	2302      	movs	r3, #2
 8000782:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000784:	2304      	movs	r3, #4
 8000786:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000788:	f107 0320 	add.w	r3, r7, #32
 800078c:	4618      	mov	r0, r3
 800078e:	f002 f959 	bl	8002a44 <HAL_RCC_OscConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000798:	f000 f8c0 	bl	800091c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079c:	230f      	movs	r3, #15
 800079e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a0:	2302      	movs	r3, #2
 80007a2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80007a4:	2380      	movs	r3, #128	@ 0x80
 80007a6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	2101      	movs	r1, #1
 80007b6:	4618      	mov	r0, r3
 80007b8:	f002 fbbc 	bl	8002f34 <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xbe>
	{
		Error_Handler();
 80007c2:	f000 f8ab 	bl	800091c <Error_Handler>
	}
}
 80007c6:	bf00      	nop
 80007c8:	3750      	adds	r7, #80	@ 0x50
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40007000 	.word	0x40007000

080007d8 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80007dc:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <MX_UART4_Init+0x4c>)
 80007de:	4a12      	ldr	r2, [pc, #72]	@ (8000828 <MX_UART4_Init+0x50>)
 80007e0:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 80007e2:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <MX_UART4_Init+0x4c>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <MX_UART4_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <MX_UART4_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000824 <MX_UART4_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <MX_UART4_Init+0x4c>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <MX_UART4_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <MX_UART4_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	@ (8000824 <MX_UART4_Init+0x4c>)
 8000810:	f002 fd70 	bl	80032f4 <HAL_UART_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_UART4_Init+0x46>
	{
		Error_Handler();
 800081a:	f000 f87f 	bl	800091c <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000124 	.word	0x20000124
 8000828:	40004c00 	.word	0x40004c00

0800082c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	@ 0x28
 8000830:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	4b32      	ldr	r3, [pc, #200]	@ (8000910 <MX_GPIO_Init+0xe4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a31      	ldr	r2, [pc, #196]	@ (8000910 <MX_GPIO_Init+0xe4>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b2f      	ldr	r3, [pc, #188]	@ (8000910 <MX_GPIO_Init+0xe4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	4b2b      	ldr	r3, [pc, #172]	@ (8000910 <MX_GPIO_Init+0xe4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a2a      	ldr	r2, [pc, #168]	@ (8000910 <MX_GPIO_Init+0xe4>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b28      	ldr	r3, [pc, #160]	@ (8000910 <MX_GPIO_Init+0xe4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	4b24      	ldr	r3, [pc, #144]	@ (8000910 <MX_GPIO_Init+0xe4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a23      	ldr	r2, [pc, #140]	@ (8000910 <MX_GPIO_Init+0xe4>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b21      	ldr	r3, [pc, #132]	@ (8000910 <MX_GPIO_Init+0xe4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b1d      	ldr	r3, [pc, #116]	@ (8000910 <MX_GPIO_Init+0xe4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a1c      	ldr	r2, [pc, #112]	@ (8000910 <MX_GPIO_Init+0xe4>)
 80008a0:	f043 0308 	orr.w	r3, r3, #8
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000910 <MX_GPIO_Init+0xe4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0308 	and.w	r3, r3, #8
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80008b8:	4816      	ldr	r0, [pc, #88]	@ (8000914 <MX_GPIO_Init+0xe8>)
 80008ba:	f002 f885 	bl	80029c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008be:	2301      	movs	r3, #1
 80008c0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008c6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	4811      	ldr	r0, [pc, #68]	@ (8000918 <MX_GPIO_Init+0xec>)
 80008d4:	f001 fedc 	bl	8002690 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD12 PD13 PD14 PD15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008d8:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80008dc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	4808      	ldr	r0, [pc, #32]	@ (8000914 <MX_GPIO_Init+0xe8>)
 80008f2:	f001 fecd 	bl	8002690 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2100      	movs	r1, #0
 80008fa:	2006      	movs	r0, #6
 80008fc:	f000 fc41 	bl	8001182 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000900:	2006      	movs	r0, #6
 8000902:	f000 fc5a 	bl	80011ba <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000906:	bf00      	nop
 8000908:	3728      	adds	r7, #40	@ 0x28
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800
 8000914:	40020c00 	.word	0x40020c00
 8000918:	40020000 	.word	0x40020000

0800091c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <Error_Handler+0x8>

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000936:	4a0f      	ldr	r2, [pc, #60]	@ (8000974 <HAL_MspInit+0x4c>)
 8000938:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800093c:	6453      	str	r3, [r2, #68]	@ 0x44
 800093e:	4b0d      	ldr	r3, [pc, #52]	@ (8000974 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000942:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000952:	4a08      	ldr	r2, [pc, #32]	@ (8000974 <HAL_MspInit+0x4c>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000958:	6413      	str	r3, [r2, #64]	@ 0x40
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800

08000978 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	@ 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a19      	ldr	r2, [pc, #100]	@ (80009fc <HAL_UART_MspInit+0x84>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d12c      	bne.n	80009f4 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b18      	ldr	r3, [pc, #96]	@ (8000a00 <HAL_UART_MspInit+0x88>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a2:	4a17      	ldr	r2, [pc, #92]	@ (8000a00 <HAL_UART_MspInit+0x88>)
 80009a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80009a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009aa:	4b15      	ldr	r3, [pc, #84]	@ (8000a00 <HAL_UART_MspInit+0x88>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <HAL_UART_MspInit+0x88>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a10      	ldr	r2, [pc, #64]	@ (8000a00 <HAL_UART_MspInit+0x88>)
 80009c0:	f043 0304 	orr.w	r3, r3, #4
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a00 <HAL_UART_MspInit+0x88>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009d2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80009d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e0:	2303      	movs	r3, #3
 80009e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80009e4:	2308      	movs	r3, #8
 80009e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4619      	mov	r1, r3
 80009ee:	4805      	ldr	r0, [pc, #20]	@ (8000a04 <HAL_UART_MspInit+0x8c>)
 80009f0:	f001 fe4e 	bl	8002690 <HAL_GPIO_Init>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 80009f4:	bf00      	nop
 80009f6:	3728      	adds	r7, #40	@ 0x28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40004c00 	.word	0x40004c00
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40020800 	.word	0x40020800

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <NMI_Handler+0x4>

08000a10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <MemManage_Handler+0x4>

08000a20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <BusFault_Handler+0x4>

08000a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <UsageFault_Handler+0x4>

08000a30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5e:	f000 fa71 	bl	8000f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f001 ffc6 	bl	80029fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000a78:	4802      	ldr	r0, [pc, #8]	@ (8000a84 <ETH_IRQHandler+0x10>)
 8000a7a:	f000 ff1b 	bl	80018b4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20004cd0 	.word	0x20004cd0

08000a88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return 1;
 8000a8c:	2301      	movs	r3, #1
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <_kill>:

int _kill(int pid, int sig)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000aa2:	4b05      	ldr	r3, [pc, #20]	@ (8000ab8 <_kill+0x20>)
 8000aa4:	2216      	movs	r2, #22
 8000aa6:	601a      	str	r2, [r3, #0]
  return -1;
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	20008644 	.word	0x20008644

08000abc <_exit>:

void _exit (int status)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff ffe5 	bl	8000a98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ace:	bf00      	nop
 8000ad0:	e7fd      	b.n	8000ace <_exit+0x12>

08000ad2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b086      	sub	sp, #24
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	60f8      	str	r0, [r7, #12]
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	e00a      	b.n	8000afa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ae4:	f3af 8000 	nop.w
 8000ae8:	4601      	mov	r1, r0
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	1c5a      	adds	r2, r3, #1
 8000aee:	60ba      	str	r2, [r7, #8]
 8000af0:	b2ca      	uxtb	r2, r1
 8000af2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	3301      	adds	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	697a      	ldr	r2, [r7, #20]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	dbf0      	blt.n	8000ae4 <_read+0x12>
  }

  return len;
 8000b02:	687b      	ldr	r3, [r7, #4]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	e009      	b.n	8000b32 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	1c5a      	adds	r2, r3, #1
 8000b22:	60ba      	str	r2, [r7, #8]
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	697a      	ldr	r2, [r7, #20]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	dbf1      	blt.n	8000b1e <_write+0x12>
  }
  return len;
 8000b3a:	687b      	ldr	r3, [r7, #4]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <_close>:

int _close(int file)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b6c:	605a      	str	r2, [r3, #4]
  return 0;
 8000b6e:	2300      	movs	r3, #0
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <_isatty>:

int _isatty(int file)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b84:	2301      	movs	r3, #1
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b085      	sub	sp, #20
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	60f8      	str	r0, [r7, #12]
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b087      	sub	sp, #28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb4:	4a14      	ldr	r2, [pc, #80]	@ (8000c08 <_sbrk+0x5c>)
 8000bb6:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <_sbrk+0x60>)
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc0:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d102      	bne.n	8000bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <_sbrk+0x64>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	@ (8000c14 <_sbrk+0x68>)
 8000bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bce:	4b10      	ldr	r3, [pc, #64]	@ (8000c10 <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d205      	bcs.n	8000be8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <_sbrk+0x6c>)
 8000bde:	220c      	movs	r2, #12
 8000be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295
 8000be6:	e009      	b.n	8000bfc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be8:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bee:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	4a06      	ldr	r2, [pc, #24]	@ (8000c10 <_sbrk+0x64>)
 8000bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	371c      	adds	r7, #28
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	20020000 	.word	0x20020000
 8000c0c:	00000400 	.word	0x00000400
 8000c10:	200001ac 	.word	0x200001ac
 8000c14:	20008658 	.word	0x20008658
 8000c18:	20008644 	.word	0x20008644

08000c1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <SystemInit+0x20>)
 8000c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c26:	4a05      	ldr	r2, [pc, #20]	@ (8000c3c <SystemInit+0x20>)
 8000c28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c44:	f7ff ffea 	bl	8000c1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c48:	480c      	ldr	r0, [pc, #48]	@ (8000c7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c4a:	490d      	ldr	r1, [pc, #52]	@ (8000c80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c50:	e002      	b.n	8000c58 <LoopCopyDataInit>

08000c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c60:	4c0a      	ldr	r4, [pc, #40]	@ (8000c8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c6e:	f00f fca1 	bl	80105b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c72:	f7ff fc93 	bl	800059c <main>
  bx  lr    
 8000c76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c80:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8000c84:	08014334 	.word	0x08014334
  ldr r2, =_sbss
 8000c88:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8000c8c:	20008654 	.word	0x20008654

08000c90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c90:	e7fe      	b.n	8000c90 <ADC_IRQHandler>

08000c92 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d00b      	beq.n	8000cba <LAN8742_RegisterBusIO+0x28>
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d007      	beq.n	8000cba <LAN8742_RegisterBusIO+0x28>
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d003      	beq.n	8000cba <LAN8742_RegisterBusIO+0x28>
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	691b      	ldr	r3, [r3, #16]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d102      	bne.n	8000cc0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbe:	e014      	b.n	8000cea <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685a      	ldr	r2, [r3, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	68da      	ldr	r2, [r3, #12]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	689a      	ldr	r2, [r3, #8]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	691a      	ldr	r2, [r3, #16]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b086      	sub	sp, #24
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d139      	bne.n	8000d86 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d002      	beq.n	8000d20 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2220      	movs	r2, #32
 8000d24:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	e01c      	b.n	8000d66 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	f107 020c 	add.w	r2, r7, #12
 8000d34:	2112      	movs	r1, #18
 8000d36:	6978      	ldr	r0, [r7, #20]
 8000d38:	4798      	blx	r3
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	da03      	bge.n	8000d48 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000d40:	f06f 0304 	mvn.w	r3, #4
 8000d44:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000d46:	e00b      	b.n	8000d60 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f003 031f 	and.w	r3, r3, #31
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d105      	bne.n	8000d60 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
         break;
 8000d5e:	e005      	b.n	8000d6c <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	3301      	adds	r3, #1
 8000d64:	617b      	str	r3, [r7, #20]
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	2b1f      	cmp	r3, #31
 8000d6a:	d9df      	bls.n	8000d2c <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b1f      	cmp	r3, #31
 8000d72:	d902      	bls.n	8000d7a <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000d74:	f06f 0302 	mvn.w	r3, #2
 8000d78:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2201      	movs	r2, #1
 8000d84:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000d86:	693b      	ldr	r3, [r7, #16]
 }
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	6810      	ldr	r0, [r2, #0]
 8000da4:	f107 020c 	add.w	r2, r7, #12
 8000da8:	2101      	movs	r1, #1
 8000daa:	4798      	blx	r3
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	da02      	bge.n	8000db8 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000db2:	f06f 0304 	mvn.w	r3, #4
 8000db6:	e06e      	b.n	8000e96 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	695b      	ldr	r3, [r3, #20]
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	6810      	ldr	r0, [r2, #0]
 8000dc0:	f107 020c 	add.w	r2, r7, #12
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	4798      	blx	r3
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	da02      	bge.n	8000dd4 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000dce:	f06f 0304 	mvn.w	r3, #4
 8000dd2:	e060      	b.n	8000e96 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f003 0304 	and.w	r3, r3, #4
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e059      	b.n	8000e96 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	6810      	ldr	r0, [r2, #0]
 8000dea:	f107 020c 	add.w	r2, r7, #12
 8000dee:	2100      	movs	r1, #0
 8000df0:	4798      	blx	r3
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	da02      	bge.n	8000dfe <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000df8:	f06f 0304 	mvn.w	r3, #4
 8000dfc:	e04b      	b.n	8000e96 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d11b      	bne.n	8000e40 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d006      	beq.n	8000e20 <LAN8742_GetLinkState+0x90>
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	e03a      	b.n	8000e96 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e033      	b.n	8000e96 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	e02c      	b.n	8000e96 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e3c:	2305      	movs	r3, #5
 8000e3e:	e02a      	b.n	8000e96 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	695b      	ldr	r3, [r3, #20]
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	6810      	ldr	r0, [r2, #0]
 8000e48:	f107 020c 	add.w	r2, r7, #12
 8000e4c:	211f      	movs	r1, #31
 8000e4e:	4798      	blx	r3
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	da02      	bge.n	8000e5c <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000e56:	f06f 0304 	mvn.w	r3, #4
 8000e5a:	e01c      	b.n	8000e96 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d101      	bne.n	8000e6a <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000e66:	2306      	movs	r3, #6
 8000e68:	e015      	b.n	8000e96 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f003 031c 	and.w	r3, r3, #28
 8000e70:	2b18      	cmp	r3, #24
 8000e72:	d101      	bne.n	8000e78 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e74:	2302      	movs	r3, #2
 8000e76:	e00e      	b.n	8000e96 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f003 031c 	and.w	r3, r3, #28
 8000e7e:	2b08      	cmp	r3, #8
 8000e80:	d101      	bne.n	8000e86 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e82:	2303      	movs	r3, #3
 8000e84:	e007      	b.n	8000e96 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f003 031c 	and.w	r3, r3, #28
 8000e8c:	2b14      	cmp	r3, #20
 8000e8e:	d101      	bne.n	8000e94 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000e90:	2304      	movs	r3, #4
 8000e92:	e000      	b.n	8000e96 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e94:	2305      	movs	r3, #5
    }
  }
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <HAL_Init+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee0 <HAL_Init+0x40>)
 8000eaa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee0 <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee0 <HAL_Init+0x40>)
 8000eb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ebc:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a07      	ldr	r2, [pc, #28]	@ (8000ee0 <HAL_Init+0x40>)
 8000ec2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec8:	2003      	movs	r0, #3
 8000eca:	f000 f94f 	bl	800116c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ece:	200f      	movs	r0, #15
 8000ed0:	f000 f808 	bl	8000ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed4:	f7ff fd28 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40023c00 	.word	0x40023c00

08000ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eec:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <HAL_InitTick+0x54>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <HAL_InitTick+0x58>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f967 	bl	80011d6 <HAL_SYSTICK_Config>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e00e      	b.n	8000f30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b0f      	cmp	r3, #15
 8000f16:	d80a      	bhi.n	8000f2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f20:	f000 f92f 	bl	8001182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f24:	4a06      	ldr	r2, [pc, #24]	@ (8000f40 <HAL_InitTick+0x5c>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e000      	b.n	8000f30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	20000004 	.word	0x20000004

08000f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f48:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <HAL_IncTick+0x20>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <HAL_IncTick+0x24>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	4a04      	ldr	r2, [pc, #16]	@ (8000f68 <HAL_IncTick+0x24>)
 8000f56:	6013      	str	r3, [r2, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000008 	.word	0x20000008
 8000f68:	200001b0 	.word	0x200001b0

08000f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f70:	4b03      	ldr	r3, [pc, #12]	@ (8000f80 <HAL_GetTick+0x14>)
 8000f72:	681b      	ldr	r3, [r3, #0]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	200001b0 	.word	0x200001b0

08000f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f8c:	f7ff ffee 	bl	8000f6c <HAL_GetTick>
 8000f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f9c:	d005      	beq.n	8000faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc8 <HAL_Delay+0x44>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000faa:	bf00      	nop
 8000fac:	f7ff ffde 	bl	8000f6c <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d8f7      	bhi.n	8000fac <HAL_Delay+0x28>
  {
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000008 	.word	0x20000008

08000fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	@ (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001018:	4b04      	ldr	r3, [pc, #16]	@ (800102c <__NVIC_GetPriorityGrouping+0x18>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	f003 0307 	and.w	r3, r3, #7
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	2b00      	cmp	r3, #0
 8001040:	db0b      	blt.n	800105a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f003 021f 	and.w	r2, r3, #31
 8001048:	4907      	ldr	r1, [pc, #28]	@ (8001068 <__NVIC_EnableIRQ+0x38>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	2001      	movs	r0, #1
 8001052:	fa00 f202 	lsl.w	r2, r0, r2
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e100 	.word	0xe000e100

0800106c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	db0a      	blt.n	8001096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	490c      	ldr	r1, [pc, #48]	@ (80010b8 <__NVIC_SetPriority+0x4c>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	0112      	lsls	r2, r2, #4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	440b      	add	r3, r1
 8001090:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001094:	e00a      	b.n	80010ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4908      	ldr	r1, [pc, #32]	@ (80010bc <__NVIC_SetPriority+0x50>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	3b04      	subs	r3, #4
 80010a4:	0112      	lsls	r2, r2, #4
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	440b      	add	r3, r1
 80010aa:	761a      	strb	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	@ 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f1c3 0307 	rsb	r3, r3, #7
 80010da:	2b04      	cmp	r3, #4
 80010dc:	bf28      	it	cs
 80010de:	2304      	movcs	r3, #4
 80010e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3304      	adds	r3, #4
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	d902      	bls.n	80010f0 <NVIC_EncodePriority+0x30>
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3b03      	subs	r3, #3
 80010ee:	e000      	b.n	80010f2 <NVIC_EncodePriority+0x32>
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001108:	f04f 31ff 	mov.w	r1, #4294967295
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	43d9      	mvns	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	4313      	orrs	r3, r2
         );
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	@ 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001138:	d301      	bcc.n	800113e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113a:	2301      	movs	r3, #1
 800113c:	e00f      	b.n	800115e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113e:	4a0a      	ldr	r2, [pc, #40]	@ (8001168 <SysTick_Config+0x40>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001146:	210f      	movs	r1, #15
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f7ff ff8e 	bl	800106c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001150:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <SysTick_Config+0x40>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001156:	4b04      	ldr	r3, [pc, #16]	@ (8001168 <SysTick_Config+0x40>)
 8001158:	2207      	movs	r2, #7
 800115a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	e000e010 	.word	0xe000e010

0800116c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff29 	bl	8000fcc <__NVIC_SetPriorityGrouping>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001182:	b580      	push	{r7, lr}
 8001184:	b086      	sub	sp, #24
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001194:	f7ff ff3e 	bl	8001014 <__NVIC_GetPriorityGrouping>
 8001198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	6978      	ldr	r0, [r7, #20]
 80011a0:	f7ff ff8e 	bl	80010c0 <NVIC_EncodePriority>
 80011a4:	4602      	mov	r2, r0
 80011a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff5d 	bl	800106c <__NVIC_SetPriority>
}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	4603      	mov	r3, r0
 80011c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff31 	bl	8001030 <__NVIC_EnableIRQ>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ffa2 	bl	8001128 <SysTick_Config>
 80011e4:	4603      	mov	r3, r0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e08a      	b.n	8001318 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001208:	2b00      	cmp	r3, #0
 800120a:	d106      	bne.n	800121a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2220      	movs	r2, #32
 8001210:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f002 ff7d 	bl	8004114 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	4b40      	ldr	r3, [pc, #256]	@ (8001320 <HAL_ETH_Init+0x130>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001222:	4a3f      	ldr	r2, [pc, #252]	@ (8001320 <HAL_ETH_Init+0x130>)
 8001224:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001228:	6453      	str	r3, [r2, #68]	@ 0x44
 800122a:	4b3d      	ldr	r3, [pc, #244]	@ (8001320 <HAL_ETH_Init+0x130>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001236:	4b3b      	ldr	r3, [pc, #236]	@ (8001324 <HAL_ETH_Init+0x134>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	4a3a      	ldr	r2, [pc, #232]	@ (8001324 <HAL_ETH_Init+0x134>)
 800123c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001240:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001242:	4b38      	ldr	r3, [pc, #224]	@ (8001324 <HAL_ETH_Init+0x134>)
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	4936      	ldr	r1, [pc, #216]	@ (8001324 <HAL_ETH_Init+0x134>)
 800124c:	4313      	orrs	r3, r2
 800124e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001250:	4b34      	ldr	r3, [pc, #208]	@ (8001324 <HAL_ETH_Init+0x134>)
 8001252:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	6812      	ldr	r2, [r2, #0]
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800126a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800126c:	f7ff fe7e 	bl	8000f6c <HAL_GetTick>
 8001270:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001272:	e011      	b.n	8001298 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001274:	f7ff fe7a 	bl	8000f6c <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001282:	d909      	bls.n	8001298 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2204      	movs	r2, #4
 8001288:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	22e0      	movs	r2, #224	@ 0xe0
 8001290:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e03f      	b.n	8001318 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1e4      	bne.n	8001274 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 ff32 	bl	8002114 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f000 ffdd 	bl	8002270 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f001 f833 	bl	8002322 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	461a      	mov	r2, r3
 80012c2:	2100      	movs	r1, #0
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 ff9b 	bl	8002200 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80012d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	6812      	ldr	r2, [r2, #0]
 80012e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ea:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80012ee:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001302:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2210      	movs	r2, #16
 8001312:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40023800 	.word	0x40023800
 8001324:	40013800 	.word	0x40013800

08001328 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001336:	2b10      	cmp	r3, #16
 8001338:	d161      	bne.n	80013fe <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2220      	movs	r2, #32
 800133e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2201      	movs	r2, #1
 8001346:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2204      	movs	r2, #4
 800134c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 fa2c 	bl	80017ac <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800135c:	2001      	movs	r0, #1
 800135e:	f7ff fe11 	bl	8000f84 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6812      	ldr	r2, [r2, #0]
 8001378:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800137c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001380:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	6812      	ldr	r2, [r2, #0]
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001398:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 fd56 	bl	8001e4c <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0208 	orr.w	r2, r2, #8
 80013ae:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013b8:	2001      	movs	r0, #1
 80013ba:	f7ff fde3 	bl	8000f84 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f042 0204 	orr.w	r2, r2, #4
 80013d4:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 80013e8:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 80013ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013f0:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2240      	movs	r2, #64	@ 0x40
 80013f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	e000      	b.n	8001400 <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
  }
}
 8001400:	4618      	mov	r0, r3
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001416:	2b40      	cmp	r3, #64	@ 0x40
 8001418:	d170      	bne.n	80014fc <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2220      	movs	r2, #32
 800141e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	6812      	ldr	r2, [r2, #0]
 8001430:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8001434:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8001438:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800143c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6812      	ldr	r2, [r2, #0]
 800144c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001450:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001454:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	6812      	ldr	r2, [r2, #0]
 8001464:	f023 0302 	bic.w	r3, r3, #2
 8001468:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800146c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f022 0204 	bic.w	r2, r2, #4
 800147c:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001486:	2001      	movs	r0, #1
 8001488:	f7ff fd7c 	bl	8000f84 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 fcd9 	bl	8001e4c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0208 	bic.w	r2, r2, #8
 80014a8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014b2:	2001      	movs	r0, #1
 80014b4:	f7ff fd66 	bl	8000f84 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	e00e      	b.n	80014e4 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	3212      	adds	r2, #18
 80014cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d0:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	3301      	adds	r3, #1
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d9ed      	bls.n	80014c6 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2210      	movs	r2, #16
 80014f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80014f8:	2300      	movs	r3, #0
 80014fa:	e000      	b.n	80014fe <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
  }
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	60f8      	str	r0, [r7, #12]
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d109      	bne.n	800152c <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800151e:	f043 0201 	orr.w	r2, r3, #1
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e07c      	b.n	8001626 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001532:	2b40      	cmp	r3, #64	@ 0x40
 8001534:	d176      	bne.n	8001624 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001536:	2200      	movs	r2, #0
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f000 ff60 	bl	8002400 <ETH_Prepare_Tx_Descriptors>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d009      	beq.n	800155a <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800154c:	f043 0202 	orr.w	r2, r3, #2
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e065      	b.n	8001626 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 800155a:	f3bf 8f4f 	dsb	sy
}
 800155e:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	3206      	adds	r2, #6
 8001568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800156c:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001572:	1c5a      	adds	r2, r3, #1
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	629a      	str	r2, [r3, #40]	@ 0x28
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800157c:	2b03      	cmp	r3, #3
 800157e:	d904      	bls.n	800158a <HAL_ETH_Transmit+0x84>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001584:	1f1a      	subs	r2, r3, #4
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	3106      	adds	r1, #6
 8001596:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800159a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800159e:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80015a0:	f7ff fce4 	bl	8000f6c <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80015a6:	e037      	b.n	8001618 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d011      	beq.n	80015de <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015c0:	f043 0208 	orr.w	r2, r3, #8
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015d2:	695a      	ldr	r2, [r3, #20]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e023      	b.n	8001626 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e4:	d018      	beq.n	8001618 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80015e6:	f7ff fcc1 	bl	8000f6c <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d302      	bcc.n	80015fc <HAL_ETH_Transmit+0xf6>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d10d      	bne.n	8001618 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001602:	f043 0204 	orr.w	r2, r3, #4
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001612:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e006      	b.n	8001626 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	dbc3      	blt.n	80015a8 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001620:	2300      	movs	r3, #0
 8001622:	e000      	b.n	8001626 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
  }
}
 8001626:	4618      	mov	r0, r3
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b088      	sub	sp, #32
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800163c:	2300      	movs	r3, #0
 800163e:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d109      	bne.n	800165a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800164c:	f043 0201 	orr.w	r2, r3, #1
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e0a4      	b.n	80017a4 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001660:	2b40      	cmp	r3, #64	@ 0x40
 8001662:	d001      	beq.n	8001668 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e09d      	b.n	80017a4 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800166c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69fa      	ldr	r2, [r7, #28]
 8001672:	3212      	adds	r2, #18
 8001674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001678:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800167e:	f1c3 0304 	rsb	r3, r3, #4
 8001682:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001684:	e066      	b.n	8001754 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800168e:	2b00      	cmp	r3, #0
 8001690:	d007      	beq.n	80016a2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	69da      	ldr	r2, [r3, #28]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	699a      	ldr	r2, [r3, #24]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d103      	bne.n	80016b6 <HAL_ETH_ReadData+0x88>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d03c      	beq.n	8001730 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d005      	beq.n	80016ce <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	0c1b      	lsrs	r3, r3, #16
 80016d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80016d8:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d005      	beq.n	80016f2 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80016ee:	2301      	movs	r3, #1
 80016f0:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800170a:	461a      	mov	r2, r3
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	b29b      	uxth	r3, r3
 8001710:	f002 feb8 	bl	8004484 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001718:	1c5a      	adds	r2, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	441a      	add	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	3301      	adds	r3, #1
 8001734:	61fb      	str	r3, [r7, #28]
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	2b03      	cmp	r3, #3
 800173a:	d902      	bls.n	8001742 <HAL_ETH_ReadData+0x114>
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	3b04      	subs	r3, #4
 8001740:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69fa      	ldr	r2, [r7, #28]
 8001746:	3212      	adds	r2, #18
 8001748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800174c:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3301      	adds	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001758:	2b00      	cmp	r3, #0
 800175a:	db06      	blt.n	800176a <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	429a      	cmp	r2, r3
 8001762:	d202      	bcs.n	800176a <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8001764:	7cfb      	ldrb	r3, [r7, #19]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d08d      	beq.n	8001686 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	441a      	add	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 f814 	bl	80017ac <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69fa      	ldr	r2, [r7, #28]
 8001788:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800178a:	7cfb      	ldrb	r3, [r7, #19]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d108      	bne.n	80017a2 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	e000      	b.n	80017a4 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3720      	adds	r7, #32
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80017b8:	2301      	movs	r3, #1
 80017ba:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80017c0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	3212      	adds	r2, #18
 80017c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017cc:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80017d2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80017d4:	e044      	b.n	8001860 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d112      	bne.n	8001804 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80017de:	f107 0308 	add.w	r3, r7, #8
 80017e2:	4618      	mov	r0, r3
 80017e4:	f002 fe1e 	bl	8004424 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d102      	bne.n	80017f4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	74fb      	strb	r3, [r7, #19]
 80017f2:	e007      	b.n	8001804 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	461a      	mov	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	461a      	mov	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001804:	7cfb      	ldrb	r3, [r7, #19]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d02a      	beq.n	8001860 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180e:	2b00      	cmp	r3, #0
 8001810:	d108      	bne.n	8001824 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800181a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	6053      	str	r3, [r2, #4]
 8001822:	e005      	b.n	8001830 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	3301      	adds	r3, #1
 8001840:	61fb      	str	r3, [r7, #28]
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	2b03      	cmp	r3, #3
 8001846:	d902      	bls.n	800184e <ETH_UpdateDescriptor+0xa2>
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	3b04      	subs	r3, #4
 800184c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69fa      	ldr	r2, [r7, #28]
 8001852:	3212      	adds	r2, #18
 8001854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001858:	617b      	str	r3, [r7, #20]
      desccount--;
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	3b01      	subs	r3, #1
 800185e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d002      	beq.n	800186c <ETH_UpdateDescriptor+0xc0>
 8001866:	7cfb      	ldrb	r3, [r7, #19]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1b4      	bne.n	80017d6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	429a      	cmp	r2, r3
 8001874:	d01a      	beq.n	80018ac <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3303      	adds	r3, #3
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001880:	f3bf 8f5f 	dmb	sy
}
 8001884:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6919      	ldr	r1, [r3, #16]
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	18ca      	adds	r2, r1, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800189e:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80018ac:	bf00      	nop
 80018ae:	3720      	adds	r7, #32
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018c2:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80018dc:	4b4b      	ldr	r3, [pc, #300]	@ (8001a0c <HAL_ETH_IRQHandler+0x158>)
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00e      	beq.n	800190a <HAL_ETH_IRQHandler+0x56>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d009      	beq.n	800190a <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018fe:	461a      	mov	r2, r3
 8001900:	4b43      	ldr	r3, [pc, #268]	@ (8001a10 <HAL_ETH_IRQHandler+0x15c>)
 8001902:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 f891 	bl	8001a2c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00f      	beq.n	8001934 <HAL_ETH_IRQHandler+0x80>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00a      	beq.n	8001934 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001926:	461a      	mov	r2, r3
 8001928:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800192c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f872 	bl	8001a18 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d042      	beq.n	80019c4 <HAL_ETH_IRQHandler+0x110>
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d03d      	beq.n	80019c4 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800194e:	f043 0208 	orr.w	r2, r3, #8
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d01a      	beq.n	8001998 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800196a:	695a      	ldr	r2, [r3, #20]
 800196c:	4b29      	ldr	r3, [pc, #164]	@ (8001a14 <HAL_ETH_IRQHandler+0x160>)
 800196e:	4013      	ands	r3, r2
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8001988:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800198c:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	22e0      	movs	r2, #224	@ 0xe0
 8001992:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001996:	e012      	b.n	80019be <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019a0:	695a      	ldr	r2, [r3, #20]
 80019a2:	f248 6380 	movw	r3, #34432	@ 0x8680
 80019a6:	4013      	ands	r3, r2
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019b6:	461a      	mov	r2, r3
 80019b8:	f248 6380 	movw	r3, #34432	@ 0x8680
 80019bc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f83e 	bl	8001a40 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00e      	beq.n	80019ec <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f838 	bl	8001a54 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d006      	beq.n	8001a04 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80019f6:	4b05      	ldr	r3, [pc, #20]	@ (8001a0c <HAL_ETH_IRQHandler+0x158>)
 80019f8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80019fc:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f832 	bl	8001a68 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001a04:	bf00      	nop
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40013c00 	.word	0x40013c00
 8001a10:	00010040 	.word	0x00010040
 8001a14:	007e2000 	.word	0x007e2000

08001a18 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f003 031c 	and.w	r3, r3, #28
 8001a98:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	02db      	lsls	r3, r3, #11
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	019b      	lsls	r3, r3, #6
 8001aaa:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f023 0302 	bic.w	r3, r3, #2
 8001aba:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001acc:	f7ff fa4e 	bl	8000f6c <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ad2:	e00d      	b.n	8001af0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001ad4:	f7ff fa4a 	bl	8000f6c <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ae2:	d301      	bcc.n	8001ae8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e010      	b.n	8001b0a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1ec      	bne.n	8001ad4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	461a      	mov	r2, r3
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f003 031c 	and.w	r3, r3, #28
 8001b2e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	02db      	lsls	r3, r3, #11
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	019b      	lsls	r3, r3, #6
 8001b40:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b6c:	f7ff f9fe 	bl	8000f6c <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b72:	e00d      	b.n	8001b90 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001b74:	f7ff f9fa 	bl	8000f6c <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b82:	d301      	bcc.n	8001b88 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e009      	b.n	8001b9c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1ec      	bne.n	8001b74 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0e6      	b.n	8001d86 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0310 	and.w	r3, r3, #16
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	bf14      	ite	ne
 8001bc6:	2301      	movne	r3, #1
 8001bc8:	2300      	moveq	r3, #0
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	461a      	mov	r2, r3
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	bf0c      	ite	eq
 8001bf0:	2301      	moveq	r3, #1
 8001bf2:	2300      	movne	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bf14      	ite	ne
 8001c0c:	2301      	movne	r3, #1
 8001c0e:	2300      	moveq	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	bf0c      	ite	eq
 8001c26:	2301      	moveq	r3, #1
 8001c28:	2300      	movne	r3, #0
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	bf14      	ite	ne
 8001c40:	2301      	movne	r3, #1
 8001c42:	2300      	moveq	r3, #0
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	461a      	mov	r2, r3
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	bf0c      	ite	eq
 8001c76:	2301      	moveq	r3, #1
 8001c78:	2300      	movne	r3, #0
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	bf0c      	ite	eq
 8001c90:	2301      	moveq	r3, #1
 8001c92:	2300      	movne	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	461a      	mov	r2, r3
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	bf14      	ite	ne
 8001caa:	2301      	movne	r3, #1
 8001cac:	2300      	moveq	r3, #0
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	bf14      	ite	ne
 8001cd2:	2301      	movne	r3, #1
 8001cd4:	2300      	moveq	r3, #0
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	bf14      	ite	ne
 8001cec:	2301      	movne	r3, #1
 8001cee:	2300      	moveq	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	bf14      	ite	ne
 8001d06:	2301      	movne	r3, #1
 8001d08:	2300      	moveq	r3, #0
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	bf0c      	ite	eq
 8001d22:	2301      	moveq	r3, #1
 8001d24:	2300      	movne	r3, #0
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	461a      	mov	r2, r3
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	0c1b      	lsrs	r3, r3, #16
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	bf14      	ite	ne
 8001d5a:	2301      	movne	r3, #1
 8001d5c:	2300      	moveq	r3, #0
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	461a      	mov	r2, r3
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	bf14      	ite	ne
 8001d76:	2301      	movne	r3, #1
 8001d78:	2300      	moveq	r3, #0
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00b      	b.n	8001dbe <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001dac:	2b10      	cmp	r3, #16
 8001dae:	d105      	bne.n	8001dbc <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001db0:	6839      	ldr	r1, [r7, #0]
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f870 	bl	8001e98 <ETH_SetMACConfig>

    return HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	e000      	b.n	8001dbe <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
  }
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f023 031c 	bic.w	r3, r3, #28
 8001dde:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001de0:	f001 fa54 	bl	800328c <HAL_RCC_GetHCLKFreq>
 8001de4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	4a14      	ldr	r2, [pc, #80]	@ (8001e3c <HAL_ETH_SetMDIOClockRange+0x74>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d804      	bhi.n	8001df8 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f043 0308 	orr.w	r3, r3, #8
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	e019      	b.n	8001e2c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4a11      	ldr	r2, [pc, #68]	@ (8001e40 <HAL_ETH_SetMDIOClockRange+0x78>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d204      	bcs.n	8001e0a <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f043 030c 	orr.w	r3, r3, #12
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	e010      	b.n	8001e2c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e44 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d90c      	bls.n	8001e2c <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	4a0c      	ldr	r2, [pc, #48]	@ (8001e48 <HAL_ETH_SetMDIOClockRange+0x80>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d804      	bhi.n	8001e24 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f043 0304 	orr.w	r3, r3, #4
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	e003      	b.n	8001e2c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f043 0310 	orr.w	r3, r3, #16
 8001e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	611a      	str	r2, [r3, #16]
}
 8001e34:	bf00      	nop
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	02160ebf 	.word	0x02160ebf
 8001e40:	03938700 	.word	0x03938700
 8001e44:	05f5e0ff 	.word	0x05f5e0ff
 8001e48:	08f0d17f 	.word	0x08f0d17f

08001e4c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e6a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e6e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	f7ff f881 	bl	8000f84 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e8c:	6193      	str	r3, [r2, #24]
}
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4b53      	ldr	r3, [pc, #332]	@ (8001ffc <ETH_SetMACConfig+0x164>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	7b9b      	ldrb	r3, [r3, #14]
 8001eb6:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	7c12      	ldrb	r2, [r2, #16]
 8001ebc:	2a00      	cmp	r2, #0
 8001ebe:	d102      	bne.n	8001ec6 <ETH_SetMACConfig+0x2e>
 8001ec0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001ec4:	e000      	b.n	8001ec8 <ETH_SetMACConfig+0x30>
 8001ec6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001ec8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	7c52      	ldrb	r2, [r2, #17]
 8001ece:	2a00      	cmp	r2, #0
 8001ed0:	d102      	bne.n	8001ed8 <ETH_SetMACConfig+0x40>
 8001ed2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001ed6:	e000      	b.n	8001eda <ETH_SetMACConfig+0x42>
 8001ed8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001eda:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ee0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	7fdb      	ldrb	r3, [r3, #31]
 8001ee6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001ee8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001eee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	7f92      	ldrb	r2, [r2, #30]
 8001ef4:	2a00      	cmp	r2, #0
 8001ef6:	d102      	bne.n	8001efe <ETH_SetMACConfig+0x66>
 8001ef8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001efc:	e000      	b.n	8001f00 <ETH_SetMACConfig+0x68>
 8001efe:	2200      	movs	r2, #0
                        macconf->Speed |
 8001f00:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	7f1b      	ldrb	r3, [r3, #28]
 8001f06:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f08:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f0e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	791b      	ldrb	r3, [r3, #4]
 8001f14:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001f16:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001f1e:	2a00      	cmp	r2, #0
 8001f20:	d102      	bne.n	8001f28 <ETH_SetMACConfig+0x90>
 8001f22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f26:	e000      	b.n	8001f2a <ETH_SetMACConfig+0x92>
 8001f28:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f2a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	7bdb      	ldrb	r3, [r3, #15]
 8001f30:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f32:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f38:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001f40:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001f42:	4313      	orrs	r3, r2
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f7ff f812 	bl	8000f84 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001f76:	4013      	ands	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f7e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001f86:	2a00      	cmp	r2, #0
 8001f88:	d101      	bne.n	8001f8e <ETH_SetMACConfig+0xf6>
 8001f8a:	2280      	movs	r2, #128	@ 0x80
 8001f8c:	e000      	b.n	8001f90 <ETH_SetMACConfig+0xf8>
 8001f8e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f90:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f96:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001f9e:	2a01      	cmp	r2, #1
 8001fa0:	d101      	bne.n	8001fa6 <ETH_SetMACConfig+0x10e>
 8001fa2:	2208      	movs	r2, #8
 8001fa4:	e000      	b.n	8001fa8 <ETH_SetMACConfig+0x110>
 8001fa6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001fa8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001fb0:	2a01      	cmp	r2, #1
 8001fb2:	d101      	bne.n	8001fb8 <ETH_SetMACConfig+0x120>
 8001fb4:	2204      	movs	r2, #4
 8001fb6:	e000      	b.n	8001fba <ETH_SetMACConfig+0x122>
 8001fb8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001fba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001fc2:	2a01      	cmp	r2, #1
 8001fc4:	d101      	bne.n	8001fca <ETH_SetMACConfig+0x132>
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	e000      	b.n	8001fcc <ETH_SetMACConfig+0x134>
 8001fca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	f7fe ffcd 	bl	8000f84 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	619a      	str	r2, [r3, #24]
}
 8001ff2:	bf00      	nop
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	fd20810f 	.word	0xfd20810f

08002000 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	4b3d      	ldr	r3, [pc, #244]	@ (8002110 <ETH_SetDMAConfig+0x110>)
 800201a:	4013      	ands	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	7b1b      	ldrb	r3, [r3, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d102      	bne.n	800202c <ETH_SetDMAConfig+0x2c>
 8002026:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800202a:	e000      	b.n	800202e <ETH_SetDMAConfig+0x2e>
 800202c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	7b5b      	ldrb	r3, [r3, #13]
 8002032:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002034:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	7f52      	ldrb	r2, [r2, #29]
 800203a:	2a00      	cmp	r2, #0
 800203c:	d102      	bne.n	8002044 <ETH_SetDMAConfig+0x44>
 800203e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002042:	e000      	b.n	8002046 <ETH_SetDMAConfig+0x46>
 8002044:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002046:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	7b9b      	ldrb	r3, [r3, #14]
 800204c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800204e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002054:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	7f1b      	ldrb	r3, [r3, #28]
 800205a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800205c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	7f9b      	ldrb	r3, [r3, #30]
 8002062:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002064:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800206a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002072:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002074:	4313      	orrs	r3, r2
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4313      	orrs	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002084:	461a      	mov	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002096:	2001      	movs	r0, #1
 8002098:	f7fe ff74 	bl	8000f84 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020a4:	461a      	mov	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	791b      	ldrb	r3, [r3, #4]
 80020ae:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020b4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80020ba:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80020c0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80020c8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80020ca:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020d2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020d8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6812      	ldr	r2, [r2, #0]
 80020de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020e6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020f4:	2001      	movs	r0, #1
 80020f6:	f7fe ff45 	bl	8000f84 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002102:	461a      	mov	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6013      	str	r3, [r2, #0]
}
 8002108:	bf00      	nop
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	f8de3f23 	.word	0xf8de3f23

08002114 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b0a6      	sub	sp, #152	@ 0x98
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800211c:	2301      	movs	r3, #1
 800211e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002122:	2301      	movs	r3, #1
 8002124:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002128:	2300      	movs	r3, #0
 800212a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800212c:	2300      	movs	r3, #0
 800212e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002132:	2301      	movs	r3, #1
 8002134:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002138:	2300      	movs	r3, #0
 800213a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800213e:	2301      	movs	r3, #1
 8002140:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002144:	2301      	movs	r3, #1
 8002146:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800214a:	2300      	movs	r3, #0
 800214c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002150:	2300      	movs	r3, #0
 8002152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002156:	2300      	movs	r3, #0
 8002158:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002160:	2300      	movs	r3, #0
 8002162:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002164:	2300      	movs	r3, #0
 8002166:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800216a:	2300      	movs	r3, #0
 800216c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002170:	2300      	movs	r3, #0
 8002172:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002176:	2300      	movs	r3, #0
 8002178:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800217c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002180:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002182:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002186:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002188:	2300      	movs	r3, #0
 800218a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800218e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002192:	4619      	mov	r1, r3
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff fe7f 	bl	8001e98 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800219a:	2301      	movs	r3, #1
 800219c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800219e:	2301      	movs	r3, #1
 80021a0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80021a2:	2301      	movs	r3, #1
 80021a4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80021a8:	2301      	movs	r3, #1
 80021aa:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80021ac:	2300      	movs	r3, #0
 80021ae:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80021bc:	2300      	movs	r3, #0
 80021be:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80021c0:	2301      	movs	r3, #1
 80021c2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80021c6:	2301      	movs	r3, #1
 80021c8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80021ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021ce:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80021d0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80021d4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80021d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021da:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80021dc:	2301      	movs	r3, #1
 80021de:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80021e6:	2300      	movs	r3, #0
 80021e8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80021ea:	f107 0308 	add.w	r3, r7, #8
 80021ee:	4619      	mov	r1, r3
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff ff05 	bl	8002000 <ETH_SetDMAConfig>
}
 80021f6:	bf00      	nop
 80021f8:	3798      	adds	r7, #152	@ 0x98
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002200:	b480      	push	{r7}
 8002202:	b087      	sub	sp, #28
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3305      	adds	r3, #5
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	021b      	lsls	r3, r3, #8
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	3204      	adds	r2, #4
 8002218:	7812      	ldrb	r2, [r2, #0]
 800221a:	4313      	orrs	r3, r2
 800221c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	4b11      	ldr	r3, [pc, #68]	@ (8002268 <ETH_MACAddressConfig+0x68>)
 8002222:	4413      	add	r3, r2
 8002224:	461a      	mov	r2, r3
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3303      	adds	r3, #3
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	061a      	lsls	r2, r3, #24
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3302      	adds	r3, #2
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	041b      	lsls	r3, r3, #16
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3301      	adds	r3, #1
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	4313      	orrs	r3, r2
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	7812      	ldrb	r2, [r2, #0]
 800224a:	4313      	orrs	r3, r2
 800224c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	4b06      	ldr	r3, [pc, #24]	@ (800226c <ETH_MACAddressConfig+0x6c>)
 8002252:	4413      	add	r3, r2
 8002254:	461a      	mov	r2, r3
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	6013      	str	r3, [r2, #0]
}
 800225a:	bf00      	nop
 800225c:	371c      	adds	r7, #28
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40028040 	.word	0x40028040
 800226c:	40028044 	.word	0x40028044

08002270 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	e03e      	b.n	80022fc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68d9      	ldr	r1, [r3, #12]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4613      	mov	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	440b      	add	r3, r1
 800228e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2200      	movs	r2, #0
 800229a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2200      	movs	r2, #0
 80022a6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	3206      	adds	r2, #6
 80022b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d80c      	bhi.n	80022e0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68d9      	ldr	r1, [r3, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	440b      	add	r3, r1
 80022d8:	461a      	mov	r2, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	e004      	b.n	80022ea <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	461a      	mov	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	3301      	adds	r3, #1
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d9bd      	bls.n	800227e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002314:	611a      	str	r2, [r3, #16]
}
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002322:	b480      	push	{r7}
 8002324:	b085      	sub	sp, #20
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	e048      	b.n	80023c2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6919      	ldr	r1, [r3, #16]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	440b      	add	r3, r1
 8002340:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2200      	movs	r2, #0
 800234c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2200      	movs	r2, #0
 8002352:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2200      	movs	r2, #0
 8002358:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2200      	movs	r2, #0
 800235e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2200      	movs	r2, #0
 8002364:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800236c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002386:	68b9      	ldr	r1, [r7, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	3212      	adds	r2, #18
 800238e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2b02      	cmp	r3, #2
 8002396:	d80c      	bhi.n	80023b2 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6919      	ldr	r1, [r3, #16]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	440b      	add	r3, r1
 80023aa:	461a      	mov	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	60da      	str	r2, [r3, #12]
 80023b0:	e004      	b.n	80023bc <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	461a      	mov	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	3301      	adds	r3, #1
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d9b3      	bls.n	8002330 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023f2:	60da      	str	r2, [r3, #12]
}
 80023f4:	bf00      	nop
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002400:	b480      	push	{r7}
 8002402:	b091      	sub	sp, #68	@ 0x44
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	3318      	adds	r3, #24
 8002410:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002424:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800242a:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800243e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002442:	d007      	beq.n	8002454 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002444:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002446:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002448:	3304      	adds	r3, #4
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002454:	2302      	movs	r3, #2
 8002456:	e115      	b.n	8002684 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8002458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800245a:	3301      	adds	r3, #1
 800245c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800245e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002466:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002470:	f023 031f 	bic.w	r3, r3, #31
 8002474:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002476:	6852      	ldr	r2, [r2, #4]
 8002478:	431a      	orrs	r2, r3
 800247a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d008      	beq.n	800249c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800248a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	431a      	orrs	r2, r3
 8002498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800249a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0320 	and.w	r3, r3, #32
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80024a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	431a      	orrs	r2, r3
 80024b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d005      	beq.n	80024d2 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80024c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80024ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80024d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80024da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024dc:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80024de:	e084      	b.n	80025ea <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80024e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80024e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ea:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d006      	beq.n	8002500 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80024fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	e005      	b.n	800250c <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800250a:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800250c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800250e:	3301      	adds	r3, #1
 8002510:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002514:	2b03      	cmp	r3, #3
 8002516:	d902      	bls.n	800251e <ETH_Prepare_Tx_Descriptors+0x11e>
 8002518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800251a:	3b04      	subs	r3, #4
 800251c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800251e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002520:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002526:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002530:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002534:	d007      	beq.n	8002546 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800253a:	3304      	adds	r3, #4
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d029      	beq.n	800259a <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800254a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800254e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002552:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002554:	2300      	movs	r3, #0
 8002556:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002558:	e019      	b.n	800258e <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 800255a:	f3bf 8f5f 	dmb	sy
}
 800255e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800256a:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800256c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800256e:	3301      	adds	r3, #1
 8002570:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002574:	2b03      	cmp	r3, #3
 8002576:	d902      	bls.n	800257e <ETH_Prepare_Tx_Descriptors+0x17e>
 8002578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800257a:	3b04      	subs	r3, #4
 800257c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002580:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002586:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800258a:	3301      	adds	r3, #1
 800258c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800258e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002592:	429a      	cmp	r2, r3
 8002594:	d3e1      	bcc.n	800255a <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8002596:	2302      	movs	r3, #2
 8002598:	e074      	b.n	8002684 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800259a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80025a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a4:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 80025a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025a8:	3301      	adds	r3, #1
 80025aa:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80025ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80025b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ba:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80025bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80025c4:	f023 031f 	bic.w	r3, r3, #31
 80025c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025ca:	6852      	ldr	r2, [r2, #4]
 80025cc:	431a      	orrs	r2, r3
 80025ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d0:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80025d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025d4:	3301      	adds	r3, #1
 80025d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80025d8:	f3bf 8f5f 	dmb	sy
}
 80025dc:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80025de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80025e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e8:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80025ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f47f af76 	bne.w	80024e0 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d006      	beq.n	8002608 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	e005      	b.n	8002614 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002612:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800261c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800261e:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002622:	6a3a      	ldr	r2, [r7, #32]
 8002624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002628:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800262a:	f3bf 8f5f 	dmb	sy
}
 800262e:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800263a:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800263c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002640:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002644:	3304      	adds	r3, #4
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800264c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002650:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002652:	f3ef 8310 	mrs	r3, PRIMASK
 8002656:	613b      	str	r3, [r7, #16]
  return(result);
 8002658:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800265a:	61fb      	str	r3, [r7, #28]
 800265c:	2301      	movs	r3, #1
 800265e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f383 8810 	msr	PRIMASK, r3
}
 8002666:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800266c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800266e:	4413      	add	r3, r2
 8002670:	1c5a      	adds	r2, r3, #1
 8002672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002674:	629a      	str	r2, [r3, #40]	@ 0x28
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	f383 8810 	msr	PRIMASK, r3
}
 8002680:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3744      	adds	r7, #68	@ 0x44
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002690:	b480      	push	{r7}
 8002692:	b089      	sub	sp, #36	@ 0x24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800269e:	2300      	movs	r3, #0
 80026a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	e16b      	b.n	8002984 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026ac:	2201      	movs	r2, #1
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	4013      	ands	r3, r2
 80026be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	f040 815a 	bne.w	800297e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d005      	beq.n	80026e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d130      	bne.n	8002744 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	2203      	movs	r2, #3
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002718:	2201      	movs	r2, #1
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 0201 	and.w	r2, r3, #1
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	2b03      	cmp	r3, #3
 800274e:	d017      	beq.n	8002780 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	2203      	movs	r2, #3
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d123      	bne.n	80027d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	08da      	lsrs	r2, r3, #3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3208      	adds	r2, #8
 8002794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002798:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	220f      	movs	r2, #15
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	08da      	lsrs	r2, r3, #3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3208      	adds	r2, #8
 80027ce:	69b9      	ldr	r1, [r7, #24]
 80027d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	2203      	movs	r2, #3
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 0203 	and.w	r2, r3, #3
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 80b4 	beq.w	800297e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	4b60      	ldr	r3, [pc, #384]	@ (800299c <HAL_GPIO_Init+0x30c>)
 800281c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281e:	4a5f      	ldr	r2, [pc, #380]	@ (800299c <HAL_GPIO_Init+0x30c>)
 8002820:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002824:	6453      	str	r3, [r2, #68]	@ 0x44
 8002826:	4b5d      	ldr	r3, [pc, #372]	@ (800299c <HAL_GPIO_Init+0x30c>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002832:	4a5b      	ldr	r2, [pc, #364]	@ (80029a0 <HAL_GPIO_Init+0x310>)
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	089b      	lsrs	r3, r3, #2
 8002838:	3302      	adds	r3, #2
 800283a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	220f      	movs	r2, #15
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a52      	ldr	r2, [pc, #328]	@ (80029a4 <HAL_GPIO_Init+0x314>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d02b      	beq.n	80028b6 <HAL_GPIO_Init+0x226>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a51      	ldr	r2, [pc, #324]	@ (80029a8 <HAL_GPIO_Init+0x318>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d025      	beq.n	80028b2 <HAL_GPIO_Init+0x222>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a50      	ldr	r2, [pc, #320]	@ (80029ac <HAL_GPIO_Init+0x31c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d01f      	beq.n	80028ae <HAL_GPIO_Init+0x21e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a4f      	ldr	r2, [pc, #316]	@ (80029b0 <HAL_GPIO_Init+0x320>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d019      	beq.n	80028aa <HAL_GPIO_Init+0x21a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a4e      	ldr	r2, [pc, #312]	@ (80029b4 <HAL_GPIO_Init+0x324>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d013      	beq.n	80028a6 <HAL_GPIO_Init+0x216>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a4d      	ldr	r2, [pc, #308]	@ (80029b8 <HAL_GPIO_Init+0x328>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00d      	beq.n	80028a2 <HAL_GPIO_Init+0x212>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a4c      	ldr	r2, [pc, #304]	@ (80029bc <HAL_GPIO_Init+0x32c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d007      	beq.n	800289e <HAL_GPIO_Init+0x20e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a4b      	ldr	r2, [pc, #300]	@ (80029c0 <HAL_GPIO_Init+0x330>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d101      	bne.n	800289a <HAL_GPIO_Init+0x20a>
 8002896:	2307      	movs	r3, #7
 8002898:	e00e      	b.n	80028b8 <HAL_GPIO_Init+0x228>
 800289a:	2308      	movs	r3, #8
 800289c:	e00c      	b.n	80028b8 <HAL_GPIO_Init+0x228>
 800289e:	2306      	movs	r3, #6
 80028a0:	e00a      	b.n	80028b8 <HAL_GPIO_Init+0x228>
 80028a2:	2305      	movs	r3, #5
 80028a4:	e008      	b.n	80028b8 <HAL_GPIO_Init+0x228>
 80028a6:	2304      	movs	r3, #4
 80028a8:	e006      	b.n	80028b8 <HAL_GPIO_Init+0x228>
 80028aa:	2303      	movs	r3, #3
 80028ac:	e004      	b.n	80028b8 <HAL_GPIO_Init+0x228>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e002      	b.n	80028b8 <HAL_GPIO_Init+0x228>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <HAL_GPIO_Init+0x228>
 80028b6:	2300      	movs	r3, #0
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	f002 0203 	and.w	r2, r2, #3
 80028be:	0092      	lsls	r2, r2, #2
 80028c0:	4093      	lsls	r3, r2
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028c8:	4935      	ldr	r1, [pc, #212]	@ (80029a0 <HAL_GPIO_Init+0x310>)
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	089b      	lsrs	r3, r3, #2
 80028ce:	3302      	adds	r3, #2
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028d6:	4b3b      	ldr	r3, [pc, #236]	@ (80029c4 <HAL_GPIO_Init+0x334>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028fa:	4a32      	ldr	r2, [pc, #200]	@ (80029c4 <HAL_GPIO_Init+0x334>)
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002900:	4b30      	ldr	r3, [pc, #192]	@ (80029c4 <HAL_GPIO_Init+0x334>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002924:	4a27      	ldr	r2, [pc, #156]	@ (80029c4 <HAL_GPIO_Init+0x334>)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800292a:	4b26      	ldr	r3, [pc, #152]	@ (80029c4 <HAL_GPIO_Init+0x334>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800294e:	4a1d      	ldr	r2, [pc, #116]	@ (80029c4 <HAL_GPIO_Init+0x334>)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002954:	4b1b      	ldr	r3, [pc, #108]	@ (80029c4 <HAL_GPIO_Init+0x334>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002978:	4a12      	ldr	r2, [pc, #72]	@ (80029c4 <HAL_GPIO_Init+0x334>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3301      	adds	r3, #1
 8002982:	61fb      	str	r3, [r7, #28]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b0f      	cmp	r3, #15
 8002988:	f67f ae90 	bls.w	80026ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800298c:	bf00      	nop
 800298e:	bf00      	nop
 8002990:	3724      	adds	r7, #36	@ 0x24
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800
 80029a0:	40013800 	.word	0x40013800
 80029a4:	40020000 	.word	0x40020000
 80029a8:	40020400 	.word	0x40020400
 80029ac:	40020800 	.word	0x40020800
 80029b0:	40020c00 	.word	0x40020c00
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40021400 	.word	0x40021400
 80029bc:	40021800 	.word	0x40021800
 80029c0:	40021c00 	.word	0x40021c00
 80029c4:	40013c00 	.word	0x40013c00

080029c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	807b      	strh	r3, [r7, #2]
 80029d4:	4613      	mov	r3, r2
 80029d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029d8:	787b      	ldrb	r3, [r7, #1]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029de:	887a      	ldrh	r2, [r7, #2]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029e4:	e003      	b.n	80029ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029e6:	887b      	ldrh	r3, [r7, #2]
 80029e8:	041a      	lsls	r2, r3, #16
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	619a      	str	r2, [r3, #24]
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
	...

080029fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a06:	4b08      	ldr	r3, [pc, #32]	@ (8002a28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a08:	695a      	ldr	r2, [r3, #20]
 8002a0a:	88fb      	ldrh	r3, [r7, #6]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d006      	beq.n	8002a20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a12:	4a05      	ldr	r2, [pc, #20]	@ (8002a28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a14:	88fb      	ldrh	r3, [r7, #6]
 8002a16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a18:	88fb      	ldrh	r3, [r7, #6]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 f806 	bl	8002a2c <HAL_GPIO_EXTI_Callback>
  }
}
 8002a20:	bf00      	nop
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40013c00 	.word	0x40013c00

08002a2c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
	...

08002a44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e267      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d075      	beq.n	8002b4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a62:	4b88      	ldr	r3, [pc, #544]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d00c      	beq.n	8002a88 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a6e:	4b85      	ldr	r3, [pc, #532]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d112      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a7a:	4b82      	ldr	r3, [pc, #520]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a86:	d10b      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a88:	4b7e      	ldr	r3, [pc, #504]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d05b      	beq.n	8002b4c <HAL_RCC_OscConfig+0x108>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d157      	bne.n	8002b4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e242      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aa8:	d106      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x74>
 8002aaa:	4b76      	ldr	r3, [pc, #472]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a75      	ldr	r2, [pc, #468]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	e01d      	b.n	8002af4 <HAL_RCC_OscConfig+0xb0>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ac0:	d10c      	bne.n	8002adc <HAL_RCC_OscConfig+0x98>
 8002ac2:	4b70      	ldr	r3, [pc, #448]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a6f      	ldr	r2, [pc, #444]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002ac8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	4b6d      	ldr	r3, [pc, #436]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a6c      	ldr	r2, [pc, #432]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	e00b      	b.n	8002af4 <HAL_RCC_OscConfig+0xb0>
 8002adc:	4b69      	ldr	r3, [pc, #420]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a68      	ldr	r2, [pc, #416]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002ae2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	4b66      	ldr	r3, [pc, #408]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a65      	ldr	r2, [pc, #404]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002aee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d013      	beq.n	8002b24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afc:	f7fe fa36 	bl	8000f6c <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b04:	f7fe fa32 	bl	8000f6c <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b64      	cmp	r3, #100	@ 0x64
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e207      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b16:	4b5b      	ldr	r3, [pc, #364]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCC_OscConfig+0xc0>
 8002b22:	e014      	b.n	8002b4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b24:	f7fe fa22 	bl	8000f6c <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b2c:	f7fe fa1e 	bl	8000f6c <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b64      	cmp	r3, #100	@ 0x64
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e1f3      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b3e:	4b51      	ldr	r3, [pc, #324]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0xe8>
 8002b4a:	e000      	b.n	8002b4e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d063      	beq.n	8002c22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b5a:	4b4a      	ldr	r3, [pc, #296]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00b      	beq.n	8002b7e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b66:	4b47      	ldr	r3, [pc, #284]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d11c      	bne.n	8002bac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b72:	4b44      	ldr	r3, [pc, #272]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d116      	bne.n	8002bac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b7e:	4b41      	ldr	r3, [pc, #260]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d005      	beq.n	8002b96 <HAL_RCC_OscConfig+0x152>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d001      	beq.n	8002b96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e1c7      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b96:	4b3b      	ldr	r3, [pc, #236]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	4937      	ldr	r1, [pc, #220]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002baa:	e03a      	b.n	8002c22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d020      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bb4:	4b34      	ldr	r3, [pc, #208]	@ (8002c88 <HAL_RCC_OscConfig+0x244>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bba:	f7fe f9d7 	bl	8000f6c <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc2:	f7fe f9d3 	bl	8000f6c <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e1a8      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd4:	4b2b      	ldr	r3, [pc, #172]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0f0      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be0:	4b28      	ldr	r3, [pc, #160]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	4925      	ldr	r1, [pc, #148]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	600b      	str	r3, [r1, #0]
 8002bf4:	e015      	b.n	8002c22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bf6:	4b24      	ldr	r3, [pc, #144]	@ (8002c88 <HAL_RCC_OscConfig+0x244>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfc:	f7fe f9b6 	bl	8000f6c <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c04:	f7fe f9b2 	bl	8000f6c <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e187      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c16:	4b1b      	ldr	r3, [pc, #108]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d036      	beq.n	8002c9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d016      	beq.n	8002c64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c36:	4b15      	ldr	r3, [pc, #84]	@ (8002c8c <HAL_RCC_OscConfig+0x248>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3c:	f7fe f996 	bl	8000f6c <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c44:	f7fe f992 	bl	8000f6c <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e167      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c56:	4b0b      	ldr	r3, [pc, #44]	@ (8002c84 <HAL_RCC_OscConfig+0x240>)
 8002c58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0x200>
 8002c62:	e01b      	b.n	8002c9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c64:	4b09      	ldr	r3, [pc, #36]	@ (8002c8c <HAL_RCC_OscConfig+0x248>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c6a:	f7fe f97f 	bl	8000f6c <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c70:	e00e      	b.n	8002c90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c72:	f7fe f97b 	bl	8000f6c <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d907      	bls.n	8002c90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e150      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
 8002c84:	40023800 	.word	0x40023800
 8002c88:	42470000 	.word	0x42470000
 8002c8c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c90:	4b88      	ldr	r3, [pc, #544]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002c92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1ea      	bne.n	8002c72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 8097 	beq.w	8002dd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002caa:	2300      	movs	r3, #0
 8002cac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cae:	4b81      	ldr	r3, [pc, #516]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10f      	bne.n	8002cda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60bb      	str	r3, [r7, #8]
 8002cbe:	4b7d      	ldr	r3, [pc, #500]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc2:	4a7c      	ldr	r2, [pc, #496]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cca:	4b7a      	ldr	r3, [pc, #488]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cd2:	60bb      	str	r3, [r7, #8]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cda:	4b77      	ldr	r3, [pc, #476]	@ (8002eb8 <HAL_RCC_OscConfig+0x474>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d118      	bne.n	8002d18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ce6:	4b74      	ldr	r3, [pc, #464]	@ (8002eb8 <HAL_RCC_OscConfig+0x474>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a73      	ldr	r2, [pc, #460]	@ (8002eb8 <HAL_RCC_OscConfig+0x474>)
 8002cec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cf2:	f7fe f93b 	bl	8000f6c <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cfa:	f7fe f937 	bl	8000f6c <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e10c      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0c:	4b6a      	ldr	r3, [pc, #424]	@ (8002eb8 <HAL_RCC_OscConfig+0x474>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0f0      	beq.n	8002cfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d106      	bne.n	8002d2e <HAL_RCC_OscConfig+0x2ea>
 8002d20:	4b64      	ldr	r3, [pc, #400]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d24:	4a63      	ldr	r2, [pc, #396]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d2c:	e01c      	b.n	8002d68 <HAL_RCC_OscConfig+0x324>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2b05      	cmp	r3, #5
 8002d34:	d10c      	bne.n	8002d50 <HAL_RCC_OscConfig+0x30c>
 8002d36:	4b5f      	ldr	r3, [pc, #380]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d3a:	4a5e      	ldr	r2, [pc, #376]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002d3c:	f043 0304 	orr.w	r3, r3, #4
 8002d40:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d42:	4b5c      	ldr	r3, [pc, #368]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d46:	4a5b      	ldr	r2, [pc, #364]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d4e:	e00b      	b.n	8002d68 <HAL_RCC_OscConfig+0x324>
 8002d50:	4b58      	ldr	r3, [pc, #352]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d54:	4a57      	ldr	r2, [pc, #348]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002d56:	f023 0301 	bic.w	r3, r3, #1
 8002d5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d5c:	4b55      	ldr	r3, [pc, #340]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d60:	4a54      	ldr	r2, [pc, #336]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002d62:	f023 0304 	bic.w	r3, r3, #4
 8002d66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d015      	beq.n	8002d9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d70:	f7fe f8fc 	bl	8000f6c <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d76:	e00a      	b.n	8002d8e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d78:	f7fe f8f8 	bl	8000f6c <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e0cb      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8e:	4b49      	ldr	r3, [pc, #292]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0ee      	beq.n	8002d78 <HAL_RCC_OscConfig+0x334>
 8002d9a:	e014      	b.n	8002dc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d9c:	f7fe f8e6 	bl	8000f6c <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da2:	e00a      	b.n	8002dba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da4:	f7fe f8e2 	bl	8000f6c <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e0b5      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dba:	4b3e      	ldr	r3, [pc, #248]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1ee      	bne.n	8002da4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dc6:	7dfb      	ldrb	r3, [r7, #23]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d105      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dcc:	4b39      	ldr	r3, [pc, #228]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd0:	4a38      	ldr	r2, [pc, #224]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002dd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dd6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 80a1 	beq.w	8002f24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002de2:	4b34      	ldr	r3, [pc, #208]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 030c 	and.w	r3, r3, #12
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d05c      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d141      	bne.n	8002e7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df6:	4b31      	ldr	r3, [pc, #196]	@ (8002ebc <HAL_RCC_OscConfig+0x478>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfc:	f7fe f8b6 	bl	8000f6c <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e04:	f7fe f8b2 	bl	8000f6c <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e087      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e16:	4b27      	ldr	r3, [pc, #156]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69da      	ldr	r2, [r3, #28]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e30:	019b      	lsls	r3, r3, #6
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e38:	085b      	lsrs	r3, r3, #1
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	041b      	lsls	r3, r3, #16
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e44:	061b      	lsls	r3, r3, #24
 8002e46:	491b      	ldr	r1, [pc, #108]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ebc <HAL_RCC_OscConfig+0x478>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e52:	f7fe f88b 	bl	8000f6c <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e5a:	f7fe f887 	bl	8000f6c <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e05c      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e6c:	4b11      	ldr	r3, [pc, #68]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCC_OscConfig+0x416>
 8002e78:	e054      	b.n	8002f24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e7a:	4b10      	ldr	r3, [pc, #64]	@ (8002ebc <HAL_RCC_OscConfig+0x478>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e80:	f7fe f874 	bl	8000f6c <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e88:	f7fe f870 	bl	8000f6c <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e045      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9a:	4b06      	ldr	r3, [pc, #24]	@ (8002eb4 <HAL_RCC_OscConfig+0x470>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f0      	bne.n	8002e88 <HAL_RCC_OscConfig+0x444>
 8002ea6:	e03d      	b.n	8002f24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d107      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e038      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40007000 	.word	0x40007000
 8002ebc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f30 <HAL_RCC_OscConfig+0x4ec>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d028      	beq.n	8002f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d121      	bne.n	8002f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d11a      	bne.n	8002f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ef6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d111      	bne.n	8002f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f06:	085b      	lsrs	r3, r3, #1
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d107      	bne.n	8002f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e000      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40023800 	.word	0x40023800

08002f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e0cc      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f48:	4b68      	ldr	r3, [pc, #416]	@ (80030ec <HAL_RCC_ClockConfig+0x1b8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d90c      	bls.n	8002f70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f56:	4b65      	ldr	r3, [pc, #404]	@ (80030ec <HAL_RCC_ClockConfig+0x1b8>)
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5e:	4b63      	ldr	r3, [pc, #396]	@ (80030ec <HAL_RCC_ClockConfig+0x1b8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d001      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0b8      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d020      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f88:	4b59      	ldr	r3, [pc, #356]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	4a58      	ldr	r2, [pc, #352]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0308 	and.w	r3, r3, #8
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d005      	beq.n	8002fac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fa0:	4b53      	ldr	r3, [pc, #332]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	4a52      	ldr	r2, [pc, #328]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002faa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fac:	4b50      	ldr	r3, [pc, #320]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	494d      	ldr	r1, [pc, #308]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d044      	beq.n	8003054 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d107      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd2:	4b47      	ldr	r3, [pc, #284]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d119      	bne.n	8003012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e07f      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d003      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fee:	2b03      	cmp	r3, #3
 8002ff0:	d107      	bne.n	8003002 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff2:	4b3f      	ldr	r3, [pc, #252]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d109      	bne.n	8003012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e06f      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003002:	4b3b      	ldr	r3, [pc, #236]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e067      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003012:	4b37      	ldr	r3, [pc, #220]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f023 0203 	bic.w	r2, r3, #3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	4934      	ldr	r1, [pc, #208]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	4313      	orrs	r3, r2
 8003022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003024:	f7fd ffa2 	bl	8000f6c <HAL_GetTick>
 8003028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302a:	e00a      	b.n	8003042 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800302c:	f7fd ff9e 	bl	8000f6c <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800303a:	4293      	cmp	r3, r2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e04f      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003042:	4b2b      	ldr	r3, [pc, #172]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 020c 	and.w	r2, r3, #12
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	429a      	cmp	r2, r3
 8003052:	d1eb      	bne.n	800302c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003054:	4b25      	ldr	r3, [pc, #148]	@ (80030ec <HAL_RCC_ClockConfig+0x1b8>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d20c      	bcs.n	800307c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003062:	4b22      	ldr	r3, [pc, #136]	@ (80030ec <HAL_RCC_ClockConfig+0x1b8>)
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800306a:	4b20      	ldr	r3, [pc, #128]	@ (80030ec <HAL_RCC_ClockConfig+0x1b8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	429a      	cmp	r2, r3
 8003076:	d001      	beq.n	800307c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e032      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	d008      	beq.n	800309a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003088:	4b19      	ldr	r3, [pc, #100]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	4916      	ldr	r1, [pc, #88]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	4313      	orrs	r3, r2
 8003098:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d009      	beq.n	80030ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030a6:	4b12      	ldr	r3, [pc, #72]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	490e      	ldr	r1, [pc, #56]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030ba:	f000 f821 	bl	8003100 <HAL_RCC_GetSysClockFreq>
 80030be:	4602      	mov	r2, r0
 80030c0:	4b0b      	ldr	r3, [pc, #44]	@ (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	091b      	lsrs	r3, r3, #4
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	490a      	ldr	r1, [pc, #40]	@ (80030f4 <HAL_RCC_ClockConfig+0x1c0>)
 80030cc:	5ccb      	ldrb	r3, [r1, r3]
 80030ce:	fa22 f303 	lsr.w	r3, r2, r3
 80030d2:	4a09      	ldr	r2, [pc, #36]	@ (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80030d6:	4b09      	ldr	r3, [pc, #36]	@ (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fd ff02 	bl	8000ee4 <HAL_InitTick>

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40023c00 	.word	0x40023c00
 80030f0:	40023800 	.word	0x40023800
 80030f4:	080140c0 	.word	0x080140c0
 80030f8:	20000000 	.word	0x20000000
 80030fc:	20000004 	.word	0x20000004

08003100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003104:	b090      	sub	sp, #64	@ 0x40
 8003106:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800310c:	2300      	movs	r3, #0
 800310e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003118:	4b59      	ldr	r3, [pc, #356]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x180>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 030c 	and.w	r3, r3, #12
 8003120:	2b08      	cmp	r3, #8
 8003122:	d00d      	beq.n	8003140 <HAL_RCC_GetSysClockFreq+0x40>
 8003124:	2b08      	cmp	r3, #8
 8003126:	f200 80a1 	bhi.w	800326c <HAL_RCC_GetSysClockFreq+0x16c>
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <HAL_RCC_GetSysClockFreq+0x34>
 800312e:	2b04      	cmp	r3, #4
 8003130:	d003      	beq.n	800313a <HAL_RCC_GetSysClockFreq+0x3a>
 8003132:	e09b      	b.n	800326c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003134:	4b53      	ldr	r3, [pc, #332]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x184>)
 8003136:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003138:	e09b      	b.n	8003272 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800313a:	4b53      	ldr	r3, [pc, #332]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x188>)
 800313c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800313e:	e098      	b.n	8003272 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003140:	4b4f      	ldr	r3, [pc, #316]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x180>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003148:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800314a:	4b4d      	ldr	r3, [pc, #308]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x180>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d028      	beq.n	80031a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003156:	4b4a      	ldr	r3, [pc, #296]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x180>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	099b      	lsrs	r3, r3, #6
 800315c:	2200      	movs	r2, #0
 800315e:	623b      	str	r3, [r7, #32]
 8003160:	627a      	str	r2, [r7, #36]	@ 0x24
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003168:	2100      	movs	r1, #0
 800316a:	4b47      	ldr	r3, [pc, #284]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x188>)
 800316c:	fb03 f201 	mul.w	r2, r3, r1
 8003170:	2300      	movs	r3, #0
 8003172:	fb00 f303 	mul.w	r3, r0, r3
 8003176:	4413      	add	r3, r2
 8003178:	4a43      	ldr	r2, [pc, #268]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x188>)
 800317a:	fba0 1202 	umull	r1, r2, r0, r2
 800317e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003180:	460a      	mov	r2, r1
 8003182:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003184:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003186:	4413      	add	r3, r2
 8003188:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800318a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800318c:	2200      	movs	r2, #0
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	61fa      	str	r2, [r7, #28]
 8003192:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003196:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800319a:	f7fd f869 	bl	8000270 <__aeabi_uldivmod>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	4613      	mov	r3, r2
 80031a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031a6:	e053      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a8:	4b35      	ldr	r3, [pc, #212]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x180>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	099b      	lsrs	r3, r3, #6
 80031ae:	2200      	movs	r2, #0
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	617a      	str	r2, [r7, #20]
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80031ba:	f04f 0b00 	mov.w	fp, #0
 80031be:	4652      	mov	r2, sl
 80031c0:	465b      	mov	r3, fp
 80031c2:	f04f 0000 	mov.w	r0, #0
 80031c6:	f04f 0100 	mov.w	r1, #0
 80031ca:	0159      	lsls	r1, r3, #5
 80031cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031d0:	0150      	lsls	r0, r2, #5
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	ebb2 080a 	subs.w	r8, r2, sl
 80031da:	eb63 090b 	sbc.w	r9, r3, fp
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80031ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80031ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80031f2:	ebb2 0408 	subs.w	r4, r2, r8
 80031f6:	eb63 0509 	sbc.w	r5, r3, r9
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	00eb      	lsls	r3, r5, #3
 8003204:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003208:	00e2      	lsls	r2, r4, #3
 800320a:	4614      	mov	r4, r2
 800320c:	461d      	mov	r5, r3
 800320e:	eb14 030a 	adds.w	r3, r4, sl
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	eb45 030b 	adc.w	r3, r5, fp
 8003218:	607b      	str	r3, [r7, #4]
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003226:	4629      	mov	r1, r5
 8003228:	028b      	lsls	r3, r1, #10
 800322a:	4621      	mov	r1, r4
 800322c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003230:	4621      	mov	r1, r4
 8003232:	028a      	lsls	r2, r1, #10
 8003234:	4610      	mov	r0, r2
 8003236:	4619      	mov	r1, r3
 8003238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800323a:	2200      	movs	r2, #0
 800323c:	60bb      	str	r3, [r7, #8]
 800323e:	60fa      	str	r2, [r7, #12]
 8003240:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003244:	f7fd f814 	bl	8000270 <__aeabi_uldivmod>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4613      	mov	r3, r2
 800324e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003250:	4b0b      	ldr	r3, [pc, #44]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x180>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	0c1b      	lsrs	r3, r3, #16
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	3301      	adds	r3, #1
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003260:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003264:	fbb2 f3f3 	udiv	r3, r2, r3
 8003268:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800326a:	e002      	b.n	8003272 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800326c:	4b05      	ldr	r3, [pc, #20]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x184>)
 800326e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003270:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003274:	4618      	mov	r0, r3
 8003276:	3740      	adds	r7, #64	@ 0x40
 8003278:	46bd      	mov	sp, r7
 800327a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800327e:	bf00      	nop
 8003280:	40023800 	.word	0x40023800
 8003284:	00f42400 	.word	0x00f42400
 8003288:	017d7840 	.word	0x017d7840

0800328c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003290:	4b03      	ldr	r3, [pc, #12]	@ (80032a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003292:	681b      	ldr	r3, [r3, #0]
}
 8003294:	4618      	mov	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	20000000 	.word	0x20000000

080032a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032a8:	f7ff fff0 	bl	800328c <HAL_RCC_GetHCLKFreq>
 80032ac:	4602      	mov	r2, r0
 80032ae:	4b05      	ldr	r3, [pc, #20]	@ (80032c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	0a9b      	lsrs	r3, r3, #10
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	4903      	ldr	r1, [pc, #12]	@ (80032c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ba:	5ccb      	ldrb	r3, [r1, r3]
 80032bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40023800 	.word	0x40023800
 80032c8:	080140d0 	.word	0x080140d0

080032cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032d0:	f7ff ffdc 	bl	800328c <HAL_RCC_GetHCLKFreq>
 80032d4:	4602      	mov	r2, r0
 80032d6:	4b05      	ldr	r3, [pc, #20]	@ (80032ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	0b5b      	lsrs	r3, r3, #13
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	4903      	ldr	r1, [pc, #12]	@ (80032f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032e2:	5ccb      	ldrb	r3, [r1, r3]
 80032e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40023800 	.word	0x40023800
 80032f0:	080140d0 	.word	0x080140d0

080032f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e042      	b.n	800338c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d106      	bne.n	8003320 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7fd fb2c 	bl	8000978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2224      	movs	r2, #36	@ 0x24
 8003324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003336:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f973 	bl	8003624 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800334c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695a      	ldr	r2, [r3, #20]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800335c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800336c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08a      	sub	sp, #40	@ 0x28
 8003398:	af02      	add	r7, sp, #8
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	603b      	str	r3, [r7, #0]
 80033a0:	4613      	mov	r3, r2
 80033a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b20      	cmp	r3, #32
 80033b2:	d175      	bne.n	80034a0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <HAL_UART_Transmit+0x2c>
 80033ba:	88fb      	ldrh	r3, [r7, #6]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e06e      	b.n	80034a2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2221      	movs	r2, #33	@ 0x21
 80033ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033d2:	f7fd fdcb 	bl	8000f6c <HAL_GetTick>
 80033d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	88fa      	ldrh	r2, [r7, #6]
 80033dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	88fa      	ldrh	r2, [r7, #6]
 80033e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ec:	d108      	bne.n	8003400 <HAL_UART_Transmit+0x6c>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d104      	bne.n	8003400 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	61bb      	str	r3, [r7, #24]
 80033fe:	e003      	b.n	8003408 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003404:	2300      	movs	r3, #0
 8003406:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003408:	e02e      	b.n	8003468 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2200      	movs	r2, #0
 8003412:	2180      	movs	r1, #128	@ 0x80
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 f848 	bl	80034aa <UART_WaitOnFlagUntilTimeout>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e03a      	b.n	80034a2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10b      	bne.n	800344a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	461a      	mov	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003440:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	3302      	adds	r3, #2
 8003446:	61bb      	str	r3, [r7, #24]
 8003448:	e007      	b.n	800345a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	781a      	ldrb	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	3301      	adds	r3, #1
 8003458:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800345e:	b29b      	uxth	r3, r3
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800346c:	b29b      	uxth	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1cb      	bne.n	800340a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2200      	movs	r2, #0
 800347a:	2140      	movs	r1, #64	@ 0x40
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 f814 	bl	80034aa <UART_WaitOnFlagUntilTimeout>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2220      	movs	r2, #32
 800348c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e006      	b.n	80034a2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800349c:	2300      	movs	r3, #0
 800349e:	e000      	b.n	80034a2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80034a0:	2302      	movs	r3, #2
  }
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3720      	adds	r7, #32
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b086      	sub	sp, #24
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	603b      	str	r3, [r7, #0]
 80034b6:	4613      	mov	r3, r2
 80034b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ba:	e03b      	b.n	8003534 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c2:	d037      	beq.n	8003534 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c4:	f7fd fd52 	bl	8000f6c <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	6a3a      	ldr	r2, [r7, #32]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d302      	bcc.n	80034da <UART_WaitOnFlagUntilTimeout+0x30>
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e03a      	b.n	8003554 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d023      	beq.n	8003534 <UART_WaitOnFlagUntilTimeout+0x8a>
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b80      	cmp	r3, #128	@ 0x80
 80034f0:	d020      	beq.n	8003534 <UART_WaitOnFlagUntilTimeout+0x8a>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b40      	cmp	r3, #64	@ 0x40
 80034f6:	d01d      	beq.n	8003534 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b08      	cmp	r3, #8
 8003504:	d116      	bne.n	8003534 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003506:	2300      	movs	r3, #0
 8003508:	617b      	str	r3, [r7, #20]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f81d 	bl	800355c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2208      	movs	r2, #8
 8003526:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e00f      	b.n	8003554 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	4013      	ands	r3, r2
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	429a      	cmp	r2, r3
 8003542:	bf0c      	ite	eq
 8003544:	2301      	moveq	r3, #1
 8003546:	2300      	movne	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	461a      	mov	r2, r3
 800354c:	79fb      	ldrb	r3, [r7, #7]
 800354e:	429a      	cmp	r2, r3
 8003550:	d0b4      	beq.n	80034bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800355c:	b480      	push	{r7}
 800355e:	b095      	sub	sp, #84	@ 0x54
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	330c      	adds	r3, #12
 800356a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800356e:	e853 3f00 	ldrex	r3, [r3]
 8003572:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003576:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800357a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	330c      	adds	r3, #12
 8003582:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003584:	643a      	str	r2, [r7, #64]	@ 0x40
 8003586:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003588:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800358a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800358c:	e841 2300 	strex	r3, r2, [r1]
 8003590:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1e5      	bne.n	8003564 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3314      	adds	r3, #20
 800359e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	e853 3f00 	ldrex	r3, [r3]
 80035a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	f023 0301 	bic.w	r3, r3, #1
 80035ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	3314      	adds	r3, #20
 80035b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035c0:	e841 2300 	strex	r3, r2, [r1]
 80035c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1e5      	bne.n	8003598 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d119      	bne.n	8003608 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	330c      	adds	r3, #12
 80035da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	e853 3f00 	ldrex	r3, [r3]
 80035e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	f023 0310 	bic.w	r3, r3, #16
 80035ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	330c      	adds	r3, #12
 80035f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035f4:	61ba      	str	r2, [r7, #24]
 80035f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f8:	6979      	ldr	r1, [r7, #20]
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	e841 2300 	strex	r3, r2, [r1]
 8003600:	613b      	str	r3, [r7, #16]
   return(result);
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1e5      	bne.n	80035d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003616:	bf00      	nop
 8003618:	3754      	adds	r7, #84	@ 0x54
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
	...

08003624 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003628:	b0c0      	sub	sp, #256	@ 0x100
 800362a:	af00      	add	r7, sp, #0
 800362c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800363c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003640:	68d9      	ldr	r1, [r3, #12]
 8003642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	ea40 0301 	orr.w	r3, r0, r1
 800364c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800364e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	431a      	orrs	r2, r3
 800365c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	431a      	orrs	r2, r3
 8003664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800367c:	f021 010c 	bic.w	r1, r1, #12
 8003680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800368a:	430b      	orrs	r3, r1
 800368c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800368e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800369a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800369e:	6999      	ldr	r1, [r3, #24]
 80036a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	ea40 0301 	orr.w	r3, r0, r1
 80036aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	4b8f      	ldr	r3, [pc, #572]	@ (80038f0 <UART_SetConfig+0x2cc>)
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d005      	beq.n	80036c4 <UART_SetConfig+0xa0>
 80036b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	4b8d      	ldr	r3, [pc, #564]	@ (80038f4 <UART_SetConfig+0x2d0>)
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d104      	bne.n	80036ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036c4:	f7ff fe02 	bl	80032cc <HAL_RCC_GetPCLK2Freq>
 80036c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80036cc:	e003      	b.n	80036d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036ce:	f7ff fde9 	bl	80032a4 <HAL_RCC_GetPCLK1Freq>
 80036d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036e0:	f040 810c 	bne.w	80038fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036e8:	2200      	movs	r2, #0
 80036ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80036ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80036f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80036f6:	4622      	mov	r2, r4
 80036f8:	462b      	mov	r3, r5
 80036fa:	1891      	adds	r1, r2, r2
 80036fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80036fe:	415b      	adcs	r3, r3
 8003700:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003702:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003706:	4621      	mov	r1, r4
 8003708:	eb12 0801 	adds.w	r8, r2, r1
 800370c:	4629      	mov	r1, r5
 800370e:	eb43 0901 	adc.w	r9, r3, r1
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800371e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003722:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003726:	4690      	mov	r8, r2
 8003728:	4699      	mov	r9, r3
 800372a:	4623      	mov	r3, r4
 800372c:	eb18 0303 	adds.w	r3, r8, r3
 8003730:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003734:	462b      	mov	r3, r5
 8003736:	eb49 0303 	adc.w	r3, r9, r3
 800373a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800373e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800374a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800374e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003752:	460b      	mov	r3, r1
 8003754:	18db      	adds	r3, r3, r3
 8003756:	653b      	str	r3, [r7, #80]	@ 0x50
 8003758:	4613      	mov	r3, r2
 800375a:	eb42 0303 	adc.w	r3, r2, r3
 800375e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003760:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003764:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003768:	f7fc fd82 	bl	8000270 <__aeabi_uldivmod>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4b61      	ldr	r3, [pc, #388]	@ (80038f8 <UART_SetConfig+0x2d4>)
 8003772:	fba3 2302 	umull	r2, r3, r3, r2
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	011c      	lsls	r4, r3, #4
 800377a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800377e:	2200      	movs	r2, #0
 8003780:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003784:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003788:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800378c:	4642      	mov	r2, r8
 800378e:	464b      	mov	r3, r9
 8003790:	1891      	adds	r1, r2, r2
 8003792:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003794:	415b      	adcs	r3, r3
 8003796:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003798:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800379c:	4641      	mov	r1, r8
 800379e:	eb12 0a01 	adds.w	sl, r2, r1
 80037a2:	4649      	mov	r1, r9
 80037a4:	eb43 0b01 	adc.w	fp, r3, r1
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	f04f 0300 	mov.w	r3, #0
 80037b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037bc:	4692      	mov	sl, r2
 80037be:	469b      	mov	fp, r3
 80037c0:	4643      	mov	r3, r8
 80037c2:	eb1a 0303 	adds.w	r3, sl, r3
 80037c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037ca:	464b      	mov	r3, r9
 80037cc:	eb4b 0303 	adc.w	r3, fp, r3
 80037d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80037d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80037e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80037e8:	460b      	mov	r3, r1
 80037ea:	18db      	adds	r3, r3, r3
 80037ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80037ee:	4613      	mov	r3, r2
 80037f0:	eb42 0303 	adc.w	r3, r2, r3
 80037f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80037f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80037fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80037fe:	f7fc fd37 	bl	8000270 <__aeabi_uldivmod>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4611      	mov	r1, r2
 8003808:	4b3b      	ldr	r3, [pc, #236]	@ (80038f8 <UART_SetConfig+0x2d4>)
 800380a:	fba3 2301 	umull	r2, r3, r3, r1
 800380e:	095b      	lsrs	r3, r3, #5
 8003810:	2264      	movs	r2, #100	@ 0x64
 8003812:	fb02 f303 	mul.w	r3, r2, r3
 8003816:	1acb      	subs	r3, r1, r3
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800381e:	4b36      	ldr	r3, [pc, #216]	@ (80038f8 <UART_SetConfig+0x2d4>)
 8003820:	fba3 2302 	umull	r2, r3, r3, r2
 8003824:	095b      	lsrs	r3, r3, #5
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800382c:	441c      	add	r4, r3
 800382e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003832:	2200      	movs	r2, #0
 8003834:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003838:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800383c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003840:	4642      	mov	r2, r8
 8003842:	464b      	mov	r3, r9
 8003844:	1891      	adds	r1, r2, r2
 8003846:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003848:	415b      	adcs	r3, r3
 800384a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800384c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003850:	4641      	mov	r1, r8
 8003852:	1851      	adds	r1, r2, r1
 8003854:	6339      	str	r1, [r7, #48]	@ 0x30
 8003856:	4649      	mov	r1, r9
 8003858:	414b      	adcs	r3, r1
 800385a:	637b      	str	r3, [r7, #52]	@ 0x34
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	f04f 0300 	mov.w	r3, #0
 8003864:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003868:	4659      	mov	r1, fp
 800386a:	00cb      	lsls	r3, r1, #3
 800386c:	4651      	mov	r1, sl
 800386e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003872:	4651      	mov	r1, sl
 8003874:	00ca      	lsls	r2, r1, #3
 8003876:	4610      	mov	r0, r2
 8003878:	4619      	mov	r1, r3
 800387a:	4603      	mov	r3, r0
 800387c:	4642      	mov	r2, r8
 800387e:	189b      	adds	r3, r3, r2
 8003880:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003884:	464b      	mov	r3, r9
 8003886:	460a      	mov	r2, r1
 8003888:	eb42 0303 	adc.w	r3, r2, r3
 800388c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800389c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80038a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80038a4:	460b      	mov	r3, r1
 80038a6:	18db      	adds	r3, r3, r3
 80038a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038aa:	4613      	mov	r3, r2
 80038ac:	eb42 0303 	adc.w	r3, r2, r3
 80038b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80038ba:	f7fc fcd9 	bl	8000270 <__aeabi_uldivmod>
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	4b0d      	ldr	r3, [pc, #52]	@ (80038f8 <UART_SetConfig+0x2d4>)
 80038c4:	fba3 1302 	umull	r1, r3, r3, r2
 80038c8:	095b      	lsrs	r3, r3, #5
 80038ca:	2164      	movs	r1, #100	@ 0x64
 80038cc:	fb01 f303 	mul.w	r3, r1, r3
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	3332      	adds	r3, #50	@ 0x32
 80038d6:	4a08      	ldr	r2, [pc, #32]	@ (80038f8 <UART_SetConfig+0x2d4>)
 80038d8:	fba2 2303 	umull	r2, r3, r2, r3
 80038dc:	095b      	lsrs	r3, r3, #5
 80038de:	f003 0207 	and.w	r2, r3, #7
 80038e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4422      	add	r2, r4
 80038ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038ec:	e106      	b.n	8003afc <UART_SetConfig+0x4d8>
 80038ee:	bf00      	nop
 80038f0:	40011000 	.word	0x40011000
 80038f4:	40011400 	.word	0x40011400
 80038f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003900:	2200      	movs	r2, #0
 8003902:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003906:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800390a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800390e:	4642      	mov	r2, r8
 8003910:	464b      	mov	r3, r9
 8003912:	1891      	adds	r1, r2, r2
 8003914:	6239      	str	r1, [r7, #32]
 8003916:	415b      	adcs	r3, r3
 8003918:	627b      	str	r3, [r7, #36]	@ 0x24
 800391a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800391e:	4641      	mov	r1, r8
 8003920:	1854      	adds	r4, r2, r1
 8003922:	4649      	mov	r1, r9
 8003924:	eb43 0501 	adc.w	r5, r3, r1
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	00eb      	lsls	r3, r5, #3
 8003932:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003936:	00e2      	lsls	r2, r4, #3
 8003938:	4614      	mov	r4, r2
 800393a:	461d      	mov	r5, r3
 800393c:	4643      	mov	r3, r8
 800393e:	18e3      	adds	r3, r4, r3
 8003940:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003944:	464b      	mov	r3, r9
 8003946:	eb45 0303 	adc.w	r3, r5, r3
 800394a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800394e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800395a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	f04f 0300 	mov.w	r3, #0
 8003966:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800396a:	4629      	mov	r1, r5
 800396c:	008b      	lsls	r3, r1, #2
 800396e:	4621      	mov	r1, r4
 8003970:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003974:	4621      	mov	r1, r4
 8003976:	008a      	lsls	r2, r1, #2
 8003978:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800397c:	f7fc fc78 	bl	8000270 <__aeabi_uldivmod>
 8003980:	4602      	mov	r2, r0
 8003982:	460b      	mov	r3, r1
 8003984:	4b60      	ldr	r3, [pc, #384]	@ (8003b08 <UART_SetConfig+0x4e4>)
 8003986:	fba3 2302 	umull	r2, r3, r3, r2
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	011c      	lsls	r4, r3, #4
 800398e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003992:	2200      	movs	r2, #0
 8003994:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003998:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800399c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80039a0:	4642      	mov	r2, r8
 80039a2:	464b      	mov	r3, r9
 80039a4:	1891      	adds	r1, r2, r2
 80039a6:	61b9      	str	r1, [r7, #24]
 80039a8:	415b      	adcs	r3, r3
 80039aa:	61fb      	str	r3, [r7, #28]
 80039ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039b0:	4641      	mov	r1, r8
 80039b2:	1851      	adds	r1, r2, r1
 80039b4:	6139      	str	r1, [r7, #16]
 80039b6:	4649      	mov	r1, r9
 80039b8:	414b      	adcs	r3, r1
 80039ba:	617b      	str	r3, [r7, #20]
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039c8:	4659      	mov	r1, fp
 80039ca:	00cb      	lsls	r3, r1, #3
 80039cc:	4651      	mov	r1, sl
 80039ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039d2:	4651      	mov	r1, sl
 80039d4:	00ca      	lsls	r2, r1, #3
 80039d6:	4610      	mov	r0, r2
 80039d8:	4619      	mov	r1, r3
 80039da:	4603      	mov	r3, r0
 80039dc:	4642      	mov	r2, r8
 80039de:	189b      	adds	r3, r3, r2
 80039e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039e4:	464b      	mov	r3, r9
 80039e6:	460a      	mov	r2, r1
 80039e8:	eb42 0303 	adc.w	r3, r2, r3
 80039ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80039fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003a08:	4649      	mov	r1, r9
 8003a0a:	008b      	lsls	r3, r1, #2
 8003a0c:	4641      	mov	r1, r8
 8003a0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a12:	4641      	mov	r1, r8
 8003a14:	008a      	lsls	r2, r1, #2
 8003a16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003a1a:	f7fc fc29 	bl	8000270 <__aeabi_uldivmod>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	460b      	mov	r3, r1
 8003a22:	4611      	mov	r1, r2
 8003a24:	4b38      	ldr	r3, [pc, #224]	@ (8003b08 <UART_SetConfig+0x4e4>)
 8003a26:	fba3 2301 	umull	r2, r3, r3, r1
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	2264      	movs	r2, #100	@ 0x64
 8003a2e:	fb02 f303 	mul.w	r3, r2, r3
 8003a32:	1acb      	subs	r3, r1, r3
 8003a34:	011b      	lsls	r3, r3, #4
 8003a36:	3332      	adds	r3, #50	@ 0x32
 8003a38:	4a33      	ldr	r2, [pc, #204]	@ (8003b08 <UART_SetConfig+0x4e4>)
 8003a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a44:	441c      	add	r4, r3
 8003a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a4e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003a54:	4642      	mov	r2, r8
 8003a56:	464b      	mov	r3, r9
 8003a58:	1891      	adds	r1, r2, r2
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	415b      	adcs	r3, r3
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a64:	4641      	mov	r1, r8
 8003a66:	1851      	adds	r1, r2, r1
 8003a68:	6039      	str	r1, [r7, #0]
 8003a6a:	4649      	mov	r1, r9
 8003a6c:	414b      	adcs	r3, r1
 8003a6e:	607b      	str	r3, [r7, #4]
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	f04f 0300 	mov.w	r3, #0
 8003a78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a7c:	4659      	mov	r1, fp
 8003a7e:	00cb      	lsls	r3, r1, #3
 8003a80:	4651      	mov	r1, sl
 8003a82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a86:	4651      	mov	r1, sl
 8003a88:	00ca      	lsls	r2, r1, #3
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4603      	mov	r3, r0
 8003a90:	4642      	mov	r2, r8
 8003a92:	189b      	adds	r3, r3, r2
 8003a94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a96:	464b      	mov	r3, r9
 8003a98:	460a      	mov	r2, r1
 8003a9a:	eb42 0303 	adc.w	r3, r2, r3
 8003a9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003aaa:	667a      	str	r2, [r7, #100]	@ 0x64
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003ab8:	4649      	mov	r1, r9
 8003aba:	008b      	lsls	r3, r1, #2
 8003abc:	4641      	mov	r1, r8
 8003abe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ac2:	4641      	mov	r1, r8
 8003ac4:	008a      	lsls	r2, r1, #2
 8003ac6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003aca:	f7fc fbd1 	bl	8000270 <__aeabi_uldivmod>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8003b08 <UART_SetConfig+0x4e4>)
 8003ad4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ad8:	095b      	lsrs	r3, r3, #5
 8003ada:	2164      	movs	r1, #100	@ 0x64
 8003adc:	fb01 f303 	mul.w	r3, r1, r3
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	011b      	lsls	r3, r3, #4
 8003ae4:	3332      	adds	r3, #50	@ 0x32
 8003ae6:	4a08      	ldr	r2, [pc, #32]	@ (8003b08 <UART_SetConfig+0x4e4>)
 8003ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aec:	095b      	lsrs	r3, r3, #5
 8003aee:	f003 020f 	and.w	r2, r3, #15
 8003af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4422      	add	r2, r4
 8003afa:	609a      	str	r2, [r3, #8]
}
 8003afc:	bf00      	nop
 8003afe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003b02:	46bd      	mov	sp, r7
 8003b04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b08:	51eb851f 	.word	0x51eb851f

08003b0c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003b12:	4b87      	ldr	r3, [pc, #540]	@ (8003d30 <MX_LWIP_Init+0x224>)
 8003b14:	22c0      	movs	r2, #192	@ 0xc0
 8003b16:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003b18:	4b85      	ldr	r3, [pc, #532]	@ (8003d30 <MX_LWIP_Init+0x224>)
 8003b1a:	22a8      	movs	r2, #168	@ 0xa8
 8003b1c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8003b1e:	4b84      	ldr	r3, [pc, #528]	@ (8003d30 <MX_LWIP_Init+0x224>)
 8003b20:	2201      	movs	r2, #1
 8003b22:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 50;
 8003b24:	4b82      	ldr	r3, [pc, #520]	@ (8003d30 <MX_LWIP_Init+0x224>)
 8003b26:	2232      	movs	r2, #50	@ 0x32
 8003b28:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003b2a:	4b82      	ldr	r3, [pc, #520]	@ (8003d34 <MX_LWIP_Init+0x228>)
 8003b2c:	22ff      	movs	r2, #255	@ 0xff
 8003b2e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003b30:	4b80      	ldr	r3, [pc, #512]	@ (8003d34 <MX_LWIP_Init+0x228>)
 8003b32:	22ff      	movs	r2, #255	@ 0xff
 8003b34:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003b36:	4b7f      	ldr	r3, [pc, #508]	@ (8003d34 <MX_LWIP_Init+0x228>)
 8003b38:	22ff      	movs	r2, #255	@ 0xff
 8003b3a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003b3c:	4b7d      	ldr	r3, [pc, #500]	@ (8003d34 <MX_LWIP_Init+0x228>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003b42:	4b7d      	ldr	r3, [pc, #500]	@ (8003d38 <MX_LWIP_Init+0x22c>)
 8003b44:	22c0      	movs	r2, #192	@ 0xc0
 8003b46:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003b48:	4b7b      	ldr	r3, [pc, #492]	@ (8003d38 <MX_LWIP_Init+0x22c>)
 8003b4a:	22a8      	movs	r2, #168	@ 0xa8
 8003b4c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8003b4e:	4b7a      	ldr	r3, [pc, #488]	@ (8003d38 <MX_LWIP_Init+0x22c>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003b54:	4b78      	ldr	r3, [pc, #480]	@ (8003d38 <MX_LWIP_Init+0x22c>)
 8003b56:	2201      	movs	r2, #1
 8003b58:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8003b5a:	f000 fd02 	bl	8004562 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003b5e:	4b74      	ldr	r3, [pc, #464]	@ (8003d30 <MX_LWIP_Init+0x224>)
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	061a      	lsls	r2, r3, #24
 8003b64:	4b72      	ldr	r3, [pc, #456]	@ (8003d30 <MX_LWIP_Init+0x224>)
 8003b66:	785b      	ldrb	r3, [r3, #1]
 8003b68:	041b      	lsls	r3, r3, #16
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	4b70      	ldr	r3, [pc, #448]	@ (8003d30 <MX_LWIP_Init+0x224>)
 8003b6e:	789b      	ldrb	r3, [r3, #2]
 8003b70:	021b      	lsls	r3, r3, #8
 8003b72:	4313      	orrs	r3, r2
 8003b74:	4a6e      	ldr	r2, [pc, #440]	@ (8003d30 <MX_LWIP_Init+0x224>)
 8003b76:	78d2      	ldrb	r2, [r2, #3]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	061a      	lsls	r2, r3, #24
 8003b7c:	4b6c      	ldr	r3, [pc, #432]	@ (8003d30 <MX_LWIP_Init+0x224>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	0619      	lsls	r1, r3, #24
 8003b82:	4b6b      	ldr	r3, [pc, #428]	@ (8003d30 <MX_LWIP_Init+0x224>)
 8003b84:	785b      	ldrb	r3, [r3, #1]
 8003b86:	041b      	lsls	r3, r3, #16
 8003b88:	4319      	orrs	r1, r3
 8003b8a:	4b69      	ldr	r3, [pc, #420]	@ (8003d30 <MX_LWIP_Init+0x224>)
 8003b8c:	789b      	ldrb	r3, [r3, #2]
 8003b8e:	021b      	lsls	r3, r3, #8
 8003b90:	430b      	orrs	r3, r1
 8003b92:	4967      	ldr	r1, [pc, #412]	@ (8003d30 <MX_LWIP_Init+0x224>)
 8003b94:	78c9      	ldrb	r1, [r1, #3]
 8003b96:	430b      	orrs	r3, r1
 8003b98:	021b      	lsls	r3, r3, #8
 8003b9a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	4b63      	ldr	r3, [pc, #396]	@ (8003d30 <MX_LWIP_Init+0x224>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	0619      	lsls	r1, r3, #24
 8003ba6:	4b62      	ldr	r3, [pc, #392]	@ (8003d30 <MX_LWIP_Init+0x224>)
 8003ba8:	785b      	ldrb	r3, [r3, #1]
 8003baa:	041b      	lsls	r3, r3, #16
 8003bac:	4319      	orrs	r1, r3
 8003bae:	4b60      	ldr	r3, [pc, #384]	@ (8003d30 <MX_LWIP_Init+0x224>)
 8003bb0:	789b      	ldrb	r3, [r3, #2]
 8003bb2:	021b      	lsls	r3, r3, #8
 8003bb4:	430b      	orrs	r3, r1
 8003bb6:	495e      	ldr	r1, [pc, #376]	@ (8003d30 <MX_LWIP_Init+0x224>)
 8003bb8:	78c9      	ldrb	r1, [r1, #3]
 8003bba:	430b      	orrs	r3, r1
 8003bbc:	0a1b      	lsrs	r3, r3, #8
 8003bbe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	4b5a      	ldr	r3, [pc, #360]	@ (8003d30 <MX_LWIP_Init+0x224>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	0619      	lsls	r1, r3, #24
 8003bca:	4b59      	ldr	r3, [pc, #356]	@ (8003d30 <MX_LWIP_Init+0x224>)
 8003bcc:	785b      	ldrb	r3, [r3, #1]
 8003bce:	041b      	lsls	r3, r3, #16
 8003bd0:	4319      	orrs	r1, r3
 8003bd2:	4b57      	ldr	r3, [pc, #348]	@ (8003d30 <MX_LWIP_Init+0x224>)
 8003bd4:	789b      	ldrb	r3, [r3, #2]
 8003bd6:	021b      	lsls	r3, r3, #8
 8003bd8:	430b      	orrs	r3, r1
 8003bda:	4955      	ldr	r1, [pc, #340]	@ (8003d30 <MX_LWIP_Init+0x224>)
 8003bdc:	78c9      	ldrb	r1, [r1, #3]
 8003bde:	430b      	orrs	r3, r1
 8003be0:	0e1b      	lsrs	r3, r3, #24
 8003be2:	4313      	orrs	r3, r2
 8003be4:	4a55      	ldr	r2, [pc, #340]	@ (8003d3c <MX_LWIP_Init+0x230>)
 8003be6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003be8:	4b52      	ldr	r3, [pc, #328]	@ (8003d34 <MX_LWIP_Init+0x228>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	061a      	lsls	r2, r3, #24
 8003bee:	4b51      	ldr	r3, [pc, #324]	@ (8003d34 <MX_LWIP_Init+0x228>)
 8003bf0:	785b      	ldrb	r3, [r3, #1]
 8003bf2:	041b      	lsls	r3, r3, #16
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	4b4f      	ldr	r3, [pc, #316]	@ (8003d34 <MX_LWIP_Init+0x228>)
 8003bf8:	789b      	ldrb	r3, [r3, #2]
 8003bfa:	021b      	lsls	r3, r3, #8
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	4a4d      	ldr	r2, [pc, #308]	@ (8003d34 <MX_LWIP_Init+0x228>)
 8003c00:	78d2      	ldrb	r2, [r2, #3]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	061a      	lsls	r2, r3, #24
 8003c06:	4b4b      	ldr	r3, [pc, #300]	@ (8003d34 <MX_LWIP_Init+0x228>)
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	0619      	lsls	r1, r3, #24
 8003c0c:	4b49      	ldr	r3, [pc, #292]	@ (8003d34 <MX_LWIP_Init+0x228>)
 8003c0e:	785b      	ldrb	r3, [r3, #1]
 8003c10:	041b      	lsls	r3, r3, #16
 8003c12:	4319      	orrs	r1, r3
 8003c14:	4b47      	ldr	r3, [pc, #284]	@ (8003d34 <MX_LWIP_Init+0x228>)
 8003c16:	789b      	ldrb	r3, [r3, #2]
 8003c18:	021b      	lsls	r3, r3, #8
 8003c1a:	430b      	orrs	r3, r1
 8003c1c:	4945      	ldr	r1, [pc, #276]	@ (8003d34 <MX_LWIP_Init+0x228>)
 8003c1e:	78c9      	ldrb	r1, [r1, #3]
 8003c20:	430b      	orrs	r3, r1
 8003c22:	021b      	lsls	r3, r3, #8
 8003c24:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	4b42      	ldr	r3, [pc, #264]	@ (8003d34 <MX_LWIP_Init+0x228>)
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	0619      	lsls	r1, r3, #24
 8003c30:	4b40      	ldr	r3, [pc, #256]	@ (8003d34 <MX_LWIP_Init+0x228>)
 8003c32:	785b      	ldrb	r3, [r3, #1]
 8003c34:	041b      	lsls	r3, r3, #16
 8003c36:	4319      	orrs	r1, r3
 8003c38:	4b3e      	ldr	r3, [pc, #248]	@ (8003d34 <MX_LWIP_Init+0x228>)
 8003c3a:	789b      	ldrb	r3, [r3, #2]
 8003c3c:	021b      	lsls	r3, r3, #8
 8003c3e:	430b      	orrs	r3, r1
 8003c40:	493c      	ldr	r1, [pc, #240]	@ (8003d34 <MX_LWIP_Init+0x228>)
 8003c42:	78c9      	ldrb	r1, [r1, #3]
 8003c44:	430b      	orrs	r3, r1
 8003c46:	0a1b      	lsrs	r3, r3, #8
 8003c48:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	4b39      	ldr	r3, [pc, #228]	@ (8003d34 <MX_LWIP_Init+0x228>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	0619      	lsls	r1, r3, #24
 8003c54:	4b37      	ldr	r3, [pc, #220]	@ (8003d34 <MX_LWIP_Init+0x228>)
 8003c56:	785b      	ldrb	r3, [r3, #1]
 8003c58:	041b      	lsls	r3, r3, #16
 8003c5a:	4319      	orrs	r1, r3
 8003c5c:	4b35      	ldr	r3, [pc, #212]	@ (8003d34 <MX_LWIP_Init+0x228>)
 8003c5e:	789b      	ldrb	r3, [r3, #2]
 8003c60:	021b      	lsls	r3, r3, #8
 8003c62:	430b      	orrs	r3, r1
 8003c64:	4933      	ldr	r1, [pc, #204]	@ (8003d34 <MX_LWIP_Init+0x228>)
 8003c66:	78c9      	ldrb	r1, [r1, #3]
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	0e1b      	lsrs	r3, r3, #24
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	4a34      	ldr	r2, [pc, #208]	@ (8003d40 <MX_LWIP_Init+0x234>)
 8003c70:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003c72:	4b31      	ldr	r3, [pc, #196]	@ (8003d38 <MX_LWIP_Init+0x22c>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	061a      	lsls	r2, r3, #24
 8003c78:	4b2f      	ldr	r3, [pc, #188]	@ (8003d38 <MX_LWIP_Init+0x22c>)
 8003c7a:	785b      	ldrb	r3, [r3, #1]
 8003c7c:	041b      	lsls	r3, r3, #16
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	4b2d      	ldr	r3, [pc, #180]	@ (8003d38 <MX_LWIP_Init+0x22c>)
 8003c82:	789b      	ldrb	r3, [r3, #2]
 8003c84:	021b      	lsls	r3, r3, #8
 8003c86:	4313      	orrs	r3, r2
 8003c88:	4a2b      	ldr	r2, [pc, #172]	@ (8003d38 <MX_LWIP_Init+0x22c>)
 8003c8a:	78d2      	ldrb	r2, [r2, #3]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	061a      	lsls	r2, r3, #24
 8003c90:	4b29      	ldr	r3, [pc, #164]	@ (8003d38 <MX_LWIP_Init+0x22c>)
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	0619      	lsls	r1, r3, #24
 8003c96:	4b28      	ldr	r3, [pc, #160]	@ (8003d38 <MX_LWIP_Init+0x22c>)
 8003c98:	785b      	ldrb	r3, [r3, #1]
 8003c9a:	041b      	lsls	r3, r3, #16
 8003c9c:	4319      	orrs	r1, r3
 8003c9e:	4b26      	ldr	r3, [pc, #152]	@ (8003d38 <MX_LWIP_Init+0x22c>)
 8003ca0:	789b      	ldrb	r3, [r3, #2]
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	4924      	ldr	r1, [pc, #144]	@ (8003d38 <MX_LWIP_Init+0x22c>)
 8003ca8:	78c9      	ldrb	r1, [r1, #3]
 8003caa:	430b      	orrs	r3, r1
 8003cac:	021b      	lsls	r3, r3, #8
 8003cae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	4b20      	ldr	r3, [pc, #128]	@ (8003d38 <MX_LWIP_Init+0x22c>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	0619      	lsls	r1, r3, #24
 8003cba:	4b1f      	ldr	r3, [pc, #124]	@ (8003d38 <MX_LWIP_Init+0x22c>)
 8003cbc:	785b      	ldrb	r3, [r3, #1]
 8003cbe:	041b      	lsls	r3, r3, #16
 8003cc0:	4319      	orrs	r1, r3
 8003cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8003d38 <MX_LWIP_Init+0x22c>)
 8003cc4:	789b      	ldrb	r3, [r3, #2]
 8003cc6:	021b      	lsls	r3, r3, #8
 8003cc8:	430b      	orrs	r3, r1
 8003cca:	491b      	ldr	r1, [pc, #108]	@ (8003d38 <MX_LWIP_Init+0x22c>)
 8003ccc:	78c9      	ldrb	r1, [r1, #3]
 8003cce:	430b      	orrs	r3, r1
 8003cd0:	0a1b      	lsrs	r3, r3, #8
 8003cd2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	4b17      	ldr	r3, [pc, #92]	@ (8003d38 <MX_LWIP_Init+0x22c>)
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	0619      	lsls	r1, r3, #24
 8003cde:	4b16      	ldr	r3, [pc, #88]	@ (8003d38 <MX_LWIP_Init+0x22c>)
 8003ce0:	785b      	ldrb	r3, [r3, #1]
 8003ce2:	041b      	lsls	r3, r3, #16
 8003ce4:	4319      	orrs	r1, r3
 8003ce6:	4b14      	ldr	r3, [pc, #80]	@ (8003d38 <MX_LWIP_Init+0x22c>)
 8003ce8:	789b      	ldrb	r3, [r3, #2]
 8003cea:	021b      	lsls	r3, r3, #8
 8003cec:	430b      	orrs	r3, r1
 8003cee:	4912      	ldr	r1, [pc, #72]	@ (8003d38 <MX_LWIP_Init+0x22c>)
 8003cf0:	78c9      	ldrb	r1, [r1, #3]
 8003cf2:	430b      	orrs	r3, r1
 8003cf4:	0e1b      	lsrs	r3, r3, #24
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	4a12      	ldr	r2, [pc, #72]	@ (8003d44 <MX_LWIP_Init+0x238>)
 8003cfa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003cfc:	4b12      	ldr	r3, [pc, #72]	@ (8003d48 <MX_LWIP_Init+0x23c>)
 8003cfe:	9302      	str	r3, [sp, #8]
 8003d00:	4b12      	ldr	r3, [pc, #72]	@ (8003d4c <MX_LWIP_Init+0x240>)
 8003d02:	9301      	str	r3, [sp, #4]
 8003d04:	2300      	movs	r3, #0
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	4b0e      	ldr	r3, [pc, #56]	@ (8003d44 <MX_LWIP_Init+0x238>)
 8003d0a:	4a0d      	ldr	r2, [pc, #52]	@ (8003d40 <MX_LWIP_Init+0x234>)
 8003d0c:	490b      	ldr	r1, [pc, #44]	@ (8003d3c <MX_LWIP_Init+0x230>)
 8003d0e:	4810      	ldr	r0, [pc, #64]	@ (8003d50 <MX_LWIP_Init+0x244>)
 8003d10:	f001 f912 	bl	8004f38 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003d14:	480e      	ldr	r0, [pc, #56]	@ (8003d50 <MX_LWIP_Init+0x244>)
 8003d16:	f001 fac1 	bl	800529c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8003d1a:	480d      	ldr	r0, [pc, #52]	@ (8003d50 <MX_LWIP_Init+0x244>)
 8003d1c:	f001 face 	bl	80052bc <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003d20:	490c      	ldr	r1, [pc, #48]	@ (8003d54 <MX_LWIP_Init+0x248>)
 8003d22:	480b      	ldr	r0, [pc, #44]	@ (8003d50 <MX_LWIP_Init+0x244>)
 8003d24:	f001 fbcc 	bl	80054c0 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003d28:	bf00      	nop
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	200001f8 	.word	0x200001f8
 8003d34:	200001fc 	.word	0x200001fc
 8003d38:	20000200 	.word	0x20000200
 8003d3c:	200001ec 	.word	0x200001ec
 8003d40:	200001f0 	.word	0x200001f0
 8003d44:	200001f4 	.word	0x200001f4
 8003d48:	0800ea1d 	.word	0x0800ea1d
 8003d4c:	08004075 	.word	0x08004075
 8003d50:	200001b8 	.word	0x200001b8
 8003d54:	08003da9 	.word	0x08003da9

08003d58 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8003d60:	f7fd f904 	bl	8000f6c <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	4b08      	ldr	r3, [pc, #32]	@ (8003d88 <Ethernet_Link_Periodic_Handle+0x30>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b63      	cmp	r3, #99	@ 0x63
 8003d6e:	d907      	bls.n	8003d80 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8003d70:	f7fd f8fc 	bl	8000f6c <HAL_GetTick>
 8003d74:	4603      	mov	r3, r0
 8003d76:	4a04      	ldr	r2, [pc, #16]	@ (8003d88 <Ethernet_Link_Periodic_Handle+0x30>)
 8003d78:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 fac6 	bl	800430c <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8003d80:	bf00      	nop
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	200001b4 	.word	0x200001b4

08003d8c <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8003d90:	4804      	ldr	r0, [pc, #16]	@ (8003da4 <MX_LWIP_Process+0x18>)
 8003d92:	f000 f94f 	bl	8004034 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8003d96:	f008 fa55 	bl	800c244 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8003d9a:	4802      	ldr	r0, [pc, #8]	@ (8003da4 <MX_LWIP_Process+0x18>)
 8003d9c:	f7ff ffdc 	bl	8003d58 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8003da0:	bf00      	nop
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	200001b8 	.word	0x200001b8

08003da8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003dc8:	4b44      	ldr	r3, [pc, #272]	@ (8003edc <low_level_init+0x120>)
 8003dca:	4a45      	ldr	r2, [pc, #276]	@ (8003ee0 <low_level_init+0x124>)
 8003dcc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003dd2:	2380      	movs	r3, #128	@ 0x80
 8003dd4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003dd6:	23e1      	movs	r3, #225	@ 0xe1
 8003dd8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003dde:	2300      	movs	r3, #0
 8003de0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003de2:	2300      	movs	r3, #0
 8003de4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003de6:	4a3d      	ldr	r2, [pc, #244]	@ (8003edc <low_level_init+0x120>)
 8003de8:	f107 0308 	add.w	r3, r7, #8
 8003dec:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003dee:	4b3b      	ldr	r3, [pc, #236]	@ (8003edc <low_level_init+0x120>)
 8003df0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003df4:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003df6:	4b39      	ldr	r3, [pc, #228]	@ (8003edc <low_level_init+0x120>)
 8003df8:	4a3a      	ldr	r2, [pc, #232]	@ (8003ee4 <low_level_init+0x128>)
 8003dfa:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003dfc:	4b37      	ldr	r3, [pc, #220]	@ (8003edc <low_level_init+0x120>)
 8003dfe:	4a3a      	ldr	r2, [pc, #232]	@ (8003ee8 <low_level_init+0x12c>)
 8003e00:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8003e02:	4b36      	ldr	r3, [pc, #216]	@ (8003edc <low_level_init+0x120>)
 8003e04:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8003e08:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003e0a:	4834      	ldr	r0, [pc, #208]	@ (8003edc <low_level_init+0x120>)
 8003e0c:	f7fd f9f0 	bl	80011f0 <HAL_ETH_Init>
 8003e10:	4603      	mov	r3, r0
 8003e12:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003e14:	2238      	movs	r2, #56	@ 0x38
 8003e16:	2100      	movs	r1, #0
 8003e18:	4834      	ldr	r0, [pc, #208]	@ (8003eec <low_level_init+0x130>)
 8003e1a:	f00c fb7c 	bl	8010516 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003e1e:	4b33      	ldr	r3, [pc, #204]	@ (8003eec <low_level_init+0x130>)
 8003e20:	2221      	movs	r2, #33	@ 0x21
 8003e22:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003e24:	4b31      	ldr	r3, [pc, #196]	@ (8003eec <low_level_init+0x130>)
 8003e26:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8003e2a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003e2c:	4b2f      	ldr	r3, [pc, #188]	@ (8003eec <low_level_init+0x130>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003e32:	482f      	ldr	r0, [pc, #188]	@ (8003ef0 <low_level_init+0x134>)
 8003e34:	f000 ff48 	bl	8004cc8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2206      	movs	r2, #6
 8003e3c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003e40:	4b26      	ldr	r3, [pc, #152]	@ (8003edc <low_level_init+0x120>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	781a      	ldrb	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003e4c:	4b23      	ldr	r3, [pc, #140]	@ (8003edc <low_level_init+0x120>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	785a      	ldrb	r2, [r3, #1]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003e58:	4b20      	ldr	r3, [pc, #128]	@ (8003edc <low_level_init+0x120>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	789a      	ldrb	r2, [r3, #2]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003e64:	4b1d      	ldr	r3, [pc, #116]	@ (8003edc <low_level_init+0x120>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	78da      	ldrb	r2, [r3, #3]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003e70:	4b1a      	ldr	r3, [pc, #104]	@ (8003edc <low_level_init+0x120>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	791a      	ldrb	r2, [r3, #4]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003e7c:	4b17      	ldr	r3, [pc, #92]	@ (8003edc <low_level_init+0x120>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	795a      	ldrb	r2, [r3, #5]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003e8e:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003e96:	f043 030a 	orr.w	r3, r3, #10
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8003ea2:	4914      	ldr	r1, [pc, #80]	@ (8003ef4 <low_level_init+0x138>)
 8003ea4:	4814      	ldr	r0, [pc, #80]	@ (8003ef8 <low_level_init+0x13c>)
 8003ea6:	f7fc fef4 	bl	8000c92 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8003eaa:	4813      	ldr	r0, [pc, #76]	@ (8003ef8 <low_level_init+0x13c>)
 8003eac:	f7fc ff23 	bl	8000cf6 <LAN8742_Init>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d006      	beq.n	8003ec4 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f001 fad2 	bl	8005460 <netif_set_link_down>
    netif_set_down(netif);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f001 fa69 	bl	8005394 <netif_set_down>
 8003ec2:	e008      	b.n	8003ed6 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8003ec4:	7bfb      	ldrb	r3, [r7, #15]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d103      	bne.n	8003ed2 <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 fa1e 	bl	800430c <ethernet_link_check_state>
 8003ed0:	e001      	b.n	8003ed6 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 8003ed2:	f7fc fd23 	bl	800091c <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20004cd0 	.word	0x20004cd0
 8003ee0:	40028000 	.word	0x40028000
 8003ee4:	20004c30 	.word	0x20004c30
 8003ee8:	20004b90 	.word	0x20004b90
 8003eec:	20004d80 	.word	0x20004d80
 8003ef0:	080140d8 	.word	0x080140d8
 8003ef4:	2000000c 	.word	0x2000000c
 8003ef8:	20004db8 	.word	0x20004db8

08003efc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b092      	sub	sp, #72	@ 0x48
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8003f14:	f107 030c 	add.w	r3, r7, #12
 8003f18:	2230      	movs	r2, #48	@ 0x30
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f00c fafa 	bl	8010516 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8003f22:	f107 030c 	add.w	r3, r7, #12
 8003f26:	2230      	movs	r2, #48	@ 0x30
 8003f28:	2100      	movs	r1, #0
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f00c faf3 	bl	8010516 <memset>

  for(q = p; q != NULL; q = q->next)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f34:	e045      	b.n	8003fc2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8003f36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f38:	2b03      	cmp	r3, #3
 8003f3a:	d902      	bls.n	8003f42 <low_level_output+0x46>
      return ERR_IF;
 8003f3c:	f06f 030b 	mvn.w	r3, #11
 8003f40:	e055      	b.n	8003fee <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8003f42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f44:	6859      	ldr	r1, [r3, #4]
 8003f46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f48:	4613      	mov	r3, r2
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	3348      	adds	r3, #72	@ 0x48
 8003f52:	443b      	add	r3, r7
 8003f54:	3b3c      	subs	r3, #60	@ 0x3c
 8003f56:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8003f58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f5a:	895b      	ldrh	r3, [r3, #10]
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f60:	4613      	mov	r3, r2
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	3348      	adds	r3, #72	@ 0x48
 8003f6a:	443b      	add	r3, r7
 8003f6c:	3b38      	subs	r3, #56	@ 0x38
 8003f6e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8003f70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d011      	beq.n	8003f9a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8003f76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f78:	1e5a      	subs	r2, r3, #1
 8003f7a:	f107 000c 	add.w	r0, r7, #12
 8003f7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003f80:	460b      	mov	r3, r1
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	440b      	add	r3, r1
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	18c1      	adds	r1, r0, r3
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	4413      	add	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	3348      	adds	r3, #72	@ 0x48
 8003f94:	443b      	add	r3, r7
 8003f96:	3b34      	subs	r3, #52	@ 0x34
 8003f98:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8003f9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d109      	bne.n	8003fb6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8003fa2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	4413      	add	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	3348      	adds	r3, #72	@ 0x48
 8003fae:	443b      	add	r3, r7
 8003fb0:	3b34      	subs	r3, #52	@ 0x34
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
    }

    i++;
 8003fb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fb8:	3301      	adds	r3, #1
 8003fba:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8003fbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1b6      	bne.n	8003f36 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	891b      	ldrh	r3, [r3, #8]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	4b0a      	ldr	r3, [pc, #40]	@ (8003ff8 <low_level_output+0xfc>)
 8003fd0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8003fd2:	4a09      	ldr	r2, [pc, #36]	@ (8003ff8 <low_level_output+0xfc>)
 8003fd4:	f107 030c 	add.w	r3, r7, #12
 8003fd8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8003fda:	4a07      	ldr	r2, [pc, #28]	@ (8003ff8 <low_level_output+0xfc>)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8003fe0:	2214      	movs	r2, #20
 8003fe2:	4905      	ldr	r1, [pc, #20]	@ (8003ff8 <low_level_output+0xfc>)
 8003fe4:	4805      	ldr	r0, [pc, #20]	@ (8003ffc <low_level_output+0x100>)
 8003fe6:	f7fd fa8e 	bl	8001506 <HAL_ETH_Transmit>

  return errval;
 8003fea:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3748      	adds	r7, #72	@ 0x48
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20004d80 	.word	0x20004d80
 8003ffc:	20004cd0 	.word	0x20004cd0

08004000 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004008:	2300      	movs	r3, #0
 800400a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800400c:	4b07      	ldr	r3, [pc, #28]	@ (800402c <low_level_input+0x2c>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d105      	bne.n	8004020 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004014:	f107 030c 	add.w	r3, r7, #12
 8004018:	4619      	mov	r1, r3
 800401a:	4805      	ldr	r0, [pc, #20]	@ (8004030 <low_level_input+0x30>)
 800401c:	f7fd fb07 	bl	800162e <HAL_ETH_ReadData>
  }

  return p;
 8004020:	68fb      	ldr	r3, [r7, #12]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	20004b8c 	.word	0x20004b8c
 8004030:	20004cd0 	.word	0x20004cd0

08004034 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800403c:	2300      	movs	r3, #0
 800403e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7ff ffdd 	bl	8004000 <low_level_input>
 8004046:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	4798      	blx	r3
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f001 fdae 	bl	8005bc0 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1ea      	bne.n	8004040 <ethernetif_input+0xc>
}
 800406a:	bf00      	nop
 800406c:	bf00      	nop
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d106      	bne.n	8004090 <ethernetif_init+0x1c>
 8004082:	4b0e      	ldr	r3, [pc, #56]	@ (80040bc <ethernetif_init+0x48>)
 8004084:	f240 126f 	movw	r2, #367	@ 0x16f
 8004088:	490d      	ldr	r1, [pc, #52]	@ (80040c0 <ethernetif_init+0x4c>)
 800408a:	480e      	ldr	r0, [pc, #56]	@ (80040c4 <ethernetif_init+0x50>)
 800408c:	f00c f98e 	bl	80103ac <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2273      	movs	r2, #115	@ 0x73
 8004094:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2274      	movs	r2, #116	@ 0x74
 800409c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a09      	ldr	r2, [pc, #36]	@ (80040c8 <ethernetif_init+0x54>)
 80040a4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a08      	ldr	r2, [pc, #32]	@ (80040cc <ethernetif_init+0x58>)
 80040aa:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7ff fe85 	bl	8003dbc <low_level_init>

  return ERR_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	080115c4 	.word	0x080115c4
 80040c0:	080115e0 	.word	0x080115e0
 80040c4:	080115f0 	.word	0x080115f0
 80040c8:	0800ced5 	.word	0x0800ced5
 80040cc:	08003efd 	.word	0x08003efd

080040d0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80040dc:	68f9      	ldr	r1, [r7, #12]
 80040de:	4807      	ldr	r0, [pc, #28]	@ (80040fc <pbuf_free_custom+0x2c>)
 80040e0:	f000 fed4 	bl	8004e8c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80040e4:	4b06      	ldr	r3, [pc, #24]	@ (8004100 <pbuf_free_custom+0x30>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d102      	bne.n	80040f2 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80040ec:	4b04      	ldr	r3, [pc, #16]	@ (8004100 <pbuf_free_custom+0x30>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	701a      	strb	r2, [r3, #0]
  }
}
 80040f2:	bf00      	nop
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	080140d8 	.word	0x080140d8
 8004100:	20004b8c 	.word	0x20004b8c

08004104 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004108:	f7fc ff30 	bl	8000f6c <HAL_GetTick>
 800410c:	4603      	mov	r3, r0
}
 800410e:	4618      	mov	r0, r3
 8004110:	bd80      	pop	{r7, pc}
	...

08004114 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b08e      	sub	sp, #56	@ 0x38
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800411c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	605a      	str	r2, [r3, #4]
 8004126:	609a      	str	r2, [r3, #8]
 8004128:	60da      	str	r2, [r3, #12]
 800412a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a4a      	ldr	r2, [pc, #296]	@ (800425c <HAL_ETH_MspInit+0x148>)
 8004132:	4293      	cmp	r3, r2
 8004134:	f040 808d 	bne.w	8004252 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004138:	2300      	movs	r3, #0
 800413a:	623b      	str	r3, [r7, #32]
 800413c:	4b48      	ldr	r3, [pc, #288]	@ (8004260 <HAL_ETH_MspInit+0x14c>)
 800413e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004140:	4a47      	ldr	r2, [pc, #284]	@ (8004260 <HAL_ETH_MspInit+0x14c>)
 8004142:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004146:	6313      	str	r3, [r2, #48]	@ 0x30
 8004148:	4b45      	ldr	r3, [pc, #276]	@ (8004260 <HAL_ETH_MspInit+0x14c>)
 800414a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004150:	623b      	str	r3, [r7, #32]
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	2300      	movs	r3, #0
 8004156:	61fb      	str	r3, [r7, #28]
 8004158:	4b41      	ldr	r3, [pc, #260]	@ (8004260 <HAL_ETH_MspInit+0x14c>)
 800415a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415c:	4a40      	ldr	r2, [pc, #256]	@ (8004260 <HAL_ETH_MspInit+0x14c>)
 800415e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004162:	6313      	str	r3, [r2, #48]	@ 0x30
 8004164:	4b3e      	ldr	r3, [pc, #248]	@ (8004260 <HAL_ETH_MspInit+0x14c>)
 8004166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004168:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800416c:	61fb      	str	r3, [r7, #28]
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	2300      	movs	r3, #0
 8004172:	61bb      	str	r3, [r7, #24]
 8004174:	4b3a      	ldr	r3, [pc, #232]	@ (8004260 <HAL_ETH_MspInit+0x14c>)
 8004176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004178:	4a39      	ldr	r2, [pc, #228]	@ (8004260 <HAL_ETH_MspInit+0x14c>)
 800417a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800417e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004180:	4b37      	ldr	r3, [pc, #220]	@ (8004260 <HAL_ETH_MspInit+0x14c>)
 8004182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004184:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004188:	61bb      	str	r3, [r7, #24]
 800418a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800418c:	2300      	movs	r3, #0
 800418e:	617b      	str	r3, [r7, #20]
 8004190:	4b33      	ldr	r3, [pc, #204]	@ (8004260 <HAL_ETH_MspInit+0x14c>)
 8004192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004194:	4a32      	ldr	r2, [pc, #200]	@ (8004260 <HAL_ETH_MspInit+0x14c>)
 8004196:	f043 0304 	orr.w	r3, r3, #4
 800419a:	6313      	str	r3, [r2, #48]	@ 0x30
 800419c:	4b30      	ldr	r3, [pc, #192]	@ (8004260 <HAL_ETH_MspInit+0x14c>)
 800419e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041a8:	2300      	movs	r3, #0
 80041aa:	613b      	str	r3, [r7, #16]
 80041ac:	4b2c      	ldr	r3, [pc, #176]	@ (8004260 <HAL_ETH_MspInit+0x14c>)
 80041ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b0:	4a2b      	ldr	r2, [pc, #172]	@ (8004260 <HAL_ETH_MspInit+0x14c>)
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80041b8:	4b29      	ldr	r3, [pc, #164]	@ (8004260 <HAL_ETH_MspInit+0x14c>)
 80041ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	613b      	str	r3, [r7, #16]
 80041c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041c4:	2300      	movs	r3, #0
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	4b25      	ldr	r3, [pc, #148]	@ (8004260 <HAL_ETH_MspInit+0x14c>)
 80041ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041cc:	4a24      	ldr	r2, [pc, #144]	@ (8004260 <HAL_ETH_MspInit+0x14c>)
 80041ce:	f043 0302 	orr.w	r3, r3, #2
 80041d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80041d4:	4b22      	ldr	r3, [pc, #136]	@ (8004260 <HAL_ETH_MspInit+0x14c>)
 80041d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80041e0:	2332      	movs	r3, #50	@ 0x32
 80041e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e4:	2302      	movs	r3, #2
 80041e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e8:	2300      	movs	r3, #0
 80041ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041ec:	2303      	movs	r3, #3
 80041ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80041f0:	230b      	movs	r3, #11
 80041f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041f8:	4619      	mov	r1, r3
 80041fa:	481a      	ldr	r0, [pc, #104]	@ (8004264 <HAL_ETH_MspInit+0x150>)
 80041fc:	f7fe fa48 	bl	8002690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004200:	2386      	movs	r3, #134	@ 0x86
 8004202:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004204:	2302      	movs	r3, #2
 8004206:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004208:	2300      	movs	r3, #0
 800420a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800420c:	2303      	movs	r3, #3
 800420e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004210:	230b      	movs	r3, #11
 8004212:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004214:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004218:	4619      	mov	r1, r3
 800421a:	4813      	ldr	r0, [pc, #76]	@ (8004268 <HAL_ETH_MspInit+0x154>)
 800421c:	f7fe fa38 	bl	8002690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004220:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8004224:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004226:	2302      	movs	r3, #2
 8004228:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422a:	2300      	movs	r3, #0
 800422c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800422e:	2303      	movs	r3, #3
 8004230:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004232:	230b      	movs	r3, #11
 8004234:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004236:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800423a:	4619      	mov	r1, r3
 800423c:	480b      	ldr	r0, [pc, #44]	@ (800426c <HAL_ETH_MspInit+0x158>)
 800423e:	f7fe fa27 	bl	8002690 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8004242:	2200      	movs	r2, #0
 8004244:	2100      	movs	r1, #0
 8004246:	203d      	movs	r0, #61	@ 0x3d
 8004248:	f7fc ff9b 	bl	8001182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800424c:	203d      	movs	r0, #61	@ 0x3d
 800424e:	f7fc ffb4 	bl	80011ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004252:	bf00      	nop
 8004254:	3738      	adds	r7, #56	@ 0x38
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40028000 	.word	0x40028000
 8004260:	40023800 	.word	0x40023800
 8004264:	40020800 	.word	0x40020800
 8004268:	40020000 	.word	0x40020000
 800426c:	40020400 	.word	0x40020400

08004270 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004274:	4802      	ldr	r0, [pc, #8]	@ (8004280 <ETH_PHY_IO_Init+0x10>)
 8004276:	f7fd fda7 	bl	8001dc8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	bd80      	pop	{r7, pc}
 8004280:	20004cd0 	.word	0x20004cd0

08004284 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  return 0;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	68f9      	ldr	r1, [r7, #12]
 80042a6:	4807      	ldr	r0, [pc, #28]	@ (80042c4 <ETH_PHY_IO_ReadReg+0x30>)
 80042a8:	f7fd fbe8 	bl	8001a7c <HAL_ETH_ReadPHYRegister>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80042b2:	f04f 33ff 	mov.w	r3, #4294967295
 80042b6:	e000      	b.n	80042ba <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20004cd0 	.word	0x20004cd0

080042c8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	68f9      	ldr	r1, [r7, #12]
 80042da:	4807      	ldr	r0, [pc, #28]	@ (80042f8 <ETH_PHY_IO_WriteReg+0x30>)
 80042dc:	f7fd fc19 	bl	8001b12 <HAL_ETH_WritePHYRegister>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80042e6:	f04f 33ff 	mov.w	r3, #4294967295
 80042ea:	e000      	b.n	80042ee <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	20004cd0 	.word	0x20004cd0

080042fc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004300:	f7fc fe34 	bl	8000f6c <HAL_GetTick>
 8004304:	4603      	mov	r3, r0
}
 8004306:	4618      	mov	r0, r3
 8004308:	bd80      	pop	{r7, pc}
	...

0800430c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b0a0      	sub	sp, #128	@ 0x80
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004314:	f107 030c 	add.w	r3, r7, #12
 8004318:	2264      	movs	r2, #100	@ 0x64
 800431a:	2100      	movs	r1, #0
 800431c:	4618      	mov	r0, r3
 800431e:	f00c f8fa 	bl	8010516 <memset>
  int32_t PHYLinkState = 0;
 8004322:	2300      	movs	r3, #0
 8004324:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004326:	2300      	movs	r3, #0
 8004328:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800432a:	2300      	movs	r3, #0
 800432c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800432e:	2300      	movs	r3, #0
 8004330:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004332:	483a      	ldr	r0, [pc, #232]	@ (800441c <ethernet_link_check_state+0x110>)
 8004334:	f7fc fd2c 	bl	8000d90 <LAN8742_GetLinkState>
 8004338:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004340:	089b      	lsrs	r3, r3, #2
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00c      	beq.n	8004366 <ethernet_link_check_state+0x5a>
 800434c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800434e:	2b01      	cmp	r3, #1
 8004350:	dc09      	bgt.n	8004366 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 8004352:	4833      	ldr	r0, [pc, #204]	@ (8004420 <ethernet_link_check_state+0x114>)
 8004354:	f7fd f858 	bl	8001408 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f001 f81b 	bl	8005394 <netif_set_down>
    netif_set_link_down(netif);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f001 f87e 	bl	8005460 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004364:	e055      	b.n	8004412 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d14e      	bne.n	8004412 <ethernet_link_check_state+0x106>
 8004374:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004376:	2b01      	cmp	r3, #1
 8004378:	dd4b      	ble.n	8004412 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800437a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800437c:	3b02      	subs	r3, #2
 800437e:	2b03      	cmp	r3, #3
 8004380:	d82a      	bhi.n	80043d8 <ethernet_link_check_state+0xcc>
 8004382:	a201      	add	r2, pc, #4	@ (adr r2, 8004388 <ethernet_link_check_state+0x7c>)
 8004384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004388:	08004399 	.word	0x08004399
 800438c:	080043ab 	.word	0x080043ab
 8004390:	080043bb 	.word	0x080043bb
 8004394:	080043cb 	.word	0x080043cb
      duplex = ETH_FULLDUPLEX_MODE;
 8004398:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800439c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800439e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80043a2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80043a4:	2301      	movs	r3, #1
 80043a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80043a8:	e017      	b.n	80043da <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80043aa:	2300      	movs	r3, #0
 80043ac:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80043ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80043b2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80043b4:	2301      	movs	r3, #1
 80043b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80043b8:	e00f      	b.n	80043da <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80043ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80043be:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80043c0:	2300      	movs	r3, #0
 80043c2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80043c4:	2301      	movs	r3, #1
 80043c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80043c8:	e007      	b.n	80043da <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80043ca:	2300      	movs	r3, #0
 80043cc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80043ce:	2300      	movs	r3, #0
 80043d0:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80043d2:	2301      	movs	r3, #1
 80043d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80043d6:	e000      	b.n	80043da <ethernet_link_check_state+0xce>
      break;
 80043d8:	bf00      	nop
    if(linkchanged)
 80043da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d018      	beq.n	8004412 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80043e0:	f107 030c 	add.w	r3, r7, #12
 80043e4:	4619      	mov	r1, r3
 80043e6:	480e      	ldr	r0, [pc, #56]	@ (8004420 <ethernet_link_check_state+0x114>)
 80043e8:	f7fd fbdc 	bl	8001ba4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80043ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043ee:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 80043f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043f2:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80043f4:	f107 030c 	add.w	r3, r7, #12
 80043f8:	4619      	mov	r1, r3
 80043fa:	4809      	ldr	r0, [pc, #36]	@ (8004420 <ethernet_link_check_state+0x114>)
 80043fc:	f7fd fcc9 	bl	8001d92 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8004400:	4807      	ldr	r0, [pc, #28]	@ (8004420 <ethernet_link_check_state+0x114>)
 8004402:	f7fc ff91 	bl	8001328 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 ff58 	bl	80052bc <netif_set_up>
      netif_set_link_up(netif);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 fff3 	bl	80053f8 <netif_set_link_up>
}
 8004412:	bf00      	nop
 8004414:	3780      	adds	r7, #128	@ 0x80
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	20004db8 	.word	0x20004db8
 8004420:	20004cd0 	.word	0x20004cd0

08004424 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af02      	add	r7, sp, #8
 800442a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800442c:	4812      	ldr	r0, [pc, #72]	@ (8004478 <HAL_ETH_RxAllocateCallback+0x54>)
 800442e:	f000 fcbf 	bl	8004db0 <memp_malloc_pool>
 8004432:	60f8      	str	r0, [r7, #12]
  if (p)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d014      	beq.n	8004464 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f103 0220 	add.w	r2, r3, #32
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4a0d      	ldr	r2, [pc, #52]	@ (800447c <HAL_ETH_RxAllocateCallback+0x58>)
 8004448:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004452:	9201      	str	r2, [sp, #4]
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2241      	movs	r2, #65	@ 0x41
 800445a:	2100      	movs	r1, #0
 800445c:	2000      	movs	r0, #0
 800445e:	f001 f9f5 	bl	800584c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004462:	e005      	b.n	8004470 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004464:	4b06      	ldr	r3, [pc, #24]	@ (8004480 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004466:	2201      	movs	r2, #1
 8004468:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]
}
 8004470:	bf00      	nop
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	080140d8 	.word	0x080140d8
 800447c:	080040d1 	.word	0x080040d1
 8004480:	20004b8c 	.word	0x20004b8c

08004484 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004484:	b480      	push	{r7}
 8004486:	b089      	sub	sp, #36	@ 0x24
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
 8004490:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800449a:	2300      	movs	r3, #0
 800449c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	3b20      	subs	r3, #32
 80044a2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	2200      	movs	r2, #0
 80044ae:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	887a      	ldrh	r2, [r7, #2]
 80044b4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d103      	bne.n	80044c6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	69fa      	ldr	r2, [r7, #28]
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	e003      	b.n	80044ce <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	69fa      	ldr	r2, [r7, #28]
 80044cc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	69fa      	ldr	r2, [r7, #28]
 80044d2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	61fb      	str	r3, [r7, #28]
 80044da:	e009      	b.n	80044f0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	891a      	ldrh	r2, [r3, #8]
 80044e0:	887b      	ldrh	r3, [r7, #2]
 80044e2:	4413      	add	r3, r2
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	61fb      	str	r3, [r7, #28]
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f2      	bne.n	80044dc <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80044f6:	bf00      	nop
 80044f8:	bf00      	nop
 80044fa:	3724      	adds	r7, #36	@ 0x24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	4603      	mov	r3, r0
 800450c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800450e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004512:	021b      	lsls	r3, r3, #8
 8004514:	b21a      	sxth	r2, r3
 8004516:	88fb      	ldrh	r3, [r7, #6]
 8004518:	0a1b      	lsrs	r3, r3, #8
 800451a:	b29b      	uxth	r3, r3
 800451c:	b21b      	sxth	r3, r3
 800451e:	4313      	orrs	r3, r2
 8004520:	b21b      	sxth	r3, r3
 8004522:	b29b      	uxth	r3, r3
}
 8004524:	4618      	mov	r0, r3
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	061a      	lsls	r2, r3, #24
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	021b      	lsls	r3, r3, #8
 8004540:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004544:	431a      	orrs	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	0a1b      	lsrs	r3, r3, #8
 800454a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	0e1b      	lsrs	r3, r3, #24
 8004554:	4313      	orrs	r3, r2
}
 8004556:	4618      	mov	r0, r3
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b082      	sub	sp, #8
 8004566:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004568:	2300      	movs	r3, #0
 800456a:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800456c:	f000 f8d4 	bl	8004718 <mem_init>
  memp_init();
 8004570:	f000 fbda 	bl	8004d28 <memp_init>
  pbuf_init();
  netif_init();
 8004574:	f000 fcd8 	bl	8004f28 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004578:	f007 fea6 	bl	800c2c8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800457c:	f001 fdae 	bl	80060dc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004580:	f007 fe18 	bl	800c1b4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004584:	bf00      	nop
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	4603      	mov	r3, r0
 8004594:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004596:	4b05      	ldr	r3, [pc, #20]	@ (80045ac <ptr_to_mem+0x20>)
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	88fb      	ldrh	r3, [r7, #6]
 800459c:	4413      	add	r3, r2
}
 800459e:	4618      	mov	r0, r3
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	20005444 	.word	0x20005444

080045b0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80045b8:	4b05      	ldr	r3, [pc, #20]	@ (80045d0 <mem_to_ptr+0x20>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	b29b      	uxth	r3, r3
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	20005444 	.word	0x20005444

080045d4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80045d4:	b590      	push	{r4, r7, lr}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80045dc:	4b45      	ldr	r3, [pc, #276]	@ (80046f4 <plug_holes+0x120>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d206      	bcs.n	80045f4 <plug_holes+0x20>
 80045e6:	4b44      	ldr	r3, [pc, #272]	@ (80046f8 <plug_holes+0x124>)
 80045e8:	f240 12df 	movw	r2, #479	@ 0x1df
 80045ec:	4943      	ldr	r1, [pc, #268]	@ (80046fc <plug_holes+0x128>)
 80045ee:	4844      	ldr	r0, [pc, #272]	@ (8004700 <plug_holes+0x12c>)
 80045f0:	f00b fedc 	bl	80103ac <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80045f4:	4b43      	ldr	r3, [pc, #268]	@ (8004704 <plug_holes+0x130>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d306      	bcc.n	800460c <plug_holes+0x38>
 80045fe:	4b3e      	ldr	r3, [pc, #248]	@ (80046f8 <plug_holes+0x124>)
 8004600:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8004604:	4940      	ldr	r1, [pc, #256]	@ (8004708 <plug_holes+0x134>)
 8004606:	483e      	ldr	r0, [pc, #248]	@ (8004700 <plug_holes+0x12c>)
 8004608:	f00b fed0 	bl	80103ac <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	791b      	ldrb	r3, [r3, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d006      	beq.n	8004622 <plug_holes+0x4e>
 8004614:	4b38      	ldr	r3, [pc, #224]	@ (80046f8 <plug_holes+0x124>)
 8004616:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800461a:	493c      	ldr	r1, [pc, #240]	@ (800470c <plug_holes+0x138>)
 800461c:	4838      	ldr	r0, [pc, #224]	@ (8004700 <plug_holes+0x12c>)
 800461e:	f00b fec5 	bl	80103ac <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	881b      	ldrh	r3, [r3, #0]
 8004626:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800462a:	d906      	bls.n	800463a <plug_holes+0x66>
 800462c:	4b32      	ldr	r3, [pc, #200]	@ (80046f8 <plug_holes+0x124>)
 800462e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8004632:	4937      	ldr	r1, [pc, #220]	@ (8004710 <plug_holes+0x13c>)
 8004634:	4832      	ldr	r0, [pc, #200]	@ (8004700 <plug_holes+0x12c>)
 8004636:	f00b feb9 	bl	80103ac <iprintf>

  nmem = ptr_to_mem(mem->next);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	881b      	ldrh	r3, [r3, #0]
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff ffa4 	bl	800458c <ptr_to_mem>
 8004644:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	429a      	cmp	r2, r3
 800464c:	d024      	beq.n	8004698 <plug_holes+0xc4>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	791b      	ldrb	r3, [r3, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d120      	bne.n	8004698 <plug_holes+0xc4>
 8004656:	4b2b      	ldr	r3, [pc, #172]	@ (8004704 <plug_holes+0x130>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	429a      	cmp	r2, r3
 800465e:	d01b      	beq.n	8004698 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004660:	4b2c      	ldr	r3, [pc, #176]	@ (8004714 <plug_holes+0x140>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	429a      	cmp	r2, r3
 8004668:	d102      	bne.n	8004670 <plug_holes+0x9c>
      lfree = mem;
 800466a:	4a2a      	ldr	r2, [pc, #168]	@ (8004714 <plug_holes+0x140>)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	881a      	ldrh	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004680:	d00a      	beq.n	8004698 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff ff80 	bl	800458c <ptr_to_mem>
 800468c:	4604      	mov	r4, r0
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7ff ff8e 	bl	80045b0 <mem_to_ptr>
 8004694:	4603      	mov	r3, r0
 8004696:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	885b      	ldrh	r3, [r3, #2]
 800469c:	4618      	mov	r0, r3
 800469e:	f7ff ff75 	bl	800458c <ptr_to_mem>
 80046a2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d01f      	beq.n	80046ec <plug_holes+0x118>
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	791b      	ldrb	r3, [r3, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d11b      	bne.n	80046ec <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80046b4:	4b17      	ldr	r3, [pc, #92]	@ (8004714 <plug_holes+0x140>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d102      	bne.n	80046c4 <plug_holes+0xf0>
      lfree = pmem;
 80046be:	4a15      	ldr	r2, [pc, #84]	@ (8004714 <plug_holes+0x140>)
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	881a      	ldrh	r2, [r3, #0]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80046d4:	d00a      	beq.n	80046ec <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f7ff ff56 	bl	800458c <ptr_to_mem>
 80046e0:	4604      	mov	r4, r0
 80046e2:	68b8      	ldr	r0, [r7, #8]
 80046e4:	f7ff ff64 	bl	80045b0 <mem_to_ptr>
 80046e8:	4603      	mov	r3, r0
 80046ea:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80046ec:	bf00      	nop
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd90      	pop	{r4, r7, pc}
 80046f4:	20005444 	.word	0x20005444
 80046f8:	08011618 	.word	0x08011618
 80046fc:	08011648 	.word	0x08011648
 8004700:	08011660 	.word	0x08011660
 8004704:	20005448 	.word	0x20005448
 8004708:	08011688 	.word	0x08011688
 800470c:	080116a4 	.word	0x080116a4
 8004710:	080116c0 	.word	0x080116c0
 8004714:	2000544c 	.word	0x2000544c

08004718 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800471e:	4b18      	ldr	r3, [pc, #96]	@ (8004780 <mem_init+0x68>)
 8004720:	3303      	adds	r3, #3
 8004722:	f023 0303 	bic.w	r3, r3, #3
 8004726:	461a      	mov	r2, r3
 8004728:	4b16      	ldr	r3, [pc, #88]	@ (8004784 <mem_init+0x6c>)
 800472a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800472c:	4b15      	ldr	r3, [pc, #84]	@ (8004784 <mem_init+0x6c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004738:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004746:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800474a:	f7ff ff1f 	bl	800458c <ptr_to_mem>
 800474e:	4603      	mov	r3, r0
 8004750:	4a0d      	ldr	r2, [pc, #52]	@ (8004788 <mem_init+0x70>)
 8004752:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004754:	4b0c      	ldr	r3, [pc, #48]	@ (8004788 <mem_init+0x70>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2201      	movs	r2, #1
 800475a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800475c:	4b0a      	ldr	r3, [pc, #40]	@ (8004788 <mem_init+0x70>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004764:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004766:	4b08      	ldr	r3, [pc, #32]	@ (8004788 <mem_init+0x70>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800476e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004770:	4b04      	ldr	r3, [pc, #16]	@ (8004784 <mem_init+0x6c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a05      	ldr	r2, [pc, #20]	@ (800478c <mem_init+0x74>)
 8004776:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004778:	bf00      	nop
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	20004df0 	.word	0x20004df0
 8004784:	20005444 	.word	0x20005444
 8004788:	20005448 	.word	0x20005448
 800478c:	2000544c 	.word	0x2000544c

08004790 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff ff09 	bl	80045b0 <mem_to_ptr>
 800479e:	4603      	mov	r3, r0
 80047a0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	881b      	ldrh	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff fef0 	bl	800458c <ptr_to_mem>
 80047ac:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	885b      	ldrh	r3, [r3, #2]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff feea 	bl	800458c <ptr_to_mem>
 80047b8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80047c2:	d818      	bhi.n	80047f6 <mem_link_valid+0x66>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	885b      	ldrh	r3, [r3, #2]
 80047c8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80047cc:	d813      	bhi.n	80047f6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80047d2:	8afa      	ldrh	r2, [r7, #22]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d004      	beq.n	80047e2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	881b      	ldrh	r3, [r3, #0]
 80047dc:	8afa      	ldrh	r2, [r7, #22]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d109      	bne.n	80047f6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80047e2:	4b08      	ldr	r3, [pc, #32]	@ (8004804 <mem_link_valid+0x74>)
 80047e4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d006      	beq.n	80047fa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	885b      	ldrh	r3, [r3, #2]
 80047f0:	8afa      	ldrh	r2, [r7, #22]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d001      	beq.n	80047fa <mem_link_valid+0x6a>
    return 0;
 80047f6:	2300      	movs	r3, #0
 80047f8:	e000      	b.n	80047fc <mem_link_valid+0x6c>
  }
  return 1;
 80047fa:	2301      	movs	r3, #1
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	20005448 	.word	0x20005448

08004808 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d04c      	beq.n	80048b0 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f003 0303 	and.w	r3, r3, #3
 800481c:	2b00      	cmp	r3, #0
 800481e:	d007      	beq.n	8004830 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004820:	4b25      	ldr	r3, [pc, #148]	@ (80048b8 <mem_free+0xb0>)
 8004822:	f240 2273 	movw	r2, #627	@ 0x273
 8004826:	4925      	ldr	r1, [pc, #148]	@ (80048bc <mem_free+0xb4>)
 8004828:	4825      	ldr	r0, [pc, #148]	@ (80048c0 <mem_free+0xb8>)
 800482a:	f00b fdbf 	bl	80103ac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800482e:	e040      	b.n	80048b2 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3b08      	subs	r3, #8
 8004834:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004836:	4b23      	ldr	r3, [pc, #140]	@ (80048c4 <mem_free+0xbc>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	429a      	cmp	r2, r3
 800483e:	d306      	bcc.n	800484e <mem_free+0x46>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f103 020c 	add.w	r2, r3, #12
 8004846:	4b20      	ldr	r3, [pc, #128]	@ (80048c8 <mem_free+0xc0>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d907      	bls.n	800485e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800484e:	4b1a      	ldr	r3, [pc, #104]	@ (80048b8 <mem_free+0xb0>)
 8004850:	f240 227f 	movw	r2, #639	@ 0x27f
 8004854:	491d      	ldr	r1, [pc, #116]	@ (80048cc <mem_free+0xc4>)
 8004856:	481a      	ldr	r0, [pc, #104]	@ (80048c0 <mem_free+0xb8>)
 8004858:	f00b fda8 	bl	80103ac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800485c:	e029      	b.n	80048b2 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	791b      	ldrb	r3, [r3, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d107      	bne.n	8004876 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004866:	4b14      	ldr	r3, [pc, #80]	@ (80048b8 <mem_free+0xb0>)
 8004868:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800486c:	4918      	ldr	r1, [pc, #96]	@ (80048d0 <mem_free+0xc8>)
 800486e:	4814      	ldr	r0, [pc, #80]	@ (80048c0 <mem_free+0xb8>)
 8004870:	f00b fd9c 	bl	80103ac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004874:	e01d      	b.n	80048b2 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f7ff ff8a 	bl	8004790 <mem_link_valid>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d107      	bne.n	8004892 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004882:	4b0d      	ldr	r3, [pc, #52]	@ (80048b8 <mem_free+0xb0>)
 8004884:	f240 2295 	movw	r2, #661	@ 0x295
 8004888:	4912      	ldr	r1, [pc, #72]	@ (80048d4 <mem_free+0xcc>)
 800488a:	480d      	ldr	r0, [pc, #52]	@ (80048c0 <mem_free+0xb8>)
 800488c:	f00b fd8e 	bl	80103ac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004890:	e00f      	b.n	80048b2 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004898:	4b0f      	ldr	r3, [pc, #60]	@ (80048d8 <mem_free+0xd0>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d202      	bcs.n	80048a8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80048a2:	4a0d      	ldr	r2, [pc, #52]	@ (80048d8 <mem_free+0xd0>)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f7ff fe93 	bl	80045d4 <plug_holes>
 80048ae:	e000      	b.n	80048b2 <mem_free+0xaa>
    return;
 80048b0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	08011618 	.word	0x08011618
 80048bc:	080116ec 	.word	0x080116ec
 80048c0:	08011660 	.word	0x08011660
 80048c4:	20005444 	.word	0x20005444
 80048c8:	20005448 	.word	0x20005448
 80048cc:	08011710 	.word	0x08011710
 80048d0:	0801172c 	.word	0x0801172c
 80048d4:	08011754 	.word	0x08011754
 80048d8:	2000544c 	.word	0x2000544c

080048dc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	460b      	mov	r3, r1
 80048e6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80048e8:	887b      	ldrh	r3, [r7, #2]
 80048ea:	3303      	adds	r3, #3
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	f023 0303 	bic.w	r3, r3, #3
 80048f2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80048f4:	8bfb      	ldrh	r3, [r7, #30]
 80048f6:	2b0b      	cmp	r3, #11
 80048f8:	d801      	bhi.n	80048fe <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80048fa:	230c      	movs	r3, #12
 80048fc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80048fe:	8bfb      	ldrh	r3, [r7, #30]
 8004900:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004904:	d803      	bhi.n	800490e <mem_trim+0x32>
 8004906:	8bfa      	ldrh	r2, [r7, #30]
 8004908:	887b      	ldrh	r3, [r7, #2]
 800490a:	429a      	cmp	r2, r3
 800490c:	d201      	bcs.n	8004912 <mem_trim+0x36>
    return NULL;
 800490e:	2300      	movs	r3, #0
 8004910:	e0cc      	b.n	8004aac <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004912:	4b68      	ldr	r3, [pc, #416]	@ (8004ab4 <mem_trim+0x1d8>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	429a      	cmp	r2, r3
 800491a:	d304      	bcc.n	8004926 <mem_trim+0x4a>
 800491c:	4b66      	ldr	r3, [pc, #408]	@ (8004ab8 <mem_trim+0x1dc>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	429a      	cmp	r2, r3
 8004924:	d306      	bcc.n	8004934 <mem_trim+0x58>
 8004926:	4b65      	ldr	r3, [pc, #404]	@ (8004abc <mem_trim+0x1e0>)
 8004928:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800492c:	4964      	ldr	r1, [pc, #400]	@ (8004ac0 <mem_trim+0x1e4>)
 800492e:	4865      	ldr	r0, [pc, #404]	@ (8004ac4 <mem_trim+0x1e8>)
 8004930:	f00b fd3c 	bl	80103ac <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004934:	4b5f      	ldr	r3, [pc, #380]	@ (8004ab4 <mem_trim+0x1d8>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	429a      	cmp	r2, r3
 800493c:	d304      	bcc.n	8004948 <mem_trim+0x6c>
 800493e:	4b5e      	ldr	r3, [pc, #376]	@ (8004ab8 <mem_trim+0x1dc>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	429a      	cmp	r2, r3
 8004946:	d301      	bcc.n	800494c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	e0af      	b.n	8004aac <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3b08      	subs	r3, #8
 8004950:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004952:	69b8      	ldr	r0, [r7, #24]
 8004954:	f7ff fe2c 	bl	80045b0 <mem_to_ptr>
 8004958:	4603      	mov	r3, r0
 800495a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	881a      	ldrh	r2, [r3, #0]
 8004960:	8afb      	ldrh	r3, [r7, #22]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	b29b      	uxth	r3, r3
 8004966:	3b08      	subs	r3, #8
 8004968:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800496a:	8bfa      	ldrh	r2, [r7, #30]
 800496c:	8abb      	ldrh	r3, [r7, #20]
 800496e:	429a      	cmp	r2, r3
 8004970:	d906      	bls.n	8004980 <mem_trim+0xa4>
 8004972:	4b52      	ldr	r3, [pc, #328]	@ (8004abc <mem_trim+0x1e0>)
 8004974:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8004978:	4953      	ldr	r1, [pc, #332]	@ (8004ac8 <mem_trim+0x1ec>)
 800497a:	4852      	ldr	r0, [pc, #328]	@ (8004ac4 <mem_trim+0x1e8>)
 800497c:	f00b fd16 	bl	80103ac <iprintf>
  if (newsize > size) {
 8004980:	8bfa      	ldrh	r2, [r7, #30]
 8004982:	8abb      	ldrh	r3, [r7, #20]
 8004984:	429a      	cmp	r2, r3
 8004986:	d901      	bls.n	800498c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004988:	2300      	movs	r3, #0
 800498a:	e08f      	b.n	8004aac <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800498c:	8bfa      	ldrh	r2, [r7, #30]
 800498e:	8abb      	ldrh	r3, [r7, #20]
 8004990:	429a      	cmp	r2, r3
 8004992:	d101      	bne.n	8004998 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	e089      	b.n	8004aac <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	4618      	mov	r0, r3
 800499e:	f7ff fdf5 	bl	800458c <ptr_to_mem>
 80049a2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	791b      	ldrb	r3, [r3, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d13f      	bne.n	8004a2c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80049b4:	d106      	bne.n	80049c4 <mem_trim+0xe8>
 80049b6:	4b41      	ldr	r3, [pc, #260]	@ (8004abc <mem_trim+0x1e0>)
 80049b8:	f240 22f5 	movw	r2, #757	@ 0x2f5
 80049bc:	4943      	ldr	r1, [pc, #268]	@ (8004acc <mem_trim+0x1f0>)
 80049be:	4841      	ldr	r0, [pc, #260]	@ (8004ac4 <mem_trim+0x1e8>)
 80049c0:	f00b fcf4 	bl	80103ac <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	881b      	ldrh	r3, [r3, #0]
 80049c8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80049ca:	8afa      	ldrh	r2, [r7, #22]
 80049cc:	8bfb      	ldrh	r3, [r7, #30]
 80049ce:	4413      	add	r3, r2
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	3308      	adds	r3, #8
 80049d4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80049d6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ad0 <mem_trim+0x1f4>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d106      	bne.n	80049ee <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80049e0:	89fb      	ldrh	r3, [r7, #14]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7ff fdd2 	bl	800458c <ptr_to_mem>
 80049e8:	4603      	mov	r3, r0
 80049ea:	4a39      	ldr	r2, [pc, #228]	@ (8004ad0 <mem_trim+0x1f4>)
 80049ec:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80049ee:	89fb      	ldrh	r3, [r7, #14]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff fdcb 	bl	800458c <ptr_to_mem>
 80049f6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	2200      	movs	r2, #0
 80049fc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	89ba      	ldrh	r2, [r7, #12]
 8004a02:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	8afa      	ldrh	r2, [r7, #22]
 8004a08:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	89fa      	ldrh	r2, [r7, #14]
 8004a0e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	881b      	ldrh	r3, [r3, #0]
 8004a14:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004a18:	d047      	beq.n	8004aaa <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7ff fdb4 	bl	800458c <ptr_to_mem>
 8004a24:	4602      	mov	r2, r0
 8004a26:	89fb      	ldrh	r3, [r7, #14]
 8004a28:	8053      	strh	r3, [r2, #2]
 8004a2a:	e03e      	b.n	8004aaa <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004a2c:	8bfb      	ldrh	r3, [r7, #30]
 8004a2e:	f103 0214 	add.w	r2, r3, #20
 8004a32:	8abb      	ldrh	r3, [r7, #20]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d838      	bhi.n	8004aaa <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004a38:	8afa      	ldrh	r2, [r7, #22]
 8004a3a:	8bfb      	ldrh	r3, [r7, #30]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	3308      	adds	r3, #8
 8004a42:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004a4c:	d106      	bne.n	8004a5c <mem_trim+0x180>
 8004a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004abc <mem_trim+0x1e0>)
 8004a50:	f240 3216 	movw	r2, #790	@ 0x316
 8004a54:	491d      	ldr	r1, [pc, #116]	@ (8004acc <mem_trim+0x1f0>)
 8004a56:	481b      	ldr	r0, [pc, #108]	@ (8004ac4 <mem_trim+0x1e8>)
 8004a58:	f00b fca8 	bl	80103ac <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004a5c:	89fb      	ldrh	r3, [r7, #14]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7ff fd94 	bl	800458c <ptr_to_mem>
 8004a64:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004a66:	4b1a      	ldr	r3, [pc, #104]	@ (8004ad0 <mem_trim+0x1f4>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d202      	bcs.n	8004a76 <mem_trim+0x19a>
      lfree = mem2;
 8004a70:	4a17      	ldr	r2, [pc, #92]	@ (8004ad0 <mem_trim+0x1f4>)
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	881a      	ldrh	r2, [r3, #0]
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	8afa      	ldrh	r2, [r7, #22]
 8004a88:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	89fa      	ldrh	r2, [r7, #14]
 8004a8e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004a98:	d007      	beq.n	8004aaa <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	881b      	ldrh	r3, [r3, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff fd74 	bl	800458c <ptr_to_mem>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	89fb      	ldrh	r3, [r7, #14]
 8004aa8:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004aaa:	687b      	ldr	r3, [r7, #4]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3720      	adds	r7, #32
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	20005444 	.word	0x20005444
 8004ab8:	20005448 	.word	0x20005448
 8004abc:	08011618 	.word	0x08011618
 8004ac0:	08011788 	.word	0x08011788
 8004ac4:	08011660 	.word	0x08011660
 8004ac8:	080117a0 	.word	0x080117a0
 8004acc:	080117c0 	.word	0x080117c0
 8004ad0:	2000544c 	.word	0x2000544c

08004ad4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	4603      	mov	r3, r0
 8004adc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004ade:	88fb      	ldrh	r3, [r7, #6]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <mem_malloc+0x14>
    return NULL;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	e0d9      	b.n	8004c9c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004ae8:	88fb      	ldrh	r3, [r7, #6]
 8004aea:	3303      	adds	r3, #3
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	f023 0303 	bic.w	r3, r3, #3
 8004af2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004af4:	8bbb      	ldrh	r3, [r7, #28]
 8004af6:	2b0b      	cmp	r3, #11
 8004af8:	d801      	bhi.n	8004afe <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004afa:	230c      	movs	r3, #12
 8004afc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004afe:	8bbb      	ldrh	r3, [r7, #28]
 8004b00:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004b04:	d803      	bhi.n	8004b0e <mem_malloc+0x3a>
 8004b06:	8bba      	ldrh	r2, [r7, #28]
 8004b08:	88fb      	ldrh	r3, [r7, #6]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d201      	bcs.n	8004b12 <mem_malloc+0x3e>
    return NULL;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	e0c4      	b.n	8004c9c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004b12:	4b64      	ldr	r3, [pc, #400]	@ (8004ca4 <mem_malloc+0x1d0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff fd4a 	bl	80045b0 <mem_to_ptr>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	83fb      	strh	r3, [r7, #30]
 8004b20:	e0b4      	b.n	8004c8c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004b22:	8bfb      	ldrh	r3, [r7, #30]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7ff fd31 	bl	800458c <ptr_to_mem>
 8004b2a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	791b      	ldrb	r3, [r3, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f040 80a4 	bne.w	8004c7e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	8bfb      	ldrh	r3, [r7, #30]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	f1a3 0208 	sub.w	r2, r3, #8
 8004b44:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004b46:	429a      	cmp	r2, r3
 8004b48:	f0c0 8099 	bcc.w	8004c7e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	461a      	mov	r2, r3
 8004b52:	8bfb      	ldrh	r3, [r7, #30]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	f1a3 0208 	sub.w	r2, r3, #8
 8004b5a:	8bbb      	ldrh	r3, [r7, #28]
 8004b5c:	3314      	adds	r3, #20
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d333      	bcc.n	8004bca <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004b62:	8bfa      	ldrh	r2, [r7, #30]
 8004b64:	8bbb      	ldrh	r3, [r7, #28]
 8004b66:	4413      	add	r3, r2
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	3308      	adds	r3, #8
 8004b6c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004b6e:	8a7b      	ldrh	r3, [r7, #18]
 8004b70:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004b74:	d106      	bne.n	8004b84 <mem_malloc+0xb0>
 8004b76:	4b4c      	ldr	r3, [pc, #304]	@ (8004ca8 <mem_malloc+0x1d4>)
 8004b78:	f240 3287 	movw	r2, #903	@ 0x387
 8004b7c:	494b      	ldr	r1, [pc, #300]	@ (8004cac <mem_malloc+0x1d8>)
 8004b7e:	484c      	ldr	r0, [pc, #304]	@ (8004cb0 <mem_malloc+0x1dc>)
 8004b80:	f00b fc14 	bl	80103ac <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004b84:	8a7b      	ldrh	r3, [r7, #18]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff fd00 	bl	800458c <ptr_to_mem>
 8004b8c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	881a      	ldrh	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8bfa      	ldrh	r2, [r7, #30]
 8004ba0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	8a7a      	ldrh	r2, [r7, #18]
 8004ba6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	2201      	movs	r2, #1
 8004bac:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004bb6:	d00b      	beq.n	8004bd0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7ff fce5 	bl	800458c <ptr_to_mem>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	8a7b      	ldrh	r3, [r7, #18]
 8004bc6:	8053      	strh	r3, [r2, #2]
 8004bc8:	e002      	b.n	8004bd0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004bd0:	4b34      	ldr	r3, [pc, #208]	@ (8004ca4 <mem_malloc+0x1d0>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d127      	bne.n	8004c2a <mem_malloc+0x156>
          struct mem *cur = lfree;
 8004bda:	4b32      	ldr	r3, [pc, #200]	@ (8004ca4 <mem_malloc+0x1d0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004be0:	e005      	b.n	8004bee <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	881b      	ldrh	r3, [r3, #0]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff fcd0 	bl	800458c <ptr_to_mem>
 8004bec:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	791b      	ldrb	r3, [r3, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d004      	beq.n	8004c00 <mem_malloc+0x12c>
 8004bf6:	4b2f      	ldr	r3, [pc, #188]	@ (8004cb4 <mem_malloc+0x1e0>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d1f0      	bne.n	8004be2 <mem_malloc+0x10e>
          }
          lfree = cur;
 8004c00:	4a28      	ldr	r2, [pc, #160]	@ (8004ca4 <mem_malloc+0x1d0>)
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004c06:	4b27      	ldr	r3, [pc, #156]	@ (8004ca4 <mem_malloc+0x1d0>)
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	4b2a      	ldr	r3, [pc, #168]	@ (8004cb4 <mem_malloc+0x1e0>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d00b      	beq.n	8004c2a <mem_malloc+0x156>
 8004c12:	4b24      	ldr	r3, [pc, #144]	@ (8004ca4 <mem_malloc+0x1d0>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	791b      	ldrb	r3, [r3, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d006      	beq.n	8004c2a <mem_malloc+0x156>
 8004c1c:	4b22      	ldr	r3, [pc, #136]	@ (8004ca8 <mem_malloc+0x1d4>)
 8004c1e:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8004c22:	4925      	ldr	r1, [pc, #148]	@ (8004cb8 <mem_malloc+0x1e4>)
 8004c24:	4822      	ldr	r0, [pc, #136]	@ (8004cb0 <mem_malloc+0x1dc>)
 8004c26:	f00b fbc1 	bl	80103ac <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004c2a:	8bba      	ldrh	r2, [r7, #28]
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	4413      	add	r3, r2
 8004c30:	3308      	adds	r3, #8
 8004c32:	4a20      	ldr	r2, [pc, #128]	@ (8004cb4 <mem_malloc+0x1e0>)
 8004c34:	6812      	ldr	r2, [r2, #0]
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d906      	bls.n	8004c48 <mem_malloc+0x174>
 8004c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ca8 <mem_malloc+0x1d4>)
 8004c3c:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8004c40:	491e      	ldr	r1, [pc, #120]	@ (8004cbc <mem_malloc+0x1e8>)
 8004c42:	481b      	ldr	r0, [pc, #108]	@ (8004cb0 <mem_malloc+0x1dc>)
 8004c44:	f00b fbb2 	bl	80103ac <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d006      	beq.n	8004c60 <mem_malloc+0x18c>
 8004c52:	4b15      	ldr	r3, [pc, #84]	@ (8004ca8 <mem_malloc+0x1d4>)
 8004c54:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8004c58:	4919      	ldr	r1, [pc, #100]	@ (8004cc0 <mem_malloc+0x1ec>)
 8004c5a:	4815      	ldr	r0, [pc, #84]	@ (8004cb0 <mem_malloc+0x1dc>)
 8004c5c:	f00b fba6 	bl	80103ac <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d006      	beq.n	8004c78 <mem_malloc+0x1a4>
 8004c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8004ca8 <mem_malloc+0x1d4>)
 8004c6c:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8004c70:	4914      	ldr	r1, [pc, #80]	@ (8004cc4 <mem_malloc+0x1f0>)
 8004c72:	480f      	ldr	r0, [pc, #60]	@ (8004cb0 <mem_malloc+0x1dc>)
 8004c74:	f00b fb9a 	bl	80103ac <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	3308      	adds	r3, #8
 8004c7c:	e00e      	b.n	8004c9c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8004c7e:	8bfb      	ldrh	r3, [r7, #30]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7ff fc83 	bl	800458c <ptr_to_mem>
 8004c86:	4603      	mov	r3, r0
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004c8c:	8bfa      	ldrh	r2, [r7, #30]
 8004c8e:	8bbb      	ldrh	r3, [r7, #28]
 8004c90:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8004c94:	429a      	cmp	r2, r3
 8004c96:	f4ff af44 	bcc.w	8004b22 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3720      	adds	r7, #32
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	2000544c 	.word	0x2000544c
 8004ca8:	08011618 	.word	0x08011618
 8004cac:	080117c0 	.word	0x080117c0
 8004cb0:	08011660 	.word	0x08011660
 8004cb4:	20005448 	.word	0x20005448
 8004cb8:	080117d4 	.word	0x080117d4
 8004cbc:	080117f0 	.word	0x080117f0
 8004cc0:	08011820 	.word	0x08011820
 8004cc4:	08011850 	.word	0x08011850

08004cc8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	3303      	adds	r3, #3
 8004cde:	f023 0303 	bic.w	r3, r3, #3
 8004ce2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	e011      	b.n	8004d0e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	461a      	mov	r2, r3
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	4413      	add	r3, r2
 8004d06:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	885b      	ldrh	r3, [r3, #2]
 8004d12:	461a      	mov	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4293      	cmp	r3, r2
 8004d18:	dbe7      	blt.n	8004cea <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004d1a:	bf00      	nop
 8004d1c:	bf00      	nop
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004d2e:	2300      	movs	r3, #0
 8004d30:	80fb      	strh	r3, [r7, #6]
 8004d32:	e009      	b.n	8004d48 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004d34:	88fb      	ldrh	r3, [r7, #6]
 8004d36:	4a08      	ldr	r2, [pc, #32]	@ (8004d58 <memp_init+0x30>)
 8004d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7ff ffc3 	bl	8004cc8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004d42:	88fb      	ldrh	r3, [r7, #6]
 8004d44:	3301      	adds	r3, #1
 8004d46:	80fb      	strh	r3, [r7, #6]
 8004d48:	88fb      	ldrh	r3, [r7, #6]
 8004d4a:	2b08      	cmp	r3, #8
 8004d4c:	d9f2      	bls.n	8004d34 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004d4e:	bf00      	nop
 8004d50:	bf00      	nop
 8004d52:	3708      	adds	r7, #8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	08014150 	.word	0x08014150

08004d5c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d012      	beq.n	8004d98 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	6812      	ldr	r2, [r2, #0]
 8004d7a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f003 0303 	and.w	r3, r3, #3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d006      	beq.n	8004d94 <do_memp_malloc_pool+0x38>
 8004d86:	4b07      	ldr	r3, [pc, #28]	@ (8004da4 <do_memp_malloc_pool+0x48>)
 8004d88:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8004d8c:	4906      	ldr	r1, [pc, #24]	@ (8004da8 <do_memp_malloc_pool+0x4c>)
 8004d8e:	4807      	ldr	r0, [pc, #28]	@ (8004dac <do_memp_malloc_pool+0x50>)
 8004d90:	f00b fb0c 	bl	80103ac <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	e000      	b.n	8004d9a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	08011874 	.word	0x08011874
 8004da8:	080118a4 	.word	0x080118a4
 8004dac:	080118c8 	.word	0x080118c8

08004db0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d106      	bne.n	8004dcc <memp_malloc_pool+0x1c>
 8004dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8004de8 <memp_malloc_pool+0x38>)
 8004dc0:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8004dc4:	4909      	ldr	r1, [pc, #36]	@ (8004dec <memp_malloc_pool+0x3c>)
 8004dc6:	480a      	ldr	r0, [pc, #40]	@ (8004df0 <memp_malloc_pool+0x40>)
 8004dc8:	f00b faf0 	bl	80103ac <iprintf>
  if (desc == NULL) {
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <memp_malloc_pool+0x26>
    return NULL;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	e003      	b.n	8004dde <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7ff ffc0 	bl	8004d5c <do_memp_malloc_pool>
 8004ddc:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	08011874 	.word	0x08011874
 8004dec:	080118f0 	.word	0x080118f0
 8004df0:	080118c8 	.word	0x080118c8

08004df4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004dfe:	79fb      	ldrb	r3, [r7, #7]
 8004e00:	2b08      	cmp	r3, #8
 8004e02:	d908      	bls.n	8004e16 <memp_malloc+0x22>
 8004e04:	4b0a      	ldr	r3, [pc, #40]	@ (8004e30 <memp_malloc+0x3c>)
 8004e06:	f240 1257 	movw	r2, #343	@ 0x157
 8004e0a:	490a      	ldr	r1, [pc, #40]	@ (8004e34 <memp_malloc+0x40>)
 8004e0c:	480a      	ldr	r0, [pc, #40]	@ (8004e38 <memp_malloc+0x44>)
 8004e0e:	f00b facd 	bl	80103ac <iprintf>
 8004e12:	2300      	movs	r3, #0
 8004e14:	e008      	b.n	8004e28 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004e16:	79fb      	ldrb	r3, [r7, #7]
 8004e18:	4a08      	ldr	r2, [pc, #32]	@ (8004e3c <memp_malloc+0x48>)
 8004e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7ff ff9c 	bl	8004d5c <do_memp_malloc_pool>
 8004e24:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8004e26:	68fb      	ldr	r3, [r7, #12]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	08011874 	.word	0x08011874
 8004e34:	08011904 	.word	0x08011904
 8004e38:	080118c8 	.word	0x080118c8
 8004e3c:	08014150 	.word	0x08014150

08004e40 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	f003 0303 	and.w	r3, r3, #3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d006      	beq.n	8004e62 <do_memp_free_pool+0x22>
 8004e54:	4b0a      	ldr	r3, [pc, #40]	@ (8004e80 <do_memp_free_pool+0x40>)
 8004e56:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8004e5a:	490a      	ldr	r1, [pc, #40]	@ (8004e84 <do_memp_free_pool+0x44>)
 8004e5c:	480a      	ldr	r0, [pc, #40]	@ (8004e88 <do_memp_free_pool+0x48>)
 8004e5e:	f00b faa5 	bl	80103ac <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004e78:	bf00      	nop
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	08011874 	.word	0x08011874
 8004e84:	08011924 	.word	0x08011924
 8004e88:	080118c8 	.word	0x080118c8

08004e8c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d106      	bne.n	8004eaa <memp_free_pool+0x1e>
 8004e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec8 <memp_free_pool+0x3c>)
 8004e9e:	f240 1295 	movw	r2, #405	@ 0x195
 8004ea2:	490a      	ldr	r1, [pc, #40]	@ (8004ecc <memp_free_pool+0x40>)
 8004ea4:	480a      	ldr	r0, [pc, #40]	@ (8004ed0 <memp_free_pool+0x44>)
 8004ea6:	f00b fa81 	bl	80103ac <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d007      	beq.n	8004ec0 <memp_free_pool+0x34>
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d004      	beq.n	8004ec0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8004eb6:	6839      	ldr	r1, [r7, #0]
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f7ff ffc1 	bl	8004e40 <do_memp_free_pool>
 8004ebe:	e000      	b.n	8004ec2 <memp_free_pool+0x36>
    return;
 8004ec0:	bf00      	nop
}
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	08011874 	.word	0x08011874
 8004ecc:	080118f0 	.word	0x080118f0
 8004ed0:	080118c8 	.word	0x080118c8

08004ed4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	4603      	mov	r3, r0
 8004edc:	6039      	str	r1, [r7, #0]
 8004ede:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004ee0:	79fb      	ldrb	r3, [r7, #7]
 8004ee2:	2b08      	cmp	r3, #8
 8004ee4:	d907      	bls.n	8004ef6 <memp_free+0x22>
 8004ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8004f18 <memp_free+0x44>)
 8004ee8:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8004eec:	490b      	ldr	r1, [pc, #44]	@ (8004f1c <memp_free+0x48>)
 8004eee:	480c      	ldr	r0, [pc, #48]	@ (8004f20 <memp_free+0x4c>)
 8004ef0:	f00b fa5c 	bl	80103ac <iprintf>
 8004ef4:	e00c      	b.n	8004f10 <memp_free+0x3c>

  if (mem == NULL) {
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d008      	beq.n	8004f0e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004efc:	79fb      	ldrb	r3, [r7, #7]
 8004efe:	4a09      	ldr	r2, [pc, #36]	@ (8004f24 <memp_free+0x50>)
 8004f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f04:	6839      	ldr	r1, [r7, #0]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7ff ff9a 	bl	8004e40 <do_memp_free_pool>
 8004f0c:	e000      	b.n	8004f10 <memp_free+0x3c>
    return;
 8004f0e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	08011874 	.word	0x08011874
 8004f1c:	08011944 	.word	0x08011944
 8004f20:	080118c8 	.word	0x080118c8
 8004f24:	08014150 	.word	0x08014150

08004f28 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004f2c:	bf00      	nop
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
	...

08004f38 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
 8004f44:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d108      	bne.n	8004f5e <netif_add+0x26>
 8004f4c:	4b57      	ldr	r3, [pc, #348]	@ (80050ac <netif_add+0x174>)
 8004f4e:	f240 1227 	movw	r2, #295	@ 0x127
 8004f52:	4957      	ldr	r1, [pc, #348]	@ (80050b0 <netif_add+0x178>)
 8004f54:	4857      	ldr	r0, [pc, #348]	@ (80050b4 <netif_add+0x17c>)
 8004f56:	f00b fa29 	bl	80103ac <iprintf>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	e0a2      	b.n	80050a4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d108      	bne.n	8004f76 <netif_add+0x3e>
 8004f64:	4b51      	ldr	r3, [pc, #324]	@ (80050ac <netif_add+0x174>)
 8004f66:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8004f6a:	4953      	ldr	r1, [pc, #332]	@ (80050b8 <netif_add+0x180>)
 8004f6c:	4851      	ldr	r0, [pc, #324]	@ (80050b4 <netif_add+0x17c>)
 8004f6e:	f00b fa1d 	bl	80103ac <iprintf>
 8004f72:	2300      	movs	r3, #0
 8004f74:	e096      	b.n	80050a4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8004f7c:	4b4f      	ldr	r3, [pc, #316]	@ (80050bc <netif_add+0x184>)
 8004f7e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8004f86:	4b4d      	ldr	r3, [pc, #308]	@ (80050bc <netif_add+0x184>)
 8004f88:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004f90:	4b4a      	ldr	r3, [pc, #296]	@ (80050bc <netif_add+0x184>)
 8004f92:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4a45      	ldr	r2, [pc, #276]	@ (80050c0 <netif_add+0x188>)
 8004faa:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6a3a      	ldr	r2, [r7, #32]
 8004fc4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8004fc6:	4b3f      	ldr	r3, [pc, #252]	@ (80050c4 <netif_add+0x18c>)
 8004fc8:	781a      	ldrb	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fd4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	68b9      	ldr	r1, [r7, #8]
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 f913 	bl	8005208 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	4798      	blx	r3
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <netif_add+0xba>
    return NULL;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	e058      	b.n	80050a4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004ff8:	2bff      	cmp	r3, #255	@ 0xff
 8004ffa:	d103      	bne.n	8005004 <netif_add+0xcc>
        netif->num = 0;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8005004:	2300      	movs	r3, #0
 8005006:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005008:	4b2f      	ldr	r3, [pc, #188]	@ (80050c8 <netif_add+0x190>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	617b      	str	r3, [r7, #20]
 800500e:	e02b      	b.n	8005068 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	429a      	cmp	r2, r3
 8005016:	d106      	bne.n	8005026 <netif_add+0xee>
 8005018:	4b24      	ldr	r3, [pc, #144]	@ (80050ac <netif_add+0x174>)
 800501a:	f240 128b 	movw	r2, #395	@ 0x18b
 800501e:	492b      	ldr	r1, [pc, #172]	@ (80050cc <netif_add+0x194>)
 8005020:	4824      	ldr	r0, [pc, #144]	@ (80050b4 <netif_add+0x17c>)
 8005022:	f00b f9c3 	bl	80103ac <iprintf>
        num_netifs++;
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	3301      	adds	r3, #1
 800502a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	2bff      	cmp	r3, #255	@ 0xff
 8005030:	dd06      	ble.n	8005040 <netif_add+0x108>
 8005032:	4b1e      	ldr	r3, [pc, #120]	@ (80050ac <netif_add+0x174>)
 8005034:	f240 128d 	movw	r2, #397	@ 0x18d
 8005038:	4925      	ldr	r1, [pc, #148]	@ (80050d0 <netif_add+0x198>)
 800503a:	481e      	ldr	r0, [pc, #120]	@ (80050b4 <netif_add+0x17c>)
 800503c:	f00b f9b6 	bl	80103ac <iprintf>
        if (netif2->num == netif->num) {
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800504c:	429a      	cmp	r2, r3
 800504e:	d108      	bne.n	8005062 <netif_add+0x12a>
          netif->num++;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005056:	3301      	adds	r3, #1
 8005058:	b2da      	uxtb	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8005060:	e005      	b.n	800506e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	617b      	str	r3, [r7, #20]
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1d0      	bne.n	8005010 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1be      	bne.n	8004ff2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800507a:	2bfe      	cmp	r3, #254	@ 0xfe
 800507c:	d103      	bne.n	8005086 <netif_add+0x14e>
    netif_num = 0;
 800507e:	4b11      	ldr	r3, [pc, #68]	@ (80050c4 <netif_add+0x18c>)
 8005080:	2200      	movs	r2, #0
 8005082:	701a      	strb	r2, [r3, #0]
 8005084:	e006      	b.n	8005094 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800508c:	3301      	adds	r3, #1
 800508e:	b2da      	uxtb	r2, r3
 8005090:	4b0c      	ldr	r3, [pc, #48]	@ (80050c4 <netif_add+0x18c>)
 8005092:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005094:	4b0c      	ldr	r3, [pc, #48]	@ (80050c8 <netif_add+0x190>)
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800509c:	4a0a      	ldr	r2, [pc, #40]	@ (80050c8 <netif_add+0x190>)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80050a2:	68fb      	ldr	r3, [r7, #12]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3718      	adds	r7, #24
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	08011960 	.word	0x08011960
 80050b0:	080119f4 	.word	0x080119f4
 80050b4:	080119b0 	.word	0x080119b0
 80050b8:	08011a10 	.word	0x08011a10
 80050bc:	080141b4 	.word	0x080141b4
 80050c0:	080054e3 	.word	0x080054e3
 80050c4:	20008344 	.word	0x20008344
 80050c8:	2000833c 	.word	0x2000833c
 80050cc:	08011a34 	.word	0x08011a34
 80050d0:	08011a48 	.word	0x08011a48

080050d4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80050de:	6839      	ldr	r1, [r7, #0]
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f002 fd41 	bl	8007b68 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80050e6:	6839      	ldr	r1, [r7, #0]
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f007 fa77 	bl	800c5dc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80050ee:	bf00      	nop
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
	...

080050f8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d106      	bne.n	8005118 <netif_do_set_ipaddr+0x20>
 800510a:	4b1d      	ldr	r3, [pc, #116]	@ (8005180 <netif_do_set_ipaddr+0x88>)
 800510c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8005110:	491c      	ldr	r1, [pc, #112]	@ (8005184 <netif_do_set_ipaddr+0x8c>)
 8005112:	481d      	ldr	r0, [pc, #116]	@ (8005188 <netif_do_set_ipaddr+0x90>)
 8005114:	f00b f94a 	bl	80103ac <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d106      	bne.n	800512c <netif_do_set_ipaddr+0x34>
 800511e:	4b18      	ldr	r3, [pc, #96]	@ (8005180 <netif_do_set_ipaddr+0x88>)
 8005120:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8005124:	4917      	ldr	r1, [pc, #92]	@ (8005184 <netif_do_set_ipaddr+0x8c>)
 8005126:	4818      	ldr	r0, [pc, #96]	@ (8005188 <netif_do_set_ipaddr+0x90>)
 8005128:	f00b f940 	bl	80103ac <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	3304      	adds	r3, #4
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d01c      	beq.n	8005174 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	3304      	adds	r3, #4
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800514a:	f107 0314 	add.w	r3, r7, #20
 800514e:	4619      	mov	r1, r3
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7ff ffbf 	bl	80050d4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <netif_do_set_ipaddr+0x6a>
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	e000      	b.n	8005164 <netif_do_set_ipaddr+0x6c>
 8005162:	2300      	movs	r3, #0
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005168:	2101      	movs	r1, #1
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 f8d2 	bl	8005314 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005170:	2301      	movs	r3, #1
 8005172:	e000      	b.n	8005176 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3718      	adds	r7, #24
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	08011960 	.word	0x08011960
 8005184:	08011a78 	.word	0x08011a78
 8005188:	080119b0 	.word	0x080119b0

0800518c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	3308      	adds	r3, #8
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d00a      	beq.n	80051bc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <netif_do_set_netmask+0x26>
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	e000      	b.n	80051b4 <netif_do_set_netmask+0x28>
 80051b2:	2300      	movs	r3, #0
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80051b8:	2301      	movs	r3, #1
 80051ba:	e000      	b.n	80051be <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b085      	sub	sp, #20
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	60b9      	str	r1, [r7, #8]
 80051d4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	330c      	adds	r3, #12
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d00a      	beq.n	80051fa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <netif_do_set_gw+0x26>
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	e000      	b.n	80051f2 <netif_do_set_gw+0x28>
 80051f0:	2300      	movs	r3, #0
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80051f6:	2301      	movs	r3, #1
 80051f8:	e000      	b.n	80051fc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b088      	sub	sp, #32
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005216:	2300      	movs	r3, #0
 8005218:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800521a:	2300      	movs	r3, #0
 800521c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d101      	bne.n	8005228 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005224:	4b1c      	ldr	r3, [pc, #112]	@ (8005298 <netif_set_addr+0x90>)
 8005226:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800522e:	4b1a      	ldr	r3, [pc, #104]	@ (8005298 <netif_set_addr+0x90>)
 8005230:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005238:	4b17      	ldr	r3, [pc, #92]	@ (8005298 <netif_set_addr+0x90>)
 800523a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <netif_set_addr+0x42>
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <netif_set_addr+0x46>
 800524a:	2301      	movs	r3, #1
 800524c:	e000      	b.n	8005250 <netif_set_addr+0x48>
 800524e:	2300      	movs	r3, #0
 8005250:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d006      	beq.n	8005266 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005258:	f107 0310 	add.w	r3, r7, #16
 800525c:	461a      	mov	r2, r3
 800525e:	68b9      	ldr	r1, [r7, #8]
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f7ff ff49 	bl	80050f8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8005266:	69fa      	ldr	r2, [r7, #28]
 8005268:	6879      	ldr	r1, [r7, #4]
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f7ff ff8e 	bl	800518c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	6839      	ldr	r1, [r7, #0]
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f7ff ffa8 	bl	80051ca <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d106      	bne.n	800528e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005280:	f107 0310 	add.w	r3, r7, #16
 8005284:	461a      	mov	r2, r3
 8005286:	68b9      	ldr	r1, [r7, #8]
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f7ff ff35 	bl	80050f8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800528e:	bf00      	nop
 8005290:	3720      	adds	r7, #32
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	080141b4 	.word	0x080141b4

0800529c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80052a4:	4a04      	ldr	r2, [pc, #16]	@ (80052b8 <netif_set_default+0x1c>)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80052aa:	bf00      	nop
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	20008340 	.word	0x20008340

080052bc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d107      	bne.n	80052da <netif_set_up+0x1e>
 80052ca:	4b0f      	ldr	r3, [pc, #60]	@ (8005308 <netif_set_up+0x4c>)
 80052cc:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80052d0:	490e      	ldr	r1, [pc, #56]	@ (800530c <netif_set_up+0x50>)
 80052d2:	480f      	ldr	r0, [pc, #60]	@ (8005310 <netif_set_up+0x54>)
 80052d4:	f00b f86a 	bl	80103ac <iprintf>
 80052d8:	e013      	b.n	8005302 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10c      	bne.n	8005302 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80052ee:	f043 0301 	orr.w	r3, r3, #1
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80052fa:	2103      	movs	r1, #3
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 f809 	bl	8005314 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	08011960 	.word	0x08011960
 800530c:	08011ae8 	.word	0x08011ae8
 8005310:	080119b0 	.word	0x080119b0

08005314 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	460b      	mov	r3, r1
 800531e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d106      	bne.n	8005334 <netif_issue_reports+0x20>
 8005326:	4b18      	ldr	r3, [pc, #96]	@ (8005388 <netif_issue_reports+0x74>)
 8005328:	f240 326d 	movw	r2, #877	@ 0x36d
 800532c:	4917      	ldr	r1, [pc, #92]	@ (800538c <netif_issue_reports+0x78>)
 800532e:	4818      	ldr	r0, [pc, #96]	@ (8005390 <netif_issue_reports+0x7c>)
 8005330:	f00b f83c 	bl	80103ac <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800533a:	f003 0304 	and.w	r3, r3, #4
 800533e:	2b00      	cmp	r3, #0
 8005340:	d01e      	beq.n	8005380 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005348:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800534c:	2b00      	cmp	r3, #0
 800534e:	d017      	beq.n	8005380 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005350:	78fb      	ldrb	r3, [r7, #3]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d013      	beq.n	8005382 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	3304      	adds	r3, #4
 800535e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00e      	beq.n	8005382 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800536a:	f003 0308 	and.w	r3, r3, #8
 800536e:	2b00      	cmp	r3, #0
 8005370:	d007      	beq.n	8005382 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	3304      	adds	r3, #4
 8005376:	4619      	mov	r1, r3
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f008 f899 	bl	800d4b0 <etharp_request>
 800537e:	e000      	b.n	8005382 <netif_issue_reports+0x6e>
    return;
 8005380:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	08011960 	.word	0x08011960
 800538c:	08011b04 	.word	0x08011b04
 8005390:	080119b0 	.word	0x080119b0

08005394 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d107      	bne.n	80053b2 <netif_set_down+0x1e>
 80053a2:	4b12      	ldr	r3, [pc, #72]	@ (80053ec <netif_set_down+0x58>)
 80053a4:	f240 329b 	movw	r2, #923	@ 0x39b
 80053a8:	4911      	ldr	r1, [pc, #68]	@ (80053f0 <netif_set_down+0x5c>)
 80053aa:	4812      	ldr	r0, [pc, #72]	@ (80053f4 <netif_set_down+0x60>)
 80053ac:	f00a fffe 	bl	80103ac <iprintf>
 80053b0:	e019      	b.n	80053e6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d012      	beq.n	80053e6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80053c6:	f023 0301 	bic.w	r3, r3, #1
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80053d8:	f003 0308 	and.w	r3, r3, #8
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d002      	beq.n	80053e6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f007 fc23 	bl	800cc2c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	08011960 	.word	0x08011960
 80053f0:	08011b28 	.word	0x08011b28
 80053f4:	080119b0 	.word	0x080119b0

080053f8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d107      	bne.n	8005416 <netif_set_link_up+0x1e>
 8005406:	4b13      	ldr	r3, [pc, #76]	@ (8005454 <netif_set_link_up+0x5c>)
 8005408:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800540c:	4912      	ldr	r1, [pc, #72]	@ (8005458 <netif_set_link_up+0x60>)
 800540e:	4813      	ldr	r0, [pc, #76]	@ (800545c <netif_set_link_up+0x64>)
 8005410:	f00a ffcc 	bl	80103ac <iprintf>
 8005414:	e01b      	b.n	800544e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	d114      	bne.n	800544e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800542a:	f043 0304 	orr.w	r3, r3, #4
 800542e:	b2da      	uxtb	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005436:	2103      	movs	r1, #3
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f7ff ff6b 	bl	8005314 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <netif_set_link_up+0x56>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800544e:	3708      	adds	r7, #8
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	08011960 	.word	0x08011960
 8005458:	08011b48 	.word	0x08011b48
 800545c:	080119b0 	.word	0x080119b0

08005460 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d107      	bne.n	800547e <netif_set_link_down+0x1e>
 800546e:	4b11      	ldr	r3, [pc, #68]	@ (80054b4 <netif_set_link_down+0x54>)
 8005470:	f240 4206 	movw	r2, #1030	@ 0x406
 8005474:	4910      	ldr	r1, [pc, #64]	@ (80054b8 <netif_set_link_down+0x58>)
 8005476:	4811      	ldr	r0, [pc, #68]	@ (80054bc <netif_set_link_down+0x5c>)
 8005478:	f00a ff98 	bl	80103ac <iprintf>
 800547c:	e017      	b.n	80054ae <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b00      	cmp	r3, #0
 800548a:	d010      	beq.n	80054ae <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005492:	f023 0304 	bic.w	r3, r3, #4
 8005496:	b2da      	uxtb	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <netif_set_link_down+0x4e>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	08011960 	.word	0x08011960
 80054b8:	08011b6c 	.word	0x08011b6c
 80054bc:	080119b0 	.word	0x080119b0

080054c0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	61da      	str	r2, [r3, #28]
  }
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b085      	sub	sp, #20
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	60f8      	str	r0, [r7, #12]
 80054ea:	60b9      	str	r1, [r7, #8]
 80054ec:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80054ee:	f06f 030b 	mvn.w	r3, #11
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
	...

08005500 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	4603      	mov	r3, r0
 8005508:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800550a:	79fb      	ldrb	r3, [r7, #7]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d013      	beq.n	8005538 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005510:	4b0d      	ldr	r3, [pc, #52]	@ (8005548 <netif_get_by_index+0x48>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	60fb      	str	r3, [r7, #12]
 8005516:	e00c      	b.n	8005532 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800551e:	3301      	adds	r3, #1
 8005520:	b2db      	uxtb	r3, r3
 8005522:	79fa      	ldrb	r2, [r7, #7]
 8005524:	429a      	cmp	r2, r3
 8005526:	d101      	bne.n	800552c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	e006      	b.n	800553a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	60fb      	str	r3, [r7, #12]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1ef      	bne.n	8005518 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	2000833c 	.word	0x2000833c

0800554c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005552:	4b0c      	ldr	r3, [pc, #48]	@ (8005584 <pbuf_free_ooseq+0x38>)
 8005554:	2200      	movs	r2, #0
 8005556:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005558:	4b0b      	ldr	r3, [pc, #44]	@ (8005588 <pbuf_free_ooseq+0x3c>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	607b      	str	r3, [r7, #4]
 800555e:	e00a      	b.n	8005576 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005564:	2b00      	cmp	r3, #0
 8005566:	d003      	beq.n	8005570 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f002 fb3b 	bl	8007be4 <tcp_free_ooseq>
      return;
 800556e:	e005      	b.n	800557c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	607b      	str	r3, [r7, #4]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1f1      	bne.n	8005560 <pbuf_free_ooseq+0x14>
    }
  }
}
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	20008345 	.word	0x20008345
 8005588:	20008354 	.word	0x20008354

0800558c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005590:	4b03      	ldr	r3, [pc, #12]	@ (80055a0 <pbuf_pool_is_empty+0x14>)
 8005592:	2201      	movs	r2, #1
 8005594:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005596:	bf00      	nop
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	20008345 	.word	0x20008345

080055a4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	4611      	mov	r1, r2
 80055b0:	461a      	mov	r2, r3
 80055b2:	460b      	mov	r3, r1
 80055b4:	80fb      	strh	r3, [r7, #6]
 80055b6:	4613      	mov	r3, r2
 80055b8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	88fa      	ldrh	r2, [r7, #6]
 80055ca:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	88ba      	ldrh	r2, [r7, #4]
 80055d0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80055d2:	8b3b      	ldrh	r3, [r7, #24]
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	7f3a      	ldrb	r2, [r7, #28]
 80055de:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2201      	movs	r2, #1
 80055e4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	73da      	strb	r2, [r3, #15]
}
 80055ec:	bf00      	nop
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b08c      	sub	sp, #48	@ 0x30
 80055fc:	af02      	add	r7, sp, #8
 80055fe:	4603      	mov	r3, r0
 8005600:	71fb      	strb	r3, [r7, #7]
 8005602:	460b      	mov	r3, r1
 8005604:	80bb      	strh	r3, [r7, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800560a:	79fb      	ldrb	r3, [r7, #7]
 800560c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800560e:	887b      	ldrh	r3, [r7, #2]
 8005610:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8005614:	d07f      	beq.n	8005716 <pbuf_alloc+0x11e>
 8005616:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800561a:	f300 80c8 	bgt.w	80057ae <pbuf_alloc+0x1b6>
 800561e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8005622:	d010      	beq.n	8005646 <pbuf_alloc+0x4e>
 8005624:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8005628:	f300 80c1 	bgt.w	80057ae <pbuf_alloc+0x1b6>
 800562c:	2b01      	cmp	r3, #1
 800562e:	d002      	beq.n	8005636 <pbuf_alloc+0x3e>
 8005630:	2b41      	cmp	r3, #65	@ 0x41
 8005632:	f040 80bc 	bne.w	80057ae <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005636:	887a      	ldrh	r2, [r7, #2]
 8005638:	88bb      	ldrh	r3, [r7, #4]
 800563a:	4619      	mov	r1, r3
 800563c:	2000      	movs	r0, #0
 800563e:	f000 f8d1 	bl	80057e4 <pbuf_alloc_reference>
 8005642:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8005644:	e0bd      	b.n	80057c2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005646:	2300      	movs	r3, #0
 8005648:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800564a:	2300      	movs	r3, #0
 800564c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800564e:	88bb      	ldrh	r3, [r7, #4]
 8005650:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005652:	2008      	movs	r0, #8
 8005654:	f7ff fbce 	bl	8004df4 <memp_malloc>
 8005658:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d109      	bne.n	8005674 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005660:	f7ff ff94 	bl	800558c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005666:	2b00      	cmp	r3, #0
 8005668:	d002      	beq.n	8005670 <pbuf_alloc+0x78>
            pbuf_free(p);
 800566a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800566c:	f000 faa8 	bl	8005bc0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005670:	2300      	movs	r3, #0
 8005672:	e0a7      	b.n	80057c4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005674:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005676:	3303      	adds	r3, #3
 8005678:	b29b      	uxth	r3, r3
 800567a:	f023 0303 	bic.w	r3, r3, #3
 800567e:	b29b      	uxth	r3, r3
 8005680:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8005684:	b29b      	uxth	r3, r3
 8005686:	8b7a      	ldrh	r2, [r7, #26]
 8005688:	4293      	cmp	r3, r2
 800568a:	bf28      	it	cs
 800568c:	4613      	movcs	r3, r2
 800568e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005690:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005692:	3310      	adds	r3, #16
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	4413      	add	r3, r2
 8005698:	3303      	adds	r3, #3
 800569a:	f023 0303 	bic.w	r3, r3, #3
 800569e:	4618      	mov	r0, r3
 80056a0:	89f9      	ldrh	r1, [r7, #14]
 80056a2:	8b7a      	ldrh	r2, [r7, #26]
 80056a4:	2300      	movs	r3, #0
 80056a6:	9301      	str	r3, [sp, #4]
 80056a8:	887b      	ldrh	r3, [r7, #2]
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	460b      	mov	r3, r1
 80056ae:	4601      	mov	r1, r0
 80056b0:	6938      	ldr	r0, [r7, #16]
 80056b2:	f7ff ff77 	bl	80055a4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d006      	beq.n	80056d0 <pbuf_alloc+0xd8>
 80056c2:	4b42      	ldr	r3, [pc, #264]	@ (80057cc <pbuf_alloc+0x1d4>)
 80056c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056c8:	4941      	ldr	r1, [pc, #260]	@ (80057d0 <pbuf_alloc+0x1d8>)
 80056ca:	4842      	ldr	r0, [pc, #264]	@ (80057d4 <pbuf_alloc+0x1dc>)
 80056cc:	f00a fe6e 	bl	80103ac <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80056d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80056d2:	3303      	adds	r3, #3
 80056d4:	f023 0303 	bic.w	r3, r3, #3
 80056d8:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80056dc:	d106      	bne.n	80056ec <pbuf_alloc+0xf4>
 80056de:	4b3b      	ldr	r3, [pc, #236]	@ (80057cc <pbuf_alloc+0x1d4>)
 80056e0:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80056e4:	493c      	ldr	r1, [pc, #240]	@ (80057d8 <pbuf_alloc+0x1e0>)
 80056e6:	483b      	ldr	r0, [pc, #236]	@ (80057d4 <pbuf_alloc+0x1dc>)
 80056e8:	f00a fe60 	bl	80103ac <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80056ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d102      	bne.n	80056f8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80056f6:	e002      	b.n	80056fe <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005702:	8b7a      	ldrh	r2, [r7, #26]
 8005704:	89fb      	ldrh	r3, [r7, #14]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800570a:	2300      	movs	r3, #0
 800570c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800570e:	8b7b      	ldrh	r3, [r7, #26]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d19e      	bne.n	8005652 <pbuf_alloc+0x5a>
      break;
 8005714:	e055      	b.n	80057c2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005716:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005718:	3303      	adds	r3, #3
 800571a:	b29b      	uxth	r3, r3
 800571c:	f023 0303 	bic.w	r3, r3, #3
 8005720:	b29a      	uxth	r2, r3
 8005722:	88bb      	ldrh	r3, [r7, #4]
 8005724:	3303      	adds	r3, #3
 8005726:	b29b      	uxth	r3, r3
 8005728:	f023 0303 	bic.w	r3, r3, #3
 800572c:	b29b      	uxth	r3, r3
 800572e:	4413      	add	r3, r2
 8005730:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005732:	8b3b      	ldrh	r3, [r7, #24]
 8005734:	3310      	adds	r3, #16
 8005736:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005738:	8b3a      	ldrh	r2, [r7, #24]
 800573a:	88bb      	ldrh	r3, [r7, #4]
 800573c:	3303      	adds	r3, #3
 800573e:	f023 0303 	bic.w	r3, r3, #3
 8005742:	429a      	cmp	r2, r3
 8005744:	d306      	bcc.n	8005754 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005746:	8afa      	ldrh	r2, [r7, #22]
 8005748:	88bb      	ldrh	r3, [r7, #4]
 800574a:	3303      	adds	r3, #3
 800574c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005750:	429a      	cmp	r2, r3
 8005752:	d201      	bcs.n	8005758 <pbuf_alloc+0x160>
        return NULL;
 8005754:	2300      	movs	r3, #0
 8005756:	e035      	b.n	80057c4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005758:	8afb      	ldrh	r3, [r7, #22]
 800575a:	4618      	mov	r0, r3
 800575c:	f7ff f9ba 	bl	8004ad4 <mem_malloc>
 8005760:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8005762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <pbuf_alloc+0x174>
        return NULL;
 8005768:	2300      	movs	r3, #0
 800576a:	e02b      	b.n	80057c4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800576c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800576e:	3310      	adds	r3, #16
 8005770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005772:	4413      	add	r3, r2
 8005774:	3303      	adds	r3, #3
 8005776:	f023 0303 	bic.w	r3, r3, #3
 800577a:	4618      	mov	r0, r3
 800577c:	88b9      	ldrh	r1, [r7, #4]
 800577e:	88ba      	ldrh	r2, [r7, #4]
 8005780:	2300      	movs	r3, #0
 8005782:	9301      	str	r3, [sp, #4]
 8005784:	887b      	ldrh	r3, [r7, #2]
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	460b      	mov	r3, r1
 800578a:	4601      	mov	r1, r0
 800578c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800578e:	f7ff ff09 	bl	80055a4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d010      	beq.n	80057c0 <pbuf_alloc+0x1c8>
 800579e:	4b0b      	ldr	r3, [pc, #44]	@ (80057cc <pbuf_alloc+0x1d4>)
 80057a0:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80057a4:	490d      	ldr	r1, [pc, #52]	@ (80057dc <pbuf_alloc+0x1e4>)
 80057a6:	480b      	ldr	r0, [pc, #44]	@ (80057d4 <pbuf_alloc+0x1dc>)
 80057a8:	f00a fe00 	bl	80103ac <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80057ac:	e008      	b.n	80057c0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80057ae:	4b07      	ldr	r3, [pc, #28]	@ (80057cc <pbuf_alloc+0x1d4>)
 80057b0:	f240 1227 	movw	r2, #295	@ 0x127
 80057b4:	490a      	ldr	r1, [pc, #40]	@ (80057e0 <pbuf_alloc+0x1e8>)
 80057b6:	4807      	ldr	r0, [pc, #28]	@ (80057d4 <pbuf_alloc+0x1dc>)
 80057b8:	f00a fdf8 	bl	80103ac <iprintf>
      return NULL;
 80057bc:	2300      	movs	r3, #0
 80057be:	e001      	b.n	80057c4 <pbuf_alloc+0x1cc>
      break;
 80057c0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80057c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3728      	adds	r7, #40	@ 0x28
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	08011b90 	.word	0x08011b90
 80057d0:	08011bc0 	.word	0x08011bc0
 80057d4:	08011bf0 	.word	0x08011bf0
 80057d8:	08011c18 	.word	0x08011c18
 80057dc:	08011c4c 	.word	0x08011c4c
 80057e0:	08011c78 	.word	0x08011c78

080057e4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af02      	add	r7, sp, #8
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	460b      	mov	r3, r1
 80057ee:	807b      	strh	r3, [r7, #2]
 80057f0:	4613      	mov	r3, r2
 80057f2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80057f4:	883b      	ldrh	r3, [r7, #0]
 80057f6:	2b41      	cmp	r3, #65	@ 0x41
 80057f8:	d009      	beq.n	800580e <pbuf_alloc_reference+0x2a>
 80057fa:	883b      	ldrh	r3, [r7, #0]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d006      	beq.n	800580e <pbuf_alloc_reference+0x2a>
 8005800:	4b0f      	ldr	r3, [pc, #60]	@ (8005840 <pbuf_alloc_reference+0x5c>)
 8005802:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8005806:	490f      	ldr	r1, [pc, #60]	@ (8005844 <pbuf_alloc_reference+0x60>)
 8005808:	480f      	ldr	r0, [pc, #60]	@ (8005848 <pbuf_alloc_reference+0x64>)
 800580a:	f00a fdcf 	bl	80103ac <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800580e:	2007      	movs	r0, #7
 8005810:	f7ff faf0 	bl	8004df4 <memp_malloc>
 8005814:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800581c:	2300      	movs	r3, #0
 800581e:	e00b      	b.n	8005838 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005820:	8879      	ldrh	r1, [r7, #2]
 8005822:	887a      	ldrh	r2, [r7, #2]
 8005824:	2300      	movs	r3, #0
 8005826:	9301      	str	r3, [sp, #4]
 8005828:	883b      	ldrh	r3, [r7, #0]
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	460b      	mov	r3, r1
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f7ff feb7 	bl	80055a4 <pbuf_init_alloced_pbuf>
  return p;
 8005836:	68fb      	ldr	r3, [r7, #12]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	08011b90 	.word	0x08011b90
 8005844:	08011c94 	.word	0x08011c94
 8005848:	08011bf0 	.word	0x08011bf0

0800584c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b088      	sub	sp, #32
 8005850:	af02      	add	r7, sp, #8
 8005852:	607b      	str	r3, [r7, #4]
 8005854:	4603      	mov	r3, r0
 8005856:	73fb      	strb	r3, [r7, #15]
 8005858:	460b      	mov	r3, r1
 800585a:	81bb      	strh	r3, [r7, #12]
 800585c:	4613      	mov	r3, r2
 800585e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005864:	8a7b      	ldrh	r3, [r7, #18]
 8005866:	3303      	adds	r3, #3
 8005868:	f023 0203 	bic.w	r2, r3, #3
 800586c:	89bb      	ldrh	r3, [r7, #12]
 800586e:	441a      	add	r2, r3
 8005870:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005872:	429a      	cmp	r2, r3
 8005874:	d901      	bls.n	800587a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005876:	2300      	movs	r3, #0
 8005878:	e018      	b.n	80058ac <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d007      	beq.n	8005890 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005880:	8a7b      	ldrh	r3, [r7, #18]
 8005882:	3303      	adds	r3, #3
 8005884:	f023 0303 	bic.w	r3, r3, #3
 8005888:	6a3a      	ldr	r2, [r7, #32]
 800588a:	4413      	add	r3, r2
 800588c:	617b      	str	r3, [r7, #20]
 800588e:	e001      	b.n	8005894 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005890:	2300      	movs	r3, #0
 8005892:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	89b9      	ldrh	r1, [r7, #12]
 8005898:	89ba      	ldrh	r2, [r7, #12]
 800589a:	2302      	movs	r3, #2
 800589c:	9301      	str	r3, [sp, #4]
 800589e:	897b      	ldrh	r3, [r7, #10]
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	460b      	mov	r3, r1
 80058a4:	6979      	ldr	r1, [r7, #20]
 80058a6:	f7ff fe7d 	bl	80055a4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80058aa:	687b      	ldr	r3, [r7, #4]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	460b      	mov	r3, r1
 80058be:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d106      	bne.n	80058d4 <pbuf_realloc+0x20>
 80058c6:	4b3a      	ldr	r3, [pc, #232]	@ (80059b0 <pbuf_realloc+0xfc>)
 80058c8:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80058cc:	4939      	ldr	r1, [pc, #228]	@ (80059b4 <pbuf_realloc+0x100>)
 80058ce:	483a      	ldr	r0, [pc, #232]	@ (80059b8 <pbuf_realloc+0x104>)
 80058d0:	f00a fd6c 	bl	80103ac <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	891b      	ldrh	r3, [r3, #8]
 80058d8:	887a      	ldrh	r2, [r7, #2]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d263      	bcs.n	80059a6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	891a      	ldrh	r2, [r3, #8]
 80058e2:	887b      	ldrh	r3, [r7, #2]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80058e8:	887b      	ldrh	r3, [r7, #2]
 80058ea:	817b      	strh	r3, [r7, #10]
  q = p;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80058f0:	e018      	b.n	8005924 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	895b      	ldrh	r3, [r3, #10]
 80058f6:	897a      	ldrh	r2, [r7, #10]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	891a      	ldrh	r2, [r3, #8]
 8005900:	893b      	ldrh	r3, [r7, #8]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	b29a      	uxth	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d106      	bne.n	8005924 <pbuf_realloc+0x70>
 8005916:	4b26      	ldr	r3, [pc, #152]	@ (80059b0 <pbuf_realloc+0xfc>)
 8005918:	f240 12af 	movw	r2, #431	@ 0x1af
 800591c:	4927      	ldr	r1, [pc, #156]	@ (80059bc <pbuf_realloc+0x108>)
 800591e:	4826      	ldr	r0, [pc, #152]	@ (80059b8 <pbuf_realloc+0x104>)
 8005920:	f00a fd44 	bl	80103ac <iprintf>
  while (rem_len > q->len) {
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	895b      	ldrh	r3, [r3, #10]
 8005928:	897a      	ldrh	r2, [r7, #10]
 800592a:	429a      	cmp	r2, r3
 800592c:	d8e1      	bhi.n	80058f2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	7b1b      	ldrb	r3, [r3, #12]
 8005932:	f003 030f 	and.w	r3, r3, #15
 8005936:	2b00      	cmp	r3, #0
 8005938:	d121      	bne.n	800597e <pbuf_realloc+0xca>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	895b      	ldrh	r3, [r3, #10]
 800593e:	897a      	ldrh	r2, [r7, #10]
 8005940:	429a      	cmp	r2, r3
 8005942:	d01c      	beq.n	800597e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	7b5b      	ldrb	r3, [r3, #13]
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b00      	cmp	r3, #0
 800594e:	d116      	bne.n	800597e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	b29a      	uxth	r2, r3
 800595a:	897b      	ldrh	r3, [r7, #10]
 800595c:	4413      	add	r3, r2
 800595e:	b29b      	uxth	r3, r3
 8005960:	4619      	mov	r1, r3
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f7fe ffba 	bl	80048dc <mem_trim>
 8005968:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d106      	bne.n	800597e <pbuf_realloc+0xca>
 8005970:	4b0f      	ldr	r3, [pc, #60]	@ (80059b0 <pbuf_realloc+0xfc>)
 8005972:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8005976:	4912      	ldr	r1, [pc, #72]	@ (80059c0 <pbuf_realloc+0x10c>)
 8005978:	480f      	ldr	r0, [pc, #60]	@ (80059b8 <pbuf_realloc+0x104>)
 800597a:	f00a fd17 	bl	80103ac <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	897a      	ldrh	r2, [r7, #10]
 8005982:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	895a      	ldrh	r2, [r3, #10]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d004      	beq.n	800599e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4618      	mov	r0, r3
 800599a:	f000 f911 	bl	8005bc0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	e000      	b.n	80059a8 <pbuf_realloc+0xf4>
    return;
 80059a6:	bf00      	nop

}
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	08011b90 	.word	0x08011b90
 80059b4:	08011ca8 	.word	0x08011ca8
 80059b8:	08011bf0 	.word	0x08011bf0
 80059bc:	08011cc0 	.word	0x08011cc0
 80059c0:	08011cd8 	.word	0x08011cd8

080059c4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	4613      	mov	r3, r2
 80059d0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d106      	bne.n	80059e6 <pbuf_add_header_impl+0x22>
 80059d8:	4b2b      	ldr	r3, [pc, #172]	@ (8005a88 <pbuf_add_header_impl+0xc4>)
 80059da:	f240 12df 	movw	r2, #479	@ 0x1df
 80059de:	492b      	ldr	r1, [pc, #172]	@ (8005a8c <pbuf_add_header_impl+0xc8>)
 80059e0:	482b      	ldr	r0, [pc, #172]	@ (8005a90 <pbuf_add_header_impl+0xcc>)
 80059e2:	f00a fce3 	bl	80103ac <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <pbuf_add_header_impl+0x30>
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059f2:	d301      	bcc.n	80059f8 <pbuf_add_header_impl+0x34>
    return 1;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e043      	b.n	8005a80 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d101      	bne.n	8005a02 <pbuf_add_header_impl+0x3e>
    return 0;
 80059fe:	2300      	movs	r3, #0
 8005a00:	e03e      	b.n	8005a80 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	891a      	ldrh	r2, [r3, #8]
 8005a0a:	8a7b      	ldrh	r3, [r7, #18]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	8a7a      	ldrh	r2, [r7, #18]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d901      	bls.n	8005a1a <pbuf_add_header_impl+0x56>
    return 1;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e032      	b.n	8005a80 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	7b1b      	ldrb	r3, [r3, #12]
 8005a1e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005a20:	8a3b      	ldrh	r3, [r7, #16]
 8005a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00c      	beq.n	8005a44 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	425b      	negs	r3, r3
 8005a32:	4413      	add	r3, r2
 8005a34:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	3310      	adds	r3, #16
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d20d      	bcs.n	8005a5c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e01d      	b.n	8005a80 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005a44:	79fb      	ldrb	r3, [r7, #7]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d006      	beq.n	8005a58 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	425b      	negs	r3, r3
 8005a52:	4413      	add	r3, r2
 8005a54:	617b      	str	r3, [r7, #20]
 8005a56:	e001      	b.n	8005a5c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e011      	b.n	8005a80 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	895a      	ldrh	r2, [r3, #10]
 8005a66:	8a7b      	ldrh	r3, [r7, #18]
 8005a68:	4413      	add	r3, r2
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	891a      	ldrh	r2, [r3, #8]
 8005a74:	8a7b      	ldrh	r3, [r7, #18]
 8005a76:	4413      	add	r3, r2
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	811a      	strh	r2, [r3, #8]


  return 0;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3718      	adds	r7, #24
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	08011b90 	.word	0x08011b90
 8005a8c:	08011cf4 	.word	0x08011cf4
 8005a90:	08011bf0 	.word	0x08011bf0

08005a94 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	6839      	ldr	r1, [r7, #0]
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7ff ff8e 	bl	80059c4 <pbuf_add_header_impl>
 8005aa8:	4603      	mov	r3, r0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
	...

08005ab4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d106      	bne.n	8005ad2 <pbuf_remove_header+0x1e>
 8005ac4:	4b20      	ldr	r3, [pc, #128]	@ (8005b48 <pbuf_remove_header+0x94>)
 8005ac6:	f240 224b 	movw	r2, #587	@ 0x24b
 8005aca:	4920      	ldr	r1, [pc, #128]	@ (8005b4c <pbuf_remove_header+0x98>)
 8005acc:	4820      	ldr	r0, [pc, #128]	@ (8005b50 <pbuf_remove_header+0x9c>)
 8005ace:	f00a fc6d 	bl	80103ac <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d003      	beq.n	8005ae0 <pbuf_remove_header+0x2c>
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ade:	d301      	bcc.n	8005ae4 <pbuf_remove_header+0x30>
    return 1;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e02c      	b.n	8005b3e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <pbuf_remove_header+0x3a>
    return 0;
 8005aea:	2300      	movs	r3, #0
 8005aec:	e027      	b.n	8005b3e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	895b      	ldrh	r3, [r3, #10]
 8005af6:	89fa      	ldrh	r2, [r7, #14]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d908      	bls.n	8005b0e <pbuf_remove_header+0x5a>
 8005afc:	4b12      	ldr	r3, [pc, #72]	@ (8005b48 <pbuf_remove_header+0x94>)
 8005afe:	f240 2255 	movw	r2, #597	@ 0x255
 8005b02:	4914      	ldr	r1, [pc, #80]	@ (8005b54 <pbuf_remove_header+0xa0>)
 8005b04:	4812      	ldr	r0, [pc, #72]	@ (8005b50 <pbuf_remove_header+0x9c>)
 8005b06:	f00a fc51 	bl	80103ac <iprintf>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e017      	b.n	8005b3e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	441a      	add	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	895a      	ldrh	r2, [r3, #10]
 8005b24:	89fb      	ldrh	r3, [r7, #14]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	891a      	ldrh	r2, [r3, #8]
 8005b32:	89fb      	ldrh	r3, [r7, #14]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	08011b90 	.word	0x08011b90
 8005b4c:	08011cf4 	.word	0x08011cf4
 8005b50:	08011bf0 	.word	0x08011bf0
 8005b54:	08011d00 	.word	0x08011d00

08005b58 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	460b      	mov	r3, r1
 8005b62:	807b      	strh	r3, [r7, #2]
 8005b64:	4613      	mov	r3, r2
 8005b66:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005b68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	da08      	bge.n	8005b82 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005b70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005b74:	425b      	negs	r3, r3
 8005b76:	4619      	mov	r1, r3
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f7ff ff9b 	bl	8005ab4 <pbuf_remove_header>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	e007      	b.n	8005b92 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8005b82:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005b86:	787a      	ldrb	r2, [r7, #1]
 8005b88:	4619      	mov	r1, r3
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7ff ff1a 	bl	80059c4 <pbuf_add_header_impl>
 8005b90:	4603      	mov	r3, r0
  }
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b082      	sub	sp, #8
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8005ba6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005baa:	2201      	movs	r2, #1
 8005bac:	4619      	mov	r1, r3
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7ff ffd2 	bl	8005b58 <pbuf_header_impl>
 8005bb4:	4603      	mov	r3, r0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
	...

08005bc0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10b      	bne.n	8005be6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d106      	bne.n	8005be2 <pbuf_free+0x22>
 8005bd4:	4b38      	ldr	r3, [pc, #224]	@ (8005cb8 <pbuf_free+0xf8>)
 8005bd6:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8005bda:	4938      	ldr	r1, [pc, #224]	@ (8005cbc <pbuf_free+0xfc>)
 8005bdc:	4838      	ldr	r0, [pc, #224]	@ (8005cc0 <pbuf_free+0x100>)
 8005bde:	f00a fbe5 	bl	80103ac <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005be2:	2300      	movs	r3, #0
 8005be4:	e063      	b.n	8005cae <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8005be6:	2300      	movs	r3, #0
 8005be8:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005bea:	e05c      	b.n	8005ca6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	7b9b      	ldrb	r3, [r3, #14]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d106      	bne.n	8005c02 <pbuf_free+0x42>
 8005bf4:	4b30      	ldr	r3, [pc, #192]	@ (8005cb8 <pbuf_free+0xf8>)
 8005bf6:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8005bfa:	4932      	ldr	r1, [pc, #200]	@ (8005cc4 <pbuf_free+0x104>)
 8005bfc:	4830      	ldr	r0, [pc, #192]	@ (8005cc0 <pbuf_free+0x100>)
 8005bfe:	f00a fbd5 	bl	80103ac <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	7b9b      	ldrb	r3, [r3, #14]
 8005c06:	3b01      	subs	r3, #1
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	739a      	strb	r2, [r3, #14]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	7b9b      	ldrb	r3, [r3, #14]
 8005c12:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005c14:	7dbb      	ldrb	r3, [r7, #22]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d143      	bne.n	8005ca2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	7b1b      	ldrb	r3, [r3, #12]
 8005c24:	f003 030f 	and.w	r3, r3, #15
 8005c28:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	7b5b      	ldrb	r3, [r3, #13]
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d011      	beq.n	8005c5a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d106      	bne.n	8005c50 <pbuf_free+0x90>
 8005c42:	4b1d      	ldr	r3, [pc, #116]	@ (8005cb8 <pbuf_free+0xf8>)
 8005c44:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8005c48:	491f      	ldr	r1, [pc, #124]	@ (8005cc8 <pbuf_free+0x108>)
 8005c4a:	481d      	ldr	r0, [pc, #116]	@ (8005cc0 <pbuf_free+0x100>)
 8005c4c:	f00a fbae 	bl	80103ac <iprintf>
        pc->custom_free_function(p);
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	4798      	blx	r3
 8005c58:	e01d      	b.n	8005c96 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8005c5a:	7bfb      	ldrb	r3, [r7, #15]
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d104      	bne.n	8005c6a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8005c60:	6879      	ldr	r1, [r7, #4]
 8005c62:	2008      	movs	r0, #8
 8005c64:	f7ff f936 	bl	8004ed4 <memp_free>
 8005c68:	e015      	b.n	8005c96 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005c6a:	7bfb      	ldrb	r3, [r7, #15]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d104      	bne.n	8005c7a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8005c70:	6879      	ldr	r1, [r7, #4]
 8005c72:	2007      	movs	r0, #7
 8005c74:	f7ff f92e 	bl	8004ed4 <memp_free>
 8005c78:	e00d      	b.n	8005c96 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005c7a:	7bfb      	ldrb	r3, [r7, #15]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d103      	bne.n	8005c88 <pbuf_free+0xc8>
          mem_free(p);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7fe fdc1 	bl	8004808 <mem_free>
 8005c86:	e006      	b.n	8005c96 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005c88:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb8 <pbuf_free+0xf8>)
 8005c8a:	f240 320f 	movw	r2, #783	@ 0x30f
 8005c8e:	490f      	ldr	r1, [pc, #60]	@ (8005ccc <pbuf_free+0x10c>)
 8005c90:	480b      	ldr	r0, [pc, #44]	@ (8005cc0 <pbuf_free+0x100>)
 8005c92:	f00a fb8b 	bl	80103ac <iprintf>
        }
      }
      count++;
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	607b      	str	r3, [r7, #4]
 8005ca0:	e001      	b.n	8005ca6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d19f      	bne.n	8005bec <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	08011b90 	.word	0x08011b90
 8005cbc:	08011cf4 	.word	0x08011cf4
 8005cc0:	08011bf0 	.word	0x08011bf0
 8005cc4:	08011d20 	.word	0x08011d20
 8005cc8:	08011d38 	.word	0x08011d38
 8005ccc:	08011d5c 	.word	0x08011d5c

08005cd0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005cdc:	e005      	b.n	8005cea <pbuf_clen+0x1a>
    ++len;
 8005cde:	89fb      	ldrh	r3, [r7, #14]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1f6      	bne.n	8005cde <pbuf_clen+0xe>
  }
  return len;
 8005cf0:	89fb      	ldrh	r3, [r7, #14]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
	...

08005d00 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d010      	beq.n	8005d30 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	7b9b      	ldrb	r3, [r3, #14]
 8005d12:	3301      	adds	r3, #1
 8005d14:	b2da      	uxtb	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	7b9b      	ldrb	r3, [r3, #14]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d106      	bne.n	8005d30 <pbuf_ref+0x30>
 8005d22:	4b05      	ldr	r3, [pc, #20]	@ (8005d38 <pbuf_ref+0x38>)
 8005d24:	f240 3242 	movw	r2, #834	@ 0x342
 8005d28:	4904      	ldr	r1, [pc, #16]	@ (8005d3c <pbuf_ref+0x3c>)
 8005d2a:	4805      	ldr	r0, [pc, #20]	@ (8005d40 <pbuf_ref+0x40>)
 8005d2c:	f00a fb3e 	bl	80103ac <iprintf>
  }
}
 8005d30:	bf00      	nop
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	08011b90 	.word	0x08011b90
 8005d3c:	08011d70 	.word	0x08011d70
 8005d40:	08011bf0 	.word	0x08011bf0

08005d44 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d002      	beq.n	8005d5a <pbuf_cat+0x16>
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d107      	bne.n	8005d6a <pbuf_cat+0x26>
 8005d5a:	4b20      	ldr	r3, [pc, #128]	@ (8005ddc <pbuf_cat+0x98>)
 8005d5c:	f240 3259 	movw	r2, #857	@ 0x359
 8005d60:	491f      	ldr	r1, [pc, #124]	@ (8005de0 <pbuf_cat+0x9c>)
 8005d62:	4820      	ldr	r0, [pc, #128]	@ (8005de4 <pbuf_cat+0xa0>)
 8005d64:	f00a fb22 	bl	80103ac <iprintf>
 8005d68:	e034      	b.n	8005dd4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	e00a      	b.n	8005d86 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	891a      	ldrh	r2, [r3, #8]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	891b      	ldrh	r3, [r3, #8]
 8005d78:	4413      	add	r3, r2
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	60fb      	str	r3, [r7, #12]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1f0      	bne.n	8005d70 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	891a      	ldrh	r2, [r3, #8]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	895b      	ldrh	r3, [r3, #10]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d006      	beq.n	8005da8 <pbuf_cat+0x64>
 8005d9a:	4b10      	ldr	r3, [pc, #64]	@ (8005ddc <pbuf_cat+0x98>)
 8005d9c:	f240 3262 	movw	r2, #866	@ 0x362
 8005da0:	4911      	ldr	r1, [pc, #68]	@ (8005de8 <pbuf_cat+0xa4>)
 8005da2:	4810      	ldr	r0, [pc, #64]	@ (8005de4 <pbuf_cat+0xa0>)
 8005da4:	f00a fb02 	bl	80103ac <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d006      	beq.n	8005dbe <pbuf_cat+0x7a>
 8005db0:	4b0a      	ldr	r3, [pc, #40]	@ (8005ddc <pbuf_cat+0x98>)
 8005db2:	f240 3263 	movw	r2, #867	@ 0x363
 8005db6:	490d      	ldr	r1, [pc, #52]	@ (8005dec <pbuf_cat+0xa8>)
 8005db8:	480a      	ldr	r0, [pc, #40]	@ (8005de4 <pbuf_cat+0xa0>)
 8005dba:	f00a faf7 	bl	80103ac <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	891a      	ldrh	r2, [r3, #8]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	891b      	ldrh	r3, [r3, #8]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	08011b90 	.word	0x08011b90
 8005de0:	08011d84 	.word	0x08011d84
 8005de4:	08011bf0 	.word	0x08011bf0
 8005de8:	08011dbc 	.word	0x08011dbc
 8005dec:	08011dec 	.word	0x08011dec

08005df0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	617b      	str	r3, [r7, #20]
 8005dfe:	2300      	movs	r3, #0
 8005e00:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d008      	beq.n	8005e1a <pbuf_copy+0x2a>
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d005      	beq.n	8005e1a <pbuf_copy+0x2a>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	891a      	ldrh	r2, [r3, #8]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	891b      	ldrh	r3, [r3, #8]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d209      	bcs.n	8005e2e <pbuf_copy+0x3e>
 8005e1a:	4b57      	ldr	r3, [pc, #348]	@ (8005f78 <pbuf_copy+0x188>)
 8005e1c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8005e20:	4956      	ldr	r1, [pc, #344]	@ (8005f7c <pbuf_copy+0x18c>)
 8005e22:	4857      	ldr	r0, [pc, #348]	@ (8005f80 <pbuf_copy+0x190>)
 8005e24:	f00a fac2 	bl	80103ac <iprintf>
 8005e28:	f06f 030f 	mvn.w	r3, #15
 8005e2c:	e09f      	b.n	8005f6e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	895b      	ldrh	r3, [r3, #10]
 8005e32:	461a      	mov	r2, r3
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	1ad2      	subs	r2, r2, r3
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	895b      	ldrh	r3, [r3, #10]
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1acb      	subs	r3, r1, r3
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d306      	bcc.n	8005e54 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	895b      	ldrh	r3, [r3, #10]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	60fb      	str	r3, [r7, #12]
 8005e52:	e005      	b.n	8005e60 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	895b      	ldrh	r3, [r3, #10]
 8005e58:	461a      	mov	r2, r3
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	18d0      	adds	r0, r2, r3
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	4413      	add	r3, r2
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	4619      	mov	r1, r3
 8005e74:	f00a fbc5 	bl	8010602 <memcpy>
    offset_to += len;
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	4413      	add	r3, r2
 8005e86:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	895b      	ldrh	r3, [r3, #10]
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d906      	bls.n	8005ea2 <pbuf_copy+0xb2>
 8005e94:	4b38      	ldr	r3, [pc, #224]	@ (8005f78 <pbuf_copy+0x188>)
 8005e96:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8005e9a:	493a      	ldr	r1, [pc, #232]	@ (8005f84 <pbuf_copy+0x194>)
 8005e9c:	4838      	ldr	r0, [pc, #224]	@ (8005f80 <pbuf_copy+0x190>)
 8005e9e:	f00a fa85 	bl	80103ac <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	895b      	ldrh	r3, [r3, #10]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d906      	bls.n	8005ebc <pbuf_copy+0xcc>
 8005eae:	4b32      	ldr	r3, [pc, #200]	@ (8005f78 <pbuf_copy+0x188>)
 8005eb0:	f240 32da 	movw	r2, #986	@ 0x3da
 8005eb4:	4934      	ldr	r1, [pc, #208]	@ (8005f88 <pbuf_copy+0x198>)
 8005eb6:	4832      	ldr	r0, [pc, #200]	@ (8005f80 <pbuf_copy+0x190>)
 8005eb8:	f00a fa78 	bl	80103ac <iprintf>
    if (offset_from >= p_from->len) {
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	895b      	ldrh	r3, [r3, #10]
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d304      	bcc.n	8005ed2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	895b      	ldrh	r3, [r3, #10]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d114      	bne.n	8005f08 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10c      	bne.n	8005f08 <pbuf_copy+0x118>
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d009      	beq.n	8005f08 <pbuf_copy+0x118>
 8005ef4:	4b20      	ldr	r3, [pc, #128]	@ (8005f78 <pbuf_copy+0x188>)
 8005ef6:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8005efa:	4924      	ldr	r1, [pc, #144]	@ (8005f8c <pbuf_copy+0x19c>)
 8005efc:	4820      	ldr	r0, [pc, #128]	@ (8005f80 <pbuf_copy+0x190>)
 8005efe:	f00a fa55 	bl	80103ac <iprintf>
 8005f02:	f06f 030f 	mvn.w	r3, #15
 8005f06:	e032      	b.n	8005f6e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d013      	beq.n	8005f36 <pbuf_copy+0x146>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	895a      	ldrh	r2, [r3, #10]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	891b      	ldrh	r3, [r3, #8]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d10d      	bne.n	8005f36 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d009      	beq.n	8005f36 <pbuf_copy+0x146>
 8005f22:	4b15      	ldr	r3, [pc, #84]	@ (8005f78 <pbuf_copy+0x188>)
 8005f24:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8005f28:	4919      	ldr	r1, [pc, #100]	@ (8005f90 <pbuf_copy+0x1a0>)
 8005f2a:	4815      	ldr	r0, [pc, #84]	@ (8005f80 <pbuf_copy+0x190>)
 8005f2c:	f00a fa3e 	bl	80103ac <iprintf>
 8005f30:	f06f 0305 	mvn.w	r3, #5
 8005f34:	e01b      	b.n	8005f6e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d013      	beq.n	8005f64 <pbuf_copy+0x174>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	895a      	ldrh	r2, [r3, #10]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	891b      	ldrh	r3, [r3, #8]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d10d      	bne.n	8005f64 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d009      	beq.n	8005f64 <pbuf_copy+0x174>
 8005f50:	4b09      	ldr	r3, [pc, #36]	@ (8005f78 <pbuf_copy+0x188>)
 8005f52:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8005f56:	490e      	ldr	r1, [pc, #56]	@ (8005f90 <pbuf_copy+0x1a0>)
 8005f58:	4809      	ldr	r0, [pc, #36]	@ (8005f80 <pbuf_copy+0x190>)
 8005f5a:	f00a fa27 	bl	80103ac <iprintf>
 8005f5e:	f06f 0305 	mvn.w	r3, #5
 8005f62:	e004      	b.n	8005f6e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f47f af61 	bne.w	8005e2e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3718      	adds	r7, #24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	08011b90 	.word	0x08011b90
 8005f7c:	08011e38 	.word	0x08011e38
 8005f80:	08011bf0 	.word	0x08011bf0
 8005f84:	08011e68 	.word	0x08011e68
 8005f88:	08011e80 	.word	0x08011e80
 8005f8c:	08011e9c 	.word	0x08011e9c
 8005f90:	08011eac 	.word	0x08011eac

08005f94 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b088      	sub	sp, #32
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	4611      	mov	r1, r2
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	80fb      	strh	r3, [r7, #6]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8005faa:	2300      	movs	r3, #0
 8005fac:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d108      	bne.n	8005fca <pbuf_copy_partial+0x36>
 8005fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8006068 <pbuf_copy_partial+0xd4>)
 8005fba:	f240 420a 	movw	r2, #1034	@ 0x40a
 8005fbe:	492b      	ldr	r1, [pc, #172]	@ (800606c <pbuf_copy_partial+0xd8>)
 8005fc0:	482b      	ldr	r0, [pc, #172]	@ (8006070 <pbuf_copy_partial+0xdc>)
 8005fc2:	f00a f9f3 	bl	80103ac <iprintf>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	e04a      	b.n	8006060 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d108      	bne.n	8005fe2 <pbuf_copy_partial+0x4e>
 8005fd0:	4b25      	ldr	r3, [pc, #148]	@ (8006068 <pbuf_copy_partial+0xd4>)
 8005fd2:	f240 420b 	movw	r2, #1035	@ 0x40b
 8005fd6:	4927      	ldr	r1, [pc, #156]	@ (8006074 <pbuf_copy_partial+0xe0>)
 8005fd8:	4825      	ldr	r0, [pc, #148]	@ (8006070 <pbuf_copy_partial+0xdc>)
 8005fda:	f00a f9e7 	bl	80103ac <iprintf>
 8005fde:	2300      	movs	r3, #0
 8005fe0:	e03e      	b.n	8006060 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	61fb      	str	r3, [r7, #28]
 8005fe6:	e034      	b.n	8006052 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8005fe8:	88bb      	ldrh	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00a      	beq.n	8006004 <pbuf_copy_partial+0x70>
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	895b      	ldrh	r3, [r3, #10]
 8005ff2:	88ba      	ldrh	r2, [r7, #4]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d305      	bcc.n	8006004 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	895b      	ldrh	r3, [r3, #10]
 8005ffc:	88ba      	ldrh	r2, [r7, #4]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	80bb      	strh	r3, [r7, #4]
 8006002:	e023      	b.n	800604c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	895a      	ldrh	r2, [r3, #10]
 8006008:	88bb      	ldrh	r3, [r7, #4]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800600e:	8b3a      	ldrh	r2, [r7, #24]
 8006010:	88fb      	ldrh	r3, [r7, #6]
 8006012:	429a      	cmp	r2, r3
 8006014:	d901      	bls.n	800601a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006016:	88fb      	ldrh	r3, [r7, #6]
 8006018:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800601a:	8b7b      	ldrh	r3, [r7, #26]
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	18d0      	adds	r0, r2, r3
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	88bb      	ldrh	r3, [r7, #4]
 8006026:	4413      	add	r3, r2
 8006028:	8b3a      	ldrh	r2, [r7, #24]
 800602a:	4619      	mov	r1, r3
 800602c:	f00a fae9 	bl	8010602 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006030:	8afa      	ldrh	r2, [r7, #22]
 8006032:	8b3b      	ldrh	r3, [r7, #24]
 8006034:	4413      	add	r3, r2
 8006036:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006038:	8b7a      	ldrh	r2, [r7, #26]
 800603a:	8b3b      	ldrh	r3, [r7, #24]
 800603c:	4413      	add	r3, r2
 800603e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006040:	88fa      	ldrh	r2, [r7, #6]
 8006042:	8b3b      	ldrh	r3, [r7, #24]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006048:	2300      	movs	r3, #0
 800604a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	61fb      	str	r3, [r7, #28]
 8006052:	88fb      	ldrh	r3, [r7, #6]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <pbuf_copy_partial+0xca>
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1c4      	bne.n	8005fe8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800605e:	8afb      	ldrh	r3, [r7, #22]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3720      	adds	r7, #32
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	08011b90 	.word	0x08011b90
 800606c:	08011ed8 	.word	0x08011ed8
 8006070:	08011bf0 	.word	0x08011bf0
 8006074:	08011ef8 	.word	0x08011ef8

08006078 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	4603      	mov	r3, r0
 8006080:	603a      	str	r2, [r7, #0]
 8006082:	71fb      	strb	r3, [r7, #7]
 8006084:	460b      	mov	r3, r1
 8006086:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	8919      	ldrh	r1, [r3, #8]
 800608c:	88ba      	ldrh	r2, [r7, #4]
 800608e:	79fb      	ldrb	r3, [r7, #7]
 8006090:	4618      	mov	r0, r3
 8006092:	f7ff fab1 	bl	80055f8 <pbuf_alloc>
 8006096:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d101      	bne.n	80060a2 <pbuf_clone+0x2a>
    return NULL;
 800609e:	2300      	movs	r3, #0
 80060a0:	e011      	b.n	80060c6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80060a2:	6839      	ldr	r1, [r7, #0]
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f7ff fea3 	bl	8005df0 <pbuf_copy>
 80060aa:	4603      	mov	r3, r0
 80060ac:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80060ae:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d006      	beq.n	80060c4 <pbuf_clone+0x4c>
 80060b6:	4b06      	ldr	r3, [pc, #24]	@ (80060d0 <pbuf_clone+0x58>)
 80060b8:	f240 5224 	movw	r2, #1316	@ 0x524
 80060bc:	4905      	ldr	r1, [pc, #20]	@ (80060d4 <pbuf_clone+0x5c>)
 80060be:	4806      	ldr	r0, [pc, #24]	@ (80060d8 <pbuf_clone+0x60>)
 80060c0:	f00a f974 	bl	80103ac <iprintf>
  return q;
 80060c4:	68fb      	ldr	r3, [r7, #12]
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	08011b90 	.word	0x08011b90
 80060d4:	08012004 	.word	0x08012004
 80060d8:	08011bf0 	.word	0x08011bf0

080060dc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80060e0:	f00a f852 	bl	8010188 <rand>
 80060e4:	4603      	mov	r3, r0
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	4b01      	ldr	r3, [pc, #4]	@ (80060fc <tcp_init+0x20>)
 80060f6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80060f8:	bf00      	nop
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	20000020 	.word	0x20000020

08006100 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	7d1b      	ldrb	r3, [r3, #20]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d105      	bne.n	800611c <tcp_free+0x1c>
 8006110:	4b06      	ldr	r3, [pc, #24]	@ (800612c <tcp_free+0x2c>)
 8006112:	22d4      	movs	r2, #212	@ 0xd4
 8006114:	4906      	ldr	r1, [pc, #24]	@ (8006130 <tcp_free+0x30>)
 8006116:	4807      	ldr	r0, [pc, #28]	@ (8006134 <tcp_free+0x34>)
 8006118:	f00a f948 	bl	80103ac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800611c:	6879      	ldr	r1, [r7, #4]
 800611e:	2001      	movs	r0, #1
 8006120:	f7fe fed8 	bl	8004ed4 <memp_free>
}
 8006124:	bf00      	nop
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	08012090 	.word	0x08012090
 8006130:	080120c0 	.word	0x080120c0
 8006134:	080120d4 	.word	0x080120d4

08006138 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	7d1b      	ldrb	r3, [r3, #20]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d105      	bne.n	8006154 <tcp_free_listen+0x1c>
 8006148:	4b06      	ldr	r3, [pc, #24]	@ (8006164 <tcp_free_listen+0x2c>)
 800614a:	22df      	movs	r2, #223	@ 0xdf
 800614c:	4906      	ldr	r1, [pc, #24]	@ (8006168 <tcp_free_listen+0x30>)
 800614e:	4807      	ldr	r0, [pc, #28]	@ (800616c <tcp_free_listen+0x34>)
 8006150:	f00a f92c 	bl	80103ac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006154:	6879      	ldr	r1, [r7, #4]
 8006156:	2002      	movs	r0, #2
 8006158:	f7fe febc 	bl	8004ed4 <memp_free>
}
 800615c:	bf00      	nop
 800615e:	3708      	adds	r7, #8
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	08012090 	.word	0x08012090
 8006168:	080120fc 	.word	0x080120fc
 800616c:	080120d4 	.word	0x080120d4

08006170 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006174:	f001 f85e 	bl	8007234 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006178:	4b07      	ldr	r3, [pc, #28]	@ (8006198 <tcp_tmr+0x28>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	3301      	adds	r3, #1
 800617e:	b2da      	uxtb	r2, r3
 8006180:	4b05      	ldr	r3, [pc, #20]	@ (8006198 <tcp_tmr+0x28>)
 8006182:	701a      	strb	r2, [r3, #0]
 8006184:	4b04      	ldr	r3, [pc, #16]	@ (8006198 <tcp_tmr+0x28>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006190:	f000 fd0e 	bl	8006bb0 <tcp_slowtmr>
  }
}
 8006194:	bf00      	nop
 8006196:	bd80      	pop	{r7, pc}
 8006198:	2000835d 	.word	0x2000835d

0800619c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d105      	bne.n	80061b8 <tcp_remove_listener+0x1c>
 80061ac:	4b0d      	ldr	r3, [pc, #52]	@ (80061e4 <tcp_remove_listener+0x48>)
 80061ae:	22ff      	movs	r2, #255	@ 0xff
 80061b0:	490d      	ldr	r1, [pc, #52]	@ (80061e8 <tcp_remove_listener+0x4c>)
 80061b2:	480e      	ldr	r0, [pc, #56]	@ (80061ec <tcp_remove_listener+0x50>)
 80061b4:	f00a f8fa 	bl	80103ac <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	60fb      	str	r3, [r7, #12]
 80061bc:	e00a      	b.n	80061d4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d102      	bne.n	80061ce <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	60fb      	str	r3, [r7, #12]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1f1      	bne.n	80061be <tcp_remove_listener+0x22>
    }
  }
}
 80061da:	bf00      	nop
 80061dc:	bf00      	nop
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	08012090 	.word	0x08012090
 80061e8:	08012118 	.word	0x08012118
 80061ec:	080120d4 	.word	0x080120d4

080061f0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d106      	bne.n	800620c <tcp_listen_closed+0x1c>
 80061fe:	4b14      	ldr	r3, [pc, #80]	@ (8006250 <tcp_listen_closed+0x60>)
 8006200:	f240 1211 	movw	r2, #273	@ 0x111
 8006204:	4913      	ldr	r1, [pc, #76]	@ (8006254 <tcp_listen_closed+0x64>)
 8006206:	4814      	ldr	r0, [pc, #80]	@ (8006258 <tcp_listen_closed+0x68>)
 8006208:	f00a f8d0 	bl	80103ac <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	7d1b      	ldrb	r3, [r3, #20]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d006      	beq.n	8006222 <tcp_listen_closed+0x32>
 8006214:	4b0e      	ldr	r3, [pc, #56]	@ (8006250 <tcp_listen_closed+0x60>)
 8006216:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800621a:	4910      	ldr	r1, [pc, #64]	@ (800625c <tcp_listen_closed+0x6c>)
 800621c:	480e      	ldr	r0, [pc, #56]	@ (8006258 <tcp_listen_closed+0x68>)
 800621e:	f00a f8c5 	bl	80103ac <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006222:	2301      	movs	r3, #1
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	e00b      	b.n	8006240 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006228:	4a0d      	ldr	r2, [pc, #52]	@ (8006260 <tcp_listen_closed+0x70>)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	6879      	ldr	r1, [r7, #4]
 8006234:	4618      	mov	r0, r3
 8006236:	f7ff ffb1 	bl	800619c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	3301      	adds	r3, #1
 800623e:	60fb      	str	r3, [r7, #12]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2b03      	cmp	r3, #3
 8006244:	d9f0      	bls.n	8006228 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006246:	bf00      	nop
 8006248:	bf00      	nop
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	08012090 	.word	0x08012090
 8006254:	08012140 	.word	0x08012140
 8006258:	080120d4 	.word	0x080120d4
 800625c:	0801214c 	.word	0x0801214c
 8006260:	0801418c 	.word	0x0801418c

08006264 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006264:	b5b0      	push	{r4, r5, r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af04      	add	r7, sp, #16
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	460b      	mov	r3, r1
 800626e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d106      	bne.n	8006284 <tcp_close_shutdown+0x20>
 8006276:	4b63      	ldr	r3, [pc, #396]	@ (8006404 <tcp_close_shutdown+0x1a0>)
 8006278:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800627c:	4962      	ldr	r1, [pc, #392]	@ (8006408 <tcp_close_shutdown+0x1a4>)
 800627e:	4863      	ldr	r0, [pc, #396]	@ (800640c <tcp_close_shutdown+0x1a8>)
 8006280:	f00a f894 	bl	80103ac <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006284:	78fb      	ldrb	r3, [r7, #3]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d066      	beq.n	8006358 <tcp_close_shutdown+0xf4>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	7d1b      	ldrb	r3, [r3, #20]
 800628e:	2b04      	cmp	r3, #4
 8006290:	d003      	beq.n	800629a <tcp_close_shutdown+0x36>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	7d1b      	ldrb	r3, [r3, #20]
 8006296:	2b07      	cmp	r3, #7
 8006298:	d15e      	bne.n	8006358 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d104      	bne.n	80062ac <tcp_close_shutdown+0x48>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062a6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80062aa:	d055      	beq.n	8006358 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	8b5b      	ldrh	r3, [r3, #26]
 80062b0:	f003 0310 	and.w	r3, r3, #16
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d106      	bne.n	80062c6 <tcp_close_shutdown+0x62>
 80062b8:	4b52      	ldr	r3, [pc, #328]	@ (8006404 <tcp_close_shutdown+0x1a0>)
 80062ba:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80062be:	4954      	ldr	r1, [pc, #336]	@ (8006410 <tcp_close_shutdown+0x1ac>)
 80062c0:	4852      	ldr	r0, [pc, #328]	@ (800640c <tcp_close_shutdown+0x1a8>)
 80062c2:	f00a f873 	bl	80103ac <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80062ce:	687d      	ldr	r5, [r7, #4]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3304      	adds	r3, #4
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	8ad2      	ldrh	r2, [r2, #22]
 80062d8:	6879      	ldr	r1, [r7, #4]
 80062da:	8b09      	ldrh	r1, [r1, #24]
 80062dc:	9102      	str	r1, [sp, #8]
 80062de:	9201      	str	r2, [sp, #4]
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	462b      	mov	r3, r5
 80062e4:	4622      	mov	r2, r4
 80062e6:	4601      	mov	r1, r0
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f005 fce1 	bl	800bcb0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f001 fac4 	bl	800787c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80062f4:	4b47      	ldr	r3, [pc, #284]	@ (8006414 <tcp_close_shutdown+0x1b0>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d105      	bne.n	800630a <tcp_close_shutdown+0xa6>
 80062fe:	4b45      	ldr	r3, [pc, #276]	@ (8006414 <tcp_close_shutdown+0x1b0>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	4a43      	ldr	r2, [pc, #268]	@ (8006414 <tcp_close_shutdown+0x1b0>)
 8006306:	6013      	str	r3, [r2, #0]
 8006308:	e013      	b.n	8006332 <tcp_close_shutdown+0xce>
 800630a:	4b42      	ldr	r3, [pc, #264]	@ (8006414 <tcp_close_shutdown+0x1b0>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	60fb      	str	r3, [r7, #12]
 8006310:	e00c      	b.n	800632c <tcp_close_shutdown+0xc8>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	429a      	cmp	r2, r3
 800631a:	d104      	bne.n	8006326 <tcp_close_shutdown+0xc2>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68da      	ldr	r2, [r3, #12]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	60da      	str	r2, [r3, #12]
 8006324:	e005      	b.n	8006332 <tcp_close_shutdown+0xce>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	60fb      	str	r3, [r7, #12]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1ef      	bne.n	8006312 <tcp_close_shutdown+0xae>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	60da      	str	r2, [r3, #12]
 8006338:	4b37      	ldr	r3, [pc, #220]	@ (8006418 <tcp_close_shutdown+0x1b4>)
 800633a:	2201      	movs	r2, #1
 800633c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800633e:	4b37      	ldr	r3, [pc, #220]	@ (800641c <tcp_close_shutdown+0x1b8>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	429a      	cmp	r2, r3
 8006346:	d102      	bne.n	800634e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006348:	f003 ff58 	bl	800a1fc <tcp_trigger_input_pcb_close>
 800634c:	e002      	b.n	8006354 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7ff fed6 	bl	8006100 <tcp_free>
      }
      return ERR_OK;
 8006354:	2300      	movs	r3, #0
 8006356:	e050      	b.n	80063fa <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	7d1b      	ldrb	r3, [r3, #20]
 800635c:	2b02      	cmp	r3, #2
 800635e:	d03b      	beq.n	80063d8 <tcp_close_shutdown+0x174>
 8006360:	2b02      	cmp	r3, #2
 8006362:	dc44      	bgt.n	80063ee <tcp_close_shutdown+0x18a>
 8006364:	2b00      	cmp	r3, #0
 8006366:	d002      	beq.n	800636e <tcp_close_shutdown+0x10a>
 8006368:	2b01      	cmp	r3, #1
 800636a:	d02a      	beq.n	80063c2 <tcp_close_shutdown+0x15e>
 800636c:	e03f      	b.n	80063ee <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	8adb      	ldrh	r3, [r3, #22]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d021      	beq.n	80063ba <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006376:	4b2a      	ldr	r3, [pc, #168]	@ (8006420 <tcp_close_shutdown+0x1bc>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	429a      	cmp	r2, r3
 800637e:	d105      	bne.n	800638c <tcp_close_shutdown+0x128>
 8006380:	4b27      	ldr	r3, [pc, #156]	@ (8006420 <tcp_close_shutdown+0x1bc>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	4a26      	ldr	r2, [pc, #152]	@ (8006420 <tcp_close_shutdown+0x1bc>)
 8006388:	6013      	str	r3, [r2, #0]
 800638a:	e013      	b.n	80063b4 <tcp_close_shutdown+0x150>
 800638c:	4b24      	ldr	r3, [pc, #144]	@ (8006420 <tcp_close_shutdown+0x1bc>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	60bb      	str	r3, [r7, #8]
 8006392:	e00c      	b.n	80063ae <tcp_close_shutdown+0x14a>
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	429a      	cmp	r2, r3
 800639c:	d104      	bne.n	80063a8 <tcp_close_shutdown+0x144>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68da      	ldr	r2, [r3, #12]
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	60da      	str	r2, [r3, #12]
 80063a6:	e005      	b.n	80063b4 <tcp_close_shutdown+0x150>
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	60bb      	str	r3, [r7, #8]
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1ef      	bne.n	8006394 <tcp_close_shutdown+0x130>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7ff fea0 	bl	8006100 <tcp_free>
      break;
 80063c0:	e01a      	b.n	80063f8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7ff ff14 	bl	80061f0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80063c8:	6879      	ldr	r1, [r7, #4]
 80063ca:	4816      	ldr	r0, [pc, #88]	@ (8006424 <tcp_close_shutdown+0x1c0>)
 80063cc:	f001 faa6 	bl	800791c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7ff feb1 	bl	8006138 <tcp_free_listen>
      break;
 80063d6:	e00f      	b.n	80063f8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80063d8:	6879      	ldr	r1, [r7, #4]
 80063da:	480e      	ldr	r0, [pc, #56]	@ (8006414 <tcp_close_shutdown+0x1b0>)
 80063dc:	f001 fa9e 	bl	800791c <tcp_pcb_remove>
 80063e0:	4b0d      	ldr	r3, [pc, #52]	@ (8006418 <tcp_close_shutdown+0x1b4>)
 80063e2:	2201      	movs	r2, #1
 80063e4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7ff fe8a 	bl	8006100 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80063ec:	e004      	b.n	80063f8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f81a 	bl	8006428 <tcp_close_shutdown_fin>
 80063f4:	4603      	mov	r3, r0
 80063f6:	e000      	b.n	80063fa <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bdb0      	pop	{r4, r5, r7, pc}
 8006402:	bf00      	nop
 8006404:	08012090 	.word	0x08012090
 8006408:	08012164 	.word	0x08012164
 800640c:	080120d4 	.word	0x080120d4
 8006410:	08012184 	.word	0x08012184
 8006414:	20008354 	.word	0x20008354
 8006418:	2000835c 	.word	0x2000835c
 800641c:	20008394 	.word	0x20008394
 8006420:	2000834c 	.word	0x2000834c
 8006424:	20008350 	.word	0x20008350

08006428 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d106      	bne.n	8006444 <tcp_close_shutdown_fin+0x1c>
 8006436:	4b2e      	ldr	r3, [pc, #184]	@ (80064f0 <tcp_close_shutdown_fin+0xc8>)
 8006438:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800643c:	492d      	ldr	r1, [pc, #180]	@ (80064f4 <tcp_close_shutdown_fin+0xcc>)
 800643e:	482e      	ldr	r0, [pc, #184]	@ (80064f8 <tcp_close_shutdown_fin+0xd0>)
 8006440:	f009 ffb4 	bl	80103ac <iprintf>

  switch (pcb->state) {
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	7d1b      	ldrb	r3, [r3, #20]
 8006448:	2b07      	cmp	r3, #7
 800644a:	d020      	beq.n	800648e <tcp_close_shutdown_fin+0x66>
 800644c:	2b07      	cmp	r3, #7
 800644e:	dc2b      	bgt.n	80064a8 <tcp_close_shutdown_fin+0x80>
 8006450:	2b03      	cmp	r3, #3
 8006452:	d002      	beq.n	800645a <tcp_close_shutdown_fin+0x32>
 8006454:	2b04      	cmp	r3, #4
 8006456:	d00d      	beq.n	8006474 <tcp_close_shutdown_fin+0x4c>
 8006458:	e026      	b.n	80064a8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f004 fd36 	bl	800aecc <tcp_send_fin>
 8006460:	4603      	mov	r3, r0
 8006462:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d11f      	bne.n	80064ac <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2205      	movs	r2, #5
 8006470:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006472:	e01b      	b.n	80064ac <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f004 fd29 	bl	800aecc <tcp_send_fin>
 800647a:	4603      	mov	r3, r0
 800647c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800647e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d114      	bne.n	80064b0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2205      	movs	r2, #5
 800648a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800648c:	e010      	b.n	80064b0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f004 fd1c 	bl	800aecc <tcp_send_fin>
 8006494:	4603      	mov	r3, r0
 8006496:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006498:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d109      	bne.n	80064b4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2209      	movs	r2, #9
 80064a4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80064a6:	e005      	b.n	80064b4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80064a8:	2300      	movs	r3, #0
 80064aa:	e01c      	b.n	80064e6 <tcp_close_shutdown_fin+0xbe>
      break;
 80064ac:	bf00      	nop
 80064ae:	e002      	b.n	80064b6 <tcp_close_shutdown_fin+0x8e>
      break;
 80064b0:	bf00      	nop
 80064b2:	e000      	b.n	80064b6 <tcp_close_shutdown_fin+0x8e>
      break;
 80064b4:	bf00      	nop
  }

  if (err == ERR_OK) {
 80064b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d103      	bne.n	80064c6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f004 fe42 	bl	800b148 <tcp_output>
 80064c4:	e00d      	b.n	80064e2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80064c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ce:	d108      	bne.n	80064e2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	8b5b      	ldrh	r3, [r3, #26]
 80064d4:	f043 0308 	orr.w	r3, r3, #8
 80064d8:	b29a      	uxth	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80064de:	2300      	movs	r3, #0
 80064e0:	e001      	b.n	80064e6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80064e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	08012090 	.word	0x08012090
 80064f4:	08012140 	.word	0x08012140
 80064f8:	080120d4 	.word	0x080120d4

080064fc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d109      	bne.n	800651e <tcp_close+0x22>
 800650a:	4b0f      	ldr	r3, [pc, #60]	@ (8006548 <tcp_close+0x4c>)
 800650c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8006510:	490e      	ldr	r1, [pc, #56]	@ (800654c <tcp_close+0x50>)
 8006512:	480f      	ldr	r0, [pc, #60]	@ (8006550 <tcp_close+0x54>)
 8006514:	f009 ff4a 	bl	80103ac <iprintf>
 8006518:	f06f 030f 	mvn.w	r3, #15
 800651c:	e00f      	b.n	800653e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	7d1b      	ldrb	r3, [r3, #20]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d006      	beq.n	8006534 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	8b5b      	ldrh	r3, [r3, #26]
 800652a:	f043 0310 	orr.w	r3, r3, #16
 800652e:	b29a      	uxth	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006534:	2101      	movs	r1, #1
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7ff fe94 	bl	8006264 <tcp_close_shutdown>
 800653c:	4603      	mov	r3, r0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	08012090 	.word	0x08012090
 800654c:	080121a0 	.word	0x080121a0
 8006550:	080120d4 	.word	0x080120d4

08006554 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b08e      	sub	sp, #56	@ 0x38
 8006558:	af04      	add	r7, sp, #16
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d107      	bne.n	8006574 <tcp_abandon+0x20>
 8006564:	4b52      	ldr	r3, [pc, #328]	@ (80066b0 <tcp_abandon+0x15c>)
 8006566:	f240 223d 	movw	r2, #573	@ 0x23d
 800656a:	4952      	ldr	r1, [pc, #328]	@ (80066b4 <tcp_abandon+0x160>)
 800656c:	4852      	ldr	r0, [pc, #328]	@ (80066b8 <tcp_abandon+0x164>)
 800656e:	f009 ff1d 	bl	80103ac <iprintf>
 8006572:	e099      	b.n	80066a8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	7d1b      	ldrb	r3, [r3, #20]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d106      	bne.n	800658a <tcp_abandon+0x36>
 800657c:	4b4c      	ldr	r3, [pc, #304]	@ (80066b0 <tcp_abandon+0x15c>)
 800657e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8006582:	494e      	ldr	r1, [pc, #312]	@ (80066bc <tcp_abandon+0x168>)
 8006584:	484c      	ldr	r0, [pc, #304]	@ (80066b8 <tcp_abandon+0x164>)
 8006586:	f009 ff11 	bl	80103ac <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	7d1b      	ldrb	r3, [r3, #20]
 800658e:	2b0a      	cmp	r3, #10
 8006590:	d107      	bne.n	80065a2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006592:	6879      	ldr	r1, [r7, #4]
 8006594:	484a      	ldr	r0, [pc, #296]	@ (80066c0 <tcp_abandon+0x16c>)
 8006596:	f001 f9c1 	bl	800791c <tcp_pcb_remove>
    tcp_free(pcb);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7ff fdb0 	bl	8006100 <tcp_free>
 80065a0:	e082      	b.n	80066a8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80065a2:	2300      	movs	r3, #0
 80065a4:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80065a6:	2300      	movs	r3, #0
 80065a8:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065ae:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065bc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	7d1b      	ldrb	r3, [r3, #20]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d126      	bne.n	800661a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	8adb      	ldrh	r3, [r3, #22]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d02e      	beq.n	8006632 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80065d4:	4b3b      	ldr	r3, [pc, #236]	@ (80066c4 <tcp_abandon+0x170>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d105      	bne.n	80065ea <tcp_abandon+0x96>
 80065de:	4b39      	ldr	r3, [pc, #228]	@ (80066c4 <tcp_abandon+0x170>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	4a37      	ldr	r2, [pc, #220]	@ (80066c4 <tcp_abandon+0x170>)
 80065e6:	6013      	str	r3, [r2, #0]
 80065e8:	e013      	b.n	8006612 <tcp_abandon+0xbe>
 80065ea:	4b36      	ldr	r3, [pc, #216]	@ (80066c4 <tcp_abandon+0x170>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	61fb      	str	r3, [r7, #28]
 80065f0:	e00c      	b.n	800660c <tcp_abandon+0xb8>
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d104      	bne.n	8006606 <tcp_abandon+0xb2>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	68da      	ldr	r2, [r3, #12]
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	60da      	str	r2, [r3, #12]
 8006604:	e005      	b.n	8006612 <tcp_abandon+0xbe>
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	61fb      	str	r3, [r7, #28]
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1ef      	bne.n	80065f2 <tcp_abandon+0x9e>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	60da      	str	r2, [r3, #12]
 8006618:	e00b      	b.n	8006632 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	8adb      	ldrh	r3, [r3, #22]
 8006622:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006624:	6879      	ldr	r1, [r7, #4]
 8006626:	4828      	ldr	r0, [pc, #160]	@ (80066c8 <tcp_abandon+0x174>)
 8006628:	f001 f978 	bl	800791c <tcp_pcb_remove>
 800662c:	4b27      	ldr	r3, [pc, #156]	@ (80066cc <tcp_abandon+0x178>)
 800662e:	2201      	movs	r2, #1
 8006630:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006636:	2b00      	cmp	r3, #0
 8006638:	d004      	beq.n	8006644 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800663e:	4618      	mov	r0, r3
 8006640:	f000 fed8 	bl	80073f4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006648:	2b00      	cmp	r3, #0
 800664a:	d004      	beq.n	8006656 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006650:	4618      	mov	r0, r3
 8006652:	f000 fecf 	bl	80073f4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800665a:	2b00      	cmp	r3, #0
 800665c:	d004      	beq.n	8006668 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006662:	4618      	mov	r0, r3
 8006664:	f000 fec6 	bl	80073f4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00e      	beq.n	800668c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800666e:	6879      	ldr	r1, [r7, #4]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	3304      	adds	r3, #4
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	8b12      	ldrh	r2, [r2, #24]
 8006678:	9202      	str	r2, [sp, #8]
 800667a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800667c:	9201      	str	r2, [sp, #4]
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	460b      	mov	r3, r1
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	69b9      	ldr	r1, [r7, #24]
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f005 fb12 	bl	800bcb0 <tcp_rst>
    }
    last_state = pcb->state;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	7d1b      	ldrb	r3, [r3, #20]
 8006690:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7ff fd34 	bl	8006100 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d004      	beq.n	80066a8 <tcp_abandon+0x154>
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	f06f 010c 	mvn.w	r1, #12
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	4798      	blx	r3
  }
}
 80066a8:	3728      	adds	r7, #40	@ 0x28
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	08012090 	.word	0x08012090
 80066b4:	080121d4 	.word	0x080121d4
 80066b8:	080120d4 	.word	0x080120d4
 80066bc:	080121f0 	.word	0x080121f0
 80066c0:	20008358 	.word	0x20008358
 80066c4:	2000834c 	.word	0x2000834c
 80066c8:	20008354 	.word	0x20008354
 80066cc:	2000835c 	.word	0x2000835c

080066d0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80066d8:	2101      	movs	r1, #1
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7ff ff3a 	bl	8006554 <tcp_abandon>
}
 80066e0:	bf00      	nop
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b088      	sub	sp, #32
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	4613      	mov	r3, r2
 80066f4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80066f6:	2304      	movs	r3, #4
 80066f8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8006700:	4b3e      	ldr	r3, [pc, #248]	@ (80067fc <tcp_bind+0x114>)
 8006702:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d109      	bne.n	800671e <tcp_bind+0x36>
 800670a:	4b3d      	ldr	r3, [pc, #244]	@ (8006800 <tcp_bind+0x118>)
 800670c:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8006710:	493c      	ldr	r1, [pc, #240]	@ (8006804 <tcp_bind+0x11c>)
 8006712:	483d      	ldr	r0, [pc, #244]	@ (8006808 <tcp_bind+0x120>)
 8006714:	f009 fe4a 	bl	80103ac <iprintf>
 8006718:	f06f 030f 	mvn.w	r3, #15
 800671c:	e06a      	b.n	80067f4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	7d1b      	ldrb	r3, [r3, #20]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d009      	beq.n	800673a <tcp_bind+0x52>
 8006726:	4b36      	ldr	r3, [pc, #216]	@ (8006800 <tcp_bind+0x118>)
 8006728:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800672c:	4937      	ldr	r1, [pc, #220]	@ (800680c <tcp_bind+0x124>)
 800672e:	4836      	ldr	r0, [pc, #216]	@ (8006808 <tcp_bind+0x120>)
 8006730:	f009 fe3c 	bl	80103ac <iprintf>
 8006734:	f06f 0305 	mvn.w	r3, #5
 8006738:	e05c      	b.n	80067f4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800673a:	88fb      	ldrh	r3, [r7, #6]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d109      	bne.n	8006754 <tcp_bind+0x6c>
    port = tcp_new_port();
 8006740:	f000 f9f0 	bl	8006b24 <tcp_new_port>
 8006744:	4603      	mov	r3, r0
 8006746:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8006748:	88fb      	ldrh	r3, [r7, #6]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d135      	bne.n	80067ba <tcp_bind+0xd2>
      return ERR_BUF;
 800674e:	f06f 0301 	mvn.w	r3, #1
 8006752:	e04f      	b.n	80067f4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8006754:	2300      	movs	r3, #0
 8006756:	61fb      	str	r3, [r7, #28]
 8006758:	e02b      	b.n	80067b2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800675a:	4a2d      	ldr	r2, [pc, #180]	@ (8006810 <tcp_bind+0x128>)
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	61bb      	str	r3, [r7, #24]
 8006766:	e01e      	b.n	80067a6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	8adb      	ldrh	r3, [r3, #22]
 800676c:	88fa      	ldrh	r2, [r7, #6]
 800676e:	429a      	cmp	r2, r3
 8006770:	d116      	bne.n	80067a0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8006772:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006774:	2b00      	cmp	r3, #0
 8006776:	d010      	beq.n	800679a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00c      	beq.n	800679a <tcp_bind+0xb2>
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d009      	beq.n	800679a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d005      	beq.n	800679a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006796:	429a      	cmp	r2, r3
 8006798:	d102      	bne.n	80067a0 <tcp_bind+0xb8>
              return ERR_USE;
 800679a:	f06f 0307 	mvn.w	r3, #7
 800679e:	e029      	b.n	80067f4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	61bb      	str	r3, [r7, #24]
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1dd      	bne.n	8006768 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	3301      	adds	r3, #1
 80067b0:	61fb      	str	r3, [r7, #28]
 80067b2:	69fa      	ldr	r2, [r7, #28]
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	dbcf      	blt.n	800675a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00c      	beq.n	80067da <tcp_bind+0xf2>
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d008      	beq.n	80067da <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d002      	beq.n	80067d4 <tcp_bind+0xec>
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	e000      	b.n	80067d6 <tcp_bind+0xee>
 80067d4:	2300      	movs	r3, #0
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	88fa      	ldrh	r2, [r7, #6]
 80067de:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80067e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006814 <tcp_bind+0x12c>)
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	60da      	str	r2, [r3, #12]
 80067e8:	4a0a      	ldr	r2, [pc, #40]	@ (8006814 <tcp_bind+0x12c>)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6013      	str	r3, [r2, #0]
 80067ee:	f005 fc21 	bl	800c034 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3720      	adds	r7, #32
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	080141b4 	.word	0x080141b4
 8006800:	08012090 	.word	0x08012090
 8006804:	08012224 	.word	0x08012224
 8006808:	080120d4 	.word	0x080120d4
 800680c:	0801223c 	.word	0x0801223c
 8006810:	0801418c 	.word	0x0801418c
 8006814:	2000834c 	.word	0x2000834c

08006818 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	4613      	mov	r3, r2
 8006824:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d106      	bne.n	800683a <tcp_accept_null+0x22>
 800682c:	4b07      	ldr	r3, [pc, #28]	@ (800684c <tcp_accept_null+0x34>)
 800682e:	f240 320f 	movw	r2, #783	@ 0x30f
 8006832:	4907      	ldr	r1, [pc, #28]	@ (8006850 <tcp_accept_null+0x38>)
 8006834:	4807      	ldr	r0, [pc, #28]	@ (8006854 <tcp_accept_null+0x3c>)
 8006836:	f009 fdb9 	bl	80103ac <iprintf>

  tcp_abort(pcb);
 800683a:	68b8      	ldr	r0, [r7, #8]
 800683c:	f7ff ff48 	bl	80066d0 <tcp_abort>

  return ERR_ABRT;
 8006840:	f06f 030c 	mvn.w	r3, #12
}
 8006844:	4618      	mov	r0, r3
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	08012090 	.word	0x08012090
 8006850:	08012264 	.word	0x08012264
 8006854:	080120d4 	.word	0x080120d4

08006858 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	460b      	mov	r3, r1
 8006862:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8006864:	78fb      	ldrb	r3, [r7, #3]
 8006866:	2200      	movs	r2, #0
 8006868:	4619      	mov	r1, r3
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f806 	bl	800687c <tcp_listen_with_backlog_and_err>
 8006870:	4603      	mov	r3, r0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3708      	adds	r7, #8
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
	...

0800687c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b088      	sub	sp, #32
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	460b      	mov	r3, r1
 8006886:	607a      	str	r2, [r7, #4]
 8006888:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800688a:	2300      	movs	r3, #0
 800688c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d109      	bne.n	80068a8 <tcp_listen_with_backlog_and_err+0x2c>
 8006894:	4b47      	ldr	r3, [pc, #284]	@ (80069b4 <tcp_listen_with_backlog_and_err+0x138>)
 8006896:	f240 3259 	movw	r2, #857	@ 0x359
 800689a:	4947      	ldr	r1, [pc, #284]	@ (80069b8 <tcp_listen_with_backlog_and_err+0x13c>)
 800689c:	4847      	ldr	r0, [pc, #284]	@ (80069bc <tcp_listen_with_backlog_and_err+0x140>)
 800689e:	f009 fd85 	bl	80103ac <iprintf>
 80068a2:	23f0      	movs	r3, #240	@ 0xf0
 80068a4:	76fb      	strb	r3, [r7, #27]
 80068a6:	e079      	b.n	800699c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	7d1b      	ldrb	r3, [r3, #20]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d009      	beq.n	80068c4 <tcp_listen_with_backlog_and_err+0x48>
 80068b0:	4b40      	ldr	r3, [pc, #256]	@ (80069b4 <tcp_listen_with_backlog_and_err+0x138>)
 80068b2:	f240 325a 	movw	r2, #858	@ 0x35a
 80068b6:	4942      	ldr	r1, [pc, #264]	@ (80069c0 <tcp_listen_with_backlog_and_err+0x144>)
 80068b8:	4840      	ldr	r0, [pc, #256]	@ (80069bc <tcp_listen_with_backlog_and_err+0x140>)
 80068ba:	f009 fd77 	bl	80103ac <iprintf>
 80068be:	23f1      	movs	r3, #241	@ 0xf1
 80068c0:	76fb      	strb	r3, [r7, #27]
 80068c2:	e06b      	b.n	800699c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	7d1b      	ldrb	r3, [r3, #20]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d104      	bne.n	80068d6 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80068d0:	23f7      	movs	r3, #247	@ 0xf7
 80068d2:	76fb      	strb	r3, [r7, #27]
    goto done;
 80068d4:	e062      	b.n	800699c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80068d6:	2002      	movs	r0, #2
 80068d8:	f7fe fa8c 	bl	8004df4 <memp_malloc>
 80068dc:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d102      	bne.n	80068ea <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80068e4:	23ff      	movs	r3, #255	@ 0xff
 80068e6:	76fb      	strb	r3, [r7, #27]
    goto done;
 80068e8:	e058      	b.n	800699c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	691a      	ldr	r2, [r3, #16]
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	8ada      	ldrh	r2, [r3, #22]
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	2201      	movs	r2, #1
 80068fe:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	7d5a      	ldrb	r2, [r3, #21]
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	7a5a      	ldrb	r2, [r3, #9]
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	2200      	movs	r2, #0
 8006914:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	7ada      	ldrb	r2, [r3, #11]
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	7a9a      	ldrb	r2, [r3, #10]
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	8adb      	ldrh	r3, [r3, #22]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d021      	beq.n	800697a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8006936:	4b23      	ldr	r3, [pc, #140]	@ (80069c4 <tcp_listen_with_backlog_and_err+0x148>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	429a      	cmp	r2, r3
 800693e:	d105      	bne.n	800694c <tcp_listen_with_backlog_and_err+0xd0>
 8006940:	4b20      	ldr	r3, [pc, #128]	@ (80069c4 <tcp_listen_with_backlog_and_err+0x148>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	4a1f      	ldr	r2, [pc, #124]	@ (80069c4 <tcp_listen_with_backlog_and_err+0x148>)
 8006948:	6013      	str	r3, [r2, #0]
 800694a:	e013      	b.n	8006974 <tcp_listen_with_backlog_and_err+0xf8>
 800694c:	4b1d      	ldr	r3, [pc, #116]	@ (80069c4 <tcp_listen_with_backlog_and_err+0x148>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	617b      	str	r3, [r7, #20]
 8006952:	e00c      	b.n	800696e <tcp_listen_with_backlog_and_err+0xf2>
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	429a      	cmp	r2, r3
 800695c:	d104      	bne.n	8006968 <tcp_listen_with_backlog_and_err+0xec>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	68da      	ldr	r2, [r3, #12]
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	60da      	str	r2, [r3, #12]
 8006966:	e005      	b.n	8006974 <tcp_listen_with_backlog_and_err+0xf8>
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	617b      	str	r3, [r7, #20]
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1ef      	bne.n	8006954 <tcp_listen_with_backlog_and_err+0xd8>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f7ff fbc0 	bl	8006100 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	4a11      	ldr	r2, [pc, #68]	@ (80069c8 <tcp_listen_with_backlog_and_err+0x14c>)
 8006984:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8006986:	4b11      	ldr	r3, [pc, #68]	@ (80069cc <tcp_listen_with_backlog_and_err+0x150>)
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	60da      	str	r2, [r3, #12]
 800698e:	4a0f      	ldr	r2, [pc, #60]	@ (80069cc <tcp_listen_with_backlog_and_err+0x150>)
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	6013      	str	r3, [r2, #0]
 8006994:	f005 fb4e 	bl	800c034 <tcp_timer_needed>
  res = ERR_OK;
 8006998:	2300      	movs	r3, #0
 800699a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d002      	beq.n	80069a8 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	7efa      	ldrb	r2, [r7, #27]
 80069a6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80069a8:	69fb      	ldr	r3, [r7, #28]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3720      	adds	r7, #32
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	08012090 	.word	0x08012090
 80069b8:	08012284 	.word	0x08012284
 80069bc:	080120d4 	.word	0x080120d4
 80069c0:	080122b4 	.word	0x080122b4
 80069c4:	2000834c 	.word	0x2000834c
 80069c8:	08006819 	.word	0x08006819
 80069cc:	20008350 	.word	0x20008350

080069d0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d106      	bne.n	80069ec <tcp_update_rcv_ann_wnd+0x1c>
 80069de:	4b25      	ldr	r3, [pc, #148]	@ (8006a74 <tcp_update_rcv_ann_wnd+0xa4>)
 80069e0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80069e4:	4924      	ldr	r1, [pc, #144]	@ (8006a78 <tcp_update_rcv_ann_wnd+0xa8>)
 80069e6:	4825      	ldr	r0, [pc, #148]	@ (8006a7c <tcp_update_rcv_ann_wnd+0xac>)
 80069e8:	f009 fce0 	bl	80103ac <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80069f4:	4413      	add	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8006a00:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8006a04:	bf28      	it	cs
 8006a06:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8006a0a:	b292      	uxth	r2, r2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	db08      	blt.n	8006a28 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	e020      	b.n	8006a6a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	dd03      	ble.n	8006a3e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006a3c:	e014      	b.n	8006a68 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a50:	d306      	bcc.n	8006a60 <tcp_update_rcv_ann_wnd+0x90>
 8006a52:	4b08      	ldr	r3, [pc, #32]	@ (8006a74 <tcp_update_rcv_ann_wnd+0xa4>)
 8006a54:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8006a58:	4909      	ldr	r1, [pc, #36]	@ (8006a80 <tcp_update_rcv_ann_wnd+0xb0>)
 8006a5a:	4808      	ldr	r0, [pc, #32]	@ (8006a7c <tcp_update_rcv_ann_wnd+0xac>)
 8006a5c:	f009 fca6 	bl	80103ac <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8006a68:	2300      	movs	r3, #0
  }
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	08012090 	.word	0x08012090
 8006a78:	080122ec 	.word	0x080122ec
 8006a7c:	080120d4 	.word	0x080120d4
 8006a80:	08012310 	.word	0x08012310

08006a84 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d107      	bne.n	8006aa6 <tcp_recved+0x22>
 8006a96:	4b1f      	ldr	r3, [pc, #124]	@ (8006b14 <tcp_recved+0x90>)
 8006a98:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8006a9c:	491e      	ldr	r1, [pc, #120]	@ (8006b18 <tcp_recved+0x94>)
 8006a9e:	481f      	ldr	r0, [pc, #124]	@ (8006b1c <tcp_recved+0x98>)
 8006aa0:	f009 fc84 	bl	80103ac <iprintf>
 8006aa4:	e032      	b.n	8006b0c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	7d1b      	ldrb	r3, [r3, #20]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d106      	bne.n	8006abc <tcp_recved+0x38>
 8006aae:	4b19      	ldr	r3, [pc, #100]	@ (8006b14 <tcp_recved+0x90>)
 8006ab0:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8006ab4:	491a      	ldr	r1, [pc, #104]	@ (8006b20 <tcp_recved+0x9c>)
 8006ab6:	4819      	ldr	r0, [pc, #100]	@ (8006b1c <tcp_recved+0x98>)
 8006ab8:	f009 fc78 	bl	80103ac <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8006ac0:	887b      	ldrh	r3, [r7, #2]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006ac6:	89fb      	ldrh	r3, [r7, #14]
 8006ac8:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8006acc:	d804      	bhi.n	8006ad8 <tcp_recved+0x54>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ad2:	89fa      	ldrh	r2, [r7, #14]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d204      	bcs.n	8006ae2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8006ade:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006ae0:	e002      	b.n	8006ae8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	89fa      	ldrh	r2, [r7, #14]
 8006ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f7ff ff71 	bl	80069d0 <tcp_update_rcv_ann_wnd>
 8006aee:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8006af6:	d309      	bcc.n	8006b0c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	8b5b      	ldrh	r3, [r3, #26]
 8006afc:	f043 0302 	orr.w	r3, r3, #2
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f004 fb1e 	bl	800b148 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	08012090 	.word	0x08012090
 8006b18:	0801232c 	.word	0x0801232c
 8006b1c:	080120d4 	.word	0x080120d4
 8006b20:	08012344 	.word	0x08012344

08006b24 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8006b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8006ba8 <tcp_new_port+0x84>)
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	3301      	adds	r3, #1
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	4b1c      	ldr	r3, [pc, #112]	@ (8006ba8 <tcp_new_port+0x84>)
 8006b38:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8006b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8006ba8 <tcp_new_port+0x84>)
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d103      	bne.n	8006b4e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8006b46:	4b18      	ldr	r3, [pc, #96]	@ (8006ba8 <tcp_new_port+0x84>)
 8006b48:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8006b4c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006b4e:	2300      	movs	r3, #0
 8006b50:	71fb      	strb	r3, [r7, #7]
 8006b52:	e01e      	b.n	8006b92 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006b54:	79fb      	ldrb	r3, [r7, #7]
 8006b56:	4a15      	ldr	r2, [pc, #84]	@ (8006bac <tcp_new_port+0x88>)
 8006b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	603b      	str	r3, [r7, #0]
 8006b60:	e011      	b.n	8006b86 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	8ada      	ldrh	r2, [r3, #22]
 8006b66:	4b10      	ldr	r3, [pc, #64]	@ (8006ba8 <tcp_new_port+0x84>)
 8006b68:	881b      	ldrh	r3, [r3, #0]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d108      	bne.n	8006b80 <tcp_new_port+0x5c>
        n++;
 8006b6e:	88bb      	ldrh	r3, [r7, #4]
 8006b70:	3301      	adds	r3, #1
 8006b72:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8006b74:	88bb      	ldrh	r3, [r7, #4]
 8006b76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b7a:	d3d8      	bcc.n	8006b2e <tcp_new_port+0xa>
          return 0;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	e00d      	b.n	8006b9c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	603b      	str	r3, [r7, #0]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1ea      	bne.n	8006b62 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006b8c:	79fb      	ldrb	r3, [r7, #7]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	71fb      	strb	r3, [r7, #7]
 8006b92:	79fb      	ldrb	r3, [r7, #7]
 8006b94:	2b03      	cmp	r3, #3
 8006b96:	d9dd      	bls.n	8006b54 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8006b98:	4b03      	ldr	r3, [pc, #12]	@ (8006ba8 <tcp_new_port+0x84>)
 8006b9a:	881b      	ldrh	r3, [r3, #0]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr
 8006ba8:	20000020 	.word	0x20000020
 8006bac:	0801418c 	.word	0x0801418c

08006bb0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006bb0:	b5b0      	push	{r4, r5, r7, lr}
 8006bb2:	b090      	sub	sp, #64	@ 0x40
 8006bb4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8006bbc:	4b95      	ldr	r3, [pc, #596]	@ (8006e14 <tcp_slowtmr+0x264>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	4a94      	ldr	r2, [pc, #592]	@ (8006e14 <tcp_slowtmr+0x264>)
 8006bc4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006bc6:	4b94      	ldr	r3, [pc, #592]	@ (8006e18 <tcp_slowtmr+0x268>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	4b92      	ldr	r3, [pc, #584]	@ (8006e18 <tcp_slowtmr+0x268>)
 8006bd0:	701a      	strb	r2, [r3, #0]
 8006bd2:	e000      	b.n	8006bd6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8006bd4:	bf00      	nop
  prev = NULL;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8006bda:	4b90      	ldr	r3, [pc, #576]	@ (8006e1c <tcp_slowtmr+0x26c>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8006be0:	e29f      	b.n	8007122 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006be4:	7d1b      	ldrb	r3, [r3, #20]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d106      	bne.n	8006bf8 <tcp_slowtmr+0x48>
 8006bea:	4b8d      	ldr	r3, [pc, #564]	@ (8006e20 <tcp_slowtmr+0x270>)
 8006bec:	f240 42be 	movw	r2, #1214	@ 0x4be
 8006bf0:	498c      	ldr	r1, [pc, #560]	@ (8006e24 <tcp_slowtmr+0x274>)
 8006bf2:	488d      	ldr	r0, [pc, #564]	@ (8006e28 <tcp_slowtmr+0x278>)
 8006bf4:	f009 fbda 	bl	80103ac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bfa:	7d1b      	ldrb	r3, [r3, #20]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d106      	bne.n	8006c0e <tcp_slowtmr+0x5e>
 8006c00:	4b87      	ldr	r3, [pc, #540]	@ (8006e20 <tcp_slowtmr+0x270>)
 8006c02:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8006c06:	4989      	ldr	r1, [pc, #548]	@ (8006e2c <tcp_slowtmr+0x27c>)
 8006c08:	4887      	ldr	r0, [pc, #540]	@ (8006e28 <tcp_slowtmr+0x278>)
 8006c0a:	f009 fbcf 	bl	80103ac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c10:	7d1b      	ldrb	r3, [r3, #20]
 8006c12:	2b0a      	cmp	r3, #10
 8006c14:	d106      	bne.n	8006c24 <tcp_slowtmr+0x74>
 8006c16:	4b82      	ldr	r3, [pc, #520]	@ (8006e20 <tcp_slowtmr+0x270>)
 8006c18:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8006c1c:	4984      	ldr	r1, [pc, #528]	@ (8006e30 <tcp_slowtmr+0x280>)
 8006c1e:	4882      	ldr	r0, [pc, #520]	@ (8006e28 <tcp_slowtmr+0x278>)
 8006c20:	f009 fbc4 	bl	80103ac <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c26:	7f9a      	ldrb	r2, [r3, #30]
 8006c28:	4b7b      	ldr	r3, [pc, #492]	@ (8006e18 <tcp_slowtmr+0x268>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d105      	bne.n	8006c3c <tcp_slowtmr+0x8c>
      prev = pcb;
 8006c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c32:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8006c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8006c3a:	e272      	b.n	8007122 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8006c3c:	4b76      	ldr	r3, [pc, #472]	@ (8006e18 <tcp_slowtmr+0x268>)
 8006c3e:	781a      	ldrb	r2, [r3, #0]
 8006c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c42:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8006c44:	2300      	movs	r3, #0
 8006c46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c52:	7d1b      	ldrb	r3, [r3, #20]
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d10a      	bne.n	8006c6e <tcp_slowtmr+0xbe>
 8006c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c5e:	2b05      	cmp	r3, #5
 8006c60:	d905      	bls.n	8006c6e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8006c62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c66:	3301      	adds	r3, #1
 8006c68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006c6c:	e11e      	b.n	8006eac <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c74:	2b0b      	cmp	r3, #11
 8006c76:	d905      	bls.n	8006c84 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8006c78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006c82:	e113      	b.n	8006eac <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8006c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c86:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d075      	beq.n	8006d7a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d006      	beq.n	8006ca4 <tcp_slowtmr+0xf4>
 8006c96:	4b62      	ldr	r3, [pc, #392]	@ (8006e20 <tcp_slowtmr+0x270>)
 8006c98:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8006c9c:	4965      	ldr	r1, [pc, #404]	@ (8006e34 <tcp_slowtmr+0x284>)
 8006c9e:	4862      	ldr	r0, [pc, #392]	@ (8006e28 <tcp_slowtmr+0x278>)
 8006ca0:	f009 fb84 	bl	80103ac <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ca6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d106      	bne.n	8006cba <tcp_slowtmr+0x10a>
 8006cac:	4b5c      	ldr	r3, [pc, #368]	@ (8006e20 <tcp_slowtmr+0x270>)
 8006cae:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8006cb2:	4961      	ldr	r1, [pc, #388]	@ (8006e38 <tcp_slowtmr+0x288>)
 8006cb4:	485c      	ldr	r0, [pc, #368]	@ (8006e28 <tcp_slowtmr+0x278>)
 8006cb6:	f009 fb79 	bl	80103ac <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8006cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cbc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8006cc0:	2b0b      	cmp	r3, #11
 8006cc2:	d905      	bls.n	8006cd0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8006cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006cc8:	3301      	adds	r3, #1
 8006cca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006cce:	e0ed      	b.n	8006eac <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	4a58      	ldr	r2, [pc, #352]	@ (8006e3c <tcp_slowtmr+0x28c>)
 8006cda:	5cd3      	ldrb	r3, [r2, r3]
 8006cdc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006ce4:	7c7a      	ldrb	r2, [r7, #17]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d907      	bls.n	8006cfa <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8006cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cec:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	b2da      	uxtb	r2, r3
 8006cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8006cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cfc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006d00:	7c7a      	ldrb	r2, [r7, #17]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	f200 80d2 	bhi.w	8006eac <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8006d08:	2301      	movs	r3, #1
 8006d0a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8006d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d108      	bne.n	8006d28 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8006d16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d18:	f005 f8be 	bl	800be98 <tcp_zero_window_probe>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d014      	beq.n	8006d4c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8006d22:	2300      	movs	r3, #0
 8006d24:	623b      	str	r3, [r7, #32]
 8006d26:	e011      	b.n	8006d4c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d32:	f003 ff83 	bl	800ac3c <tcp_split_unsent_seg>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d107      	bne.n	8006d4c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8006d3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d3e:	f004 fa03 	bl	800b148 <tcp_output>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d101      	bne.n	8006d4c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8006d4c:	6a3b      	ldr	r3, [r7, #32]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f000 80ac 	beq.w	8006eac <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8006d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d5e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8006d62:	2b06      	cmp	r3, #6
 8006d64:	f200 80a2 	bhi.w	8006eac <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8006d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d6a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8006d6e:	3301      	adds	r3, #1
 8006d70:	b2da      	uxtb	r2, r3
 8006d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d74:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8006d78:	e098      	b.n	8006eac <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d7c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	db0f      	blt.n	8006da4 <tcp_slowtmr+0x1f4>
 8006d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d86:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006d8a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d008      	beq.n	8006da4 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8006d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d94:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	b21a      	sxth	r2, r3
 8006da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da2:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8006da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8006daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dac:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8006db0:	429a      	cmp	r2, r3
 8006db2:	db7b      	blt.n	8006eac <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006db4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006db6:	f004 fcbb 	bl	800b730 <tcp_rexmit_rto_prepare>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d007      	beq.n	8006dd0 <tcp_slowtmr+0x220>
 8006dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d171      	bne.n	8006eac <tcp_slowtmr+0x2fc>
 8006dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d06d      	beq.n	8006eac <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8006dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dd2:	7d1b      	ldrb	r3, [r3, #20]
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d03a      	beq.n	8006e4e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006dde:	2b0c      	cmp	r3, #12
 8006de0:	bf28      	it	cs
 8006de2:	230c      	movcs	r3, #12
 8006de4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8006dec:	10db      	asrs	r3, r3, #3
 8006dee:	b21b      	sxth	r3, r3
 8006df0:	461a      	mov	r2, r3
 8006df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006df4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8006df8:	4413      	add	r3, r2
 8006dfa:	7efa      	ldrb	r2, [r7, #27]
 8006dfc:	4910      	ldr	r1, [pc, #64]	@ (8006e40 <tcp_slowtmr+0x290>)
 8006dfe:	5c8a      	ldrb	r2, [r1, r2]
 8006e00:	4093      	lsls	r3, r2
 8006e02:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	dc1a      	bgt.n	8006e44 <tcp_slowtmr+0x294>
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	b21a      	sxth	r2, r3
 8006e12:	e019      	b.n	8006e48 <tcp_slowtmr+0x298>
 8006e14:	20008348 	.word	0x20008348
 8006e18:	2000835e 	.word	0x2000835e
 8006e1c:	20008354 	.word	0x20008354
 8006e20:	08012090 	.word	0x08012090
 8006e24:	080123d4 	.word	0x080123d4
 8006e28:	080120d4 	.word	0x080120d4
 8006e2c:	08012400 	.word	0x08012400
 8006e30:	0801242c 	.word	0x0801242c
 8006e34:	0801245c 	.word	0x0801245c
 8006e38:	08012490 	.word	0x08012490
 8006e3c:	08014184 	.word	0x08014184
 8006e40:	08014174 	.word	0x08014174
 8006e44:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8006e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e4a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8006e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e50:	2200      	movs	r2, #0
 8006e52:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e56:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8006e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e5c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8006e60:	4293      	cmp	r3, r2
 8006e62:	bf28      	it	cs
 8006e64:	4613      	movcs	r3, r2
 8006e66:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006e68:	8a7b      	ldrh	r3, [r7, #18]
 8006e6a:	085b      	lsrs	r3, r3, #1
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e70:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e76:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8006e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e7c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006e7e:	005b      	lsls	r3, r3, #1
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d206      	bcs.n	8006e94 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e88:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006e8a:	005b      	lsls	r3, r3, #1
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e90:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8006e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e96:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8006e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e9a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8006e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8006ea6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ea8:	f004 fcb2 	bl	800b810 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8006eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eae:	7d1b      	ldrb	r3, [r3, #20]
 8006eb0:	2b06      	cmp	r3, #6
 8006eb2:	d111      	bne.n	8006ed8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8006eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eb6:	8b5b      	ldrh	r3, [r3, #26]
 8006eb8:	f003 0310 	and.w	r3, r3, #16
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00b      	beq.n	8006ed8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006ec0:	4b9d      	ldr	r3, [pc, #628]	@ (8007138 <tcp_slowtmr+0x588>)
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec6:	6a1b      	ldr	r3, [r3, #32]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b28      	cmp	r3, #40	@ 0x28
 8006ecc:	d904      	bls.n	8006ed8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8006ece:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eda:	7a5b      	ldrb	r3, [r3, #9]
 8006edc:	f003 0308 	and.w	r3, r3, #8
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d04c      	beq.n	8006f7e <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8006ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ee6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006ee8:	2b04      	cmp	r3, #4
 8006eea:	d003      	beq.n	8006ef4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8006eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eee:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006ef0:	2b07      	cmp	r3, #7
 8006ef2:	d144      	bne.n	8006f7e <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006ef4:	4b90      	ldr	r3, [pc, #576]	@ (8007138 <tcp_slowtmr+0x588>)
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006efa:	6a1b      	ldr	r3, [r3, #32]
 8006efc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f04:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8006f08:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8006f0c:	498b      	ldr	r1, [pc, #556]	@ (800713c <tcp_slowtmr+0x58c>)
 8006f0e:	fba1 1303 	umull	r1, r3, r1, r3
 8006f12:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d90a      	bls.n	8006f2e <tcp_slowtmr+0x37e>
        ++pcb_remove;
 8006f18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8006f22:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006f26:	3301      	adds	r3, #1
 8006f28:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006f2c:	e027      	b.n	8006f7e <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006f2e:	4b82      	ldr	r3, [pc, #520]	@ (8007138 <tcp_slowtmr+0x588>)
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f3a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8006f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f40:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8006f44:	4618      	mov	r0, r3
 8006f46:	4b7e      	ldr	r3, [pc, #504]	@ (8007140 <tcp_slowtmr+0x590>)
 8006f48:	fb00 f303 	mul.w	r3, r0, r3
 8006f4c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8006f4e:	497b      	ldr	r1, [pc, #492]	@ (800713c <tcp_slowtmr+0x58c>)
 8006f50:	fba1 1303 	umull	r1, r3, r1, r3
 8006f54:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d911      	bls.n	8006f7e <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 8006f5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f5c:	f004 ff5c 	bl	800be18 <tcp_keepalive>
 8006f60:	4603      	mov	r3, r0
 8006f62:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8006f66:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d107      	bne.n	8006f7e <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 8006f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f70:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8006f74:	3301      	adds	r3, #1
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f7a:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8006f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d011      	beq.n	8006faa <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8006f86:	4b6c      	ldr	r3, [pc, #432]	@ (8007138 <tcp_slowtmr+0x588>)
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	1ad2      	subs	r2, r2, r3
 8006f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f92:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8006f96:	4619      	mov	r1, r3
 8006f98:	460b      	mov	r3, r1
 8006f9a:	005b      	lsls	r3, r3, #1
 8006f9c:	440b      	add	r3, r1
 8006f9e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d302      	bcc.n	8006faa <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8006fa4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006fa6:	f000 fe1d 	bl	8007be4 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8006faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fac:	7d1b      	ldrb	r3, [r3, #20]
 8006fae:	2b03      	cmp	r3, #3
 8006fb0:	d10b      	bne.n	8006fca <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006fb2:	4b61      	ldr	r3, [pc, #388]	@ (8007138 <tcp_slowtmr+0x588>)
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	2b28      	cmp	r3, #40	@ 0x28
 8006fbe:	d904      	bls.n	8006fca <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8006fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8006fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fcc:	7d1b      	ldrb	r3, [r3, #20]
 8006fce:	2b09      	cmp	r3, #9
 8006fd0:	d10b      	bne.n	8006fea <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006fd2:	4b59      	ldr	r3, [pc, #356]	@ (8007138 <tcp_slowtmr+0x588>)
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	2bf0      	cmp	r3, #240	@ 0xf0
 8006fde:	d904      	bls.n	8006fea <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8006fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8006fea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d060      	beq.n	80070b4 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8006ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ff8:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8006ffa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ffc:	f000 fc3e 	bl	800787c <tcp_pcb_purge>
      if (prev != NULL) {
 8007000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007002:	2b00      	cmp	r3, #0
 8007004:	d010      	beq.n	8007028 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007006:	4b4f      	ldr	r3, [pc, #316]	@ (8007144 <tcp_slowtmr+0x594>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800700c:	429a      	cmp	r2, r3
 800700e:	d106      	bne.n	800701e <tcp_slowtmr+0x46e>
 8007010:	4b4d      	ldr	r3, [pc, #308]	@ (8007148 <tcp_slowtmr+0x598>)
 8007012:	f240 526d 	movw	r2, #1389	@ 0x56d
 8007016:	494d      	ldr	r1, [pc, #308]	@ (800714c <tcp_slowtmr+0x59c>)
 8007018:	484d      	ldr	r0, [pc, #308]	@ (8007150 <tcp_slowtmr+0x5a0>)
 800701a:	f009 f9c7 	bl	80103ac <iprintf>
        prev->next = pcb->next;
 800701e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007020:	68da      	ldr	r2, [r3, #12]
 8007022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007024:	60da      	str	r2, [r3, #12]
 8007026:	e00f      	b.n	8007048 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007028:	4b46      	ldr	r3, [pc, #280]	@ (8007144 <tcp_slowtmr+0x594>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800702e:	429a      	cmp	r2, r3
 8007030:	d006      	beq.n	8007040 <tcp_slowtmr+0x490>
 8007032:	4b45      	ldr	r3, [pc, #276]	@ (8007148 <tcp_slowtmr+0x598>)
 8007034:	f240 5271 	movw	r2, #1393	@ 0x571
 8007038:	4946      	ldr	r1, [pc, #280]	@ (8007154 <tcp_slowtmr+0x5a4>)
 800703a:	4845      	ldr	r0, [pc, #276]	@ (8007150 <tcp_slowtmr+0x5a0>)
 800703c:	f009 f9b6 	bl	80103ac <iprintf>
        tcp_active_pcbs = pcb->next;
 8007040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	4a3f      	ldr	r2, [pc, #252]	@ (8007144 <tcp_slowtmr+0x594>)
 8007046:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8007048:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800704c:	2b00      	cmp	r3, #0
 800704e:	d013      	beq.n	8007078 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007052:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8007054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007056:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007058:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800705a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800705c:	3304      	adds	r3, #4
 800705e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007060:	8ad2      	ldrh	r2, [r2, #22]
 8007062:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007064:	8b09      	ldrh	r1, [r1, #24]
 8007066:	9102      	str	r1, [sp, #8]
 8007068:	9201      	str	r2, [sp, #4]
 800706a:	9300      	str	r3, [sp, #0]
 800706c:	462b      	mov	r3, r5
 800706e:	4622      	mov	r2, r4
 8007070:	4601      	mov	r1, r0
 8007072:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007074:	f004 fe1c 	bl	800bcb0 <tcp_rst>
      err_arg = pcb->callback_arg;
 8007078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800707e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007080:	7d1b      	ldrb	r3, [r3, #20]
 8007082:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007086:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800708e:	6838      	ldr	r0, [r7, #0]
 8007090:	f7ff f836 	bl	8006100 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8007094:	4b30      	ldr	r3, [pc, #192]	@ (8007158 <tcp_slowtmr+0x5a8>)
 8007096:	2200      	movs	r2, #0
 8007098:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d004      	beq.n	80070aa <tcp_slowtmr+0x4fa>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f06f 010c 	mvn.w	r1, #12
 80070a6:	68b8      	ldr	r0, [r7, #8]
 80070a8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80070aa:	4b2b      	ldr	r3, [pc, #172]	@ (8007158 <tcp_slowtmr+0x5a8>)
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d037      	beq.n	8007122 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 80070b2:	e590      	b.n	8006bd6 <tcp_slowtmr+0x26>
      prev = pcb;
 80070b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80070b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80070be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c0:	7f1b      	ldrb	r3, [r3, #28]
 80070c2:	3301      	adds	r3, #1
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80070ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070cc:	7f1a      	ldrb	r2, [r3, #28]
 80070ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d0:	7f5b      	ldrb	r3, [r3, #29]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d325      	bcc.n	8007122 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 80070d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d8:	2200      	movs	r2, #0
 80070da:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80070dc:	4b1e      	ldr	r3, [pc, #120]	@ (8007158 <tcp_slowtmr+0x5a8>)
 80070de:	2200      	movs	r2, #0
 80070e0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80070e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00b      	beq.n	8007104 <tcp_slowtmr+0x554>
 80070ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070f4:	6912      	ldr	r2, [r2, #16]
 80070f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070f8:	4610      	mov	r0, r2
 80070fa:	4798      	blx	r3
 80070fc:	4603      	mov	r3, r0
 80070fe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8007102:	e002      	b.n	800710a <tcp_slowtmr+0x55a>
 8007104:	2300      	movs	r3, #0
 8007106:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800710a:	4b13      	ldr	r3, [pc, #76]	@ (8007158 <tcp_slowtmr+0x5a8>)
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	f47f ad60 	bne.w	8006bd4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007114:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8007118:	2b00      	cmp	r3, #0
 800711a:	d102      	bne.n	8007122 <tcp_slowtmr+0x572>
          tcp_output(prev);
 800711c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800711e:	f004 f813 	bl	800b148 <tcp_output>
  while (pcb != NULL) {
 8007122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007124:	2b00      	cmp	r3, #0
 8007126:	f47f ad5c 	bne.w	8006be2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800712a:	2300      	movs	r3, #0
 800712c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800712e:	4b0b      	ldr	r3, [pc, #44]	@ (800715c <tcp_slowtmr+0x5ac>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8007134:	e067      	b.n	8007206 <tcp_slowtmr+0x656>
 8007136:	bf00      	nop
 8007138:	20008348 	.word	0x20008348
 800713c:	10624dd3 	.word	0x10624dd3
 8007140:	000124f8 	.word	0x000124f8
 8007144:	20008354 	.word	0x20008354
 8007148:	08012090 	.word	0x08012090
 800714c:	080124c8 	.word	0x080124c8
 8007150:	080120d4 	.word	0x080120d4
 8007154:	080124f4 	.word	0x080124f4
 8007158:	2000835c 	.word	0x2000835c
 800715c:	20008358 	.word	0x20008358
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007162:	7d1b      	ldrb	r3, [r3, #20]
 8007164:	2b0a      	cmp	r3, #10
 8007166:	d006      	beq.n	8007176 <tcp_slowtmr+0x5c6>
 8007168:	4b2b      	ldr	r3, [pc, #172]	@ (8007218 <tcp_slowtmr+0x668>)
 800716a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800716e:	492b      	ldr	r1, [pc, #172]	@ (800721c <tcp_slowtmr+0x66c>)
 8007170:	482b      	ldr	r0, [pc, #172]	@ (8007220 <tcp_slowtmr+0x670>)
 8007172:	f009 f91b 	bl	80103ac <iprintf>
    pcb_remove = 0;
 8007176:	2300      	movs	r3, #0
 8007178:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800717c:	4b29      	ldr	r3, [pc, #164]	@ (8007224 <tcp_slowtmr+0x674>)
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007182:	6a1b      	ldr	r3, [r3, #32]
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	2bf0      	cmp	r3, #240	@ 0xf0
 8007188:	d904      	bls.n	8007194 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800718a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800718e:	3301      	adds	r3, #1
 8007190:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007194:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007198:	2b00      	cmp	r3, #0
 800719a:	d02f      	beq.n	80071fc <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800719c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800719e:	f000 fb6d 	bl	800787c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80071a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d010      	beq.n	80071ca <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80071a8:	4b1f      	ldr	r3, [pc, #124]	@ (8007228 <tcp_slowtmr+0x678>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d106      	bne.n	80071c0 <tcp_slowtmr+0x610>
 80071b2:	4b19      	ldr	r3, [pc, #100]	@ (8007218 <tcp_slowtmr+0x668>)
 80071b4:	f240 52af 	movw	r2, #1455	@ 0x5af
 80071b8:	491c      	ldr	r1, [pc, #112]	@ (800722c <tcp_slowtmr+0x67c>)
 80071ba:	4819      	ldr	r0, [pc, #100]	@ (8007220 <tcp_slowtmr+0x670>)
 80071bc:	f009 f8f6 	bl	80103ac <iprintf>
        prev->next = pcb->next;
 80071c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071c2:	68da      	ldr	r2, [r3, #12]
 80071c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c6:	60da      	str	r2, [r3, #12]
 80071c8:	e00f      	b.n	80071ea <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80071ca:	4b17      	ldr	r3, [pc, #92]	@ (8007228 <tcp_slowtmr+0x678>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d006      	beq.n	80071e2 <tcp_slowtmr+0x632>
 80071d4:	4b10      	ldr	r3, [pc, #64]	@ (8007218 <tcp_slowtmr+0x668>)
 80071d6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80071da:	4915      	ldr	r1, [pc, #84]	@ (8007230 <tcp_slowtmr+0x680>)
 80071dc:	4810      	ldr	r0, [pc, #64]	@ (8007220 <tcp_slowtmr+0x670>)
 80071de:	f009 f8e5 	bl	80103ac <iprintf>
        tcp_tw_pcbs = pcb->next;
 80071e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	4a10      	ldr	r2, [pc, #64]	@ (8007228 <tcp_slowtmr+0x678>)
 80071e8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80071ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ec:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80071ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80071f4:	69f8      	ldr	r0, [r7, #28]
 80071f6:	f7fe ff83 	bl	8006100 <tcp_free>
 80071fa:	e004      	b.n	8007206 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80071fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8007200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8007206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1a9      	bne.n	8007160 <tcp_slowtmr+0x5b0>
    }
  }
}
 800720c:	bf00      	nop
 800720e:	bf00      	nop
 8007210:	3730      	adds	r7, #48	@ 0x30
 8007212:	46bd      	mov	sp, r7
 8007214:	bdb0      	pop	{r4, r5, r7, pc}
 8007216:	bf00      	nop
 8007218:	08012090 	.word	0x08012090
 800721c:	08012520 	.word	0x08012520
 8007220:	080120d4 	.word	0x080120d4
 8007224:	20008348 	.word	0x20008348
 8007228:	20008358 	.word	0x20008358
 800722c:	08012550 	.word	0x08012550
 8007230:	08012578 	.word	0x08012578

08007234 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800723a:	4b2d      	ldr	r3, [pc, #180]	@ (80072f0 <tcp_fasttmr+0xbc>)
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	3301      	adds	r3, #1
 8007240:	b2da      	uxtb	r2, r3
 8007242:	4b2b      	ldr	r3, [pc, #172]	@ (80072f0 <tcp_fasttmr+0xbc>)
 8007244:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007246:	4b2b      	ldr	r3, [pc, #172]	@ (80072f4 <tcp_fasttmr+0xc0>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800724c:	e048      	b.n	80072e0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	7f9a      	ldrb	r2, [r3, #30]
 8007252:	4b27      	ldr	r3, [pc, #156]	@ (80072f0 <tcp_fasttmr+0xbc>)
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	429a      	cmp	r2, r3
 8007258:	d03f      	beq.n	80072da <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800725a:	4b25      	ldr	r3, [pc, #148]	@ (80072f0 <tcp_fasttmr+0xbc>)
 800725c:	781a      	ldrb	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	8b5b      	ldrh	r3, [r3, #26]
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b00      	cmp	r3, #0
 800726c:	d010      	beq.n	8007290 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	8b5b      	ldrh	r3, [r3, #26]
 8007272:	f043 0302 	orr.w	r3, r3, #2
 8007276:	b29a      	uxth	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f003 ff63 	bl	800b148 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	8b5b      	ldrh	r3, [r3, #26]
 8007286:	f023 0303 	bic.w	r3, r3, #3
 800728a:	b29a      	uxth	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	8b5b      	ldrh	r3, [r3, #26]
 8007294:	f003 0308 	and.w	r3, r3, #8
 8007298:	2b00      	cmp	r3, #0
 800729a:	d009      	beq.n	80072b0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	8b5b      	ldrh	r3, [r3, #26]
 80072a0:	f023 0308 	bic.w	r3, r3, #8
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f7ff f8bc 	bl	8006428 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00a      	beq.n	80072d4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80072be:	4b0e      	ldr	r3, [pc, #56]	@ (80072f8 <tcp_fasttmr+0xc4>)
 80072c0:	2200      	movs	r2, #0
 80072c2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f819 	bl	80072fc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80072ca:	4b0b      	ldr	r3, [pc, #44]	@ (80072f8 <tcp_fasttmr+0xc4>)
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d000      	beq.n	80072d4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80072d2:	e7b8      	b.n	8007246 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	607b      	str	r3, [r7, #4]
 80072d8:	e002      	b.n	80072e0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1b3      	bne.n	800724e <tcp_fasttmr+0x1a>
    }
  }
}
 80072e6:	bf00      	nop
 80072e8:	bf00      	nop
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	2000835e 	.word	0x2000835e
 80072f4:	20008354 	.word	0x20008354
 80072f8:	2000835c 	.word	0x2000835c

080072fc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80072fc:	b590      	push	{r4, r7, lr}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d109      	bne.n	800731e <tcp_process_refused_data+0x22>
 800730a:	4b37      	ldr	r3, [pc, #220]	@ (80073e8 <tcp_process_refused_data+0xec>)
 800730c:	f240 6209 	movw	r2, #1545	@ 0x609
 8007310:	4936      	ldr	r1, [pc, #216]	@ (80073ec <tcp_process_refused_data+0xf0>)
 8007312:	4837      	ldr	r0, [pc, #220]	@ (80073f0 <tcp_process_refused_data+0xf4>)
 8007314:	f009 f84a 	bl	80103ac <iprintf>
 8007318:	f06f 030f 	mvn.w	r3, #15
 800731c:	e060      	b.n	80073e0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007322:	7b5b      	ldrb	r3, [r3, #13]
 8007324:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800732a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00b      	beq.n	8007354 <tcp_process_refused_data+0x58>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6918      	ldr	r0, [r3, #16]
 8007346:	2300      	movs	r3, #0
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	6879      	ldr	r1, [r7, #4]
 800734c:	47a0      	blx	r4
 800734e:	4603      	mov	r3, r0
 8007350:	73fb      	strb	r3, [r7, #15]
 8007352:	e007      	b.n	8007364 <tcp_process_refused_data+0x68>
 8007354:	2300      	movs	r3, #0
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	6879      	ldr	r1, [r7, #4]
 800735a:	2000      	movs	r0, #0
 800735c:	f000 f8a4 	bl	80074a8 <tcp_recv_null>
 8007360:	4603      	mov	r3, r0
 8007362:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d12a      	bne.n	80073c2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800736c:	7bbb      	ldrb	r3, [r7, #14]
 800736e:	f003 0320 	and.w	r3, r3, #32
 8007372:	2b00      	cmp	r3, #0
 8007374:	d033      	beq.n	80073de <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800737a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800737e:	d005      	beq.n	800738c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007384:	3301      	adds	r3, #1
 8007386:	b29a      	uxth	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00b      	beq.n	80073ae <tcp_process_refused_data+0xb2>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6918      	ldr	r0, [r3, #16]
 80073a0:	2300      	movs	r3, #0
 80073a2:	2200      	movs	r2, #0
 80073a4:	6879      	ldr	r1, [r7, #4]
 80073a6:	47a0      	blx	r4
 80073a8:	4603      	mov	r3, r0
 80073aa:	73fb      	strb	r3, [r7, #15]
 80073ac:	e001      	b.n	80073b2 <tcp_process_refused_data+0xb6>
 80073ae:	2300      	movs	r3, #0
 80073b0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80073b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073b6:	f113 0f0d 	cmn.w	r3, #13
 80073ba:	d110      	bne.n	80073de <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80073bc:	f06f 030c 	mvn.w	r3, #12
 80073c0:	e00e      	b.n	80073e0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80073c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073c6:	f113 0f0d 	cmn.w	r3, #13
 80073ca:	d102      	bne.n	80073d2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80073cc:	f06f 030c 	mvn.w	r3, #12
 80073d0:	e006      	b.n	80073e0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80073d8:	f06f 0304 	mvn.w	r3, #4
 80073dc:	e000      	b.n	80073e0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd90      	pop	{r4, r7, pc}
 80073e8:	08012090 	.word	0x08012090
 80073ec:	080125a0 	.word	0x080125a0
 80073f0:	080120d4 	.word	0x080120d4

080073f4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80073fc:	e007      	b.n	800740e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 f80a 	bl	800741e <tcp_seg_free>
    seg = next;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1f4      	bne.n	80073fe <tcp_segs_free+0xa>
  }
}
 8007414:	bf00      	nop
 8007416:	bf00      	nop
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b082      	sub	sp, #8
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00c      	beq.n	8007446 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d004      	beq.n	800743e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	4618      	mov	r0, r3
 800743a:	f7fe fbc1 	bl	8005bc0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800743e:	6879      	ldr	r1, [r7, #4]
 8007440:	2003      	movs	r0, #3
 8007442:	f7fd fd47 	bl	8004ed4 <memp_free>
  }
}
 8007446:	bf00      	nop
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
	...

08007450 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d106      	bne.n	800746c <tcp_seg_copy+0x1c>
 800745e:	4b0f      	ldr	r3, [pc, #60]	@ (800749c <tcp_seg_copy+0x4c>)
 8007460:	f240 6282 	movw	r2, #1666	@ 0x682
 8007464:	490e      	ldr	r1, [pc, #56]	@ (80074a0 <tcp_seg_copy+0x50>)
 8007466:	480f      	ldr	r0, [pc, #60]	@ (80074a4 <tcp_seg_copy+0x54>)
 8007468:	f008 ffa0 	bl	80103ac <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800746c:	2003      	movs	r0, #3
 800746e:	f7fd fcc1 	bl	8004df4 <memp_malloc>
 8007472:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d101      	bne.n	800747e <tcp_seg_copy+0x2e>
    return NULL;
 800747a:	2300      	movs	r3, #0
 800747c:	e00a      	b.n	8007494 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800747e:	2210      	movs	r2, #16
 8007480:	6879      	ldr	r1, [r7, #4]
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f009 f8bd 	bl	8010602 <memcpy>
  pbuf_ref(cseg->p);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	4618      	mov	r0, r3
 800748e:	f7fe fc37 	bl	8005d00 <pbuf_ref>
  return cseg;
 8007492:	68fb      	ldr	r3, [r7, #12]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	08012090 	.word	0x08012090
 80074a0:	080125e4 	.word	0x080125e4
 80074a4:	080120d4 	.word	0x080120d4

080074a8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
 80074b4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d109      	bne.n	80074d0 <tcp_recv_null+0x28>
 80074bc:	4b12      	ldr	r3, [pc, #72]	@ (8007508 <tcp_recv_null+0x60>)
 80074be:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80074c2:	4912      	ldr	r1, [pc, #72]	@ (800750c <tcp_recv_null+0x64>)
 80074c4:	4812      	ldr	r0, [pc, #72]	@ (8007510 <tcp_recv_null+0x68>)
 80074c6:	f008 ff71 	bl	80103ac <iprintf>
 80074ca:	f06f 030f 	mvn.w	r3, #15
 80074ce:	e016      	b.n	80074fe <tcp_recv_null+0x56>

  if (p != NULL) {
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d009      	beq.n	80074ea <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	891b      	ldrh	r3, [r3, #8]
 80074da:	4619      	mov	r1, r3
 80074dc:	68b8      	ldr	r0, [r7, #8]
 80074de:	f7ff fad1 	bl	8006a84 <tcp_recved>
    pbuf_free(p);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7fe fb6c 	bl	8005bc0 <pbuf_free>
 80074e8:	e008      	b.n	80074fc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80074ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d104      	bne.n	80074fc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80074f2:	68b8      	ldr	r0, [r7, #8]
 80074f4:	f7ff f802 	bl	80064fc <tcp_close>
 80074f8:	4603      	mov	r3, r0
 80074fa:	e000      	b.n	80074fe <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	08012090 	.word	0x08012090
 800750c:	08012600 	.word	0x08012600
 8007510:	080120d4 	.word	0x080120d4

08007514 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af00      	add	r7, sp, #0
 800751a:	4603      	mov	r3, r0
 800751c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800751e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007522:	2b00      	cmp	r3, #0
 8007524:	db01      	blt.n	800752a <tcp_kill_prio+0x16>
 8007526:	79fb      	ldrb	r3, [r7, #7]
 8007528:	e000      	b.n	800752c <tcp_kill_prio+0x18>
 800752a:	237f      	movs	r3, #127	@ 0x7f
 800752c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800752e:	7afb      	ldrb	r3, [r7, #11]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d034      	beq.n	800759e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007534:	7afb      	ldrb	r3, [r7, #11]
 8007536:	3b01      	subs	r3, #1
 8007538:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800753a:	2300      	movs	r3, #0
 800753c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800753e:	2300      	movs	r3, #0
 8007540:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007542:	4b19      	ldr	r3, [pc, #100]	@ (80075a8 <tcp_kill_prio+0x94>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	617b      	str	r3, [r7, #20]
 8007548:	e01f      	b.n	800758a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	7d5b      	ldrb	r3, [r3, #21]
 800754e:	7afa      	ldrb	r2, [r7, #11]
 8007550:	429a      	cmp	r2, r3
 8007552:	d80c      	bhi.n	800756e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007558:	7afa      	ldrb	r2, [r7, #11]
 800755a:	429a      	cmp	r2, r3
 800755c:	d112      	bne.n	8007584 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800755e:	4b13      	ldr	r3, [pc, #76]	@ (80075ac <tcp_kill_prio+0x98>)
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	429a      	cmp	r2, r3
 800756c:	d80a      	bhi.n	8007584 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800756e:	4b0f      	ldr	r3, [pc, #60]	@ (80075ac <tcp_kill_prio+0x98>)
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	7d5b      	ldrb	r3, [r3, #21]
 8007582:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	617b      	str	r3, [r7, #20]
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1dc      	bne.n	800754a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d004      	beq.n	80075a0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007596:	6938      	ldr	r0, [r7, #16]
 8007598:	f7ff f89a 	bl	80066d0 <tcp_abort>
 800759c:	e000      	b.n	80075a0 <tcp_kill_prio+0x8c>
    return;
 800759e:	bf00      	nop
  }
}
 80075a0:	3718      	adds	r7, #24
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	20008354 	.word	0x20008354
 80075ac:	20008348 	.word	0x20008348

080075b0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b086      	sub	sp, #24
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	4603      	mov	r3, r0
 80075b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80075ba:	79fb      	ldrb	r3, [r7, #7]
 80075bc:	2b08      	cmp	r3, #8
 80075be:	d009      	beq.n	80075d4 <tcp_kill_state+0x24>
 80075c0:	79fb      	ldrb	r3, [r7, #7]
 80075c2:	2b09      	cmp	r3, #9
 80075c4:	d006      	beq.n	80075d4 <tcp_kill_state+0x24>
 80075c6:	4b1a      	ldr	r3, [pc, #104]	@ (8007630 <tcp_kill_state+0x80>)
 80075c8:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80075cc:	4919      	ldr	r1, [pc, #100]	@ (8007634 <tcp_kill_state+0x84>)
 80075ce:	481a      	ldr	r0, [pc, #104]	@ (8007638 <tcp_kill_state+0x88>)
 80075d0:	f008 feec 	bl	80103ac <iprintf>

  inactivity = 0;
 80075d4:	2300      	movs	r3, #0
 80075d6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80075d8:	2300      	movs	r3, #0
 80075da:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80075dc:	4b17      	ldr	r3, [pc, #92]	@ (800763c <tcp_kill_state+0x8c>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	617b      	str	r3, [r7, #20]
 80075e2:	e017      	b.n	8007614 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	7d1b      	ldrb	r3, [r3, #20]
 80075e8:	79fa      	ldrb	r2, [r7, #7]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d10f      	bne.n	800760e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80075ee:	4b14      	ldr	r3, [pc, #80]	@ (8007640 <tcp_kill_state+0x90>)
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d807      	bhi.n	800760e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80075fe:	4b10      	ldr	r3, [pc, #64]	@ (8007640 <tcp_kill_state+0x90>)
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	617b      	str	r3, [r7, #20]
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e4      	bne.n	80075e4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d003      	beq.n	8007628 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007620:	2100      	movs	r1, #0
 8007622:	6938      	ldr	r0, [r7, #16]
 8007624:	f7fe ff96 	bl	8006554 <tcp_abandon>
  }
}
 8007628:	bf00      	nop
 800762a:	3718      	adds	r7, #24
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	08012090 	.word	0x08012090
 8007634:	0801261c 	.word	0x0801261c
 8007638:	080120d4 	.word	0x080120d4
 800763c:	20008354 	.word	0x20008354
 8007640:	20008348 	.word	0x20008348

08007644 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800764a:	2300      	movs	r3, #0
 800764c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800764e:	2300      	movs	r3, #0
 8007650:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007652:	4b12      	ldr	r3, [pc, #72]	@ (800769c <tcp_kill_timewait+0x58>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	60fb      	str	r3, [r7, #12]
 8007658:	e012      	b.n	8007680 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800765a:	4b11      	ldr	r3, [pc, #68]	@ (80076a0 <tcp_kill_timewait+0x5c>)
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	429a      	cmp	r2, r3
 8007668:	d807      	bhi.n	800767a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800766a:	4b0d      	ldr	r3, [pc, #52]	@ (80076a0 <tcp_kill_timewait+0x5c>)
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6a1b      	ldr	r3, [r3, #32]
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	60fb      	str	r3, [r7, #12]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1e9      	bne.n	800765a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d002      	beq.n	8007692 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800768c:	68b8      	ldr	r0, [r7, #8]
 800768e:	f7ff f81f 	bl	80066d0 <tcp_abort>
  }
}
 8007692:	bf00      	nop
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	20008358 	.word	0x20008358
 80076a0:	20008348 	.word	0x20008348

080076a4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80076aa:	4b10      	ldr	r3, [pc, #64]	@ (80076ec <tcp_handle_closepend+0x48>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80076b0:	e014      	b.n	80076dc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	8b5b      	ldrh	r3, [r3, #26]
 80076bc:	f003 0308 	and.w	r3, r3, #8
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d009      	beq.n	80076d8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	8b5b      	ldrh	r3, [r3, #26]
 80076c8:	f023 0308 	bic.w	r3, r3, #8
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7fe fea8 	bl	8006428 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1e7      	bne.n	80076b2 <tcp_handle_closepend+0xe>
  }
}
 80076e2:	bf00      	nop
 80076e4:	bf00      	nop
 80076e6:	3708      	adds	r7, #8
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	20008354 	.word	0x20008354

080076f0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	4603      	mov	r3, r0
 80076f8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80076fa:	2001      	movs	r0, #1
 80076fc:	f7fd fb7a 	bl	8004df4 <memp_malloc>
 8007700:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d126      	bne.n	8007756 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007708:	f7ff ffcc 	bl	80076a4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800770c:	f7ff ff9a 	bl	8007644 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007710:	2001      	movs	r0, #1
 8007712:	f7fd fb6f 	bl	8004df4 <memp_malloc>
 8007716:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d11b      	bne.n	8007756 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800771e:	2009      	movs	r0, #9
 8007720:	f7ff ff46 	bl	80075b0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007724:	2001      	movs	r0, #1
 8007726:	f7fd fb65 	bl	8004df4 <memp_malloc>
 800772a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d111      	bne.n	8007756 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007732:	2008      	movs	r0, #8
 8007734:	f7ff ff3c 	bl	80075b0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007738:	2001      	movs	r0, #1
 800773a:	f7fd fb5b 	bl	8004df4 <memp_malloc>
 800773e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d107      	bne.n	8007756 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007746:	79fb      	ldrb	r3, [r7, #7]
 8007748:	4618      	mov	r0, r3
 800774a:	f7ff fee3 	bl	8007514 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800774e:	2001      	movs	r0, #1
 8007750:	f7fd fb50 	bl	8004df4 <memp_malloc>
 8007754:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d03f      	beq.n	80077dc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800775c:	229c      	movs	r2, #156	@ 0x9c
 800775e:	2100      	movs	r1, #0
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f008 fed8 	bl	8010516 <memset>
    pcb->prio = prio;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	79fa      	ldrb	r2, [r7, #7]
 800776a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8007772:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800777c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	22ff      	movs	r2, #255	@ 0xff
 800778a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8007792:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2206      	movs	r2, #6
 8007798:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2206      	movs	r2, #6
 80077a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80077a8:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80077b2:	4b0d      	ldr	r3, [pc, #52]	@ (80077e8 <tcp_alloc+0xf8>)
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80077ba:	4b0c      	ldr	r3, [pc, #48]	@ (80077ec <tcp_alloc+0xfc>)
 80077bc:	781a      	ldrb	r2, [r3, #0]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80077c8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	4a08      	ldr	r2, [pc, #32]	@ (80077f0 <tcp_alloc+0x100>)
 80077d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	4a07      	ldr	r2, [pc, #28]	@ (80077f4 <tcp_alloc+0x104>)
 80077d8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80077dc:	68fb      	ldr	r3, [r7, #12]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	20008348 	.word	0x20008348
 80077ec:	2000835e 	.word	0x2000835e
 80077f0:	080074a9 	.word	0x080074a9
 80077f4:	006ddd00 	.word	0x006ddd00

080077f8 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 80077fc:	2040      	movs	r0, #64	@ 0x40
 80077fe:	f7ff ff77 	bl	80076f0 <tcp_alloc>
 8007802:	4603      	mov	r3, r0
}
 8007804:	4618      	mov	r0, r3
 8007806:	bd80      	pop	{r7, pc}

08007808 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00e      	beq.n	8007836 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	7d1b      	ldrb	r3, [r3, #20]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d106      	bne.n	800782e <tcp_recv+0x26>
 8007820:	4b07      	ldr	r3, [pc, #28]	@ (8007840 <tcp_recv+0x38>)
 8007822:	f240 72df 	movw	r2, #2015	@ 0x7df
 8007826:	4907      	ldr	r1, [pc, #28]	@ (8007844 <tcp_recv+0x3c>)
 8007828:	4807      	ldr	r0, [pc, #28]	@ (8007848 <tcp_recv+0x40>)
 800782a:	f008 fdbf 	bl	80103ac <iprintf>
    pcb->recv = recv;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	683a      	ldr	r2, [r7, #0]
 8007832:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8007836:	bf00      	nop
 8007838:	3708      	adds	r7, #8
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	08012090 	.word	0x08012090
 8007844:	0801262c 	.word	0x0801262c
 8007848:	080120d4 	.word	0x080120d4

0800784c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d008      	beq.n	800786e <tcp_accept+0x22>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	7d1b      	ldrb	r3, [r3, #20]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d104      	bne.n	800786e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	683a      	ldr	r2, [r7, #0]
 800786c:	619a      	str	r2, [r3, #24]
  }
}
 800786e:	bf00      	nop
 8007870:	3714      	adds	r7, #20
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
	...

0800787c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d107      	bne.n	800789a <tcp_pcb_purge+0x1e>
 800788a:	4b21      	ldr	r3, [pc, #132]	@ (8007910 <tcp_pcb_purge+0x94>)
 800788c:	f640 0251 	movw	r2, #2129	@ 0x851
 8007890:	4920      	ldr	r1, [pc, #128]	@ (8007914 <tcp_pcb_purge+0x98>)
 8007892:	4821      	ldr	r0, [pc, #132]	@ (8007918 <tcp_pcb_purge+0x9c>)
 8007894:	f008 fd8a 	bl	80103ac <iprintf>
 8007898:	e037      	b.n	800790a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	7d1b      	ldrb	r3, [r3, #20]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d033      	beq.n	800790a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80078a6:	2b0a      	cmp	r3, #10
 80078a8:	d02f      	beq.n	800790a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d02b      	beq.n	800790a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d007      	beq.n	80078ca <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078be:	4618      	mov	r0, r3
 80078c0:	f7fe f97e 	bl	8005bc0 <pbuf_free>
      pcb->refused_data = NULL;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d002      	beq.n	80078d8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f986 	bl	8007be4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80078de:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7ff fd85 	bl	80073f4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7ff fd80 	bl	80073f4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	66da      	str	r2, [r3, #108]	@ 0x6c
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800790a:	3708      	adds	r7, #8
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	08012090 	.word	0x08012090
 8007914:	080126dc 	.word	0x080126dc
 8007918:	080120d4 	.word	0x080120d4

0800791c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d106      	bne.n	800793a <tcp_pcb_remove+0x1e>
 800792c:	4b3e      	ldr	r3, [pc, #248]	@ (8007a28 <tcp_pcb_remove+0x10c>)
 800792e:	f640 0283 	movw	r2, #2179	@ 0x883
 8007932:	493e      	ldr	r1, [pc, #248]	@ (8007a2c <tcp_pcb_remove+0x110>)
 8007934:	483e      	ldr	r0, [pc, #248]	@ (8007a30 <tcp_pcb_remove+0x114>)
 8007936:	f008 fd39 	bl	80103ac <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d106      	bne.n	800794e <tcp_pcb_remove+0x32>
 8007940:	4b39      	ldr	r3, [pc, #228]	@ (8007a28 <tcp_pcb_remove+0x10c>)
 8007942:	f640 0284 	movw	r2, #2180	@ 0x884
 8007946:	493b      	ldr	r1, [pc, #236]	@ (8007a34 <tcp_pcb_remove+0x118>)
 8007948:	4839      	ldr	r0, [pc, #228]	@ (8007a30 <tcp_pcb_remove+0x114>)
 800794a:	f008 fd2f 	bl	80103ac <iprintf>

  TCP_RMV(pcblist, pcb);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	429a      	cmp	r2, r3
 8007956:	d105      	bne.n	8007964 <tcp_pcb_remove+0x48>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68da      	ldr	r2, [r3, #12]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	601a      	str	r2, [r3, #0]
 8007962:	e013      	b.n	800798c <tcp_pcb_remove+0x70>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	60fb      	str	r3, [r7, #12]
 800796a:	e00c      	b.n	8007986 <tcp_pcb_remove+0x6a>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	429a      	cmp	r2, r3
 8007974:	d104      	bne.n	8007980 <tcp_pcb_remove+0x64>
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	68da      	ldr	r2, [r3, #12]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	60da      	str	r2, [r3, #12]
 800797e:	e005      	b.n	800798c <tcp_pcb_remove+0x70>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	60fb      	str	r3, [r7, #12]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1ef      	bne.n	800796c <tcp_pcb_remove+0x50>
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	2200      	movs	r2, #0
 8007990:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007992:	6838      	ldr	r0, [r7, #0]
 8007994:	f7ff ff72 	bl	800787c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	7d1b      	ldrb	r3, [r3, #20]
 800799c:	2b0a      	cmp	r3, #10
 800799e:	d013      	beq.n	80079c8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d00f      	beq.n	80079c8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	8b5b      	ldrh	r3, [r3, #26]
 80079ac:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d009      	beq.n	80079c8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	8b5b      	ldrh	r3, [r3, #26]
 80079b8:	f043 0302 	orr.w	r3, r3, #2
 80079bc:	b29a      	uxth	r2, r3
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80079c2:	6838      	ldr	r0, [r7, #0]
 80079c4:	f003 fbc0 	bl	800b148 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	7d1b      	ldrb	r3, [r3, #20]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d020      	beq.n	8007a12 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d006      	beq.n	80079e6 <tcp_pcb_remove+0xca>
 80079d8:	4b13      	ldr	r3, [pc, #76]	@ (8007a28 <tcp_pcb_remove+0x10c>)
 80079da:	f640 0293 	movw	r2, #2195	@ 0x893
 80079de:	4916      	ldr	r1, [pc, #88]	@ (8007a38 <tcp_pcb_remove+0x11c>)
 80079e0:	4813      	ldr	r0, [pc, #76]	@ (8007a30 <tcp_pcb_remove+0x114>)
 80079e2:	f008 fce3 	bl	80103ac <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d006      	beq.n	80079fc <tcp_pcb_remove+0xe0>
 80079ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007a28 <tcp_pcb_remove+0x10c>)
 80079f0:	f640 0294 	movw	r2, #2196	@ 0x894
 80079f4:	4911      	ldr	r1, [pc, #68]	@ (8007a3c <tcp_pcb_remove+0x120>)
 80079f6:	480e      	ldr	r0, [pc, #56]	@ (8007a30 <tcp_pcb_remove+0x114>)
 80079f8:	f008 fcd8 	bl	80103ac <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d006      	beq.n	8007a12 <tcp_pcb_remove+0xf6>
 8007a04:	4b08      	ldr	r3, [pc, #32]	@ (8007a28 <tcp_pcb_remove+0x10c>)
 8007a06:	f640 0296 	movw	r2, #2198	@ 0x896
 8007a0a:	490d      	ldr	r1, [pc, #52]	@ (8007a40 <tcp_pcb_remove+0x124>)
 8007a0c:	4808      	ldr	r0, [pc, #32]	@ (8007a30 <tcp_pcb_remove+0x114>)
 8007a0e:	f008 fccd 	bl	80103ac <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	2200      	movs	r2, #0
 8007a16:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007a1e:	bf00      	nop
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	08012090 	.word	0x08012090
 8007a2c:	080126f8 	.word	0x080126f8
 8007a30:	080120d4 	.word	0x080120d4
 8007a34:	08012714 	.word	0x08012714
 8007a38:	08012734 	.word	0x08012734
 8007a3c:	0801274c 	.word	0x0801274c
 8007a40:	08012768 	.word	0x08012768

08007a44 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d106      	bne.n	8007a60 <tcp_next_iss+0x1c>
 8007a52:	4b0a      	ldr	r3, [pc, #40]	@ (8007a7c <tcp_next_iss+0x38>)
 8007a54:	f640 02af 	movw	r2, #2223	@ 0x8af
 8007a58:	4909      	ldr	r1, [pc, #36]	@ (8007a80 <tcp_next_iss+0x3c>)
 8007a5a:	480a      	ldr	r0, [pc, #40]	@ (8007a84 <tcp_next_iss+0x40>)
 8007a5c:	f008 fca6 	bl	80103ac <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007a60:	4b09      	ldr	r3, [pc, #36]	@ (8007a88 <tcp_next_iss+0x44>)
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	4b09      	ldr	r3, [pc, #36]	@ (8007a8c <tcp_next_iss+0x48>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4413      	add	r3, r2
 8007a6a:	4a07      	ldr	r2, [pc, #28]	@ (8007a88 <tcp_next_iss+0x44>)
 8007a6c:	6013      	str	r3, [r2, #0]
  return iss;
 8007a6e:	4b06      	ldr	r3, [pc, #24]	@ (8007a88 <tcp_next_iss+0x44>)
 8007a70:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	08012090 	.word	0x08012090
 8007a80:	08012780 	.word	0x08012780
 8007a84:	080120d4 	.word	0x080120d4
 8007a88:	20000024 	.word	0x20000024
 8007a8c:	20008348 	.word	0x20008348

08007a90 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	4603      	mov	r3, r0
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
 8007a9c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d106      	bne.n	8007ab2 <tcp_eff_send_mss_netif+0x22>
 8007aa4:	4b14      	ldr	r3, [pc, #80]	@ (8007af8 <tcp_eff_send_mss_netif+0x68>)
 8007aa6:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8007aaa:	4914      	ldr	r1, [pc, #80]	@ (8007afc <tcp_eff_send_mss_netif+0x6c>)
 8007aac:	4814      	ldr	r0, [pc, #80]	@ (8007b00 <tcp_eff_send_mss_netif+0x70>)
 8007aae:	f008 fc7d 	bl	80103ac <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d101      	bne.n	8007abc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007ab8:	89fb      	ldrh	r3, [r7, #14]
 8007aba:	e019      	b.n	8007af0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007ac0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007ac2:	8afb      	ldrh	r3, [r7, #22]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d012      	beq.n	8007aee <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007ac8:	2328      	movs	r3, #40	@ 0x28
 8007aca:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007acc:	8afa      	ldrh	r2, [r7, #22]
 8007ace:	8abb      	ldrh	r3, [r7, #20]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d904      	bls.n	8007ade <tcp_eff_send_mss_netif+0x4e>
 8007ad4:	8afa      	ldrh	r2, [r7, #22]
 8007ad6:	8abb      	ldrh	r3, [r7, #20]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	e000      	b.n	8007ae0 <tcp_eff_send_mss_netif+0x50>
 8007ade:	2300      	movs	r3, #0
 8007ae0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007ae2:	8a7a      	ldrh	r2, [r7, #18]
 8007ae4:	89fb      	ldrh	r3, [r7, #14]
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	bf28      	it	cs
 8007aea:	4613      	movcs	r3, r2
 8007aec:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8007aee:	89fb      	ldrh	r3, [r7, #14]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3718      	adds	r7, #24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	08012090 	.word	0x08012090
 8007afc:	0801279c 	.word	0x0801279c
 8007b00:	080120d4 	.word	0x080120d4

08007b04 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d119      	bne.n	8007b4c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007b18:	4b10      	ldr	r3, [pc, #64]	@ (8007b5c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007b1a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8007b1e:	4910      	ldr	r1, [pc, #64]	@ (8007b60 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007b20:	4810      	ldr	r0, [pc, #64]	@ (8007b64 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007b22:	f008 fc43 	bl	80103ac <iprintf>

  while (pcb != NULL) {
 8007b26:	e011      	b.n	8007b4c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d108      	bne.n	8007b46 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f7fe fdc8 	bl	80066d0 <tcp_abort>
      pcb = next;
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	60fb      	str	r3, [r7, #12]
 8007b44:	e002      	b.n	8007b4c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1ea      	bne.n	8007b28 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007b52:	bf00      	nop
 8007b54:	bf00      	nop
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	08012090 	.word	0x08012090
 8007b60:	080127c4 	.word	0x080127c4
 8007b64:	080120d4 	.word	0x080120d4

08007b68 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d02a      	beq.n	8007bce <tcp_netif_ip_addr_changed+0x66>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d026      	beq.n	8007bce <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007b80:	4b15      	ldr	r3, [pc, #84]	@ (8007bd8 <tcp_netif_ip_addr_changed+0x70>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4619      	mov	r1, r3
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f7ff ffbc 	bl	8007b04 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007b8c:	4b13      	ldr	r3, [pc, #76]	@ (8007bdc <tcp_netif_ip_addr_changed+0x74>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4619      	mov	r1, r3
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f7ff ffb6 	bl	8007b04 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d017      	beq.n	8007bce <tcp_netif_ip_addr_changed+0x66>
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d013      	beq.n	8007bce <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8007be0 <tcp_netif_ip_addr_changed+0x78>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	60fb      	str	r3, [r7, #12]
 8007bac:	e00c      	b.n	8007bc8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d103      	bne.n	8007bc2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	60fb      	str	r3, [r7, #12]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1ef      	bne.n	8007bae <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007bce:	bf00      	nop
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	20008354 	.word	0x20008354
 8007bdc:	2000834c 	.word	0x2000834c
 8007be0:	20008350 	.word	0x20008350

08007be4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d007      	beq.n	8007c04 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7ff fbfb 	bl	80073f4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007c04:	bf00      	nop
 8007c06:	3708      	adds	r7, #8
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007c0c:	b590      	push	{r4, r7, lr}
 8007c0e:	b08d      	sub	sp, #52	@ 0x34
 8007c10:	af04      	add	r7, sp, #16
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d105      	bne.n	8007c28 <tcp_input+0x1c>
 8007c1c:	4b9b      	ldr	r3, [pc, #620]	@ (8007e8c <tcp_input+0x280>)
 8007c1e:	2283      	movs	r2, #131	@ 0x83
 8007c20:	499b      	ldr	r1, [pc, #620]	@ (8007e90 <tcp_input+0x284>)
 8007c22:	489c      	ldr	r0, [pc, #624]	@ (8007e94 <tcp_input+0x288>)
 8007c24:	f008 fbc2 	bl	80103ac <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	4a9a      	ldr	r2, [pc, #616]	@ (8007e98 <tcp_input+0x28c>)
 8007c2e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	895b      	ldrh	r3, [r3, #10]
 8007c34:	2b13      	cmp	r3, #19
 8007c36:	f240 83d1 	bls.w	80083dc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007c3a:	4b98      	ldr	r3, [pc, #608]	@ (8007e9c <tcp_input+0x290>)
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	4a97      	ldr	r2, [pc, #604]	@ (8007e9c <tcp_input+0x290>)
 8007c40:	6812      	ldr	r2, [r2, #0]
 8007c42:	4611      	mov	r1, r2
 8007c44:	4618      	mov	r0, r3
 8007c46:	f006 f869 	bl	800dd1c <ip4_addr_isbroadcast_u32>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f040 83c7 	bne.w	80083e0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007c52:	4b92      	ldr	r3, [pc, #584]	@ (8007e9c <tcp_input+0x290>)
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007c5a:	2be0      	cmp	r3, #224	@ 0xe0
 8007c5c:	f000 83c0 	beq.w	80083e0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007c60:	4b8d      	ldr	r3, [pc, #564]	@ (8007e98 <tcp_input+0x28c>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	899b      	ldrh	r3, [r3, #12]
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7fc fc4b 	bl	8004504 <lwip_htons>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	0b1b      	lsrs	r3, r3, #12
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007c7a:	7cbb      	ldrb	r3, [r7, #18]
 8007c7c:	2b13      	cmp	r3, #19
 8007c7e:	f240 83b1 	bls.w	80083e4 <tcp_input+0x7d8>
 8007c82:	7cbb      	ldrb	r3, [r7, #18]
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	891b      	ldrh	r3, [r3, #8]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	f200 83aa 	bhi.w	80083e4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007c90:	7cbb      	ldrb	r3, [r7, #18]
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	3b14      	subs	r3, #20
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	4b81      	ldr	r3, [pc, #516]	@ (8007ea0 <tcp_input+0x294>)
 8007c9a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007c9c:	4b81      	ldr	r3, [pc, #516]	@ (8007ea4 <tcp_input+0x298>)
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	895a      	ldrh	r2, [r3, #10]
 8007ca6:	7cbb      	ldrb	r3, [r7, #18]
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d309      	bcc.n	8007cc2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007cae:	4b7c      	ldr	r3, [pc, #496]	@ (8007ea0 <tcp_input+0x294>)
 8007cb0:	881a      	ldrh	r2, [r3, #0]
 8007cb2:	4b7d      	ldr	r3, [pc, #500]	@ (8007ea8 <tcp_input+0x29c>)
 8007cb4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8007cb6:	7cbb      	ldrb	r3, [r7, #18]
 8007cb8:	4619      	mov	r1, r3
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f7fd fefa 	bl	8005ab4 <pbuf_remove_header>
 8007cc0:	e04e      	b.n	8007d60 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d105      	bne.n	8007cd6 <tcp_input+0xca>
 8007cca:	4b70      	ldr	r3, [pc, #448]	@ (8007e8c <tcp_input+0x280>)
 8007ccc:	22c2      	movs	r2, #194	@ 0xc2
 8007cce:	4977      	ldr	r1, [pc, #476]	@ (8007eac <tcp_input+0x2a0>)
 8007cd0:	4870      	ldr	r0, [pc, #448]	@ (8007e94 <tcp_input+0x288>)
 8007cd2:	f008 fb6b 	bl	80103ac <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8007cd6:	2114      	movs	r1, #20
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7fd feeb 	bl	8005ab4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	895a      	ldrh	r2, [r3, #10]
 8007ce2:	4b71      	ldr	r3, [pc, #452]	@ (8007ea8 <tcp_input+0x29c>)
 8007ce4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8007ce6:	4b6e      	ldr	r3, [pc, #440]	@ (8007ea0 <tcp_input+0x294>)
 8007ce8:	881a      	ldrh	r2, [r3, #0]
 8007cea:	4b6f      	ldr	r3, [pc, #444]	@ (8007ea8 <tcp_input+0x29c>)
 8007cec:	881b      	ldrh	r3, [r3, #0]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8007cf2:	4b6d      	ldr	r3, [pc, #436]	@ (8007ea8 <tcp_input+0x29c>)
 8007cf4:	881b      	ldrh	r3, [r3, #0]
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f7fd fedb 	bl	8005ab4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	895b      	ldrh	r3, [r3, #10]
 8007d04:	8a3a      	ldrh	r2, [r7, #16]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	f200 836e 	bhi.w	80083e8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	4a64      	ldr	r2, [pc, #400]	@ (8007ea4 <tcp_input+0x298>)
 8007d14:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	8a3a      	ldrh	r2, [r7, #16]
 8007d1c:	4611      	mov	r1, r2
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fd fec8 	bl	8005ab4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	891a      	ldrh	r2, [r3, #8]
 8007d28:	8a3b      	ldrh	r3, [r7, #16]
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	895b      	ldrh	r3, [r3, #10]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d005      	beq.n	8007d46 <tcp_input+0x13a>
 8007d3a:	4b54      	ldr	r3, [pc, #336]	@ (8007e8c <tcp_input+0x280>)
 8007d3c:	22df      	movs	r2, #223	@ 0xdf
 8007d3e:	495c      	ldr	r1, [pc, #368]	@ (8007eb0 <tcp_input+0x2a4>)
 8007d40:	4854      	ldr	r0, [pc, #336]	@ (8007e94 <tcp_input+0x288>)
 8007d42:	f008 fb33 	bl	80103ac <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	891a      	ldrh	r2, [r3, #8]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	891b      	ldrh	r3, [r3, #8]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d005      	beq.n	8007d60 <tcp_input+0x154>
 8007d54:	4b4d      	ldr	r3, [pc, #308]	@ (8007e8c <tcp_input+0x280>)
 8007d56:	22e0      	movs	r2, #224	@ 0xe0
 8007d58:	4956      	ldr	r1, [pc, #344]	@ (8007eb4 <tcp_input+0x2a8>)
 8007d5a:	484e      	ldr	r0, [pc, #312]	@ (8007e94 <tcp_input+0x288>)
 8007d5c:	f008 fb26 	bl	80103ac <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007d60:	4b4d      	ldr	r3, [pc, #308]	@ (8007e98 <tcp_input+0x28c>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	881b      	ldrh	r3, [r3, #0]
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	4a4b      	ldr	r2, [pc, #300]	@ (8007e98 <tcp_input+0x28c>)
 8007d6a:	6814      	ldr	r4, [r2, #0]
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7fc fbc9 	bl	8004504 <lwip_htons>
 8007d72:	4603      	mov	r3, r0
 8007d74:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007d76:	4b48      	ldr	r3, [pc, #288]	@ (8007e98 <tcp_input+0x28c>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	885b      	ldrh	r3, [r3, #2]
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	4a46      	ldr	r2, [pc, #280]	@ (8007e98 <tcp_input+0x28c>)
 8007d80:	6814      	ldr	r4, [r2, #0]
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7fc fbbe 	bl	8004504 <lwip_htons>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007d8c:	4b42      	ldr	r3, [pc, #264]	@ (8007e98 <tcp_input+0x28c>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	4a41      	ldr	r2, [pc, #260]	@ (8007e98 <tcp_input+0x28c>)
 8007d94:	6814      	ldr	r4, [r2, #0]
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7fc fbca 	bl	8004530 <lwip_htonl>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	6063      	str	r3, [r4, #4]
 8007da0:	6863      	ldr	r3, [r4, #4]
 8007da2:	4a45      	ldr	r2, [pc, #276]	@ (8007eb8 <tcp_input+0x2ac>)
 8007da4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007da6:	4b3c      	ldr	r3, [pc, #240]	@ (8007e98 <tcp_input+0x28c>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	4a3a      	ldr	r2, [pc, #232]	@ (8007e98 <tcp_input+0x28c>)
 8007dae:	6814      	ldr	r4, [r2, #0]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7fc fbbd 	bl	8004530 <lwip_htonl>
 8007db6:	4603      	mov	r3, r0
 8007db8:	60a3      	str	r3, [r4, #8]
 8007dba:	68a3      	ldr	r3, [r4, #8]
 8007dbc:	4a3f      	ldr	r2, [pc, #252]	@ (8007ebc <tcp_input+0x2b0>)
 8007dbe:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007dc0:	4b35      	ldr	r3, [pc, #212]	@ (8007e98 <tcp_input+0x28c>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	89db      	ldrh	r3, [r3, #14]
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	4a33      	ldr	r2, [pc, #204]	@ (8007e98 <tcp_input+0x28c>)
 8007dca:	6814      	ldr	r4, [r2, #0]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7fc fb99 	bl	8004504 <lwip_htons>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8007dd6:	4b30      	ldr	r3, [pc, #192]	@ (8007e98 <tcp_input+0x28c>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	899b      	ldrh	r3, [r3, #12]
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7fc fb90 	bl	8004504 <lwip_htons>
 8007de4:	4603      	mov	r3, r0
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007dec:	b2da      	uxtb	r2, r3
 8007dee:	4b34      	ldr	r3, [pc, #208]	@ (8007ec0 <tcp_input+0x2b4>)
 8007df0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	891a      	ldrh	r2, [r3, #8]
 8007df6:	4b33      	ldr	r3, [pc, #204]	@ (8007ec4 <tcp_input+0x2b8>)
 8007df8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8007dfa:	4b31      	ldr	r3, [pc, #196]	@ (8007ec0 <tcp_input+0x2b4>)
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	f003 0303 	and.w	r3, r3, #3
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00c      	beq.n	8007e20 <tcp_input+0x214>
    tcplen++;
 8007e06:	4b2f      	ldr	r3, [pc, #188]	@ (8007ec4 <tcp_input+0x2b8>)
 8007e08:	881b      	ldrh	r3, [r3, #0]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	4b2d      	ldr	r3, [pc, #180]	@ (8007ec4 <tcp_input+0x2b8>)
 8007e10:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	891a      	ldrh	r2, [r3, #8]
 8007e16:	4b2b      	ldr	r3, [pc, #172]	@ (8007ec4 <tcp_input+0x2b8>)
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	f200 82e6 	bhi.w	80083ec <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007e20:	2300      	movs	r3, #0
 8007e22:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e24:	4b28      	ldr	r3, [pc, #160]	@ (8007ec8 <tcp_input+0x2bc>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	61fb      	str	r3, [r7, #28]
 8007e2a:	e09d      	b.n	8007f68 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	7d1b      	ldrb	r3, [r3, #20]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d105      	bne.n	8007e40 <tcp_input+0x234>
 8007e34:	4b15      	ldr	r3, [pc, #84]	@ (8007e8c <tcp_input+0x280>)
 8007e36:	22fb      	movs	r2, #251	@ 0xfb
 8007e38:	4924      	ldr	r1, [pc, #144]	@ (8007ecc <tcp_input+0x2c0>)
 8007e3a:	4816      	ldr	r0, [pc, #88]	@ (8007e94 <tcp_input+0x288>)
 8007e3c:	f008 fab6 	bl	80103ac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	7d1b      	ldrb	r3, [r3, #20]
 8007e44:	2b0a      	cmp	r3, #10
 8007e46:	d105      	bne.n	8007e54 <tcp_input+0x248>
 8007e48:	4b10      	ldr	r3, [pc, #64]	@ (8007e8c <tcp_input+0x280>)
 8007e4a:	22fc      	movs	r2, #252	@ 0xfc
 8007e4c:	4920      	ldr	r1, [pc, #128]	@ (8007ed0 <tcp_input+0x2c4>)
 8007e4e:	4811      	ldr	r0, [pc, #68]	@ (8007e94 <tcp_input+0x288>)
 8007e50:	f008 faac 	bl	80103ac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	7d1b      	ldrb	r3, [r3, #20]
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d105      	bne.n	8007e68 <tcp_input+0x25c>
 8007e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8007e8c <tcp_input+0x280>)
 8007e5e:	22fd      	movs	r2, #253	@ 0xfd
 8007e60:	491c      	ldr	r1, [pc, #112]	@ (8007ed4 <tcp_input+0x2c8>)
 8007e62:	480c      	ldr	r0, [pc, #48]	@ (8007e94 <tcp_input+0x288>)
 8007e64:	f008 faa2 	bl	80103ac <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	7a1b      	ldrb	r3, [r3, #8]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d033      	beq.n	8007ed8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	7a1a      	ldrb	r2, [r3, #8]
 8007e74:	4b09      	ldr	r3, [pc, #36]	@ (8007e9c <tcp_input+0x290>)
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d029      	beq.n	8007ed8 <tcp_input+0x2cc>
      prev = pcb;
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	61bb      	str	r3, [r7, #24]
      continue;
 8007e88:	e06b      	b.n	8007f62 <tcp_input+0x356>
 8007e8a:	bf00      	nop
 8007e8c:	080127f8 	.word	0x080127f8
 8007e90:	0801282c 	.word	0x0801282c
 8007e94:	08012844 	.word	0x08012844
 8007e98:	20008370 	.word	0x20008370
 8007e9c:	20004dd8 	.word	0x20004dd8
 8007ea0:	20008374 	.word	0x20008374
 8007ea4:	20008378 	.word	0x20008378
 8007ea8:	20008376 	.word	0x20008376
 8007eac:	0801286c 	.word	0x0801286c
 8007eb0:	0801287c 	.word	0x0801287c
 8007eb4:	08012888 	.word	0x08012888
 8007eb8:	20008380 	.word	0x20008380
 8007ebc:	20008384 	.word	0x20008384
 8007ec0:	2000838c 	.word	0x2000838c
 8007ec4:	2000838a 	.word	0x2000838a
 8007ec8:	20008354 	.word	0x20008354
 8007ecc:	080128a8 	.word	0x080128a8
 8007ed0:	080128d0 	.word	0x080128d0
 8007ed4:	080128fc 	.word	0x080128fc
    }

    if (pcb->remote_port == tcphdr->src &&
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	8b1a      	ldrh	r2, [r3, #24]
 8007edc:	4b72      	ldr	r3, [pc, #456]	@ (80080a8 <tcp_input+0x49c>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	881b      	ldrh	r3, [r3, #0]
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d13a      	bne.n	8007f5e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	8ada      	ldrh	r2, [r3, #22]
 8007eec:	4b6e      	ldr	r3, [pc, #440]	@ (80080a8 <tcp_input+0x49c>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	885b      	ldrh	r3, [r3, #2]
 8007ef2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d132      	bne.n	8007f5e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	685a      	ldr	r2, [r3, #4]
 8007efc:	4b6b      	ldr	r3, [pc, #428]	@ (80080ac <tcp_input+0x4a0>)
 8007efe:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d12c      	bne.n	8007f5e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	4b68      	ldr	r3, [pc, #416]	@ (80080ac <tcp_input+0x4a0>)
 8007f0a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d126      	bne.n	8007f5e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	69fa      	ldr	r2, [r7, #28]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d106      	bne.n	8007f28 <tcp_input+0x31c>
 8007f1a:	4b65      	ldr	r3, [pc, #404]	@ (80080b0 <tcp_input+0x4a4>)
 8007f1c:	f240 120d 	movw	r2, #269	@ 0x10d
 8007f20:	4964      	ldr	r1, [pc, #400]	@ (80080b4 <tcp_input+0x4a8>)
 8007f22:	4865      	ldr	r0, [pc, #404]	@ (80080b8 <tcp_input+0x4ac>)
 8007f24:	f008 fa42 	bl	80103ac <iprintf>
      if (prev != NULL) {
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00a      	beq.n	8007f44 <tcp_input+0x338>
        prev->next = pcb->next;
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	68da      	ldr	r2, [r3, #12]
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007f36:	4b61      	ldr	r3, [pc, #388]	@ (80080bc <tcp_input+0x4b0>)
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007f3e:	4a5f      	ldr	r2, [pc, #380]	@ (80080bc <tcp_input+0x4b0>)
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	69fa      	ldr	r2, [r7, #28]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d111      	bne.n	8007f72 <tcp_input+0x366>
 8007f4e:	4b58      	ldr	r3, [pc, #352]	@ (80080b0 <tcp_input+0x4a4>)
 8007f50:	f240 1215 	movw	r2, #277	@ 0x115
 8007f54:	495a      	ldr	r1, [pc, #360]	@ (80080c0 <tcp_input+0x4b4>)
 8007f56:	4858      	ldr	r0, [pc, #352]	@ (80080b8 <tcp_input+0x4ac>)
 8007f58:	f008 fa28 	bl	80103ac <iprintf>
      break;
 8007f5c:	e009      	b.n	8007f72 <tcp_input+0x366>
    }
    prev = pcb;
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	61fb      	str	r3, [r7, #28]
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f47f af5e 	bne.w	8007e2c <tcp_input+0x220>
 8007f70:	e000      	b.n	8007f74 <tcp_input+0x368>
      break;
 8007f72:	bf00      	nop
  }

  if (pcb == NULL) {
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f040 80aa 	bne.w	80080d0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f7c:	4b51      	ldr	r3, [pc, #324]	@ (80080c4 <tcp_input+0x4b8>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	61fb      	str	r3, [r7, #28]
 8007f82:	e03f      	b.n	8008004 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	7d1b      	ldrb	r3, [r3, #20]
 8007f88:	2b0a      	cmp	r3, #10
 8007f8a:	d006      	beq.n	8007f9a <tcp_input+0x38e>
 8007f8c:	4b48      	ldr	r3, [pc, #288]	@ (80080b0 <tcp_input+0x4a4>)
 8007f8e:	f240 121f 	movw	r2, #287	@ 0x11f
 8007f92:	494d      	ldr	r1, [pc, #308]	@ (80080c8 <tcp_input+0x4bc>)
 8007f94:	4848      	ldr	r0, [pc, #288]	@ (80080b8 <tcp_input+0x4ac>)
 8007f96:	f008 fa09 	bl	80103ac <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	7a1b      	ldrb	r3, [r3, #8]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d009      	beq.n	8007fb6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	7a1a      	ldrb	r2, [r3, #8]
 8007fa6:	4b41      	ldr	r3, [pc, #260]	@ (80080ac <tcp_input+0x4a0>)
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007fae:	3301      	adds	r3, #1
 8007fb0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d122      	bne.n	8007ffc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	8b1a      	ldrh	r2, [r3, #24]
 8007fba:	4b3b      	ldr	r3, [pc, #236]	@ (80080a8 <tcp_input+0x49c>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	881b      	ldrh	r3, [r3, #0]
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d11b      	bne.n	8007ffe <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	8ada      	ldrh	r2, [r3, #22]
 8007fca:	4b37      	ldr	r3, [pc, #220]	@ (80080a8 <tcp_input+0x49c>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	885b      	ldrh	r3, [r3, #2]
 8007fd0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d113      	bne.n	8007ffe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	685a      	ldr	r2, [r3, #4]
 8007fda:	4b34      	ldr	r3, [pc, #208]	@ (80080ac <tcp_input+0x4a0>)
 8007fdc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d10d      	bne.n	8007ffe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	4b31      	ldr	r3, [pc, #196]	@ (80080ac <tcp_input+0x4a0>)
 8007fe8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d107      	bne.n	8007ffe <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8007fee:	69f8      	ldr	r0, [r7, #28]
 8007ff0:	f000 fb56 	bl	80086a0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f7fd fde3 	bl	8005bc0 <pbuf_free>
        return;
 8007ffa:	e1fd      	b.n	80083f8 <tcp_input+0x7ec>
        continue;
 8007ffc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	61fb      	str	r3, [r7, #28]
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1bc      	bne.n	8007f84 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800800a:	2300      	movs	r3, #0
 800800c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800800e:	4b2f      	ldr	r3, [pc, #188]	@ (80080cc <tcp_input+0x4c0>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	617b      	str	r3, [r7, #20]
 8008014:	e02a      	b.n	800806c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	7a1b      	ldrb	r3, [r3, #8]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00c      	beq.n	8008038 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	7a1a      	ldrb	r2, [r3, #8]
 8008022:	4b22      	ldr	r3, [pc, #136]	@ (80080ac <tcp_input+0x4a0>)
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800802a:	3301      	adds	r3, #1
 800802c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800802e:	429a      	cmp	r2, r3
 8008030:	d002      	beq.n	8008038 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	61bb      	str	r3, [r7, #24]
        continue;
 8008036:	e016      	b.n	8008066 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	8ada      	ldrh	r2, [r3, #22]
 800803c:	4b1a      	ldr	r3, [pc, #104]	@ (80080a8 <tcp_input+0x49c>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	885b      	ldrh	r3, [r3, #2]
 8008042:	b29b      	uxth	r3, r3
 8008044:	429a      	cmp	r2, r3
 8008046:	d10c      	bne.n	8008062 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	4b17      	ldr	r3, [pc, #92]	@ (80080ac <tcp_input+0x4a0>)
 800804e:	695b      	ldr	r3, [r3, #20]
 8008050:	429a      	cmp	r2, r3
 8008052:	d00f      	beq.n	8008074 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00d      	beq.n	8008076 <tcp_input+0x46a>
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d009      	beq.n	8008076 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	617b      	str	r3, [r7, #20]
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1d1      	bne.n	8008016 <tcp_input+0x40a>
 8008072:	e000      	b.n	8008076 <tcp_input+0x46a>
            break;
 8008074:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d029      	beq.n	80080d0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00a      	beq.n	8008098 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	68da      	ldr	r2, [r3, #12]
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800808a:	4b10      	ldr	r3, [pc, #64]	@ (80080cc <tcp_input+0x4c0>)
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008092:	4a0e      	ldr	r2, [pc, #56]	@ (80080cc <tcp_input+0x4c0>)
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008098:	6978      	ldr	r0, [r7, #20]
 800809a:	f000 fa03 	bl	80084a4 <tcp_listen_input>
      }
      pbuf_free(p);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7fd fd8e 	bl	8005bc0 <pbuf_free>
      return;
 80080a4:	e1a8      	b.n	80083f8 <tcp_input+0x7ec>
 80080a6:	bf00      	nop
 80080a8:	20008370 	.word	0x20008370
 80080ac:	20004dd8 	.word	0x20004dd8
 80080b0:	080127f8 	.word	0x080127f8
 80080b4:	08012924 	.word	0x08012924
 80080b8:	08012844 	.word	0x08012844
 80080bc:	20008354 	.word	0x20008354
 80080c0:	08012950 	.word	0x08012950
 80080c4:	20008358 	.word	0x20008358
 80080c8:	0801297c 	.word	0x0801297c
 80080cc:	20008350 	.word	0x20008350
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	f000 8158 	beq.w	8008388 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80080d8:	4b95      	ldr	r3, [pc, #596]	@ (8008330 <tcp_input+0x724>)
 80080da:	2200      	movs	r2, #0
 80080dc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	891a      	ldrh	r2, [r3, #8]
 80080e2:	4b93      	ldr	r3, [pc, #588]	@ (8008330 <tcp_input+0x724>)
 80080e4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80080e6:	4a92      	ldr	r2, [pc, #584]	@ (8008330 <tcp_input+0x724>)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80080ec:	4b91      	ldr	r3, [pc, #580]	@ (8008334 <tcp_input+0x728>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a8f      	ldr	r2, [pc, #572]	@ (8008330 <tcp_input+0x724>)
 80080f2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80080f4:	4b90      	ldr	r3, [pc, #576]	@ (8008338 <tcp_input+0x72c>)
 80080f6:	2200      	movs	r2, #0
 80080f8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80080fa:	4b90      	ldr	r3, [pc, #576]	@ (800833c <tcp_input+0x730>)
 80080fc:	2200      	movs	r2, #0
 80080fe:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008100:	4b8f      	ldr	r3, [pc, #572]	@ (8008340 <tcp_input+0x734>)
 8008102:	2200      	movs	r2, #0
 8008104:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008106:	4b8f      	ldr	r3, [pc, #572]	@ (8008344 <tcp_input+0x738>)
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	f003 0308 	and.w	r3, r3, #8
 800810e:	2b00      	cmp	r3, #0
 8008110:	d006      	beq.n	8008120 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	7b5b      	ldrb	r3, [r3, #13]
 8008116:	f043 0301 	orr.w	r3, r3, #1
 800811a:	b2da      	uxtb	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008124:	2b00      	cmp	r3, #0
 8008126:	d017      	beq.n	8008158 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008128:	69f8      	ldr	r0, [r7, #28]
 800812a:	f7ff f8e7 	bl	80072fc <tcp_process_refused_data>
 800812e:	4603      	mov	r3, r0
 8008130:	f113 0f0d 	cmn.w	r3, #13
 8008134:	d007      	beq.n	8008146 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00c      	beq.n	8008158 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800813e:	4b82      	ldr	r3, [pc, #520]	@ (8008348 <tcp_input+0x73c>)
 8008140:	881b      	ldrh	r3, [r3, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d008      	beq.n	8008158 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800814a:	2b00      	cmp	r3, #0
 800814c:	f040 80e3 	bne.w	8008316 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008150:	69f8      	ldr	r0, [r7, #28]
 8008152:	f003 fdff 	bl	800bd54 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008156:	e0de      	b.n	8008316 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8008158:	4a7c      	ldr	r2, [pc, #496]	@ (800834c <tcp_input+0x740>)
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800815e:	69f8      	ldr	r0, [r7, #28]
 8008160:	f000 fb18 	bl	8008794 <tcp_process>
 8008164:	4603      	mov	r3, r0
 8008166:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008168:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800816c:	f113 0f0d 	cmn.w	r3, #13
 8008170:	f000 80d3 	beq.w	800831a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8008174:	4b71      	ldr	r3, [pc, #452]	@ (800833c <tcp_input+0x730>)
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	f003 0308 	and.w	r3, r3, #8
 800817c:	2b00      	cmp	r3, #0
 800817e:	d015      	beq.n	80081ac <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008186:	2b00      	cmp	r3, #0
 8008188:	d008      	beq.n	800819c <tcp_input+0x590>
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008190:	69fa      	ldr	r2, [r7, #28]
 8008192:	6912      	ldr	r2, [r2, #16]
 8008194:	f06f 010d 	mvn.w	r1, #13
 8008198:	4610      	mov	r0, r2
 800819a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800819c:	69f9      	ldr	r1, [r7, #28]
 800819e:	486c      	ldr	r0, [pc, #432]	@ (8008350 <tcp_input+0x744>)
 80081a0:	f7ff fbbc 	bl	800791c <tcp_pcb_remove>
        tcp_free(pcb);
 80081a4:	69f8      	ldr	r0, [r7, #28]
 80081a6:	f7fd ffab 	bl	8006100 <tcp_free>
 80081aa:	e0da      	b.n	8008362 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80081ac:	2300      	movs	r3, #0
 80081ae:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80081b0:	4b63      	ldr	r3, [pc, #396]	@ (8008340 <tcp_input+0x734>)
 80081b2:	881b      	ldrh	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d01d      	beq.n	80081f4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80081b8:	4b61      	ldr	r3, [pc, #388]	@ (8008340 <tcp_input+0x734>)
 80081ba:	881b      	ldrh	r3, [r3, #0]
 80081bc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00a      	beq.n	80081de <tcp_input+0x5d2>
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081ce:	69fa      	ldr	r2, [r7, #28]
 80081d0:	6910      	ldr	r0, [r2, #16]
 80081d2:	89fa      	ldrh	r2, [r7, #14]
 80081d4:	69f9      	ldr	r1, [r7, #28]
 80081d6:	4798      	blx	r3
 80081d8:	4603      	mov	r3, r0
 80081da:	74fb      	strb	r3, [r7, #19]
 80081dc:	e001      	b.n	80081e2 <tcp_input+0x5d6>
 80081de:	2300      	movs	r3, #0
 80081e0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80081e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80081e6:	f113 0f0d 	cmn.w	r3, #13
 80081ea:	f000 8098 	beq.w	800831e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80081ee:	4b54      	ldr	r3, [pc, #336]	@ (8008340 <tcp_input+0x734>)
 80081f0:	2200      	movs	r2, #0
 80081f2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80081f4:	69f8      	ldr	r0, [r7, #28]
 80081f6:	f000 f915 	bl	8008424 <tcp_input_delayed_close>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f040 8090 	bne.w	8008322 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008202:	4b4d      	ldr	r3, [pc, #308]	@ (8008338 <tcp_input+0x72c>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d041      	beq.n	800828e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800820e:	2b00      	cmp	r3, #0
 8008210:	d006      	beq.n	8008220 <tcp_input+0x614>
 8008212:	4b50      	ldr	r3, [pc, #320]	@ (8008354 <tcp_input+0x748>)
 8008214:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8008218:	494f      	ldr	r1, [pc, #316]	@ (8008358 <tcp_input+0x74c>)
 800821a:	4850      	ldr	r0, [pc, #320]	@ (800835c <tcp_input+0x750>)
 800821c:	f008 f8c6 	bl	80103ac <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	8b5b      	ldrh	r3, [r3, #26]
 8008224:	f003 0310 	and.w	r3, r3, #16
 8008228:	2b00      	cmp	r3, #0
 800822a:	d008      	beq.n	800823e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800822c:	4b42      	ldr	r3, [pc, #264]	@ (8008338 <tcp_input+0x72c>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4618      	mov	r0, r3
 8008232:	f7fd fcc5 	bl	8005bc0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008236:	69f8      	ldr	r0, [r7, #28]
 8008238:	f7fe fa4a 	bl	80066d0 <tcp_abort>
            goto aborted;
 800823c:	e091      	b.n	8008362 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00c      	beq.n	8008262 <tcp_input+0x656>
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	6918      	ldr	r0, [r3, #16]
 8008252:	4b39      	ldr	r3, [pc, #228]	@ (8008338 <tcp_input+0x72c>)
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	2300      	movs	r3, #0
 8008258:	69f9      	ldr	r1, [r7, #28]
 800825a:	47a0      	blx	r4
 800825c:	4603      	mov	r3, r0
 800825e:	74fb      	strb	r3, [r7, #19]
 8008260:	e008      	b.n	8008274 <tcp_input+0x668>
 8008262:	4b35      	ldr	r3, [pc, #212]	@ (8008338 <tcp_input+0x72c>)
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	2300      	movs	r3, #0
 8008268:	69f9      	ldr	r1, [r7, #28]
 800826a:	2000      	movs	r0, #0
 800826c:	f7ff f91c 	bl	80074a8 <tcp_recv_null>
 8008270:	4603      	mov	r3, r0
 8008272:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008274:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008278:	f113 0f0d 	cmn.w	r3, #13
 800827c:	d053      	beq.n	8008326 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800827e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d003      	beq.n	800828e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008286:	4b2c      	ldr	r3, [pc, #176]	@ (8008338 <tcp_input+0x72c>)
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800828e:	4b2b      	ldr	r3, [pc, #172]	@ (800833c <tcp_input+0x730>)
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	f003 0320 	and.w	r3, r3, #32
 8008296:	2b00      	cmp	r3, #0
 8008298:	d030      	beq.n	80082fc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d009      	beq.n	80082b6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082a6:	7b5a      	ldrb	r2, [r3, #13]
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082ac:	f042 0220 	orr.w	r2, r2, #32
 80082b0:	b2d2      	uxtb	r2, r2
 80082b2:	735a      	strb	r2, [r3, #13]
 80082b4:	e022      	b.n	80082fc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082ba:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80082be:	d005      	beq.n	80082cc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082c4:	3301      	adds	r3, #1
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00b      	beq.n	80082ee <tcp_input+0x6e2>
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	6918      	ldr	r0, [r3, #16]
 80082e0:	2300      	movs	r3, #0
 80082e2:	2200      	movs	r2, #0
 80082e4:	69f9      	ldr	r1, [r7, #28]
 80082e6:	47a0      	blx	r4
 80082e8:	4603      	mov	r3, r0
 80082ea:	74fb      	strb	r3, [r7, #19]
 80082ec:	e001      	b.n	80082f2 <tcp_input+0x6e6>
 80082ee:	2300      	movs	r3, #0
 80082f0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80082f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80082f6:	f113 0f0d 	cmn.w	r3, #13
 80082fa:	d016      	beq.n	800832a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80082fc:	4b13      	ldr	r3, [pc, #76]	@ (800834c <tcp_input+0x740>)
 80082fe:	2200      	movs	r2, #0
 8008300:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008302:	69f8      	ldr	r0, [r7, #28]
 8008304:	f000 f88e 	bl	8008424 <tcp_input_delayed_close>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d128      	bne.n	8008360 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800830e:	69f8      	ldr	r0, [r7, #28]
 8008310:	f002 ff1a 	bl	800b148 <tcp_output>
 8008314:	e025      	b.n	8008362 <tcp_input+0x756>
        goto aborted;
 8008316:	bf00      	nop
 8008318:	e023      	b.n	8008362 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800831a:	bf00      	nop
 800831c:	e021      	b.n	8008362 <tcp_input+0x756>
              goto aborted;
 800831e:	bf00      	nop
 8008320:	e01f      	b.n	8008362 <tcp_input+0x756>
          goto aborted;
 8008322:	bf00      	nop
 8008324:	e01d      	b.n	8008362 <tcp_input+0x756>
            goto aborted;
 8008326:	bf00      	nop
 8008328:	e01b      	b.n	8008362 <tcp_input+0x756>
              goto aborted;
 800832a:	bf00      	nop
 800832c:	e019      	b.n	8008362 <tcp_input+0x756>
 800832e:	bf00      	nop
 8008330:	20008360 	.word	0x20008360
 8008334:	20008370 	.word	0x20008370
 8008338:	20008390 	.word	0x20008390
 800833c:	2000838d 	.word	0x2000838d
 8008340:	20008388 	.word	0x20008388
 8008344:	2000838c 	.word	0x2000838c
 8008348:	2000838a 	.word	0x2000838a
 800834c:	20008394 	.word	0x20008394
 8008350:	20008354 	.word	0x20008354
 8008354:	080127f8 	.word	0x080127f8
 8008358:	080129ac 	.word	0x080129ac
 800835c:	08012844 	.word	0x08012844
          goto aborted;
 8008360:	bf00      	nop
    tcp_input_pcb = NULL;
 8008362:	4b27      	ldr	r3, [pc, #156]	@ (8008400 <tcp_input+0x7f4>)
 8008364:	2200      	movs	r2, #0
 8008366:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008368:	4b26      	ldr	r3, [pc, #152]	@ (8008404 <tcp_input+0x7f8>)
 800836a:	2200      	movs	r2, #0
 800836c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800836e:	4b26      	ldr	r3, [pc, #152]	@ (8008408 <tcp_input+0x7fc>)
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d03f      	beq.n	80083f6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8008376:	4b24      	ldr	r3, [pc, #144]	@ (8008408 <tcp_input+0x7fc>)
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	4618      	mov	r0, r3
 800837c:	f7fd fc20 	bl	8005bc0 <pbuf_free>
      inseg.p = NULL;
 8008380:	4b21      	ldr	r3, [pc, #132]	@ (8008408 <tcp_input+0x7fc>)
 8008382:	2200      	movs	r2, #0
 8008384:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008386:	e036      	b.n	80083f6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008388:	4b20      	ldr	r3, [pc, #128]	@ (800840c <tcp_input+0x800>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	899b      	ldrh	r3, [r3, #12]
 800838e:	b29b      	uxth	r3, r3
 8008390:	4618      	mov	r0, r3
 8008392:	f7fc f8b7 	bl	8004504 <lwip_htons>
 8008396:	4603      	mov	r3, r0
 8008398:	b2db      	uxtb	r3, r3
 800839a:	f003 0304 	and.w	r3, r3, #4
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d118      	bne.n	80083d4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083a2:	4b1b      	ldr	r3, [pc, #108]	@ (8008410 <tcp_input+0x804>)
 80083a4:	6819      	ldr	r1, [r3, #0]
 80083a6:	4b1b      	ldr	r3, [pc, #108]	@ (8008414 <tcp_input+0x808>)
 80083a8:	881b      	ldrh	r3, [r3, #0]
 80083aa:	461a      	mov	r2, r3
 80083ac:	4b1a      	ldr	r3, [pc, #104]	@ (8008418 <tcp_input+0x80c>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80083b2:	4b16      	ldr	r3, [pc, #88]	@ (800840c <tcp_input+0x800>)
 80083b4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083b6:	885b      	ldrh	r3, [r3, #2]
 80083b8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80083ba:	4a14      	ldr	r2, [pc, #80]	@ (800840c <tcp_input+0x800>)
 80083bc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083be:	8812      	ldrh	r2, [r2, #0]
 80083c0:	b292      	uxth	r2, r2
 80083c2:	9202      	str	r2, [sp, #8]
 80083c4:	9301      	str	r3, [sp, #4]
 80083c6:	4b15      	ldr	r3, [pc, #84]	@ (800841c <tcp_input+0x810>)
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	4b15      	ldr	r3, [pc, #84]	@ (8008420 <tcp_input+0x814>)
 80083cc:	4602      	mov	r2, r0
 80083ce:	2000      	movs	r0, #0
 80083d0:	f003 fc6e 	bl	800bcb0 <tcp_rst>
    pbuf_free(p);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f7fd fbf3 	bl	8005bc0 <pbuf_free>
  return;
 80083da:	e00c      	b.n	80083f6 <tcp_input+0x7ea>
    goto dropped;
 80083dc:	bf00      	nop
 80083de:	e006      	b.n	80083ee <tcp_input+0x7e2>
    goto dropped;
 80083e0:	bf00      	nop
 80083e2:	e004      	b.n	80083ee <tcp_input+0x7e2>
    goto dropped;
 80083e4:	bf00      	nop
 80083e6:	e002      	b.n	80083ee <tcp_input+0x7e2>
      goto dropped;
 80083e8:	bf00      	nop
 80083ea:	e000      	b.n	80083ee <tcp_input+0x7e2>
      goto dropped;
 80083ec:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7fd fbe6 	bl	8005bc0 <pbuf_free>
 80083f4:	e000      	b.n	80083f8 <tcp_input+0x7ec>
  return;
 80083f6:	bf00      	nop
}
 80083f8:	3724      	adds	r7, #36	@ 0x24
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd90      	pop	{r4, r7, pc}
 80083fe:	bf00      	nop
 8008400:	20008394 	.word	0x20008394
 8008404:	20008390 	.word	0x20008390
 8008408:	20008360 	.word	0x20008360
 800840c:	20008370 	.word	0x20008370
 8008410:	20008384 	.word	0x20008384
 8008414:	2000838a 	.word	0x2000838a
 8008418:	20008380 	.word	0x20008380
 800841c:	20004de8 	.word	0x20004de8
 8008420:	20004dec 	.word	0x20004dec

08008424 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d106      	bne.n	8008440 <tcp_input_delayed_close+0x1c>
 8008432:	4b17      	ldr	r3, [pc, #92]	@ (8008490 <tcp_input_delayed_close+0x6c>)
 8008434:	f240 225a 	movw	r2, #602	@ 0x25a
 8008438:	4916      	ldr	r1, [pc, #88]	@ (8008494 <tcp_input_delayed_close+0x70>)
 800843a:	4817      	ldr	r0, [pc, #92]	@ (8008498 <tcp_input_delayed_close+0x74>)
 800843c:	f007 ffb6 	bl	80103ac <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008440:	4b16      	ldr	r3, [pc, #88]	@ (800849c <tcp_input_delayed_close+0x78>)
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	f003 0310 	and.w	r3, r3, #16
 8008448:	2b00      	cmp	r3, #0
 800844a:	d01c      	beq.n	8008486 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	8b5b      	ldrh	r3, [r3, #26]
 8008450:	f003 0310 	and.w	r3, r3, #16
 8008454:	2b00      	cmp	r3, #0
 8008456:	d10d      	bne.n	8008474 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800845e:	2b00      	cmp	r3, #0
 8008460:	d008      	beq.n	8008474 <tcp_input_delayed_close+0x50>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	6912      	ldr	r2, [r2, #16]
 800846c:	f06f 010e 	mvn.w	r1, #14
 8008470:	4610      	mov	r0, r2
 8008472:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008474:	6879      	ldr	r1, [r7, #4]
 8008476:	480a      	ldr	r0, [pc, #40]	@ (80084a0 <tcp_input_delayed_close+0x7c>)
 8008478:	f7ff fa50 	bl	800791c <tcp_pcb_remove>
    tcp_free(pcb);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f7fd fe3f 	bl	8006100 <tcp_free>
    return 1;
 8008482:	2301      	movs	r3, #1
 8008484:	e000      	b.n	8008488 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	080127f8 	.word	0x080127f8
 8008494:	080129c8 	.word	0x080129c8
 8008498:	08012844 	.word	0x08012844
 800849c:	2000838d 	.word	0x2000838d
 80084a0:	20008354 	.word	0x20008354

080084a4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80084a4:	b590      	push	{r4, r7, lr}
 80084a6:	b08b      	sub	sp, #44	@ 0x2c
 80084a8:	af04      	add	r7, sp, #16
 80084aa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80084ac:	4b6f      	ldr	r3, [pc, #444]	@ (800866c <tcp_listen_input+0x1c8>)
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	f003 0304 	and.w	r3, r3, #4
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f040 80d2 	bne.w	800865e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d106      	bne.n	80084ce <tcp_listen_input+0x2a>
 80084c0:	4b6b      	ldr	r3, [pc, #428]	@ (8008670 <tcp_listen_input+0x1cc>)
 80084c2:	f240 2281 	movw	r2, #641	@ 0x281
 80084c6:	496b      	ldr	r1, [pc, #428]	@ (8008674 <tcp_listen_input+0x1d0>)
 80084c8:	486b      	ldr	r0, [pc, #428]	@ (8008678 <tcp_listen_input+0x1d4>)
 80084ca:	f007 ff6f 	bl	80103ac <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80084ce:	4b67      	ldr	r3, [pc, #412]	@ (800866c <tcp_listen_input+0x1c8>)
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	f003 0310 	and.w	r3, r3, #16
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d019      	beq.n	800850e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80084da:	4b68      	ldr	r3, [pc, #416]	@ (800867c <tcp_listen_input+0x1d8>)
 80084dc:	6819      	ldr	r1, [r3, #0]
 80084de:	4b68      	ldr	r3, [pc, #416]	@ (8008680 <tcp_listen_input+0x1dc>)
 80084e0:	881b      	ldrh	r3, [r3, #0]
 80084e2:	461a      	mov	r2, r3
 80084e4:	4b67      	ldr	r3, [pc, #412]	@ (8008684 <tcp_listen_input+0x1e0>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80084ea:	4b67      	ldr	r3, [pc, #412]	@ (8008688 <tcp_listen_input+0x1e4>)
 80084ec:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80084ee:	885b      	ldrh	r3, [r3, #2]
 80084f0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80084f2:	4a65      	ldr	r2, [pc, #404]	@ (8008688 <tcp_listen_input+0x1e4>)
 80084f4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80084f6:	8812      	ldrh	r2, [r2, #0]
 80084f8:	b292      	uxth	r2, r2
 80084fa:	9202      	str	r2, [sp, #8]
 80084fc:	9301      	str	r3, [sp, #4]
 80084fe:	4b63      	ldr	r3, [pc, #396]	@ (800868c <tcp_listen_input+0x1e8>)
 8008500:	9300      	str	r3, [sp, #0]
 8008502:	4b63      	ldr	r3, [pc, #396]	@ (8008690 <tcp_listen_input+0x1ec>)
 8008504:	4602      	mov	r2, r0
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f003 fbd2 	bl	800bcb0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800850c:	e0a9      	b.n	8008662 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800850e:	4b57      	ldr	r3, [pc, #348]	@ (800866c <tcp_listen_input+0x1c8>)
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	f003 0302 	and.w	r3, r3, #2
 8008516:	2b00      	cmp	r3, #0
 8008518:	f000 80a3 	beq.w	8008662 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	7d5b      	ldrb	r3, [r3, #21]
 8008520:	4618      	mov	r0, r3
 8008522:	f7ff f8e5 	bl	80076f0 <tcp_alloc>
 8008526:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d111      	bne.n	8008552 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00a      	beq.n	800854c <tcp_listen_input+0xa8>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	699b      	ldr	r3, [r3, #24]
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	6910      	ldr	r0, [r2, #16]
 800853e:	f04f 32ff 	mov.w	r2, #4294967295
 8008542:	2100      	movs	r1, #0
 8008544:	4798      	blx	r3
 8008546:	4603      	mov	r3, r0
 8008548:	73bb      	strb	r3, [r7, #14]
      return;
 800854a:	e08b      	b.n	8008664 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800854c:	23f0      	movs	r3, #240	@ 0xf0
 800854e:	73bb      	strb	r3, [r7, #14]
      return;
 8008550:	e088      	b.n	8008664 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008552:	4b50      	ldr	r3, [pc, #320]	@ (8008694 <tcp_listen_input+0x1f0>)
 8008554:	695a      	ldr	r2, [r3, #20]
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800855a:	4b4e      	ldr	r3, [pc, #312]	@ (8008694 <tcp_listen_input+0x1f0>)
 800855c:	691a      	ldr	r2, [r3, #16]
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	8ada      	ldrh	r2, [r3, #22]
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800856a:	4b47      	ldr	r3, [pc, #284]	@ (8008688 <tcp_listen_input+0x1e4>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	881b      	ldrh	r3, [r3, #0]
 8008570:	b29a      	uxth	r2, r3
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	2203      	movs	r2, #3
 800857a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800857c:	4b41      	ldr	r3, [pc, #260]	@ (8008684 <tcp_listen_input+0x1e0>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	1c5a      	adds	r2, r3, #1
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800858e:	6978      	ldr	r0, [r7, #20]
 8008590:	f7ff fa58 	bl	8007a44 <tcp_next_iss>
 8008594:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	693a      	ldr	r2, [r7, #16]
 800859a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	693a      	ldr	r2, [r7, #16]
 80085a6:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	693a      	ldr	r2, [r7, #16]
 80085ac:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80085ae:	4b35      	ldr	r3, [pc, #212]	@ (8008684 <tcp_listen_input+0x1e0>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	1e5a      	subs	r2, r3, #1
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	691a      	ldr	r2, [r3, #16]
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	7a5b      	ldrb	r3, [r3, #9]
 80085ca:	f003 030c 	and.w	r3, r3, #12
 80085ce:	b2da      	uxtb	r2, r3
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	7a1a      	ldrb	r2, [r3, #8]
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80085dc:	4b2e      	ldr	r3, [pc, #184]	@ (8008698 <tcp_listen_input+0x1f4>)
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	60da      	str	r2, [r3, #12]
 80085e4:	4a2c      	ldr	r2, [pc, #176]	@ (8008698 <tcp_listen_input+0x1f4>)
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	6013      	str	r3, [r2, #0]
 80085ea:	f003 fd23 	bl	800c034 <tcp_timer_needed>
 80085ee:	4b2b      	ldr	r3, [pc, #172]	@ (800869c <tcp_listen_input+0x1f8>)
 80085f0:	2201      	movs	r2, #1
 80085f2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80085f4:	6978      	ldr	r0, [r7, #20]
 80085f6:	f001 fd8b 	bl	800a110 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80085fa:	4b23      	ldr	r3, [pc, #140]	@ (8008688 <tcp_listen_input+0x1e4>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	89db      	ldrh	r3, [r3, #14]
 8008600:	b29a      	uxth	r2, r3
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	3304      	adds	r3, #4
 800861c:	4618      	mov	r0, r3
 800861e:	f005 f8e7 	bl	800d7f0 <ip4_route>
 8008622:	4601      	mov	r1, r0
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	3304      	adds	r3, #4
 8008628:	461a      	mov	r2, r3
 800862a:	4620      	mov	r0, r4
 800862c:	f7ff fa30 	bl	8007a90 <tcp_eff_send_mss_netif>
 8008630:	4603      	mov	r3, r0
 8008632:	461a      	mov	r2, r3
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008638:	2112      	movs	r1, #18
 800863a:	6978      	ldr	r0, [r7, #20]
 800863c:	f002 fc96 	bl	800af6c <tcp_enqueue_flags>
 8008640:	4603      	mov	r3, r0
 8008642:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d004      	beq.n	8008656 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800864c:	2100      	movs	r1, #0
 800864e:	6978      	ldr	r0, [r7, #20]
 8008650:	f7fd ff80 	bl	8006554 <tcp_abandon>
      return;
 8008654:	e006      	b.n	8008664 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8008656:	6978      	ldr	r0, [r7, #20]
 8008658:	f002 fd76 	bl	800b148 <tcp_output>
  return;
 800865c:	e001      	b.n	8008662 <tcp_listen_input+0x1be>
    return;
 800865e:	bf00      	nop
 8008660:	e000      	b.n	8008664 <tcp_listen_input+0x1c0>
  return;
 8008662:	bf00      	nop
}
 8008664:	371c      	adds	r7, #28
 8008666:	46bd      	mov	sp, r7
 8008668:	bd90      	pop	{r4, r7, pc}
 800866a:	bf00      	nop
 800866c:	2000838c 	.word	0x2000838c
 8008670:	080127f8 	.word	0x080127f8
 8008674:	080129f0 	.word	0x080129f0
 8008678:	08012844 	.word	0x08012844
 800867c:	20008384 	.word	0x20008384
 8008680:	2000838a 	.word	0x2000838a
 8008684:	20008380 	.word	0x20008380
 8008688:	20008370 	.word	0x20008370
 800868c:	20004de8 	.word	0x20004de8
 8008690:	20004dec 	.word	0x20004dec
 8008694:	20004dd8 	.word	0x20004dd8
 8008698:	20008354 	.word	0x20008354
 800869c:	2000835c 	.word	0x2000835c

080086a0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af04      	add	r7, sp, #16
 80086a6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80086a8:	4b2f      	ldr	r3, [pc, #188]	@ (8008768 <tcp_timewait_input+0xc8>)
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	f003 0304 	and.w	r3, r3, #4
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d153      	bne.n	800875c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d106      	bne.n	80086c8 <tcp_timewait_input+0x28>
 80086ba:	4b2c      	ldr	r3, [pc, #176]	@ (800876c <tcp_timewait_input+0xcc>)
 80086bc:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80086c0:	492b      	ldr	r1, [pc, #172]	@ (8008770 <tcp_timewait_input+0xd0>)
 80086c2:	482c      	ldr	r0, [pc, #176]	@ (8008774 <tcp_timewait_input+0xd4>)
 80086c4:	f007 fe72 	bl	80103ac <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80086c8:	4b27      	ldr	r3, [pc, #156]	@ (8008768 <tcp_timewait_input+0xc8>)
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	f003 0302 	and.w	r3, r3, #2
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d02a      	beq.n	800872a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80086d4:	4b28      	ldr	r3, [pc, #160]	@ (8008778 <tcp_timewait_input+0xd8>)
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086dc:	1ad3      	subs	r3, r2, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	db2d      	blt.n	800873e <tcp_timewait_input+0x9e>
 80086e2:	4b25      	ldr	r3, [pc, #148]	@ (8008778 <tcp_timewait_input+0xd8>)
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ea:	6879      	ldr	r1, [r7, #4]
 80086ec:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80086ee:	440b      	add	r3, r1
 80086f0:	1ad3      	subs	r3, r2, r3
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	dc23      	bgt.n	800873e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80086f6:	4b21      	ldr	r3, [pc, #132]	@ (800877c <tcp_timewait_input+0xdc>)
 80086f8:	6819      	ldr	r1, [r3, #0]
 80086fa:	4b21      	ldr	r3, [pc, #132]	@ (8008780 <tcp_timewait_input+0xe0>)
 80086fc:	881b      	ldrh	r3, [r3, #0]
 80086fe:	461a      	mov	r2, r3
 8008700:	4b1d      	ldr	r3, [pc, #116]	@ (8008778 <tcp_timewait_input+0xd8>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008706:	4b1f      	ldr	r3, [pc, #124]	@ (8008784 <tcp_timewait_input+0xe4>)
 8008708:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800870a:	885b      	ldrh	r3, [r3, #2]
 800870c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800870e:	4a1d      	ldr	r2, [pc, #116]	@ (8008784 <tcp_timewait_input+0xe4>)
 8008710:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008712:	8812      	ldrh	r2, [r2, #0]
 8008714:	b292      	uxth	r2, r2
 8008716:	9202      	str	r2, [sp, #8]
 8008718:	9301      	str	r3, [sp, #4]
 800871a:	4b1b      	ldr	r3, [pc, #108]	@ (8008788 <tcp_timewait_input+0xe8>)
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	4b1b      	ldr	r3, [pc, #108]	@ (800878c <tcp_timewait_input+0xec>)
 8008720:	4602      	mov	r2, r0
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f003 fac4 	bl	800bcb0 <tcp_rst>
      return;
 8008728:	e01b      	b.n	8008762 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800872a:	4b0f      	ldr	r3, [pc, #60]	@ (8008768 <tcp_timewait_input+0xc8>)
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	2b00      	cmp	r3, #0
 8008734:	d003      	beq.n	800873e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008736:	4b16      	ldr	r3, [pc, #88]	@ (8008790 <tcp_timewait_input+0xf0>)
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800873e:	4b10      	ldr	r3, [pc, #64]	@ (8008780 <tcp_timewait_input+0xe0>)
 8008740:	881b      	ldrh	r3, [r3, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00c      	beq.n	8008760 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	8b5b      	ldrh	r3, [r3, #26]
 800874a:	f043 0302 	orr.w	r3, r3, #2
 800874e:	b29a      	uxth	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f002 fcf7 	bl	800b148 <tcp_output>
  }
  return;
 800875a:	e001      	b.n	8008760 <tcp_timewait_input+0xc0>
    return;
 800875c:	bf00      	nop
 800875e:	e000      	b.n	8008762 <tcp_timewait_input+0xc2>
  return;
 8008760:	bf00      	nop
}
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	2000838c 	.word	0x2000838c
 800876c:	080127f8 	.word	0x080127f8
 8008770:	08012a10 	.word	0x08012a10
 8008774:	08012844 	.word	0x08012844
 8008778:	20008380 	.word	0x20008380
 800877c:	20008384 	.word	0x20008384
 8008780:	2000838a 	.word	0x2000838a
 8008784:	20008370 	.word	0x20008370
 8008788:	20004de8 	.word	0x20004de8
 800878c:	20004dec 	.word	0x20004dec
 8008790:	20008348 	.word	0x20008348

08008794 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008794:	b590      	push	{r4, r7, lr}
 8008796:	b08d      	sub	sp, #52	@ 0x34
 8008798:	af04      	add	r7, sp, #16
 800879a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800879c:	2300      	movs	r3, #0
 800879e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80087a0:	2300      	movs	r3, #0
 80087a2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d106      	bne.n	80087b8 <tcp_process+0x24>
 80087aa:	4b9d      	ldr	r3, [pc, #628]	@ (8008a20 <tcp_process+0x28c>)
 80087ac:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80087b0:	499c      	ldr	r1, [pc, #624]	@ (8008a24 <tcp_process+0x290>)
 80087b2:	489d      	ldr	r0, [pc, #628]	@ (8008a28 <tcp_process+0x294>)
 80087b4:	f007 fdfa 	bl	80103ac <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80087b8:	4b9c      	ldr	r3, [pc, #624]	@ (8008a2c <tcp_process+0x298>)
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	f003 0304 	and.w	r3, r3, #4
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d04e      	beq.n	8008862 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	7d1b      	ldrb	r3, [r3, #20]
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d108      	bne.n	80087de <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80087d0:	4b97      	ldr	r3, [pc, #604]	@ (8008a30 <tcp_process+0x29c>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d123      	bne.n	8008820 <tcp_process+0x8c>
        acceptable = 1;
 80087d8:	2301      	movs	r3, #1
 80087da:	76fb      	strb	r3, [r7, #27]
 80087dc:	e020      	b.n	8008820 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80087e2:	4b94      	ldr	r3, [pc, #592]	@ (8008a34 <tcp_process+0x2a0>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d102      	bne.n	80087f0 <tcp_process+0x5c>
        acceptable = 1;
 80087ea:	2301      	movs	r3, #1
 80087ec:	76fb      	strb	r3, [r7, #27]
 80087ee:	e017      	b.n	8008820 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80087f0:	4b90      	ldr	r3, [pc, #576]	@ (8008a34 <tcp_process+0x2a0>)
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	db10      	blt.n	8008820 <tcp_process+0x8c>
 80087fe:	4b8d      	ldr	r3, [pc, #564]	@ (8008a34 <tcp_process+0x2a0>)
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008806:	6879      	ldr	r1, [r7, #4]
 8008808:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800880a:	440b      	add	r3, r1
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	2b00      	cmp	r3, #0
 8008810:	dc06      	bgt.n	8008820 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	8b5b      	ldrh	r3, [r3, #26]
 8008816:	f043 0302 	orr.w	r3, r3, #2
 800881a:	b29a      	uxth	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008820:	7efb      	ldrb	r3, [r7, #27]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d01b      	beq.n	800885e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	7d1b      	ldrb	r3, [r3, #20]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d106      	bne.n	800883c <tcp_process+0xa8>
 800882e:	4b7c      	ldr	r3, [pc, #496]	@ (8008a20 <tcp_process+0x28c>)
 8008830:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8008834:	4980      	ldr	r1, [pc, #512]	@ (8008a38 <tcp_process+0x2a4>)
 8008836:	487c      	ldr	r0, [pc, #496]	@ (8008a28 <tcp_process+0x294>)
 8008838:	f007 fdb8 	bl	80103ac <iprintf>
      recv_flags |= TF_RESET;
 800883c:	4b7f      	ldr	r3, [pc, #508]	@ (8008a3c <tcp_process+0x2a8>)
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	f043 0308 	orr.w	r3, r3, #8
 8008844:	b2da      	uxtb	r2, r3
 8008846:	4b7d      	ldr	r3, [pc, #500]	@ (8008a3c <tcp_process+0x2a8>)
 8008848:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	8b5b      	ldrh	r3, [r3, #26]
 800884e:	f023 0301 	bic.w	r3, r3, #1
 8008852:	b29a      	uxth	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008858:	f06f 030d 	mvn.w	r3, #13
 800885c:	e37a      	b.n	8008f54 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800885e:	2300      	movs	r3, #0
 8008860:	e378      	b.n	8008f54 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008862:	4b72      	ldr	r3, [pc, #456]	@ (8008a2c <tcp_process+0x298>)
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	f003 0302 	and.w	r3, r3, #2
 800886a:	2b00      	cmp	r3, #0
 800886c:	d010      	beq.n	8008890 <tcp_process+0xfc>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	7d1b      	ldrb	r3, [r3, #20]
 8008872:	2b02      	cmp	r3, #2
 8008874:	d00c      	beq.n	8008890 <tcp_process+0xfc>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	7d1b      	ldrb	r3, [r3, #20]
 800887a:	2b03      	cmp	r3, #3
 800887c:	d008      	beq.n	8008890 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	8b5b      	ldrh	r3, [r3, #26]
 8008882:	f043 0302 	orr.w	r3, r3, #2
 8008886:	b29a      	uxth	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800888c:	2300      	movs	r3, #0
 800888e:	e361      	b.n	8008f54 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	8b5b      	ldrh	r3, [r3, #26]
 8008894:	f003 0310 	and.w	r3, r3, #16
 8008898:	2b00      	cmp	r3, #0
 800889a:	d103      	bne.n	80088a4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800889c:	4b68      	ldr	r3, [pc, #416]	@ (8008a40 <tcp_process+0x2ac>)
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f001 fc2b 	bl	800a110 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	7d1b      	ldrb	r3, [r3, #20]
 80088be:	3b02      	subs	r3, #2
 80088c0:	2b07      	cmp	r3, #7
 80088c2:	f200 8337 	bhi.w	8008f34 <tcp_process+0x7a0>
 80088c6:	a201      	add	r2, pc, #4	@ (adr r2, 80088cc <tcp_process+0x138>)
 80088c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088cc:	080088ed 	.word	0x080088ed
 80088d0:	08008b1d 	.word	0x08008b1d
 80088d4:	08008c95 	.word	0x08008c95
 80088d8:	08008cbf 	.word	0x08008cbf
 80088dc:	08008de3 	.word	0x08008de3
 80088e0:	08008c95 	.word	0x08008c95
 80088e4:	08008e6f 	.word	0x08008e6f
 80088e8:	08008eff 	.word	0x08008eff
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80088ec:	4b4f      	ldr	r3, [pc, #316]	@ (8008a2c <tcp_process+0x298>)
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	f003 0310 	and.w	r3, r3, #16
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f000 80e4 	beq.w	8008ac2 <tcp_process+0x32e>
 80088fa:	4b4c      	ldr	r3, [pc, #304]	@ (8008a2c <tcp_process+0x298>)
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	f003 0302 	and.w	r3, r3, #2
 8008902:	2b00      	cmp	r3, #0
 8008904:	f000 80dd 	beq.w	8008ac2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800890c:	1c5a      	adds	r2, r3, #1
 800890e:	4b48      	ldr	r3, [pc, #288]	@ (8008a30 <tcp_process+0x29c>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	429a      	cmp	r2, r3
 8008914:	f040 80d5 	bne.w	8008ac2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008918:	4b46      	ldr	r3, [pc, #280]	@ (8008a34 <tcp_process+0x2a0>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	1c5a      	adds	r2, r3, #1
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800892a:	4b41      	ldr	r3, [pc, #260]	@ (8008a30 <tcp_process+0x29c>)
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008932:	4b44      	ldr	r3, [pc, #272]	@ (8008a44 <tcp_process+0x2b0>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	89db      	ldrh	r3, [r3, #14]
 8008938:	b29a      	uxth	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800894c:	4b39      	ldr	r3, [pc, #228]	@ (8008a34 <tcp_process+0x2a0>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	1e5a      	subs	r2, r3, #1
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2204      	movs	r2, #4
 800895a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	3304      	adds	r3, #4
 8008964:	4618      	mov	r0, r3
 8008966:	f004 ff43 	bl	800d7f0 <ip4_route>
 800896a:	4601      	mov	r1, r0
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	3304      	adds	r3, #4
 8008970:	461a      	mov	r2, r3
 8008972:	4620      	mov	r0, r4
 8008974:	f7ff f88c 	bl	8007a90 <tcp_eff_send_mss_netif>
 8008978:	4603      	mov	r3, r0
 800897a:	461a      	mov	r2, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008984:	009a      	lsls	r2, r3, #2
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800898a:	005b      	lsls	r3, r3, #1
 800898c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8008990:	428b      	cmp	r3, r1
 8008992:	bf38      	it	cc
 8008994:	460b      	movcc	r3, r1
 8008996:	429a      	cmp	r2, r3
 8008998:	d204      	bcs.n	80089a4 <tcp_process+0x210>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	e00d      	b.n	80089c0 <tcp_process+0x22c>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80089a8:	005b      	lsls	r3, r3, #1
 80089aa:	f241 121c 	movw	r2, #4380	@ 0x111c
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d904      	bls.n	80089bc <tcp_process+0x228>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80089b6:	005b      	lsls	r3, r3, #1
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	e001      	b.n	80089c0 <tcp_process+0x22c>
 80089bc:	f241 131c 	movw	r3, #4380	@ 0x111c
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d106      	bne.n	80089de <tcp_process+0x24a>
 80089d0:	4b13      	ldr	r3, [pc, #76]	@ (8008a20 <tcp_process+0x28c>)
 80089d2:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80089d6:	491c      	ldr	r1, [pc, #112]	@ (8008a48 <tcp_process+0x2b4>)
 80089d8:	4813      	ldr	r0, [pc, #76]	@ (8008a28 <tcp_process+0x294>)
 80089da:	f007 fce7 	bl	80103ac <iprintf>
        --pcb->snd_queuelen;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80089e4:	3b01      	subs	r3, #1
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089f2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d12a      	bne.n	8008a50 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089fe:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d106      	bne.n	8008a14 <tcp_process+0x280>
 8008a06:	4b06      	ldr	r3, [pc, #24]	@ (8008a20 <tcp_process+0x28c>)
 8008a08:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8008a0c:	490f      	ldr	r1, [pc, #60]	@ (8008a4c <tcp_process+0x2b8>)
 8008a0e:	4806      	ldr	r0, [pc, #24]	@ (8008a28 <tcp_process+0x294>)
 8008a10:	f007 fccc 	bl	80103ac <iprintf>
          pcb->unsent = rseg->next;
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008a1c:	e01c      	b.n	8008a58 <tcp_process+0x2c4>
 8008a1e:	bf00      	nop
 8008a20:	080127f8 	.word	0x080127f8
 8008a24:	08012a30 	.word	0x08012a30
 8008a28:	08012844 	.word	0x08012844
 8008a2c:	2000838c 	.word	0x2000838c
 8008a30:	20008384 	.word	0x20008384
 8008a34:	20008380 	.word	0x20008380
 8008a38:	08012a4c 	.word	0x08012a4c
 8008a3c:	2000838d 	.word	0x2000838d
 8008a40:	20008348 	.word	0x20008348
 8008a44:	20008370 	.word	0x20008370
 8008a48:	08012a6c 	.word	0x08012a6c
 8008a4c:	08012a84 	.word	0x08012a84
        } else {
          pcb->unacked = rseg->next;
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8008a58:	69f8      	ldr	r0, [r7, #28]
 8008a5a:	f7fe fce0 	bl	800741e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d104      	bne.n	8008a70 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008a6c:	861a      	strh	r2, [r3, #48]	@ 0x30
 8008a6e:	e006      	b.n	8008a7e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00a      	beq.n	8008a9e <tcp_process+0x30a>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	6910      	ldr	r0, [r2, #16]
 8008a92:	2200      	movs	r2, #0
 8008a94:	6879      	ldr	r1, [r7, #4]
 8008a96:	4798      	blx	r3
 8008a98:	4603      	mov	r3, r0
 8008a9a:	76bb      	strb	r3, [r7, #26]
 8008a9c:	e001      	b.n	8008aa2 <tcp_process+0x30e>
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008aa2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008aa6:	f113 0f0d 	cmn.w	r3, #13
 8008aaa:	d102      	bne.n	8008ab2 <tcp_process+0x31e>
          return ERR_ABRT;
 8008aac:	f06f 030c 	mvn.w	r3, #12
 8008ab0:	e250      	b.n	8008f54 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	8b5b      	ldrh	r3, [r3, #26]
 8008ab6:	f043 0302 	orr.w	r3, r3, #2
 8008aba:	b29a      	uxth	r2, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008ac0:	e23a      	b.n	8008f38 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008ac2:	4b98      	ldr	r3, [pc, #608]	@ (8008d24 <tcp_process+0x590>)
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	f003 0310 	and.w	r3, r3, #16
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f000 8234 	beq.w	8008f38 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ad0:	4b95      	ldr	r3, [pc, #596]	@ (8008d28 <tcp_process+0x594>)
 8008ad2:	6819      	ldr	r1, [r3, #0]
 8008ad4:	4b95      	ldr	r3, [pc, #596]	@ (8008d2c <tcp_process+0x598>)
 8008ad6:	881b      	ldrh	r3, [r3, #0]
 8008ad8:	461a      	mov	r2, r3
 8008ada:	4b95      	ldr	r3, [pc, #596]	@ (8008d30 <tcp_process+0x59c>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008ae0:	4b94      	ldr	r3, [pc, #592]	@ (8008d34 <tcp_process+0x5a0>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ae4:	885b      	ldrh	r3, [r3, #2]
 8008ae6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008ae8:	4a92      	ldr	r2, [pc, #584]	@ (8008d34 <tcp_process+0x5a0>)
 8008aea:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008aec:	8812      	ldrh	r2, [r2, #0]
 8008aee:	b292      	uxth	r2, r2
 8008af0:	9202      	str	r2, [sp, #8]
 8008af2:	9301      	str	r3, [sp, #4]
 8008af4:	4b90      	ldr	r3, [pc, #576]	@ (8008d38 <tcp_process+0x5a4>)
 8008af6:	9300      	str	r3, [sp, #0]
 8008af8:	4b90      	ldr	r3, [pc, #576]	@ (8008d3c <tcp_process+0x5a8>)
 8008afa:	4602      	mov	r2, r0
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f003 f8d7 	bl	800bcb0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008b08:	2b05      	cmp	r3, #5
 8008b0a:	f200 8215 	bhi.w	8008f38 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f002 fea3 	bl	800b860 <tcp_rexmit_rto>
      break;
 8008b1a:	e20d      	b.n	8008f38 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008b1c:	4b81      	ldr	r3, [pc, #516]	@ (8008d24 <tcp_process+0x590>)
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	f003 0310 	and.w	r3, r3, #16
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f000 80a1 	beq.w	8008c6c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008b2a:	4b7f      	ldr	r3, [pc, #508]	@ (8008d28 <tcp_process+0x594>)
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	3b01      	subs	r3, #1
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	db7e      	blt.n	8008c38 <tcp_process+0x4a4>
 8008b3a:	4b7b      	ldr	r3, [pc, #492]	@ (8008d28 <tcp_process+0x594>)
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b42:	1ad3      	subs	r3, r2, r3
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	dc77      	bgt.n	8008c38 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2204      	movs	r2, #4
 8008b4c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d102      	bne.n	8008b5c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8008b56:	23fa      	movs	r3, #250	@ 0xfa
 8008b58:	76bb      	strb	r3, [r7, #26]
 8008b5a:	e01d      	b.n	8008b98 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d106      	bne.n	8008b74 <tcp_process+0x3e0>
 8008b66:	4b76      	ldr	r3, [pc, #472]	@ (8008d40 <tcp_process+0x5ac>)
 8008b68:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8008b6c:	4975      	ldr	r1, [pc, #468]	@ (8008d44 <tcp_process+0x5b0>)
 8008b6e:	4876      	ldr	r0, [pc, #472]	@ (8008d48 <tcp_process+0x5b4>)
 8008b70:	f007 fc1c 	bl	80103ac <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b78:	699b      	ldr	r3, [r3, #24]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00a      	beq.n	8008b94 <tcp_process+0x400>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b82:	699b      	ldr	r3, [r3, #24]
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	6910      	ldr	r0, [r2, #16]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	6879      	ldr	r1, [r7, #4]
 8008b8c:	4798      	blx	r3
 8008b8e:	4603      	mov	r3, r0
 8008b90:	76bb      	strb	r3, [r7, #26]
 8008b92:	e001      	b.n	8008b98 <tcp_process+0x404>
 8008b94:	23f0      	movs	r3, #240	@ 0xf0
 8008b96:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008b98:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d00a      	beq.n	8008bb6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008ba0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008ba4:	f113 0f0d 	cmn.w	r3, #13
 8008ba8:	d002      	beq.n	8008bb0 <tcp_process+0x41c>
              tcp_abort(pcb);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f7fd fd90 	bl	80066d0 <tcp_abort>
            }
            return ERR_ABRT;
 8008bb0:	f06f 030c 	mvn.w	r3, #12
 8008bb4:	e1ce      	b.n	8008f54 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 fae0 	bl	800917c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008bbc:	4b63      	ldr	r3, [pc, #396]	@ (8008d4c <tcp_process+0x5b8>)
 8008bbe:	881b      	ldrh	r3, [r3, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d005      	beq.n	8008bd0 <tcp_process+0x43c>
            recv_acked--;
 8008bc4:	4b61      	ldr	r3, [pc, #388]	@ (8008d4c <tcp_process+0x5b8>)
 8008bc6:	881b      	ldrh	r3, [r3, #0]
 8008bc8:	3b01      	subs	r3, #1
 8008bca:	b29a      	uxth	r2, r3
 8008bcc:	4b5f      	ldr	r3, [pc, #380]	@ (8008d4c <tcp_process+0x5b8>)
 8008bce:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008bd4:	009a      	lsls	r2, r3, #2
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008bda:	005b      	lsls	r3, r3, #1
 8008bdc:	f241 111c 	movw	r1, #4380	@ 0x111c
 8008be0:	428b      	cmp	r3, r1
 8008be2:	bf38      	it	cc
 8008be4:	460b      	movcc	r3, r1
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d204      	bcs.n	8008bf4 <tcp_process+0x460>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	e00d      	b.n	8008c10 <tcp_process+0x47c>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008bf8:	005b      	lsls	r3, r3, #1
 8008bfa:	f241 121c 	movw	r2, #4380	@ 0x111c
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d904      	bls.n	8008c0c <tcp_process+0x478>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008c06:	005b      	lsls	r3, r3, #1
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	e001      	b.n	8008c10 <tcp_process+0x47c>
 8008c0c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008c16:	4b4e      	ldr	r3, [pc, #312]	@ (8008d50 <tcp_process+0x5bc>)
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	f003 0320 	and.w	r3, r3, #32
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d037      	beq.n	8008c92 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	8b5b      	ldrh	r3, [r3, #26]
 8008c26:	f043 0302 	orr.w	r3, r3, #2
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2207      	movs	r2, #7
 8008c34:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008c36:	e02c      	b.n	8008c92 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c38:	4b3b      	ldr	r3, [pc, #236]	@ (8008d28 <tcp_process+0x594>)
 8008c3a:	6819      	ldr	r1, [r3, #0]
 8008c3c:	4b3b      	ldr	r3, [pc, #236]	@ (8008d2c <tcp_process+0x598>)
 8008c3e:	881b      	ldrh	r3, [r3, #0]
 8008c40:	461a      	mov	r2, r3
 8008c42:	4b3b      	ldr	r3, [pc, #236]	@ (8008d30 <tcp_process+0x59c>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c48:	4b3a      	ldr	r3, [pc, #232]	@ (8008d34 <tcp_process+0x5a0>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c4c:	885b      	ldrh	r3, [r3, #2]
 8008c4e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c50:	4a38      	ldr	r2, [pc, #224]	@ (8008d34 <tcp_process+0x5a0>)
 8008c52:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c54:	8812      	ldrh	r2, [r2, #0]
 8008c56:	b292      	uxth	r2, r2
 8008c58:	9202      	str	r2, [sp, #8]
 8008c5a:	9301      	str	r3, [sp, #4]
 8008c5c:	4b36      	ldr	r3, [pc, #216]	@ (8008d38 <tcp_process+0x5a4>)
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	4b36      	ldr	r3, [pc, #216]	@ (8008d3c <tcp_process+0x5a8>)
 8008c62:	4602      	mov	r2, r0
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f003 f823 	bl	800bcb0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008c6a:	e167      	b.n	8008f3c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008c6c:	4b2d      	ldr	r3, [pc, #180]	@ (8008d24 <tcp_process+0x590>)
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	f003 0302 	and.w	r3, r3, #2
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f000 8161 	beq.w	8008f3c <tcp_process+0x7a8>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c7e:	1e5a      	subs	r2, r3, #1
 8008c80:	4b2b      	ldr	r3, [pc, #172]	@ (8008d30 <tcp_process+0x59c>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	f040 8159 	bne.w	8008f3c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f002 fe0a 	bl	800b8a4 <tcp_rexmit>
      break;
 8008c90:	e154      	b.n	8008f3c <tcp_process+0x7a8>
 8008c92:	e153      	b.n	8008f3c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 fa71 	bl	800917c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008c9a:	4b2d      	ldr	r3, [pc, #180]	@ (8008d50 <tcp_process+0x5bc>)
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	f003 0320 	and.w	r3, r3, #32
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f000 814c 	beq.w	8008f40 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	8b5b      	ldrh	r3, [r3, #26]
 8008cac:	f043 0302 	orr.w	r3, r3, #2
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2207      	movs	r2, #7
 8008cba:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008cbc:	e140      	b.n	8008f40 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 fa5c 	bl	800917c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008cc4:	4b22      	ldr	r3, [pc, #136]	@ (8008d50 <tcp_process+0x5bc>)
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	f003 0320 	and.w	r3, r3, #32
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d071      	beq.n	8008db4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008cd0:	4b14      	ldr	r3, [pc, #80]	@ (8008d24 <tcp_process+0x590>)
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	f003 0310 	and.w	r3, r3, #16
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d060      	beq.n	8008d9e <tcp_process+0x60a>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ce0:	4b11      	ldr	r3, [pc, #68]	@ (8008d28 <tcp_process+0x594>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d15a      	bne.n	8008d9e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d156      	bne.n	8008d9e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	8b5b      	ldrh	r3, [r3, #26]
 8008cf4:	f043 0302 	orr.w	r3, r3, #2
 8008cf8:	b29a      	uxth	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f7fe fdbc 	bl	800787c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008d04:	4b13      	ldr	r3, [pc, #76]	@ (8008d54 <tcp_process+0x5c0>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d105      	bne.n	8008d1a <tcp_process+0x586>
 8008d0e:	4b11      	ldr	r3, [pc, #68]	@ (8008d54 <tcp_process+0x5c0>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	4a0f      	ldr	r2, [pc, #60]	@ (8008d54 <tcp_process+0x5c0>)
 8008d16:	6013      	str	r3, [r2, #0]
 8008d18:	e02e      	b.n	8008d78 <tcp_process+0x5e4>
 8008d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8008d54 <tcp_process+0x5c0>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	617b      	str	r3, [r7, #20]
 8008d20:	e027      	b.n	8008d72 <tcp_process+0x5de>
 8008d22:	bf00      	nop
 8008d24:	2000838c 	.word	0x2000838c
 8008d28:	20008384 	.word	0x20008384
 8008d2c:	2000838a 	.word	0x2000838a
 8008d30:	20008380 	.word	0x20008380
 8008d34:	20008370 	.word	0x20008370
 8008d38:	20004de8 	.word	0x20004de8
 8008d3c:	20004dec 	.word	0x20004dec
 8008d40:	080127f8 	.word	0x080127f8
 8008d44:	08012a98 	.word	0x08012a98
 8008d48:	08012844 	.word	0x08012844
 8008d4c:	20008388 	.word	0x20008388
 8008d50:	2000838d 	.word	0x2000838d
 8008d54:	20008354 	.word	0x20008354
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d104      	bne.n	8008d6c <tcp_process+0x5d8>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	68da      	ldr	r2, [r3, #12]
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	60da      	str	r2, [r3, #12]
 8008d6a:	e005      	b.n	8008d78 <tcp_process+0x5e4>
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	617b      	str	r3, [r7, #20]
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d1ef      	bne.n	8008d58 <tcp_process+0x5c4>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	60da      	str	r2, [r3, #12]
 8008d7e:	4b77      	ldr	r3, [pc, #476]	@ (8008f5c <tcp_process+0x7c8>)
 8008d80:	2201      	movs	r2, #1
 8008d82:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	220a      	movs	r2, #10
 8008d88:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8008d8a:	4b75      	ldr	r3, [pc, #468]	@ (8008f60 <tcp_process+0x7cc>)
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	60da      	str	r2, [r3, #12]
 8008d92:	4a73      	ldr	r2, [pc, #460]	@ (8008f60 <tcp_process+0x7cc>)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6013      	str	r3, [r2, #0]
 8008d98:	f003 f94c 	bl	800c034 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8008d9c:	e0d2      	b.n	8008f44 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	8b5b      	ldrh	r3, [r3, #26]
 8008da2:	f043 0302 	orr.w	r3, r3, #2
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2208      	movs	r2, #8
 8008db0:	751a      	strb	r2, [r3, #20]
      break;
 8008db2:	e0c7      	b.n	8008f44 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008db4:	4b6b      	ldr	r3, [pc, #428]	@ (8008f64 <tcp_process+0x7d0>)
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	f003 0310 	and.w	r3, r3, #16
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f000 80c1 	beq.w	8008f44 <tcp_process+0x7b0>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008dc6:	4b68      	ldr	r3, [pc, #416]	@ (8008f68 <tcp_process+0x7d4>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	f040 80ba 	bne.w	8008f44 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f040 80b5 	bne.w	8008f44 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2206      	movs	r2, #6
 8008dde:	751a      	strb	r2, [r3, #20]
      break;
 8008de0:	e0b0      	b.n	8008f44 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f9ca 	bl	800917c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008de8:	4b60      	ldr	r3, [pc, #384]	@ (8008f6c <tcp_process+0x7d8>)
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	f003 0320 	and.w	r3, r3, #32
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	f000 80a9 	beq.w	8008f48 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	8b5b      	ldrh	r3, [r3, #26]
 8008dfa:	f043 0302 	orr.w	r3, r3, #2
 8008dfe:	b29a      	uxth	r2, r3
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f7fe fd39 	bl	800787c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008e0a:	4b59      	ldr	r3, [pc, #356]	@ (8008f70 <tcp_process+0x7dc>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d105      	bne.n	8008e20 <tcp_process+0x68c>
 8008e14:	4b56      	ldr	r3, [pc, #344]	@ (8008f70 <tcp_process+0x7dc>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	4a55      	ldr	r2, [pc, #340]	@ (8008f70 <tcp_process+0x7dc>)
 8008e1c:	6013      	str	r3, [r2, #0]
 8008e1e:	e013      	b.n	8008e48 <tcp_process+0x6b4>
 8008e20:	4b53      	ldr	r3, [pc, #332]	@ (8008f70 <tcp_process+0x7dc>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	613b      	str	r3, [r7, #16]
 8008e26:	e00c      	b.n	8008e42 <tcp_process+0x6ae>
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d104      	bne.n	8008e3c <tcp_process+0x6a8>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	68da      	ldr	r2, [r3, #12]
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	60da      	str	r2, [r3, #12]
 8008e3a:	e005      	b.n	8008e48 <tcp_process+0x6b4>
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	613b      	str	r3, [r7, #16]
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d1ef      	bne.n	8008e28 <tcp_process+0x694>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	60da      	str	r2, [r3, #12]
 8008e4e:	4b43      	ldr	r3, [pc, #268]	@ (8008f5c <tcp_process+0x7c8>)
 8008e50:	2201      	movs	r2, #1
 8008e52:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	220a      	movs	r2, #10
 8008e58:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008e5a:	4b41      	ldr	r3, [pc, #260]	@ (8008f60 <tcp_process+0x7cc>)
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	60da      	str	r2, [r3, #12]
 8008e62:	4a3f      	ldr	r2, [pc, #252]	@ (8008f60 <tcp_process+0x7cc>)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6013      	str	r3, [r2, #0]
 8008e68:	f003 f8e4 	bl	800c034 <tcp_timer_needed>
      }
      break;
 8008e6c:	e06c      	b.n	8008f48 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f984 	bl	800917c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008e74:	4b3b      	ldr	r3, [pc, #236]	@ (8008f64 <tcp_process+0x7d0>)
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	f003 0310 	and.w	r3, r3, #16
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d065      	beq.n	8008f4c <tcp_process+0x7b8>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008e84:	4b38      	ldr	r3, [pc, #224]	@ (8008f68 <tcp_process+0x7d4>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d15f      	bne.n	8008f4c <tcp_process+0x7b8>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d15b      	bne.n	8008f4c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f7fe fcf1 	bl	800787c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008e9a:	4b35      	ldr	r3, [pc, #212]	@ (8008f70 <tcp_process+0x7dc>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d105      	bne.n	8008eb0 <tcp_process+0x71c>
 8008ea4:	4b32      	ldr	r3, [pc, #200]	@ (8008f70 <tcp_process+0x7dc>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	4a31      	ldr	r2, [pc, #196]	@ (8008f70 <tcp_process+0x7dc>)
 8008eac:	6013      	str	r3, [r2, #0]
 8008eae:	e013      	b.n	8008ed8 <tcp_process+0x744>
 8008eb0:	4b2f      	ldr	r3, [pc, #188]	@ (8008f70 <tcp_process+0x7dc>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	60fb      	str	r3, [r7, #12]
 8008eb6:	e00c      	b.n	8008ed2 <tcp_process+0x73e>
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d104      	bne.n	8008ecc <tcp_process+0x738>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	68da      	ldr	r2, [r3, #12]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	60da      	str	r2, [r3, #12]
 8008eca:	e005      	b.n	8008ed8 <tcp_process+0x744>
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	60fb      	str	r3, [r7, #12]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1ef      	bne.n	8008eb8 <tcp_process+0x724>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	60da      	str	r2, [r3, #12]
 8008ede:	4b1f      	ldr	r3, [pc, #124]	@ (8008f5c <tcp_process+0x7c8>)
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	220a      	movs	r2, #10
 8008ee8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008eea:	4b1d      	ldr	r3, [pc, #116]	@ (8008f60 <tcp_process+0x7cc>)
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	60da      	str	r2, [r3, #12]
 8008ef2:	4a1b      	ldr	r2, [pc, #108]	@ (8008f60 <tcp_process+0x7cc>)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6013      	str	r3, [r2, #0]
 8008ef8:	f003 f89c 	bl	800c034 <tcp_timer_needed>
      }
      break;
 8008efc:	e026      	b.n	8008f4c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 f93c 	bl	800917c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008f04:	4b17      	ldr	r3, [pc, #92]	@ (8008f64 <tcp_process+0x7d0>)
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	f003 0310 	and.w	r3, r3, #16
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d01f      	beq.n	8008f50 <tcp_process+0x7bc>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f14:	4b14      	ldr	r3, [pc, #80]	@ (8008f68 <tcp_process+0x7d4>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d119      	bne.n	8008f50 <tcp_process+0x7bc>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d115      	bne.n	8008f50 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008f24:	4b11      	ldr	r3, [pc, #68]	@ (8008f6c <tcp_process+0x7d8>)
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	f043 0310 	orr.w	r3, r3, #16
 8008f2c:	b2da      	uxtb	r2, r3
 8008f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8008f6c <tcp_process+0x7d8>)
 8008f30:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008f32:	e00d      	b.n	8008f50 <tcp_process+0x7bc>
    default:
      break;
 8008f34:	bf00      	nop
 8008f36:	e00c      	b.n	8008f52 <tcp_process+0x7be>
      break;
 8008f38:	bf00      	nop
 8008f3a:	e00a      	b.n	8008f52 <tcp_process+0x7be>
      break;
 8008f3c:	bf00      	nop
 8008f3e:	e008      	b.n	8008f52 <tcp_process+0x7be>
      break;
 8008f40:	bf00      	nop
 8008f42:	e006      	b.n	8008f52 <tcp_process+0x7be>
      break;
 8008f44:	bf00      	nop
 8008f46:	e004      	b.n	8008f52 <tcp_process+0x7be>
      break;
 8008f48:	bf00      	nop
 8008f4a:	e002      	b.n	8008f52 <tcp_process+0x7be>
      break;
 8008f4c:	bf00      	nop
 8008f4e:	e000      	b.n	8008f52 <tcp_process+0x7be>
      break;
 8008f50:	bf00      	nop
  }
  return ERR_OK;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3724      	adds	r7, #36	@ 0x24
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd90      	pop	{r4, r7, pc}
 8008f5c:	2000835c 	.word	0x2000835c
 8008f60:	20008358 	.word	0x20008358
 8008f64:	2000838c 	.word	0x2000838c
 8008f68:	20008384 	.word	0x20008384
 8008f6c:	2000838d 	.word	0x2000838d
 8008f70:	20008354 	.word	0x20008354

08008f74 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008f74:	b590      	push	{r4, r7, lr}
 8008f76:	b085      	sub	sp, #20
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d106      	bne.n	8008f92 <tcp_oos_insert_segment+0x1e>
 8008f84:	4b3b      	ldr	r3, [pc, #236]	@ (8009074 <tcp_oos_insert_segment+0x100>)
 8008f86:	f240 421f 	movw	r2, #1055	@ 0x41f
 8008f8a:	493b      	ldr	r1, [pc, #236]	@ (8009078 <tcp_oos_insert_segment+0x104>)
 8008f8c:	483b      	ldr	r0, [pc, #236]	@ (800907c <tcp_oos_insert_segment+0x108>)
 8008f8e:	f007 fa0d 	bl	80103ac <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	899b      	ldrh	r3, [r3, #12]
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7fb fab2 	bl	8004504 <lwip_htons>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	f003 0301 	and.w	r3, r3, #1
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d028      	beq.n	8008ffe <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008fac:	6838      	ldr	r0, [r7, #0]
 8008fae:	f7fe fa21 	bl	80073f4 <tcp_segs_free>
    next = NULL;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	603b      	str	r3, [r7, #0]
 8008fb6:	e056      	b.n	8009066 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	899b      	ldrh	r3, [r3, #12]
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7fb fa9f 	bl	8004504 <lwip_htons>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	f003 0301 	and.w	r3, r3, #1
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00d      	beq.n	8008fee <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	899b      	ldrh	r3, [r3, #12]
 8008fd8:	b29c      	uxth	r4, r3
 8008fda:	2001      	movs	r0, #1
 8008fdc:	f7fb fa92 	bl	8004504 <lwip_htons>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	4322      	orrs	r2, r4
 8008fea:	b292      	uxth	r2, r2
 8008fec:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8008ff8:	68f8      	ldr	r0, [r7, #12]
 8008ffa:	f7fe fa10 	bl	800741e <tcp_seg_free>
    while (next &&
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00e      	beq.n	8009022 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	891b      	ldrh	r3, [r3, #8]
 8009008:	461a      	mov	r2, r3
 800900a:	4b1d      	ldr	r3, [pc, #116]	@ (8009080 <tcp_oos_insert_segment+0x10c>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	441a      	add	r2, r3
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	6839      	ldr	r1, [r7, #0]
 8009018:	8909      	ldrh	r1, [r1, #8]
 800901a:	440b      	add	r3, r1
 800901c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800901e:	2b00      	cmp	r3, #0
 8009020:	daca      	bge.n	8008fb8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d01e      	beq.n	8009066 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	891b      	ldrh	r3, [r3, #8]
 800902c:	461a      	mov	r2, r3
 800902e:	4b14      	ldr	r3, [pc, #80]	@ (8009080 <tcp_oos_insert_segment+0x10c>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	441a      	add	r2, r3
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800903c:	2b00      	cmp	r3, #0
 800903e:	dd12      	ble.n	8009066 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	b29a      	uxth	r2, r3
 8009048:	4b0d      	ldr	r3, [pc, #52]	@ (8009080 <tcp_oos_insert_segment+0x10c>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	b29b      	uxth	r3, r3
 800904e:	1ad3      	subs	r3, r2, r3
 8009050:	b29a      	uxth	r2, r3
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	685a      	ldr	r2, [r3, #4]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	891b      	ldrh	r3, [r3, #8]
 800905e:	4619      	mov	r1, r3
 8009060:	4610      	mov	r0, r2
 8009062:	f7fc fc27 	bl	80058b4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	683a      	ldr	r2, [r7, #0]
 800906a:	601a      	str	r2, [r3, #0]
}
 800906c:	bf00      	nop
 800906e:	3714      	adds	r7, #20
 8009070:	46bd      	mov	sp, r7
 8009072:	bd90      	pop	{r4, r7, pc}
 8009074:	080127f8 	.word	0x080127f8
 8009078:	08012ab8 	.word	0x08012ab8
 800907c:	08012844 	.word	0x08012844
 8009080:	20008380 	.word	0x20008380

08009084 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009084:	b5b0      	push	{r4, r5, r7, lr}
 8009086:	b086      	sub	sp, #24
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	607a      	str	r2, [r7, #4]
 8009090:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009092:	e03e      	b.n	8009112 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7fc fe14 	bl	8005cd0 <pbuf_clen>
 80090a8:	4603      	mov	r3, r0
 80090aa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80090b2:	8a7a      	ldrh	r2, [r7, #18]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d906      	bls.n	80090c6 <tcp_free_acked_segments+0x42>
 80090b8:	4b2a      	ldr	r3, [pc, #168]	@ (8009164 <tcp_free_acked_segments+0xe0>)
 80090ba:	f240 4257 	movw	r2, #1111	@ 0x457
 80090be:	492a      	ldr	r1, [pc, #168]	@ (8009168 <tcp_free_acked_segments+0xe4>)
 80090c0:	482a      	ldr	r0, [pc, #168]	@ (800916c <tcp_free_acked_segments+0xe8>)
 80090c2:	f007 f973 	bl	80103ac <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80090cc:	8a7b      	ldrh	r3, [r7, #18]
 80090ce:	1ad3      	subs	r3, r2, r3
 80090d0:	b29a      	uxth	r2, r3
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	891a      	ldrh	r2, [r3, #8]
 80090dc:	4b24      	ldr	r3, [pc, #144]	@ (8009170 <tcp_free_acked_segments+0xec>)
 80090de:	881b      	ldrh	r3, [r3, #0]
 80090e0:	4413      	add	r3, r2
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	4b22      	ldr	r3, [pc, #136]	@ (8009170 <tcp_free_acked_segments+0xec>)
 80090e6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80090e8:	6978      	ldr	r0, [r7, #20]
 80090ea:	f7fe f998 	bl	800741e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00c      	beq.n	8009112 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d109      	bne.n	8009112 <tcp_free_acked_segments+0x8e>
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d106      	bne.n	8009112 <tcp_free_acked_segments+0x8e>
 8009104:	4b17      	ldr	r3, [pc, #92]	@ (8009164 <tcp_free_acked_segments+0xe0>)
 8009106:	f240 4261 	movw	r2, #1121	@ 0x461
 800910a:	491a      	ldr	r1, [pc, #104]	@ (8009174 <tcp_free_acked_segments+0xf0>)
 800910c:	4817      	ldr	r0, [pc, #92]	@ (800916c <tcp_free_acked_segments+0xe8>)
 800910e:	f007 f94d 	bl	80103ac <iprintf>
  while (seg_list != NULL &&
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d020      	beq.n	800915a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	4618      	mov	r0, r3
 8009120:	f7fb fa06 	bl	8004530 <lwip_htonl>
 8009124:	4604      	mov	r4, r0
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	891b      	ldrh	r3, [r3, #8]
 800912a:	461d      	mov	r5, r3
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	899b      	ldrh	r3, [r3, #12]
 8009132:	b29b      	uxth	r3, r3
 8009134:	4618      	mov	r0, r3
 8009136:	f7fb f9e5 	bl	8004504 <lwip_htons>
 800913a:	4603      	mov	r3, r0
 800913c:	b2db      	uxtb	r3, r3
 800913e:	f003 0303 	and.w	r3, r3, #3
 8009142:	2b00      	cmp	r3, #0
 8009144:	d001      	beq.n	800914a <tcp_free_acked_segments+0xc6>
 8009146:	2301      	movs	r3, #1
 8009148:	e000      	b.n	800914c <tcp_free_acked_segments+0xc8>
 800914a:	2300      	movs	r3, #0
 800914c:	442b      	add	r3, r5
 800914e:	18e2      	adds	r2, r4, r3
 8009150:	4b09      	ldr	r3, [pc, #36]	@ (8009178 <tcp_free_acked_segments+0xf4>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009156:	2b00      	cmp	r3, #0
 8009158:	dd9c      	ble.n	8009094 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800915a:	68bb      	ldr	r3, [r7, #8]
}
 800915c:	4618      	mov	r0, r3
 800915e:	3718      	adds	r7, #24
 8009160:	46bd      	mov	sp, r7
 8009162:	bdb0      	pop	{r4, r5, r7, pc}
 8009164:	080127f8 	.word	0x080127f8
 8009168:	08012ae0 	.word	0x08012ae0
 800916c:	08012844 	.word	0x08012844
 8009170:	20008388 	.word	0x20008388
 8009174:	08012b08 	.word	0x08012b08
 8009178:	20008384 	.word	0x20008384

0800917c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800917c:	b5b0      	push	{r4, r5, r7, lr}
 800917e:	b094      	sub	sp, #80	@ 0x50
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009184:	2300      	movs	r3, #0
 8009186:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d106      	bne.n	800919c <tcp_receive+0x20>
 800918e:	4b91      	ldr	r3, [pc, #580]	@ (80093d4 <tcp_receive+0x258>)
 8009190:	f240 427b 	movw	r2, #1147	@ 0x47b
 8009194:	4990      	ldr	r1, [pc, #576]	@ (80093d8 <tcp_receive+0x25c>)
 8009196:	4891      	ldr	r0, [pc, #580]	@ (80093dc <tcp_receive+0x260>)
 8009198:	f007 f908 	bl	80103ac <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	7d1b      	ldrb	r3, [r3, #20]
 80091a0:	2b03      	cmp	r3, #3
 80091a2:	d806      	bhi.n	80091b2 <tcp_receive+0x36>
 80091a4:	4b8b      	ldr	r3, [pc, #556]	@ (80093d4 <tcp_receive+0x258>)
 80091a6:	f240 427c 	movw	r2, #1148	@ 0x47c
 80091aa:	498d      	ldr	r1, [pc, #564]	@ (80093e0 <tcp_receive+0x264>)
 80091ac:	488b      	ldr	r0, [pc, #556]	@ (80093dc <tcp_receive+0x260>)
 80091ae:	f007 f8fd 	bl	80103ac <iprintf>

  if (flags & TCP_ACK) {
 80091b2:	4b8c      	ldr	r3, [pc, #560]	@ (80093e4 <tcp_receive+0x268>)
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	f003 0310 	and.w	r3, r3, #16
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f000 8264 	beq.w	8009688 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80091c6:	461a      	mov	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091cc:	4413      	add	r3, r2
 80091ce:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80091d4:	4b84      	ldr	r3, [pc, #528]	@ (80093e8 <tcp_receive+0x26c>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	1ad3      	subs	r3, r2, r3
 80091da:	2b00      	cmp	r3, #0
 80091dc:	db1b      	blt.n	8009216 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80091e2:	4b81      	ldr	r3, [pc, #516]	@ (80093e8 <tcp_receive+0x26c>)
 80091e4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d106      	bne.n	80091f8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80091ee:	4b7f      	ldr	r3, [pc, #508]	@ (80093ec <tcp_receive+0x270>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	1ad3      	subs	r3, r2, r3
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	db0e      	blt.n	8009216 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80091fc:	4b7b      	ldr	r3, [pc, #492]	@ (80093ec <tcp_receive+0x270>)
 80091fe:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009200:	429a      	cmp	r2, r3
 8009202:	d125      	bne.n	8009250 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009204:	4b7a      	ldr	r3, [pc, #488]	@ (80093f0 <tcp_receive+0x274>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	89db      	ldrh	r3, [r3, #14]
 800920a:	b29a      	uxth	r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009212:	429a      	cmp	r2, r3
 8009214:	d91c      	bls.n	8009250 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009216:	4b76      	ldr	r3, [pc, #472]	@ (80093f0 <tcp_receive+0x274>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	89db      	ldrh	r3, [r3, #14]
 800921c:	b29a      	uxth	r2, r3
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009230:	429a      	cmp	r2, r3
 8009232:	d205      	bcs.n	8009240 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8009240:	4b69      	ldr	r3, [pc, #420]	@ (80093e8 <tcp_receive+0x26c>)
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8009248:	4b68      	ldr	r3, [pc, #416]	@ (80093ec <tcp_receive+0x270>)
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009250:	4b66      	ldr	r3, [pc, #408]	@ (80093ec <tcp_receive+0x270>)
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	2b00      	cmp	r3, #0
 800925c:	dc58      	bgt.n	8009310 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800925e:	4b65      	ldr	r3, [pc, #404]	@ (80093f4 <tcp_receive+0x278>)
 8009260:	881b      	ldrh	r3, [r3, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d14b      	bne.n	80092fe <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8009270:	4413      	add	r3, r2
 8009272:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009274:	429a      	cmp	r2, r3
 8009276:	d142      	bne.n	80092fe <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800927e:	2b00      	cmp	r3, #0
 8009280:	db3d      	blt.n	80092fe <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009286:	4b59      	ldr	r3, [pc, #356]	@ (80093ec <tcp_receive+0x270>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	429a      	cmp	r2, r3
 800928c:	d137      	bne.n	80092fe <tcp_receive+0x182>
              found_dupack = 1;
 800928e:	2301      	movs	r3, #1
 8009290:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009298:	2bff      	cmp	r3, #255	@ 0xff
 800929a:	d007      	beq.n	80092ac <tcp_receive+0x130>
                ++pcb->dupacks;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80092a2:	3301      	adds	r3, #1
 80092a4:	b2da      	uxtb	r2, r3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80092b2:	2b03      	cmp	r3, #3
 80092b4:	d91b      	bls.n	80092ee <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80092c0:	4413      	add	r3, r2
 80092c2:	b29a      	uxth	r2, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d30a      	bcc.n	80092e4 <tcp_receive+0x168>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80092d8:	4413      	add	r3, r2
 80092da:	b29a      	uxth	r2, r3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80092e2:	e004      	b.n	80092ee <tcp_receive+0x172>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80092ea:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d902      	bls.n	80092fe <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f002 fb3f 	bl	800b97c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80092fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009300:	2b00      	cmp	r3, #0
 8009302:	f040 8161 	bne.w	80095c8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800930e:	e15b      	b.n	80095c8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009310:	4b36      	ldr	r3, [pc, #216]	@ (80093ec <tcp_receive+0x270>)
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	3b01      	subs	r3, #1
 800931c:	2b00      	cmp	r3, #0
 800931e:	f2c0 814e 	blt.w	80095be <tcp_receive+0x442>
 8009322:	4b32      	ldr	r3, [pc, #200]	@ (80093ec <tcp_receive+0x270>)
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800932a:	1ad3      	subs	r3, r2, r3
 800932c:	2b00      	cmp	r3, #0
 800932e:	f300 8146 	bgt.w	80095be <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	8b5b      	ldrh	r3, [r3, #26]
 8009336:	f003 0304 	and.w	r3, r3, #4
 800933a:	2b00      	cmp	r3, #0
 800933c:	d010      	beq.n	8009360 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	8b5b      	ldrh	r3, [r3, #26]
 8009342:	f023 0304 	bic.w	r3, r3, #4
 8009346:	b29a      	uxth	r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800936e:	10db      	asrs	r3, r3, #3
 8009370:	b21b      	sxth	r3, r3
 8009372:	b29a      	uxth	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800937a:	b29b      	uxth	r3, r3
 800937c:	4413      	add	r3, r2
 800937e:	b29b      	uxth	r3, r3
 8009380:	b21a      	sxth	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009388:	4b18      	ldr	r3, [pc, #96]	@ (80093ec <tcp_receive+0x270>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	b29a      	uxth	r2, r3
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009392:	b29b      	uxth	r3, r3
 8009394:	1ad3      	subs	r3, r2, r3
 8009396:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80093a0:	4b12      	ldr	r3, [pc, #72]	@ (80093ec <tcp_receive+0x270>)
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	7d1b      	ldrb	r3, [r3, #20]
 80093ac:	2b03      	cmp	r3, #3
 80093ae:	f240 8097 	bls.w	80094e0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80093be:	429a      	cmp	r2, r3
 80093c0:	d245      	bcs.n	800944e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	8b5b      	ldrh	r3, [r3, #26]
 80093c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d014      	beq.n	80093f8 <tcp_receive+0x27c>
 80093ce:	2301      	movs	r3, #1
 80093d0:	e013      	b.n	80093fa <tcp_receive+0x27e>
 80093d2:	bf00      	nop
 80093d4:	080127f8 	.word	0x080127f8
 80093d8:	08012b28 	.word	0x08012b28
 80093dc:	08012844 	.word	0x08012844
 80093e0:	08012b44 	.word	0x08012b44
 80093e4:	2000838c 	.word	0x2000838c
 80093e8:	20008380 	.word	0x20008380
 80093ec:	20008384 	.word	0x20008384
 80093f0:	20008370 	.word	0x20008370
 80093f4:	2000838a 	.word	0x2000838a
 80093f8:	2302      	movs	r3, #2
 80093fa:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80093fe:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8009402:	b29a      	uxth	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009408:	fb12 f303 	smulbb	r3, r2, r3
 800940c:	b29b      	uxth	r3, r3
 800940e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009410:	4293      	cmp	r3, r2
 8009412:	bf28      	it	cs
 8009414:	4613      	movcs	r3, r2
 8009416:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800941e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009420:	4413      	add	r3, r2
 8009422:	b29a      	uxth	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800942a:	429a      	cmp	r2, r3
 800942c:	d309      	bcc.n	8009442 <tcp_receive+0x2c6>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009434:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009436:	4413      	add	r3, r2
 8009438:	b29a      	uxth	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009440:	e04e      	b.n	80094e0 <tcp_receive+0x364>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009448:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800944c:	e048      	b.n	80094e0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009454:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009456:	4413      	add	r3, r2
 8009458:	b29a      	uxth	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009460:	429a      	cmp	r2, r3
 8009462:	d309      	bcc.n	8009478 <tcp_receive+0x2fc>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800946a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800946c:	4413      	add	r3, r2
 800946e:	b29a      	uxth	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009476:	e004      	b.n	8009482 <tcp_receive+0x306>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800947e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800948e:	429a      	cmp	r2, r3
 8009490:	d326      	bcc.n	80094e0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800949e:	1ad3      	subs	r3, r2, r3
 80094a0:	b29a      	uxth	r2, r3
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80094b2:	4413      	add	r3, r2
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80094bc:	429a      	cmp	r2, r3
 80094be:	d30a      	bcc.n	80094d6 <tcp_receive+0x35a>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80094ca:	4413      	add	r3, r2
 80094cc:	b29a      	uxth	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80094d4:	e004      	b.n	80094e0 <tcp_receive+0x364>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80094dc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094e8:	4a98      	ldr	r2, [pc, #608]	@ (800974c <tcp_receive+0x5d0>)
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f7ff fdca 	bl	8009084 <tcp_free_acked_segments>
 80094f0:	4602      	mov	r2, r0
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094fe:	4a94      	ldr	r2, [pc, #592]	@ (8009750 <tcp_receive+0x5d4>)
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f7ff fdbf 	bl	8009084 <tcp_free_acked_segments>
 8009506:	4602      	mov	r2, r0
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009510:	2b00      	cmp	r3, #0
 8009512:	d104      	bne.n	800951e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800951a:	861a      	strh	r2, [r3, #48]	@ 0x30
 800951c:	e002      	b.n	8009524 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800952e:	2b00      	cmp	r3, #0
 8009530:	d103      	bne.n	800953a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8009540:	4b84      	ldr	r3, [pc, #528]	@ (8009754 <tcp_receive+0x5d8>)
 8009542:	881b      	ldrh	r3, [r3, #0]
 8009544:	4413      	add	r3, r2
 8009546:	b29a      	uxth	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	8b5b      	ldrh	r3, [r3, #26]
 8009552:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009556:	2b00      	cmp	r3, #0
 8009558:	d035      	beq.n	80095c6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800955e:	2b00      	cmp	r3, #0
 8009560:	d118      	bne.n	8009594 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00c      	beq.n	8009584 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	4618      	mov	r0, r3
 8009578:	f7fa ffda 	bl	8004530 <lwip_htonl>
 800957c:	4603      	mov	r3, r0
 800957e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009580:	2b00      	cmp	r3, #0
 8009582:	dc20      	bgt.n	80095c6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	8b5b      	ldrh	r3, [r3, #26]
 8009588:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800958c:	b29a      	uxth	r2, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009592:	e018      	b.n	80095c6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7fa ffc5 	bl	8004530 <lwip_htonl>
 80095a6:	4603      	mov	r3, r0
 80095a8:	1ae3      	subs	r3, r4, r3
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	dc0b      	bgt.n	80095c6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	8b5b      	ldrh	r3, [r3, #26]
 80095b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80095bc:	e003      	b.n	80095c6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f002 fbc8 	bl	800bd54 <tcp_send_empty_ack>
 80095c4:	e000      	b.n	80095c8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80095c6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d05b      	beq.n	8009688 <tcp_receive+0x50c>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095d4:	4b60      	ldr	r3, [pc, #384]	@ (8009758 <tcp_receive+0x5dc>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	1ad3      	subs	r3, r2, r3
 80095da:	2b00      	cmp	r3, #0
 80095dc:	da54      	bge.n	8009688 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80095de:	4b5f      	ldr	r3, [pc, #380]	@ (800975c <tcp_receive+0x5e0>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	1ad3      	subs	r3, r2, r3
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80095f2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80095fc:	10db      	asrs	r3, r3, #3
 80095fe:	b21b      	sxth	r3, r3
 8009600:	b29b      	uxth	r3, r3
 8009602:	1ad3      	subs	r3, r2, r3
 8009604:	b29b      	uxth	r3, r3
 8009606:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009610:	b29a      	uxth	r2, r3
 8009612:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009616:	4413      	add	r3, r2
 8009618:	b29b      	uxth	r3, r3
 800961a:	b21a      	sxth	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8009620:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8009624:	2b00      	cmp	r3, #0
 8009626:	da05      	bge.n	8009634 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009628:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800962c:	425b      	negs	r3, r3
 800962e:	b29b      	uxth	r3, r3
 8009630:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009634:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800963e:	109b      	asrs	r3, r3, #2
 8009640:	b21b      	sxth	r3, r3
 8009642:	b29b      	uxth	r3, r3
 8009644:	1ad3      	subs	r3, r2, r3
 8009646:	b29b      	uxth	r3, r3
 8009648:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009652:	b29a      	uxth	r2, r3
 8009654:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009658:	4413      	add	r3, r2
 800965a:	b29b      	uxth	r3, r3
 800965c:	b21a      	sxth	r2, r3
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009668:	10db      	asrs	r3, r3, #3
 800966a:	b21b      	sxth	r3, r3
 800966c:	b29a      	uxth	r2, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009674:	b29b      	uxth	r3, r3
 8009676:	4413      	add	r3, r2
 8009678:	b29b      	uxth	r3, r3
 800967a:	b21a      	sxth	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009688:	4b35      	ldr	r3, [pc, #212]	@ (8009760 <tcp_receive+0x5e4>)
 800968a:	881b      	ldrh	r3, [r3, #0]
 800968c:	2b00      	cmp	r3, #0
 800968e:	f000 84df 	beq.w	800a050 <tcp_receive+0xed4>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	7d1b      	ldrb	r3, [r3, #20]
 8009696:	2b06      	cmp	r3, #6
 8009698:	f200 84da 	bhi.w	800a050 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80096a0:	4b30      	ldr	r3, [pc, #192]	@ (8009764 <tcp_receive+0x5e8>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	1ad3      	subs	r3, r2, r3
 80096a6:	3b01      	subs	r3, #1
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f2c0 808f 	blt.w	80097cc <tcp_receive+0x650>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80096b2:	4b2b      	ldr	r3, [pc, #172]	@ (8009760 <tcp_receive+0x5e4>)
 80096b4:	881b      	ldrh	r3, [r3, #0]
 80096b6:	4619      	mov	r1, r3
 80096b8:	4b2a      	ldr	r3, [pc, #168]	@ (8009764 <tcp_receive+0x5e8>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	440b      	add	r3, r1
 80096be:	1ad3      	subs	r3, r2, r3
 80096c0:	3301      	adds	r3, #1
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	f300 8082 	bgt.w	80097cc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80096c8:	4b27      	ldr	r3, [pc, #156]	@ (8009768 <tcp_receive+0x5ec>)
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80096d2:	4b24      	ldr	r3, [pc, #144]	@ (8009764 <tcp_receive+0x5e8>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	1ad3      	subs	r3, r2, r3
 80096d8:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80096da:	4b23      	ldr	r3, [pc, #140]	@ (8009768 <tcp_receive+0x5ec>)
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d106      	bne.n	80096f0 <tcp_receive+0x574>
 80096e2:	4b22      	ldr	r3, [pc, #136]	@ (800976c <tcp_receive+0x5f0>)
 80096e4:	f240 5294 	movw	r2, #1428	@ 0x594
 80096e8:	4921      	ldr	r1, [pc, #132]	@ (8009770 <tcp_receive+0x5f4>)
 80096ea:	4822      	ldr	r0, [pc, #136]	@ (8009774 <tcp_receive+0x5f8>)
 80096ec:	f006 fe5e 	bl	80103ac <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80096f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d906      	bls.n	8009708 <tcp_receive+0x58c>
 80096fa:	4b1c      	ldr	r3, [pc, #112]	@ (800976c <tcp_receive+0x5f0>)
 80096fc:	f240 5295 	movw	r2, #1429	@ 0x595
 8009700:	491d      	ldr	r1, [pc, #116]	@ (8009778 <tcp_receive+0x5fc>)
 8009702:	481c      	ldr	r0, [pc, #112]	@ (8009774 <tcp_receive+0x5f8>)
 8009704:	f006 fe52 	bl	80103ac <iprintf>
      off = (u16_t)off32;
 8009708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800970a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800970e:	4b16      	ldr	r3, [pc, #88]	@ (8009768 <tcp_receive+0x5ec>)
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	891b      	ldrh	r3, [r3, #8]
 8009714:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009718:	429a      	cmp	r2, r3
 800971a:	d906      	bls.n	800972a <tcp_receive+0x5ae>
 800971c:	4b13      	ldr	r3, [pc, #76]	@ (800976c <tcp_receive+0x5f0>)
 800971e:	f240 5297 	movw	r2, #1431	@ 0x597
 8009722:	4916      	ldr	r1, [pc, #88]	@ (800977c <tcp_receive+0x600>)
 8009724:	4813      	ldr	r0, [pc, #76]	@ (8009774 <tcp_receive+0x5f8>)
 8009726:	f006 fe41 	bl	80103ac <iprintf>
      inseg.len -= off;
 800972a:	4b0f      	ldr	r3, [pc, #60]	@ (8009768 <tcp_receive+0x5ec>)
 800972c:	891a      	ldrh	r2, [r3, #8]
 800972e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	b29a      	uxth	r2, r3
 8009736:	4b0c      	ldr	r3, [pc, #48]	@ (8009768 <tcp_receive+0x5ec>)
 8009738:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800973a:	4b0b      	ldr	r3, [pc, #44]	@ (8009768 <tcp_receive+0x5ec>)
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	891a      	ldrh	r2, [r3, #8]
 8009740:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009744:	1ad3      	subs	r3, r2, r3
 8009746:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8009748:	e02a      	b.n	80097a0 <tcp_receive+0x624>
 800974a:	bf00      	nop
 800974c:	08012b60 	.word	0x08012b60
 8009750:	08012b68 	.word	0x08012b68
 8009754:	20008388 	.word	0x20008388
 8009758:	20008384 	.word	0x20008384
 800975c:	20008348 	.word	0x20008348
 8009760:	2000838a 	.word	0x2000838a
 8009764:	20008380 	.word	0x20008380
 8009768:	20008360 	.word	0x20008360
 800976c:	080127f8 	.word	0x080127f8
 8009770:	08012b70 	.word	0x08012b70
 8009774:	08012844 	.word	0x08012844
 8009778:	08012b80 	.word	0x08012b80
 800977c:	08012b90 	.word	0x08012b90
        off -= p->len;
 8009780:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009782:	895b      	ldrh	r3, [r3, #10]
 8009784:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800978e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009790:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8009792:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009796:	2200      	movs	r2, #0
 8009798:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800979a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80097a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097a2:	895b      	ldrh	r3, [r3, #10]
 80097a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d8e9      	bhi.n	8009780 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80097ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80097b0:	4619      	mov	r1, r3
 80097b2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80097b4:	f7fc f97e 	bl	8005ab4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097bc:	4a90      	ldr	r2, [pc, #576]	@ (8009a00 <tcp_receive+0x884>)
 80097be:	6013      	str	r3, [r2, #0]
 80097c0:	4b90      	ldr	r3, [pc, #576]	@ (8009a04 <tcp_receive+0x888>)
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	4a8e      	ldr	r2, [pc, #568]	@ (8009a00 <tcp_receive+0x884>)
 80097c6:	6812      	ldr	r2, [r2, #0]
 80097c8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80097ca:	e00d      	b.n	80097e8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80097cc:	4b8c      	ldr	r3, [pc, #560]	@ (8009a00 <tcp_receive+0x884>)
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097d4:	1ad3      	subs	r3, r2, r3
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	da06      	bge.n	80097e8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	8b5b      	ldrh	r3, [r3, #26]
 80097de:	f043 0302 	orr.w	r3, r3, #2
 80097e2:	b29a      	uxth	r2, r3
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80097e8:	4b85      	ldr	r3, [pc, #532]	@ (8009a00 <tcp_receive+0x884>)
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097f0:	1ad3      	subs	r3, r2, r3
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	f2c0 8427 	blt.w	800a046 <tcp_receive+0xeca>
 80097f8:	4b81      	ldr	r3, [pc, #516]	@ (8009a00 <tcp_receive+0x884>)
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009800:	6879      	ldr	r1, [r7, #4]
 8009802:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009804:	440b      	add	r3, r1
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	3301      	adds	r3, #1
 800980a:	2b00      	cmp	r3, #0
 800980c:	f300 841b 	bgt.w	800a046 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009814:	4b7a      	ldr	r3, [pc, #488]	@ (8009a00 <tcp_receive+0x884>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	429a      	cmp	r2, r3
 800981a:	f040 8298 	bne.w	8009d4e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800981e:	4b79      	ldr	r3, [pc, #484]	@ (8009a04 <tcp_receive+0x888>)
 8009820:	891c      	ldrh	r4, [r3, #8]
 8009822:	4b78      	ldr	r3, [pc, #480]	@ (8009a04 <tcp_receive+0x888>)
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	899b      	ldrh	r3, [r3, #12]
 8009828:	b29b      	uxth	r3, r3
 800982a:	4618      	mov	r0, r3
 800982c:	f7fa fe6a 	bl	8004504 <lwip_htons>
 8009830:	4603      	mov	r3, r0
 8009832:	b2db      	uxtb	r3, r3
 8009834:	f003 0303 	and.w	r3, r3, #3
 8009838:	2b00      	cmp	r3, #0
 800983a:	d001      	beq.n	8009840 <tcp_receive+0x6c4>
 800983c:	2301      	movs	r3, #1
 800983e:	e000      	b.n	8009842 <tcp_receive+0x6c6>
 8009840:	2300      	movs	r3, #0
 8009842:	4423      	add	r3, r4
 8009844:	b29a      	uxth	r2, r3
 8009846:	4b70      	ldr	r3, [pc, #448]	@ (8009a08 <tcp_receive+0x88c>)
 8009848:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800984e:	4b6e      	ldr	r3, [pc, #440]	@ (8009a08 <tcp_receive+0x88c>)
 8009850:	881b      	ldrh	r3, [r3, #0]
 8009852:	429a      	cmp	r2, r3
 8009854:	d274      	bcs.n	8009940 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009856:	4b6b      	ldr	r3, [pc, #428]	@ (8009a04 <tcp_receive+0x888>)
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	899b      	ldrh	r3, [r3, #12]
 800985c:	b29b      	uxth	r3, r3
 800985e:	4618      	mov	r0, r3
 8009860:	f7fa fe50 	bl	8004504 <lwip_htons>
 8009864:	4603      	mov	r3, r0
 8009866:	b2db      	uxtb	r3, r3
 8009868:	f003 0301 	and.w	r3, r3, #1
 800986c:	2b00      	cmp	r3, #0
 800986e:	d01e      	beq.n	80098ae <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009870:	4b64      	ldr	r3, [pc, #400]	@ (8009a04 <tcp_receive+0x888>)
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	899b      	ldrh	r3, [r3, #12]
 8009876:	b29b      	uxth	r3, r3
 8009878:	b21b      	sxth	r3, r3
 800987a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800987e:	b21c      	sxth	r4, r3
 8009880:	4b60      	ldr	r3, [pc, #384]	@ (8009a04 <tcp_receive+0x888>)
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	899b      	ldrh	r3, [r3, #12]
 8009886:	b29b      	uxth	r3, r3
 8009888:	4618      	mov	r0, r3
 800988a:	f7fa fe3b 	bl	8004504 <lwip_htons>
 800988e:	4603      	mov	r3, r0
 8009890:	b2db      	uxtb	r3, r3
 8009892:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8009896:	b29b      	uxth	r3, r3
 8009898:	4618      	mov	r0, r3
 800989a:	f7fa fe33 	bl	8004504 <lwip_htons>
 800989e:	4603      	mov	r3, r0
 80098a0:	b21b      	sxth	r3, r3
 80098a2:	4323      	orrs	r3, r4
 80098a4:	b21a      	sxth	r2, r3
 80098a6:	4b57      	ldr	r3, [pc, #348]	@ (8009a04 <tcp_receive+0x888>)
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	b292      	uxth	r2, r2
 80098ac:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80098b2:	4b54      	ldr	r3, [pc, #336]	@ (8009a04 <tcp_receive+0x888>)
 80098b4:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80098b6:	4b53      	ldr	r3, [pc, #332]	@ (8009a04 <tcp_receive+0x888>)
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	899b      	ldrh	r3, [r3, #12]
 80098bc:	b29b      	uxth	r3, r3
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fa fe20 	bl	8004504 <lwip_htons>
 80098c4:	4603      	mov	r3, r0
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	f003 0302 	and.w	r3, r3, #2
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d005      	beq.n	80098dc <tcp_receive+0x760>
            inseg.len -= 1;
 80098d0:	4b4c      	ldr	r3, [pc, #304]	@ (8009a04 <tcp_receive+0x888>)
 80098d2:	891b      	ldrh	r3, [r3, #8]
 80098d4:	3b01      	subs	r3, #1
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	4b4a      	ldr	r3, [pc, #296]	@ (8009a04 <tcp_receive+0x888>)
 80098da:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80098dc:	4b49      	ldr	r3, [pc, #292]	@ (8009a04 <tcp_receive+0x888>)
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	4a48      	ldr	r2, [pc, #288]	@ (8009a04 <tcp_receive+0x888>)
 80098e2:	8912      	ldrh	r2, [r2, #8]
 80098e4:	4611      	mov	r1, r2
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7fb ffe4 	bl	80058b4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80098ec:	4b45      	ldr	r3, [pc, #276]	@ (8009a04 <tcp_receive+0x888>)
 80098ee:	891c      	ldrh	r4, [r3, #8]
 80098f0:	4b44      	ldr	r3, [pc, #272]	@ (8009a04 <tcp_receive+0x888>)
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	899b      	ldrh	r3, [r3, #12]
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7fa fe03 	bl	8004504 <lwip_htons>
 80098fe:	4603      	mov	r3, r0
 8009900:	b2db      	uxtb	r3, r3
 8009902:	f003 0303 	and.w	r3, r3, #3
 8009906:	2b00      	cmp	r3, #0
 8009908:	d001      	beq.n	800990e <tcp_receive+0x792>
 800990a:	2301      	movs	r3, #1
 800990c:	e000      	b.n	8009910 <tcp_receive+0x794>
 800990e:	2300      	movs	r3, #0
 8009910:	4423      	add	r3, r4
 8009912:	b29a      	uxth	r2, r3
 8009914:	4b3c      	ldr	r3, [pc, #240]	@ (8009a08 <tcp_receive+0x88c>)
 8009916:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009918:	4b3b      	ldr	r3, [pc, #236]	@ (8009a08 <tcp_receive+0x88c>)
 800991a:	881b      	ldrh	r3, [r3, #0]
 800991c:	461a      	mov	r2, r3
 800991e:	4b38      	ldr	r3, [pc, #224]	@ (8009a00 <tcp_receive+0x884>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	441a      	add	r2, r3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009928:	6879      	ldr	r1, [r7, #4]
 800992a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800992c:	440b      	add	r3, r1
 800992e:	429a      	cmp	r2, r3
 8009930:	d006      	beq.n	8009940 <tcp_receive+0x7c4>
 8009932:	4b36      	ldr	r3, [pc, #216]	@ (8009a0c <tcp_receive+0x890>)
 8009934:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8009938:	4935      	ldr	r1, [pc, #212]	@ (8009a10 <tcp_receive+0x894>)
 800993a:	4836      	ldr	r0, [pc, #216]	@ (8009a14 <tcp_receive+0x898>)
 800993c:	f006 fd36 	bl	80103ac <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009944:	2b00      	cmp	r3, #0
 8009946:	f000 80e6 	beq.w	8009b16 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800994a:	4b2e      	ldr	r3, [pc, #184]	@ (8009a04 <tcp_receive+0x888>)
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	899b      	ldrh	r3, [r3, #12]
 8009950:	b29b      	uxth	r3, r3
 8009952:	4618      	mov	r0, r3
 8009954:	f7fa fdd6 	bl	8004504 <lwip_htons>
 8009958:	4603      	mov	r3, r0
 800995a:	b2db      	uxtb	r3, r3
 800995c:	f003 0301 	and.w	r3, r3, #1
 8009960:	2b00      	cmp	r3, #0
 8009962:	d010      	beq.n	8009986 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009964:	e00a      	b.n	800997c <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800996a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	f7fd fd51 	bl	800741e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1f0      	bne.n	8009966 <tcp_receive+0x7ea>
 8009984:	e0c7      	b.n	8009b16 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800998a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800998c:	e051      	b.n	8009a32 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800998e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	899b      	ldrh	r3, [r3, #12]
 8009994:	b29b      	uxth	r3, r3
 8009996:	4618      	mov	r0, r3
 8009998:	f7fa fdb4 	bl	8004504 <lwip_htons>
 800999c:	4603      	mov	r3, r0
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	f003 0301 	and.w	r3, r3, #1
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d03c      	beq.n	8009a22 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80099a8:	4b16      	ldr	r3, [pc, #88]	@ (8009a04 <tcp_receive+0x888>)
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	899b      	ldrh	r3, [r3, #12]
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7fa fda7 	bl	8004504 <lwip_htons>
 80099b6:	4603      	mov	r3, r0
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d12f      	bne.n	8009a22 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80099c2:	4b10      	ldr	r3, [pc, #64]	@ (8009a04 <tcp_receive+0x888>)
 80099c4:	68db      	ldr	r3, [r3, #12]
 80099c6:	899b      	ldrh	r3, [r3, #12]
 80099c8:	b29c      	uxth	r4, r3
 80099ca:	2001      	movs	r0, #1
 80099cc:	f7fa fd9a 	bl	8004504 <lwip_htons>
 80099d0:	4603      	mov	r3, r0
 80099d2:	461a      	mov	r2, r3
 80099d4:	4b0b      	ldr	r3, [pc, #44]	@ (8009a04 <tcp_receive+0x888>)
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	4322      	orrs	r2, r4
 80099da:	b292      	uxth	r2, r2
 80099dc:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80099de:	4b09      	ldr	r3, [pc, #36]	@ (8009a04 <tcp_receive+0x888>)
 80099e0:	891c      	ldrh	r4, [r3, #8]
 80099e2:	4b08      	ldr	r3, [pc, #32]	@ (8009a04 <tcp_receive+0x888>)
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	899b      	ldrh	r3, [r3, #12]
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7fa fd8a 	bl	8004504 <lwip_htons>
 80099f0:	4603      	mov	r3, r0
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	f003 0303 	and.w	r3, r3, #3
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00d      	beq.n	8009a18 <tcp_receive+0x89c>
 80099fc:	2301      	movs	r3, #1
 80099fe:	e00c      	b.n	8009a1a <tcp_receive+0x89e>
 8009a00:	20008380 	.word	0x20008380
 8009a04:	20008360 	.word	0x20008360
 8009a08:	2000838a 	.word	0x2000838a
 8009a0c:	080127f8 	.word	0x080127f8
 8009a10:	08012ba0 	.word	0x08012ba0
 8009a14:	08012844 	.word	0x08012844
 8009a18:	2300      	movs	r3, #0
 8009a1a:	4423      	add	r3, r4
 8009a1c:	b29a      	uxth	r2, r3
 8009a1e:	4b98      	ldr	r3, [pc, #608]	@ (8009c80 <tcp_receive+0xb04>)
 8009a20:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009a22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a24:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8009a2c:	6938      	ldr	r0, [r7, #16]
 8009a2e:	f7fd fcf6 	bl	800741e <tcp_seg_free>
            while (next &&
 8009a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00e      	beq.n	8009a56 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009a38:	4b91      	ldr	r3, [pc, #580]	@ (8009c80 <tcp_receive+0xb04>)
 8009a3a:	881b      	ldrh	r3, [r3, #0]
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	4b91      	ldr	r3, [pc, #580]	@ (8009c84 <tcp_receive+0xb08>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	441a      	add	r2, r3
 8009a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a4c:	8909      	ldrh	r1, [r1, #8]
 8009a4e:	440b      	add	r3, r1
 8009a50:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	da9b      	bge.n	800998e <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d059      	beq.n	8009b10 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8009a5c:	4b88      	ldr	r3, [pc, #544]	@ (8009c80 <tcp_receive+0xb04>)
 8009a5e:	881b      	ldrh	r3, [r3, #0]
 8009a60:	461a      	mov	r2, r3
 8009a62:	4b88      	ldr	r3, [pc, #544]	@ (8009c84 <tcp_receive+0xb08>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	441a      	add	r2, r3
 8009a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a6a:	68db      	ldr	r3, [r3, #12]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	dd4d      	ble.n	8009b10 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	b29a      	uxth	r2, r3
 8009a7c:	4b81      	ldr	r3, [pc, #516]	@ (8009c84 <tcp_receive+0xb08>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	b29a      	uxth	r2, r3
 8009a86:	4b80      	ldr	r3, [pc, #512]	@ (8009c88 <tcp_receive+0xb0c>)
 8009a88:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009a8a:	4b7f      	ldr	r3, [pc, #508]	@ (8009c88 <tcp_receive+0xb0c>)
 8009a8c:	68db      	ldr	r3, [r3, #12]
 8009a8e:	899b      	ldrh	r3, [r3, #12]
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7fa fd36 	bl	8004504 <lwip_htons>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	f003 0302 	and.w	r3, r3, #2
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d005      	beq.n	8009ab0 <tcp_receive+0x934>
                inseg.len -= 1;
 8009aa4:	4b78      	ldr	r3, [pc, #480]	@ (8009c88 <tcp_receive+0xb0c>)
 8009aa6:	891b      	ldrh	r3, [r3, #8]
 8009aa8:	3b01      	subs	r3, #1
 8009aaa:	b29a      	uxth	r2, r3
 8009aac:	4b76      	ldr	r3, [pc, #472]	@ (8009c88 <tcp_receive+0xb0c>)
 8009aae:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009ab0:	4b75      	ldr	r3, [pc, #468]	@ (8009c88 <tcp_receive+0xb0c>)
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	4a74      	ldr	r2, [pc, #464]	@ (8009c88 <tcp_receive+0xb0c>)
 8009ab6:	8912      	ldrh	r2, [r2, #8]
 8009ab8:	4611      	mov	r1, r2
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7fb fefa 	bl	80058b4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009ac0:	4b71      	ldr	r3, [pc, #452]	@ (8009c88 <tcp_receive+0xb0c>)
 8009ac2:	891c      	ldrh	r4, [r3, #8]
 8009ac4:	4b70      	ldr	r3, [pc, #448]	@ (8009c88 <tcp_receive+0xb0c>)
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	899b      	ldrh	r3, [r3, #12]
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	4618      	mov	r0, r3
 8009ace:	f7fa fd19 	bl	8004504 <lwip_htons>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	f003 0303 	and.w	r3, r3, #3
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d001      	beq.n	8009ae2 <tcp_receive+0x966>
 8009ade:	2301      	movs	r3, #1
 8009ae0:	e000      	b.n	8009ae4 <tcp_receive+0x968>
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	4423      	add	r3, r4
 8009ae6:	b29a      	uxth	r2, r3
 8009ae8:	4b65      	ldr	r3, [pc, #404]	@ (8009c80 <tcp_receive+0xb04>)
 8009aea:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009aec:	4b64      	ldr	r3, [pc, #400]	@ (8009c80 <tcp_receive+0xb04>)
 8009aee:	881b      	ldrh	r3, [r3, #0]
 8009af0:	461a      	mov	r2, r3
 8009af2:	4b64      	ldr	r3, [pc, #400]	@ (8009c84 <tcp_receive+0xb08>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	441a      	add	r2, r3
 8009af8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d006      	beq.n	8009b10 <tcp_receive+0x994>
 8009b02:	4b62      	ldr	r3, [pc, #392]	@ (8009c8c <tcp_receive+0xb10>)
 8009b04:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8009b08:	4961      	ldr	r1, [pc, #388]	@ (8009c90 <tcp_receive+0xb14>)
 8009b0a:	4862      	ldr	r0, [pc, #392]	@ (8009c94 <tcp_receive+0xb18>)
 8009b0c:	f006 fc4e 	bl	80103ac <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009b14:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009b16:	4b5a      	ldr	r3, [pc, #360]	@ (8009c80 <tcp_receive+0xb04>)
 8009b18:	881b      	ldrh	r3, [r3, #0]
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	4b59      	ldr	r3, [pc, #356]	@ (8009c84 <tcp_receive+0xb08>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	441a      	add	r2, r3
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009b2a:	4b55      	ldr	r3, [pc, #340]	@ (8009c80 <tcp_receive+0xb04>)
 8009b2c:	881b      	ldrh	r3, [r3, #0]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d206      	bcs.n	8009b40 <tcp_receive+0x9c4>
 8009b32:	4b56      	ldr	r3, [pc, #344]	@ (8009c8c <tcp_receive+0xb10>)
 8009b34:	f240 6207 	movw	r2, #1543	@ 0x607
 8009b38:	4957      	ldr	r1, [pc, #348]	@ (8009c98 <tcp_receive+0xb1c>)
 8009b3a:	4856      	ldr	r0, [pc, #344]	@ (8009c94 <tcp_receive+0xb18>)
 8009b3c:	f006 fc36 	bl	80103ac <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009b44:	4b4e      	ldr	r3, [pc, #312]	@ (8009c80 <tcp_receive+0xb04>)
 8009b46:	881b      	ldrh	r3, [r3, #0]
 8009b48:	1ad3      	subs	r3, r2, r3
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f7fc ff3d 	bl	80069d0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009b56:	4b4c      	ldr	r3, [pc, #304]	@ (8009c88 <tcp_receive+0xb0c>)
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	891b      	ldrh	r3, [r3, #8]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d006      	beq.n	8009b6e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8009b60:	4b49      	ldr	r3, [pc, #292]	@ (8009c88 <tcp_receive+0xb0c>)
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	4a4d      	ldr	r2, [pc, #308]	@ (8009c9c <tcp_receive+0xb20>)
 8009b66:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009b68:	4b47      	ldr	r3, [pc, #284]	@ (8009c88 <tcp_receive+0xb0c>)
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009b6e:	4b46      	ldr	r3, [pc, #280]	@ (8009c88 <tcp_receive+0xb0c>)
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	899b      	ldrh	r3, [r3, #12]
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	4618      	mov	r0, r3
 8009b78:	f7fa fcc4 	bl	8004504 <lwip_htons>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	f003 0301 	and.w	r3, r3, #1
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f000 80b8 	beq.w	8009cfa <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009b8a:	4b45      	ldr	r3, [pc, #276]	@ (8009ca0 <tcp_receive+0xb24>)
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	f043 0320 	orr.w	r3, r3, #32
 8009b92:	b2da      	uxtb	r2, r3
 8009b94:	4b42      	ldr	r3, [pc, #264]	@ (8009ca0 <tcp_receive+0xb24>)
 8009b96:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009b98:	e0af      	b.n	8009cfa <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b9e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	4a36      	ldr	r2, [pc, #216]	@ (8009c84 <tcp_receive+0xb08>)
 8009baa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	891b      	ldrh	r3, [r3, #8]
 8009bb0:	461c      	mov	r4, r3
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	899b      	ldrh	r3, [r3, #12]
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7fa fca2 	bl	8004504 <lwip_htons>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	f003 0303 	and.w	r3, r3, #3
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d001      	beq.n	8009bd0 <tcp_receive+0xa54>
 8009bcc:	2301      	movs	r3, #1
 8009bce:	e000      	b.n	8009bd2 <tcp_receive+0xa56>
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	191a      	adds	r2, r3, r4
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bd8:	441a      	add	r2, r3
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009be2:	461c      	mov	r4, r3
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	891b      	ldrh	r3, [r3, #8]
 8009be8:	461d      	mov	r5, r3
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	68db      	ldr	r3, [r3, #12]
 8009bee:	899b      	ldrh	r3, [r3, #12]
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7fa fc86 	bl	8004504 <lwip_htons>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	f003 0303 	and.w	r3, r3, #3
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d001      	beq.n	8009c08 <tcp_receive+0xa8c>
 8009c04:	2301      	movs	r3, #1
 8009c06:	e000      	b.n	8009c0a <tcp_receive+0xa8e>
 8009c08:	2300      	movs	r3, #0
 8009c0a:	442b      	add	r3, r5
 8009c0c:	429c      	cmp	r4, r3
 8009c0e:	d206      	bcs.n	8009c1e <tcp_receive+0xaa2>
 8009c10:	4b1e      	ldr	r3, [pc, #120]	@ (8009c8c <tcp_receive+0xb10>)
 8009c12:	f240 622b 	movw	r2, #1579	@ 0x62b
 8009c16:	4923      	ldr	r1, [pc, #140]	@ (8009ca4 <tcp_receive+0xb28>)
 8009c18:	481e      	ldr	r0, [pc, #120]	@ (8009c94 <tcp_receive+0xb18>)
 8009c1a:	f006 fbc7 	bl	80103ac <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	891b      	ldrh	r3, [r3, #8]
 8009c22:	461c      	mov	r4, r3
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	899b      	ldrh	r3, [r3, #12]
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f7fa fc69 	bl	8004504 <lwip_htons>
 8009c32:	4603      	mov	r3, r0
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	f003 0303 	and.w	r3, r3, #3
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d001      	beq.n	8009c42 <tcp_receive+0xac6>
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e000      	b.n	8009c44 <tcp_receive+0xac8>
 8009c42:	2300      	movs	r3, #0
 8009c44:	1919      	adds	r1, r3, r4
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009c4a:	b28b      	uxth	r3, r1
 8009c4c:	1ad3      	subs	r3, r2, r3
 8009c4e:	b29a      	uxth	r2, r3
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f7fc febb 	bl	80069d0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	891b      	ldrh	r3, [r3, #8]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d028      	beq.n	8009cb6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009c64:	4b0d      	ldr	r3, [pc, #52]	@ (8009c9c <tcp_receive+0xb20>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d01d      	beq.n	8009ca8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8009c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8009c9c <tcp_receive+0xb20>)
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	4619      	mov	r1, r3
 8009c76:	4610      	mov	r0, r2
 8009c78:	f7fc f864 	bl	8005d44 <pbuf_cat>
 8009c7c:	e018      	b.n	8009cb0 <tcp_receive+0xb34>
 8009c7e:	bf00      	nop
 8009c80:	2000838a 	.word	0x2000838a
 8009c84:	20008380 	.word	0x20008380
 8009c88:	20008360 	.word	0x20008360
 8009c8c:	080127f8 	.word	0x080127f8
 8009c90:	08012bd8 	.word	0x08012bd8
 8009c94:	08012844 	.word	0x08012844
 8009c98:	08012c14 	.word	0x08012c14
 8009c9c:	20008390 	.word	0x20008390
 8009ca0:	2000838d 	.word	0x2000838d
 8009ca4:	08012c34 	.word	0x08012c34
            } else {
              recv_data = cseg->p;
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	4a70      	ldr	r2, [pc, #448]	@ (8009e70 <tcp_receive+0xcf4>)
 8009cae:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	68db      	ldr	r3, [r3, #12]
 8009cba:	899b      	ldrh	r3, [r3, #12]
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7fa fc20 	bl	8004504 <lwip_htons>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	f003 0301 	and.w	r3, r3, #1
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d00d      	beq.n	8009cec <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009cd0:	4b68      	ldr	r3, [pc, #416]	@ (8009e74 <tcp_receive+0xcf8>)
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	f043 0320 	orr.w	r3, r3, #32
 8009cd8:	b2da      	uxtb	r2, r3
 8009cda:	4b66      	ldr	r3, [pc, #408]	@ (8009e74 <tcp_receive+0xcf8>)
 8009cdc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	7d1b      	ldrb	r3, [r3, #20]
 8009ce2:	2b04      	cmp	r3, #4
 8009ce4:	d102      	bne.n	8009cec <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2207      	movs	r2, #7
 8009cea:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8009cf4:	68b8      	ldr	r0, [r7, #8]
 8009cf6:	f7fd fb92 	bl	800741e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d008      	beq.n	8009d14 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	685a      	ldr	r2, [r3, #4]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	f43f af43 	beq.w	8009b9a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	8b5b      	ldrh	r3, [r3, #26]
 8009d18:	f003 0301 	and.w	r3, r3, #1
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d00e      	beq.n	8009d3e <tcp_receive+0xbc2>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	8b5b      	ldrh	r3, [r3, #26]
 8009d24:	f023 0301 	bic.w	r3, r3, #1
 8009d28:	b29a      	uxth	r2, r3
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	835a      	strh	r2, [r3, #26]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	8b5b      	ldrh	r3, [r3, #26]
 8009d32:	f043 0302 	orr.w	r3, r3, #2
 8009d36:	b29a      	uxth	r2, r3
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009d3c:	e187      	b.n	800a04e <tcp_receive+0xed2>
        tcp_ack(pcb);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	8b5b      	ldrh	r3, [r3, #26]
 8009d42:	f043 0301 	orr.w	r3, r3, #1
 8009d46:	b29a      	uxth	r2, r3
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009d4c:	e17f      	b.n	800a04e <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d106      	bne.n	8009d64 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009d56:	4848      	ldr	r0, [pc, #288]	@ (8009e78 <tcp_receive+0xcfc>)
 8009d58:	f7fd fb7a 	bl	8007450 <tcp_seg_copy>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	675a      	str	r2, [r3, #116]	@ 0x74
 8009d62:	e16c      	b.n	800a03e <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009d64:	2300      	movs	r3, #0
 8009d66:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009d6e:	e156      	b.n	800a01e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8009d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	685a      	ldr	r2, [r3, #4]
 8009d76:	4b41      	ldr	r3, [pc, #260]	@ (8009e7c <tcp_receive+0xd00>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d11d      	bne.n	8009dba <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009d7e:	4b3e      	ldr	r3, [pc, #248]	@ (8009e78 <tcp_receive+0xcfc>)
 8009d80:	891a      	ldrh	r2, [r3, #8]
 8009d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d84:	891b      	ldrh	r3, [r3, #8]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	f240 814e 	bls.w	800a028 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009d8c:	483a      	ldr	r0, [pc, #232]	@ (8009e78 <tcp_receive+0xcfc>)
 8009d8e:	f7fd fb5f 	bl	8007450 <tcp_seg_copy>
 8009d92:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	f000 8148 	beq.w	800a02c <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8009d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d003      	beq.n	8009daa <tcp_receive+0xc2e>
                    prev->next = cseg;
 8009da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009da4:	697a      	ldr	r2, [r7, #20]
 8009da6:	601a      	str	r2, [r3, #0]
 8009da8:	e002      	b.n	8009db0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	697a      	ldr	r2, [r7, #20]
 8009dae:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009db0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009db2:	6978      	ldr	r0, [r7, #20]
 8009db4:	f7ff f8de 	bl	8008f74 <tcp_oos_insert_segment>
                }
                break;
 8009db8:	e138      	b.n	800a02c <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8009dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d117      	bne.n	8009df0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009dc0:	4b2e      	ldr	r3, [pc, #184]	@ (8009e7c <tcp_receive+0xd00>)
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	1ad3      	subs	r3, r2, r3
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	da57      	bge.n	8009e80 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009dd0:	4829      	ldr	r0, [pc, #164]	@ (8009e78 <tcp_receive+0xcfc>)
 8009dd2:	f7fd fb3d 	bl	8007450 <tcp_seg_copy>
 8009dd6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	f000 8128 	beq.w	800a030 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	69ba      	ldr	r2, [r7, #24]
 8009de4:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8009de6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009de8:	69b8      	ldr	r0, [r7, #24]
 8009dea:	f7ff f8c3 	bl	8008f74 <tcp_oos_insert_segment>
                  }
                  break;
 8009dee:	e11f      	b.n	800a030 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009df0:	4b22      	ldr	r3, [pc, #136]	@ (8009e7c <tcp_receive+0xd00>)
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	1ad3      	subs	r3, r2, r3
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	db3e      	blt.n	8009e80 <tcp_receive+0xd04>
 8009e02:	4b1e      	ldr	r3, [pc, #120]	@ (8009e7c <tcp_receive+0xd00>)
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	1ad3      	subs	r3, r2, r3
 8009e0e:	3301      	adds	r3, #1
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	dc35      	bgt.n	8009e80 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009e14:	4818      	ldr	r0, [pc, #96]	@ (8009e78 <tcp_receive+0xcfc>)
 8009e16:	f7fd fb1b 	bl	8007450 <tcp_seg_copy>
 8009e1a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	f000 8108 	beq.w	800a034 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e2c:	8912      	ldrh	r2, [r2, #8]
 8009e2e:	441a      	add	r2, r3
 8009e30:	4b12      	ldr	r3, [pc, #72]	@ (8009e7c <tcp_receive+0xd00>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	1ad3      	subs	r3, r2, r3
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	dd12      	ble.n	8009e60 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009e3a:	4b10      	ldr	r3, [pc, #64]	@ (8009e7c <tcp_receive+0xd00>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	b29a      	uxth	r2, r3
 8009e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	1ad3      	subs	r3, r2, r3
 8009e4a:	b29a      	uxth	r2, r3
 8009e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e4e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e52:	685a      	ldr	r2, [r3, #4]
 8009e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e56:	891b      	ldrh	r3, [r3, #8]
 8009e58:	4619      	mov	r1, r3
 8009e5a:	4610      	mov	r0, r2
 8009e5c:	f7fb fd2a 	bl	80058b4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e62:	69fa      	ldr	r2, [r7, #28]
 8009e64:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009e66:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009e68:	69f8      	ldr	r0, [r7, #28]
 8009e6a:	f7ff f883 	bl	8008f74 <tcp_oos_insert_segment>
                  }
                  break;
 8009e6e:	e0e1      	b.n	800a034 <tcp_receive+0xeb8>
 8009e70:	20008390 	.word	0x20008390
 8009e74:	2000838d 	.word	0x2000838d
 8009e78:	20008360 	.word	0x20008360
 8009e7c:	20008380 	.word	0x20008380
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e82:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	f040 80c5 	bne.w	800a018 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009e8e:	4b7f      	ldr	r3, [pc, #508]	@ (800a08c <tcp_receive+0xf10>)
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e94:	68db      	ldr	r3, [r3, #12]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f340 80bc 	ble.w	800a018 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	899b      	ldrh	r3, [r3, #12]
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7fa fb2b 	bl	8004504 <lwip_htons>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	f003 0301 	and.w	r3, r3, #1
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	f040 80be 	bne.w	800a038 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009ebc:	4874      	ldr	r0, [pc, #464]	@ (800a090 <tcp_receive+0xf14>)
 8009ebe:	f7fd fac7 	bl	8007450 <tcp_seg_copy>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	f000 80b5 	beq.w	800a03c <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ed4:	68db      	ldr	r3, [r3, #12]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009eda:	8912      	ldrh	r2, [r2, #8]
 8009edc:	441a      	add	r2, r3
 8009ede:	4b6b      	ldr	r3, [pc, #428]	@ (800a08c <tcp_receive+0xf10>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	1ad3      	subs	r3, r2, r3
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	dd12      	ble.n	8009f0e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009ee8:	4b68      	ldr	r3, [pc, #416]	@ (800a08c <tcp_receive+0xf10>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	b29a      	uxth	r2, r3
 8009eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	1ad3      	subs	r3, r2, r3
 8009ef8:	b29a      	uxth	r2, r3
 8009efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009efc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f00:	685a      	ldr	r2, [r3, #4]
 8009f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f04:	891b      	ldrh	r3, [r3, #8]
 8009f06:	4619      	mov	r1, r3
 8009f08:	4610      	mov	r0, r2
 8009f0a:	f7fb fcd3 	bl	80058b4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009f0e:	4b61      	ldr	r3, [pc, #388]	@ (800a094 <tcp_receive+0xf18>)
 8009f10:	881b      	ldrh	r3, [r3, #0]
 8009f12:	461a      	mov	r2, r3
 8009f14:	4b5d      	ldr	r3, [pc, #372]	@ (800a08c <tcp_receive+0xf10>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	441a      	add	r2, r3
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f1e:	6879      	ldr	r1, [r7, #4]
 8009f20:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009f22:	440b      	add	r3, r1
 8009f24:	1ad3      	subs	r3, r2, r3
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	f340 8088 	ble.w	800a03c <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	899b      	ldrh	r3, [r3, #12]
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7fa fae4 	bl	8004504 <lwip_htons>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	f003 0301 	and.w	r3, r3, #1
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d021      	beq.n	8009f8c <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	899b      	ldrh	r3, [r3, #12]
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	b21b      	sxth	r3, r3
 8009f54:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009f58:	b21c      	sxth	r4, r3
 8009f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	68db      	ldr	r3, [r3, #12]
 8009f60:	899b      	ldrh	r3, [r3, #12]
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7fa facd 	bl	8004504 <lwip_htons>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7fa fac5 	bl	8004504 <lwip_htons>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	b21b      	sxth	r3, r3
 8009f7e:	4323      	orrs	r3, r4
 8009f80:	b21a      	sxth	r2, r3
 8009f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	b292      	uxth	r2, r2
 8009f8a:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f90:	b29a      	uxth	r2, r3
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f96:	4413      	add	r3, r2
 8009f98:	b299      	uxth	r1, r3
 8009f9a:	4b3c      	ldr	r3, [pc, #240]	@ (800a08c <tcp_receive+0xf10>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	b29a      	uxth	r2, r3
 8009fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	1a8a      	subs	r2, r1, r2
 8009fa6:	b292      	uxth	r2, r2
 8009fa8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	685a      	ldr	r2, [r3, #4]
 8009fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	891b      	ldrh	r3, [r3, #8]
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	4610      	mov	r0, r2
 8009fba:	f7fb fc7b 	bl	80058b4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	891c      	ldrh	r4, [r3, #8]
 8009fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	899b      	ldrh	r3, [r3, #12]
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7fa fa98 	bl	8004504 <lwip_htons>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	f003 0303 	and.w	r3, r3, #3
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d001      	beq.n	8009fe4 <tcp_receive+0xe68>
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e000      	b.n	8009fe6 <tcp_receive+0xe6a>
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	4423      	add	r3, r4
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	4b2a      	ldr	r3, [pc, #168]	@ (800a094 <tcp_receive+0xf18>)
 8009fec:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009fee:	4b29      	ldr	r3, [pc, #164]	@ (800a094 <tcp_receive+0xf18>)
 8009ff0:	881b      	ldrh	r3, [r3, #0]
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	4b25      	ldr	r3, [pc, #148]	@ (800a08c <tcp_receive+0xf10>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	441a      	add	r2, r3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ffe:	6879      	ldr	r1, [r7, #4]
 800a000:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a002:	440b      	add	r3, r1
 800a004:	429a      	cmp	r2, r3
 800a006:	d019      	beq.n	800a03c <tcp_receive+0xec0>
 800a008:	4b23      	ldr	r3, [pc, #140]	@ (800a098 <tcp_receive+0xf1c>)
 800a00a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800a00e:	4923      	ldr	r1, [pc, #140]	@ (800a09c <tcp_receive+0xf20>)
 800a010:	4823      	ldr	r0, [pc, #140]	@ (800a0a0 <tcp_receive+0xf24>)
 800a012:	f006 f9cb 	bl	80103ac <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a016:	e011      	b.n	800a03c <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a020:	2b00      	cmp	r3, #0
 800a022:	f47f aea5 	bne.w	8009d70 <tcp_receive+0xbf4>
 800a026:	e00a      	b.n	800a03e <tcp_receive+0xec2>
                break;
 800a028:	bf00      	nop
 800a02a:	e008      	b.n	800a03e <tcp_receive+0xec2>
                break;
 800a02c:	bf00      	nop
 800a02e:	e006      	b.n	800a03e <tcp_receive+0xec2>
                  break;
 800a030:	bf00      	nop
 800a032:	e004      	b.n	800a03e <tcp_receive+0xec2>
                  break;
 800a034:	bf00      	nop
 800a036:	e002      	b.n	800a03e <tcp_receive+0xec2>
                  break;
 800a038:	bf00      	nop
 800a03a:	e000      	b.n	800a03e <tcp_receive+0xec2>
                break;
 800a03c:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f001 fe88 	bl	800bd54 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a044:	e003      	b.n	800a04e <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f001 fe84 	bl	800bd54 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a04c:	e01a      	b.n	800a084 <tcp_receive+0xf08>
 800a04e:	e019      	b.n	800a084 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a050:	4b0e      	ldr	r3, [pc, #56]	@ (800a08c <tcp_receive+0xf10>)
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a058:	1ad3      	subs	r3, r2, r3
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	db0a      	blt.n	800a074 <tcp_receive+0xef8>
 800a05e:	4b0b      	ldr	r3, [pc, #44]	@ (800a08c <tcp_receive+0xf10>)
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a066:	6879      	ldr	r1, [r7, #4]
 800a068:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a06a:	440b      	add	r3, r1
 800a06c:	1ad3      	subs	r3, r2, r3
 800a06e:	3301      	adds	r3, #1
 800a070:	2b00      	cmp	r3, #0
 800a072:	dd07      	ble.n	800a084 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	8b5b      	ldrh	r3, [r3, #26]
 800a078:	f043 0302 	orr.w	r3, r3, #2
 800a07c:	b29a      	uxth	r2, r3
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a082:	e7ff      	b.n	800a084 <tcp_receive+0xf08>
 800a084:	bf00      	nop
 800a086:	3750      	adds	r7, #80	@ 0x50
 800a088:	46bd      	mov	sp, r7
 800a08a:	bdb0      	pop	{r4, r5, r7, pc}
 800a08c:	20008380 	.word	0x20008380
 800a090:	20008360 	.word	0x20008360
 800a094:	2000838a 	.word	0x2000838a
 800a098:	080127f8 	.word	0x080127f8
 800a09c:	08012ba0 	.word	0x08012ba0
 800a0a0:	08012844 	.word	0x08012844

0800a0a4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a0aa:	4b15      	ldr	r3, [pc, #84]	@ (800a100 <tcp_get_next_optbyte+0x5c>)
 800a0ac:	881b      	ldrh	r3, [r3, #0]
 800a0ae:	1c5a      	adds	r2, r3, #1
 800a0b0:	b291      	uxth	r1, r2
 800a0b2:	4a13      	ldr	r2, [pc, #76]	@ (800a100 <tcp_get_next_optbyte+0x5c>)
 800a0b4:	8011      	strh	r1, [r2, #0]
 800a0b6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a0b8:	4b12      	ldr	r3, [pc, #72]	@ (800a104 <tcp_get_next_optbyte+0x60>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d004      	beq.n	800a0ca <tcp_get_next_optbyte+0x26>
 800a0c0:	4b11      	ldr	r3, [pc, #68]	@ (800a108 <tcp_get_next_optbyte+0x64>)
 800a0c2:	881b      	ldrh	r3, [r3, #0]
 800a0c4:	88fa      	ldrh	r2, [r7, #6]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d208      	bcs.n	800a0dc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a0ca:	4b10      	ldr	r3, [pc, #64]	@ (800a10c <tcp_get_next_optbyte+0x68>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	3314      	adds	r3, #20
 800a0d0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a0d2:	88fb      	ldrh	r3, [r7, #6]
 800a0d4:	683a      	ldr	r2, [r7, #0]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	e00b      	b.n	800a0f4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a0dc:	88fb      	ldrh	r3, [r7, #6]
 800a0de:	b2da      	uxtb	r2, r3
 800a0e0:	4b09      	ldr	r3, [pc, #36]	@ (800a108 <tcp_get_next_optbyte+0x64>)
 800a0e2:	881b      	ldrh	r3, [r3, #0]
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	1ad3      	subs	r3, r2, r3
 800a0e8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a0ea:	4b06      	ldr	r3, [pc, #24]	@ (800a104 <tcp_get_next_optbyte+0x60>)
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	797b      	ldrb	r3, [r7, #5]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr
 800a100:	2000837c 	.word	0x2000837c
 800a104:	20008378 	.word	0x20008378
 800a108:	20008376 	.word	0x20008376
 800a10c:	20008370 	.word	0x20008370

0800a110 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d106      	bne.n	800a12c <tcp_parseopt+0x1c>
 800a11e:	4b32      	ldr	r3, [pc, #200]	@ (800a1e8 <tcp_parseopt+0xd8>)
 800a120:	f240 727d 	movw	r2, #1917	@ 0x77d
 800a124:	4931      	ldr	r1, [pc, #196]	@ (800a1ec <tcp_parseopt+0xdc>)
 800a126:	4832      	ldr	r0, [pc, #200]	@ (800a1f0 <tcp_parseopt+0xe0>)
 800a128:	f006 f940 	bl	80103ac <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a12c:	4b31      	ldr	r3, [pc, #196]	@ (800a1f4 <tcp_parseopt+0xe4>)
 800a12e:	881b      	ldrh	r3, [r3, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d056      	beq.n	800a1e2 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a134:	4b30      	ldr	r3, [pc, #192]	@ (800a1f8 <tcp_parseopt+0xe8>)
 800a136:	2200      	movs	r2, #0
 800a138:	801a      	strh	r2, [r3, #0]
 800a13a:	e046      	b.n	800a1ca <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800a13c:	f7ff ffb2 	bl	800a0a4 <tcp_get_next_optbyte>
 800a140:	4603      	mov	r3, r0
 800a142:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a144:	7bfb      	ldrb	r3, [r7, #15]
 800a146:	2b02      	cmp	r3, #2
 800a148:	d006      	beq.n	800a158 <tcp_parseopt+0x48>
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	dc2a      	bgt.n	800a1a4 <tcp_parseopt+0x94>
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d042      	beq.n	800a1d8 <tcp_parseopt+0xc8>
 800a152:	2b01      	cmp	r3, #1
 800a154:	d038      	beq.n	800a1c8 <tcp_parseopt+0xb8>
 800a156:	e025      	b.n	800a1a4 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a158:	f7ff ffa4 	bl	800a0a4 <tcp_get_next_optbyte>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b04      	cmp	r3, #4
 800a160:	d13c      	bne.n	800a1dc <tcp_parseopt+0xcc>
 800a162:	4b25      	ldr	r3, [pc, #148]	@ (800a1f8 <tcp_parseopt+0xe8>)
 800a164:	881b      	ldrh	r3, [r3, #0]
 800a166:	3301      	adds	r3, #1
 800a168:	4a22      	ldr	r2, [pc, #136]	@ (800a1f4 <tcp_parseopt+0xe4>)
 800a16a:	8812      	ldrh	r2, [r2, #0]
 800a16c:	4293      	cmp	r3, r2
 800a16e:	da35      	bge.n	800a1dc <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a170:	f7ff ff98 	bl	800a0a4 <tcp_get_next_optbyte>
 800a174:	4603      	mov	r3, r0
 800a176:	021b      	lsls	r3, r3, #8
 800a178:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a17a:	f7ff ff93 	bl	800a0a4 <tcp_get_next_optbyte>
 800a17e:	4603      	mov	r3, r0
 800a180:	461a      	mov	r2, r3
 800a182:	89bb      	ldrh	r3, [r7, #12]
 800a184:	4313      	orrs	r3, r2
 800a186:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a188:	89bb      	ldrh	r3, [r7, #12]
 800a18a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800a18e:	d804      	bhi.n	800a19a <tcp_parseopt+0x8a>
 800a190:	89bb      	ldrh	r3, [r7, #12]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d001      	beq.n	800a19a <tcp_parseopt+0x8a>
 800a196:	89ba      	ldrh	r2, [r7, #12]
 800a198:	e001      	b.n	800a19e <tcp_parseopt+0x8e>
 800a19a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800a1a2:	e012      	b.n	800a1ca <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a1a4:	f7ff ff7e 	bl	800a0a4 <tcp_get_next_optbyte>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a1ac:	7afb      	ldrb	r3, [r7, #11]
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d916      	bls.n	800a1e0 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a1b2:	7afb      	ldrb	r3, [r7, #11]
 800a1b4:	b29a      	uxth	r2, r3
 800a1b6:	4b10      	ldr	r3, [pc, #64]	@ (800a1f8 <tcp_parseopt+0xe8>)
 800a1b8:	881b      	ldrh	r3, [r3, #0]
 800a1ba:	4413      	add	r3, r2
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	3b02      	subs	r3, #2
 800a1c0:	b29a      	uxth	r2, r3
 800a1c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a1f8 <tcp_parseopt+0xe8>)
 800a1c4:	801a      	strh	r2, [r3, #0]
 800a1c6:	e000      	b.n	800a1ca <tcp_parseopt+0xba>
          break;
 800a1c8:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a1ca:	4b0b      	ldr	r3, [pc, #44]	@ (800a1f8 <tcp_parseopt+0xe8>)
 800a1cc:	881a      	ldrh	r2, [r3, #0]
 800a1ce:	4b09      	ldr	r3, [pc, #36]	@ (800a1f4 <tcp_parseopt+0xe4>)
 800a1d0:	881b      	ldrh	r3, [r3, #0]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d3b2      	bcc.n	800a13c <tcp_parseopt+0x2c>
 800a1d6:	e004      	b.n	800a1e2 <tcp_parseopt+0xd2>
          return;
 800a1d8:	bf00      	nop
 800a1da:	e002      	b.n	800a1e2 <tcp_parseopt+0xd2>
            return;
 800a1dc:	bf00      	nop
 800a1de:	e000      	b.n	800a1e2 <tcp_parseopt+0xd2>
            return;
 800a1e0:	bf00      	nop
      }
    }
  }
}
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	080127f8 	.word	0x080127f8
 800a1ec:	08012c5c 	.word	0x08012c5c
 800a1f0:	08012844 	.word	0x08012844
 800a1f4:	20008374 	.word	0x20008374
 800a1f8:	2000837c 	.word	0x2000837c

0800a1fc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a200:	4b05      	ldr	r3, [pc, #20]	@ (800a218 <tcp_trigger_input_pcb_close+0x1c>)
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	f043 0310 	orr.w	r3, r3, #16
 800a208:	b2da      	uxtb	r2, r3
 800a20a:	4b03      	ldr	r3, [pc, #12]	@ (800a218 <tcp_trigger_input_pcb_close+0x1c>)
 800a20c:	701a      	strb	r2, [r3, #0]
}
 800a20e:	bf00      	nop
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr
 800a218:	2000838d 	.word	0x2000838d

0800a21c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00a      	beq.n	800a244 <tcp_route+0x28>
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	7a1b      	ldrb	r3, [r3, #8]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d006      	beq.n	800a244 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	7a1b      	ldrb	r3, [r3, #8]
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fb f960 	bl	8005500 <netif_get_by_index>
 800a240:	4603      	mov	r3, r0
 800a242:	e003      	b.n	800a24c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f003 fad3 	bl	800d7f0 <ip4_route>
 800a24a:	4603      	mov	r3, r0
  }
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3710      	adds	r7, #16
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a254:	b590      	push	{r4, r7, lr}
 800a256:	b087      	sub	sp, #28
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	603b      	str	r3, [r7, #0]
 800a260:	4613      	mov	r3, r2
 800a262:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d105      	bne.n	800a276 <tcp_create_segment+0x22>
 800a26a:	4b43      	ldr	r3, [pc, #268]	@ (800a378 <tcp_create_segment+0x124>)
 800a26c:	22a3      	movs	r2, #163	@ 0xa3
 800a26e:	4943      	ldr	r1, [pc, #268]	@ (800a37c <tcp_create_segment+0x128>)
 800a270:	4843      	ldr	r0, [pc, #268]	@ (800a380 <tcp_create_segment+0x12c>)
 800a272:	f006 f89b 	bl	80103ac <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d105      	bne.n	800a288 <tcp_create_segment+0x34>
 800a27c:	4b3e      	ldr	r3, [pc, #248]	@ (800a378 <tcp_create_segment+0x124>)
 800a27e:	22a4      	movs	r2, #164	@ 0xa4
 800a280:	4940      	ldr	r1, [pc, #256]	@ (800a384 <tcp_create_segment+0x130>)
 800a282:	483f      	ldr	r0, [pc, #252]	@ (800a380 <tcp_create_segment+0x12c>)
 800a284:	f006 f892 	bl	80103ac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a288:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a28c:	009b      	lsls	r3, r3, #2
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	f003 0304 	and.w	r3, r3, #4
 800a294:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a296:	2003      	movs	r0, #3
 800a298:	f7fa fdac 	bl	8004df4 <memp_malloc>
 800a29c:	6138      	str	r0, [r7, #16]
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d104      	bne.n	800a2ae <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a2a4:	68b8      	ldr	r0, [r7, #8]
 800a2a6:	f7fb fc8b 	bl	8005bc0 <pbuf_free>
    return NULL;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	e060      	b.n	800a370 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800a2b4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	68ba      	ldr	r2, [r7, #8]
 800a2c0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	891a      	ldrh	r2, [r3, #8]
 800a2c6:	7dfb      	ldrb	r3, [r7, #23]
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d205      	bcs.n	800a2da <tcp_create_segment+0x86>
 800a2ce:	4b2a      	ldr	r3, [pc, #168]	@ (800a378 <tcp_create_segment+0x124>)
 800a2d0:	22b0      	movs	r2, #176	@ 0xb0
 800a2d2:	492d      	ldr	r1, [pc, #180]	@ (800a388 <tcp_create_segment+0x134>)
 800a2d4:	482a      	ldr	r0, [pc, #168]	@ (800a380 <tcp_create_segment+0x12c>)
 800a2d6:	f006 f869 	bl	80103ac <iprintf>
  seg->len = p->tot_len - optlen;
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	891a      	ldrh	r2, [r3, #8]
 800a2de:	7dfb      	ldrb	r3, [r7, #23]
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	1ad3      	subs	r3, r2, r3
 800a2e4:	b29a      	uxth	r2, r3
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a2ea:	2114      	movs	r1, #20
 800a2ec:	68b8      	ldr	r0, [r7, #8]
 800a2ee:	f7fb fbd1 	bl	8005a94 <pbuf_add_header>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d004      	beq.n	800a302 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a2f8:	6938      	ldr	r0, [r7, #16]
 800a2fa:	f7fd f890 	bl	800741e <tcp_seg_free>
    return NULL;
 800a2fe:	2300      	movs	r3, #0
 800a300:	e036      	b.n	800a370 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	685a      	ldr	r2, [r3, #4]
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	8ada      	ldrh	r2, [r3, #22]
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	68dc      	ldr	r4, [r3, #12]
 800a314:	4610      	mov	r0, r2
 800a316:	f7fa f8f5 	bl	8004504 <lwip_htons>
 800a31a:	4603      	mov	r3, r0
 800a31c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	8b1a      	ldrh	r2, [r3, #24]
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	68dc      	ldr	r4, [r3, #12]
 800a326:	4610      	mov	r0, r2
 800a328:	f7fa f8ec 	bl	8004504 <lwip_htons>
 800a32c:	4603      	mov	r3, r0
 800a32e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	68dc      	ldr	r4, [r3, #12]
 800a334:	6838      	ldr	r0, [r7, #0]
 800a336:	f7fa f8fb 	bl	8004530 <lwip_htonl>
 800a33a:	4603      	mov	r3, r0
 800a33c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a33e:	7dfb      	ldrb	r3, [r7, #23]
 800a340:	089b      	lsrs	r3, r3, #2
 800a342:	b2db      	uxtb	r3, r3
 800a344:	3305      	adds	r3, #5
 800a346:	b29b      	uxth	r3, r3
 800a348:	031b      	lsls	r3, r3, #12
 800a34a:	b29a      	uxth	r2, r3
 800a34c:	79fb      	ldrb	r3, [r7, #7]
 800a34e:	b29b      	uxth	r3, r3
 800a350:	4313      	orrs	r3, r2
 800a352:	b29a      	uxth	r2, r3
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	68dc      	ldr	r4, [r3, #12]
 800a358:	4610      	mov	r0, r2
 800a35a:	f7fa f8d3 	bl	8004504 <lwip_htons>
 800a35e:	4603      	mov	r3, r0
 800a360:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	2200      	movs	r2, #0
 800a368:	749a      	strb	r2, [r3, #18]
 800a36a:	2200      	movs	r2, #0
 800a36c:	74da      	strb	r2, [r3, #19]
  return seg;
 800a36e:	693b      	ldr	r3, [r7, #16]
}
 800a370:	4618      	mov	r0, r3
 800a372:	371c      	adds	r7, #28
 800a374:	46bd      	mov	sp, r7
 800a376:	bd90      	pop	{r4, r7, pc}
 800a378:	08012c78 	.word	0x08012c78
 800a37c:	08012cac 	.word	0x08012cac
 800a380:	08012ccc 	.word	0x08012ccc
 800a384:	08012cf4 	.word	0x08012cf4
 800a388:	08012d18 	.word	0x08012d18

0800a38c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b086      	sub	sp, #24
 800a390:	af00      	add	r7, sp, #0
 800a392:	607b      	str	r3, [r7, #4]
 800a394:	4603      	mov	r3, r0
 800a396:	73fb      	strb	r3, [r7, #15]
 800a398:	460b      	mov	r3, r1
 800a39a:	81bb      	strh	r3, [r7, #12]
 800a39c:	4613      	mov	r3, r2
 800a39e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800a3a0:	89bb      	ldrh	r3, [r7, #12]
 800a3a2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d105      	bne.n	800a3b6 <tcp_pbuf_prealloc+0x2a>
 800a3aa:	4b30      	ldr	r3, [pc, #192]	@ (800a46c <tcp_pbuf_prealloc+0xe0>)
 800a3ac:	22e8      	movs	r2, #232	@ 0xe8
 800a3ae:	4930      	ldr	r1, [pc, #192]	@ (800a470 <tcp_pbuf_prealloc+0xe4>)
 800a3b0:	4830      	ldr	r0, [pc, #192]	@ (800a474 <tcp_pbuf_prealloc+0xe8>)
 800a3b2:	f005 fffb 	bl	80103ac <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800a3b6:	6a3b      	ldr	r3, [r7, #32]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d105      	bne.n	800a3c8 <tcp_pbuf_prealloc+0x3c>
 800a3bc:	4b2b      	ldr	r3, [pc, #172]	@ (800a46c <tcp_pbuf_prealloc+0xe0>)
 800a3be:	22e9      	movs	r2, #233	@ 0xe9
 800a3c0:	492d      	ldr	r1, [pc, #180]	@ (800a478 <tcp_pbuf_prealloc+0xec>)
 800a3c2:	482c      	ldr	r0, [pc, #176]	@ (800a474 <tcp_pbuf_prealloc+0xe8>)
 800a3c4:	f005 fff2 	bl	80103ac <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800a3c8:	89ba      	ldrh	r2, [r7, #12]
 800a3ca:	897b      	ldrh	r3, [r7, #10]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d221      	bcs.n	800a414 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800a3d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a3d4:	f003 0302 	and.w	r3, r3, #2
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d111      	bne.n	800a400 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800a3dc:	6a3b      	ldr	r3, [r7, #32]
 800a3de:	8b5b      	ldrh	r3, [r3, #26]
 800a3e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d115      	bne.n	800a414 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800a3e8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d007      	beq.n	800a400 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800a3f0:	6a3b      	ldr	r3, [r7, #32]
 800a3f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d103      	bne.n	800a400 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800a3f8:	6a3b      	ldr	r3, [r7, #32]
 800a3fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d009      	beq.n	800a414 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800a400:	89bb      	ldrh	r3, [r7, #12]
 800a402:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800a406:	f023 0203 	bic.w	r2, r3, #3
 800a40a:	897b      	ldrh	r3, [r7, #10]
 800a40c:	4293      	cmp	r3, r2
 800a40e:	bf28      	it	cs
 800a410:	4613      	movcs	r3, r2
 800a412:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800a414:	8af9      	ldrh	r1, [r7, #22]
 800a416:	7bfb      	ldrb	r3, [r7, #15]
 800a418:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7fb f8eb 	bl	80055f8 <pbuf_alloc>
 800a422:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d101      	bne.n	800a42e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800a42a:	2300      	movs	r3, #0
 800a42c:	e019      	b.n	800a462 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d006      	beq.n	800a444 <tcp_pbuf_prealloc+0xb8>
 800a436:	4b0d      	ldr	r3, [pc, #52]	@ (800a46c <tcp_pbuf_prealloc+0xe0>)
 800a438:	f240 120b 	movw	r2, #267	@ 0x10b
 800a43c:	490f      	ldr	r1, [pc, #60]	@ (800a47c <tcp_pbuf_prealloc+0xf0>)
 800a43e:	480d      	ldr	r0, [pc, #52]	@ (800a474 <tcp_pbuf_prealloc+0xe8>)
 800a440:	f005 ffb4 	bl	80103ac <iprintf>
  *oversize = p->len - length;
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	895a      	ldrh	r2, [r3, #10]
 800a448:	89bb      	ldrh	r3, [r7, #12]
 800a44a:	1ad3      	subs	r3, r2, r3
 800a44c:	b29a      	uxth	r2, r3
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	89ba      	ldrh	r2, [r7, #12]
 800a456:	811a      	strh	r2, [r3, #8]
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	891a      	ldrh	r2, [r3, #8]
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	815a      	strh	r2, [r3, #10]
  return p;
 800a460:	693b      	ldr	r3, [r7, #16]
}
 800a462:	4618      	mov	r0, r3
 800a464:	3718      	adds	r7, #24
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	08012c78 	.word	0x08012c78
 800a470:	08012d30 	.word	0x08012d30
 800a474:	08012ccc 	.word	0x08012ccc
 800a478:	08012d54 	.word	0x08012d54
 800a47c:	08012d74 	.word	0x08012d74

0800a480 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	460b      	mov	r3, r1
 800a48a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d106      	bne.n	800a4a0 <tcp_write_checks+0x20>
 800a492:	4b33      	ldr	r3, [pc, #204]	@ (800a560 <tcp_write_checks+0xe0>)
 800a494:	f240 1233 	movw	r2, #307	@ 0x133
 800a498:	4932      	ldr	r1, [pc, #200]	@ (800a564 <tcp_write_checks+0xe4>)
 800a49a:	4833      	ldr	r0, [pc, #204]	@ (800a568 <tcp_write_checks+0xe8>)
 800a49c:	f005 ff86 	bl	80103ac <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	7d1b      	ldrb	r3, [r3, #20]
 800a4a4:	2b04      	cmp	r3, #4
 800a4a6:	d00e      	beq.n	800a4c6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800a4ac:	2b07      	cmp	r3, #7
 800a4ae:	d00a      	beq.n	800a4c6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800a4b4:	2b02      	cmp	r3, #2
 800a4b6:	d006      	beq.n	800a4c6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800a4bc:	2b03      	cmp	r3, #3
 800a4be:	d002      	beq.n	800a4c6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800a4c0:	f06f 030a 	mvn.w	r3, #10
 800a4c4:	e048      	b.n	800a558 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800a4c6:	887b      	ldrh	r3, [r7, #2]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d101      	bne.n	800a4d0 <tcp_write_checks+0x50>
    return ERR_OK;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	e043      	b.n	800a558 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a4d6:	887a      	ldrh	r2, [r7, #2]
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d909      	bls.n	800a4f0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	8b5b      	ldrh	r3, [r3, #26]
 800a4e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4e4:	b29a      	uxth	r2, r3
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800a4ea:	f04f 33ff 	mov.w	r3, #4294967295
 800a4ee:	e033      	b.n	800a558 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a4f6:	2b08      	cmp	r3, #8
 800a4f8:	d909      	bls.n	800a50e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	8b5b      	ldrh	r3, [r3, #26]
 800a4fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a502:	b29a      	uxth	r2, r3
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800a508:	f04f 33ff 	mov.w	r3, #4294967295
 800a50c:	e024      	b.n	800a558 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a514:	2b00      	cmp	r3, #0
 800a516:	d00f      	beq.n	800a538 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d11a      	bne.n	800a556 <tcp_write_checks+0xd6>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a524:	2b00      	cmp	r3, #0
 800a526:	d116      	bne.n	800a556 <tcp_write_checks+0xd6>
 800a528:	4b0d      	ldr	r3, [pc, #52]	@ (800a560 <tcp_write_checks+0xe0>)
 800a52a:	f240 1255 	movw	r2, #341	@ 0x155
 800a52e:	490f      	ldr	r1, [pc, #60]	@ (800a56c <tcp_write_checks+0xec>)
 800a530:	480d      	ldr	r0, [pc, #52]	@ (800a568 <tcp_write_checks+0xe8>)
 800a532:	f005 ff3b 	bl	80103ac <iprintf>
 800a536:	e00e      	b.n	800a556 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d103      	bne.n	800a548 <tcp_write_checks+0xc8>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a544:	2b00      	cmp	r3, #0
 800a546:	d006      	beq.n	800a556 <tcp_write_checks+0xd6>
 800a548:	4b05      	ldr	r3, [pc, #20]	@ (800a560 <tcp_write_checks+0xe0>)
 800a54a:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800a54e:	4908      	ldr	r1, [pc, #32]	@ (800a570 <tcp_write_checks+0xf0>)
 800a550:	4805      	ldr	r0, [pc, #20]	@ (800a568 <tcp_write_checks+0xe8>)
 800a552:	f005 ff2b 	bl	80103ac <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800a556:	2300      	movs	r3, #0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3708      	adds	r7, #8
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	08012c78 	.word	0x08012c78
 800a564:	08012d88 	.word	0x08012d88
 800a568:	08012ccc 	.word	0x08012ccc
 800a56c:	08012da8 	.word	0x08012da8
 800a570:	08012de4 	.word	0x08012de4

0800a574 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800a574:	b590      	push	{r4, r7, lr}
 800a576:	b09b      	sub	sp, #108	@ 0x6c
 800a578:	af04      	add	r7, sp, #16
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	4611      	mov	r1, r2
 800a580:	461a      	mov	r2, r3
 800a582:	460b      	mov	r3, r1
 800a584:	80fb      	strh	r3, [r7, #6]
 800a586:	4613      	mov	r3, r2
 800a588:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800a58a:	2300      	movs	r3, #0
 800a58c:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a58e:	2300      	movs	r3, #0
 800a590:	653b      	str	r3, [r7, #80]	@ 0x50
 800a592:	2300      	movs	r3, #0
 800a594:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a596:	2300      	movs	r3, #0
 800a598:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a59a:	2300      	movs	r3, #0
 800a59c:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800a59e:	2300      	movs	r3, #0
 800a5a0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d109      	bne.n	800a5d0 <tcp_write+0x5c>
 800a5bc:	4ba4      	ldr	r3, [pc, #656]	@ (800a850 <tcp_write+0x2dc>)
 800a5be:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800a5c2:	49a4      	ldr	r1, [pc, #656]	@ (800a854 <tcp_write+0x2e0>)
 800a5c4:	48a4      	ldr	r0, [pc, #656]	@ (800a858 <tcp_write+0x2e4>)
 800a5c6:	f005 fef1 	bl	80103ac <iprintf>
 800a5ca:	f06f 030f 	mvn.w	r3, #15
 800a5ce:	e32a      	b.n	800ac26 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a5d6:	085b      	lsrs	r3, r3, #1
 800a5d8:	b29a      	uxth	r2, r3
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	bf28      	it	cs
 800a5e2:	4613      	movcs	r3, r2
 800a5e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800a5e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d102      	bne.n	800a5f2 <tcp_write+0x7e>
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a5f0:	e000      	b.n	800a5f4 <tcp_write+0x80>
 800a5f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a5f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d109      	bne.n	800a610 <tcp_write+0x9c>
 800a5fc:	4b94      	ldr	r3, [pc, #592]	@ (800a850 <tcp_write+0x2dc>)
 800a5fe:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800a602:	4996      	ldr	r1, [pc, #600]	@ (800a85c <tcp_write+0x2e8>)
 800a604:	4894      	ldr	r0, [pc, #592]	@ (800a858 <tcp_write+0x2e4>)
 800a606:	f005 fed1 	bl	80103ac <iprintf>
 800a60a:	f06f 030f 	mvn.w	r3, #15
 800a60e:	e30a      	b.n	800ac26 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800a610:	88fb      	ldrh	r3, [r7, #6]
 800a612:	4619      	mov	r1, r3
 800a614:	68f8      	ldr	r0, [r7, #12]
 800a616:	f7ff ff33 	bl	800a480 <tcp_write_checks>
 800a61a:	4603      	mov	r3, r0
 800a61c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 800a620:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800a624:	2b00      	cmp	r3, #0
 800a626:	d002      	beq.n	800a62e <tcp_write+0xba>
    return err;
 800a628:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800a62c:	e2fb      	b.n	800ac26 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a634:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a638:	2300      	movs	r3, #0
 800a63a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a642:	2b00      	cmp	r3, #0
 800a644:	f000 80f6 	beq.w	800a834 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a64c:	653b      	str	r3, [r7, #80]	@ 0x50
 800a64e:	e002      	b.n	800a656 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800a650:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a656:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d1f8      	bne.n	800a650 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800a65e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a660:	7a9b      	ldrb	r3, [r3, #10]
 800a662:	009b      	lsls	r3, r3, #2
 800a664:	b29b      	uxth	r3, r3
 800a666:	f003 0304 	and.w	r3, r3, #4
 800a66a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800a66c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a66e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a670:	891b      	ldrh	r3, [r3, #8]
 800a672:	4619      	mov	r1, r3
 800a674:	8c3b      	ldrh	r3, [r7, #32]
 800a676:	440b      	add	r3, r1
 800a678:	429a      	cmp	r2, r3
 800a67a:	da06      	bge.n	800a68a <tcp_write+0x116>
 800a67c:	4b74      	ldr	r3, [pc, #464]	@ (800a850 <tcp_write+0x2dc>)
 800a67e:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800a682:	4977      	ldr	r1, [pc, #476]	@ (800a860 <tcp_write+0x2ec>)
 800a684:	4874      	ldr	r0, [pc, #464]	@ (800a858 <tcp_write+0x2e4>)
 800a686:	f005 fe91 	bl	80103ac <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800a68a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a68c:	891a      	ldrh	r2, [r3, #8]
 800a68e:	8c3b      	ldrh	r3, [r7, #32]
 800a690:	4413      	add	r3, r2
 800a692:	b29b      	uxth	r3, r3
 800a694:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a696:	1ad3      	subs	r3, r2, r3
 800a698:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a6a0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800a6a2:	8a7b      	ldrh	r3, [r7, #18]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d026      	beq.n	800a6f6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800a6a8:	8a7b      	ldrh	r3, [r7, #18]
 800a6aa:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d206      	bcs.n	800a6be <tcp_write+0x14a>
 800a6b0:	4b67      	ldr	r3, [pc, #412]	@ (800a850 <tcp_write+0x2dc>)
 800a6b2:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800a6b6:	496b      	ldr	r1, [pc, #428]	@ (800a864 <tcp_write+0x2f0>)
 800a6b8:	4867      	ldr	r0, [pc, #412]	@ (800a858 <tcp_write+0x2e4>)
 800a6ba:	f005 fe77 	bl	80103ac <iprintf>
      seg = last_unsent;
 800a6be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800a6c2:	8a7b      	ldrh	r3, [r7, #18]
 800a6c4:	88fa      	ldrh	r2, [r7, #6]
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	bf28      	it	cs
 800a6ca:	4613      	movcs	r3, r2
 800a6cc:	b29b      	uxth	r3, r3
 800a6ce:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	bf28      	it	cs
 800a6d4:	4613      	movcs	r3, r2
 800a6d6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 800a6d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a6dc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a6de:	4413      	add	r3, r2
 800a6e0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 800a6e4:	8a7a      	ldrh	r2, [r7, #18]
 800a6e6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a6e8:	1ad3      	subs	r3, r2, r3
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800a6ee:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800a6f0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a6f2:	1ad3      	subs	r3, r2, r3
 800a6f4:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800a6f6:	8a7b      	ldrh	r3, [r7, #18]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d00b      	beq.n	800a714 <tcp_write+0x1a0>
 800a6fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a700:	88fb      	ldrh	r3, [r7, #6]
 800a702:	429a      	cmp	r2, r3
 800a704:	d006      	beq.n	800a714 <tcp_write+0x1a0>
 800a706:	4b52      	ldr	r3, [pc, #328]	@ (800a850 <tcp_write+0x2dc>)
 800a708:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a70c:	4956      	ldr	r1, [pc, #344]	@ (800a868 <tcp_write+0x2f4>)
 800a70e:	4852      	ldr	r0, [pc, #328]	@ (800a858 <tcp_write+0x2e4>)
 800a710:	f005 fe4c 	bl	80103ac <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800a714:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a718:	88fb      	ldrh	r3, [r7, #6]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	f080 8167 	bcs.w	800a9ee <tcp_write+0x47a>
 800a720:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a722:	2b00      	cmp	r3, #0
 800a724:	f000 8163 	beq.w	800a9ee <tcp_write+0x47a>
 800a728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a72a:	891b      	ldrh	r3, [r3, #8]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f000 815e 	beq.w	800a9ee <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800a732:	88fa      	ldrh	r2, [r7, #6]
 800a734:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a738:	1ad2      	subs	r2, r2, r3
 800a73a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a73c:	4293      	cmp	r3, r2
 800a73e:	bfa8      	it	ge
 800a740:	4613      	movge	r3, r2
 800a742:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800a744:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a746:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a748:	797b      	ldrb	r3, [r7, #5]
 800a74a:	f003 0301 	and.w	r3, r3, #1
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d027      	beq.n	800a7a2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800a752:	f107 0012 	add.w	r0, r7, #18
 800a756:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800a758:	8bf9      	ldrh	r1, [r7, #30]
 800a75a:	2301      	movs	r3, #1
 800a75c:	9302      	str	r3, [sp, #8]
 800a75e:	797b      	ldrb	r3, [r7, #5]
 800a760:	9301      	str	r3, [sp, #4]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	9300      	str	r3, [sp, #0]
 800a766:	4603      	mov	r3, r0
 800a768:	2000      	movs	r0, #0
 800a76a:	f7ff fe0f 	bl	800a38c <tcp_pbuf_prealloc>
 800a76e:	6578      	str	r0, [r7, #84]	@ 0x54
 800a770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a772:	2b00      	cmp	r3, #0
 800a774:	f000 8225 	beq.w	800abc2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800a778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a77a:	6858      	ldr	r0, [r3, #4]
 800a77c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a780:	68ba      	ldr	r2, [r7, #8]
 800a782:	4413      	add	r3, r2
 800a784:	8bfa      	ldrh	r2, [r7, #30]
 800a786:	4619      	mov	r1, r3
 800a788:	f005 ff3b 	bl	8010602 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800a78c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a78e:	f7fb fa9f 	bl	8005cd0 <pbuf_clen>
 800a792:	4603      	mov	r3, r0
 800a794:	461a      	mov	r2, r3
 800a796:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a79a:	4413      	add	r3, r2
 800a79c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800a7a0:	e041      	b.n	800a826 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800a7a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7a8:	e002      	b.n	800a7b0 <tcp_write+0x23c>
 800a7aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d1f8      	bne.n	800a7aa <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800a7b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7ba:	7b1b      	ldrb	r3, [r3, #12]
 800a7bc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d115      	bne.n	800a7f0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800a7c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a7ca:	8952      	ldrh	r2, [r2, #10]
 800a7cc:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800a7ce:	68ba      	ldr	r2, [r7, #8]
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d10d      	bne.n	800a7f0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800a7d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d006      	beq.n	800a7ea <tcp_write+0x276>
 800a7dc:	4b1c      	ldr	r3, [pc, #112]	@ (800a850 <tcp_write+0x2dc>)
 800a7de:	f240 2231 	movw	r2, #561	@ 0x231
 800a7e2:	4922      	ldr	r1, [pc, #136]	@ (800a86c <tcp_write+0x2f8>)
 800a7e4:	481c      	ldr	r0, [pc, #112]	@ (800a858 <tcp_write+0x2e4>)
 800a7e6:	f005 fde1 	bl	80103ac <iprintf>
          extendlen = seglen;
 800a7ea:	8bfb      	ldrh	r3, [r7, #30]
 800a7ec:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800a7ee:	e01a      	b.n	800a826 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800a7f0:	8bfb      	ldrh	r3, [r7, #30]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	2000      	movs	r0, #0
 800a7f8:	f7fa fefe 	bl	80055f8 <pbuf_alloc>
 800a7fc:	6578      	str	r0, [r7, #84]	@ 0x54
 800a7fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a800:	2b00      	cmp	r3, #0
 800a802:	f000 81e0 	beq.w	800abc6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800a806:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a80a:	68ba      	ldr	r2, [r7, #8]
 800a80c:	441a      	add	r2, r3
 800a80e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a810:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800a812:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a814:	f7fb fa5c 	bl	8005cd0 <pbuf_clen>
 800a818:	4603      	mov	r3, r0
 800a81a:	461a      	mov	r2, r3
 800a81c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a820:	4413      	add	r3, r2
 800a822:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800a826:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a82a:	8bfb      	ldrh	r3, [r7, #30]
 800a82c:	4413      	add	r3, r2
 800a82e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800a832:	e0dc      	b.n	800a9ee <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	f000 80d7 	beq.w	800a9ee <tcp_write+0x47a>
 800a840:	4b03      	ldr	r3, [pc, #12]	@ (800a850 <tcp_write+0x2dc>)
 800a842:	f240 224a 	movw	r2, #586	@ 0x24a
 800a846:	490a      	ldr	r1, [pc, #40]	@ (800a870 <tcp_write+0x2fc>)
 800a848:	4803      	ldr	r0, [pc, #12]	@ (800a858 <tcp_write+0x2e4>)
 800a84a:	f005 fdaf 	bl	80103ac <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800a84e:	e0ce      	b.n	800a9ee <tcp_write+0x47a>
 800a850:	08012c78 	.word	0x08012c78
 800a854:	08012e18 	.word	0x08012e18
 800a858:	08012ccc 	.word	0x08012ccc
 800a85c:	08012e30 	.word	0x08012e30
 800a860:	08012e64 	.word	0x08012e64
 800a864:	08012e7c 	.word	0x08012e7c
 800a868:	08012e9c 	.word	0x08012e9c
 800a86c:	08012ebc 	.word	0x08012ebc
 800a870:	08012ee8 	.word	0x08012ee8
    struct pbuf *p;
    u16_t left = len - pos;
 800a874:	88fa      	ldrh	r2, [r7, #6]
 800a876:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a87a:	1ad3      	subs	r3, r2, r3
 800a87c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800a87e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a882:	b29b      	uxth	r3, r3
 800a884:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a886:	1ad3      	subs	r3, r2, r3
 800a888:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800a88a:	8b7a      	ldrh	r2, [r7, #26]
 800a88c:	8bbb      	ldrh	r3, [r7, #28]
 800a88e:	4293      	cmp	r3, r2
 800a890:	bf28      	it	cs
 800a892:	4613      	movcs	r3, r2
 800a894:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a896:	797b      	ldrb	r3, [r7, #5]
 800a898:	f003 0301 	and.w	r3, r3, #1
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d036      	beq.n	800a90e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800a8a0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	8b3b      	ldrh	r3, [r7, #24]
 800a8a8:	4413      	add	r3, r2
 800a8aa:	b299      	uxth	r1, r3
 800a8ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	bf0c      	ite	eq
 800a8b2:	2301      	moveq	r3, #1
 800a8b4:	2300      	movne	r3, #0
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	f107 0012 	add.w	r0, r7, #18
 800a8bc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a8be:	9302      	str	r3, [sp, #8]
 800a8c0:	797b      	ldrb	r3, [r7, #5]
 800a8c2:	9301      	str	r3, [sp, #4]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2036      	movs	r0, #54	@ 0x36
 800a8cc:	f7ff fd5e 	bl	800a38c <tcp_pbuf_prealloc>
 800a8d0:	6338      	str	r0, [r7, #48]	@ 0x30
 800a8d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	f000 8178 	beq.w	800abca <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800a8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8dc:	895b      	ldrh	r3, [r3, #10]
 800a8de:	8b3a      	ldrh	r2, [r7, #24]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d906      	bls.n	800a8f2 <tcp_write+0x37e>
 800a8e4:	4b8c      	ldr	r3, [pc, #560]	@ (800ab18 <tcp_write+0x5a4>)
 800a8e6:	f240 2266 	movw	r2, #614	@ 0x266
 800a8ea:	498c      	ldr	r1, [pc, #560]	@ (800ab1c <tcp_write+0x5a8>)
 800a8ec:	488c      	ldr	r0, [pc, #560]	@ (800ab20 <tcp_write+0x5ac>)
 800a8ee:	f005 fd5d 	bl	80103ac <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800a8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f4:	685a      	ldr	r2, [r3, #4]
 800a8f6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a8fa:	18d0      	adds	r0, r2, r3
 800a8fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a900:	68ba      	ldr	r2, [r7, #8]
 800a902:	4413      	add	r3, r2
 800a904:	8b3a      	ldrh	r2, [r7, #24]
 800a906:	4619      	mov	r1, r3
 800a908:	f005 fe7b 	bl	8010602 <memcpy>
 800a90c:	e02f      	b.n	800a96e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800a90e:	8a7b      	ldrh	r3, [r7, #18]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d006      	beq.n	800a922 <tcp_write+0x3ae>
 800a914:	4b80      	ldr	r3, [pc, #512]	@ (800ab18 <tcp_write+0x5a4>)
 800a916:	f240 2271 	movw	r2, #625	@ 0x271
 800a91a:	4982      	ldr	r1, [pc, #520]	@ (800ab24 <tcp_write+0x5b0>)
 800a91c:	4880      	ldr	r0, [pc, #512]	@ (800ab20 <tcp_write+0x5ac>)
 800a91e:	f005 fd45 	bl	80103ac <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800a922:	8b3b      	ldrh	r3, [r7, #24]
 800a924:	2201      	movs	r2, #1
 800a926:	4619      	mov	r1, r3
 800a928:	2036      	movs	r0, #54	@ 0x36
 800a92a:	f7fa fe65 	bl	80055f8 <pbuf_alloc>
 800a92e:	6178      	str	r0, [r7, #20]
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	2b00      	cmp	r3, #0
 800a934:	f000 814b 	beq.w	800abce <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800a938:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a93c:	68ba      	ldr	r2, [r7, #8]
 800a93e:	441a      	add	r2, r3
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a944:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a948:	b29b      	uxth	r3, r3
 800a94a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a94e:	4619      	mov	r1, r3
 800a950:	2036      	movs	r0, #54	@ 0x36
 800a952:	f7fa fe51 	bl	80055f8 <pbuf_alloc>
 800a956:	6338      	str	r0, [r7, #48]	@ 0x30
 800a958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d103      	bne.n	800a966 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800a95e:	6978      	ldr	r0, [r7, #20]
 800a960:	f7fb f92e 	bl	8005bc0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800a964:	e136      	b.n	800abd4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800a966:	6979      	ldr	r1, [r7, #20]
 800a968:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a96a:	f7fb f9eb 	bl	8005d44 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800a96e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a970:	f7fb f9ae 	bl	8005cd0 <pbuf_clen>
 800a974:	4603      	mov	r3, r0
 800a976:	461a      	mov	r2, r3
 800a978:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a97c:	4413      	add	r3, r2
 800a97e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800a982:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a986:	2b09      	cmp	r3, #9
 800a988:	d903      	bls.n	800a992 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800a98a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a98c:	f7fb f918 	bl	8005bc0 <pbuf_free>
      goto memerr;
 800a990:	e120      	b.n	800abd4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a996:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a99a:	441a      	add	r2, r3
 800a99c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a9a0:	9300      	str	r3, [sp, #0]
 800a9a2:	4613      	mov	r3, r2
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a9a8:	68f8      	ldr	r0, [r7, #12]
 800a9aa:	f7ff fc53 	bl	800a254 <tcp_create_segment>
 800a9ae:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800a9b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	f000 810d 	beq.w	800abd2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800a9b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d102      	bne.n	800a9c4 <tcp_write+0x450>
      queue = seg;
 800a9be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a9c2:	e00c      	b.n	800a9de <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800a9c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d106      	bne.n	800a9d8 <tcp_write+0x464>
 800a9ca:	4b53      	ldr	r3, [pc, #332]	@ (800ab18 <tcp_write+0x5a4>)
 800a9cc:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800a9d0:	4955      	ldr	r1, [pc, #340]	@ (800ab28 <tcp_write+0x5b4>)
 800a9d2:	4853      	ldr	r0, [pc, #332]	@ (800ab20 <tcp_write+0x5ac>)
 800a9d4:	f005 fcea 	bl	80103ac <iprintf>
      prev_seg->next = seg;
 800a9d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a9dc:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800a9de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9e0:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800a9e2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a9e6:	8b3b      	ldrh	r3, [r7, #24]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 800a9ee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a9f2:	88fb      	ldrh	r3, [r7, #6]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	f4ff af3d 	bcc.w	800a874 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800a9fa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d02c      	beq.n	800aa5a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800aa00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa06:	e01e      	b.n	800aa46 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800aa08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa0a:	891a      	ldrh	r2, [r3, #8]
 800aa0c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800aa0e:	4413      	add	r3, r2
 800aa10:	b29a      	uxth	r2, r3
 800aa12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa14:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800aa16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d110      	bne.n	800aa40 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800aa1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa24:	8952      	ldrh	r2, [r2, #10]
 800aa26:	4413      	add	r3, r2
 800aa28:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800aa2a:	68b9      	ldr	r1, [r7, #8]
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f005 fde8 	bl	8010602 <memcpy>
        p->len += oversize_used;
 800aa32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa34:	895a      	ldrh	r2, [r3, #10]
 800aa36:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800aa38:	4413      	add	r3, r2
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa3e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800aa40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d1dd      	bne.n	800aa08 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800aa4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa4e:	891a      	ldrh	r2, [r3, #8]
 800aa50:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800aa52:	4413      	add	r3, r2
 800aa54:	b29a      	uxth	r2, r3
 800aa56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa58:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800aa5a:	8a7a      	ldrh	r2, [r7, #18]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800aa62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d018      	beq.n	800aa9a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800aa68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d106      	bne.n	800aa7c <tcp_write+0x508>
 800aa6e:	4b2a      	ldr	r3, [pc, #168]	@ (800ab18 <tcp_write+0x5a4>)
 800aa70:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800aa74:	492d      	ldr	r1, [pc, #180]	@ (800ab2c <tcp_write+0x5b8>)
 800aa76:	482a      	ldr	r0, [pc, #168]	@ (800ab20 <tcp_write+0x5ac>)
 800aa78:	f005 fc98 	bl	80103ac <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800aa7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7fb f95e 	bl	8005d44 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800aa88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa8a:	891a      	ldrh	r2, [r3, #8]
 800aa8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa8e:	891b      	ldrh	r3, [r3, #8]
 800aa90:	4413      	add	r3, r2
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa96:	811a      	strh	r2, [r3, #8]
 800aa98:	e037      	b.n	800ab0a <tcp_write+0x596>
  } else if (extendlen > 0) {
 800aa9a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d034      	beq.n	800ab0a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800aaa0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d003      	beq.n	800aaae <tcp_write+0x53a>
 800aaa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d106      	bne.n	800aabc <tcp_write+0x548>
 800aaae:	4b1a      	ldr	r3, [pc, #104]	@ (800ab18 <tcp_write+0x5a4>)
 800aab0:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800aab4:	491e      	ldr	r1, [pc, #120]	@ (800ab30 <tcp_write+0x5bc>)
 800aab6:	481a      	ldr	r0, [pc, #104]	@ (800ab20 <tcp_write+0x5ac>)
 800aab8:	f005 fc78 	bl	80103ac <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800aabc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aac2:	e009      	b.n	800aad8 <tcp_write+0x564>
      p->tot_len += extendlen;
 800aac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac6:	891a      	ldrh	r2, [r3, #8]
 800aac8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800aaca:	4413      	add	r3, r2
 800aacc:	b29a      	uxth	r2, r3
 800aace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aad0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800aad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d1f1      	bne.n	800aac4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800aae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aae2:	891a      	ldrh	r2, [r3, #8]
 800aae4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800aae6:	4413      	add	r3, r2
 800aae8:	b29a      	uxth	r2, r3
 800aaea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaec:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800aaee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaf0:	895a      	ldrh	r2, [r3, #10]
 800aaf2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800aaf4:	4413      	add	r3, r2
 800aaf6:	b29a      	uxth	r2, r3
 800aaf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aafa:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800aafc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aafe:	891a      	ldrh	r2, [r3, #8]
 800ab00:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ab02:	4413      	add	r3, r2
 800ab04:	b29a      	uxth	r2, r3
 800ab06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab08:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800ab0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d111      	bne.n	800ab34 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab14:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ab16:	e010      	b.n	800ab3a <tcp_write+0x5c6>
 800ab18:	08012c78 	.word	0x08012c78
 800ab1c:	08012f18 	.word	0x08012f18
 800ab20:	08012ccc 	.word	0x08012ccc
 800ab24:	08012f58 	.word	0x08012f58
 800ab28:	08012f68 	.word	0x08012f68
 800ab2c:	08012f7c 	.word	0x08012f7c
 800ab30:	08012fb4 	.word	0x08012fb4
  } else {
    last_unsent->next = queue;
 800ab34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab38:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ab3e:	88fb      	ldrh	r3, [r7, #6]
 800ab40:	441a      	add	r2, r3
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800ab4c:	88fb      	ldrh	r3, [r7, #6]
 800ab4e:	1ad3      	subs	r3, r2, r3
 800ab50:	b29a      	uxth	r2, r3
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800ab5e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d00e      	beq.n	800ab8a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d10a      	bne.n	800ab8a <tcp_write+0x616>
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d106      	bne.n	800ab8a <tcp_write+0x616>
 800ab7c:	4b2c      	ldr	r3, [pc, #176]	@ (800ac30 <tcp_write+0x6bc>)
 800ab7e:	f240 3212 	movw	r2, #786	@ 0x312
 800ab82:	492c      	ldr	r1, [pc, #176]	@ (800ac34 <tcp_write+0x6c0>)
 800ab84:	482c      	ldr	r0, [pc, #176]	@ (800ac38 <tcp_write+0x6c4>)
 800ab86:	f005 fc11 	bl	80103ac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800ab8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d016      	beq.n	800abbe <tcp_write+0x64a>
 800ab90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab92:	68db      	ldr	r3, [r3, #12]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d012      	beq.n	800abbe <tcp_write+0x64a>
 800ab98:	797b      	ldrb	r3, [r7, #5]
 800ab9a:	f003 0302 	and.w	r3, r3, #2
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d10d      	bne.n	800abbe <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800aba2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aba4:	68db      	ldr	r3, [r3, #12]
 800aba6:	899b      	ldrh	r3, [r3, #12]
 800aba8:	b29c      	uxth	r4, r3
 800abaa:	2008      	movs	r0, #8
 800abac:	f7f9 fcaa 	bl	8004504 <lwip_htons>
 800abb0:	4603      	mov	r3, r0
 800abb2:	461a      	mov	r2, r3
 800abb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	4322      	orrs	r2, r4
 800abba:	b292      	uxth	r2, r2
 800abbc:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800abbe:	2300      	movs	r3, #0
 800abc0:	e031      	b.n	800ac26 <tcp_write+0x6b2>
          goto memerr;
 800abc2:	bf00      	nop
 800abc4:	e006      	b.n	800abd4 <tcp_write+0x660>
            goto memerr;
 800abc6:	bf00      	nop
 800abc8:	e004      	b.n	800abd4 <tcp_write+0x660>
        goto memerr;
 800abca:	bf00      	nop
 800abcc:	e002      	b.n	800abd4 <tcp_write+0x660>
        goto memerr;
 800abce:	bf00      	nop
 800abd0:	e000      	b.n	800abd4 <tcp_write+0x660>
      goto memerr;
 800abd2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	8b5b      	ldrh	r3, [r3, #26]
 800abd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abdc:	b29a      	uxth	r2, r3
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800abe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d002      	beq.n	800abee <tcp_write+0x67a>
    pbuf_free(concat_p);
 800abe8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800abea:	f7fa ffe9 	bl	8005bc0 <pbuf_free>
  }
  if (queue != NULL) {
 800abee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d002      	beq.n	800abfa <tcp_write+0x686>
    tcp_segs_free(queue);
 800abf4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800abf6:	f7fc fbfd 	bl	80073f4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d00e      	beq.n	800ac22 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d10a      	bne.n	800ac22 <tcp_write+0x6ae>
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d106      	bne.n	800ac22 <tcp_write+0x6ae>
 800ac14:	4b06      	ldr	r3, [pc, #24]	@ (800ac30 <tcp_write+0x6bc>)
 800ac16:	f240 3227 	movw	r2, #807	@ 0x327
 800ac1a:	4906      	ldr	r1, [pc, #24]	@ (800ac34 <tcp_write+0x6c0>)
 800ac1c:	4806      	ldr	r0, [pc, #24]	@ (800ac38 <tcp_write+0x6c4>)
 800ac1e:	f005 fbc5 	bl	80103ac <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800ac22:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	375c      	adds	r7, #92	@ 0x5c
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd90      	pop	{r4, r7, pc}
 800ac2e:	bf00      	nop
 800ac30:	08012c78 	.word	0x08012c78
 800ac34:	08012fec 	.word	0x08012fec
 800ac38:	08012ccc 	.word	0x08012ccc

0800ac3c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ac3c:	b590      	push	{r4, r7, lr}
 800ac3e:	b08b      	sub	sp, #44	@ 0x2c
 800ac40:	af02      	add	r7, sp, #8
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	460b      	mov	r3, r1
 800ac46:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	61fb      	str	r3, [r7, #28]
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ac50:	2300      	movs	r3, #0
 800ac52:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d106      	bne.n	800ac68 <tcp_split_unsent_seg+0x2c>
 800ac5a:	4b95      	ldr	r3, [pc, #596]	@ (800aeb0 <tcp_split_unsent_seg+0x274>)
 800ac5c:	f240 324b 	movw	r2, #843	@ 0x34b
 800ac60:	4994      	ldr	r1, [pc, #592]	@ (800aeb4 <tcp_split_unsent_seg+0x278>)
 800ac62:	4895      	ldr	r0, [pc, #596]	@ (800aeb8 <tcp_split_unsent_seg+0x27c>)
 800ac64:	f005 fba2 	bl	80103ac <iprintf>

  useg = pcb->unsent;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac6c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d102      	bne.n	800ac7a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ac74:	f04f 33ff 	mov.w	r3, #4294967295
 800ac78:	e116      	b.n	800aea8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ac7a:	887b      	ldrh	r3, [r7, #2]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d109      	bne.n	800ac94 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ac80:	4b8b      	ldr	r3, [pc, #556]	@ (800aeb0 <tcp_split_unsent_seg+0x274>)
 800ac82:	f240 3253 	movw	r2, #851	@ 0x353
 800ac86:	498d      	ldr	r1, [pc, #564]	@ (800aebc <tcp_split_unsent_seg+0x280>)
 800ac88:	488b      	ldr	r0, [pc, #556]	@ (800aeb8 <tcp_split_unsent_seg+0x27c>)
 800ac8a:	f005 fb8f 	bl	80103ac <iprintf>
    return ERR_VAL;
 800ac8e:	f06f 0305 	mvn.w	r3, #5
 800ac92:	e109      	b.n	800aea8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	891b      	ldrh	r3, [r3, #8]
 800ac98:	887a      	ldrh	r2, [r7, #2]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d301      	bcc.n	800aca2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	e102      	b.n	800aea8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800aca6:	887a      	ldrh	r2, [r7, #2]
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d906      	bls.n	800acba <tcp_split_unsent_seg+0x7e>
 800acac:	4b80      	ldr	r3, [pc, #512]	@ (800aeb0 <tcp_split_unsent_seg+0x274>)
 800acae:	f240 325b 	movw	r2, #859	@ 0x35b
 800acb2:	4983      	ldr	r1, [pc, #524]	@ (800aec0 <tcp_split_unsent_seg+0x284>)
 800acb4:	4880      	ldr	r0, [pc, #512]	@ (800aeb8 <tcp_split_unsent_seg+0x27c>)
 800acb6:	f005 fb79 	bl	80103ac <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	891b      	ldrh	r3, [r3, #8]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d106      	bne.n	800acd0 <tcp_split_unsent_seg+0x94>
 800acc2:	4b7b      	ldr	r3, [pc, #492]	@ (800aeb0 <tcp_split_unsent_seg+0x274>)
 800acc4:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800acc8:	497e      	ldr	r1, [pc, #504]	@ (800aec4 <tcp_split_unsent_seg+0x288>)
 800acca:	487b      	ldr	r0, [pc, #492]	@ (800aeb8 <tcp_split_unsent_seg+0x27c>)
 800accc:	f005 fb6e 	bl	80103ac <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	7a9b      	ldrb	r3, [r3, #10]
 800acd4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800acd6:	7bfb      	ldrb	r3, [r7, #15]
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	b2db      	uxtb	r3, r3
 800acdc:	f003 0304 	and.w	r3, r3, #4
 800ace0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	891a      	ldrh	r2, [r3, #8]
 800ace6:	887b      	ldrh	r3, [r7, #2]
 800ace8:	1ad3      	subs	r3, r2, r3
 800acea:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800acec:	7bbb      	ldrb	r3, [r7, #14]
 800acee:	b29a      	uxth	r2, r3
 800acf0:	89bb      	ldrh	r3, [r7, #12]
 800acf2:	4413      	add	r3, r2
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800acfa:	4619      	mov	r1, r3
 800acfc:	2036      	movs	r0, #54	@ 0x36
 800acfe:	f7fa fc7b 	bl	80055f8 <pbuf_alloc>
 800ad02:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	f000 80b7 	beq.w	800ae7a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	891a      	ldrh	r2, [r3, #8]
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	891b      	ldrh	r3, [r3, #8]
 800ad16:	1ad3      	subs	r3, r2, r3
 800ad18:	b29a      	uxth	r2, r3
 800ad1a:	887b      	ldrh	r3, [r7, #2]
 800ad1c:	4413      	add	r3, r2
 800ad1e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	6858      	ldr	r0, [r3, #4]
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	685a      	ldr	r2, [r3, #4]
 800ad28:	7bbb      	ldrb	r3, [r7, #14]
 800ad2a:	18d1      	adds	r1, r2, r3
 800ad2c:	897b      	ldrh	r3, [r7, #10]
 800ad2e:	89ba      	ldrh	r2, [r7, #12]
 800ad30:	f7fb f930 	bl	8005f94 <pbuf_copy_partial>
 800ad34:	4603      	mov	r3, r0
 800ad36:	461a      	mov	r2, r3
 800ad38:	89bb      	ldrh	r3, [r7, #12]
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	f040 809f 	bne.w	800ae7e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	899b      	ldrh	r3, [r3, #12]
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f7f9 fbdb 	bl	8004504 <lwip_htons>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ad56:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ad58:	2300      	movs	r3, #0
 800ad5a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ad5c:	7efb      	ldrb	r3, [r7, #27]
 800ad5e:	f003 0308 	and.w	r3, r3, #8
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d007      	beq.n	800ad76 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ad66:	7efb      	ldrb	r3, [r7, #27]
 800ad68:	f023 0308 	bic.w	r3, r3, #8
 800ad6c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ad6e:	7ebb      	ldrb	r3, [r7, #26]
 800ad70:	f043 0308 	orr.w	r3, r3, #8
 800ad74:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ad76:	7efb      	ldrb	r3, [r7, #27]
 800ad78:	f003 0301 	and.w	r3, r3, #1
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d007      	beq.n	800ad90 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ad80:	7efb      	ldrb	r3, [r7, #27]
 800ad82:	f023 0301 	bic.w	r3, r3, #1
 800ad86:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ad88:	7ebb      	ldrb	r3, [r7, #26]
 800ad8a:	f043 0301 	orr.w	r3, r3, #1
 800ad8e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	68db      	ldr	r3, [r3, #12]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	4618      	mov	r0, r3
 800ad98:	f7f9 fbca 	bl	8004530 <lwip_htonl>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	887b      	ldrh	r3, [r7, #2]
 800ada0:	18d1      	adds	r1, r2, r3
 800ada2:	7eba      	ldrb	r2, [r7, #26]
 800ada4:	7bfb      	ldrb	r3, [r7, #15]
 800ada6:	9300      	str	r3, [sp, #0]
 800ada8:	460b      	mov	r3, r1
 800adaa:	6939      	ldr	r1, [r7, #16]
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f7ff fa51 	bl	800a254 <tcp_create_segment>
 800adb2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800adb4:	69fb      	ldr	r3, [r7, #28]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d063      	beq.n	800ae82 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7fa ff86 	bl	8005cd0 <pbuf_clen>
 800adc4:	4603      	mov	r3, r0
 800adc6:	461a      	mov	r2, r3
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800adce:	1a9b      	subs	r3, r3, r2
 800add0:	b29a      	uxth	r2, r3
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	6858      	ldr	r0, [r3, #4]
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	891a      	ldrh	r2, [r3, #8]
 800ade2:	89bb      	ldrh	r3, [r7, #12]
 800ade4:	1ad3      	subs	r3, r2, r3
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	4619      	mov	r1, r3
 800adea:	f7fa fd63 	bl	80058b4 <pbuf_realloc>
  useg->len -= remainder;
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	891a      	ldrh	r2, [r3, #8]
 800adf2:	89bb      	ldrh	r3, [r7, #12]
 800adf4:	1ad3      	subs	r3, r2, r3
 800adf6:	b29a      	uxth	r2, r3
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	899b      	ldrh	r3, [r3, #12]
 800ae02:	b29c      	uxth	r4, r3
 800ae04:	7efb      	ldrb	r3, [r7, #27]
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f7f9 fb7b 	bl	8004504 <lwip_htons>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	461a      	mov	r2, r3
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	68db      	ldr	r3, [r3, #12]
 800ae16:	4322      	orrs	r2, r4
 800ae18:	b292      	uxth	r2, r2
 800ae1a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7fa ff55 	bl	8005cd0 <pbuf_clen>
 800ae26:	4603      	mov	r3, r0
 800ae28:	461a      	mov	r2, r3
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ae30:	4413      	add	r3, r2
 800ae32:	b29a      	uxth	r2, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ae3a:	69fb      	ldr	r3, [r7, #28]
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7fa ff46 	bl	8005cd0 <pbuf_clen>
 800ae44:	4603      	mov	r3, r0
 800ae46:	461a      	mov	r2, r3
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ae4e:	4413      	add	r3, r2
 800ae50:	b29a      	uxth	r2, r3
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	681a      	ldr	r2, [r3, #0]
 800ae5c:	69fb      	ldr	r3, [r7, #28]
 800ae5e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	69fa      	ldr	r2, [r7, #28]
 800ae64:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ae66:	69fb      	ldr	r3, [r7, #28]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d103      	bne.n	800ae76 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2200      	movs	r2, #0
 800ae72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800ae76:	2300      	movs	r3, #0
 800ae78:	e016      	b.n	800aea8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800ae7a:	bf00      	nop
 800ae7c:	e002      	b.n	800ae84 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ae7e:	bf00      	nop
 800ae80:	e000      	b.n	800ae84 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ae82:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800ae84:	69fb      	ldr	r3, [r7, #28]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d006      	beq.n	800ae98 <tcp_split_unsent_seg+0x25c>
 800ae8a:	4b09      	ldr	r3, [pc, #36]	@ (800aeb0 <tcp_split_unsent_seg+0x274>)
 800ae8c:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800ae90:	490d      	ldr	r1, [pc, #52]	@ (800aec8 <tcp_split_unsent_seg+0x28c>)
 800ae92:	4809      	ldr	r0, [pc, #36]	@ (800aeb8 <tcp_split_unsent_seg+0x27c>)
 800ae94:	f005 fa8a 	bl	80103ac <iprintf>
  if (p != NULL) {
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d002      	beq.n	800aea4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800ae9e:	6938      	ldr	r0, [r7, #16]
 800aea0:	f7fa fe8e 	bl	8005bc0 <pbuf_free>
  }

  return ERR_MEM;
 800aea4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3724      	adds	r7, #36	@ 0x24
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd90      	pop	{r4, r7, pc}
 800aeb0:	08012c78 	.word	0x08012c78
 800aeb4:	0801300c 	.word	0x0801300c
 800aeb8:	08012ccc 	.word	0x08012ccc
 800aebc:	08013030 	.word	0x08013030
 800aec0:	08013054 	.word	0x08013054
 800aec4:	08013064 	.word	0x08013064
 800aec8:	08013074 	.word	0x08013074

0800aecc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800aecc:	b590      	push	{r4, r7, lr}
 800aece:	b085      	sub	sp, #20
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d106      	bne.n	800aee8 <tcp_send_fin+0x1c>
 800aeda:	4b21      	ldr	r3, [pc, #132]	@ (800af60 <tcp_send_fin+0x94>)
 800aedc:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800aee0:	4920      	ldr	r1, [pc, #128]	@ (800af64 <tcp_send_fin+0x98>)
 800aee2:	4821      	ldr	r0, [pc, #132]	@ (800af68 <tcp_send_fin+0x9c>)
 800aee4:	f005 fa62 	bl	80103ac <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d02e      	beq.n	800af4e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aef4:	60fb      	str	r3, [r7, #12]
 800aef6:	e002      	b.n	800aefe <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d1f8      	bne.n	800aef8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	68db      	ldr	r3, [r3, #12]
 800af0a:	899b      	ldrh	r3, [r3, #12]
 800af0c:	b29b      	uxth	r3, r3
 800af0e:	4618      	mov	r0, r3
 800af10:	f7f9 faf8 	bl	8004504 <lwip_htons>
 800af14:	4603      	mov	r3, r0
 800af16:	b2db      	uxtb	r3, r3
 800af18:	f003 0307 	and.w	r3, r3, #7
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d116      	bne.n	800af4e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	68db      	ldr	r3, [r3, #12]
 800af24:	899b      	ldrh	r3, [r3, #12]
 800af26:	b29c      	uxth	r4, r3
 800af28:	2001      	movs	r0, #1
 800af2a:	f7f9 faeb 	bl	8004504 <lwip_htons>
 800af2e:	4603      	mov	r3, r0
 800af30:	461a      	mov	r2, r3
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	68db      	ldr	r3, [r3, #12]
 800af36:	4322      	orrs	r2, r4
 800af38:	b292      	uxth	r2, r2
 800af3a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	8b5b      	ldrh	r3, [r3, #26]
 800af40:	f043 0320 	orr.w	r3, r3, #32
 800af44:	b29a      	uxth	r2, r3
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800af4a:	2300      	movs	r3, #0
 800af4c:	e004      	b.n	800af58 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800af4e:	2101      	movs	r1, #1
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 f80b 	bl	800af6c <tcp_enqueue_flags>
 800af56:	4603      	mov	r3, r0
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3714      	adds	r7, #20
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd90      	pop	{r4, r7, pc}
 800af60:	08012c78 	.word	0x08012c78
 800af64:	08013080 	.word	0x08013080
 800af68:	08012ccc 	.word	0x08012ccc

0800af6c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b08a      	sub	sp, #40	@ 0x28
 800af70:	af02      	add	r7, sp, #8
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	460b      	mov	r3, r1
 800af76:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800af78:	2300      	movs	r3, #0
 800af7a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800af7c:	2300      	movs	r3, #0
 800af7e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800af80:	78fb      	ldrb	r3, [r7, #3]
 800af82:	f003 0303 	and.w	r3, r3, #3
 800af86:	2b00      	cmp	r3, #0
 800af88:	d106      	bne.n	800af98 <tcp_enqueue_flags+0x2c>
 800af8a:	4b67      	ldr	r3, [pc, #412]	@ (800b128 <tcp_enqueue_flags+0x1bc>)
 800af8c:	f240 4211 	movw	r2, #1041	@ 0x411
 800af90:	4966      	ldr	r1, [pc, #408]	@ (800b12c <tcp_enqueue_flags+0x1c0>)
 800af92:	4867      	ldr	r0, [pc, #412]	@ (800b130 <tcp_enqueue_flags+0x1c4>)
 800af94:	f005 fa0a 	bl	80103ac <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d106      	bne.n	800afac <tcp_enqueue_flags+0x40>
 800af9e:	4b62      	ldr	r3, [pc, #392]	@ (800b128 <tcp_enqueue_flags+0x1bc>)
 800afa0:	f240 4213 	movw	r2, #1043	@ 0x413
 800afa4:	4963      	ldr	r1, [pc, #396]	@ (800b134 <tcp_enqueue_flags+0x1c8>)
 800afa6:	4862      	ldr	r0, [pc, #392]	@ (800b130 <tcp_enqueue_flags+0x1c4>)
 800afa8:	f005 fa00 	bl	80103ac <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800afac:	78fb      	ldrb	r3, [r7, #3]
 800afae:	f003 0302 	and.w	r3, r3, #2
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d001      	beq.n	800afba <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800afb6:	2301      	movs	r3, #1
 800afb8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800afba:	7ffb      	ldrb	r3, [r7, #31]
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	b2db      	uxtb	r3, r3
 800afc0:	f003 0304 	and.w	r3, r3, #4
 800afc4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800afc6:	7dfb      	ldrb	r3, [r7, #23]
 800afc8:	b29b      	uxth	r3, r3
 800afca:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800afce:	4619      	mov	r1, r3
 800afd0:	2036      	movs	r0, #54	@ 0x36
 800afd2:	f7fa fb11 	bl	80055f8 <pbuf_alloc>
 800afd6:	6138      	str	r0, [r7, #16]
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d109      	bne.n	800aff2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	8b5b      	ldrh	r3, [r3, #26]
 800afe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afe6:	b29a      	uxth	r2, r3
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800afec:	f04f 33ff 	mov.w	r3, #4294967295
 800aff0:	e095      	b.n	800b11e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	895a      	ldrh	r2, [r3, #10]
 800aff6:	7dfb      	ldrb	r3, [r7, #23]
 800aff8:	b29b      	uxth	r3, r3
 800affa:	429a      	cmp	r2, r3
 800affc:	d206      	bcs.n	800b00c <tcp_enqueue_flags+0xa0>
 800affe:	4b4a      	ldr	r3, [pc, #296]	@ (800b128 <tcp_enqueue_flags+0x1bc>)
 800b000:	f240 4239 	movw	r2, #1081	@ 0x439
 800b004:	494c      	ldr	r1, [pc, #304]	@ (800b138 <tcp_enqueue_flags+0x1cc>)
 800b006:	484a      	ldr	r0, [pc, #296]	@ (800b130 <tcp_enqueue_flags+0x1c4>)
 800b008:	f005 f9d0 	bl	80103ac <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800b010:	78fa      	ldrb	r2, [r7, #3]
 800b012:	7ffb      	ldrb	r3, [r7, #31]
 800b014:	9300      	str	r3, [sp, #0]
 800b016:	460b      	mov	r3, r1
 800b018:	6939      	ldr	r1, [r7, #16]
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f7ff f91a 	bl	800a254 <tcp_create_segment>
 800b020:	60f8      	str	r0, [r7, #12]
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d109      	bne.n	800b03c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	8b5b      	ldrh	r3, [r3, #26]
 800b02c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b030:	b29a      	uxth	r2, r3
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b036:	f04f 33ff 	mov.w	r3, #4294967295
 800b03a:	e070      	b.n	800b11e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	f003 0303 	and.w	r3, r3, #3
 800b044:	2b00      	cmp	r3, #0
 800b046:	d006      	beq.n	800b056 <tcp_enqueue_flags+0xea>
 800b048:	4b37      	ldr	r3, [pc, #220]	@ (800b128 <tcp_enqueue_flags+0x1bc>)
 800b04a:	f240 4242 	movw	r2, #1090	@ 0x442
 800b04e:	493b      	ldr	r1, [pc, #236]	@ (800b13c <tcp_enqueue_flags+0x1d0>)
 800b050:	4837      	ldr	r0, [pc, #220]	@ (800b130 <tcp_enqueue_flags+0x1c4>)
 800b052:	f005 f9ab 	bl	80103ac <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	891b      	ldrh	r3, [r3, #8]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d006      	beq.n	800b06c <tcp_enqueue_flags+0x100>
 800b05e:	4b32      	ldr	r3, [pc, #200]	@ (800b128 <tcp_enqueue_flags+0x1bc>)
 800b060:	f240 4243 	movw	r2, #1091	@ 0x443
 800b064:	4936      	ldr	r1, [pc, #216]	@ (800b140 <tcp_enqueue_flags+0x1d4>)
 800b066:	4832      	ldr	r0, [pc, #200]	@ (800b130 <tcp_enqueue_flags+0x1c4>)
 800b068:	f005 f9a0 	bl	80103ac <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b070:	2b00      	cmp	r3, #0
 800b072:	d103      	bne.n	800b07c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b07a:	e00d      	b.n	800b098 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b080:	61bb      	str	r3, [r7, #24]
 800b082:	e002      	b.n	800b08a <tcp_enqueue_flags+0x11e>
 800b084:	69bb      	ldr	r3, [r7, #24]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	61bb      	str	r3, [r7, #24]
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d1f8      	bne.n	800b084 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b092:	69bb      	ldr	r3, [r7, #24]
 800b094:	68fa      	ldr	r2, [r7, #12]
 800b096:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2200      	movs	r2, #0
 800b09c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b0a0:	78fb      	ldrb	r3, [r7, #3]
 800b0a2:	f003 0302 	and.w	r3, r3, #2
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d104      	bne.n	800b0b4 <tcp_enqueue_flags+0x148>
 800b0aa:	78fb      	ldrb	r3, [r7, #3]
 800b0ac:	f003 0301 	and.w	r3, r3, #1
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d004      	beq.n	800b0be <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0b8:	1c5a      	adds	r2, r3, #1
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b0be:	78fb      	ldrb	r3, [r7, #3]
 800b0c0:	f003 0301 	and.w	r3, r3, #1
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d006      	beq.n	800b0d6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	8b5b      	ldrh	r3, [r3, #26]
 800b0cc:	f043 0320 	orr.w	r3, r3, #32
 800b0d0:	b29a      	uxth	r2, r3
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7fa fdf8 	bl	8005cd0 <pbuf_clen>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b0ea:	4413      	add	r3, r2
 800b0ec:	b29a      	uxth	r2, r3
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d00e      	beq.n	800b11c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b102:	2b00      	cmp	r3, #0
 800b104:	d10a      	bne.n	800b11c <tcp_enqueue_flags+0x1b0>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d106      	bne.n	800b11c <tcp_enqueue_flags+0x1b0>
 800b10e:	4b06      	ldr	r3, [pc, #24]	@ (800b128 <tcp_enqueue_flags+0x1bc>)
 800b110:	f240 4265 	movw	r2, #1125	@ 0x465
 800b114:	490b      	ldr	r1, [pc, #44]	@ (800b144 <tcp_enqueue_flags+0x1d8>)
 800b116:	4806      	ldr	r0, [pc, #24]	@ (800b130 <tcp_enqueue_flags+0x1c4>)
 800b118:	f005 f948 	bl	80103ac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3720      	adds	r7, #32
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	08012c78 	.word	0x08012c78
 800b12c:	0801309c 	.word	0x0801309c
 800b130:	08012ccc 	.word	0x08012ccc
 800b134:	080130f4 	.word	0x080130f4
 800b138:	08013114 	.word	0x08013114
 800b13c:	08013150 	.word	0x08013150
 800b140:	08013168 	.word	0x08013168
 800b144:	08013194 	.word	0x08013194

0800b148 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b148:	b5b0      	push	{r4, r5, r7, lr}
 800b14a:	b08a      	sub	sp, #40	@ 0x28
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d106      	bne.n	800b164 <tcp_output+0x1c>
 800b156:	4b8a      	ldr	r3, [pc, #552]	@ (800b380 <tcp_output+0x238>)
 800b158:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800b15c:	4989      	ldr	r1, [pc, #548]	@ (800b384 <tcp_output+0x23c>)
 800b15e:	488a      	ldr	r0, [pc, #552]	@ (800b388 <tcp_output+0x240>)
 800b160:	f005 f924 	bl	80103ac <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	7d1b      	ldrb	r3, [r3, #20]
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d106      	bne.n	800b17a <tcp_output+0x32>
 800b16c:	4b84      	ldr	r3, [pc, #528]	@ (800b380 <tcp_output+0x238>)
 800b16e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800b172:	4986      	ldr	r1, [pc, #536]	@ (800b38c <tcp_output+0x244>)
 800b174:	4884      	ldr	r0, [pc, #528]	@ (800b388 <tcp_output+0x240>)
 800b176:	f005 f919 	bl	80103ac <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b17a:	4b85      	ldr	r3, [pc, #532]	@ (800b390 <tcp_output+0x248>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	429a      	cmp	r2, r3
 800b182:	d101      	bne.n	800b188 <tcp_output+0x40>
    return ERR_OK;
 800b184:	2300      	movs	r3, #0
 800b186:	e1ce      	b.n	800b526 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b194:	4293      	cmp	r3, r2
 800b196:	bf28      	it	cs
 800b198:	4613      	movcs	r3, r2
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1a2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800b1a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d10b      	bne.n	800b1c2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	8b5b      	ldrh	r3, [r3, #26]
 800b1ae:	f003 0302 	and.w	r3, r3, #2
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	f000 81aa 	beq.w	800b50c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f000 fdcb 	bl	800bd54 <tcp_send_empty_ack>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	e1b1      	b.n	800b526 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b1c2:	6879      	ldr	r1, [r7, #4]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	3304      	adds	r3, #4
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f7ff f826 	bl	800a21c <tcp_route>
 800b1d0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d102      	bne.n	800b1de <tcp_output+0x96>
    return ERR_RTE;
 800b1d8:	f06f 0303 	mvn.w	r3, #3
 800b1dc:	e1a3      	b.n	800b526 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d003      	beq.n	800b1ec <tcp_output+0xa4>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d111      	bne.n	800b210 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d002      	beq.n	800b1f8 <tcp_output+0xb0>
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	3304      	adds	r3, #4
 800b1f6:	e000      	b.n	800b1fa <tcp_output+0xb2>
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d102      	bne.n	800b208 <tcp_output+0xc0>
      return ERR_RTE;
 800b202:	f06f 0303 	mvn.w	r3, #3
 800b206:	e18e      	b.n	800b526 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b212:	68db      	ldr	r3, [r3, #12]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	4618      	mov	r0, r3
 800b218:	f7f9 f98a 	bl	8004530 <lwip_htonl>
 800b21c:	4602      	mov	r2, r0
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b222:	1ad3      	subs	r3, r2, r3
 800b224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b226:	8912      	ldrh	r2, [r2, #8]
 800b228:	4413      	add	r3, r2
 800b22a:	69ba      	ldr	r2, [r7, #24]
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d227      	bcs.n	800b280 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b236:	461a      	mov	r2, r3
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d114      	bne.n	800b268 <tcp_output+0x120>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b242:	2b00      	cmp	r3, #0
 800b244:	d110      	bne.n	800b268 <tcp_output+0x120>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d10b      	bne.n	800b268 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2201      	movs	r2, #1
 800b25c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2200      	movs	r2, #0
 800b264:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	8b5b      	ldrh	r3, [r3, #26]
 800b26c:	f003 0302 	and.w	r3, r3, #2
 800b270:	2b00      	cmp	r3, #0
 800b272:	f000 814d 	beq.w	800b510 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 fd6c 	bl	800bd54 <tcp_send_empty_ack>
 800b27c:	4603      	mov	r3, r0
 800b27e:	e152      	b.n	800b526 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2200      	movs	r2, #0
 800b284:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b28c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b28e:	6a3b      	ldr	r3, [r7, #32]
 800b290:	2b00      	cmp	r3, #0
 800b292:	f000 811c 	beq.w	800b4ce <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800b296:	e002      	b.n	800b29e <tcp_output+0x156>
 800b298:	6a3b      	ldr	r3, [r7, #32]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	623b      	str	r3, [r7, #32]
 800b29e:	6a3b      	ldr	r3, [r7, #32]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d1f8      	bne.n	800b298 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b2a6:	e112      	b.n	800b4ce <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2aa:	68db      	ldr	r3, [r3, #12]
 800b2ac:	899b      	ldrh	r3, [r3, #12]
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7f9 f927 	bl	8004504 <lwip_htons>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	f003 0304 	and.w	r3, r3, #4
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d006      	beq.n	800b2d0 <tcp_output+0x188>
 800b2c2:	4b2f      	ldr	r3, [pc, #188]	@ (800b380 <tcp_output+0x238>)
 800b2c4:	f240 5236 	movw	r2, #1334	@ 0x536
 800b2c8:	4932      	ldr	r1, [pc, #200]	@ (800b394 <tcp_output+0x24c>)
 800b2ca:	482f      	ldr	r0, [pc, #188]	@ (800b388 <tcp_output+0x240>)
 800b2cc:	f005 f86e 	bl	80103ac <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d01f      	beq.n	800b318 <tcp_output+0x1d0>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	8b5b      	ldrh	r3, [r3, #26]
 800b2dc:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d119      	bne.n	800b318 <tcp_output+0x1d0>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d00b      	beq.n	800b304 <tcp_output+0x1bc>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d110      	bne.n	800b318 <tcp_output+0x1d0>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2fa:	891a      	ldrh	r2, [r3, #8]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b300:	429a      	cmp	r2, r3
 800b302:	d209      	bcs.n	800b318 <tcp_output+0x1d0>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d004      	beq.n	800b318 <tcp_output+0x1d0>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b314:	2b08      	cmp	r3, #8
 800b316:	d901      	bls.n	800b31c <tcp_output+0x1d4>
 800b318:	2301      	movs	r3, #1
 800b31a:	e000      	b.n	800b31e <tcp_output+0x1d6>
 800b31c:	2300      	movs	r3, #0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d106      	bne.n	800b330 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	8b5b      	ldrh	r3, [r3, #26]
 800b326:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f000 80e4 	beq.w	800b4f8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	7d1b      	ldrb	r3, [r3, #20]
 800b334:	2b02      	cmp	r3, #2
 800b336:	d00d      	beq.n	800b354 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	899b      	ldrh	r3, [r3, #12]
 800b33e:	b29c      	uxth	r4, r3
 800b340:	2010      	movs	r0, #16
 800b342:	f7f9 f8df 	bl	8004504 <lwip_htons>
 800b346:	4603      	mov	r3, r0
 800b348:	461a      	mov	r2, r3
 800b34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b34c:	68db      	ldr	r3, [r3, #12]
 800b34e:	4322      	orrs	r2, r4
 800b350:	b292      	uxth	r2, r2
 800b352:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800b354:	697a      	ldr	r2, [r7, #20]
 800b356:	6879      	ldr	r1, [r7, #4]
 800b358:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b35a:	f000 f909 	bl	800b570 <tcp_output_segment>
 800b35e:	4603      	mov	r3, r0
 800b360:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d016      	beq.n	800b398 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	8b5b      	ldrh	r3, [r3, #26]
 800b36e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b372:	b29a      	uxth	r2, r3
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	835a      	strh	r2, [r3, #26]
      return err;
 800b378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b37c:	e0d3      	b.n	800b526 <tcp_output+0x3de>
 800b37e:	bf00      	nop
 800b380:	08012c78 	.word	0x08012c78
 800b384:	080131bc 	.word	0x080131bc
 800b388:	08012ccc 	.word	0x08012ccc
 800b38c:	080131d4 	.word	0x080131d4
 800b390:	20008394 	.word	0x20008394
 800b394:	080131fc 	.word	0x080131fc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	7d1b      	ldrb	r3, [r3, #20]
 800b3a4:	2b02      	cmp	r3, #2
 800b3a6:	d006      	beq.n	800b3b6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	8b5b      	ldrh	r3, [r3, #26]
 800b3ac:	f023 0303 	bic.w	r3, r3, #3
 800b3b0:	b29a      	uxth	r2, r3
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b8:	68db      	ldr	r3, [r3, #12]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f7f9 f8b7 	bl	8004530 <lwip_htonl>
 800b3c2:	4604      	mov	r4, r0
 800b3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c6:	891b      	ldrh	r3, [r3, #8]
 800b3c8:	461d      	mov	r5, r3
 800b3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3cc:	68db      	ldr	r3, [r3, #12]
 800b3ce:	899b      	ldrh	r3, [r3, #12]
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f7f9 f896 	bl	8004504 <lwip_htons>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	f003 0303 	and.w	r3, r3, #3
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d001      	beq.n	800b3e8 <tcp_output+0x2a0>
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	e000      	b.n	800b3ea <tcp_output+0x2a2>
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	442b      	add	r3, r5
 800b3ec:	4423      	add	r3, r4
 800b3ee:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	1ad3      	subs	r3, r2, r3
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	da02      	bge.n	800b402 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	68ba      	ldr	r2, [r7, #8]
 800b400:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b404:	891b      	ldrh	r3, [r3, #8]
 800b406:	461c      	mov	r4, r3
 800b408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	899b      	ldrh	r3, [r3, #12]
 800b40e:	b29b      	uxth	r3, r3
 800b410:	4618      	mov	r0, r3
 800b412:	f7f9 f877 	bl	8004504 <lwip_htons>
 800b416:	4603      	mov	r3, r0
 800b418:	b2db      	uxtb	r3, r3
 800b41a:	f003 0303 	and.w	r3, r3, #3
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d001      	beq.n	800b426 <tcp_output+0x2de>
 800b422:	2301      	movs	r3, #1
 800b424:	e000      	b.n	800b428 <tcp_output+0x2e0>
 800b426:	2300      	movs	r3, #0
 800b428:	4423      	add	r3, r4
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d049      	beq.n	800b4c2 <tcp_output+0x37a>
      seg->next = NULL;
 800b42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b430:	2200      	movs	r2, #0
 800b432:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d105      	bne.n	800b448 <tcp_output+0x300>
        pcb->unacked = seg;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b440:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800b442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b444:	623b      	str	r3, [r7, #32]
 800b446:	e03f      	b.n	800b4c8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b44a:	68db      	ldr	r3, [r3, #12]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	4618      	mov	r0, r3
 800b450:	f7f9 f86e 	bl	8004530 <lwip_htonl>
 800b454:	4604      	mov	r4, r0
 800b456:	6a3b      	ldr	r3, [r7, #32]
 800b458:	68db      	ldr	r3, [r3, #12]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7f9 f867 	bl	8004530 <lwip_htonl>
 800b462:	4603      	mov	r3, r0
 800b464:	1ae3      	subs	r3, r4, r3
 800b466:	2b00      	cmp	r3, #0
 800b468:	da24      	bge.n	800b4b4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	3370      	adds	r3, #112	@ 0x70
 800b46e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b470:	e002      	b.n	800b478 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b478:	69fb      	ldr	r3, [r7, #28]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d011      	beq.n	800b4a4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b480:	69fb      	ldr	r3, [r7, #28]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	4618      	mov	r0, r3
 800b48a:	f7f9 f851 	bl	8004530 <lwip_htonl>
 800b48e:	4604      	mov	r4, r0
 800b490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b492:	68db      	ldr	r3, [r3, #12]
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	4618      	mov	r0, r3
 800b498:	f7f9 f84a 	bl	8004530 <lwip_htonl>
 800b49c:	4603      	mov	r3, r0
 800b49e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	dbe6      	blt.n	800b472 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800b4a4:	69fb      	ldr	r3, [r7, #28]
 800b4a6:	681a      	ldr	r2, [r3, #0]
 800b4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4aa:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b4ac:	69fb      	ldr	r3, [r7, #28]
 800b4ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4b0:	601a      	str	r2, [r3, #0]
 800b4b2:	e009      	b.n	800b4c8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b4b4:	6a3b      	ldr	r3, [r7, #32]
 800b4b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4b8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b4ba:	6a3b      	ldr	r3, [r7, #32]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	623b      	str	r3, [r7, #32]
 800b4c0:	e002      	b.n	800b4c8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b4c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b4c4:	f7fb ffab 	bl	800741e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4cc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800b4ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d012      	beq.n	800b4fa <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d6:	68db      	ldr	r3, [r3, #12]
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7f9 f828 	bl	8004530 <lwip_htonl>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4e6:	1ad3      	subs	r3, r2, r3
 800b4e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4ea:	8912      	ldrh	r2, [r2, #8]
 800b4ec:	4413      	add	r3, r2
  while (seg != NULL &&
 800b4ee:	69ba      	ldr	r2, [r7, #24]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	f4bf aed9 	bcs.w	800b2a8 <tcp_output+0x160>
 800b4f6:	e000      	b.n	800b4fa <tcp_output+0x3b2>
      break;
 800b4f8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d108      	bne.n	800b514 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2200      	movs	r2, #0
 800b506:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800b50a:	e004      	b.n	800b516 <tcp_output+0x3ce>
    goto output_done;
 800b50c:	bf00      	nop
 800b50e:	e002      	b.n	800b516 <tcp_output+0x3ce>
    goto output_done;
 800b510:	bf00      	nop
 800b512:	e000      	b.n	800b516 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b514:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	8b5b      	ldrh	r3, [r3, #26]
 800b51a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b51e:	b29a      	uxth	r2, r3
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b524:	2300      	movs	r3, #0
}
 800b526:	4618      	mov	r0, r3
 800b528:	3728      	adds	r7, #40	@ 0x28
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bdb0      	pop	{r4, r5, r7, pc}
 800b52e:	bf00      	nop

0800b530 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b082      	sub	sp, #8
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d106      	bne.n	800b54c <tcp_output_segment_busy+0x1c>
 800b53e:	4b09      	ldr	r3, [pc, #36]	@ (800b564 <tcp_output_segment_busy+0x34>)
 800b540:	f240 529a 	movw	r2, #1434	@ 0x59a
 800b544:	4908      	ldr	r1, [pc, #32]	@ (800b568 <tcp_output_segment_busy+0x38>)
 800b546:	4809      	ldr	r0, [pc, #36]	@ (800b56c <tcp_output_segment_busy+0x3c>)
 800b548:	f004 ff30 	bl	80103ac <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	7b9b      	ldrb	r3, [r3, #14]
 800b552:	2b01      	cmp	r3, #1
 800b554:	d001      	beq.n	800b55a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b556:	2301      	movs	r3, #1
 800b558:	e000      	b.n	800b55c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b55a:	2300      	movs	r3, #0
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3708      	adds	r7, #8
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}
 800b564:	08012c78 	.word	0x08012c78
 800b568:	08013214 	.word	0x08013214
 800b56c:	08012ccc 	.word	0x08012ccc

0800b570 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b570:	b5b0      	push	{r4, r5, r7, lr}
 800b572:	b08c      	sub	sp, #48	@ 0x30
 800b574:	af04      	add	r7, sp, #16
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d106      	bne.n	800b590 <tcp_output_segment+0x20>
 800b582:	4b64      	ldr	r3, [pc, #400]	@ (800b714 <tcp_output_segment+0x1a4>)
 800b584:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800b588:	4963      	ldr	r1, [pc, #396]	@ (800b718 <tcp_output_segment+0x1a8>)
 800b58a:	4864      	ldr	r0, [pc, #400]	@ (800b71c <tcp_output_segment+0x1ac>)
 800b58c:	f004 ff0e 	bl	80103ac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d106      	bne.n	800b5a4 <tcp_output_segment+0x34>
 800b596:	4b5f      	ldr	r3, [pc, #380]	@ (800b714 <tcp_output_segment+0x1a4>)
 800b598:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800b59c:	4960      	ldr	r1, [pc, #384]	@ (800b720 <tcp_output_segment+0x1b0>)
 800b59e:	485f      	ldr	r0, [pc, #380]	@ (800b71c <tcp_output_segment+0x1ac>)
 800b5a0:	f004 ff04 	bl	80103ac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d106      	bne.n	800b5b8 <tcp_output_segment+0x48>
 800b5aa:	4b5a      	ldr	r3, [pc, #360]	@ (800b714 <tcp_output_segment+0x1a4>)
 800b5ac:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800b5b0:	495c      	ldr	r1, [pc, #368]	@ (800b724 <tcp_output_segment+0x1b4>)
 800b5b2:	485a      	ldr	r0, [pc, #360]	@ (800b71c <tcp_output_segment+0x1ac>)
 800b5b4:	f004 fefa 	bl	80103ac <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f7ff ffb9 	bl	800b530 <tcp_output_segment_busy>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d001      	beq.n	800b5c8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	e0a1      	b.n	800b70c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	68dc      	ldr	r4, [r3, #12]
 800b5d0:	4610      	mov	r0, r2
 800b5d2:	f7f8 ffad 	bl	8004530 <lwip_htonl>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	68dc      	ldr	r4, [r3, #12]
 800b5e2:	4610      	mov	r0, r2
 800b5e4:	f7f8 ff8e 	bl	8004504 <lwip_htons>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5f0:	68ba      	ldr	r2, [r7, #8]
 800b5f2:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800b5f4:	441a      	add	r2, r3
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	68db      	ldr	r3, [r3, #12]
 800b5fe:	3314      	adds	r3, #20
 800b600:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	7a9b      	ldrb	r3, [r3, #10]
 800b606:	f003 0301 	and.w	r3, r3, #1
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d015      	beq.n	800b63a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	3304      	adds	r3, #4
 800b612:	461a      	mov	r2, r3
 800b614:	6879      	ldr	r1, [r7, #4]
 800b616:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800b61a:	f7fc fa39 	bl	8007a90 <tcp_eff_send_mss_netif>
 800b61e:	4603      	mov	r3, r0
 800b620:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b622:	8b7b      	ldrh	r3, [r7, #26]
 800b624:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800b628:	4618      	mov	r0, r3
 800b62a:	f7f8 ff81 	bl	8004530 <lwip_htonl>
 800b62e:	4602      	mov	r2, r0
 800b630:	69fb      	ldr	r3, [r7, #28]
 800b632:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	3304      	adds	r3, #4
 800b638:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b640:	2b00      	cmp	r3, #0
 800b642:	da02      	bge.n	800b64a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	2200      	movs	r2, #0
 800b648:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d10c      	bne.n	800b66c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b652:	4b35      	ldr	r3, [pc, #212]	@ (800b728 <tcp_output_segment+0x1b8>)
 800b654:	681a      	ldr	r2, [r3, #0]
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	68db      	ldr	r3, [r3, #12]
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	4618      	mov	r0, r3
 800b662:	f7f8 ff65 	bl	8004530 <lwip_htonl>
 800b666:	4602      	mov	r2, r0
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	68da      	ldr	r2, [r3, #12]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	1ad3      	subs	r3, r2, r3
 800b678:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	8959      	ldrh	r1, [r3, #10]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	8b3a      	ldrh	r2, [r7, #24]
 800b686:	1a8a      	subs	r2, r1, r2
 800b688:	b292      	uxth	r2, r2
 800b68a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	8919      	ldrh	r1, [r3, #8]
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	8b3a      	ldrh	r2, [r7, #24]
 800b698:	1a8a      	subs	r2, r1, r2
 800b69a:	b292      	uxth	r2, r2
 800b69c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	68fa      	ldr	r2, [r7, #12]
 800b6a4:	68d2      	ldr	r2, [r2, #12]
 800b6a6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	68db      	ldr	r3, [r3, #12]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	741a      	strb	r2, [r3, #16]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	68da      	ldr	r2, [r3, #12]
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	7a9b      	ldrb	r3, [r3, #10]
 800b6bc:	f003 0301 	and.w	r3, r3, #1
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d001      	beq.n	800b6c8 <tcp_output_segment+0x158>
 800b6c4:	2318      	movs	r3, #24
 800b6c6:	e000      	b.n	800b6ca <tcp_output_segment+0x15a>
 800b6c8:	2314      	movs	r3, #20
 800b6ca:	4413      	add	r3, r2
 800b6cc:	69fa      	ldr	r2, [r7, #28]
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	d006      	beq.n	800b6e0 <tcp_output_segment+0x170>
 800b6d2:	4b10      	ldr	r3, [pc, #64]	@ (800b714 <tcp_output_segment+0x1a4>)
 800b6d4:	f240 621c 	movw	r2, #1564	@ 0x61c
 800b6d8:	4914      	ldr	r1, [pc, #80]	@ (800b72c <tcp_output_segment+0x1bc>)
 800b6da:	4810      	ldr	r0, [pc, #64]	@ (800b71c <tcp_output_segment+0x1ac>)
 800b6dc:	f004 fe66 	bl	80103ac <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	6858      	ldr	r0, [r3, #4]
 800b6e4:	68b9      	ldr	r1, [r7, #8]
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	1d1c      	adds	r4, r3, #4
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	7add      	ldrb	r5, [r3, #11]
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	7a9b      	ldrb	r3, [r3, #10]
 800b6f2:	687a      	ldr	r2, [r7, #4]
 800b6f4:	9202      	str	r2, [sp, #8]
 800b6f6:	2206      	movs	r2, #6
 800b6f8:	9201      	str	r2, [sp, #4]
 800b6fa:	9300      	str	r3, [sp, #0]
 800b6fc:	462b      	mov	r3, r5
 800b6fe:	4622      	mov	r2, r4
 800b700:	f002 fa34 	bl	800db6c <ip4_output_if>
 800b704:	4603      	mov	r3, r0
 800b706:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b708:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3720      	adds	r7, #32
 800b710:	46bd      	mov	sp, r7
 800b712:	bdb0      	pop	{r4, r5, r7, pc}
 800b714:	08012c78 	.word	0x08012c78
 800b718:	0801323c 	.word	0x0801323c
 800b71c:	08012ccc 	.word	0x08012ccc
 800b720:	0801325c 	.word	0x0801325c
 800b724:	0801327c 	.word	0x0801327c
 800b728:	20008348 	.word	0x20008348
 800b72c:	080132a0 	.word	0x080132a0

0800b730 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b730:	b5b0      	push	{r4, r5, r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d106      	bne.n	800b74c <tcp_rexmit_rto_prepare+0x1c>
 800b73e:	4b31      	ldr	r3, [pc, #196]	@ (800b804 <tcp_rexmit_rto_prepare+0xd4>)
 800b740:	f240 6263 	movw	r2, #1635	@ 0x663
 800b744:	4930      	ldr	r1, [pc, #192]	@ (800b808 <tcp_rexmit_rto_prepare+0xd8>)
 800b746:	4831      	ldr	r0, [pc, #196]	@ (800b80c <tcp_rexmit_rto_prepare+0xdc>)
 800b748:	f004 fe30 	bl	80103ac <iprintf>

  if (pcb->unacked == NULL) {
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b750:	2b00      	cmp	r3, #0
 800b752:	d102      	bne.n	800b75a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b754:	f06f 0305 	mvn.w	r3, #5
 800b758:	e050      	b.n	800b7fc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b75e:	60fb      	str	r3, [r7, #12]
 800b760:	e00b      	b.n	800b77a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	f7ff fee4 	bl	800b530 <tcp_output_segment_busy>
 800b768:	4603      	mov	r3, r0
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d002      	beq.n	800b774 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b76e:	f06f 0305 	mvn.w	r3, #5
 800b772:	e043      	b.n	800b7fc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	60fb      	str	r3, [r7, #12]
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d1ef      	bne.n	800b762 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b782:	68f8      	ldr	r0, [r7, #12]
 800b784:	f7ff fed4 	bl	800b530 <tcp_output_segment_busy>
 800b788:	4603      	mov	r3, r0
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d002      	beq.n	800b794 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b78e:	f06f 0305 	mvn.w	r3, #5
 800b792:	e033      	b.n	800b7fc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	8b5b      	ldrh	r3, [r3, #26]
 800b7ae:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800b7b2:	b29a      	uxth	r2, r3
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	68db      	ldr	r3, [r3, #12]
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f7f8 feb6 	bl	8004530 <lwip_htonl>
 800b7c4:	4604      	mov	r4, r0
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	891b      	ldrh	r3, [r3, #8]
 800b7ca:	461d      	mov	r5, r3
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	68db      	ldr	r3, [r3, #12]
 800b7d0:	899b      	ldrh	r3, [r3, #12]
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f7f8 fe95 	bl	8004504 <lwip_htons>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	f003 0303 	and.w	r3, r3, #3
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d001      	beq.n	800b7ea <tcp_rexmit_rto_prepare+0xba>
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e000      	b.n	800b7ec <tcp_rexmit_rto_prepare+0xbc>
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	442b      	add	r3, r5
 800b7ee:	18e2      	adds	r2, r4, r3
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800b7fa:	2300      	movs	r3, #0
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3710      	adds	r7, #16
 800b800:	46bd      	mov	sp, r7
 800b802:	bdb0      	pop	{r4, r5, r7, pc}
 800b804:	08012c78 	.word	0x08012c78
 800b808:	080132b4 	.word	0x080132b4
 800b80c:	08012ccc 	.word	0x08012ccc

0800b810 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d106      	bne.n	800b82c <tcp_rexmit_rto_commit+0x1c>
 800b81e:	4b0d      	ldr	r3, [pc, #52]	@ (800b854 <tcp_rexmit_rto_commit+0x44>)
 800b820:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800b824:	490c      	ldr	r1, [pc, #48]	@ (800b858 <tcp_rexmit_rto_commit+0x48>)
 800b826:	480d      	ldr	r0, [pc, #52]	@ (800b85c <tcp_rexmit_rto_commit+0x4c>)
 800b828:	f004 fdc0 	bl	80103ac <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b832:	2bff      	cmp	r3, #255	@ 0xff
 800b834:	d007      	beq.n	800b846 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b83c:	3301      	adds	r3, #1
 800b83e:	b2da      	uxtb	r2, r3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f7ff fc7e 	bl	800b148 <tcp_output>
}
 800b84c:	bf00      	nop
 800b84e:	3708      	adds	r7, #8
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}
 800b854:	08012c78 	.word	0x08012c78
 800b858:	080132d8 	.word	0x080132d8
 800b85c:	08012ccc 	.word	0x08012ccc

0800b860 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d106      	bne.n	800b87c <tcp_rexmit_rto+0x1c>
 800b86e:	4b0a      	ldr	r3, [pc, #40]	@ (800b898 <tcp_rexmit_rto+0x38>)
 800b870:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800b874:	4909      	ldr	r1, [pc, #36]	@ (800b89c <tcp_rexmit_rto+0x3c>)
 800b876:	480a      	ldr	r0, [pc, #40]	@ (800b8a0 <tcp_rexmit_rto+0x40>)
 800b878:	f004 fd98 	bl	80103ac <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f7ff ff57 	bl	800b730 <tcp_rexmit_rto_prepare>
 800b882:	4603      	mov	r3, r0
 800b884:	2b00      	cmp	r3, #0
 800b886:	d102      	bne.n	800b88e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f7ff ffc1 	bl	800b810 <tcp_rexmit_rto_commit>
  }
}
 800b88e:	bf00      	nop
 800b890:	3708      	adds	r7, #8
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	08012c78 	.word	0x08012c78
 800b89c:	080132fc 	.word	0x080132fc
 800b8a0:	08012ccc 	.word	0x08012ccc

0800b8a4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b8a4:	b590      	push	{r4, r7, lr}
 800b8a6:	b085      	sub	sp, #20
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d106      	bne.n	800b8c0 <tcp_rexmit+0x1c>
 800b8b2:	4b2f      	ldr	r3, [pc, #188]	@ (800b970 <tcp_rexmit+0xcc>)
 800b8b4:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800b8b8:	492e      	ldr	r1, [pc, #184]	@ (800b974 <tcp_rexmit+0xd0>)
 800b8ba:	482f      	ldr	r0, [pc, #188]	@ (800b978 <tcp_rexmit+0xd4>)
 800b8bc:	f004 fd76 	bl	80103ac <iprintf>

  if (pcb->unacked == NULL) {
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d102      	bne.n	800b8ce <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b8c8:	f06f 0305 	mvn.w	r3, #5
 800b8cc:	e04c      	b.n	800b968 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8d2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b8d4:	68b8      	ldr	r0, [r7, #8]
 800b8d6:	f7ff fe2b 	bl	800b530 <tcp_output_segment_busy>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d002      	beq.n	800b8e6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b8e0:	f06f 0305 	mvn.w	r3, #5
 800b8e4:	e040      	b.n	800b968 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	681a      	ldr	r2, [r3, #0]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	336c      	adds	r3, #108	@ 0x6c
 800b8f2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b8f4:	e002      	b.n	800b8fc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d011      	beq.n	800b928 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	68db      	ldr	r3, [r3, #12]
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7f8 fe0f 	bl	8004530 <lwip_htonl>
 800b912:	4604      	mov	r4, r0
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7f8 fe08 	bl	8004530 <lwip_htonl>
 800b920:	4603      	mov	r3, r0
 800b922:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b924:	2b00      	cmp	r3, #0
 800b926:	dbe6      	blt.n	800b8f6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681a      	ldr	r2, [r3, #0]
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	68ba      	ldr	r2, [r7, #8]
 800b934:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d103      	bne.n	800b946 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2200      	movs	r2, #0
 800b942:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b94c:	2bff      	cmp	r3, #255	@ 0xff
 800b94e:	d007      	beq.n	800b960 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b956:	3301      	adds	r3, #1
 800b958:	b2da      	uxtb	r2, r3
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2200      	movs	r2, #0
 800b964:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b966:	2300      	movs	r3, #0
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3714      	adds	r7, #20
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd90      	pop	{r4, r7, pc}
 800b970:	08012c78 	.word	0x08012c78
 800b974:	08013318 	.word	0x08013318
 800b978:	08012ccc 	.word	0x08012ccc

0800b97c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b082      	sub	sp, #8
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d106      	bne.n	800b998 <tcp_rexmit_fast+0x1c>
 800b98a:	4b2a      	ldr	r3, [pc, #168]	@ (800ba34 <tcp_rexmit_fast+0xb8>)
 800b98c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800b990:	4929      	ldr	r1, [pc, #164]	@ (800ba38 <tcp_rexmit_fast+0xbc>)
 800b992:	482a      	ldr	r0, [pc, #168]	@ (800ba3c <tcp_rexmit_fast+0xc0>)
 800b994:	f004 fd0a 	bl	80103ac <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d044      	beq.n	800ba2a <tcp_rexmit_fast+0xae>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	8b5b      	ldrh	r3, [r3, #26]
 800b9a4:	f003 0304 	and.w	r3, r3, #4
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d13e      	bne.n	800ba2a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f7ff ff79 	bl	800b8a4 <tcp_rexmit>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d138      	bne.n	800ba2a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	bf28      	it	cs
 800b9c8:	4613      	movcs	r3, r2
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	0fda      	lsrs	r2, r3, #31
 800b9ce:	4413      	add	r3, r2
 800b9d0:	105b      	asrs	r3, r3, #1
 800b9d2:	b29a      	uxth	r2, r3
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b9e6:	005b      	lsls	r3, r3, #1
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d206      	bcs.n	800b9fa <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b9f0:	005b      	lsls	r3, r3, #1
 800b9f2:	b29a      	uxth	r2, r3
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ba04:	4619      	mov	r1, r3
 800ba06:	0049      	lsls	r1, r1, #1
 800ba08:	440b      	add	r3, r1
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	4413      	add	r3, r2
 800ba0e:	b29a      	uxth	r2, r3
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	8b5b      	ldrh	r3, [r3, #26]
 800ba1a:	f043 0304 	orr.w	r3, r3, #4
 800ba1e:	b29a      	uxth	r2, r3
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2200      	movs	r2, #0
 800ba28:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800ba2a:	bf00      	nop
 800ba2c:	3708      	adds	r7, #8
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	08012c78 	.word	0x08012c78
 800ba38:	08013330 	.word	0x08013330
 800ba3c:	08012ccc 	.word	0x08012ccc

0800ba40 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b086      	sub	sp, #24
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	607b      	str	r3, [r7, #4]
 800ba4a:	460b      	mov	r3, r1
 800ba4c:	817b      	strh	r3, [r7, #10]
 800ba4e:	4613      	mov	r3, r2
 800ba50:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ba52:	897a      	ldrh	r2, [r7, #10]
 800ba54:	893b      	ldrh	r3, [r7, #8]
 800ba56:	4413      	add	r3, r2
 800ba58:	b29b      	uxth	r3, r3
 800ba5a:	3314      	adds	r3, #20
 800ba5c:	b29b      	uxth	r3, r3
 800ba5e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ba62:	4619      	mov	r1, r3
 800ba64:	2022      	movs	r0, #34	@ 0x22
 800ba66:	f7f9 fdc7 	bl	80055f8 <pbuf_alloc>
 800ba6a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d04d      	beq.n	800bb0e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ba72:	897b      	ldrh	r3, [r7, #10]
 800ba74:	3313      	adds	r3, #19
 800ba76:	697a      	ldr	r2, [r7, #20]
 800ba78:	8952      	ldrh	r2, [r2, #10]
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	db06      	blt.n	800ba8c <tcp_output_alloc_header_common+0x4c>
 800ba7e:	4b26      	ldr	r3, [pc, #152]	@ (800bb18 <tcp_output_alloc_header_common+0xd8>)
 800ba80:	f240 7223 	movw	r2, #1827	@ 0x723
 800ba84:	4925      	ldr	r1, [pc, #148]	@ (800bb1c <tcp_output_alloc_header_common+0xdc>)
 800ba86:	4826      	ldr	r0, [pc, #152]	@ (800bb20 <tcp_output_alloc_header_common+0xe0>)
 800ba88:	f004 fc90 	bl	80103ac <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800ba92:	8c3b      	ldrh	r3, [r7, #32]
 800ba94:	4618      	mov	r0, r3
 800ba96:	f7f8 fd35 	bl	8004504 <lwip_htons>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800baa2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7f8 fd2d 	bl	8004504 <lwip_htons>
 800baaa:	4603      	mov	r3, r0
 800baac:	461a      	mov	r2, r3
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	687a      	ldr	r2, [r7, #4]
 800bab6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800bab8:	68f8      	ldr	r0, [r7, #12]
 800baba:	f7f8 fd39 	bl	8004530 <lwip_htonl>
 800babe:	4602      	mov	r2, r0
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800bac4:	897b      	ldrh	r3, [r7, #10]
 800bac6:	089b      	lsrs	r3, r3, #2
 800bac8:	b29b      	uxth	r3, r3
 800baca:	3305      	adds	r3, #5
 800bacc:	b29b      	uxth	r3, r3
 800bace:	031b      	lsls	r3, r3, #12
 800bad0:	b29a      	uxth	r2, r3
 800bad2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	4313      	orrs	r3, r2
 800bada:	b29b      	uxth	r3, r3
 800badc:	4618      	mov	r0, r3
 800bade:	f7f8 fd11 	bl	8004504 <lwip_htons>
 800bae2:	4603      	mov	r3, r0
 800bae4:	461a      	mov	r2, r3
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800baea:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800baec:	4618      	mov	r0, r3
 800baee:	f7f8 fd09 	bl	8004504 <lwip_htons>
 800baf2:	4603      	mov	r3, r0
 800baf4:	461a      	mov	r2, r3
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	2200      	movs	r2, #0
 800bafe:	741a      	strb	r2, [r3, #16]
 800bb00:	2200      	movs	r2, #0
 800bb02:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	2200      	movs	r2, #0
 800bb08:	749a      	strb	r2, [r3, #18]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800bb0e:	697b      	ldr	r3, [r7, #20]
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3718      	adds	r7, #24
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}
 800bb18:	08012c78 	.word	0x08012c78
 800bb1c:	08013350 	.word	0x08013350
 800bb20:	08012ccc 	.word	0x08012ccc

0800bb24 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800bb24:	b5b0      	push	{r4, r5, r7, lr}
 800bb26:	b08a      	sub	sp, #40	@ 0x28
 800bb28:	af04      	add	r7, sp, #16
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	607b      	str	r3, [r7, #4]
 800bb2e:	460b      	mov	r3, r1
 800bb30:	817b      	strh	r3, [r7, #10]
 800bb32:	4613      	mov	r3, r2
 800bb34:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d106      	bne.n	800bb4a <tcp_output_alloc_header+0x26>
 800bb3c:	4b15      	ldr	r3, [pc, #84]	@ (800bb94 <tcp_output_alloc_header+0x70>)
 800bb3e:	f240 7242 	movw	r2, #1858	@ 0x742
 800bb42:	4915      	ldr	r1, [pc, #84]	@ (800bb98 <tcp_output_alloc_header+0x74>)
 800bb44:	4815      	ldr	r0, [pc, #84]	@ (800bb9c <tcp_output_alloc_header+0x78>)
 800bb46:	f004 fc31 	bl	80103ac <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	8adb      	ldrh	r3, [r3, #22]
 800bb52:	68fa      	ldr	r2, [r7, #12]
 800bb54:	8b12      	ldrh	r2, [r2, #24]
 800bb56:	68f9      	ldr	r1, [r7, #12]
 800bb58:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800bb5a:	893d      	ldrh	r5, [r7, #8]
 800bb5c:	897c      	ldrh	r4, [r7, #10]
 800bb5e:	9103      	str	r1, [sp, #12]
 800bb60:	2110      	movs	r1, #16
 800bb62:	9102      	str	r1, [sp, #8]
 800bb64:	9201      	str	r2, [sp, #4]
 800bb66:	9300      	str	r3, [sp, #0]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	462a      	mov	r2, r5
 800bb6c:	4621      	mov	r1, r4
 800bb6e:	f7ff ff67 	bl	800ba40 <tcp_output_alloc_header_common>
 800bb72:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d006      	beq.n	800bb88 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb7e:	68fa      	ldr	r2, [r7, #12]
 800bb80:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800bb82:	441a      	add	r2, r3
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800bb88:	697b      	ldr	r3, [r7, #20]
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3718      	adds	r7, #24
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bdb0      	pop	{r4, r5, r7, pc}
 800bb92:	bf00      	nop
 800bb94:	08012c78 	.word	0x08012c78
 800bb98:	08013380 	.word	0x08013380
 800bb9c:	08012ccc 	.word	0x08012ccc

0800bba0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b088      	sub	sp, #32
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	60f8      	str	r0, [r7, #12]
 800bba8:	60b9      	str	r1, [r7, #8]
 800bbaa:	4611      	mov	r1, r2
 800bbac:	461a      	mov	r2, r3
 800bbae:	460b      	mov	r3, r1
 800bbb0:	71fb      	strb	r3, [r7, #7]
 800bbb2:	4613      	mov	r3, r2
 800bbb4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d106      	bne.n	800bbce <tcp_output_fill_options+0x2e>
 800bbc0:	4b12      	ldr	r3, [pc, #72]	@ (800bc0c <tcp_output_fill_options+0x6c>)
 800bbc2:	f240 7256 	movw	r2, #1878	@ 0x756
 800bbc6:	4912      	ldr	r1, [pc, #72]	@ (800bc10 <tcp_output_fill_options+0x70>)
 800bbc8:	4812      	ldr	r0, [pc, #72]	@ (800bc14 <tcp_output_fill_options+0x74>)
 800bbca:	f004 fbef 	bl	80103ac <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800bbd4:	69bb      	ldr	r3, [r7, #24]
 800bbd6:	3314      	adds	r3, #20
 800bbd8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800bbda:	8bfb      	ldrh	r3, [r7, #30]
 800bbdc:	009b      	lsls	r3, r3, #2
 800bbde:	461a      	mov	r2, r3
 800bbe0:	79fb      	ldrb	r3, [r7, #7]
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	f003 0304 	and.w	r3, r3, #4
 800bbe8:	4413      	add	r3, r2
 800bbea:	3314      	adds	r3, #20
 800bbec:	69ba      	ldr	r2, [r7, #24]
 800bbee:	4413      	add	r3, r2
 800bbf0:	697a      	ldr	r2, [r7, #20]
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d006      	beq.n	800bc04 <tcp_output_fill_options+0x64>
 800bbf6:	4b05      	ldr	r3, [pc, #20]	@ (800bc0c <tcp_output_fill_options+0x6c>)
 800bbf8:	f240 7275 	movw	r2, #1909	@ 0x775
 800bbfc:	4906      	ldr	r1, [pc, #24]	@ (800bc18 <tcp_output_fill_options+0x78>)
 800bbfe:	4805      	ldr	r0, [pc, #20]	@ (800bc14 <tcp_output_fill_options+0x74>)
 800bc00:	f004 fbd4 	bl	80103ac <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800bc04:	bf00      	nop
 800bc06:	3720      	adds	r7, #32
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}
 800bc0c:	08012c78 	.word	0x08012c78
 800bc10:	080133a8 	.word	0x080133a8
 800bc14:	08012ccc 	.word	0x08012ccc
 800bc18:	080132a0 	.word	0x080132a0

0800bc1c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b08a      	sub	sp, #40	@ 0x28
 800bc20:	af04      	add	r7, sp, #16
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	607a      	str	r2, [r7, #4]
 800bc28:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d106      	bne.n	800bc3e <tcp_output_control_segment+0x22>
 800bc30:	4b1c      	ldr	r3, [pc, #112]	@ (800bca4 <tcp_output_control_segment+0x88>)
 800bc32:	f240 7287 	movw	r2, #1927	@ 0x787
 800bc36:	491c      	ldr	r1, [pc, #112]	@ (800bca8 <tcp_output_control_segment+0x8c>)
 800bc38:	481c      	ldr	r0, [pc, #112]	@ (800bcac <tcp_output_control_segment+0x90>)
 800bc3a:	f004 fbb7 	bl	80103ac <iprintf>

  netif = tcp_route(pcb, src, dst);
 800bc3e:	683a      	ldr	r2, [r7, #0]
 800bc40:	6879      	ldr	r1, [r7, #4]
 800bc42:	68f8      	ldr	r0, [r7, #12]
 800bc44:	f7fe faea 	bl	800a21c <tcp_route>
 800bc48:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d102      	bne.n	800bc56 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800bc50:	23fc      	movs	r3, #252	@ 0xfc
 800bc52:	75fb      	strb	r3, [r7, #23]
 800bc54:	e01c      	b.n	800bc90 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d006      	beq.n	800bc6a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	7adb      	ldrb	r3, [r3, #11]
 800bc60:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	7a9b      	ldrb	r3, [r3, #10]
 800bc66:	757b      	strb	r3, [r7, #21]
 800bc68:	e003      	b.n	800bc72 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800bc6a:	23ff      	movs	r3, #255	@ 0xff
 800bc6c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800bc72:	7dba      	ldrb	r2, [r7, #22]
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	9302      	str	r3, [sp, #8]
 800bc78:	2306      	movs	r3, #6
 800bc7a:	9301      	str	r3, [sp, #4]
 800bc7c:	7d7b      	ldrb	r3, [r7, #21]
 800bc7e:	9300      	str	r3, [sp, #0]
 800bc80:	4613      	mov	r3, r2
 800bc82:	683a      	ldr	r2, [r7, #0]
 800bc84:	6879      	ldr	r1, [r7, #4]
 800bc86:	68b8      	ldr	r0, [r7, #8]
 800bc88:	f001 ff70 	bl	800db6c <ip4_output_if>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800bc90:	68b8      	ldr	r0, [r7, #8]
 800bc92:	f7f9 ff95 	bl	8005bc0 <pbuf_free>
  return err;
 800bc96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3718      	adds	r7, #24
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}
 800bca2:	bf00      	nop
 800bca4:	08012c78 	.word	0x08012c78
 800bca8:	080133d0 	.word	0x080133d0
 800bcac:	08012ccc 	.word	0x08012ccc

0800bcb0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800bcb0:	b590      	push	{r4, r7, lr}
 800bcb2:	b08b      	sub	sp, #44	@ 0x2c
 800bcb4:	af04      	add	r7, sp, #16
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	60b9      	str	r1, [r7, #8]
 800bcba:	607a      	str	r2, [r7, #4]
 800bcbc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d106      	bne.n	800bcd2 <tcp_rst+0x22>
 800bcc4:	4b1f      	ldr	r3, [pc, #124]	@ (800bd44 <tcp_rst+0x94>)
 800bcc6:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800bcca:	491f      	ldr	r1, [pc, #124]	@ (800bd48 <tcp_rst+0x98>)
 800bccc:	481f      	ldr	r0, [pc, #124]	@ (800bd4c <tcp_rst+0x9c>)
 800bcce:	f004 fb6d 	bl	80103ac <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800bcd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d106      	bne.n	800bce6 <tcp_rst+0x36>
 800bcd8:	4b1a      	ldr	r3, [pc, #104]	@ (800bd44 <tcp_rst+0x94>)
 800bcda:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800bcde:	491c      	ldr	r1, [pc, #112]	@ (800bd50 <tcp_rst+0xa0>)
 800bce0:	481a      	ldr	r0, [pc, #104]	@ (800bd4c <tcp_rst+0x9c>)
 800bce2:	f004 fb63 	bl	80103ac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bce6:	2300      	movs	r3, #0
 800bce8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800bcea:	f246 0308 	movw	r3, #24584	@ 0x6008
 800bcee:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800bcf0:	7dfb      	ldrb	r3, [r7, #23]
 800bcf2:	b29c      	uxth	r4, r3
 800bcf4:	68b8      	ldr	r0, [r7, #8]
 800bcf6:	f7f8 fc1b 	bl	8004530 <lwip_htonl>
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	8abb      	ldrh	r3, [r7, #20]
 800bcfe:	9303      	str	r3, [sp, #12]
 800bd00:	2314      	movs	r3, #20
 800bd02:	9302      	str	r3, [sp, #8]
 800bd04:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800bd06:	9301      	str	r3, [sp, #4]
 800bd08:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800bd0a:	9300      	str	r3, [sp, #0]
 800bd0c:	4613      	mov	r3, r2
 800bd0e:	2200      	movs	r2, #0
 800bd10:	4621      	mov	r1, r4
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f7ff fe94 	bl	800ba40 <tcp_output_alloc_header_common>
 800bd18:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d00c      	beq.n	800bd3a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bd20:	7dfb      	ldrb	r3, [r7, #23]
 800bd22:	2200      	movs	r2, #0
 800bd24:	6939      	ldr	r1, [r7, #16]
 800bd26:	68f8      	ldr	r0, [r7, #12]
 800bd28:	f7ff ff3a 	bl	800bba0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800bd2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd2e:	683a      	ldr	r2, [r7, #0]
 800bd30:	6939      	ldr	r1, [r7, #16]
 800bd32:	68f8      	ldr	r0, [r7, #12]
 800bd34:	f7ff ff72 	bl	800bc1c <tcp_output_control_segment>
 800bd38:	e000      	b.n	800bd3c <tcp_rst+0x8c>
    return;
 800bd3a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800bd3c:	371c      	adds	r7, #28
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd90      	pop	{r4, r7, pc}
 800bd42:	bf00      	nop
 800bd44:	08012c78 	.word	0x08012c78
 800bd48:	080133fc 	.word	0x080133fc
 800bd4c:	08012ccc 	.word	0x08012ccc
 800bd50:	08013418 	.word	0x08013418

0800bd54 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800bd54:	b590      	push	{r4, r7, lr}
 800bd56:	b087      	sub	sp, #28
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800bd60:	2300      	movs	r3, #0
 800bd62:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d106      	bne.n	800bd78 <tcp_send_empty_ack+0x24>
 800bd6a:	4b28      	ldr	r3, [pc, #160]	@ (800be0c <tcp_send_empty_ack+0xb8>)
 800bd6c:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800bd70:	4927      	ldr	r1, [pc, #156]	@ (800be10 <tcp_send_empty_ack+0xbc>)
 800bd72:	4828      	ldr	r0, [pc, #160]	@ (800be14 <tcp_send_empty_ack+0xc0>)
 800bd74:	f004 fb1a 	bl	80103ac <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bd78:	7dfb      	ldrb	r3, [r7, #23]
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	b2db      	uxtb	r3, r3
 800bd7e:	f003 0304 	and.w	r3, r3, #4
 800bd82:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800bd84:	7d7b      	ldrb	r3, [r7, #21]
 800bd86:	b29c      	uxth	r4, r3
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f7f8 fbcf 	bl	8004530 <lwip_htonl>
 800bd92:	4603      	mov	r3, r0
 800bd94:	2200      	movs	r2, #0
 800bd96:	4621      	mov	r1, r4
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f7ff fec3 	bl	800bb24 <tcp_output_alloc_header>
 800bd9e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d109      	bne.n	800bdba <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	8b5b      	ldrh	r3, [r3, #26]
 800bdaa:	f043 0303 	orr.w	r3, r3, #3
 800bdae:	b29a      	uxth	r2, r3
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800bdb4:	f06f 0301 	mvn.w	r3, #1
 800bdb8:	e023      	b.n	800be02 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800bdba:	7dbb      	ldrb	r3, [r7, #22]
 800bdbc:	7dfa      	ldrb	r2, [r7, #23]
 800bdbe:	6939      	ldr	r1, [r7, #16]
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f7ff feed 	bl	800bba0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bdc6:	687a      	ldr	r2, [r7, #4]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	3304      	adds	r3, #4
 800bdcc:	6939      	ldr	r1, [r7, #16]
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f7ff ff24 	bl	800bc1c <tcp_output_control_segment>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800bdd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d007      	beq.n	800bdf0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	8b5b      	ldrh	r3, [r3, #26]
 800bde4:	f043 0303 	orr.w	r3, r3, #3
 800bde8:	b29a      	uxth	r2, r3
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	835a      	strh	r2, [r3, #26]
 800bdee:	e006      	b.n	800bdfe <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	8b5b      	ldrh	r3, [r3, #26]
 800bdf4:	f023 0303 	bic.w	r3, r3, #3
 800bdf8:	b29a      	uxth	r2, r3
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800bdfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be02:	4618      	mov	r0, r3
 800be04:	371c      	adds	r7, #28
 800be06:	46bd      	mov	sp, r7
 800be08:	bd90      	pop	{r4, r7, pc}
 800be0a:	bf00      	nop
 800be0c:	08012c78 	.word	0x08012c78
 800be10:	08013434 	.word	0x08013434
 800be14:	08012ccc 	.word	0x08012ccc

0800be18 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800be18:	b590      	push	{r4, r7, lr}
 800be1a:	b087      	sub	sp, #28
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800be20:	2300      	movs	r3, #0
 800be22:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d106      	bne.n	800be38 <tcp_keepalive+0x20>
 800be2a:	4b18      	ldr	r3, [pc, #96]	@ (800be8c <tcp_keepalive+0x74>)
 800be2c:	f640 0224 	movw	r2, #2084	@ 0x824
 800be30:	4917      	ldr	r1, [pc, #92]	@ (800be90 <tcp_keepalive+0x78>)
 800be32:	4818      	ldr	r0, [pc, #96]	@ (800be94 <tcp_keepalive+0x7c>)
 800be34:	f004 faba 	bl	80103ac <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800be38:	7dfb      	ldrb	r3, [r7, #23]
 800be3a:	b29c      	uxth	r4, r3
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be40:	3b01      	subs	r3, #1
 800be42:	4618      	mov	r0, r3
 800be44:	f7f8 fb74 	bl	8004530 <lwip_htonl>
 800be48:	4603      	mov	r3, r0
 800be4a:	2200      	movs	r2, #0
 800be4c:	4621      	mov	r1, r4
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f7ff fe68 	bl	800bb24 <tcp_output_alloc_header>
 800be54:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d102      	bne.n	800be62 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800be5c:	f04f 33ff 	mov.w	r3, #4294967295
 800be60:	e010      	b.n	800be84 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800be62:	7dfb      	ldrb	r3, [r7, #23]
 800be64:	2200      	movs	r2, #0
 800be66:	6939      	ldr	r1, [r7, #16]
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f7ff fe99 	bl	800bba0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	3304      	adds	r3, #4
 800be74:	6939      	ldr	r1, [r7, #16]
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f7ff fed0 	bl	800bc1c <tcp_output_control_segment>
 800be7c:	4603      	mov	r3, r0
 800be7e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800be80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be84:	4618      	mov	r0, r3
 800be86:	371c      	adds	r7, #28
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd90      	pop	{r4, r7, pc}
 800be8c:	08012c78 	.word	0x08012c78
 800be90:	08013454 	.word	0x08013454
 800be94:	08012ccc 	.word	0x08012ccc

0800be98 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800be98:	b590      	push	{r4, r7, lr}
 800be9a:	b08b      	sub	sp, #44	@ 0x2c
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bea0:	2300      	movs	r3, #0
 800bea2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d106      	bne.n	800beba <tcp_zero_window_probe+0x22>
 800beac:	4b4c      	ldr	r3, [pc, #304]	@ (800bfe0 <tcp_zero_window_probe+0x148>)
 800beae:	f640 024f 	movw	r2, #2127	@ 0x84f
 800beb2:	494c      	ldr	r1, [pc, #304]	@ (800bfe4 <tcp_zero_window_probe+0x14c>)
 800beb4:	484c      	ldr	r0, [pc, #304]	@ (800bfe8 <tcp_zero_window_probe+0x150>)
 800beb6:	f004 fa79 	bl	80103ac <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bebe:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800bec0:	6a3b      	ldr	r3, [r7, #32]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d101      	bne.n	800beca <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800bec6:	2300      	movs	r3, #0
 800bec8:	e086      	b.n	800bfd8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800bed0:	2bff      	cmp	r3, #255	@ 0xff
 800bed2:	d007      	beq.n	800bee4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800beda:	3301      	adds	r3, #1
 800bedc:	b2da      	uxtb	r2, r3
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800bee4:	6a3b      	ldr	r3, [r7, #32]
 800bee6:	68db      	ldr	r3, [r3, #12]
 800bee8:	899b      	ldrh	r3, [r3, #12]
 800beea:	b29b      	uxth	r3, r3
 800beec:	4618      	mov	r0, r3
 800beee:	f7f8 fb09 	bl	8004504 <lwip_htons>
 800bef2:	4603      	mov	r3, r0
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	f003 0301 	and.w	r3, r3, #1
 800befa:	2b00      	cmp	r3, #0
 800befc:	d005      	beq.n	800bf0a <tcp_zero_window_probe+0x72>
 800befe:	6a3b      	ldr	r3, [r7, #32]
 800bf00:	891b      	ldrh	r3, [r3, #8]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d101      	bne.n	800bf0a <tcp_zero_window_probe+0x72>
 800bf06:	2301      	movs	r3, #1
 800bf08:	e000      	b.n	800bf0c <tcp_zero_window_probe+0x74>
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800bf0e:	7ffb      	ldrb	r3, [r7, #31]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	bf0c      	ite	eq
 800bf14:	2301      	moveq	r3, #1
 800bf16:	2300      	movne	r3, #0
 800bf18:	b2db      	uxtb	r3, r3
 800bf1a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800bf1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bf20:	b299      	uxth	r1, r3
 800bf22:	6a3b      	ldr	r3, [r7, #32]
 800bf24:	68db      	ldr	r3, [r3, #12]
 800bf26:	685b      	ldr	r3, [r3, #4]
 800bf28:	8bba      	ldrh	r2, [r7, #28]
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f7ff fdfa 	bl	800bb24 <tcp_output_alloc_header>
 800bf30:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800bf32:	69bb      	ldr	r3, [r7, #24]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d102      	bne.n	800bf3e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800bf38:	f04f 33ff 	mov.w	r3, #4294967295
 800bf3c:	e04c      	b.n	800bfd8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800bf3e:	69bb      	ldr	r3, [r7, #24]
 800bf40:	685b      	ldr	r3, [r3, #4]
 800bf42:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800bf44:	7ffb      	ldrb	r3, [r7, #31]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d011      	beq.n	800bf6e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	899b      	ldrh	r3, [r3, #12]
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	b21b      	sxth	r3, r3
 800bf52:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bf56:	b21c      	sxth	r4, r3
 800bf58:	2011      	movs	r0, #17
 800bf5a:	f7f8 fad3 	bl	8004504 <lwip_htons>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	b21b      	sxth	r3, r3
 800bf62:	4323      	orrs	r3, r4
 800bf64:	b21b      	sxth	r3, r3
 800bf66:	b29a      	uxth	r2, r3
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	819a      	strh	r2, [r3, #12]
 800bf6c:	e010      	b.n	800bf90 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800bf6e:	69bb      	ldr	r3, [r7, #24]
 800bf70:	685b      	ldr	r3, [r3, #4]
 800bf72:	3314      	adds	r3, #20
 800bf74:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800bf76:	6a3b      	ldr	r3, [r7, #32]
 800bf78:	6858      	ldr	r0, [r3, #4]
 800bf7a:	6a3b      	ldr	r3, [r7, #32]
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	891a      	ldrh	r2, [r3, #8]
 800bf80:	6a3b      	ldr	r3, [r7, #32]
 800bf82:	891b      	ldrh	r3, [r3, #8]
 800bf84:	1ad3      	subs	r3, r2, r3
 800bf86:	b29b      	uxth	r3, r3
 800bf88:	2201      	movs	r2, #1
 800bf8a:	6939      	ldr	r1, [r7, #16]
 800bf8c:	f7fa f802 	bl	8005f94 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800bf90:	6a3b      	ldr	r3, [r7, #32]
 800bf92:	68db      	ldr	r3, [r3, #12]
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7f8 faca 	bl	8004530 <lwip_htonl>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	3301      	adds	r3, #1
 800bfa0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	1ad3      	subs	r3, r2, r3
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	da02      	bge.n	800bfb4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	68fa      	ldr	r2, [r7, #12]
 800bfb2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bfb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfb8:	2200      	movs	r2, #0
 800bfba:	69b9      	ldr	r1, [r7, #24]
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f7ff fdef 	bl	800bba0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	3304      	adds	r3, #4
 800bfc8:	69b9      	ldr	r1, [r7, #24]
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f7ff fe26 	bl	800bc1c <tcp_output_control_segment>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bfd4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	372c      	adds	r7, #44	@ 0x2c
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd90      	pop	{r4, r7, pc}
 800bfe0:	08012c78 	.word	0x08012c78
 800bfe4:	08013470 	.word	0x08013470
 800bfe8:	08012ccc 	.word	0x08012ccc

0800bfec <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800bff4:	f7fa f8bc 	bl	8006170 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800bff8:	4b0a      	ldr	r3, [pc, #40]	@ (800c024 <tcpip_tcp_timer+0x38>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d103      	bne.n	800c008 <tcpip_tcp_timer+0x1c>
 800c000:	4b09      	ldr	r3, [pc, #36]	@ (800c028 <tcpip_tcp_timer+0x3c>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d005      	beq.n	800c014 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c008:	2200      	movs	r2, #0
 800c00a:	4908      	ldr	r1, [pc, #32]	@ (800c02c <tcpip_tcp_timer+0x40>)
 800c00c:	20fa      	movs	r0, #250	@ 0xfa
 800c00e:	f000 f8f3 	bl	800c1f8 <sys_timeout>
 800c012:	e003      	b.n	800c01c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c014:	4b06      	ldr	r3, [pc, #24]	@ (800c030 <tcpip_tcp_timer+0x44>)
 800c016:	2200      	movs	r2, #0
 800c018:	601a      	str	r2, [r3, #0]
  }
}
 800c01a:	bf00      	nop
 800c01c:	bf00      	nop
 800c01e:	3708      	adds	r7, #8
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}
 800c024:	20008354 	.word	0x20008354
 800c028:	20008358 	.word	0x20008358
 800c02c:	0800bfed 	.word	0x0800bfed
 800c030:	200083a0 	.word	0x200083a0

0800c034 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c038:	4b0a      	ldr	r3, [pc, #40]	@ (800c064 <tcp_timer_needed+0x30>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d10f      	bne.n	800c060 <tcp_timer_needed+0x2c>
 800c040:	4b09      	ldr	r3, [pc, #36]	@ (800c068 <tcp_timer_needed+0x34>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d103      	bne.n	800c050 <tcp_timer_needed+0x1c>
 800c048:	4b08      	ldr	r3, [pc, #32]	@ (800c06c <tcp_timer_needed+0x38>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d007      	beq.n	800c060 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c050:	4b04      	ldr	r3, [pc, #16]	@ (800c064 <tcp_timer_needed+0x30>)
 800c052:	2201      	movs	r2, #1
 800c054:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c056:	2200      	movs	r2, #0
 800c058:	4905      	ldr	r1, [pc, #20]	@ (800c070 <tcp_timer_needed+0x3c>)
 800c05a:	20fa      	movs	r0, #250	@ 0xfa
 800c05c:	f000 f8cc 	bl	800c1f8 <sys_timeout>
  }
}
 800c060:	bf00      	nop
 800c062:	bd80      	pop	{r7, pc}
 800c064:	200083a0 	.word	0x200083a0
 800c068:	20008354 	.word	0x20008354
 800c06c:	20008358 	.word	0x20008358
 800c070:	0800bfed 	.word	0x0800bfed

0800c074 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b086      	sub	sp, #24
 800c078:	af00      	add	r7, sp, #0
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	60b9      	str	r1, [r7, #8]
 800c07e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c080:	2006      	movs	r0, #6
 800c082:	f7f8 feb7 	bl	8004df4 <memp_malloc>
 800c086:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d109      	bne.n	800c0a2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d151      	bne.n	800c138 <sys_timeout_abs+0xc4>
 800c094:	4b2a      	ldr	r3, [pc, #168]	@ (800c140 <sys_timeout_abs+0xcc>)
 800c096:	22be      	movs	r2, #190	@ 0xbe
 800c098:	492a      	ldr	r1, [pc, #168]	@ (800c144 <sys_timeout_abs+0xd0>)
 800c09a:	482b      	ldr	r0, [pc, #172]	@ (800c148 <sys_timeout_abs+0xd4>)
 800c09c:	f004 f986 	bl	80103ac <iprintf>
    return;
 800c0a0:	e04a      	b.n	800c138 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	68ba      	ldr	r2, [r7, #8]
 800c0ac:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	68fa      	ldr	r2, [r7, #12]
 800c0b8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c0ba:	4b24      	ldr	r3, [pc, #144]	@ (800c14c <sys_timeout_abs+0xd8>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d103      	bne.n	800c0ca <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c0c2:	4a22      	ldr	r2, [pc, #136]	@ (800c14c <sys_timeout_abs+0xd8>)
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	6013      	str	r3, [r2, #0]
    return;
 800c0c8:	e037      	b.n	800c13a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	685a      	ldr	r2, [r3, #4]
 800c0ce:	4b1f      	ldr	r3, [pc, #124]	@ (800c14c <sys_timeout_abs+0xd8>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	685b      	ldr	r3, [r3, #4]
 800c0d4:	1ad3      	subs	r3, r2, r3
 800c0d6:	0fdb      	lsrs	r3, r3, #31
 800c0d8:	f003 0301 	and.w	r3, r3, #1
 800c0dc:	b2db      	uxtb	r3, r3
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d007      	beq.n	800c0f2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c0e2:	4b1a      	ldr	r3, [pc, #104]	@ (800c14c <sys_timeout_abs+0xd8>)
 800c0e4:	681a      	ldr	r2, [r3, #0]
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c0ea:	4a18      	ldr	r2, [pc, #96]	@ (800c14c <sys_timeout_abs+0xd8>)
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	6013      	str	r3, [r2, #0]
 800c0f0:	e023      	b.n	800c13a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c0f2:	4b16      	ldr	r3, [pc, #88]	@ (800c14c <sys_timeout_abs+0xd8>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	617b      	str	r3, [r7, #20]
 800c0f8:	e01a      	b.n	800c130 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d00b      	beq.n	800c11a <sys_timeout_abs+0xa6>
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	685a      	ldr	r2, [r3, #4]
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	1ad3      	subs	r3, r2, r3
 800c10e:	0fdb      	lsrs	r3, r3, #31
 800c110:	f003 0301 	and.w	r3, r3, #1
 800c114:	b2db      	uxtb	r3, r3
 800c116:	2b00      	cmp	r3, #0
 800c118:	d007      	beq.n	800c12a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	681a      	ldr	r2, [r3, #0]
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	693a      	ldr	r2, [r7, #16]
 800c126:	601a      	str	r2, [r3, #0]
        break;
 800c128:	e007      	b.n	800c13a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	617b      	str	r3, [r7, #20]
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d1e1      	bne.n	800c0fa <sys_timeout_abs+0x86>
 800c136:	e000      	b.n	800c13a <sys_timeout_abs+0xc6>
    return;
 800c138:	bf00      	nop
      }
    }
  }
}
 800c13a:	3718      	adds	r7, #24
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}
 800c140:	08013494 	.word	0x08013494
 800c144:	080134c8 	.word	0x080134c8
 800c148:	08013508 	.word	0x08013508
 800c14c:	20008398 	.word	0x20008398

0800c150 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b086      	sub	sp, #24
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	685b      	ldr	r3, [r3, #4]
 800c160:	4798      	blx	r3

  now = sys_now();
 800c162:	f7f7 ffcf 	bl	8004104 <sys_now>
 800c166:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	681a      	ldr	r2, [r3, #0]
 800c16c:	4b0f      	ldr	r3, [pc, #60]	@ (800c1ac <lwip_cyclic_timer+0x5c>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4413      	add	r3, r2
 800c172:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c174:	68fa      	ldr	r2, [r7, #12]
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	1ad3      	subs	r3, r2, r3
 800c17a:	0fdb      	lsrs	r3, r3, #31
 800c17c:	f003 0301 	and.w	r3, r3, #1
 800c180:	b2db      	uxtb	r3, r3
 800c182:	2b00      	cmp	r3, #0
 800c184:	d009      	beq.n	800c19a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	681a      	ldr	r2, [r3, #0]
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	4413      	add	r3, r2
 800c18e:	687a      	ldr	r2, [r7, #4]
 800c190:	4907      	ldr	r1, [pc, #28]	@ (800c1b0 <lwip_cyclic_timer+0x60>)
 800c192:	4618      	mov	r0, r3
 800c194:	f7ff ff6e 	bl	800c074 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c198:	e004      	b.n	800c1a4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	4904      	ldr	r1, [pc, #16]	@ (800c1b0 <lwip_cyclic_timer+0x60>)
 800c19e:	68f8      	ldr	r0, [r7, #12]
 800c1a0:	f7ff ff68 	bl	800c074 <sys_timeout_abs>
}
 800c1a4:	bf00      	nop
 800c1a6:	3718      	adds	r7, #24
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}
 800c1ac:	2000839c 	.word	0x2000839c
 800c1b0:	0800c151 	.word	0x0800c151

0800c1b4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b082      	sub	sp, #8
 800c1b8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	607b      	str	r3, [r7, #4]
 800c1be:	e00e      	b.n	800c1de <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c1c0:	4a0b      	ldr	r2, [pc, #44]	@ (800c1f0 <sys_timeouts_init+0x3c>)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	00db      	lsls	r3, r3, #3
 800c1cc:	4a08      	ldr	r2, [pc, #32]	@ (800c1f0 <sys_timeouts_init+0x3c>)
 800c1ce:	4413      	add	r3, r2
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	4908      	ldr	r1, [pc, #32]	@ (800c1f4 <sys_timeouts_init+0x40>)
 800c1d4:	f000 f810 	bl	800c1f8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	3301      	adds	r3, #1
 800c1dc:	607b      	str	r3, [r7, #4]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2b02      	cmp	r3, #2
 800c1e2:	d9ed      	bls.n	800c1c0 <sys_timeouts_init+0xc>
  }
}
 800c1e4:	bf00      	nop
 800c1e6:	bf00      	nop
 800c1e8:	3708      	adds	r7, #8
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	0801419c 	.word	0x0801419c
 800c1f4:	0800c151 	.word	0x0800c151

0800c1f8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b086      	sub	sp, #24
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	60b9      	str	r1, [r7, #8]
 800c202:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c20a:	d306      	bcc.n	800c21a <sys_timeout+0x22>
 800c20c:	4b0a      	ldr	r3, [pc, #40]	@ (800c238 <sys_timeout+0x40>)
 800c20e:	f240 1229 	movw	r2, #297	@ 0x129
 800c212:	490a      	ldr	r1, [pc, #40]	@ (800c23c <sys_timeout+0x44>)
 800c214:	480a      	ldr	r0, [pc, #40]	@ (800c240 <sys_timeout+0x48>)
 800c216:	f004 f8c9 	bl	80103ac <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c21a:	f7f7 ff73 	bl	8004104 <sys_now>
 800c21e:	4602      	mov	r2, r0
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	4413      	add	r3, r2
 800c224:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	68b9      	ldr	r1, [r7, #8]
 800c22a:	6978      	ldr	r0, [r7, #20]
 800c22c:	f7ff ff22 	bl	800c074 <sys_timeout_abs>
#endif
}
 800c230:	bf00      	nop
 800c232:	3718      	adds	r7, #24
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}
 800c238:	08013494 	.word	0x08013494
 800c23c:	08013530 	.word	0x08013530
 800c240:	08013508 	.word	0x08013508

0800c244 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c24a:	f7f7 ff5b 	bl	8004104 <sys_now>
 800c24e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c250:	4b1a      	ldr	r3, [pc, #104]	@ (800c2bc <sys_check_timeouts+0x78>)
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	b2db      	uxtb	r3, r3
 800c256:	2b00      	cmp	r3, #0
 800c258:	d001      	beq.n	800c25e <sys_check_timeouts+0x1a>
 800c25a:	f7f9 f977 	bl	800554c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c25e:	4b18      	ldr	r3, [pc, #96]	@ (800c2c0 <sys_check_timeouts+0x7c>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d022      	beq.n	800c2b0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	68fa      	ldr	r2, [r7, #12]
 800c270:	1ad3      	subs	r3, r2, r3
 800c272:	0fdb      	lsrs	r3, r3, #31
 800c274:	f003 0301 	and.w	r3, r3, #1
 800c278:	b2db      	uxtb	r3, r3
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d11a      	bne.n	800c2b4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4a0f      	ldr	r2, [pc, #60]	@ (800c2c0 <sys_check_timeouts+0x7c>)
 800c284:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	689b      	ldr	r3, [r3, #8]
 800c28a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	68db      	ldr	r3, [r3, #12]
 800c290:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	4a0b      	ldr	r2, [pc, #44]	@ (800c2c4 <sys_check_timeouts+0x80>)
 800c298:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c29a:	68b9      	ldr	r1, [r7, #8]
 800c29c:	2006      	movs	r0, #6
 800c29e:	f7f8 fe19 	bl	8004ed4 <memp_free>
    if (handler != NULL) {
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d0d3      	beq.n	800c250 <sys_check_timeouts+0xc>
      handler(arg);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6838      	ldr	r0, [r7, #0]
 800c2ac:	4798      	blx	r3
  do {
 800c2ae:	e7cf      	b.n	800c250 <sys_check_timeouts+0xc>
      return;
 800c2b0:	bf00      	nop
 800c2b2:	e000      	b.n	800c2b6 <sys_check_timeouts+0x72>
      return;
 800c2b4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c2b6:	3710      	adds	r7, #16
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}
 800c2bc:	20008345 	.word	0x20008345
 800c2c0:	20008398 	.word	0x20008398
 800c2c4:	2000839c 	.word	0x2000839c

0800c2c8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c2cc:	f003 ff5c 	bl	8010188 <rand>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	b29b      	uxth	r3, r3
 800c2d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800c2de:	b29a      	uxth	r2, r3
 800c2e0:	4b01      	ldr	r3, [pc, #4]	@ (800c2e8 <udp_init+0x20>)
 800c2e2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c2e4:	bf00      	nop
 800c2e6:	bd80      	pop	{r7, pc}
 800c2e8:	20000028 	.word	0x20000028

0800c2ec <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b084      	sub	sp, #16
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	60f8      	str	r0, [r7, #12]
 800c2f4:	60b9      	str	r1, [r7, #8]
 800c2f6:	4613      	mov	r3, r2
 800c2f8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d105      	bne.n	800c30c <udp_input_local_match+0x20>
 800c300:	4b27      	ldr	r3, [pc, #156]	@ (800c3a0 <udp_input_local_match+0xb4>)
 800c302:	2287      	movs	r2, #135	@ 0x87
 800c304:	4927      	ldr	r1, [pc, #156]	@ (800c3a4 <udp_input_local_match+0xb8>)
 800c306:	4828      	ldr	r0, [pc, #160]	@ (800c3a8 <udp_input_local_match+0xbc>)
 800c308:	f004 f850 	bl	80103ac <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d105      	bne.n	800c31e <udp_input_local_match+0x32>
 800c312:	4b23      	ldr	r3, [pc, #140]	@ (800c3a0 <udp_input_local_match+0xb4>)
 800c314:	2288      	movs	r2, #136	@ 0x88
 800c316:	4925      	ldr	r1, [pc, #148]	@ (800c3ac <udp_input_local_match+0xc0>)
 800c318:	4823      	ldr	r0, [pc, #140]	@ (800c3a8 <udp_input_local_match+0xbc>)
 800c31a:	f004 f847 	bl	80103ac <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	7a1b      	ldrb	r3, [r3, #8]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d00b      	beq.n	800c33e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	7a1a      	ldrb	r2, [r3, #8]
 800c32a:	4b21      	ldr	r3, [pc, #132]	@ (800c3b0 <udp_input_local_match+0xc4>)
 800c32c:	685b      	ldr	r3, [r3, #4]
 800c32e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c332:	3301      	adds	r3, #1
 800c334:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c336:	429a      	cmp	r2, r3
 800c338:	d001      	beq.n	800c33e <udp_input_local_match+0x52>
    return 0;
 800c33a:	2300      	movs	r3, #0
 800c33c:	e02b      	b.n	800c396 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c33e:	79fb      	ldrb	r3, [r7, #7]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d018      	beq.n	800c376 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d013      	beq.n	800c372 <udp_input_local_match+0x86>
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d00f      	beq.n	800c372 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c352:	4b17      	ldr	r3, [pc, #92]	@ (800c3b0 <udp_input_local_match+0xc4>)
 800c354:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c35a:	d00a      	beq.n	800c372 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	681a      	ldr	r2, [r3, #0]
 800c360:	4b13      	ldr	r3, [pc, #76]	@ (800c3b0 <udp_input_local_match+0xc4>)
 800c362:	695b      	ldr	r3, [r3, #20]
 800c364:	405a      	eors	r2, r3
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	3308      	adds	r3, #8
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d110      	bne.n	800c394 <udp_input_local_match+0xa8>
          return 1;
 800c372:	2301      	movs	r3, #1
 800c374:	e00f      	b.n	800c396 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d009      	beq.n	800c390 <udp_input_local_match+0xa4>
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d005      	beq.n	800c390 <udp_input_local_match+0xa4>
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681a      	ldr	r2, [r3, #0]
 800c388:	4b09      	ldr	r3, [pc, #36]	@ (800c3b0 <udp_input_local_match+0xc4>)
 800c38a:	695b      	ldr	r3, [r3, #20]
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d101      	bne.n	800c394 <udp_input_local_match+0xa8>
        return 1;
 800c390:	2301      	movs	r3, #1
 800c392:	e000      	b.n	800c396 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c394:	2300      	movs	r3, #0
}
 800c396:	4618      	mov	r0, r3
 800c398:	3710      	adds	r7, #16
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	0801357c 	.word	0x0801357c
 800c3a4:	080135ac 	.word	0x080135ac
 800c3a8:	080135d0 	.word	0x080135d0
 800c3ac:	080135f8 	.word	0x080135f8
 800c3b0:	20004dd8 	.word	0x20004dd8

0800c3b4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c3b4:	b590      	push	{r4, r7, lr}
 800c3b6:	b08d      	sub	sp, #52	@ 0x34
 800c3b8:	af02      	add	r7, sp, #8
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d105      	bne.n	800c3d4 <udp_input+0x20>
 800c3c8:	4b7c      	ldr	r3, [pc, #496]	@ (800c5bc <udp_input+0x208>)
 800c3ca:	22cf      	movs	r2, #207	@ 0xcf
 800c3cc:	497c      	ldr	r1, [pc, #496]	@ (800c5c0 <udp_input+0x20c>)
 800c3ce:	487d      	ldr	r0, [pc, #500]	@ (800c5c4 <udp_input+0x210>)
 800c3d0:	f003 ffec 	bl	80103ac <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d105      	bne.n	800c3e6 <udp_input+0x32>
 800c3da:	4b78      	ldr	r3, [pc, #480]	@ (800c5bc <udp_input+0x208>)
 800c3dc:	22d0      	movs	r2, #208	@ 0xd0
 800c3de:	497a      	ldr	r1, [pc, #488]	@ (800c5c8 <udp_input+0x214>)
 800c3e0:	4878      	ldr	r0, [pc, #480]	@ (800c5c4 <udp_input+0x210>)
 800c3e2:	f003 ffe3 	bl	80103ac <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	895b      	ldrh	r3, [r3, #10]
 800c3ea:	2b07      	cmp	r3, #7
 800c3ec:	d803      	bhi.n	800c3f6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f7f9 fbe6 	bl	8005bc0 <pbuf_free>
    goto end;
 800c3f4:	e0de      	b.n	800c5b4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	685b      	ldr	r3, [r3, #4]
 800c3fa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c3fc:	4b73      	ldr	r3, [pc, #460]	@ (800c5cc <udp_input+0x218>)
 800c3fe:	695b      	ldr	r3, [r3, #20]
 800c400:	4a72      	ldr	r2, [pc, #456]	@ (800c5cc <udp_input+0x218>)
 800c402:	6812      	ldr	r2, [r2, #0]
 800c404:	4611      	mov	r1, r2
 800c406:	4618      	mov	r0, r3
 800c408:	f001 fc88 	bl	800dd1c <ip4_addr_isbroadcast_u32>
 800c40c:	4603      	mov	r3, r0
 800c40e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c410:	697b      	ldr	r3, [r7, #20]
 800c412:	881b      	ldrh	r3, [r3, #0]
 800c414:	b29b      	uxth	r3, r3
 800c416:	4618      	mov	r0, r3
 800c418:	f7f8 f874 	bl	8004504 <lwip_htons>
 800c41c:	4603      	mov	r3, r0
 800c41e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	885b      	ldrh	r3, [r3, #2]
 800c424:	b29b      	uxth	r3, r3
 800c426:	4618      	mov	r0, r3
 800c428:	f7f8 f86c 	bl	8004504 <lwip_htons>
 800c42c:	4603      	mov	r3, r0
 800c42e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c430:	2300      	movs	r3, #0
 800c432:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800c434:	2300      	movs	r3, #0
 800c436:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c438:	2300      	movs	r3, #0
 800c43a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c43c:	4b64      	ldr	r3, [pc, #400]	@ (800c5d0 <udp_input+0x21c>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	627b      	str	r3, [r7, #36]	@ 0x24
 800c442:	e054      	b.n	800c4ee <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c446:	8a5b      	ldrh	r3, [r3, #18]
 800c448:	89fa      	ldrh	r2, [r7, #14]
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d14a      	bne.n	800c4e4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c44e:	7cfb      	ldrb	r3, [r7, #19]
 800c450:	461a      	mov	r2, r3
 800c452:	6839      	ldr	r1, [r7, #0]
 800c454:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c456:	f7ff ff49 	bl	800c2ec <udp_input_local_match>
 800c45a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d041      	beq.n	800c4e4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c462:	7c1b      	ldrb	r3, [r3, #16]
 800c464:	f003 0304 	and.w	r3, r3, #4
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d11d      	bne.n	800c4a8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c46c:	69fb      	ldr	r3, [r7, #28]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d102      	bne.n	800c478 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c474:	61fb      	str	r3, [r7, #28]
 800c476:	e017      	b.n	800c4a8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c478:	7cfb      	ldrb	r3, [r7, #19]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d014      	beq.n	800c4a8 <udp_input+0xf4>
 800c47e:	4b53      	ldr	r3, [pc, #332]	@ (800c5cc <udp_input+0x218>)
 800c480:	695b      	ldr	r3, [r3, #20]
 800c482:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c486:	d10f      	bne.n	800c4a8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c488:	69fb      	ldr	r3, [r7, #28]
 800c48a:	681a      	ldr	r2, [r3, #0]
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	3304      	adds	r3, #4
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	429a      	cmp	r2, r3
 800c494:	d008      	beq.n	800c4a8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c498:	681a      	ldr	r2, [r3, #0]
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	3304      	adds	r3, #4
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d101      	bne.n	800c4a8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4a6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4aa:	8a9b      	ldrh	r3, [r3, #20]
 800c4ac:	8a3a      	ldrh	r2, [r7, #16]
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d118      	bne.n	800c4e4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4b4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d005      	beq.n	800c4c6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4bc:	685a      	ldr	r2, [r3, #4]
 800c4be:	4b43      	ldr	r3, [pc, #268]	@ (800c5cc <udp_input+0x218>)
 800c4c0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d10e      	bne.n	800c4e4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c4c6:	6a3b      	ldr	r3, [r7, #32]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d014      	beq.n	800c4f6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c4cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ce:	68da      	ldr	r2, [r3, #12]
 800c4d0:	6a3b      	ldr	r3, [r7, #32]
 800c4d2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c4d4:	4b3e      	ldr	r3, [pc, #248]	@ (800c5d0 <udp_input+0x21c>)
 800c4d6:	681a      	ldr	r2, [r3, #0]
 800c4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4da:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c4dc:	4a3c      	ldr	r2, [pc, #240]	@ (800c5d0 <udp_input+0x21c>)
 800c4de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c4e2:	e008      	b.n	800c4f6 <udp_input+0x142>
      }
    }

    prev = pcb;
 800c4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ea:	68db      	ldr	r3, [r3, #12]
 800c4ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800c4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d1a7      	bne.n	800c444 <udp_input+0x90>
 800c4f4:	e000      	b.n	800c4f8 <udp_input+0x144>
        break;
 800c4f6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d101      	bne.n	800c502 <udp_input+0x14e>
    pcb = uncon_pcb;
 800c4fe:	69fb      	ldr	r3, [r7, #28]
 800c500:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c504:	2b00      	cmp	r3, #0
 800c506:	d002      	beq.n	800c50e <udp_input+0x15a>
    for_us = 1;
 800c508:	2301      	movs	r3, #1
 800c50a:	76fb      	strb	r3, [r7, #27]
 800c50c:	e00a      	b.n	800c524 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	3304      	adds	r3, #4
 800c512:	681a      	ldr	r2, [r3, #0]
 800c514:	4b2d      	ldr	r3, [pc, #180]	@ (800c5cc <udp_input+0x218>)
 800c516:	695b      	ldr	r3, [r3, #20]
 800c518:	429a      	cmp	r2, r3
 800c51a:	bf0c      	ite	eq
 800c51c:	2301      	moveq	r3, #1
 800c51e:	2300      	movne	r3, #0
 800c520:	b2db      	uxtb	r3, r3
 800c522:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c524:	7efb      	ldrb	r3, [r7, #27]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d041      	beq.n	800c5ae <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c52a:	2108      	movs	r1, #8
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f7f9 fac1 	bl	8005ab4 <pbuf_remove_header>
 800c532:	4603      	mov	r3, r0
 800c534:	2b00      	cmp	r3, #0
 800c536:	d00a      	beq.n	800c54e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c538:	4b20      	ldr	r3, [pc, #128]	@ (800c5bc <udp_input+0x208>)
 800c53a:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800c53e:	4925      	ldr	r1, [pc, #148]	@ (800c5d4 <udp_input+0x220>)
 800c540:	4820      	ldr	r0, [pc, #128]	@ (800c5c4 <udp_input+0x210>)
 800c542:	f003 ff33 	bl	80103ac <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f7f9 fb3a 	bl	8005bc0 <pbuf_free>
      goto end;
 800c54c:	e032      	b.n	800c5b4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c550:	2b00      	cmp	r3, #0
 800c552:	d012      	beq.n	800c57a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c556:	699b      	ldr	r3, [r3, #24]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d00a      	beq.n	800c572 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c55e:	699c      	ldr	r4, [r3, #24]
 800c560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c562:	69d8      	ldr	r0, [r3, #28]
 800c564:	8a3b      	ldrh	r3, [r7, #16]
 800c566:	9300      	str	r3, [sp, #0]
 800c568:	4b1b      	ldr	r3, [pc, #108]	@ (800c5d8 <udp_input+0x224>)
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c56e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c570:	e021      	b.n	800c5b6 <udp_input+0x202>
        pbuf_free(p);
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f7f9 fb24 	bl	8005bc0 <pbuf_free>
        goto end;
 800c578:	e01c      	b.n	800c5b4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c57a:	7cfb      	ldrb	r3, [r7, #19]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d112      	bne.n	800c5a6 <udp_input+0x1f2>
 800c580:	4b12      	ldr	r3, [pc, #72]	@ (800c5cc <udp_input+0x218>)
 800c582:	695b      	ldr	r3, [r3, #20]
 800c584:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c588:	2be0      	cmp	r3, #224	@ 0xe0
 800c58a:	d00c      	beq.n	800c5a6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c58c:	4b0f      	ldr	r3, [pc, #60]	@ (800c5cc <udp_input+0x218>)
 800c58e:	899b      	ldrh	r3, [r3, #12]
 800c590:	3308      	adds	r3, #8
 800c592:	b29b      	uxth	r3, r3
 800c594:	b21b      	sxth	r3, r3
 800c596:	4619      	mov	r1, r3
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f7f9 fafe 	bl	8005b9a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c59e:	2103      	movs	r1, #3
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f001 f89b 	bl	800d6dc <icmp_dest_unreach>
      pbuf_free(p);
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f7f9 fb0a 	bl	8005bc0 <pbuf_free>
  return;
 800c5ac:	e003      	b.n	800c5b6 <udp_input+0x202>
    pbuf_free(p);
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f7f9 fb06 	bl	8005bc0 <pbuf_free>
  return;
 800c5b4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c5b6:	372c      	adds	r7, #44	@ 0x2c
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd90      	pop	{r4, r7, pc}
 800c5bc:	0801357c 	.word	0x0801357c
 800c5c0:	08013620 	.word	0x08013620
 800c5c4:	080135d0 	.word	0x080135d0
 800c5c8:	08013638 	.word	0x08013638
 800c5cc:	20004dd8 	.word	0x20004dd8
 800c5d0:	200083a4 	.word	0x200083a4
 800c5d4:	08013654 	.word	0x08013654
 800c5d8:	20004de8 	.word	0x20004de8

0800c5dc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b085      	sub	sp, #20
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d01e      	beq.n	800c62a <udp_netif_ip_addr_changed+0x4e>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d01a      	beq.n	800c62a <udp_netif_ip_addr_changed+0x4e>
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d017      	beq.n	800c62a <udp_netif_ip_addr_changed+0x4e>
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d013      	beq.n	800c62a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c602:	4b0d      	ldr	r3, [pc, #52]	@ (800c638 <udp_netif_ip_addr_changed+0x5c>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	60fb      	str	r3, [r7, #12]
 800c608:	e00c      	b.n	800c624 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	681a      	ldr	r2, [r3, #0]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	429a      	cmp	r2, r3
 800c614:	d103      	bne.n	800c61e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	68db      	ldr	r3, [r3, #12]
 800c622:	60fb      	str	r3, [r7, #12]
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d1ef      	bne.n	800c60a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c62a:	bf00      	nop
 800c62c:	3714      	adds	r7, #20
 800c62e:	46bd      	mov	sp, r7
 800c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c634:	4770      	bx	lr
 800c636:	bf00      	nop
 800c638:	200083a4 	.word	0x200083a4

0800c63c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b082      	sub	sp, #8
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c644:	4915      	ldr	r1, [pc, #84]	@ (800c69c <etharp_free_entry+0x60>)
 800c646:	687a      	ldr	r2, [r7, #4]
 800c648:	4613      	mov	r3, r2
 800c64a:	005b      	lsls	r3, r3, #1
 800c64c:	4413      	add	r3, r2
 800c64e:	00db      	lsls	r3, r3, #3
 800c650:	440b      	add	r3, r1
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d013      	beq.n	800c680 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c658:	4910      	ldr	r1, [pc, #64]	@ (800c69c <etharp_free_entry+0x60>)
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	4613      	mov	r3, r2
 800c65e:	005b      	lsls	r3, r3, #1
 800c660:	4413      	add	r3, r2
 800c662:	00db      	lsls	r3, r3, #3
 800c664:	440b      	add	r3, r1
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	4618      	mov	r0, r3
 800c66a:	f7f9 faa9 	bl	8005bc0 <pbuf_free>
    arp_table[i].q = NULL;
 800c66e:	490b      	ldr	r1, [pc, #44]	@ (800c69c <etharp_free_entry+0x60>)
 800c670:	687a      	ldr	r2, [r7, #4]
 800c672:	4613      	mov	r3, r2
 800c674:	005b      	lsls	r3, r3, #1
 800c676:	4413      	add	r3, r2
 800c678:	00db      	lsls	r3, r3, #3
 800c67a:	440b      	add	r3, r1
 800c67c:	2200      	movs	r2, #0
 800c67e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c680:	4906      	ldr	r1, [pc, #24]	@ (800c69c <etharp_free_entry+0x60>)
 800c682:	687a      	ldr	r2, [r7, #4]
 800c684:	4613      	mov	r3, r2
 800c686:	005b      	lsls	r3, r3, #1
 800c688:	4413      	add	r3, r2
 800c68a:	00db      	lsls	r3, r3, #3
 800c68c:	440b      	add	r3, r1
 800c68e:	3314      	adds	r3, #20
 800c690:	2200      	movs	r2, #0
 800c692:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c694:	bf00      	nop
 800c696:	3708      	adds	r7, #8
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}
 800c69c:	200083a8 	.word	0x200083a8

0800c6a0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	607b      	str	r3, [r7, #4]
 800c6aa:	e096      	b.n	800c7da <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c6ac:	494f      	ldr	r1, [pc, #316]	@ (800c7ec <etharp_tmr+0x14c>)
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	4613      	mov	r3, r2
 800c6b2:	005b      	lsls	r3, r3, #1
 800c6b4:	4413      	add	r3, r2
 800c6b6:	00db      	lsls	r3, r3, #3
 800c6b8:	440b      	add	r3, r1
 800c6ba:	3314      	adds	r3, #20
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c6c0:	78fb      	ldrb	r3, [r7, #3]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	f000 8086 	beq.w	800c7d4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c6c8:	4948      	ldr	r1, [pc, #288]	@ (800c7ec <etharp_tmr+0x14c>)
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	4613      	mov	r3, r2
 800c6ce:	005b      	lsls	r3, r3, #1
 800c6d0:	4413      	add	r3, r2
 800c6d2:	00db      	lsls	r3, r3, #3
 800c6d4:	440b      	add	r3, r1
 800c6d6:	3312      	adds	r3, #18
 800c6d8:	881b      	ldrh	r3, [r3, #0]
 800c6da:	3301      	adds	r3, #1
 800c6dc:	b298      	uxth	r0, r3
 800c6de:	4943      	ldr	r1, [pc, #268]	@ (800c7ec <etharp_tmr+0x14c>)
 800c6e0:	687a      	ldr	r2, [r7, #4]
 800c6e2:	4613      	mov	r3, r2
 800c6e4:	005b      	lsls	r3, r3, #1
 800c6e6:	4413      	add	r3, r2
 800c6e8:	00db      	lsls	r3, r3, #3
 800c6ea:	440b      	add	r3, r1
 800c6ec:	3312      	adds	r3, #18
 800c6ee:	4602      	mov	r2, r0
 800c6f0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c6f2:	493e      	ldr	r1, [pc, #248]	@ (800c7ec <etharp_tmr+0x14c>)
 800c6f4:	687a      	ldr	r2, [r7, #4]
 800c6f6:	4613      	mov	r3, r2
 800c6f8:	005b      	lsls	r3, r3, #1
 800c6fa:	4413      	add	r3, r2
 800c6fc:	00db      	lsls	r3, r3, #3
 800c6fe:	440b      	add	r3, r1
 800c700:	3312      	adds	r3, #18
 800c702:	881b      	ldrh	r3, [r3, #0]
 800c704:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800c708:	d215      	bcs.n	800c736 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c70a:	4938      	ldr	r1, [pc, #224]	@ (800c7ec <etharp_tmr+0x14c>)
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	4613      	mov	r3, r2
 800c710:	005b      	lsls	r3, r3, #1
 800c712:	4413      	add	r3, r2
 800c714:	00db      	lsls	r3, r3, #3
 800c716:	440b      	add	r3, r1
 800c718:	3314      	adds	r3, #20
 800c71a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	d10e      	bne.n	800c73e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c720:	4932      	ldr	r1, [pc, #200]	@ (800c7ec <etharp_tmr+0x14c>)
 800c722:	687a      	ldr	r2, [r7, #4]
 800c724:	4613      	mov	r3, r2
 800c726:	005b      	lsls	r3, r3, #1
 800c728:	4413      	add	r3, r2
 800c72a:	00db      	lsls	r3, r3, #3
 800c72c:	440b      	add	r3, r1
 800c72e:	3312      	adds	r3, #18
 800c730:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c732:	2b04      	cmp	r3, #4
 800c734:	d903      	bls.n	800c73e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f7ff ff80 	bl	800c63c <etharp_free_entry>
 800c73c:	e04a      	b.n	800c7d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c73e:	492b      	ldr	r1, [pc, #172]	@ (800c7ec <etharp_tmr+0x14c>)
 800c740:	687a      	ldr	r2, [r7, #4]
 800c742:	4613      	mov	r3, r2
 800c744:	005b      	lsls	r3, r3, #1
 800c746:	4413      	add	r3, r2
 800c748:	00db      	lsls	r3, r3, #3
 800c74a:	440b      	add	r3, r1
 800c74c:	3314      	adds	r3, #20
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	2b03      	cmp	r3, #3
 800c752:	d10a      	bne.n	800c76a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c754:	4925      	ldr	r1, [pc, #148]	@ (800c7ec <etharp_tmr+0x14c>)
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	4613      	mov	r3, r2
 800c75a:	005b      	lsls	r3, r3, #1
 800c75c:	4413      	add	r3, r2
 800c75e:	00db      	lsls	r3, r3, #3
 800c760:	440b      	add	r3, r1
 800c762:	3314      	adds	r3, #20
 800c764:	2204      	movs	r2, #4
 800c766:	701a      	strb	r2, [r3, #0]
 800c768:	e034      	b.n	800c7d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c76a:	4920      	ldr	r1, [pc, #128]	@ (800c7ec <etharp_tmr+0x14c>)
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	4613      	mov	r3, r2
 800c770:	005b      	lsls	r3, r3, #1
 800c772:	4413      	add	r3, r2
 800c774:	00db      	lsls	r3, r3, #3
 800c776:	440b      	add	r3, r1
 800c778:	3314      	adds	r3, #20
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	2b04      	cmp	r3, #4
 800c77e:	d10a      	bne.n	800c796 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c780:	491a      	ldr	r1, [pc, #104]	@ (800c7ec <etharp_tmr+0x14c>)
 800c782:	687a      	ldr	r2, [r7, #4]
 800c784:	4613      	mov	r3, r2
 800c786:	005b      	lsls	r3, r3, #1
 800c788:	4413      	add	r3, r2
 800c78a:	00db      	lsls	r3, r3, #3
 800c78c:	440b      	add	r3, r1
 800c78e:	3314      	adds	r3, #20
 800c790:	2202      	movs	r2, #2
 800c792:	701a      	strb	r2, [r3, #0]
 800c794:	e01e      	b.n	800c7d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c796:	4915      	ldr	r1, [pc, #84]	@ (800c7ec <etharp_tmr+0x14c>)
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	4613      	mov	r3, r2
 800c79c:	005b      	lsls	r3, r3, #1
 800c79e:	4413      	add	r3, r2
 800c7a0:	00db      	lsls	r3, r3, #3
 800c7a2:	440b      	add	r3, r1
 800c7a4:	3314      	adds	r3, #20
 800c7a6:	781b      	ldrb	r3, [r3, #0]
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	d113      	bne.n	800c7d4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c7ac:	490f      	ldr	r1, [pc, #60]	@ (800c7ec <etharp_tmr+0x14c>)
 800c7ae:	687a      	ldr	r2, [r7, #4]
 800c7b0:	4613      	mov	r3, r2
 800c7b2:	005b      	lsls	r3, r3, #1
 800c7b4:	4413      	add	r3, r2
 800c7b6:	00db      	lsls	r3, r3, #3
 800c7b8:	440b      	add	r3, r1
 800c7ba:	3308      	adds	r3, #8
 800c7bc:	6818      	ldr	r0, [r3, #0]
 800c7be:	687a      	ldr	r2, [r7, #4]
 800c7c0:	4613      	mov	r3, r2
 800c7c2:	005b      	lsls	r3, r3, #1
 800c7c4:	4413      	add	r3, r2
 800c7c6:	00db      	lsls	r3, r3, #3
 800c7c8:	4a08      	ldr	r2, [pc, #32]	@ (800c7ec <etharp_tmr+0x14c>)
 800c7ca:	4413      	add	r3, r2
 800c7cc:	3304      	adds	r3, #4
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	f000 fe6e 	bl	800d4b0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	3301      	adds	r3, #1
 800c7d8:	607b      	str	r3, [r7, #4]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2b09      	cmp	r3, #9
 800c7de:	f77f af65 	ble.w	800c6ac <etharp_tmr+0xc>
      }
    }
  }
}
 800c7e2:	bf00      	nop
 800c7e4:	bf00      	nop
 800c7e6:	3708      	adds	r7, #8
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}
 800c7ec:	200083a8 	.word	0x200083a8

0800c7f0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b08a      	sub	sp, #40	@ 0x28
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	60f8      	str	r0, [r7, #12]
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	607a      	str	r2, [r7, #4]
 800c7fc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c7fe:	230a      	movs	r3, #10
 800c800:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c802:	230a      	movs	r3, #10
 800c804:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c806:	230a      	movs	r3, #10
 800c808:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800c80a:	2300      	movs	r3, #0
 800c80c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c80e:	230a      	movs	r3, #10
 800c810:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c812:	2300      	movs	r3, #0
 800c814:	83bb      	strh	r3, [r7, #28]
 800c816:	2300      	movs	r3, #0
 800c818:	837b      	strh	r3, [r7, #26]
 800c81a:	2300      	movs	r3, #0
 800c81c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c81e:	2300      	movs	r3, #0
 800c820:	843b      	strh	r3, [r7, #32]
 800c822:	e0ae      	b.n	800c982 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c824:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c828:	49a6      	ldr	r1, [pc, #664]	@ (800cac4 <etharp_find_entry+0x2d4>)
 800c82a:	4613      	mov	r3, r2
 800c82c:	005b      	lsls	r3, r3, #1
 800c82e:	4413      	add	r3, r2
 800c830:	00db      	lsls	r3, r3, #3
 800c832:	440b      	add	r3, r1
 800c834:	3314      	adds	r3, #20
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c83a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c83e:	2b0a      	cmp	r3, #10
 800c840:	d105      	bne.n	800c84e <etharp_find_entry+0x5e>
 800c842:	7dfb      	ldrb	r3, [r7, #23]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d102      	bne.n	800c84e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c848:	8c3b      	ldrh	r3, [r7, #32]
 800c84a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c84c:	e095      	b.n	800c97a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c84e:	7dfb      	ldrb	r3, [r7, #23]
 800c850:	2b00      	cmp	r3, #0
 800c852:	f000 8092 	beq.w	800c97a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c856:	7dfb      	ldrb	r3, [r7, #23]
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d009      	beq.n	800c870 <etharp_find_entry+0x80>
 800c85c:	7dfb      	ldrb	r3, [r7, #23]
 800c85e:	2b01      	cmp	r3, #1
 800c860:	d806      	bhi.n	800c870 <etharp_find_entry+0x80>
 800c862:	4b99      	ldr	r3, [pc, #612]	@ (800cac8 <etharp_find_entry+0x2d8>)
 800c864:	f240 1223 	movw	r2, #291	@ 0x123
 800c868:	4998      	ldr	r1, [pc, #608]	@ (800cacc <etharp_find_entry+0x2dc>)
 800c86a:	4899      	ldr	r0, [pc, #612]	@ (800cad0 <etharp_find_entry+0x2e0>)
 800c86c:	f003 fd9e 	bl	80103ac <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d020      	beq.n	800c8b8 <etharp_find_entry+0xc8>
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	6819      	ldr	r1, [r3, #0]
 800c87a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c87e:	4891      	ldr	r0, [pc, #580]	@ (800cac4 <etharp_find_entry+0x2d4>)
 800c880:	4613      	mov	r3, r2
 800c882:	005b      	lsls	r3, r3, #1
 800c884:	4413      	add	r3, r2
 800c886:	00db      	lsls	r3, r3, #3
 800c888:	4403      	add	r3, r0
 800c88a:	3304      	adds	r3, #4
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	4299      	cmp	r1, r3
 800c890:	d112      	bne.n	800c8b8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d00c      	beq.n	800c8b2 <etharp_find_entry+0xc2>
 800c898:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c89c:	4989      	ldr	r1, [pc, #548]	@ (800cac4 <etharp_find_entry+0x2d4>)
 800c89e:	4613      	mov	r3, r2
 800c8a0:	005b      	lsls	r3, r3, #1
 800c8a2:	4413      	add	r3, r2
 800c8a4:	00db      	lsls	r3, r3, #3
 800c8a6:	440b      	add	r3, r1
 800c8a8:	3308      	adds	r3, #8
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	687a      	ldr	r2, [r7, #4]
 800c8ae:	429a      	cmp	r2, r3
 800c8b0:	d102      	bne.n	800c8b8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c8b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c8b6:	e100      	b.n	800caba <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c8b8:	7dfb      	ldrb	r3, [r7, #23]
 800c8ba:	2b01      	cmp	r3, #1
 800c8bc:	d140      	bne.n	800c940 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c8be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c8c2:	4980      	ldr	r1, [pc, #512]	@ (800cac4 <etharp_find_entry+0x2d4>)
 800c8c4:	4613      	mov	r3, r2
 800c8c6:	005b      	lsls	r3, r3, #1
 800c8c8:	4413      	add	r3, r2
 800c8ca:	00db      	lsls	r3, r3, #3
 800c8cc:	440b      	add	r3, r1
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d01a      	beq.n	800c90a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c8d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c8d8:	497a      	ldr	r1, [pc, #488]	@ (800cac4 <etharp_find_entry+0x2d4>)
 800c8da:	4613      	mov	r3, r2
 800c8dc:	005b      	lsls	r3, r3, #1
 800c8de:	4413      	add	r3, r2
 800c8e0:	00db      	lsls	r3, r3, #3
 800c8e2:	440b      	add	r3, r1
 800c8e4:	3312      	adds	r3, #18
 800c8e6:	881b      	ldrh	r3, [r3, #0]
 800c8e8:	8bba      	ldrh	r2, [r7, #28]
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d845      	bhi.n	800c97a <etharp_find_entry+0x18a>
            old_queue = i;
 800c8ee:	8c3b      	ldrh	r3, [r7, #32]
 800c8f0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c8f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c8f6:	4973      	ldr	r1, [pc, #460]	@ (800cac4 <etharp_find_entry+0x2d4>)
 800c8f8:	4613      	mov	r3, r2
 800c8fa:	005b      	lsls	r3, r3, #1
 800c8fc:	4413      	add	r3, r2
 800c8fe:	00db      	lsls	r3, r3, #3
 800c900:	440b      	add	r3, r1
 800c902:	3312      	adds	r3, #18
 800c904:	881b      	ldrh	r3, [r3, #0]
 800c906:	83bb      	strh	r3, [r7, #28]
 800c908:	e037      	b.n	800c97a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c90a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c90e:	496d      	ldr	r1, [pc, #436]	@ (800cac4 <etharp_find_entry+0x2d4>)
 800c910:	4613      	mov	r3, r2
 800c912:	005b      	lsls	r3, r3, #1
 800c914:	4413      	add	r3, r2
 800c916:	00db      	lsls	r3, r3, #3
 800c918:	440b      	add	r3, r1
 800c91a:	3312      	adds	r3, #18
 800c91c:	881b      	ldrh	r3, [r3, #0]
 800c91e:	8b7a      	ldrh	r2, [r7, #26]
 800c920:	429a      	cmp	r2, r3
 800c922:	d82a      	bhi.n	800c97a <etharp_find_entry+0x18a>
            old_pending = i;
 800c924:	8c3b      	ldrh	r3, [r7, #32]
 800c926:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800c928:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c92c:	4965      	ldr	r1, [pc, #404]	@ (800cac4 <etharp_find_entry+0x2d4>)
 800c92e:	4613      	mov	r3, r2
 800c930:	005b      	lsls	r3, r3, #1
 800c932:	4413      	add	r3, r2
 800c934:	00db      	lsls	r3, r3, #3
 800c936:	440b      	add	r3, r1
 800c938:	3312      	adds	r3, #18
 800c93a:	881b      	ldrh	r3, [r3, #0]
 800c93c:	837b      	strh	r3, [r7, #26]
 800c93e:	e01c      	b.n	800c97a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c940:	7dfb      	ldrb	r3, [r7, #23]
 800c942:	2b01      	cmp	r3, #1
 800c944:	d919      	bls.n	800c97a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c946:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c94a:	495e      	ldr	r1, [pc, #376]	@ (800cac4 <etharp_find_entry+0x2d4>)
 800c94c:	4613      	mov	r3, r2
 800c94e:	005b      	lsls	r3, r3, #1
 800c950:	4413      	add	r3, r2
 800c952:	00db      	lsls	r3, r3, #3
 800c954:	440b      	add	r3, r1
 800c956:	3312      	adds	r3, #18
 800c958:	881b      	ldrh	r3, [r3, #0]
 800c95a:	8b3a      	ldrh	r2, [r7, #24]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d80c      	bhi.n	800c97a <etharp_find_entry+0x18a>
            old_stable = i;
 800c960:	8c3b      	ldrh	r3, [r7, #32]
 800c962:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800c964:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c968:	4956      	ldr	r1, [pc, #344]	@ (800cac4 <etharp_find_entry+0x2d4>)
 800c96a:	4613      	mov	r3, r2
 800c96c:	005b      	lsls	r3, r3, #1
 800c96e:	4413      	add	r3, r2
 800c970:	00db      	lsls	r3, r3, #3
 800c972:	440b      	add	r3, r1
 800c974:	3312      	adds	r3, #18
 800c976:	881b      	ldrh	r3, [r3, #0]
 800c978:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c97a:	8c3b      	ldrh	r3, [r7, #32]
 800c97c:	3301      	adds	r3, #1
 800c97e:	b29b      	uxth	r3, r3
 800c980:	843b      	strh	r3, [r7, #32]
 800c982:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c986:	2b09      	cmp	r3, #9
 800c988:	f77f af4c 	ble.w	800c824 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c98c:	7afb      	ldrb	r3, [r7, #11]
 800c98e:	f003 0302 	and.w	r3, r3, #2
 800c992:	2b00      	cmp	r3, #0
 800c994:	d108      	bne.n	800c9a8 <etharp_find_entry+0x1b8>
 800c996:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c99a:	2b0a      	cmp	r3, #10
 800c99c:	d107      	bne.n	800c9ae <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c99e:	7afb      	ldrb	r3, [r7, #11]
 800c9a0:	f003 0301 	and.w	r3, r3, #1
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d102      	bne.n	800c9ae <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c9a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c9ac:	e085      	b.n	800caba <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c9ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c9b2:	2b09      	cmp	r3, #9
 800c9b4:	dc02      	bgt.n	800c9bc <etharp_find_entry+0x1cc>
    i = empty;
 800c9b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c9b8:	843b      	strh	r3, [r7, #32]
 800c9ba:	e039      	b.n	800ca30 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c9bc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800c9c0:	2b09      	cmp	r3, #9
 800c9c2:	dc14      	bgt.n	800c9ee <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c9c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c9c6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c9c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c9cc:	493d      	ldr	r1, [pc, #244]	@ (800cac4 <etharp_find_entry+0x2d4>)
 800c9ce:	4613      	mov	r3, r2
 800c9d0:	005b      	lsls	r3, r3, #1
 800c9d2:	4413      	add	r3, r2
 800c9d4:	00db      	lsls	r3, r3, #3
 800c9d6:	440b      	add	r3, r1
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d018      	beq.n	800ca10 <etharp_find_entry+0x220>
 800c9de:	4b3a      	ldr	r3, [pc, #232]	@ (800cac8 <etharp_find_entry+0x2d8>)
 800c9e0:	f240 126d 	movw	r2, #365	@ 0x16d
 800c9e4:	493b      	ldr	r1, [pc, #236]	@ (800cad4 <etharp_find_entry+0x2e4>)
 800c9e6:	483a      	ldr	r0, [pc, #232]	@ (800cad0 <etharp_find_entry+0x2e0>)
 800c9e8:	f003 fce0 	bl	80103ac <iprintf>
 800c9ec:	e010      	b.n	800ca10 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c9ee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800c9f2:	2b09      	cmp	r3, #9
 800c9f4:	dc02      	bgt.n	800c9fc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c9f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c9f8:	843b      	strh	r3, [r7, #32]
 800c9fa:	e009      	b.n	800ca10 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c9fc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ca00:	2b09      	cmp	r3, #9
 800ca02:	dc02      	bgt.n	800ca0a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800ca04:	8bfb      	ldrh	r3, [r7, #30]
 800ca06:	843b      	strh	r3, [r7, #32]
 800ca08:	e002      	b.n	800ca10 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800ca0a:	f04f 33ff 	mov.w	r3, #4294967295
 800ca0e:	e054      	b.n	800caba <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ca10:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ca14:	2b09      	cmp	r3, #9
 800ca16:	dd06      	ble.n	800ca26 <etharp_find_entry+0x236>
 800ca18:	4b2b      	ldr	r3, [pc, #172]	@ (800cac8 <etharp_find_entry+0x2d8>)
 800ca1a:	f240 127f 	movw	r2, #383	@ 0x17f
 800ca1e:	492e      	ldr	r1, [pc, #184]	@ (800cad8 <etharp_find_entry+0x2e8>)
 800ca20:	482b      	ldr	r0, [pc, #172]	@ (800cad0 <etharp_find_entry+0x2e0>)
 800ca22:	f003 fcc3 	bl	80103ac <iprintf>
    etharp_free_entry(i);
 800ca26:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f7ff fe06 	bl	800c63c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ca30:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ca34:	2b09      	cmp	r3, #9
 800ca36:	dd06      	ble.n	800ca46 <etharp_find_entry+0x256>
 800ca38:	4b23      	ldr	r3, [pc, #140]	@ (800cac8 <etharp_find_entry+0x2d8>)
 800ca3a:	f240 1283 	movw	r2, #387	@ 0x183
 800ca3e:	4926      	ldr	r1, [pc, #152]	@ (800cad8 <etharp_find_entry+0x2e8>)
 800ca40:	4823      	ldr	r0, [pc, #140]	@ (800cad0 <etharp_find_entry+0x2e0>)
 800ca42:	f003 fcb3 	bl	80103ac <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ca46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca4a:	491e      	ldr	r1, [pc, #120]	@ (800cac4 <etharp_find_entry+0x2d4>)
 800ca4c:	4613      	mov	r3, r2
 800ca4e:	005b      	lsls	r3, r3, #1
 800ca50:	4413      	add	r3, r2
 800ca52:	00db      	lsls	r3, r3, #3
 800ca54:	440b      	add	r3, r1
 800ca56:	3314      	adds	r3, #20
 800ca58:	781b      	ldrb	r3, [r3, #0]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d006      	beq.n	800ca6c <etharp_find_entry+0x27c>
 800ca5e:	4b1a      	ldr	r3, [pc, #104]	@ (800cac8 <etharp_find_entry+0x2d8>)
 800ca60:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800ca64:	491d      	ldr	r1, [pc, #116]	@ (800cadc <etharp_find_entry+0x2ec>)
 800ca66:	481a      	ldr	r0, [pc, #104]	@ (800cad0 <etharp_find_entry+0x2e0>)
 800ca68:	f003 fca0 	bl	80103ac <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d00b      	beq.n	800ca8a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ca72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	6819      	ldr	r1, [r3, #0]
 800ca7a:	4812      	ldr	r0, [pc, #72]	@ (800cac4 <etharp_find_entry+0x2d4>)
 800ca7c:	4613      	mov	r3, r2
 800ca7e:	005b      	lsls	r3, r3, #1
 800ca80:	4413      	add	r3, r2
 800ca82:	00db      	lsls	r3, r3, #3
 800ca84:	4403      	add	r3, r0
 800ca86:	3304      	adds	r3, #4
 800ca88:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ca8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca8e:	490d      	ldr	r1, [pc, #52]	@ (800cac4 <etharp_find_entry+0x2d4>)
 800ca90:	4613      	mov	r3, r2
 800ca92:	005b      	lsls	r3, r3, #1
 800ca94:	4413      	add	r3, r2
 800ca96:	00db      	lsls	r3, r3, #3
 800ca98:	440b      	add	r3, r1
 800ca9a:	3312      	adds	r3, #18
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800caa0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800caa4:	4907      	ldr	r1, [pc, #28]	@ (800cac4 <etharp_find_entry+0x2d4>)
 800caa6:	4613      	mov	r3, r2
 800caa8:	005b      	lsls	r3, r3, #1
 800caaa:	4413      	add	r3, r2
 800caac:	00db      	lsls	r3, r3, #3
 800caae:	440b      	add	r3, r1
 800cab0:	3308      	adds	r3, #8
 800cab2:	687a      	ldr	r2, [r7, #4]
 800cab4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800cab6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3728      	adds	r7, #40	@ 0x28
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}
 800cac2:	bf00      	nop
 800cac4:	200083a8 	.word	0x200083a8
 800cac8:	080138e0 	.word	0x080138e0
 800cacc:	08013918 	.word	0x08013918
 800cad0:	08013958 	.word	0x08013958
 800cad4:	08013980 	.word	0x08013980
 800cad8:	08013998 	.word	0x08013998
 800cadc:	080139ac 	.word	0x080139ac

0800cae0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b088      	sub	sp, #32
 800cae4:	af02      	add	r7, sp, #8
 800cae6:	60f8      	str	r0, [r7, #12]
 800cae8:	60b9      	str	r1, [r7, #8]
 800caea:	607a      	str	r2, [r7, #4]
 800caec:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800caf4:	2b06      	cmp	r3, #6
 800caf6:	d006      	beq.n	800cb06 <etharp_update_arp_entry+0x26>
 800caf8:	4b48      	ldr	r3, [pc, #288]	@ (800cc1c <etharp_update_arp_entry+0x13c>)
 800cafa:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800cafe:	4948      	ldr	r1, [pc, #288]	@ (800cc20 <etharp_update_arp_entry+0x140>)
 800cb00:	4848      	ldr	r0, [pc, #288]	@ (800cc24 <etharp_update_arp_entry+0x144>)
 800cb02:	f003 fc53 	bl	80103ac <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d012      	beq.n	800cb32 <etharp_update_arp_entry+0x52>
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d00e      	beq.n	800cb32 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	68f9      	ldr	r1, [r7, #12]
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f001 f8fe 	bl	800dd1c <ip4_addr_isbroadcast_u32>
 800cb20:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d105      	bne.n	800cb32 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cb2e:	2be0      	cmp	r3, #224	@ 0xe0
 800cb30:	d102      	bne.n	800cb38 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cb32:	f06f 030f 	mvn.w	r3, #15
 800cb36:	e06c      	b.n	800cc12 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800cb38:	78fb      	ldrb	r3, [r7, #3]
 800cb3a:	68fa      	ldr	r2, [r7, #12]
 800cb3c:	4619      	mov	r1, r3
 800cb3e:	68b8      	ldr	r0, [r7, #8]
 800cb40:	f7ff fe56 	bl	800c7f0 <etharp_find_entry>
 800cb44:	4603      	mov	r3, r0
 800cb46:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800cb48:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	da02      	bge.n	800cb56 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800cb50:	8afb      	ldrh	r3, [r7, #22]
 800cb52:	b25b      	sxtb	r3, r3
 800cb54:	e05d      	b.n	800cc12 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800cb56:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cb5a:	4933      	ldr	r1, [pc, #204]	@ (800cc28 <etharp_update_arp_entry+0x148>)
 800cb5c:	4613      	mov	r3, r2
 800cb5e:	005b      	lsls	r3, r3, #1
 800cb60:	4413      	add	r3, r2
 800cb62:	00db      	lsls	r3, r3, #3
 800cb64:	440b      	add	r3, r1
 800cb66:	3314      	adds	r3, #20
 800cb68:	2202      	movs	r2, #2
 800cb6a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800cb6c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cb70:	492d      	ldr	r1, [pc, #180]	@ (800cc28 <etharp_update_arp_entry+0x148>)
 800cb72:	4613      	mov	r3, r2
 800cb74:	005b      	lsls	r3, r3, #1
 800cb76:	4413      	add	r3, r2
 800cb78:	00db      	lsls	r3, r3, #3
 800cb7a:	440b      	add	r3, r1
 800cb7c:	3308      	adds	r3, #8
 800cb7e:	68fa      	ldr	r2, [r7, #12]
 800cb80:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800cb82:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cb86:	4613      	mov	r3, r2
 800cb88:	005b      	lsls	r3, r3, #1
 800cb8a:	4413      	add	r3, r2
 800cb8c:	00db      	lsls	r3, r3, #3
 800cb8e:	3308      	adds	r3, #8
 800cb90:	4a25      	ldr	r2, [pc, #148]	@ (800cc28 <etharp_update_arp_entry+0x148>)
 800cb92:	4413      	add	r3, r2
 800cb94:	3304      	adds	r3, #4
 800cb96:	2206      	movs	r2, #6
 800cb98:	6879      	ldr	r1, [r7, #4]
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f003 fd31 	bl	8010602 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800cba0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cba4:	4920      	ldr	r1, [pc, #128]	@ (800cc28 <etharp_update_arp_entry+0x148>)
 800cba6:	4613      	mov	r3, r2
 800cba8:	005b      	lsls	r3, r3, #1
 800cbaa:	4413      	add	r3, r2
 800cbac:	00db      	lsls	r3, r3, #3
 800cbae:	440b      	add	r3, r1
 800cbb0:	3312      	adds	r3, #18
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800cbb6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cbba:	491b      	ldr	r1, [pc, #108]	@ (800cc28 <etharp_update_arp_entry+0x148>)
 800cbbc:	4613      	mov	r3, r2
 800cbbe:	005b      	lsls	r3, r3, #1
 800cbc0:	4413      	add	r3, r2
 800cbc2:	00db      	lsls	r3, r3, #3
 800cbc4:	440b      	add	r3, r1
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d021      	beq.n	800cc10 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800cbcc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cbd0:	4915      	ldr	r1, [pc, #84]	@ (800cc28 <etharp_update_arp_entry+0x148>)
 800cbd2:	4613      	mov	r3, r2
 800cbd4:	005b      	lsls	r3, r3, #1
 800cbd6:	4413      	add	r3, r2
 800cbd8:	00db      	lsls	r3, r3, #3
 800cbda:	440b      	add	r3, r1
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800cbe0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cbe4:	4910      	ldr	r1, [pc, #64]	@ (800cc28 <etharp_update_arp_entry+0x148>)
 800cbe6:	4613      	mov	r3, r2
 800cbe8:	005b      	lsls	r3, r3, #1
 800cbea:	4413      	add	r3, r2
 800cbec:	00db      	lsls	r3, r3, #3
 800cbee:	440b      	add	r3, r1
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800cbfa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cbfe:	9300      	str	r3, [sp, #0]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6939      	ldr	r1, [r7, #16]
 800cc04:	68f8      	ldr	r0, [r7, #12]
 800cc06:	f001 ff97 	bl	800eb38 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800cc0a:	6938      	ldr	r0, [r7, #16]
 800cc0c:	f7f8 ffd8 	bl	8005bc0 <pbuf_free>
  }
  return ERR_OK;
 800cc10:	2300      	movs	r3, #0
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3718      	adds	r7, #24
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
 800cc1a:	bf00      	nop
 800cc1c:	080138e0 	.word	0x080138e0
 800cc20:	080139d8 	.word	0x080139d8
 800cc24:	08013958 	.word	0x08013958
 800cc28:	200083a8 	.word	0x200083a8

0800cc2c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cc34:	2300      	movs	r3, #0
 800cc36:	60fb      	str	r3, [r7, #12]
 800cc38:	e01e      	b.n	800cc78 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800cc3a:	4913      	ldr	r1, [pc, #76]	@ (800cc88 <etharp_cleanup_netif+0x5c>)
 800cc3c:	68fa      	ldr	r2, [r7, #12]
 800cc3e:	4613      	mov	r3, r2
 800cc40:	005b      	lsls	r3, r3, #1
 800cc42:	4413      	add	r3, r2
 800cc44:	00db      	lsls	r3, r3, #3
 800cc46:	440b      	add	r3, r1
 800cc48:	3314      	adds	r3, #20
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800cc4e:	7afb      	ldrb	r3, [r7, #11]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d00e      	beq.n	800cc72 <etharp_cleanup_netif+0x46>
 800cc54:	490c      	ldr	r1, [pc, #48]	@ (800cc88 <etharp_cleanup_netif+0x5c>)
 800cc56:	68fa      	ldr	r2, [r7, #12]
 800cc58:	4613      	mov	r3, r2
 800cc5a:	005b      	lsls	r3, r3, #1
 800cc5c:	4413      	add	r3, r2
 800cc5e:	00db      	lsls	r3, r3, #3
 800cc60:	440b      	add	r3, r1
 800cc62:	3308      	adds	r3, #8
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	687a      	ldr	r2, [r7, #4]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d102      	bne.n	800cc72 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800cc6c:	68f8      	ldr	r0, [r7, #12]
 800cc6e:	f7ff fce5 	bl	800c63c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	3301      	adds	r3, #1
 800cc76:	60fb      	str	r3, [r7, #12]
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2b09      	cmp	r3, #9
 800cc7c:	dddd      	ble.n	800cc3a <etharp_cleanup_netif+0xe>
    }
  }
}
 800cc7e:	bf00      	nop
 800cc80:	bf00      	nop
 800cc82:	3710      	adds	r7, #16
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}
 800cc88:	200083a8 	.word	0x200083a8

0800cc8c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800cc8c:	b5b0      	push	{r4, r5, r7, lr}
 800cc8e:	b08a      	sub	sp, #40	@ 0x28
 800cc90:	af04      	add	r7, sp, #16
 800cc92:	6078      	str	r0, [r7, #4]
 800cc94:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d107      	bne.n	800ccac <etharp_input+0x20>
 800cc9c:	4b3d      	ldr	r3, [pc, #244]	@ (800cd94 <etharp_input+0x108>)
 800cc9e:	f240 228a 	movw	r2, #650	@ 0x28a
 800cca2:	493d      	ldr	r1, [pc, #244]	@ (800cd98 <etharp_input+0x10c>)
 800cca4:	483d      	ldr	r0, [pc, #244]	@ (800cd9c <etharp_input+0x110>)
 800cca6:	f003 fb81 	bl	80103ac <iprintf>
 800ccaa:	e06f      	b.n	800cd8c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	685b      	ldr	r3, [r3, #4]
 800ccb0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	881b      	ldrh	r3, [r3, #0]
 800ccb6:	b29b      	uxth	r3, r3
 800ccb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ccbc:	d10c      	bne.n	800ccd8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ccc2:	2b06      	cmp	r3, #6
 800ccc4:	d108      	bne.n	800ccd8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ccc6:	693b      	ldr	r3, [r7, #16]
 800ccc8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ccca:	2b04      	cmp	r3, #4
 800cccc:	d104      	bne.n	800ccd8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	885b      	ldrh	r3, [r3, #2]
 800ccd2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ccd4:	2b08      	cmp	r3, #8
 800ccd6:	d003      	beq.n	800cce0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f7f8 ff71 	bl	8005bc0 <pbuf_free>
    return;
 800ccde:	e055      	b.n	800cd8c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800cce0:	693b      	ldr	r3, [r7, #16]
 800cce2:	330e      	adds	r3, #14
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	3318      	adds	r3, #24
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	3304      	adds	r3, #4
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d102      	bne.n	800cd00 <etharp_input+0x74>
    for_us = 0;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	75fb      	strb	r3, [r7, #23]
 800ccfe:	e009      	b.n	800cd14 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800cd00:	68ba      	ldr	r2, [r7, #8]
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	3304      	adds	r3, #4
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	bf0c      	ite	eq
 800cd0c:	2301      	moveq	r3, #1
 800cd0e:	2300      	movne	r3, #0
 800cd10:	b2db      	uxtb	r3, r3
 800cd12:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	f103 0208 	add.w	r2, r3, #8
 800cd1a:	7dfb      	ldrb	r3, [r7, #23]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d001      	beq.n	800cd24 <etharp_input+0x98>
 800cd20:	2301      	movs	r3, #1
 800cd22:	e000      	b.n	800cd26 <etharp_input+0x9a>
 800cd24:	2302      	movs	r3, #2
 800cd26:	f107 010c 	add.w	r1, r7, #12
 800cd2a:	6838      	ldr	r0, [r7, #0]
 800cd2c:	f7ff fed8 	bl	800cae0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	88db      	ldrh	r3, [r3, #6]
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd3a:	d003      	beq.n	800cd44 <etharp_input+0xb8>
 800cd3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd40:	d01e      	beq.n	800cd80 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800cd42:	e020      	b.n	800cd86 <etharp_input+0xfa>
      if (for_us) {
 800cd44:	7dfb      	ldrb	r3, [r7, #23]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d01c      	beq.n	800cd84 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800cd60:	693a      	ldr	r2, [r7, #16]
 800cd62:	3208      	adds	r2, #8
        etharp_raw(netif,
 800cd64:	2102      	movs	r1, #2
 800cd66:	9103      	str	r1, [sp, #12]
 800cd68:	f107 010c 	add.w	r1, r7, #12
 800cd6c:	9102      	str	r1, [sp, #8]
 800cd6e:	9201      	str	r2, [sp, #4]
 800cd70:	9300      	str	r3, [sp, #0]
 800cd72:	462b      	mov	r3, r5
 800cd74:	4622      	mov	r2, r4
 800cd76:	4601      	mov	r1, r0
 800cd78:	6838      	ldr	r0, [r7, #0]
 800cd7a:	f000 faeb 	bl	800d354 <etharp_raw>
      break;
 800cd7e:	e001      	b.n	800cd84 <etharp_input+0xf8>
      break;
 800cd80:	bf00      	nop
 800cd82:	e000      	b.n	800cd86 <etharp_input+0xfa>
      break;
 800cd84:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f7f8 ff1a 	bl	8005bc0 <pbuf_free>
}
 800cd8c:	3718      	adds	r7, #24
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bdb0      	pop	{r4, r5, r7, pc}
 800cd92:	bf00      	nop
 800cd94:	080138e0 	.word	0x080138e0
 800cd98:	08013a30 	.word	0x08013a30
 800cd9c:	08013958 	.word	0x08013958

0800cda0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b086      	sub	sp, #24
 800cda4:	af02      	add	r7, sp, #8
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	60b9      	str	r1, [r7, #8]
 800cdaa:	4613      	mov	r3, r2
 800cdac:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800cdae:	79fa      	ldrb	r2, [r7, #7]
 800cdb0:	4944      	ldr	r1, [pc, #272]	@ (800cec4 <etharp_output_to_arp_index+0x124>)
 800cdb2:	4613      	mov	r3, r2
 800cdb4:	005b      	lsls	r3, r3, #1
 800cdb6:	4413      	add	r3, r2
 800cdb8:	00db      	lsls	r3, r3, #3
 800cdba:	440b      	add	r3, r1
 800cdbc:	3314      	adds	r3, #20
 800cdbe:	781b      	ldrb	r3, [r3, #0]
 800cdc0:	2b01      	cmp	r3, #1
 800cdc2:	d806      	bhi.n	800cdd2 <etharp_output_to_arp_index+0x32>
 800cdc4:	4b40      	ldr	r3, [pc, #256]	@ (800cec8 <etharp_output_to_arp_index+0x128>)
 800cdc6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800cdca:	4940      	ldr	r1, [pc, #256]	@ (800cecc <etharp_output_to_arp_index+0x12c>)
 800cdcc:	4840      	ldr	r0, [pc, #256]	@ (800ced0 <etharp_output_to_arp_index+0x130>)
 800cdce:	f003 faed 	bl	80103ac <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800cdd2:	79fa      	ldrb	r2, [r7, #7]
 800cdd4:	493b      	ldr	r1, [pc, #236]	@ (800cec4 <etharp_output_to_arp_index+0x124>)
 800cdd6:	4613      	mov	r3, r2
 800cdd8:	005b      	lsls	r3, r3, #1
 800cdda:	4413      	add	r3, r2
 800cddc:	00db      	lsls	r3, r3, #3
 800cdde:	440b      	add	r3, r1
 800cde0:	3314      	adds	r3, #20
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	2b02      	cmp	r3, #2
 800cde6:	d153      	bne.n	800ce90 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800cde8:	79fa      	ldrb	r2, [r7, #7]
 800cdea:	4936      	ldr	r1, [pc, #216]	@ (800cec4 <etharp_output_to_arp_index+0x124>)
 800cdec:	4613      	mov	r3, r2
 800cdee:	005b      	lsls	r3, r3, #1
 800cdf0:	4413      	add	r3, r2
 800cdf2:	00db      	lsls	r3, r3, #3
 800cdf4:	440b      	add	r3, r1
 800cdf6:	3312      	adds	r3, #18
 800cdf8:	881b      	ldrh	r3, [r3, #0]
 800cdfa:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800cdfe:	d919      	bls.n	800ce34 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800ce00:	79fa      	ldrb	r2, [r7, #7]
 800ce02:	4613      	mov	r3, r2
 800ce04:	005b      	lsls	r3, r3, #1
 800ce06:	4413      	add	r3, r2
 800ce08:	00db      	lsls	r3, r3, #3
 800ce0a:	4a2e      	ldr	r2, [pc, #184]	@ (800cec4 <etharp_output_to_arp_index+0x124>)
 800ce0c:	4413      	add	r3, r2
 800ce0e:	3304      	adds	r3, #4
 800ce10:	4619      	mov	r1, r3
 800ce12:	68f8      	ldr	r0, [r7, #12]
 800ce14:	f000 fb4c 	bl	800d4b0 <etharp_request>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d138      	bne.n	800ce90 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ce1e:	79fa      	ldrb	r2, [r7, #7]
 800ce20:	4928      	ldr	r1, [pc, #160]	@ (800cec4 <etharp_output_to_arp_index+0x124>)
 800ce22:	4613      	mov	r3, r2
 800ce24:	005b      	lsls	r3, r3, #1
 800ce26:	4413      	add	r3, r2
 800ce28:	00db      	lsls	r3, r3, #3
 800ce2a:	440b      	add	r3, r1
 800ce2c:	3314      	adds	r3, #20
 800ce2e:	2203      	movs	r2, #3
 800ce30:	701a      	strb	r2, [r3, #0]
 800ce32:	e02d      	b.n	800ce90 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800ce34:	79fa      	ldrb	r2, [r7, #7]
 800ce36:	4923      	ldr	r1, [pc, #140]	@ (800cec4 <etharp_output_to_arp_index+0x124>)
 800ce38:	4613      	mov	r3, r2
 800ce3a:	005b      	lsls	r3, r3, #1
 800ce3c:	4413      	add	r3, r2
 800ce3e:	00db      	lsls	r3, r3, #3
 800ce40:	440b      	add	r3, r1
 800ce42:	3312      	adds	r3, #18
 800ce44:	881b      	ldrh	r3, [r3, #0]
 800ce46:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800ce4a:	d321      	bcc.n	800ce90 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ce4c:	79fa      	ldrb	r2, [r7, #7]
 800ce4e:	4613      	mov	r3, r2
 800ce50:	005b      	lsls	r3, r3, #1
 800ce52:	4413      	add	r3, r2
 800ce54:	00db      	lsls	r3, r3, #3
 800ce56:	4a1b      	ldr	r2, [pc, #108]	@ (800cec4 <etharp_output_to_arp_index+0x124>)
 800ce58:	4413      	add	r3, r2
 800ce5a:	1d19      	adds	r1, r3, #4
 800ce5c:	79fa      	ldrb	r2, [r7, #7]
 800ce5e:	4613      	mov	r3, r2
 800ce60:	005b      	lsls	r3, r3, #1
 800ce62:	4413      	add	r3, r2
 800ce64:	00db      	lsls	r3, r3, #3
 800ce66:	3308      	adds	r3, #8
 800ce68:	4a16      	ldr	r2, [pc, #88]	@ (800cec4 <etharp_output_to_arp_index+0x124>)
 800ce6a:	4413      	add	r3, r2
 800ce6c:	3304      	adds	r3, #4
 800ce6e:	461a      	mov	r2, r3
 800ce70:	68f8      	ldr	r0, [r7, #12]
 800ce72:	f000 fafb 	bl	800d46c <etharp_request_dst>
 800ce76:	4603      	mov	r3, r0
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d109      	bne.n	800ce90 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ce7c:	79fa      	ldrb	r2, [r7, #7]
 800ce7e:	4911      	ldr	r1, [pc, #68]	@ (800cec4 <etharp_output_to_arp_index+0x124>)
 800ce80:	4613      	mov	r3, r2
 800ce82:	005b      	lsls	r3, r3, #1
 800ce84:	4413      	add	r3, r2
 800ce86:	00db      	lsls	r3, r3, #3
 800ce88:	440b      	add	r3, r1
 800ce8a:	3314      	adds	r3, #20
 800ce8c:	2203      	movs	r2, #3
 800ce8e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800ce96:	79fa      	ldrb	r2, [r7, #7]
 800ce98:	4613      	mov	r3, r2
 800ce9a:	005b      	lsls	r3, r3, #1
 800ce9c:	4413      	add	r3, r2
 800ce9e:	00db      	lsls	r3, r3, #3
 800cea0:	3308      	adds	r3, #8
 800cea2:	4a08      	ldr	r2, [pc, #32]	@ (800cec4 <etharp_output_to_arp_index+0x124>)
 800cea4:	4413      	add	r3, r2
 800cea6:	3304      	adds	r3, #4
 800cea8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ceac:	9200      	str	r2, [sp, #0]
 800ceae:	460a      	mov	r2, r1
 800ceb0:	68b9      	ldr	r1, [r7, #8]
 800ceb2:	68f8      	ldr	r0, [r7, #12]
 800ceb4:	f001 fe40 	bl	800eb38 <ethernet_output>
 800ceb8:	4603      	mov	r3, r0
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3710      	adds	r7, #16
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	bf00      	nop
 800cec4:	200083a8 	.word	0x200083a8
 800cec8:	080138e0 	.word	0x080138e0
 800cecc:	08013a50 	.word	0x08013a50
 800ced0:	08013958 	.word	0x08013958

0800ced4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b08a      	sub	sp, #40	@ 0x28
 800ced8:	af02      	add	r7, sp, #8
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	60b9      	str	r1, [r7, #8]
 800cede:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d106      	bne.n	800cef8 <etharp_output+0x24>
 800ceea:	4b73      	ldr	r3, [pc, #460]	@ (800d0b8 <etharp_output+0x1e4>)
 800ceec:	f240 321e 	movw	r2, #798	@ 0x31e
 800cef0:	4972      	ldr	r1, [pc, #456]	@ (800d0bc <etharp_output+0x1e8>)
 800cef2:	4873      	ldr	r0, [pc, #460]	@ (800d0c0 <etharp_output+0x1ec>)
 800cef4:	f003 fa5a 	bl	80103ac <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d106      	bne.n	800cf0c <etharp_output+0x38>
 800cefe:	4b6e      	ldr	r3, [pc, #440]	@ (800d0b8 <etharp_output+0x1e4>)
 800cf00:	f240 321f 	movw	r2, #799	@ 0x31f
 800cf04:	496f      	ldr	r1, [pc, #444]	@ (800d0c4 <etharp_output+0x1f0>)
 800cf06:	486e      	ldr	r0, [pc, #440]	@ (800d0c0 <etharp_output+0x1ec>)
 800cf08:	f003 fa50 	bl	80103ac <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d106      	bne.n	800cf20 <etharp_output+0x4c>
 800cf12:	4b69      	ldr	r3, [pc, #420]	@ (800d0b8 <etharp_output+0x1e4>)
 800cf14:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800cf18:	496b      	ldr	r1, [pc, #428]	@ (800d0c8 <etharp_output+0x1f4>)
 800cf1a:	4869      	ldr	r0, [pc, #420]	@ (800d0c0 <etharp_output+0x1ec>)
 800cf1c:	f003 fa46 	bl	80103ac <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	68f9      	ldr	r1, [r7, #12]
 800cf26:	4618      	mov	r0, r3
 800cf28:	f000 fef8 	bl	800dd1c <ip4_addr_isbroadcast_u32>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d002      	beq.n	800cf38 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800cf32:	4b66      	ldr	r3, [pc, #408]	@ (800d0cc <etharp_output+0x1f8>)
 800cf34:	61fb      	str	r3, [r7, #28]
 800cf36:	e0af      	b.n	800d098 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cf40:	2be0      	cmp	r3, #224	@ 0xe0
 800cf42:	d118      	bne.n	800cf76 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800cf44:	2301      	movs	r3, #1
 800cf46:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800cf4c:	235e      	movs	r3, #94	@ 0x5e
 800cf4e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	3301      	adds	r3, #1
 800cf54:	781b      	ldrb	r3, [r3, #0]
 800cf56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf5a:	b2db      	uxtb	r3, r3
 800cf5c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	3302      	adds	r3, #2
 800cf62:	781b      	ldrb	r3, [r3, #0]
 800cf64:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	3303      	adds	r3, #3
 800cf6a:	781b      	ldrb	r3, [r3, #0]
 800cf6c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800cf6e:	f107 0310 	add.w	r3, r7, #16
 800cf72:	61fb      	str	r3, [r7, #28]
 800cf74:	e090      	b.n	800d098 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681a      	ldr	r2, [r3, #0]
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	3304      	adds	r3, #4
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	405a      	eors	r2, r3
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	3308      	adds	r3, #8
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4013      	ands	r3, r2
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d012      	beq.n	800cfb4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cf94:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d00b      	beq.n	800cfb4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	330c      	adds	r3, #12
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d003      	beq.n	800cfae <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	330c      	adds	r3, #12
 800cfaa:	61bb      	str	r3, [r7, #24]
 800cfac:	e002      	b.n	800cfb4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800cfae:	f06f 0303 	mvn.w	r3, #3
 800cfb2:	e07d      	b.n	800d0b0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cfb4:	4b46      	ldr	r3, [pc, #280]	@ (800d0d0 <etharp_output+0x1fc>)
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	4619      	mov	r1, r3
 800cfba:	4a46      	ldr	r2, [pc, #280]	@ (800d0d4 <etharp_output+0x200>)
 800cfbc:	460b      	mov	r3, r1
 800cfbe:	005b      	lsls	r3, r3, #1
 800cfc0:	440b      	add	r3, r1
 800cfc2:	00db      	lsls	r3, r3, #3
 800cfc4:	4413      	add	r3, r2
 800cfc6:	3314      	adds	r3, #20
 800cfc8:	781b      	ldrb	r3, [r3, #0]
 800cfca:	2b01      	cmp	r3, #1
 800cfcc:	d925      	bls.n	800d01a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cfce:	4b40      	ldr	r3, [pc, #256]	@ (800d0d0 <etharp_output+0x1fc>)
 800cfd0:	781b      	ldrb	r3, [r3, #0]
 800cfd2:	4619      	mov	r1, r3
 800cfd4:	4a3f      	ldr	r2, [pc, #252]	@ (800d0d4 <etharp_output+0x200>)
 800cfd6:	460b      	mov	r3, r1
 800cfd8:	005b      	lsls	r3, r3, #1
 800cfda:	440b      	add	r3, r1
 800cfdc:	00db      	lsls	r3, r3, #3
 800cfde:	4413      	add	r3, r2
 800cfe0:	3308      	adds	r3, #8
 800cfe2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cfe4:	68fa      	ldr	r2, [r7, #12]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d117      	bne.n	800d01a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800cfea:	69bb      	ldr	r3, [r7, #24]
 800cfec:	681a      	ldr	r2, [r3, #0]
 800cfee:	4b38      	ldr	r3, [pc, #224]	@ (800d0d0 <etharp_output+0x1fc>)
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	4618      	mov	r0, r3
 800cff4:	4937      	ldr	r1, [pc, #220]	@ (800d0d4 <etharp_output+0x200>)
 800cff6:	4603      	mov	r3, r0
 800cff8:	005b      	lsls	r3, r3, #1
 800cffa:	4403      	add	r3, r0
 800cffc:	00db      	lsls	r3, r3, #3
 800cffe:	440b      	add	r3, r1
 800d000:	3304      	adds	r3, #4
 800d002:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d004:	429a      	cmp	r2, r3
 800d006:	d108      	bne.n	800d01a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d008:	4b31      	ldr	r3, [pc, #196]	@ (800d0d0 <etharp_output+0x1fc>)
 800d00a:	781b      	ldrb	r3, [r3, #0]
 800d00c:	461a      	mov	r2, r3
 800d00e:	68b9      	ldr	r1, [r7, #8]
 800d010:	68f8      	ldr	r0, [r7, #12]
 800d012:	f7ff fec5 	bl	800cda0 <etharp_output_to_arp_index>
 800d016:	4603      	mov	r3, r0
 800d018:	e04a      	b.n	800d0b0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d01a:	2300      	movs	r3, #0
 800d01c:	75fb      	strb	r3, [r7, #23]
 800d01e:	e031      	b.n	800d084 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d020:	7dfa      	ldrb	r2, [r7, #23]
 800d022:	492c      	ldr	r1, [pc, #176]	@ (800d0d4 <etharp_output+0x200>)
 800d024:	4613      	mov	r3, r2
 800d026:	005b      	lsls	r3, r3, #1
 800d028:	4413      	add	r3, r2
 800d02a:	00db      	lsls	r3, r3, #3
 800d02c:	440b      	add	r3, r1
 800d02e:	3314      	adds	r3, #20
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	2b01      	cmp	r3, #1
 800d034:	d923      	bls.n	800d07e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d036:	7dfa      	ldrb	r2, [r7, #23]
 800d038:	4926      	ldr	r1, [pc, #152]	@ (800d0d4 <etharp_output+0x200>)
 800d03a:	4613      	mov	r3, r2
 800d03c:	005b      	lsls	r3, r3, #1
 800d03e:	4413      	add	r3, r2
 800d040:	00db      	lsls	r3, r3, #3
 800d042:	440b      	add	r3, r1
 800d044:	3308      	adds	r3, #8
 800d046:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d048:	68fa      	ldr	r2, [r7, #12]
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d117      	bne.n	800d07e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	6819      	ldr	r1, [r3, #0]
 800d052:	7dfa      	ldrb	r2, [r7, #23]
 800d054:	481f      	ldr	r0, [pc, #124]	@ (800d0d4 <etharp_output+0x200>)
 800d056:	4613      	mov	r3, r2
 800d058:	005b      	lsls	r3, r3, #1
 800d05a:	4413      	add	r3, r2
 800d05c:	00db      	lsls	r3, r3, #3
 800d05e:	4403      	add	r3, r0
 800d060:	3304      	adds	r3, #4
 800d062:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d064:	4299      	cmp	r1, r3
 800d066:	d10a      	bne.n	800d07e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d068:	4a19      	ldr	r2, [pc, #100]	@ (800d0d0 <etharp_output+0x1fc>)
 800d06a:	7dfb      	ldrb	r3, [r7, #23]
 800d06c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d06e:	7dfb      	ldrb	r3, [r7, #23]
 800d070:	461a      	mov	r2, r3
 800d072:	68b9      	ldr	r1, [r7, #8]
 800d074:	68f8      	ldr	r0, [r7, #12]
 800d076:	f7ff fe93 	bl	800cda0 <etharp_output_to_arp_index>
 800d07a:	4603      	mov	r3, r0
 800d07c:	e018      	b.n	800d0b0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d07e:	7dfb      	ldrb	r3, [r7, #23]
 800d080:	3301      	adds	r3, #1
 800d082:	75fb      	strb	r3, [r7, #23]
 800d084:	7dfb      	ldrb	r3, [r7, #23]
 800d086:	2b09      	cmp	r3, #9
 800d088:	d9ca      	bls.n	800d020 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d08a:	68ba      	ldr	r2, [r7, #8]
 800d08c:	69b9      	ldr	r1, [r7, #24]
 800d08e:	68f8      	ldr	r0, [r7, #12]
 800d090:	f000 f822 	bl	800d0d8 <etharp_query>
 800d094:	4603      	mov	r3, r0
 800d096:	e00b      	b.n	800d0b0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800d09e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d0a2:	9300      	str	r3, [sp, #0]
 800d0a4:	69fb      	ldr	r3, [r7, #28]
 800d0a6:	68b9      	ldr	r1, [r7, #8]
 800d0a8:	68f8      	ldr	r0, [r7, #12]
 800d0aa:	f001 fd45 	bl	800eb38 <ethernet_output>
 800d0ae:	4603      	mov	r3, r0
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3720      	adds	r7, #32
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}
 800d0b8:	080138e0 	.word	0x080138e0
 800d0bc:	08013a30 	.word	0x08013a30
 800d0c0:	08013958 	.word	0x08013958
 800d0c4:	08013a80 	.word	0x08013a80
 800d0c8:	08013a20 	.word	0x08013a20
 800d0cc:	080141b8 	.word	0x080141b8
 800d0d0:	20008498 	.word	0x20008498
 800d0d4:	200083a8 	.word	0x200083a8

0800d0d8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b08c      	sub	sp, #48	@ 0x30
 800d0dc:	af02      	add	r7, sp, #8
 800d0de:	60f8      	str	r0, [r7, #12]
 800d0e0:	60b9      	str	r1, [r7, #8]
 800d0e2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	3326      	adds	r3, #38	@ 0x26
 800d0e8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d0ea:	23ff      	movs	r3, #255	@ 0xff
 800d0ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	68f9      	ldr	r1, [r7, #12]
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f000 fe0e 	bl	800dd1c <ip4_addr_isbroadcast_u32>
 800d100:	4603      	mov	r3, r0
 800d102:	2b00      	cmp	r3, #0
 800d104:	d10c      	bne.n	800d120 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d10e:	2be0      	cmp	r3, #224	@ 0xe0
 800d110:	d006      	beq.n	800d120 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d003      	beq.n	800d120 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d102      	bne.n	800d126 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d120:	f06f 030f 	mvn.w	r3, #15
 800d124:	e101      	b.n	800d32a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d126:	68fa      	ldr	r2, [r7, #12]
 800d128:	2101      	movs	r1, #1
 800d12a:	68b8      	ldr	r0, [r7, #8]
 800d12c:	f7ff fb60 	bl	800c7f0 <etharp_find_entry>
 800d130:	4603      	mov	r3, r0
 800d132:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d134:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	da02      	bge.n	800d142 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d13c:	8a7b      	ldrh	r3, [r7, #18]
 800d13e:	b25b      	sxtb	r3, r3
 800d140:	e0f3      	b.n	800d32a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d142:	8a7b      	ldrh	r3, [r7, #18]
 800d144:	2b7e      	cmp	r3, #126	@ 0x7e
 800d146:	d906      	bls.n	800d156 <etharp_query+0x7e>
 800d148:	4b7a      	ldr	r3, [pc, #488]	@ (800d334 <etharp_query+0x25c>)
 800d14a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800d14e:	497a      	ldr	r1, [pc, #488]	@ (800d338 <etharp_query+0x260>)
 800d150:	487a      	ldr	r0, [pc, #488]	@ (800d33c <etharp_query+0x264>)
 800d152:	f003 f92b 	bl	80103ac <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d156:	8a7b      	ldrh	r3, [r7, #18]
 800d158:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d15a:	7c7a      	ldrb	r2, [r7, #17]
 800d15c:	4978      	ldr	r1, [pc, #480]	@ (800d340 <etharp_query+0x268>)
 800d15e:	4613      	mov	r3, r2
 800d160:	005b      	lsls	r3, r3, #1
 800d162:	4413      	add	r3, r2
 800d164:	00db      	lsls	r3, r3, #3
 800d166:	440b      	add	r3, r1
 800d168:	3314      	adds	r3, #20
 800d16a:	781b      	ldrb	r3, [r3, #0]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d115      	bne.n	800d19c <etharp_query+0xc4>
    is_new_entry = 1;
 800d170:	2301      	movs	r3, #1
 800d172:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d174:	7c7a      	ldrb	r2, [r7, #17]
 800d176:	4972      	ldr	r1, [pc, #456]	@ (800d340 <etharp_query+0x268>)
 800d178:	4613      	mov	r3, r2
 800d17a:	005b      	lsls	r3, r3, #1
 800d17c:	4413      	add	r3, r2
 800d17e:	00db      	lsls	r3, r3, #3
 800d180:	440b      	add	r3, r1
 800d182:	3314      	adds	r3, #20
 800d184:	2201      	movs	r2, #1
 800d186:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d188:	7c7a      	ldrb	r2, [r7, #17]
 800d18a:	496d      	ldr	r1, [pc, #436]	@ (800d340 <etharp_query+0x268>)
 800d18c:	4613      	mov	r3, r2
 800d18e:	005b      	lsls	r3, r3, #1
 800d190:	4413      	add	r3, r2
 800d192:	00db      	lsls	r3, r3, #3
 800d194:	440b      	add	r3, r1
 800d196:	3308      	adds	r3, #8
 800d198:	68fa      	ldr	r2, [r7, #12]
 800d19a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d19c:	7c7a      	ldrb	r2, [r7, #17]
 800d19e:	4968      	ldr	r1, [pc, #416]	@ (800d340 <etharp_query+0x268>)
 800d1a0:	4613      	mov	r3, r2
 800d1a2:	005b      	lsls	r3, r3, #1
 800d1a4:	4413      	add	r3, r2
 800d1a6:	00db      	lsls	r3, r3, #3
 800d1a8:	440b      	add	r3, r1
 800d1aa:	3314      	adds	r3, #20
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	2b01      	cmp	r3, #1
 800d1b0:	d011      	beq.n	800d1d6 <etharp_query+0xfe>
 800d1b2:	7c7a      	ldrb	r2, [r7, #17]
 800d1b4:	4962      	ldr	r1, [pc, #392]	@ (800d340 <etharp_query+0x268>)
 800d1b6:	4613      	mov	r3, r2
 800d1b8:	005b      	lsls	r3, r3, #1
 800d1ba:	4413      	add	r3, r2
 800d1bc:	00db      	lsls	r3, r3, #3
 800d1be:	440b      	add	r3, r1
 800d1c0:	3314      	adds	r3, #20
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	2b01      	cmp	r3, #1
 800d1c6:	d806      	bhi.n	800d1d6 <etharp_query+0xfe>
 800d1c8:	4b5a      	ldr	r3, [pc, #360]	@ (800d334 <etharp_query+0x25c>)
 800d1ca:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800d1ce:	495d      	ldr	r1, [pc, #372]	@ (800d344 <etharp_query+0x26c>)
 800d1d0:	485a      	ldr	r0, [pc, #360]	@ (800d33c <etharp_query+0x264>)
 800d1d2:	f003 f8eb 	bl	80103ac <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d1d6:	6a3b      	ldr	r3, [r7, #32]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d102      	bne.n	800d1e2 <etharp_query+0x10a>
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d10c      	bne.n	800d1fc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d1e2:	68b9      	ldr	r1, [r7, #8]
 800d1e4:	68f8      	ldr	r0, [r7, #12]
 800d1e6:	f000 f963 	bl	800d4b0 <etharp_request>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d102      	bne.n	800d1fc <etharp_query+0x124>
      return result;
 800d1f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d1fa:	e096      	b.n	800d32a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d106      	bne.n	800d210 <etharp_query+0x138>
 800d202:	4b4c      	ldr	r3, [pc, #304]	@ (800d334 <etharp_query+0x25c>)
 800d204:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800d208:	494f      	ldr	r1, [pc, #316]	@ (800d348 <etharp_query+0x270>)
 800d20a:	484c      	ldr	r0, [pc, #304]	@ (800d33c <etharp_query+0x264>)
 800d20c:	f003 f8ce 	bl	80103ac <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d210:	7c7a      	ldrb	r2, [r7, #17]
 800d212:	494b      	ldr	r1, [pc, #300]	@ (800d340 <etharp_query+0x268>)
 800d214:	4613      	mov	r3, r2
 800d216:	005b      	lsls	r3, r3, #1
 800d218:	4413      	add	r3, r2
 800d21a:	00db      	lsls	r3, r3, #3
 800d21c:	440b      	add	r3, r1
 800d21e:	3314      	adds	r3, #20
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	2b01      	cmp	r3, #1
 800d224:	d917      	bls.n	800d256 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d226:	4a49      	ldr	r2, [pc, #292]	@ (800d34c <etharp_query+0x274>)
 800d228:	7c7b      	ldrb	r3, [r7, #17]
 800d22a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d22c:	7c7a      	ldrb	r2, [r7, #17]
 800d22e:	4613      	mov	r3, r2
 800d230:	005b      	lsls	r3, r3, #1
 800d232:	4413      	add	r3, r2
 800d234:	00db      	lsls	r3, r3, #3
 800d236:	3308      	adds	r3, #8
 800d238:	4a41      	ldr	r2, [pc, #260]	@ (800d340 <etharp_query+0x268>)
 800d23a:	4413      	add	r3, r2
 800d23c:	3304      	adds	r3, #4
 800d23e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d242:	9200      	str	r2, [sp, #0]
 800d244:	697a      	ldr	r2, [r7, #20]
 800d246:	6879      	ldr	r1, [r7, #4]
 800d248:	68f8      	ldr	r0, [r7, #12]
 800d24a:	f001 fc75 	bl	800eb38 <ethernet_output>
 800d24e:	4603      	mov	r3, r0
 800d250:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d254:	e067      	b.n	800d326 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d256:	7c7a      	ldrb	r2, [r7, #17]
 800d258:	4939      	ldr	r1, [pc, #228]	@ (800d340 <etharp_query+0x268>)
 800d25a:	4613      	mov	r3, r2
 800d25c:	005b      	lsls	r3, r3, #1
 800d25e:	4413      	add	r3, r2
 800d260:	00db      	lsls	r3, r3, #3
 800d262:	440b      	add	r3, r1
 800d264:	3314      	adds	r3, #20
 800d266:	781b      	ldrb	r3, [r3, #0]
 800d268:	2b01      	cmp	r3, #1
 800d26a:	d15c      	bne.n	800d326 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d26c:	2300      	movs	r3, #0
 800d26e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d274:	e01c      	b.n	800d2b0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d276:	69fb      	ldr	r3, [r7, #28]
 800d278:	895a      	ldrh	r2, [r3, #10]
 800d27a:	69fb      	ldr	r3, [r7, #28]
 800d27c:	891b      	ldrh	r3, [r3, #8]
 800d27e:	429a      	cmp	r2, r3
 800d280:	d10a      	bne.n	800d298 <etharp_query+0x1c0>
 800d282:	69fb      	ldr	r3, [r7, #28]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d006      	beq.n	800d298 <etharp_query+0x1c0>
 800d28a:	4b2a      	ldr	r3, [pc, #168]	@ (800d334 <etharp_query+0x25c>)
 800d28c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800d290:	492f      	ldr	r1, [pc, #188]	@ (800d350 <etharp_query+0x278>)
 800d292:	482a      	ldr	r0, [pc, #168]	@ (800d33c <etharp_query+0x264>)
 800d294:	f003 f88a 	bl	80103ac <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d298:	69fb      	ldr	r3, [r7, #28]
 800d29a:	7b1b      	ldrb	r3, [r3, #12]
 800d29c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d002      	beq.n	800d2aa <etharp_query+0x1d2>
        copy_needed = 1;
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	61bb      	str	r3, [r7, #24]
        break;
 800d2a8:	e005      	b.n	800d2b6 <etharp_query+0x1de>
      }
      p = p->next;
 800d2aa:	69fb      	ldr	r3, [r7, #28]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d2b0:	69fb      	ldr	r3, [r7, #28]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d1df      	bne.n	800d276 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d2b6:	69bb      	ldr	r3, [r7, #24]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d007      	beq.n	800d2cc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d2bc:	687a      	ldr	r2, [r7, #4]
 800d2be:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800d2c2:	200e      	movs	r0, #14
 800d2c4:	f7f8 fed8 	bl	8006078 <pbuf_clone>
 800d2c8:	61f8      	str	r0, [r7, #28]
 800d2ca:	e004      	b.n	800d2d6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d2d0:	69f8      	ldr	r0, [r7, #28]
 800d2d2:	f7f8 fd15 	bl	8005d00 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d2d6:	69fb      	ldr	r3, [r7, #28]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d021      	beq.n	800d320 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d2dc:	7c7a      	ldrb	r2, [r7, #17]
 800d2de:	4918      	ldr	r1, [pc, #96]	@ (800d340 <etharp_query+0x268>)
 800d2e0:	4613      	mov	r3, r2
 800d2e2:	005b      	lsls	r3, r3, #1
 800d2e4:	4413      	add	r3, r2
 800d2e6:	00db      	lsls	r3, r3, #3
 800d2e8:	440b      	add	r3, r1
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d00a      	beq.n	800d306 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d2f0:	7c7a      	ldrb	r2, [r7, #17]
 800d2f2:	4913      	ldr	r1, [pc, #76]	@ (800d340 <etharp_query+0x268>)
 800d2f4:	4613      	mov	r3, r2
 800d2f6:	005b      	lsls	r3, r3, #1
 800d2f8:	4413      	add	r3, r2
 800d2fa:	00db      	lsls	r3, r3, #3
 800d2fc:	440b      	add	r3, r1
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4618      	mov	r0, r3
 800d302:	f7f8 fc5d 	bl	8005bc0 <pbuf_free>
      }
      arp_table[i].q = p;
 800d306:	7c7a      	ldrb	r2, [r7, #17]
 800d308:	490d      	ldr	r1, [pc, #52]	@ (800d340 <etharp_query+0x268>)
 800d30a:	4613      	mov	r3, r2
 800d30c:	005b      	lsls	r3, r3, #1
 800d30e:	4413      	add	r3, r2
 800d310:	00db      	lsls	r3, r3, #3
 800d312:	440b      	add	r3, r1
 800d314:	69fa      	ldr	r2, [r7, #28]
 800d316:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d318:	2300      	movs	r3, #0
 800d31a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d31e:	e002      	b.n	800d326 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d320:	23ff      	movs	r3, #255	@ 0xff
 800d322:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800d326:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3728      	adds	r7, #40	@ 0x28
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}
 800d332:	bf00      	nop
 800d334:	080138e0 	.word	0x080138e0
 800d338:	08013a8c 	.word	0x08013a8c
 800d33c:	08013958 	.word	0x08013958
 800d340:	200083a8 	.word	0x200083a8
 800d344:	08013a9c 	.word	0x08013a9c
 800d348:	08013a80 	.word	0x08013a80
 800d34c:	20008498 	.word	0x20008498
 800d350:	08013ac4 	.word	0x08013ac4

0800d354 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b08a      	sub	sp, #40	@ 0x28
 800d358:	af02      	add	r7, sp, #8
 800d35a:	60f8      	str	r0, [r7, #12]
 800d35c:	60b9      	str	r1, [r7, #8]
 800d35e:	607a      	str	r2, [r7, #4]
 800d360:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d362:	2300      	movs	r3, #0
 800d364:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d106      	bne.n	800d37a <etharp_raw+0x26>
 800d36c:	4b3a      	ldr	r3, [pc, #232]	@ (800d458 <etharp_raw+0x104>)
 800d36e:	f240 4257 	movw	r2, #1111	@ 0x457
 800d372:	493a      	ldr	r1, [pc, #232]	@ (800d45c <etharp_raw+0x108>)
 800d374:	483a      	ldr	r0, [pc, #232]	@ (800d460 <etharp_raw+0x10c>)
 800d376:	f003 f819 	bl	80103ac <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d37a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d37e:	211c      	movs	r1, #28
 800d380:	200e      	movs	r0, #14
 800d382:	f7f8 f939 	bl	80055f8 <pbuf_alloc>
 800d386:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d388:	69bb      	ldr	r3, [r7, #24]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d102      	bne.n	800d394 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d38e:	f04f 33ff 	mov.w	r3, #4294967295
 800d392:	e05d      	b.n	800d450 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d394:	69bb      	ldr	r3, [r7, #24]
 800d396:	895b      	ldrh	r3, [r3, #10]
 800d398:	2b1b      	cmp	r3, #27
 800d39a:	d806      	bhi.n	800d3aa <etharp_raw+0x56>
 800d39c:	4b2e      	ldr	r3, [pc, #184]	@ (800d458 <etharp_raw+0x104>)
 800d39e:	f240 4262 	movw	r2, #1122	@ 0x462
 800d3a2:	4930      	ldr	r1, [pc, #192]	@ (800d464 <etharp_raw+0x110>)
 800d3a4:	482e      	ldr	r0, [pc, #184]	@ (800d460 <etharp_raw+0x10c>)
 800d3a6:	f003 f801 	bl	80103ac <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d3aa:	69bb      	ldr	r3, [r7, #24]
 800d3ac:	685b      	ldr	r3, [r3, #4]
 800d3ae:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d3b0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f7f7 f8a6 	bl	8004504 <lwip_htons>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	461a      	mov	r2, r3
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d3c6:	2b06      	cmp	r3, #6
 800d3c8:	d006      	beq.n	800d3d8 <etharp_raw+0x84>
 800d3ca:	4b23      	ldr	r3, [pc, #140]	@ (800d458 <etharp_raw+0x104>)
 800d3cc:	f240 4269 	movw	r2, #1129	@ 0x469
 800d3d0:	4925      	ldr	r1, [pc, #148]	@ (800d468 <etharp_raw+0x114>)
 800d3d2:	4823      	ldr	r0, [pc, #140]	@ (800d460 <etharp_raw+0x10c>)
 800d3d4:	f002 ffea 	bl	80103ac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	3308      	adds	r3, #8
 800d3dc:	2206      	movs	r2, #6
 800d3de:	6839      	ldr	r1, [r7, #0]
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f003 f90e 	bl	8010602 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	3312      	adds	r3, #18
 800d3ea:	2206      	movs	r2, #6
 800d3ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f003 f907 	bl	8010602 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	330e      	adds	r3, #14
 800d3f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d3fa:	6812      	ldr	r2, [r2, #0]
 800d3fc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	3318      	adds	r3, #24
 800d402:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d404:	6812      	ldr	r2, [r2, #0]
 800d406:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	2200      	movs	r2, #0
 800d40c:	701a      	strb	r2, [r3, #0]
 800d40e:	2200      	movs	r2, #0
 800d410:	f042 0201 	orr.w	r2, r2, #1
 800d414:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	2200      	movs	r2, #0
 800d41a:	f042 0208 	orr.w	r2, r2, #8
 800d41e:	709a      	strb	r2, [r3, #2]
 800d420:	2200      	movs	r2, #0
 800d422:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	2206      	movs	r2, #6
 800d428:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	2204      	movs	r2, #4
 800d42e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d430:	f640 0306 	movw	r3, #2054	@ 0x806
 800d434:	9300      	str	r3, [sp, #0]
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	68ba      	ldr	r2, [r7, #8]
 800d43a:	69b9      	ldr	r1, [r7, #24]
 800d43c:	68f8      	ldr	r0, [r7, #12]
 800d43e:	f001 fb7b 	bl	800eb38 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d442:	69b8      	ldr	r0, [r7, #24]
 800d444:	f7f8 fbbc 	bl	8005bc0 <pbuf_free>
  p = NULL;
 800d448:	2300      	movs	r3, #0
 800d44a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d44c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d450:	4618      	mov	r0, r3
 800d452:	3720      	adds	r7, #32
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}
 800d458:	080138e0 	.word	0x080138e0
 800d45c:	08013a30 	.word	0x08013a30
 800d460:	08013958 	.word	0x08013958
 800d464:	08013ae0 	.word	0x08013ae0
 800d468:	08013b14 	.word	0x08013b14

0800d46c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b088      	sub	sp, #32
 800d470:	af04      	add	r7, sp, #16
 800d472:	60f8      	str	r0, [r7, #12]
 800d474:	60b9      	str	r1, [r7, #8]
 800d476:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d488:	2201      	movs	r2, #1
 800d48a:	9203      	str	r2, [sp, #12]
 800d48c:	68ba      	ldr	r2, [r7, #8]
 800d48e:	9202      	str	r2, [sp, #8]
 800d490:	4a06      	ldr	r2, [pc, #24]	@ (800d4ac <etharp_request_dst+0x40>)
 800d492:	9201      	str	r2, [sp, #4]
 800d494:	9300      	str	r3, [sp, #0]
 800d496:	4603      	mov	r3, r0
 800d498:	687a      	ldr	r2, [r7, #4]
 800d49a:	68f8      	ldr	r0, [r7, #12]
 800d49c:	f7ff ff5a 	bl	800d354 <etharp_raw>
 800d4a0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	3710      	adds	r7, #16
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}
 800d4aa:	bf00      	nop
 800d4ac:	080141c0 	.word	0x080141c0

0800d4b0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b082      	sub	sp, #8
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d4ba:	4a05      	ldr	r2, [pc, #20]	@ (800d4d0 <etharp_request+0x20>)
 800d4bc:	6839      	ldr	r1, [r7, #0]
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f7ff ffd4 	bl	800d46c <etharp_request_dst>
 800d4c4:	4603      	mov	r3, r0
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3708      	adds	r7, #8
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	080141b8 	.word	0x080141b8

0800d4d4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b08e      	sub	sp, #56	@ 0x38
 800d4d8:	af04      	add	r7, sp, #16
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d4de:	4b79      	ldr	r3, [pc, #484]	@ (800d6c4 <icmp_input+0x1f0>)
 800d4e0:	689b      	ldr	r3, [r3, #8]
 800d4e2:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	f003 030f 	and.w	r3, r3, #15
 800d4ec:	b2db      	uxtb	r3, r3
 800d4ee:	009b      	lsls	r3, r3, #2
 800d4f0:	b2db      	uxtb	r3, r3
 800d4f2:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800d4f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d4f6:	2b13      	cmp	r3, #19
 800d4f8:	f240 80cd 	bls.w	800d696 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	895b      	ldrh	r3, [r3, #10]
 800d500:	2b03      	cmp	r3, #3
 800d502:	f240 80ca 	bls.w	800d69a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	685b      	ldr	r3, [r3, #4]
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d510:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d514:	2b00      	cmp	r3, #0
 800d516:	f000 80b7 	beq.w	800d688 <icmp_input+0x1b4>
 800d51a:	2b08      	cmp	r3, #8
 800d51c:	f040 80b7 	bne.w	800d68e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d520:	4b69      	ldr	r3, [pc, #420]	@ (800d6c8 <icmp_input+0x1f4>)
 800d522:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d524:	4b67      	ldr	r3, [pc, #412]	@ (800d6c4 <icmp_input+0x1f0>)
 800d526:	695b      	ldr	r3, [r3, #20]
 800d528:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d52c:	2be0      	cmp	r3, #224	@ 0xe0
 800d52e:	f000 80bb 	beq.w	800d6a8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d532:	4b64      	ldr	r3, [pc, #400]	@ (800d6c4 <icmp_input+0x1f0>)
 800d534:	695b      	ldr	r3, [r3, #20]
 800d536:	4a63      	ldr	r2, [pc, #396]	@ (800d6c4 <icmp_input+0x1f0>)
 800d538:	6812      	ldr	r2, [r2, #0]
 800d53a:	4611      	mov	r1, r2
 800d53c:	4618      	mov	r0, r3
 800d53e:	f000 fbed 	bl	800dd1c <ip4_addr_isbroadcast_u32>
 800d542:	4603      	mov	r3, r0
 800d544:	2b00      	cmp	r3, #0
 800d546:	f040 80b1 	bne.w	800d6ac <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	891b      	ldrh	r3, [r3, #8]
 800d54e:	2b07      	cmp	r3, #7
 800d550:	f240 80a5 	bls.w	800d69e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d554:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d556:	330e      	adds	r3, #14
 800d558:	4619      	mov	r1, r3
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f7f8 fa9a 	bl	8005a94 <pbuf_add_header>
 800d560:	4603      	mov	r3, r0
 800d562:	2b00      	cmp	r3, #0
 800d564:	d04b      	beq.n	800d5fe <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	891a      	ldrh	r2, [r3, #8]
 800d56a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d56c:	4413      	add	r3, r2
 800d56e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	891b      	ldrh	r3, [r3, #8]
 800d574:	8b7a      	ldrh	r2, [r7, #26]
 800d576:	429a      	cmp	r2, r3
 800d578:	f0c0 809a 	bcc.w	800d6b0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d57c:	8b7b      	ldrh	r3, [r7, #26]
 800d57e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d582:	4619      	mov	r1, r3
 800d584:	200e      	movs	r0, #14
 800d586:	f7f8 f837 	bl	80055f8 <pbuf_alloc>
 800d58a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	f000 8090 	beq.w	800d6b4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	895b      	ldrh	r3, [r3, #10]
 800d598:	461a      	mov	r2, r3
 800d59a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d59c:	3308      	adds	r3, #8
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d203      	bcs.n	800d5aa <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d5a2:	6978      	ldr	r0, [r7, #20]
 800d5a4:	f7f8 fb0c 	bl	8005bc0 <pbuf_free>
          goto icmperr;
 800d5a8:	e085      	b.n	800d6b6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d5aa:	697b      	ldr	r3, [r7, #20]
 800d5ac:	685b      	ldr	r3, [r3, #4]
 800d5ae:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d5b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f003 f825 	bl	8010602 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d5b8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	6978      	ldr	r0, [r7, #20]
 800d5be:	f7f8 fa79 	bl	8005ab4 <pbuf_remove_header>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d009      	beq.n	800d5dc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d5c8:	4b40      	ldr	r3, [pc, #256]	@ (800d6cc <icmp_input+0x1f8>)
 800d5ca:	22b6      	movs	r2, #182	@ 0xb6
 800d5cc:	4940      	ldr	r1, [pc, #256]	@ (800d6d0 <icmp_input+0x1fc>)
 800d5ce:	4841      	ldr	r0, [pc, #260]	@ (800d6d4 <icmp_input+0x200>)
 800d5d0:	f002 feec 	bl	80103ac <iprintf>
          pbuf_free(r);
 800d5d4:	6978      	ldr	r0, [r7, #20]
 800d5d6:	f7f8 faf3 	bl	8005bc0 <pbuf_free>
          goto icmperr;
 800d5da:	e06c      	b.n	800d6b6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d5dc:	6879      	ldr	r1, [r7, #4]
 800d5de:	6978      	ldr	r0, [r7, #20]
 800d5e0:	f7f8 fc06 	bl	8005df0 <pbuf_copy>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d003      	beq.n	800d5f2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d5ea:	6978      	ldr	r0, [r7, #20]
 800d5ec:	f7f8 fae8 	bl	8005bc0 <pbuf_free>
          goto icmperr;
 800d5f0:	e061      	b.n	800d6b6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f7f8 fae4 	bl	8005bc0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d5f8:	697b      	ldr	r3, [r7, #20]
 800d5fa:	607b      	str	r3, [r7, #4]
 800d5fc:	e00f      	b.n	800d61e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d5fe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d600:	330e      	adds	r3, #14
 800d602:	4619      	mov	r1, r3
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f7f8 fa55 	bl	8005ab4 <pbuf_remove_header>
 800d60a:	4603      	mov	r3, r0
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d006      	beq.n	800d61e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d610:	4b2e      	ldr	r3, [pc, #184]	@ (800d6cc <icmp_input+0x1f8>)
 800d612:	22c7      	movs	r2, #199	@ 0xc7
 800d614:	4930      	ldr	r1, [pc, #192]	@ (800d6d8 <icmp_input+0x204>)
 800d616:	482f      	ldr	r0, [pc, #188]	@ (800d6d4 <icmp_input+0x200>)
 800d618:	f002 fec8 	bl	80103ac <iprintf>
          goto icmperr;
 800d61c:	e04b      	b.n	800d6b6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	685b      	ldr	r3, [r3, #4]
 800d622:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d624:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d626:	4619      	mov	r1, r3
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f7f8 fa33 	bl	8005a94 <pbuf_add_header>
 800d62e:	4603      	mov	r3, r0
 800d630:	2b00      	cmp	r3, #0
 800d632:	d12b      	bne.n	800d68c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	685b      	ldr	r3, [r3, #4]
 800d638:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d63a:	69fb      	ldr	r3, [r7, #28]
 800d63c:	681a      	ldr	r2, [r3, #0]
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d642:	4b20      	ldr	r3, [pc, #128]	@ (800d6c4 <icmp_input+0x1f0>)
 800d644:	691a      	ldr	r2, [r3, #16]
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	2200      	movs	r2, #0
 800d64e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	2200      	movs	r2, #0
 800d654:	709a      	strb	r2, [r3, #2]
 800d656:	2200      	movs	r2, #0
 800d658:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	22ff      	movs	r2, #255	@ 0xff
 800d65e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	2200      	movs	r2, #0
 800d664:	729a      	strb	r2, [r3, #10]
 800d666:	2200      	movs	r2, #0
 800d668:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	9302      	str	r3, [sp, #8]
 800d66e:	2301      	movs	r3, #1
 800d670:	9301      	str	r3, [sp, #4]
 800d672:	2300      	movs	r3, #0
 800d674:	9300      	str	r3, [sp, #0]
 800d676:	23ff      	movs	r3, #255	@ 0xff
 800d678:	2200      	movs	r2, #0
 800d67a:	69f9      	ldr	r1, [r7, #28]
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f000 fa75 	bl	800db6c <ip4_output_if>
 800d682:	4603      	mov	r3, r0
 800d684:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d686:	e001      	b.n	800d68c <icmp_input+0x1b8>
      break;
 800d688:	bf00      	nop
 800d68a:	e000      	b.n	800d68e <icmp_input+0x1ba>
      break;
 800d68c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f7f8 fa96 	bl	8005bc0 <pbuf_free>
  return;
 800d694:	e013      	b.n	800d6be <icmp_input+0x1ea>
    goto lenerr;
 800d696:	bf00      	nop
 800d698:	e002      	b.n	800d6a0 <icmp_input+0x1cc>
    goto lenerr;
 800d69a:	bf00      	nop
 800d69c:	e000      	b.n	800d6a0 <icmp_input+0x1cc>
        goto lenerr;
 800d69e:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f7f8 fa8d 	bl	8005bc0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d6a6:	e00a      	b.n	800d6be <icmp_input+0x1ea>
        goto icmperr;
 800d6a8:	bf00      	nop
 800d6aa:	e004      	b.n	800d6b6 <icmp_input+0x1e2>
        goto icmperr;
 800d6ac:	bf00      	nop
 800d6ae:	e002      	b.n	800d6b6 <icmp_input+0x1e2>
          goto icmperr;
 800d6b0:	bf00      	nop
 800d6b2:	e000      	b.n	800d6b6 <icmp_input+0x1e2>
          goto icmperr;
 800d6b4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f7f8 fa82 	bl	8005bc0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d6bc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d6be:	3728      	adds	r7, #40	@ 0x28
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}
 800d6c4:	20004dd8 	.word	0x20004dd8
 800d6c8:	20004dec 	.word	0x20004dec
 800d6cc:	08013b58 	.word	0x08013b58
 800d6d0:	08013b90 	.word	0x08013b90
 800d6d4:	08013bc8 	.word	0x08013bc8
 800d6d8:	08013bf0 	.word	0x08013bf0

0800d6dc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b082      	sub	sp, #8
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	460b      	mov	r3, r1
 800d6e6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d6e8:	78fb      	ldrb	r3, [r7, #3]
 800d6ea:	461a      	mov	r2, r3
 800d6ec:	2103      	movs	r1, #3
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f000 f814 	bl	800d71c <icmp_send_response>
}
 800d6f4:	bf00      	nop
 800d6f6:	3708      	adds	r7, #8
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}

0800d6fc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b082      	sub	sp, #8
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	460b      	mov	r3, r1
 800d706:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d708:	78fb      	ldrb	r3, [r7, #3]
 800d70a:	461a      	mov	r2, r3
 800d70c:	210b      	movs	r1, #11
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f000 f804 	bl	800d71c <icmp_send_response>
}
 800d714:	bf00      	nop
 800d716:	3708      	adds	r7, #8
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b08c      	sub	sp, #48	@ 0x30
 800d720:	af04      	add	r7, sp, #16
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	460b      	mov	r3, r1
 800d726:	70fb      	strb	r3, [r7, #3]
 800d728:	4613      	mov	r3, r2
 800d72a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d72c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d730:	2124      	movs	r1, #36	@ 0x24
 800d732:	2022      	movs	r0, #34	@ 0x22
 800d734:	f7f7 ff60 	bl	80055f8 <pbuf_alloc>
 800d738:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d73a:	69fb      	ldr	r3, [r7, #28]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d04c      	beq.n	800d7da <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d740:	69fb      	ldr	r3, [r7, #28]
 800d742:	895b      	ldrh	r3, [r3, #10]
 800d744:	2b23      	cmp	r3, #35	@ 0x23
 800d746:	d806      	bhi.n	800d756 <icmp_send_response+0x3a>
 800d748:	4b26      	ldr	r3, [pc, #152]	@ (800d7e4 <icmp_send_response+0xc8>)
 800d74a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800d74e:	4926      	ldr	r1, [pc, #152]	@ (800d7e8 <icmp_send_response+0xcc>)
 800d750:	4826      	ldr	r0, [pc, #152]	@ (800d7ec <icmp_send_response+0xd0>)
 800d752:	f002 fe2b 	bl	80103ac <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	685b      	ldr	r3, [r3, #4]
 800d75a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d75c:	69fb      	ldr	r3, [r7, #28]
 800d75e:	685b      	ldr	r3, [r3, #4]
 800d760:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	78fa      	ldrb	r2, [r7, #3]
 800d766:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d768:	697b      	ldr	r3, [r7, #20]
 800d76a:	78ba      	ldrb	r2, [r7, #2]
 800d76c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	2200      	movs	r2, #0
 800d772:	711a      	strb	r2, [r3, #4]
 800d774:	2200      	movs	r2, #0
 800d776:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	2200      	movs	r2, #0
 800d77c:	719a      	strb	r2, [r3, #6]
 800d77e:	2200      	movs	r2, #0
 800d780:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d782:	69fb      	ldr	r3, [r7, #28]
 800d784:	685b      	ldr	r3, [r3, #4]
 800d786:	f103 0008 	add.w	r0, r3, #8
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	685b      	ldr	r3, [r3, #4]
 800d78e:	221c      	movs	r2, #28
 800d790:	4619      	mov	r1, r3
 800d792:	f002 ff36 	bl	8010602 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d796:	69bb      	ldr	r3, [r7, #24]
 800d798:	68db      	ldr	r3, [r3, #12]
 800d79a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d79c:	f107 030c 	add.w	r3, r7, #12
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f000 f825 	bl	800d7f0 <ip4_route>
 800d7a6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d011      	beq.n	800d7d2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	709a      	strb	r2, [r3, #2]
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d7b8:	f107 020c 	add.w	r2, r7, #12
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	9302      	str	r3, [sp, #8]
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	9301      	str	r3, [sp, #4]
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	9300      	str	r3, [sp, #0]
 800d7c8:	23ff      	movs	r3, #255	@ 0xff
 800d7ca:	2100      	movs	r1, #0
 800d7cc:	69f8      	ldr	r0, [r7, #28]
 800d7ce:	f000 f9cd 	bl	800db6c <ip4_output_if>
  }
  pbuf_free(q);
 800d7d2:	69f8      	ldr	r0, [r7, #28]
 800d7d4:	f7f8 f9f4 	bl	8005bc0 <pbuf_free>
 800d7d8:	e000      	b.n	800d7dc <icmp_send_response+0xc0>
    return;
 800d7da:	bf00      	nop
}
 800d7dc:	3720      	adds	r7, #32
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	08013b58 	.word	0x08013b58
 800d7e8:	08013c24 	.word	0x08013c24
 800d7ec:	08013bc8 	.word	0x08013bc8

0800d7f0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b085      	sub	sp, #20
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d7f8:	4b33      	ldr	r3, [pc, #204]	@ (800d8c8 <ip4_route+0xd8>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	60fb      	str	r3, [r7, #12]
 800d7fe:	e036      	b.n	800d86e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d806:	f003 0301 	and.w	r3, r3, #1
 800d80a:	b2db      	uxtb	r3, r3
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d02b      	beq.n	800d868 <ip4_route+0x78>
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d816:	089b      	lsrs	r3, r3, #2
 800d818:	f003 0301 	and.w	r3, r3, #1
 800d81c:	b2db      	uxtb	r3, r3
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d022      	beq.n	800d868 <ip4_route+0x78>
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	3304      	adds	r3, #4
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d01d      	beq.n	800d868 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681a      	ldr	r2, [r3, #0]
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	3304      	adds	r3, #4
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	405a      	eors	r2, r3
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	3308      	adds	r3, #8
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	4013      	ands	r3, r2
 800d840:	2b00      	cmp	r3, #0
 800d842:	d101      	bne.n	800d848 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	e038      	b.n	800d8ba <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d84e:	f003 0302 	and.w	r3, r3, #2
 800d852:	2b00      	cmp	r3, #0
 800d854:	d108      	bne.n	800d868 <ip4_route+0x78>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681a      	ldr	r2, [r3, #0]
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	330c      	adds	r3, #12
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	429a      	cmp	r2, r3
 800d862:	d101      	bne.n	800d868 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	e028      	b.n	800d8ba <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	60fb      	str	r3, [r7, #12]
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d1c5      	bne.n	800d800 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d874:	4b15      	ldr	r3, [pc, #84]	@ (800d8cc <ip4_route+0xdc>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d01a      	beq.n	800d8b2 <ip4_route+0xc2>
 800d87c:	4b13      	ldr	r3, [pc, #76]	@ (800d8cc <ip4_route+0xdc>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d884:	f003 0301 	and.w	r3, r3, #1
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d012      	beq.n	800d8b2 <ip4_route+0xc2>
 800d88c:	4b0f      	ldr	r3, [pc, #60]	@ (800d8cc <ip4_route+0xdc>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d894:	f003 0304 	and.w	r3, r3, #4
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d00a      	beq.n	800d8b2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d89c:	4b0b      	ldr	r3, [pc, #44]	@ (800d8cc <ip4_route+0xdc>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	3304      	adds	r3, #4
 800d8a2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d004      	beq.n	800d8b2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	b2db      	uxtb	r3, r3
 800d8ae:	2b7f      	cmp	r3, #127	@ 0x7f
 800d8b0:	d101      	bne.n	800d8b6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	e001      	b.n	800d8ba <ip4_route+0xca>
  }

  return netif_default;
 800d8b6:	4b05      	ldr	r3, [pc, #20]	@ (800d8cc <ip4_route+0xdc>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3714      	adds	r7, #20
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c4:	4770      	bx	lr
 800d8c6:	bf00      	nop
 800d8c8:	2000833c 	.word	0x2000833c
 800d8cc:	20008340 	.word	0x20008340

0800d8d0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b082      	sub	sp, #8
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d8de:	f003 0301 	and.w	r3, r3, #1
 800d8e2:	b2db      	uxtb	r3, r3
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d016      	beq.n	800d916 <ip4_input_accept+0x46>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	3304      	adds	r3, #4
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d011      	beq.n	800d916 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d8f2:	4b0b      	ldr	r3, [pc, #44]	@ (800d920 <ip4_input_accept+0x50>)
 800d8f4:	695a      	ldr	r2, [r3, #20]
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	3304      	adds	r3, #4
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d008      	beq.n	800d912 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d900:	4b07      	ldr	r3, [pc, #28]	@ (800d920 <ip4_input_accept+0x50>)
 800d902:	695b      	ldr	r3, [r3, #20]
 800d904:	6879      	ldr	r1, [r7, #4]
 800d906:	4618      	mov	r0, r3
 800d908:	f000 fa08 	bl	800dd1c <ip4_addr_isbroadcast_u32>
 800d90c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d001      	beq.n	800d916 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d912:	2301      	movs	r3, #1
 800d914:	e000      	b.n	800d918 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d916:	2300      	movs	r3, #0
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3708      	adds	r7, #8
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}
 800d920:	20004dd8 	.word	0x20004dd8

0800d924 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b086      	sub	sp, #24
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	685b      	ldr	r3, [r3, #4]
 800d932:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	781b      	ldrb	r3, [r3, #0]
 800d938:	091b      	lsrs	r3, r3, #4
 800d93a:	b2db      	uxtb	r3, r3
 800d93c:	2b04      	cmp	r3, #4
 800d93e:	d004      	beq.n	800d94a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f7f8 f93d 	bl	8005bc0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d946:	2300      	movs	r3, #0
 800d948:	e107      	b.n	800db5a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	f003 030f 	and.w	r3, r3, #15
 800d952:	b2db      	uxtb	r3, r3
 800d954:	009b      	lsls	r3, r3, #2
 800d956:	b2db      	uxtb	r3, r3
 800d958:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	885b      	ldrh	r3, [r3, #2]
 800d95e:	b29b      	uxth	r3, r3
 800d960:	4618      	mov	r0, r3
 800d962:	f7f6 fdcf 	bl	8004504 <lwip_htons>
 800d966:	4603      	mov	r3, r0
 800d968:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	891b      	ldrh	r3, [r3, #8]
 800d96e:	89ba      	ldrh	r2, [r7, #12]
 800d970:	429a      	cmp	r2, r3
 800d972:	d204      	bcs.n	800d97e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d974:	89bb      	ldrh	r3, [r7, #12]
 800d976:	4619      	mov	r1, r3
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f7f7 ff9b 	bl	80058b4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	895b      	ldrh	r3, [r3, #10]
 800d982:	89fa      	ldrh	r2, [r7, #14]
 800d984:	429a      	cmp	r2, r3
 800d986:	d807      	bhi.n	800d998 <ip4_input+0x74>
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	891b      	ldrh	r3, [r3, #8]
 800d98c:	89ba      	ldrh	r2, [r7, #12]
 800d98e:	429a      	cmp	r2, r3
 800d990:	d802      	bhi.n	800d998 <ip4_input+0x74>
 800d992:	89fb      	ldrh	r3, [r7, #14]
 800d994:	2b13      	cmp	r3, #19
 800d996:	d804      	bhi.n	800d9a2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f7f8 f911 	bl	8005bc0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	e0db      	b.n	800db5a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	691b      	ldr	r3, [r3, #16]
 800d9a6:	4a6f      	ldr	r2, [pc, #444]	@ (800db64 <ip4_input+0x240>)
 800d9a8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d9aa:	697b      	ldr	r3, [r7, #20]
 800d9ac:	68db      	ldr	r3, [r3, #12]
 800d9ae:	4a6d      	ldr	r2, [pc, #436]	@ (800db64 <ip4_input+0x240>)
 800d9b0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d9b2:	4b6c      	ldr	r3, [pc, #432]	@ (800db64 <ip4_input+0x240>)
 800d9b4:	695b      	ldr	r3, [r3, #20]
 800d9b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d9ba:	2be0      	cmp	r3, #224	@ 0xe0
 800d9bc:	d112      	bne.n	800d9e4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d9c4:	f003 0301 	and.w	r3, r3, #1
 800d9c8:	b2db      	uxtb	r3, r3
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d007      	beq.n	800d9de <ip4_input+0xba>
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	3304      	adds	r3, #4
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d002      	beq.n	800d9de <ip4_input+0xba>
      netif = inp;
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	613b      	str	r3, [r7, #16]
 800d9dc:	e02a      	b.n	800da34 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	613b      	str	r3, [r7, #16]
 800d9e2:	e027      	b.n	800da34 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d9e4:	6838      	ldr	r0, [r7, #0]
 800d9e6:	f7ff ff73 	bl	800d8d0 <ip4_input_accept>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d002      	beq.n	800d9f6 <ip4_input+0xd2>
      netif = inp;
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	613b      	str	r3, [r7, #16]
 800d9f4:	e01e      	b.n	800da34 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d9fa:	4b5a      	ldr	r3, [pc, #360]	@ (800db64 <ip4_input+0x240>)
 800d9fc:	695b      	ldr	r3, [r3, #20]
 800d9fe:	b2db      	uxtb	r3, r3
 800da00:	2b7f      	cmp	r3, #127	@ 0x7f
 800da02:	d017      	beq.n	800da34 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800da04:	4b58      	ldr	r3, [pc, #352]	@ (800db68 <ip4_input+0x244>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	613b      	str	r3, [r7, #16]
 800da0a:	e00e      	b.n	800da2a <ip4_input+0x106>
          if (netif == inp) {
 800da0c:	693a      	ldr	r2, [r7, #16]
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	429a      	cmp	r2, r3
 800da12:	d006      	beq.n	800da22 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800da14:	6938      	ldr	r0, [r7, #16]
 800da16:	f7ff ff5b 	bl	800d8d0 <ip4_input_accept>
 800da1a:	4603      	mov	r3, r0
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d108      	bne.n	800da32 <ip4_input+0x10e>
 800da20:	e000      	b.n	800da24 <ip4_input+0x100>
            continue;
 800da22:	bf00      	nop
        NETIF_FOREACH(netif) {
 800da24:	693b      	ldr	r3, [r7, #16]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	613b      	str	r3, [r7, #16]
 800da2a:	693b      	ldr	r3, [r7, #16]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d1ed      	bne.n	800da0c <ip4_input+0xe8>
 800da30:	e000      	b.n	800da34 <ip4_input+0x110>
            break;
 800da32:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800da34:	4b4b      	ldr	r3, [pc, #300]	@ (800db64 <ip4_input+0x240>)
 800da36:	691b      	ldr	r3, [r3, #16]
 800da38:	6839      	ldr	r1, [r7, #0]
 800da3a:	4618      	mov	r0, r3
 800da3c:	f000 f96e 	bl	800dd1c <ip4_addr_isbroadcast_u32>
 800da40:	4603      	mov	r3, r0
 800da42:	2b00      	cmp	r3, #0
 800da44:	d105      	bne.n	800da52 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800da46:	4b47      	ldr	r3, [pc, #284]	@ (800db64 <ip4_input+0x240>)
 800da48:	691b      	ldr	r3, [r3, #16]
 800da4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800da4e:	2be0      	cmp	r3, #224	@ 0xe0
 800da50:	d104      	bne.n	800da5c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f7f8 f8b4 	bl	8005bc0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800da58:	2300      	movs	r3, #0
 800da5a:	e07e      	b.n	800db5a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800da5c:	693b      	ldr	r3, [r7, #16]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d104      	bne.n	800da6c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f7f8 f8ac 	bl	8005bc0 <pbuf_free>
    return ERR_OK;
 800da68:	2300      	movs	r3, #0
 800da6a:	e076      	b.n	800db5a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	88db      	ldrh	r3, [r3, #6]
 800da70:	b29b      	uxth	r3, r3
 800da72:	461a      	mov	r2, r3
 800da74:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800da78:	4013      	ands	r3, r2
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d00b      	beq.n	800da96 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f000 fc92 	bl	800e3a8 <ip4_reass>
 800da84:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d101      	bne.n	800da90 <ip4_input+0x16c>
      return ERR_OK;
 800da8c:	2300      	movs	r3, #0
 800da8e:	e064      	b.n	800db5a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	685b      	ldr	r3, [r3, #4]
 800da94:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800da96:	4a33      	ldr	r2, [pc, #204]	@ (800db64 <ip4_input+0x240>)
 800da98:	693b      	ldr	r3, [r7, #16]
 800da9a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800da9c:	4a31      	ldr	r2, [pc, #196]	@ (800db64 <ip4_input+0x240>)
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800daa2:	4a30      	ldr	r2, [pc, #192]	@ (800db64 <ip4_input+0x240>)
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	f003 030f 	and.w	r3, r3, #15
 800dab0:	b2db      	uxtb	r3, r3
 800dab2:	009b      	lsls	r3, r3, #2
 800dab4:	b2db      	uxtb	r3, r3
 800dab6:	461a      	mov	r2, r3
 800dab8:	4b2a      	ldr	r3, [pc, #168]	@ (800db64 <ip4_input+0x240>)
 800daba:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800dabc:	89fb      	ldrh	r3, [r7, #14]
 800dabe:	4619      	mov	r1, r3
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f7f7 fff7 	bl	8005ab4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	7a5b      	ldrb	r3, [r3, #9]
 800daca:	2b11      	cmp	r3, #17
 800dacc:	d006      	beq.n	800dadc <ip4_input+0x1b8>
 800dace:	2b11      	cmp	r3, #17
 800dad0:	dc13      	bgt.n	800dafa <ip4_input+0x1d6>
 800dad2:	2b01      	cmp	r3, #1
 800dad4:	d00c      	beq.n	800daf0 <ip4_input+0x1cc>
 800dad6:	2b06      	cmp	r3, #6
 800dad8:	d005      	beq.n	800dae6 <ip4_input+0x1c2>
 800dada:	e00e      	b.n	800dafa <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800dadc:	6839      	ldr	r1, [r7, #0]
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f7fe fc68 	bl	800c3b4 <udp_input>
        break;
 800dae4:	e026      	b.n	800db34 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800dae6:	6839      	ldr	r1, [r7, #0]
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f7fa f88f 	bl	8007c0c <tcp_input>
        break;
 800daee:	e021      	b.n	800db34 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800daf0:	6839      	ldr	r1, [r7, #0]
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f7ff fcee 	bl	800d4d4 <icmp_input>
        break;
 800daf8:	e01c      	b.n	800db34 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800dafa:	4b1a      	ldr	r3, [pc, #104]	@ (800db64 <ip4_input+0x240>)
 800dafc:	695b      	ldr	r3, [r3, #20]
 800dafe:	6939      	ldr	r1, [r7, #16]
 800db00:	4618      	mov	r0, r3
 800db02:	f000 f90b 	bl	800dd1c <ip4_addr_isbroadcast_u32>
 800db06:	4603      	mov	r3, r0
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d10f      	bne.n	800db2c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800db0c:	4b15      	ldr	r3, [pc, #84]	@ (800db64 <ip4_input+0x240>)
 800db0e:	695b      	ldr	r3, [r3, #20]
 800db10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800db14:	2be0      	cmp	r3, #224	@ 0xe0
 800db16:	d009      	beq.n	800db2c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800db18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800db1c:	4619      	mov	r1, r3
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f7f8 f83b 	bl	8005b9a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800db24:	2102      	movs	r1, #2
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f7ff fdd8 	bl	800d6dc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800db2c:	6878      	ldr	r0, [r7, #4]
 800db2e:	f7f8 f847 	bl	8005bc0 <pbuf_free>
        break;
 800db32:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800db34:	4b0b      	ldr	r3, [pc, #44]	@ (800db64 <ip4_input+0x240>)
 800db36:	2200      	movs	r2, #0
 800db38:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800db3a:	4b0a      	ldr	r3, [pc, #40]	@ (800db64 <ip4_input+0x240>)
 800db3c:	2200      	movs	r2, #0
 800db3e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800db40:	4b08      	ldr	r3, [pc, #32]	@ (800db64 <ip4_input+0x240>)
 800db42:	2200      	movs	r2, #0
 800db44:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800db46:	4b07      	ldr	r3, [pc, #28]	@ (800db64 <ip4_input+0x240>)
 800db48:	2200      	movs	r2, #0
 800db4a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800db4c:	4b05      	ldr	r3, [pc, #20]	@ (800db64 <ip4_input+0x240>)
 800db4e:	2200      	movs	r2, #0
 800db50:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800db52:	4b04      	ldr	r3, [pc, #16]	@ (800db64 <ip4_input+0x240>)
 800db54:	2200      	movs	r2, #0
 800db56:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800db58:	2300      	movs	r3, #0
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3718      	adds	r7, #24
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}
 800db62:	bf00      	nop
 800db64:	20004dd8 	.word	0x20004dd8
 800db68:	2000833c 	.word	0x2000833c

0800db6c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b08a      	sub	sp, #40	@ 0x28
 800db70:	af04      	add	r7, sp, #16
 800db72:	60f8      	str	r0, [r7, #12]
 800db74:	60b9      	str	r1, [r7, #8]
 800db76:	607a      	str	r2, [r7, #4]
 800db78:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d009      	beq.n	800db98 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d003      	beq.n	800db92 <ip4_output_if+0x26>
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d102      	bne.n	800db98 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800db92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db94:	3304      	adds	r3, #4
 800db96:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800db98:	78fa      	ldrb	r2, [r7, #3]
 800db9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db9c:	9302      	str	r3, [sp, #8]
 800db9e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dba2:	9301      	str	r3, [sp, #4]
 800dba4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dba8:	9300      	str	r3, [sp, #0]
 800dbaa:	4613      	mov	r3, r2
 800dbac:	687a      	ldr	r2, [r7, #4]
 800dbae:	6979      	ldr	r1, [r7, #20]
 800dbb0:	68f8      	ldr	r0, [r7, #12]
 800dbb2:	f000 f805 	bl	800dbc0 <ip4_output_if_src>
 800dbb6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	3718      	adds	r7, #24
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}

0800dbc0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b088      	sub	sp, #32
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	60f8      	str	r0, [r7, #12]
 800dbc8:	60b9      	str	r1, [r7, #8]
 800dbca:	607a      	str	r2, [r7, #4]
 800dbcc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	7b9b      	ldrb	r3, [r3, #14]
 800dbd2:	2b01      	cmp	r3, #1
 800dbd4:	d006      	beq.n	800dbe4 <ip4_output_if_src+0x24>
 800dbd6:	4b4b      	ldr	r3, [pc, #300]	@ (800dd04 <ip4_output_if_src+0x144>)
 800dbd8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800dbdc:	494a      	ldr	r1, [pc, #296]	@ (800dd08 <ip4_output_if_src+0x148>)
 800dbde:	484b      	ldr	r0, [pc, #300]	@ (800dd0c <ip4_output_if_src+0x14c>)
 800dbe0:	f002 fbe4 	bl	80103ac <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d060      	beq.n	800dcac <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800dbea:	2314      	movs	r3, #20
 800dbec:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800dbee:	2114      	movs	r1, #20
 800dbf0:	68f8      	ldr	r0, [r7, #12]
 800dbf2:	f7f7 ff4f 	bl	8005a94 <pbuf_add_header>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d002      	beq.n	800dc02 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800dbfc:	f06f 0301 	mvn.w	r3, #1
 800dc00:	e07c      	b.n	800dcfc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	685b      	ldr	r3, [r3, #4]
 800dc06:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	895b      	ldrh	r3, [r3, #10]
 800dc0c:	2b13      	cmp	r3, #19
 800dc0e:	d806      	bhi.n	800dc1e <ip4_output_if_src+0x5e>
 800dc10:	4b3c      	ldr	r3, [pc, #240]	@ (800dd04 <ip4_output_if_src+0x144>)
 800dc12:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800dc16:	493e      	ldr	r1, [pc, #248]	@ (800dd10 <ip4_output_if_src+0x150>)
 800dc18:	483c      	ldr	r0, [pc, #240]	@ (800dd0c <ip4_output_if_src+0x14c>)
 800dc1a:	f002 fbc7 	bl	80103ac <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800dc1e:	69fb      	ldr	r3, [r7, #28]
 800dc20:	78fa      	ldrb	r2, [r7, #3]
 800dc22:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800dc24:	69fb      	ldr	r3, [r7, #28]
 800dc26:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800dc2a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681a      	ldr	r2, [r3, #0]
 800dc30:	69fb      	ldr	r3, [r7, #28]
 800dc32:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800dc34:	8b7b      	ldrh	r3, [r7, #26]
 800dc36:	089b      	lsrs	r3, r3, #2
 800dc38:	b29b      	uxth	r3, r3
 800dc3a:	b2db      	uxtb	r3, r3
 800dc3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc40:	b2da      	uxtb	r2, r3
 800dc42:	69fb      	ldr	r3, [r7, #28]
 800dc44:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800dc46:	69fb      	ldr	r3, [r7, #28]
 800dc48:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800dc4c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	891b      	ldrh	r3, [r3, #8]
 800dc52:	4618      	mov	r0, r3
 800dc54:	f7f6 fc56 	bl	8004504 <lwip_htons>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	461a      	mov	r2, r3
 800dc5c:	69fb      	ldr	r3, [r7, #28]
 800dc5e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800dc60:	69fb      	ldr	r3, [r7, #28]
 800dc62:	2200      	movs	r2, #0
 800dc64:	719a      	strb	r2, [r3, #6]
 800dc66:	2200      	movs	r2, #0
 800dc68:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800dc6a:	4b2a      	ldr	r3, [pc, #168]	@ (800dd14 <ip4_output_if_src+0x154>)
 800dc6c:	881b      	ldrh	r3, [r3, #0]
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7f6 fc48 	bl	8004504 <lwip_htons>
 800dc74:	4603      	mov	r3, r0
 800dc76:	461a      	mov	r2, r3
 800dc78:	69fb      	ldr	r3, [r7, #28]
 800dc7a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800dc7c:	4b25      	ldr	r3, [pc, #148]	@ (800dd14 <ip4_output_if_src+0x154>)
 800dc7e:	881b      	ldrh	r3, [r3, #0]
 800dc80:	3301      	adds	r3, #1
 800dc82:	b29a      	uxth	r2, r3
 800dc84:	4b23      	ldr	r3, [pc, #140]	@ (800dd14 <ip4_output_if_src+0x154>)
 800dc86:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d104      	bne.n	800dc98 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800dc8e:	4b22      	ldr	r3, [pc, #136]	@ (800dd18 <ip4_output_if_src+0x158>)
 800dc90:	681a      	ldr	r2, [r3, #0]
 800dc92:	69fb      	ldr	r3, [r7, #28]
 800dc94:	60da      	str	r2, [r3, #12]
 800dc96:	e003      	b.n	800dca0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	681a      	ldr	r2, [r3, #0]
 800dc9c:	69fb      	ldr	r3, [r7, #28]
 800dc9e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800dca0:	69fb      	ldr	r3, [r7, #28]
 800dca2:	2200      	movs	r2, #0
 800dca4:	729a      	strb	r2, [r3, #10]
 800dca6:	2200      	movs	r2, #0
 800dca8:	72da      	strb	r2, [r3, #11]
 800dcaa:	e00f      	b.n	800dccc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	895b      	ldrh	r3, [r3, #10]
 800dcb0:	2b13      	cmp	r3, #19
 800dcb2:	d802      	bhi.n	800dcba <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800dcb4:	f06f 0301 	mvn.w	r3, #1
 800dcb8:	e020      	b.n	800dcfc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	685b      	ldr	r3, [r3, #4]
 800dcbe:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800dcc0:	69fb      	ldr	r3, [r7, #28]
 800dcc2:	691b      	ldr	r3, [r3, #16]
 800dcc4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800dcc6:	f107 0314 	add.w	r3, r7, #20
 800dcca:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800dccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcce:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d00c      	beq.n	800dcee <ip4_output_if_src+0x12e>
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	891a      	ldrh	r2, [r3, #8]
 800dcd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcda:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800dcdc:	429a      	cmp	r2, r3
 800dcde:	d906      	bls.n	800dcee <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800dce0:	687a      	ldr	r2, [r7, #4]
 800dce2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dce4:	68f8      	ldr	r0, [r7, #12]
 800dce6:	f000 fd53 	bl	800e790 <ip4_frag>
 800dcea:	4603      	mov	r3, r0
 800dcec:	e006      	b.n	800dcfc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800dcee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcf0:	695b      	ldr	r3, [r3, #20]
 800dcf2:	687a      	ldr	r2, [r7, #4]
 800dcf4:	68f9      	ldr	r1, [r7, #12]
 800dcf6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dcf8:	4798      	blx	r3
 800dcfa:	4603      	mov	r3, r0
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	3720      	adds	r7, #32
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}
 800dd04:	08013c50 	.word	0x08013c50
 800dd08:	08013c84 	.word	0x08013c84
 800dd0c:	08013c90 	.word	0x08013c90
 800dd10:	08013cb8 	.word	0x08013cb8
 800dd14:	2000849a 	.word	0x2000849a
 800dd18:	080141b4 	.word	0x080141b4

0800dd1c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b085      	sub	sp, #20
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
 800dd24:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd30:	d002      	beq.n	800dd38 <ip4_addr_isbroadcast_u32+0x1c>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d101      	bne.n	800dd3c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800dd38:	2301      	movs	r3, #1
 800dd3a:	e02a      	b.n	800dd92 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dd42:	f003 0302 	and.w	r3, r3, #2
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d101      	bne.n	800dd4e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	e021      	b.n	800dd92 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	3304      	adds	r3, #4
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	687a      	ldr	r2, [r7, #4]
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d101      	bne.n	800dd5e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	e019      	b.n	800dd92 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800dd5e:	68fa      	ldr	r2, [r7, #12]
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	3304      	adds	r3, #4
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	405a      	eors	r2, r3
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	3308      	adds	r3, #8
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	4013      	ands	r3, r2
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d10d      	bne.n	800dd90 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	3308      	adds	r3, #8
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	43da      	mvns	r2, r3
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	3308      	adds	r3, #8
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d101      	bne.n	800dd90 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	e000      	b.n	800dd92 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800dd90:	2300      	movs	r3, #0
  }
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3714      	adds	r7, #20
 800dd96:	46bd      	mov	sp, r7
 800dd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9c:	4770      	bx	lr
	...

0800dda0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b084      	sub	sp, #16
 800dda4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800dda6:	2300      	movs	r3, #0
 800dda8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800ddaa:	4b12      	ldr	r3, [pc, #72]	@ (800ddf4 <ip_reass_tmr+0x54>)
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800ddb0:	e018      	b.n	800dde4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	7fdb      	ldrb	r3, [r3, #31]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d00b      	beq.n	800ddd2 <ip_reass_tmr+0x32>
      r->timer--;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	7fdb      	ldrb	r3, [r3, #31]
 800ddbe:	3b01      	subs	r3, #1
 800ddc0:	b2da      	uxtb	r2, r3
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	60fb      	str	r3, [r7, #12]
 800ddd0:	e008      	b.n	800dde4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800dddc:	68b9      	ldr	r1, [r7, #8]
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f000 f80a 	bl	800ddf8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d1e3      	bne.n	800ddb2 <ip_reass_tmr+0x12>
    }
  }
}
 800ddea:	bf00      	nop
 800ddec:	bf00      	nop
 800ddee:	3710      	adds	r7, #16
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}
 800ddf4:	2000849c 	.word	0x2000849c

0800ddf8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b088      	sub	sp, #32
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800de02:	2300      	movs	r3, #0
 800de04:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800de06:	683a      	ldr	r2, [r7, #0]
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d105      	bne.n	800de1a <ip_reass_free_complete_datagram+0x22>
 800de0e:	4b45      	ldr	r3, [pc, #276]	@ (800df24 <ip_reass_free_complete_datagram+0x12c>)
 800de10:	22ab      	movs	r2, #171	@ 0xab
 800de12:	4945      	ldr	r1, [pc, #276]	@ (800df28 <ip_reass_free_complete_datagram+0x130>)
 800de14:	4845      	ldr	r0, [pc, #276]	@ (800df2c <ip_reass_free_complete_datagram+0x134>)
 800de16:	f002 fac9 	bl	80103ac <iprintf>
  if (prev != NULL) {
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d00a      	beq.n	800de36 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	687a      	ldr	r2, [r7, #4]
 800de26:	429a      	cmp	r2, r3
 800de28:	d005      	beq.n	800de36 <ip_reass_free_complete_datagram+0x3e>
 800de2a:	4b3e      	ldr	r3, [pc, #248]	@ (800df24 <ip_reass_free_complete_datagram+0x12c>)
 800de2c:	22ad      	movs	r2, #173	@ 0xad
 800de2e:	4940      	ldr	r1, [pc, #256]	@ (800df30 <ip_reass_free_complete_datagram+0x138>)
 800de30:	483e      	ldr	r0, [pc, #248]	@ (800df2c <ip_reass_free_complete_datagram+0x134>)
 800de32:	f002 fabb 	bl	80103ac <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	685b      	ldr	r3, [r3, #4]
 800de3a:	685b      	ldr	r3, [r3, #4]
 800de3c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	889b      	ldrh	r3, [r3, #4]
 800de42:	b29b      	uxth	r3, r3
 800de44:	2b00      	cmp	r3, #0
 800de46:	d12a      	bne.n	800de9e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	685b      	ldr	r3, [r3, #4]
 800de4c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	681a      	ldr	r2, [r3, #0]
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800de56:	69bb      	ldr	r3, [r7, #24]
 800de58:	6858      	ldr	r0, [r3, #4]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	3308      	adds	r3, #8
 800de5e:	2214      	movs	r2, #20
 800de60:	4619      	mov	r1, r3
 800de62:	f002 fbce 	bl	8010602 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800de66:	2101      	movs	r1, #1
 800de68:	69b8      	ldr	r0, [r7, #24]
 800de6a:	f7ff fc47 	bl	800d6fc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800de6e:	69b8      	ldr	r0, [r7, #24]
 800de70:	f7f7 ff2e 	bl	8005cd0 <pbuf_clen>
 800de74:	4603      	mov	r3, r0
 800de76:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800de78:	8bfa      	ldrh	r2, [r7, #30]
 800de7a:	8a7b      	ldrh	r3, [r7, #18]
 800de7c:	4413      	add	r3, r2
 800de7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800de82:	db05      	blt.n	800de90 <ip_reass_free_complete_datagram+0x98>
 800de84:	4b27      	ldr	r3, [pc, #156]	@ (800df24 <ip_reass_free_complete_datagram+0x12c>)
 800de86:	22bc      	movs	r2, #188	@ 0xbc
 800de88:	492a      	ldr	r1, [pc, #168]	@ (800df34 <ip_reass_free_complete_datagram+0x13c>)
 800de8a:	4828      	ldr	r0, [pc, #160]	@ (800df2c <ip_reass_free_complete_datagram+0x134>)
 800de8c:	f002 fa8e 	bl	80103ac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800de90:	8bfa      	ldrh	r2, [r7, #30]
 800de92:	8a7b      	ldrh	r3, [r7, #18]
 800de94:	4413      	add	r3, r2
 800de96:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800de98:	69b8      	ldr	r0, [r7, #24]
 800de9a:	f7f7 fe91 	bl	8005bc0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	685b      	ldr	r3, [r3, #4]
 800dea2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800dea4:	e01f      	b.n	800dee6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800dea6:	69bb      	ldr	r3, [r7, #24]
 800dea8:	685b      	ldr	r3, [r3, #4]
 800deaa:	617b      	str	r3, [r7, #20]
    pcur = p;
 800deac:	69bb      	ldr	r3, [r7, #24]
 800deae:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800deb6:	68f8      	ldr	r0, [r7, #12]
 800deb8:	f7f7 ff0a 	bl	8005cd0 <pbuf_clen>
 800debc:	4603      	mov	r3, r0
 800debe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800dec0:	8bfa      	ldrh	r2, [r7, #30]
 800dec2:	8a7b      	ldrh	r3, [r7, #18]
 800dec4:	4413      	add	r3, r2
 800dec6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800deca:	db05      	blt.n	800ded8 <ip_reass_free_complete_datagram+0xe0>
 800decc:	4b15      	ldr	r3, [pc, #84]	@ (800df24 <ip_reass_free_complete_datagram+0x12c>)
 800dece:	22cc      	movs	r2, #204	@ 0xcc
 800ded0:	4918      	ldr	r1, [pc, #96]	@ (800df34 <ip_reass_free_complete_datagram+0x13c>)
 800ded2:	4816      	ldr	r0, [pc, #88]	@ (800df2c <ip_reass_free_complete_datagram+0x134>)
 800ded4:	f002 fa6a 	bl	80103ac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ded8:	8bfa      	ldrh	r2, [r7, #30]
 800deda:	8a7b      	ldrh	r3, [r7, #18]
 800dedc:	4413      	add	r3, r2
 800dede:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800dee0:	68f8      	ldr	r0, [r7, #12]
 800dee2:	f7f7 fe6d 	bl	8005bc0 <pbuf_free>
  while (p != NULL) {
 800dee6:	69bb      	ldr	r3, [r7, #24]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d1dc      	bne.n	800dea6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800deec:	6839      	ldr	r1, [r7, #0]
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f000 f8c2 	bl	800e078 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800def4:	4b10      	ldr	r3, [pc, #64]	@ (800df38 <ip_reass_free_complete_datagram+0x140>)
 800def6:	881b      	ldrh	r3, [r3, #0]
 800def8:	8bfa      	ldrh	r2, [r7, #30]
 800defa:	429a      	cmp	r2, r3
 800defc:	d905      	bls.n	800df0a <ip_reass_free_complete_datagram+0x112>
 800defe:	4b09      	ldr	r3, [pc, #36]	@ (800df24 <ip_reass_free_complete_datagram+0x12c>)
 800df00:	22d2      	movs	r2, #210	@ 0xd2
 800df02:	490e      	ldr	r1, [pc, #56]	@ (800df3c <ip_reass_free_complete_datagram+0x144>)
 800df04:	4809      	ldr	r0, [pc, #36]	@ (800df2c <ip_reass_free_complete_datagram+0x134>)
 800df06:	f002 fa51 	bl	80103ac <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800df0a:	4b0b      	ldr	r3, [pc, #44]	@ (800df38 <ip_reass_free_complete_datagram+0x140>)
 800df0c:	881a      	ldrh	r2, [r3, #0]
 800df0e:	8bfb      	ldrh	r3, [r7, #30]
 800df10:	1ad3      	subs	r3, r2, r3
 800df12:	b29a      	uxth	r2, r3
 800df14:	4b08      	ldr	r3, [pc, #32]	@ (800df38 <ip_reass_free_complete_datagram+0x140>)
 800df16:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800df18:	8bfb      	ldrh	r3, [r7, #30]
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3720      	adds	r7, #32
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
 800df22:	bf00      	nop
 800df24:	08013ce8 	.word	0x08013ce8
 800df28:	08013d24 	.word	0x08013d24
 800df2c:	08013d30 	.word	0x08013d30
 800df30:	08013d58 	.word	0x08013d58
 800df34:	08013d6c 	.word	0x08013d6c
 800df38:	200084a0 	.word	0x200084a0
 800df3c:	08013d8c 	.word	0x08013d8c

0800df40 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b08a      	sub	sp, #40	@ 0x28
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800df4a:	2300      	movs	r3, #0
 800df4c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800df4e:	2300      	movs	r3, #0
 800df50:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800df52:	2300      	movs	r3, #0
 800df54:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800df56:	2300      	movs	r3, #0
 800df58:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800df5a:	2300      	movs	r3, #0
 800df5c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800df5e:	4b28      	ldr	r3, [pc, #160]	@ (800e000 <ip_reass_remove_oldest_datagram+0xc0>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800df64:	e030      	b.n	800dfc8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800df66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df68:	695a      	ldr	r2, [r3, #20]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	68db      	ldr	r3, [r3, #12]
 800df6e:	429a      	cmp	r2, r3
 800df70:	d10c      	bne.n	800df8c <ip_reass_remove_oldest_datagram+0x4c>
 800df72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df74:	699a      	ldr	r2, [r3, #24]
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	691b      	ldr	r3, [r3, #16]
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d106      	bne.n	800df8c <ip_reass_remove_oldest_datagram+0x4c>
 800df7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df80:	899a      	ldrh	r2, [r3, #12]
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	889b      	ldrh	r3, [r3, #4]
 800df86:	b29b      	uxth	r3, r3
 800df88:	429a      	cmp	r2, r3
 800df8a:	d014      	beq.n	800dfb6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800df8c:	693b      	ldr	r3, [r7, #16]
 800df8e:	3301      	adds	r3, #1
 800df90:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800df92:	6a3b      	ldr	r3, [r7, #32]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d104      	bne.n	800dfa2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800df98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df9a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800df9c:	69fb      	ldr	r3, [r7, #28]
 800df9e:	61bb      	str	r3, [r7, #24]
 800dfa0:	e009      	b.n	800dfb6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800dfa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfa4:	7fda      	ldrb	r2, [r3, #31]
 800dfa6:	6a3b      	ldr	r3, [r7, #32]
 800dfa8:	7fdb      	ldrb	r3, [r3, #31]
 800dfaa:	429a      	cmp	r2, r3
 800dfac:	d803      	bhi.n	800dfb6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800dfae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfb0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800dfb2:	69fb      	ldr	r3, [r7, #28]
 800dfb4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800dfb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d001      	beq.n	800dfc2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800dfbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfc0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800dfc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800dfc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d1cb      	bne.n	800df66 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800dfce:	6a3b      	ldr	r3, [r7, #32]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d008      	beq.n	800dfe6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800dfd4:	69b9      	ldr	r1, [r7, #24]
 800dfd6:	6a38      	ldr	r0, [r7, #32]
 800dfd8:	f7ff ff0e 	bl	800ddf8 <ip_reass_free_complete_datagram>
 800dfdc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800dfde:	697a      	ldr	r2, [r7, #20]
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	4413      	add	r3, r2
 800dfe4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800dfe6:	697a      	ldr	r2, [r7, #20]
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	429a      	cmp	r2, r3
 800dfec:	da02      	bge.n	800dff4 <ip_reass_remove_oldest_datagram+0xb4>
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	2b01      	cmp	r3, #1
 800dff2:	dcac      	bgt.n	800df4e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800dff4:	697b      	ldr	r3, [r7, #20]
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	3728      	adds	r7, #40	@ 0x28
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}
 800dffe:	bf00      	nop
 800e000:	2000849c 	.word	0x2000849c

0800e004 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b084      	sub	sp, #16
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
 800e00c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e00e:	2004      	movs	r0, #4
 800e010:	f7f6 fef0 	bl	8004df4 <memp_malloc>
 800e014:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d110      	bne.n	800e03e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e01c:	6839      	ldr	r1, [r7, #0]
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f7ff ff8e 	bl	800df40 <ip_reass_remove_oldest_datagram>
 800e024:	4602      	mov	r2, r0
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	4293      	cmp	r3, r2
 800e02a:	dc03      	bgt.n	800e034 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e02c:	2004      	movs	r0, #4
 800e02e:	f7f6 fee1 	bl	8004df4 <memp_malloc>
 800e032:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d101      	bne.n	800e03e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e03a:	2300      	movs	r3, #0
 800e03c:	e016      	b.n	800e06c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e03e:	2220      	movs	r2, #32
 800e040:	2100      	movs	r1, #0
 800e042:	68f8      	ldr	r0, [r7, #12]
 800e044:	f002 fa67 	bl	8010516 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	220f      	movs	r2, #15
 800e04c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e04e:	4b09      	ldr	r3, [pc, #36]	@ (800e074 <ip_reass_enqueue_new_datagram+0x70>)
 800e050:	681a      	ldr	r2, [r3, #0]
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e056:	4a07      	ldr	r2, [pc, #28]	@ (800e074 <ip_reass_enqueue_new_datagram+0x70>)
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	3308      	adds	r3, #8
 800e060:	2214      	movs	r2, #20
 800e062:	6879      	ldr	r1, [r7, #4]
 800e064:	4618      	mov	r0, r3
 800e066:	f002 facc 	bl	8010602 <memcpy>
  return ipr;
 800e06a:	68fb      	ldr	r3, [r7, #12]
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3710      	adds	r7, #16
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}
 800e074:	2000849c 	.word	0x2000849c

0800e078 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
 800e080:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e082:	4b10      	ldr	r3, [pc, #64]	@ (800e0c4 <ip_reass_dequeue_datagram+0x4c>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	687a      	ldr	r2, [r7, #4]
 800e088:	429a      	cmp	r2, r3
 800e08a:	d104      	bne.n	800e096 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	4a0c      	ldr	r2, [pc, #48]	@ (800e0c4 <ip_reass_dequeue_datagram+0x4c>)
 800e092:	6013      	str	r3, [r2, #0]
 800e094:	e00d      	b.n	800e0b2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d106      	bne.n	800e0aa <ip_reass_dequeue_datagram+0x32>
 800e09c:	4b0a      	ldr	r3, [pc, #40]	@ (800e0c8 <ip_reass_dequeue_datagram+0x50>)
 800e09e:	f240 1245 	movw	r2, #325	@ 0x145
 800e0a2:	490a      	ldr	r1, [pc, #40]	@ (800e0cc <ip_reass_dequeue_datagram+0x54>)
 800e0a4:	480a      	ldr	r0, [pc, #40]	@ (800e0d0 <ip_reass_dequeue_datagram+0x58>)
 800e0a6:	f002 f981 	bl	80103ac <iprintf>
    prev->next = ipr->next;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681a      	ldr	r2, [r3, #0]
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e0b2:	6879      	ldr	r1, [r7, #4]
 800e0b4:	2004      	movs	r0, #4
 800e0b6:	f7f6 ff0d 	bl	8004ed4 <memp_free>
}
 800e0ba:	bf00      	nop
 800e0bc:	3708      	adds	r7, #8
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop
 800e0c4:	2000849c 	.word	0x2000849c
 800e0c8:	08013ce8 	.word	0x08013ce8
 800e0cc:	08013db0 	.word	0x08013db0
 800e0d0:	08013d30 	.word	0x08013d30

0800e0d4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b08c      	sub	sp, #48	@ 0x30
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	60f8      	str	r0, [r7, #12]
 800e0dc:	60b9      	str	r1, [r7, #8]
 800e0de:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	685b      	ldr	r3, [r3, #4]
 800e0ec:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e0ee:	69fb      	ldr	r3, [r7, #28]
 800e0f0:	885b      	ldrh	r3, [r3, #2]
 800e0f2:	b29b      	uxth	r3, r3
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f7f6 fa05 	bl	8004504 <lwip_htons>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e0fe:	69fb      	ldr	r3, [r7, #28]
 800e100:	781b      	ldrb	r3, [r3, #0]
 800e102:	f003 030f 	and.w	r3, r3, #15
 800e106:	b2db      	uxtb	r3, r3
 800e108:	009b      	lsls	r3, r3, #2
 800e10a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e10c:	7e7b      	ldrb	r3, [r7, #25]
 800e10e:	b29b      	uxth	r3, r3
 800e110:	8b7a      	ldrh	r2, [r7, #26]
 800e112:	429a      	cmp	r2, r3
 800e114:	d202      	bcs.n	800e11c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e116:	f04f 33ff 	mov.w	r3, #4294967295
 800e11a:	e135      	b.n	800e388 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e11c:	7e7b      	ldrb	r3, [r7, #25]
 800e11e:	b29b      	uxth	r3, r3
 800e120:	8b7a      	ldrh	r2, [r7, #26]
 800e122:	1ad3      	subs	r3, r2, r3
 800e124:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e126:	69fb      	ldr	r3, [r7, #28]
 800e128:	88db      	ldrh	r3, [r3, #6]
 800e12a:	b29b      	uxth	r3, r3
 800e12c:	4618      	mov	r0, r3
 800e12e:	f7f6 f9e9 	bl	8004504 <lwip_htons>
 800e132:	4603      	mov	r3, r0
 800e134:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e138:	b29b      	uxth	r3, r3
 800e13a:	00db      	lsls	r3, r3, #3
 800e13c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e13e:	68bb      	ldr	r3, [r7, #8]
 800e140:	685b      	ldr	r3, [r3, #4]
 800e142:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800e144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e146:	2200      	movs	r2, #0
 800e148:	701a      	strb	r2, [r3, #0]
 800e14a:	2200      	movs	r2, #0
 800e14c:	705a      	strb	r2, [r3, #1]
 800e14e:	2200      	movs	r2, #0
 800e150:	709a      	strb	r2, [r3, #2]
 800e152:	2200      	movs	r2, #0
 800e154:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e158:	8afa      	ldrh	r2, [r7, #22]
 800e15a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e15c:	8afa      	ldrh	r2, [r7, #22]
 800e15e:	8b7b      	ldrh	r3, [r7, #26]
 800e160:	4413      	add	r3, r2
 800e162:	b29a      	uxth	r2, r3
 800e164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e166:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e16a:	88db      	ldrh	r3, [r3, #6]
 800e16c:	b29b      	uxth	r3, r3
 800e16e:	8afa      	ldrh	r2, [r7, #22]
 800e170:	429a      	cmp	r2, r3
 800e172:	d902      	bls.n	800e17a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e174:	f04f 33ff 	mov.w	r3, #4294967295
 800e178:	e106      	b.n	800e388 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	685b      	ldr	r3, [r3, #4]
 800e17e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e180:	e068      	b.n	800e254 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e184:	685b      	ldr	r3, [r3, #4]
 800e186:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e18a:	889b      	ldrh	r3, [r3, #4]
 800e18c:	b29a      	uxth	r2, r3
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	889b      	ldrh	r3, [r3, #4]
 800e192:	b29b      	uxth	r3, r3
 800e194:	429a      	cmp	r2, r3
 800e196:	d235      	bcs.n	800e204 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e19a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e19c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e19e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d020      	beq.n	800e1e6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e1a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1a6:	889b      	ldrh	r3, [r3, #4]
 800e1a8:	b29a      	uxth	r2, r3
 800e1aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1ac:	88db      	ldrh	r3, [r3, #6]
 800e1ae:	b29b      	uxth	r3, r3
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d307      	bcc.n	800e1c4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e1b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1b6:	88db      	ldrh	r3, [r3, #6]
 800e1b8:	b29a      	uxth	r2, r3
 800e1ba:	693b      	ldr	r3, [r7, #16]
 800e1bc:	889b      	ldrh	r3, [r3, #4]
 800e1be:	b29b      	uxth	r3, r3
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d902      	bls.n	800e1ca <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e1c4:	f04f 33ff 	mov.w	r3, #4294967295
 800e1c8:	e0de      	b.n	800e388 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e1ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1cc:	68ba      	ldr	r2, [r7, #8]
 800e1ce:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1d2:	88db      	ldrh	r3, [r3, #6]
 800e1d4:	b29a      	uxth	r2, r3
 800e1d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1d8:	889b      	ldrh	r3, [r3, #4]
 800e1da:	b29b      	uxth	r3, r3
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d03d      	beq.n	800e25c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e1e4:	e03a      	b.n	800e25c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e1e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1e8:	88db      	ldrh	r3, [r3, #6]
 800e1ea:	b29a      	uxth	r2, r3
 800e1ec:	693b      	ldr	r3, [r7, #16]
 800e1ee:	889b      	ldrh	r3, [r3, #4]
 800e1f0:	b29b      	uxth	r3, r3
 800e1f2:	429a      	cmp	r2, r3
 800e1f4:	d902      	bls.n	800e1fc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e1f6:	f04f 33ff 	mov.w	r3, #4294967295
 800e1fa:	e0c5      	b.n	800e388 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	68ba      	ldr	r2, [r7, #8]
 800e200:	605a      	str	r2, [r3, #4]
      break;
 800e202:	e02b      	b.n	800e25c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e206:	889b      	ldrh	r3, [r3, #4]
 800e208:	b29a      	uxth	r2, r3
 800e20a:	693b      	ldr	r3, [r7, #16]
 800e20c:	889b      	ldrh	r3, [r3, #4]
 800e20e:	b29b      	uxth	r3, r3
 800e210:	429a      	cmp	r2, r3
 800e212:	d102      	bne.n	800e21a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e214:	f04f 33ff 	mov.w	r3, #4294967295
 800e218:	e0b6      	b.n	800e388 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e21a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e21c:	889b      	ldrh	r3, [r3, #4]
 800e21e:	b29a      	uxth	r2, r3
 800e220:	693b      	ldr	r3, [r7, #16]
 800e222:	88db      	ldrh	r3, [r3, #6]
 800e224:	b29b      	uxth	r3, r3
 800e226:	429a      	cmp	r2, r3
 800e228:	d202      	bcs.n	800e230 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e22a:	f04f 33ff 	mov.w	r3, #4294967295
 800e22e:	e0ab      	b.n	800e388 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e232:	2b00      	cmp	r3, #0
 800e234:	d009      	beq.n	800e24a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e238:	88db      	ldrh	r3, [r3, #6]
 800e23a:	b29a      	uxth	r2, r3
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	889b      	ldrh	r3, [r3, #4]
 800e240:	b29b      	uxth	r3, r3
 800e242:	429a      	cmp	r2, r3
 800e244:	d001      	beq.n	800e24a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e246:	2300      	movs	r3, #0
 800e248:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800e254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e256:	2b00      	cmp	r3, #0
 800e258:	d193      	bne.n	800e182 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e25a:	e000      	b.n	800e25e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e25c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e260:	2b00      	cmp	r3, #0
 800e262:	d12d      	bne.n	800e2c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e266:	2b00      	cmp	r3, #0
 800e268:	d01c      	beq.n	800e2a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e26c:	88db      	ldrh	r3, [r3, #6]
 800e26e:	b29a      	uxth	r2, r3
 800e270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e272:	889b      	ldrh	r3, [r3, #4]
 800e274:	b29b      	uxth	r3, r3
 800e276:	429a      	cmp	r2, r3
 800e278:	d906      	bls.n	800e288 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e27a:	4b45      	ldr	r3, [pc, #276]	@ (800e390 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e27c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800e280:	4944      	ldr	r1, [pc, #272]	@ (800e394 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e282:	4845      	ldr	r0, [pc, #276]	@ (800e398 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e284:	f002 f892 	bl	80103ac <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e28a:	68ba      	ldr	r2, [r7, #8]
 800e28c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e28e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e290:	88db      	ldrh	r3, [r3, #6]
 800e292:	b29a      	uxth	r2, r3
 800e294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e296:	889b      	ldrh	r3, [r3, #4]
 800e298:	b29b      	uxth	r3, r3
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d010      	beq.n	800e2c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	623b      	str	r3, [r7, #32]
 800e2a2:	e00d      	b.n	800e2c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	685b      	ldr	r3, [r3, #4]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d006      	beq.n	800e2ba <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e2ac:	4b38      	ldr	r3, [pc, #224]	@ (800e390 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e2ae:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800e2b2:	493a      	ldr	r1, [pc, #232]	@ (800e39c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e2b4:	4838      	ldr	r0, [pc, #224]	@ (800e398 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e2b6:	f002 f879 	bl	80103ac <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	68ba      	ldr	r2, [r7, #8]
 800e2be:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d105      	bne.n	800e2d2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	7f9b      	ldrb	r3, [r3, #30]
 800e2ca:	f003 0301 	and.w	r3, r3, #1
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d059      	beq.n	800e386 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e2d2:	6a3b      	ldr	r3, [r7, #32]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d04f      	beq.n	800e378 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	685b      	ldr	r3, [r3, #4]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d006      	beq.n	800e2ee <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	685b      	ldr	r3, [r3, #4]
 800e2e4:	685b      	ldr	r3, [r3, #4]
 800e2e6:	889b      	ldrh	r3, [r3, #4]
 800e2e8:	b29b      	uxth	r3, r3
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d002      	beq.n	800e2f4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	623b      	str	r3, [r7, #32]
 800e2f2:	e041      	b.n	800e378 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e2f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2f6:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800e2f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800e2fe:	e012      	b.n	800e326 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e302:	685b      	ldr	r3, [r3, #4]
 800e304:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800e306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e308:	88db      	ldrh	r3, [r3, #6]
 800e30a:	b29a      	uxth	r2, r3
 800e30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e30e:	889b      	ldrh	r3, [r3, #4]
 800e310:	b29b      	uxth	r3, r3
 800e312:	429a      	cmp	r2, r3
 800e314:	d002      	beq.n	800e31c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e316:	2300      	movs	r3, #0
 800e318:	623b      	str	r3, [r7, #32]
            break;
 800e31a:	e007      	b.n	800e32c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e31c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e31e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800e320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800e326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d1e9      	bne.n	800e300 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e32c:	6a3b      	ldr	r3, [r7, #32]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d022      	beq.n	800e378 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	685b      	ldr	r3, [r3, #4]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d106      	bne.n	800e348 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e33a:	4b15      	ldr	r3, [pc, #84]	@ (800e390 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e33c:	f240 12df 	movw	r2, #479	@ 0x1df
 800e340:	4917      	ldr	r1, [pc, #92]	@ (800e3a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e342:	4815      	ldr	r0, [pc, #84]	@ (800e398 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e344:	f002 f832 	bl	80103ac <iprintf>
          LWIP_ASSERT("sanity check",
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	685b      	ldr	r3, [r3, #4]
 800e34c:	685b      	ldr	r3, [r3, #4]
 800e34e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e350:	429a      	cmp	r2, r3
 800e352:	d106      	bne.n	800e362 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e354:	4b0e      	ldr	r3, [pc, #56]	@ (800e390 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e356:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800e35a:	4911      	ldr	r1, [pc, #68]	@ (800e3a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e35c:	480e      	ldr	r0, [pc, #56]	@ (800e398 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e35e:	f002 f825 	bl	80103ac <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d006      	beq.n	800e378 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e36a:	4b09      	ldr	r3, [pc, #36]	@ (800e390 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e36c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800e370:	490c      	ldr	r1, [pc, #48]	@ (800e3a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e372:	4809      	ldr	r0, [pc, #36]	@ (800e398 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e374:	f002 f81a 	bl	80103ac <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e378:	6a3b      	ldr	r3, [r7, #32]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	bf14      	ite	ne
 800e37e:	2301      	movne	r3, #1
 800e380:	2300      	moveq	r3, #0
 800e382:	b2db      	uxtb	r3, r3
 800e384:	e000      	b.n	800e388 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e386:	2300      	movs	r3, #0
}
 800e388:	4618      	mov	r0, r3
 800e38a:	3730      	adds	r7, #48	@ 0x30
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}
 800e390:	08013ce8 	.word	0x08013ce8
 800e394:	08013dcc 	.word	0x08013dcc
 800e398:	08013d30 	.word	0x08013d30
 800e39c:	08013dec 	.word	0x08013dec
 800e3a0:	08013e24 	.word	0x08013e24
 800e3a4:	08013e34 	.word	0x08013e34

0800e3a8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b08e      	sub	sp, #56	@ 0x38
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	685b      	ldr	r3, [r3, #4]
 800e3b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e3b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3b8:	781b      	ldrb	r3, [r3, #0]
 800e3ba:	f003 030f 	and.w	r3, r3, #15
 800e3be:	b2db      	uxtb	r3, r3
 800e3c0:	009b      	lsls	r3, r3, #2
 800e3c2:	b2db      	uxtb	r3, r3
 800e3c4:	2b14      	cmp	r3, #20
 800e3c6:	f040 8171 	bne.w	800e6ac <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3cc:	88db      	ldrh	r3, [r3, #6]
 800e3ce:	b29b      	uxth	r3, r3
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f7f6 f897 	bl	8004504 <lwip_htons>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e3dc:	b29b      	uxth	r3, r3
 800e3de:	00db      	lsls	r3, r3, #3
 800e3e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3e4:	885b      	ldrh	r3, [r3, #2]
 800e3e6:	b29b      	uxth	r3, r3
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f7f6 f88b 	bl	8004504 <lwip_htons>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e3f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3f4:	781b      	ldrb	r3, [r3, #0]
 800e3f6:	f003 030f 	and.w	r3, r3, #15
 800e3fa:	b2db      	uxtb	r3, r3
 800e3fc:	009b      	lsls	r3, r3, #2
 800e3fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800e402:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e406:	b29b      	uxth	r3, r3
 800e408:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e40a:	429a      	cmp	r2, r3
 800e40c:	f0c0 8150 	bcc.w	800e6b0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e410:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e414:	b29b      	uxth	r3, r3
 800e416:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e418:	1ad3      	subs	r3, r2, r3
 800e41a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f7f7 fc57 	bl	8005cd0 <pbuf_clen>
 800e422:	4603      	mov	r3, r0
 800e424:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e426:	4b8c      	ldr	r3, [pc, #560]	@ (800e658 <ip4_reass+0x2b0>)
 800e428:	881b      	ldrh	r3, [r3, #0]
 800e42a:	461a      	mov	r2, r3
 800e42c:	8c3b      	ldrh	r3, [r7, #32]
 800e42e:	4413      	add	r3, r2
 800e430:	2b0a      	cmp	r3, #10
 800e432:	dd10      	ble.n	800e456 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e434:	8c3b      	ldrh	r3, [r7, #32]
 800e436:	4619      	mov	r1, r3
 800e438:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e43a:	f7ff fd81 	bl	800df40 <ip_reass_remove_oldest_datagram>
 800e43e:	4603      	mov	r3, r0
 800e440:	2b00      	cmp	r3, #0
 800e442:	f000 8137 	beq.w	800e6b4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e446:	4b84      	ldr	r3, [pc, #528]	@ (800e658 <ip4_reass+0x2b0>)
 800e448:	881b      	ldrh	r3, [r3, #0]
 800e44a:	461a      	mov	r2, r3
 800e44c:	8c3b      	ldrh	r3, [r7, #32]
 800e44e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e450:	2b0a      	cmp	r3, #10
 800e452:	f300 812f 	bgt.w	800e6b4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e456:	4b81      	ldr	r3, [pc, #516]	@ (800e65c <ip4_reass+0x2b4>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e45c:	e015      	b.n	800e48a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e460:	695a      	ldr	r2, [r3, #20]
 800e462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e464:	68db      	ldr	r3, [r3, #12]
 800e466:	429a      	cmp	r2, r3
 800e468:	d10c      	bne.n	800e484 <ip4_reass+0xdc>
 800e46a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e46c:	699a      	ldr	r2, [r3, #24]
 800e46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e470:	691b      	ldr	r3, [r3, #16]
 800e472:	429a      	cmp	r2, r3
 800e474:	d106      	bne.n	800e484 <ip4_reass+0xdc>
 800e476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e478:	899a      	ldrh	r2, [r3, #12]
 800e47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e47c:	889b      	ldrh	r3, [r3, #4]
 800e47e:	b29b      	uxth	r3, r3
 800e480:	429a      	cmp	r2, r3
 800e482:	d006      	beq.n	800e492 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	633b      	str	r3, [r7, #48]	@ 0x30
 800e48a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d1e6      	bne.n	800e45e <ip4_reass+0xb6>
 800e490:	e000      	b.n	800e494 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e492:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e496:	2b00      	cmp	r3, #0
 800e498:	d109      	bne.n	800e4ae <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e49a:	8c3b      	ldrh	r3, [r7, #32]
 800e49c:	4619      	mov	r1, r3
 800e49e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e4a0:	f7ff fdb0 	bl	800e004 <ip_reass_enqueue_new_datagram>
 800e4a4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d11c      	bne.n	800e4e6 <ip4_reass+0x13e>
      goto nullreturn;
 800e4ac:	e105      	b.n	800e6ba <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e4ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4b0:	88db      	ldrh	r3, [r3, #6]
 800e4b2:	b29b      	uxth	r3, r3
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7f6 f825 	bl	8004504 <lwip_htons>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d110      	bne.n	800e4e6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e4c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4c6:	89db      	ldrh	r3, [r3, #14]
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f7f6 f81b 	bl	8004504 <lwip_htons>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d006      	beq.n	800e4e6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4da:	3308      	adds	r3, #8
 800e4dc:	2214      	movs	r2, #20
 800e4de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f002 f88e 	bl	8010602 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e4e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4e8:	88db      	ldrh	r3, [r3, #6]
 800e4ea:	b29b      	uxth	r3, r3
 800e4ec:	f003 0320 	and.w	r3, r3, #32
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	bf0c      	ite	eq
 800e4f4:	2301      	moveq	r3, #1
 800e4f6:	2300      	movne	r3, #0
 800e4f8:	b2db      	uxtb	r3, r3
 800e4fa:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e4fc:	69fb      	ldr	r3, [r7, #28]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d00e      	beq.n	800e520 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e502:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e504:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e506:	4413      	add	r3, r2
 800e508:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e50a:	8b7a      	ldrh	r2, [r7, #26]
 800e50c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e50e:	429a      	cmp	r2, r3
 800e510:	f0c0 80a0 	bcc.w	800e654 <ip4_reass+0x2ac>
 800e514:	8b7b      	ldrh	r3, [r7, #26]
 800e516:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800e51a:	4293      	cmp	r3, r2
 800e51c:	f200 809a 	bhi.w	800e654 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e520:	69fa      	ldr	r2, [r7, #28]
 800e522:	6879      	ldr	r1, [r7, #4]
 800e524:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e526:	f7ff fdd5 	bl	800e0d4 <ip_reass_chain_frag_into_datagram_and_validate>
 800e52a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e52c:	697b      	ldr	r3, [r7, #20]
 800e52e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e532:	f000 809b 	beq.w	800e66c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e536:	4b48      	ldr	r3, [pc, #288]	@ (800e658 <ip4_reass+0x2b0>)
 800e538:	881a      	ldrh	r2, [r3, #0]
 800e53a:	8c3b      	ldrh	r3, [r7, #32]
 800e53c:	4413      	add	r3, r2
 800e53e:	b29a      	uxth	r2, r3
 800e540:	4b45      	ldr	r3, [pc, #276]	@ (800e658 <ip4_reass+0x2b0>)
 800e542:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e544:	69fb      	ldr	r3, [r7, #28]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d00d      	beq.n	800e566 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e54a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e54c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e54e:	4413      	add	r3, r2
 800e550:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e554:	8a7a      	ldrh	r2, [r7, #18]
 800e556:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e55a:	7f9b      	ldrb	r3, [r3, #30]
 800e55c:	f043 0301 	orr.w	r3, r3, #1
 800e560:	b2da      	uxtb	r2, r3
 800e562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e564:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e566:	697b      	ldr	r3, [r7, #20]
 800e568:	2b01      	cmp	r3, #1
 800e56a:	d171      	bne.n	800e650 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e56c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e56e:	8b9b      	ldrh	r3, [r3, #28]
 800e570:	3314      	adds	r3, #20
 800e572:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e576:	685b      	ldr	r3, [r3, #4]
 800e578:	685b      	ldr	r3, [r3, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e580:	685b      	ldr	r3, [r3, #4]
 800e582:	685b      	ldr	r3, [r3, #4]
 800e584:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e588:	3308      	adds	r3, #8
 800e58a:	2214      	movs	r2, #20
 800e58c:	4619      	mov	r1, r3
 800e58e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e590:	f002 f837 	bl	8010602 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e594:	8a3b      	ldrh	r3, [r7, #16]
 800e596:	4618      	mov	r0, r3
 800e598:	f7f5 ffb4 	bl	8004504 <lwip_htons>
 800e59c:	4603      	mov	r3, r0
 800e59e:	461a      	mov	r2, r3
 800e5a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5a2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e5a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	719a      	strb	r2, [r3, #6]
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	729a      	strb	r2, [r3, #10]
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e5b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5ba:	685b      	ldr	r3, [r3, #4]
 800e5bc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e5be:	e00d      	b.n	800e5dc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e5c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5c2:	685b      	ldr	r3, [r3, #4]
 800e5c4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e5c6:	2114      	movs	r1, #20
 800e5c8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e5ca:	f7f7 fa73 	bl	8005ab4 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e5ce:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f7f7 fbb7 	bl	8005d44 <pbuf_cat>
      r = iprh->next_pbuf;
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800e5dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d1ee      	bne.n	800e5c0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e5e2:	4b1e      	ldr	r3, [pc, #120]	@ (800e65c <ip4_reass+0x2b4>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d102      	bne.n	800e5f2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e5f0:	e010      	b.n	800e614 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e5f2:	4b1a      	ldr	r3, [pc, #104]	@ (800e65c <ip4_reass+0x2b4>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e5f8:	e007      	b.n	800e60a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e5fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e600:	429a      	cmp	r2, r3
 800e602:	d006      	beq.n	800e612 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e60a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d1f4      	bne.n	800e5fa <ip4_reass+0x252>
 800e610:	e000      	b.n	800e614 <ip4_reass+0x26c>
          break;
 800e612:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e614:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e616:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e618:	f7ff fd2e 	bl	800e078 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e61c:	6878      	ldr	r0, [r7, #4]
 800e61e:	f7f7 fb57 	bl	8005cd0 <pbuf_clen>
 800e622:	4603      	mov	r3, r0
 800e624:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e626:	4b0c      	ldr	r3, [pc, #48]	@ (800e658 <ip4_reass+0x2b0>)
 800e628:	881b      	ldrh	r3, [r3, #0]
 800e62a:	8c3a      	ldrh	r2, [r7, #32]
 800e62c:	429a      	cmp	r2, r3
 800e62e:	d906      	bls.n	800e63e <ip4_reass+0x296>
 800e630:	4b0b      	ldr	r3, [pc, #44]	@ (800e660 <ip4_reass+0x2b8>)
 800e632:	f240 229b 	movw	r2, #667	@ 0x29b
 800e636:	490b      	ldr	r1, [pc, #44]	@ (800e664 <ip4_reass+0x2bc>)
 800e638:	480b      	ldr	r0, [pc, #44]	@ (800e668 <ip4_reass+0x2c0>)
 800e63a:	f001 feb7 	bl	80103ac <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e63e:	4b06      	ldr	r3, [pc, #24]	@ (800e658 <ip4_reass+0x2b0>)
 800e640:	881a      	ldrh	r2, [r3, #0]
 800e642:	8c3b      	ldrh	r3, [r7, #32]
 800e644:	1ad3      	subs	r3, r2, r3
 800e646:	b29a      	uxth	r2, r3
 800e648:	4b03      	ldr	r3, [pc, #12]	@ (800e658 <ip4_reass+0x2b0>)
 800e64a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	e038      	b.n	800e6c2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e650:	2300      	movs	r3, #0
 800e652:	e036      	b.n	800e6c2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800e654:	bf00      	nop
 800e656:	e00a      	b.n	800e66e <ip4_reass+0x2c6>
 800e658:	200084a0 	.word	0x200084a0
 800e65c:	2000849c 	.word	0x2000849c
 800e660:	08013ce8 	.word	0x08013ce8
 800e664:	08013e58 	.word	0x08013e58
 800e668:	08013d30 	.word	0x08013d30
    goto nullreturn_ipr;
 800e66c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e670:	2b00      	cmp	r3, #0
 800e672:	d106      	bne.n	800e682 <ip4_reass+0x2da>
 800e674:	4b15      	ldr	r3, [pc, #84]	@ (800e6cc <ip4_reass+0x324>)
 800e676:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800e67a:	4915      	ldr	r1, [pc, #84]	@ (800e6d0 <ip4_reass+0x328>)
 800e67c:	4815      	ldr	r0, [pc, #84]	@ (800e6d4 <ip4_reass+0x32c>)
 800e67e:	f001 fe95 	bl	80103ac <iprintf>
  if (ipr->p == NULL) {
 800e682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e684:	685b      	ldr	r3, [r3, #4]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d116      	bne.n	800e6b8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e68a:	4b13      	ldr	r3, [pc, #76]	@ (800e6d8 <ip4_reass+0x330>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e690:	429a      	cmp	r2, r3
 800e692:	d006      	beq.n	800e6a2 <ip4_reass+0x2fa>
 800e694:	4b0d      	ldr	r3, [pc, #52]	@ (800e6cc <ip4_reass+0x324>)
 800e696:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800e69a:	4910      	ldr	r1, [pc, #64]	@ (800e6dc <ip4_reass+0x334>)
 800e69c:	480d      	ldr	r0, [pc, #52]	@ (800e6d4 <ip4_reass+0x32c>)
 800e69e:	f001 fe85 	bl	80103ac <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e6a2:	2100      	movs	r1, #0
 800e6a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e6a6:	f7ff fce7 	bl	800e078 <ip_reass_dequeue_datagram>
 800e6aa:	e006      	b.n	800e6ba <ip4_reass+0x312>
    goto nullreturn;
 800e6ac:	bf00      	nop
 800e6ae:	e004      	b.n	800e6ba <ip4_reass+0x312>
    goto nullreturn;
 800e6b0:	bf00      	nop
 800e6b2:	e002      	b.n	800e6ba <ip4_reass+0x312>
      goto nullreturn;
 800e6b4:	bf00      	nop
 800e6b6:	e000      	b.n	800e6ba <ip4_reass+0x312>
  }

nullreturn:
 800e6b8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e6ba:	6878      	ldr	r0, [r7, #4]
 800e6bc:	f7f7 fa80 	bl	8005bc0 <pbuf_free>
  return NULL;
 800e6c0:	2300      	movs	r3, #0
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3738      	adds	r7, #56	@ 0x38
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}
 800e6ca:	bf00      	nop
 800e6cc:	08013ce8 	.word	0x08013ce8
 800e6d0:	08013e74 	.word	0x08013e74
 800e6d4:	08013d30 	.word	0x08013d30
 800e6d8:	2000849c 	.word	0x2000849c
 800e6dc:	08013e80 	.word	0x08013e80

0800e6e0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e6e4:	2005      	movs	r0, #5
 800e6e6:	f7f6 fb85 	bl	8004df4 <memp_malloc>
 800e6ea:	4603      	mov	r3, r0
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	bd80      	pop	{r7, pc}

0800e6f0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b082      	sub	sp, #8
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d106      	bne.n	800e70c <ip_frag_free_pbuf_custom_ref+0x1c>
 800e6fe:	4b07      	ldr	r3, [pc, #28]	@ (800e71c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e700:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800e704:	4906      	ldr	r1, [pc, #24]	@ (800e720 <ip_frag_free_pbuf_custom_ref+0x30>)
 800e706:	4807      	ldr	r0, [pc, #28]	@ (800e724 <ip_frag_free_pbuf_custom_ref+0x34>)
 800e708:	f001 fe50 	bl	80103ac <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e70c:	6879      	ldr	r1, [r7, #4]
 800e70e:	2005      	movs	r0, #5
 800e710:	f7f6 fbe0 	bl	8004ed4 <memp_free>
}
 800e714:	bf00      	nop
 800e716:	3708      	adds	r7, #8
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}
 800e71c:	08013ce8 	.word	0x08013ce8
 800e720:	08013ea0 	.word	0x08013ea0
 800e724:	08013d30 	.word	0x08013d30

0800e728 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b084      	sub	sp, #16
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d106      	bne.n	800e748 <ipfrag_free_pbuf_custom+0x20>
 800e73a:	4b11      	ldr	r3, [pc, #68]	@ (800e780 <ipfrag_free_pbuf_custom+0x58>)
 800e73c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800e740:	4910      	ldr	r1, [pc, #64]	@ (800e784 <ipfrag_free_pbuf_custom+0x5c>)
 800e742:	4811      	ldr	r0, [pc, #68]	@ (800e788 <ipfrag_free_pbuf_custom+0x60>)
 800e744:	f001 fe32 	bl	80103ac <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e748:	68fa      	ldr	r2, [r7, #12]
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	429a      	cmp	r2, r3
 800e74e:	d006      	beq.n	800e75e <ipfrag_free_pbuf_custom+0x36>
 800e750:	4b0b      	ldr	r3, [pc, #44]	@ (800e780 <ipfrag_free_pbuf_custom+0x58>)
 800e752:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800e756:	490d      	ldr	r1, [pc, #52]	@ (800e78c <ipfrag_free_pbuf_custom+0x64>)
 800e758:	480b      	ldr	r0, [pc, #44]	@ (800e788 <ipfrag_free_pbuf_custom+0x60>)
 800e75a:	f001 fe27 	bl	80103ac <iprintf>
  if (pcr->original != NULL) {
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	695b      	ldr	r3, [r3, #20]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d004      	beq.n	800e770 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	695b      	ldr	r3, [r3, #20]
 800e76a:	4618      	mov	r0, r3
 800e76c:	f7f7 fa28 	bl	8005bc0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e770:	68f8      	ldr	r0, [r7, #12]
 800e772:	f7ff ffbd 	bl	800e6f0 <ip_frag_free_pbuf_custom_ref>
}
 800e776:	bf00      	nop
 800e778:	3710      	adds	r7, #16
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}
 800e77e:	bf00      	nop
 800e780:	08013ce8 	.word	0x08013ce8
 800e784:	08013eac 	.word	0x08013eac
 800e788:	08013d30 	.word	0x08013d30
 800e78c:	08013eb8 	.word	0x08013eb8

0800e790 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b094      	sub	sp, #80	@ 0x50
 800e794:	af02      	add	r7, sp, #8
 800e796:	60f8      	str	r0, [r7, #12]
 800e798:	60b9      	str	r1, [r7, #8]
 800e79a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e79c:	2300      	movs	r3, #0
 800e79e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e7a6:	3b14      	subs	r3, #20
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	da00      	bge.n	800e7ae <ip4_frag+0x1e>
 800e7ac:	3307      	adds	r3, #7
 800e7ae:	10db      	asrs	r3, r3, #3
 800e7b0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e7b2:	2314      	movs	r3, #20
 800e7b4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	685b      	ldr	r3, [r3, #4]
 800e7ba:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800e7bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7be:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e7c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7c2:	781b      	ldrb	r3, [r3, #0]
 800e7c4:	f003 030f 	and.w	r3, r3, #15
 800e7c8:	b2db      	uxtb	r3, r3
 800e7ca:	009b      	lsls	r3, r3, #2
 800e7cc:	b2db      	uxtb	r3, r3
 800e7ce:	2b14      	cmp	r3, #20
 800e7d0:	d002      	beq.n	800e7d8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e7d2:	f06f 0305 	mvn.w	r3, #5
 800e7d6:	e110      	b.n	800e9fa <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	895b      	ldrh	r3, [r3, #10]
 800e7dc:	2b13      	cmp	r3, #19
 800e7de:	d809      	bhi.n	800e7f4 <ip4_frag+0x64>
 800e7e0:	4b88      	ldr	r3, [pc, #544]	@ (800ea04 <ip4_frag+0x274>)
 800e7e2:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800e7e6:	4988      	ldr	r1, [pc, #544]	@ (800ea08 <ip4_frag+0x278>)
 800e7e8:	4888      	ldr	r0, [pc, #544]	@ (800ea0c <ip4_frag+0x27c>)
 800e7ea:	f001 fddf 	bl	80103ac <iprintf>
 800e7ee:	f06f 0305 	mvn.w	r3, #5
 800e7f2:	e102      	b.n	800e9fa <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e7f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7f6:	88db      	ldrh	r3, [r3, #6]
 800e7f8:	b29b      	uxth	r3, r3
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f7f5 fe82 	bl	8004504 <lwip_htons>
 800e800:	4603      	mov	r3, r0
 800e802:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800e804:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800e806:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e80a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e80e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800e810:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e814:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	891b      	ldrh	r3, [r3, #8]
 800e81a:	3b14      	subs	r3, #20
 800e81c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800e820:	e0e1      	b.n	800e9e6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e822:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e824:	00db      	lsls	r3, r3, #3
 800e826:	b29b      	uxth	r3, r3
 800e828:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800e82c:	4293      	cmp	r3, r2
 800e82e:	bf28      	it	cs
 800e830:	4613      	movcs	r3, r2
 800e832:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e834:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e838:	2114      	movs	r1, #20
 800e83a:	200e      	movs	r0, #14
 800e83c:	f7f6 fedc 	bl	80055f8 <pbuf_alloc>
 800e840:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800e842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e844:	2b00      	cmp	r3, #0
 800e846:	f000 80d5 	beq.w	800e9f4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e84c:	895b      	ldrh	r3, [r3, #10]
 800e84e:	2b13      	cmp	r3, #19
 800e850:	d806      	bhi.n	800e860 <ip4_frag+0xd0>
 800e852:	4b6c      	ldr	r3, [pc, #432]	@ (800ea04 <ip4_frag+0x274>)
 800e854:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800e858:	496d      	ldr	r1, [pc, #436]	@ (800ea10 <ip4_frag+0x280>)
 800e85a:	486c      	ldr	r0, [pc, #432]	@ (800ea0c <ip4_frag+0x27c>)
 800e85c:	f001 fda6 	bl	80103ac <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e862:	685b      	ldr	r3, [r3, #4]
 800e864:	2214      	movs	r2, #20
 800e866:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e868:	4618      	mov	r0, r3
 800e86a:	f001 feca 	bl	8010602 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e870:	685b      	ldr	r3, [r3, #4]
 800e872:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800e874:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e876:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800e87a:	e064      	b.n	800e946 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	895a      	ldrh	r2, [r3, #10]
 800e880:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e882:	1ad3      	subs	r3, r2, r3
 800e884:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	895b      	ldrh	r3, [r3, #10]
 800e88a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800e88c:	429a      	cmp	r2, r3
 800e88e:	d906      	bls.n	800e89e <ip4_frag+0x10e>
 800e890:	4b5c      	ldr	r3, [pc, #368]	@ (800ea04 <ip4_frag+0x274>)
 800e892:	f240 322d 	movw	r2, #813	@ 0x32d
 800e896:	495f      	ldr	r1, [pc, #380]	@ (800ea14 <ip4_frag+0x284>)
 800e898:	485c      	ldr	r0, [pc, #368]	@ (800ea0c <ip4_frag+0x27c>)
 800e89a:	f001 fd87 	bl	80103ac <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e89e:	8bfa      	ldrh	r2, [r7, #30]
 800e8a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	bf28      	it	cs
 800e8a8:	4613      	movcs	r3, r2
 800e8aa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e8ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d105      	bne.n	800e8c2 <ip4_frag+0x132>
        poff = 0;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	60fb      	str	r3, [r7, #12]
        continue;
 800e8c0:	e041      	b.n	800e946 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e8c2:	f7ff ff0d 	bl	800e6e0 <ip_frag_alloc_pbuf_custom_ref>
 800e8c6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e8c8:	69bb      	ldr	r3, [r7, #24]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d103      	bne.n	800e8d6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e8ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e8d0:	f7f7 f976 	bl	8005bc0 <pbuf_free>
        goto memerr;
 800e8d4:	e08f      	b.n	800e9f6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e8d6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e8dc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e8de:	4413      	add	r3, r2
 800e8e0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800e8e4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800e8e8:	9201      	str	r2, [sp, #4]
 800e8ea:	9300      	str	r3, [sp, #0]
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	2241      	movs	r2, #65	@ 0x41
 800e8f0:	2000      	movs	r0, #0
 800e8f2:	f7f6 ffab 	bl	800584c <pbuf_alloced_custom>
 800e8f6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e8f8:	697b      	ldr	r3, [r7, #20]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d106      	bne.n	800e90c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e8fe:	69b8      	ldr	r0, [r7, #24]
 800e900:	f7ff fef6 	bl	800e6f0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e904:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e906:	f7f7 f95b 	bl	8005bc0 <pbuf_free>
        goto memerr;
 800e90a:	e074      	b.n	800e9f6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e90c:	68f8      	ldr	r0, [r7, #12]
 800e90e:	f7f7 f9f7 	bl	8005d00 <pbuf_ref>
      pcr->original = p;
 800e912:	69bb      	ldr	r3, [r7, #24]
 800e914:	68fa      	ldr	r2, [r7, #12]
 800e916:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e918:	69bb      	ldr	r3, [r7, #24]
 800e91a:	4a3f      	ldr	r2, [pc, #252]	@ (800ea18 <ip4_frag+0x288>)
 800e91c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e91e:	6979      	ldr	r1, [r7, #20]
 800e920:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e922:	f7f7 fa0f 	bl	8005d44 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e926:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800e92a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e92e:	1ad3      	subs	r3, r2, r3
 800e930:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800e934:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d004      	beq.n	800e946 <ip4_frag+0x1b6>
        poff = 0;
 800e93c:	2300      	movs	r3, #0
 800e93e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e946:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d196      	bne.n	800e87c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e94e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800e950:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e954:	4413      	add	r3, r2
 800e956:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e95c:	f1a3 0213 	sub.w	r2, r3, #19
 800e960:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800e964:	429a      	cmp	r2, r3
 800e966:	bfcc      	ite	gt
 800e968:	2301      	movgt	r3, #1
 800e96a:	2300      	movle	r3, #0
 800e96c:	b2db      	uxtb	r3, r3
 800e96e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e970:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800e974:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e978:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800e97a:	6a3b      	ldr	r3, [r7, #32]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d002      	beq.n	800e986 <ip4_frag+0x1f6>
 800e980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e982:	2b00      	cmp	r3, #0
 800e984:	d003      	beq.n	800e98e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e986:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800e988:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800e98c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e98e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800e990:	4618      	mov	r0, r3
 800e992:	f7f5 fdb7 	bl	8004504 <lwip_htons>
 800e996:	4603      	mov	r3, r0
 800e998:	461a      	mov	r2, r3
 800e99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e99c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e99e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e9a0:	3314      	adds	r3, #20
 800e9a2:	b29b      	uxth	r3, r3
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f7f5 fdad 	bl	8004504 <lwip_htons>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	461a      	mov	r2, r3
 800e9ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9b0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e9b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	729a      	strb	r2, [r3, #10]
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	695b      	ldr	r3, [r3, #20]
 800e9c0:	687a      	ldr	r2, [r7, #4]
 800e9c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e9c4:	68b8      	ldr	r0, [r7, #8]
 800e9c6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e9c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e9ca:	f7f7 f8f9 	bl	8005bc0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e9ce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800e9d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e9d4:	1ad3      	subs	r3, r2, r3
 800e9d6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800e9da:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800e9de:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e9e0:	4413      	add	r3, r2
 800e9e2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800e9e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	f47f af19 	bne.w	800e822 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	e002      	b.n	800e9fa <ip4_frag+0x26a>
      goto memerr;
 800e9f4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e9f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	3748      	adds	r7, #72	@ 0x48
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}
 800ea02:	bf00      	nop
 800ea04:	08013ce8 	.word	0x08013ce8
 800ea08:	08013ec4 	.word	0x08013ec4
 800ea0c:	08013d30 	.word	0x08013d30
 800ea10:	08013ee0 	.word	0x08013ee0
 800ea14:	08013f00 	.word	0x08013f00
 800ea18:	0800e729 	.word	0x0800e729

0800ea1c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b086      	sub	sp, #24
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800ea26:	230e      	movs	r3, #14
 800ea28:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	895b      	ldrh	r3, [r3, #10]
 800ea2e:	2b0e      	cmp	r3, #14
 800ea30:	d96e      	bls.n	800eb10 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	7bdb      	ldrb	r3, [r3, #15]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d106      	bne.n	800ea48 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ea40:	3301      	adds	r3, #1
 800ea42:	b2da      	uxtb	r2, r3
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	685b      	ldr	r3, [r3, #4]
 800ea4c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ea4e:	693b      	ldr	r3, [r7, #16]
 800ea50:	7b1a      	ldrb	r2, [r3, #12]
 800ea52:	7b5b      	ldrb	r3, [r3, #13]
 800ea54:	021b      	lsls	r3, r3, #8
 800ea56:	4313      	orrs	r3, r2
 800ea58:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ea5a:	693b      	ldr	r3, [r7, #16]
 800ea5c:	781b      	ldrb	r3, [r3, #0]
 800ea5e:	f003 0301 	and.w	r3, r3, #1
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d023      	beq.n	800eaae <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ea66:	693b      	ldr	r3, [r7, #16]
 800ea68:	781b      	ldrb	r3, [r3, #0]
 800ea6a:	2b01      	cmp	r3, #1
 800ea6c:	d10f      	bne.n	800ea8e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ea6e:	693b      	ldr	r3, [r7, #16]
 800ea70:	785b      	ldrb	r3, [r3, #1]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d11b      	bne.n	800eaae <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ea7a:	2b5e      	cmp	r3, #94	@ 0x5e
 800ea7c:	d117      	bne.n	800eaae <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	7b5b      	ldrb	r3, [r3, #13]
 800ea82:	f043 0310 	orr.w	r3, r3, #16
 800ea86:	b2da      	uxtb	r2, r3
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	735a      	strb	r2, [r3, #13]
 800ea8c:	e00f      	b.n	800eaae <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800ea8e:	693b      	ldr	r3, [r7, #16]
 800ea90:	2206      	movs	r2, #6
 800ea92:	4928      	ldr	r1, [pc, #160]	@ (800eb34 <ethernet_input+0x118>)
 800ea94:	4618      	mov	r0, r3
 800ea96:	f001 fd14 	bl	80104c2 <memcmp>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d106      	bne.n	800eaae <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	7b5b      	ldrb	r3, [r3, #13]
 800eaa4:	f043 0308 	orr.w	r3, r3, #8
 800eaa8:	b2da      	uxtb	r2, r3
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800eaae:	89fb      	ldrh	r3, [r7, #14]
 800eab0:	2b08      	cmp	r3, #8
 800eab2:	d003      	beq.n	800eabc <ethernet_input+0xa0>
 800eab4:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800eab8:	d014      	beq.n	800eae4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800eaba:	e032      	b.n	800eb22 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800eac2:	f003 0308 	and.w	r3, r3, #8
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d024      	beq.n	800eb14 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800eaca:	8afb      	ldrh	r3, [r7, #22]
 800eacc:	4619      	mov	r1, r3
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f7f6 fff0 	bl	8005ab4 <pbuf_remove_header>
 800ead4:	4603      	mov	r3, r0
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d11e      	bne.n	800eb18 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800eada:	6839      	ldr	r1, [r7, #0]
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f7fe ff21 	bl	800d924 <ip4_input>
      break;
 800eae2:	e013      	b.n	800eb0c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800eaea:	f003 0308 	and.w	r3, r3, #8
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d014      	beq.n	800eb1c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800eaf2:	8afb      	ldrh	r3, [r7, #22]
 800eaf4:	4619      	mov	r1, r3
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f7f6 ffdc 	bl	8005ab4 <pbuf_remove_header>
 800eafc:	4603      	mov	r3, r0
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d10e      	bne.n	800eb20 <ethernet_input+0x104>
        etharp_input(p, netif);
 800eb02:	6839      	ldr	r1, [r7, #0]
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	f7fe f8c1 	bl	800cc8c <etharp_input>
      break;
 800eb0a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	e00c      	b.n	800eb2a <ethernet_input+0x10e>
    goto free_and_return;
 800eb10:	bf00      	nop
 800eb12:	e006      	b.n	800eb22 <ethernet_input+0x106>
        goto free_and_return;
 800eb14:	bf00      	nop
 800eb16:	e004      	b.n	800eb22 <ethernet_input+0x106>
        goto free_and_return;
 800eb18:	bf00      	nop
 800eb1a:	e002      	b.n	800eb22 <ethernet_input+0x106>
        goto free_and_return;
 800eb1c:	bf00      	nop
 800eb1e:	e000      	b.n	800eb22 <ethernet_input+0x106>
        goto free_and_return;
 800eb20:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	f7f7 f84c 	bl	8005bc0 <pbuf_free>
  return ERR_OK;
 800eb28:	2300      	movs	r3, #0
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3718      	adds	r7, #24
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}
 800eb32:	bf00      	nop
 800eb34:	080141b8 	.word	0x080141b8

0800eb38 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b086      	sub	sp, #24
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	60f8      	str	r0, [r7, #12]
 800eb40:	60b9      	str	r1, [r7, #8]
 800eb42:	607a      	str	r2, [r7, #4]
 800eb44:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800eb46:	8c3b      	ldrh	r3, [r7, #32]
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f7f5 fcdb 	bl	8004504 <lwip_htons>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800eb52:	210e      	movs	r1, #14
 800eb54:	68b8      	ldr	r0, [r7, #8]
 800eb56:	f7f6 ff9d 	bl	8005a94 <pbuf_add_header>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d125      	bne.n	800ebac <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	685b      	ldr	r3, [r3, #4]
 800eb64:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	8afa      	ldrh	r2, [r7, #22]
 800eb6a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800eb6c:	693b      	ldr	r3, [r7, #16]
 800eb6e:	2206      	movs	r2, #6
 800eb70:	6839      	ldr	r1, [r7, #0]
 800eb72:	4618      	mov	r0, r3
 800eb74:	f001 fd45 	bl	8010602 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800eb78:	693b      	ldr	r3, [r7, #16]
 800eb7a:	3306      	adds	r3, #6
 800eb7c:	2206      	movs	r2, #6
 800eb7e:	6879      	ldr	r1, [r7, #4]
 800eb80:	4618      	mov	r0, r3
 800eb82:	f001 fd3e 	bl	8010602 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800eb8c:	2b06      	cmp	r3, #6
 800eb8e:	d006      	beq.n	800eb9e <ethernet_output+0x66>
 800eb90:	4b0a      	ldr	r3, [pc, #40]	@ (800ebbc <ethernet_output+0x84>)
 800eb92:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800eb96:	490a      	ldr	r1, [pc, #40]	@ (800ebc0 <ethernet_output+0x88>)
 800eb98:	480a      	ldr	r0, [pc, #40]	@ (800ebc4 <ethernet_output+0x8c>)
 800eb9a:	f001 fc07 	bl	80103ac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	699b      	ldr	r3, [r3, #24]
 800eba2:	68b9      	ldr	r1, [r7, #8]
 800eba4:	68f8      	ldr	r0, [r7, #12]
 800eba6:	4798      	blx	r3
 800eba8:	4603      	mov	r3, r0
 800ebaa:	e002      	b.n	800ebb2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800ebac:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800ebae:	f06f 0301 	mvn.w	r3, #1
}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	3718      	adds	r7, #24
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	bd80      	pop	{r7, pc}
 800ebba:	bf00      	nop
 800ebbc:	08013f10 	.word	0x08013f10
 800ebc0:	08013f48 	.word	0x08013f48
 800ebc4:	08013f7c 	.word	0x08013f7c

0800ebc8 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b086      	sub	sp, #24
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
 800ebd0:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	881b      	ldrh	r3, [r3, #0]
 800ebda:	2b05      	cmp	r3, #5
 800ebdc:	d16a      	bne.n	800ecb4 <eMBFuncReadCoils+0xec>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	3301      	adds	r3, #1
 800ebe2:	781b      	ldrb	r3, [r3, #0]
 800ebe4:	021b      	lsls	r3, r3, #8
 800ebe6:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	3302      	adds	r3, #2
 800ebec:	781b      	ldrb	r3, [r3, #0]
 800ebee:	461a      	mov	r2, r3
 800ebf0:	8abb      	ldrh	r3, [r7, #20]
 800ebf2:	4313      	orrs	r3, r2
 800ebf4:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800ebf6:	8abb      	ldrh	r3, [r7, #20]
 800ebf8:	3301      	adds	r3, #1
 800ebfa:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	3303      	adds	r3, #3
 800ec00:	781b      	ldrb	r3, [r3, #0]
 800ec02:	021b      	lsls	r3, r3, #8
 800ec04:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	3304      	adds	r3, #4
 800ec0a:	781b      	ldrb	r3, [r3, #0]
 800ec0c:	461a      	mov	r2, r3
 800ec0e:	8a7b      	ldrh	r3, [r7, #18]
 800ec10:	4313      	orrs	r3, r2
 800ec12:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 800ec14:	8a7b      	ldrh	r3, [r7, #18]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d049      	beq.n	800ecae <eMBFuncReadCoils+0xe6>
 800ec1a:	8a7b      	ldrh	r3, [r7, #18]
 800ec1c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800ec20:	d245      	bcs.n	800ecae <eMBFuncReadCoils+0xe6>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	2200      	movs	r2, #0
 800ec2a:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	1c5a      	adds	r2, r3, #1
 800ec30:	60fa      	str	r2, [r7, #12]
 800ec32:	2201      	movs	r2, #1
 800ec34:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	881b      	ldrh	r3, [r3, #0]
 800ec3a:	3301      	adds	r3, #1
 800ec3c:	b29a      	uxth	r2, r3
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 800ec42:	8a7b      	ldrh	r3, [r7, #18]
 800ec44:	f003 0307 	and.w	r3, r3, #7
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d006      	beq.n	800ec5a <eMBFuncReadCoils+0x92>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 800ec4c:	8a7b      	ldrh	r3, [r7, #18]
 800ec4e:	08db      	lsrs	r3, r3, #3
 800ec50:	b29b      	uxth	r3, r3
 800ec52:	b2db      	uxtb	r3, r3
 800ec54:	3301      	adds	r3, #1
 800ec56:	75fb      	strb	r3, [r7, #23]
 800ec58:	e003      	b.n	800ec62 <eMBFuncReadCoils+0x9a>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 800ec5a:	8a7b      	ldrh	r3, [r7, #18]
 800ec5c:	08db      	lsrs	r3, r3, #3
 800ec5e:	b29b      	uxth	r3, r3
 800ec60:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	1c5a      	adds	r2, r3, #1
 800ec66:	60fa      	str	r2, [r7, #12]
 800ec68:	7dfa      	ldrb	r2, [r7, #23]
 800ec6a:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	881b      	ldrh	r3, [r3, #0]
 800ec70:	3301      	adds	r3, #1
 800ec72:	b29a      	uxth	r2, r3
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 800ec78:	8a7a      	ldrh	r2, [r7, #18]
 800ec7a:	8ab9      	ldrh	r1, [r7, #20]
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	68f8      	ldr	r0, [r7, #12]
 800ec80:	f000 fdac 	bl	800f7dc <eMBRegCoilsCB>
 800ec84:	4603      	mov	r3, r0
 800ec86:	72fb      	strb	r3, [r7, #11]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800ec88:	7afb      	ldrb	r3, [r7, #11]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d006      	beq.n	800ec9c <eMBFuncReadCoils+0xd4>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800ec8e:	7afb      	ldrb	r3, [r7, #11]
 800ec90:	4618      	mov	r0, r3
 800ec92:	f000 fb77 	bl	800f384 <prveMBError2Exception>
 800ec96:	4603      	mov	r3, r0
 800ec98:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 800ec9a:	e00d      	b.n	800ecb8 <eMBFuncReadCoils+0xf0>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	881a      	ldrh	r2, [r3, #0]
 800eca0:	7dfb      	ldrb	r3, [r7, #23]
 800eca2:	b29b      	uxth	r3, r3
 800eca4:	4413      	add	r3, r2
 800eca6:	b29a      	uxth	r2, r3
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800ecac:	e004      	b.n	800ecb8 <eMBFuncReadCoils+0xf0>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800ecae:	2303      	movs	r3, #3
 800ecb0:	75bb      	strb	r3, [r7, #22]
 800ecb2:	e001      	b.n	800ecb8 <eMBFuncReadCoils+0xf0>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800ecb4:	2303      	movs	r3, #3
 800ecb6:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 800ecb8:	7dbb      	ldrb	r3, [r7, #22]
}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	3718      	adds	r7, #24
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}

0800ecc2 <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 800ecc2:	b580      	push	{r7, lr}
 800ecc4:	b084      	sub	sp, #16
 800ecc6:	af00      	add	r7, sp, #0
 800ecc8:	6078      	str	r0, [r7, #4]
 800ecca:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 800eccc:	2300      	movs	r3, #0
 800ecce:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	881b      	ldrh	r3, [r3, #0]
 800ecd4:	2b05      	cmp	r3, #5
 800ecd6:	d13f      	bne.n	800ed58 <eMBFuncWriteCoil+0x96>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	3301      	adds	r3, #1
 800ecdc:	781b      	ldrb	r3, [r3, #0]
 800ecde:	021b      	lsls	r3, r3, #8
 800ece0:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	3302      	adds	r3, #2
 800ece6:	781b      	ldrb	r3, [r3, #0]
 800ece8:	461a      	mov	r2, r3
 800ecea:	89bb      	ldrh	r3, [r7, #12]
 800ecec:	4313      	orrs	r3, r2
 800ecee:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 800ecf0:	89bb      	ldrh	r3, [r7, #12]
 800ecf2:	3301      	adds	r3, #1
 800ecf4:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	3304      	adds	r3, #4
 800ecfa:	781b      	ldrb	r3, [r3, #0]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d128      	bne.n	800ed52 <eMBFuncWriteCoil+0x90>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	3303      	adds	r3, #3
 800ed04:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 800ed06:	2bff      	cmp	r3, #255	@ 0xff
 800ed08:	d004      	beq.n	800ed14 <eMBFuncWriteCoil+0x52>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	3303      	adds	r3, #3
 800ed0e:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d11e      	bne.n	800ed52 <eMBFuncWriteCoil+0x90>
        {
            ucBuf[1] = 0;
 800ed14:	2300      	movs	r3, #0
 800ed16:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	3303      	adds	r3, #3
 800ed1c:	781b      	ldrb	r3, [r3, #0]
 800ed1e:	2bff      	cmp	r3, #255	@ 0xff
 800ed20:	d102      	bne.n	800ed28 <eMBFuncWriteCoil+0x66>
            {
                ucBuf[0] = 1;
 800ed22:	2301      	movs	r3, #1
 800ed24:	723b      	strb	r3, [r7, #8]
 800ed26:	e001      	b.n	800ed2c <eMBFuncWriteCoil+0x6a>
            }
            else
            {
                ucBuf[0] = 0;
 800ed28:	2300      	movs	r3, #0
 800ed2a:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 800ed2c:	89b9      	ldrh	r1, [r7, #12]
 800ed2e:	f107 0008 	add.w	r0, r7, #8
 800ed32:	2301      	movs	r3, #1
 800ed34:	2201      	movs	r2, #1
 800ed36:	f000 fd51 	bl	800f7dc <eMBRegCoilsCB>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800ed3e:	7afb      	ldrb	r3, [r7, #11]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d00b      	beq.n	800ed5c <eMBFuncWriteCoil+0x9a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800ed44:	7afb      	ldrb	r3, [r7, #11]
 800ed46:	4618      	mov	r0, r3
 800ed48:	f000 fb1c 	bl	800f384 <prveMBError2Exception>
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 800ed50:	e004      	b.n	800ed5c <eMBFuncWriteCoil+0x9a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800ed52:	2303      	movs	r3, #3
 800ed54:	73fb      	strb	r3, [r7, #15]
 800ed56:	e001      	b.n	800ed5c <eMBFuncWriteCoil+0x9a>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800ed58:	2303      	movs	r3, #3
 800ed5a:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 800ed5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3710      	adds	r7, #16
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}

0800ed66 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 800ed66:	b580      	push	{r7, lr}
 800ed68:	b084      	sub	sp, #16
 800ed6a:	af00      	add	r7, sp, #0
 800ed6c:	6078      	str	r0, [r7, #4]
 800ed6e:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 800ed70:	2300      	movs	r3, #0
 800ed72:	73bb      	strb	r3, [r7, #14]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	881b      	ldrh	r3, [r3, #0]
 800ed78:	2b05      	cmp	r3, #5
 800ed7a:	d952      	bls.n	800ee22 <eMBFuncWriteMultipleCoils+0xbc>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	3301      	adds	r3, #1
 800ed80:	781b      	ldrb	r3, [r3, #0]
 800ed82:	021b      	lsls	r3, r3, #8
 800ed84:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	3302      	adds	r3, #2
 800ed8a:	781b      	ldrb	r3, [r3, #0]
 800ed8c:	461a      	mov	r2, r3
 800ed8e:	89bb      	ldrh	r3, [r7, #12]
 800ed90:	4313      	orrs	r3, r2
 800ed92:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 800ed94:	89bb      	ldrh	r3, [r7, #12]
 800ed96:	3301      	adds	r3, #1
 800ed98:	81bb      	strh	r3, [r7, #12]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	3303      	adds	r3, #3
 800ed9e:	781b      	ldrb	r3, [r3, #0]
 800eda0:	021b      	lsls	r3, r3, #8
 800eda2:	817b      	strh	r3, [r7, #10]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	3304      	adds	r3, #4
 800eda8:	781b      	ldrb	r3, [r3, #0]
 800edaa:	461a      	mov	r2, r3
 800edac:	897b      	ldrh	r3, [r7, #10]
 800edae:	4313      	orrs	r3, r2
 800edb0:	817b      	strh	r3, [r7, #10]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	795b      	ldrb	r3, [r3, #5]
 800edb6:	727b      	strb	r3, [r7, #9]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 800edb8:	897b      	ldrh	r3, [r7, #10]
 800edba:	f003 0307 	and.w	r3, r3, #7
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d006      	beq.n	800edd0 <eMBFuncWriteMultipleCoils+0x6a>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 800edc2:	897b      	ldrh	r3, [r7, #10]
 800edc4:	08db      	lsrs	r3, r3, #3
 800edc6:	b29b      	uxth	r3, r3
 800edc8:	b2db      	uxtb	r3, r3
 800edca:	3301      	adds	r3, #1
 800edcc:	73fb      	strb	r3, [r7, #15]
 800edce:	e003      	b.n	800edd8 <eMBFuncWriteMultipleCoils+0x72>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 800edd0:	897b      	ldrh	r3, [r7, #10]
 800edd2:	08db      	lsrs	r3, r3, #3
 800edd4:	b29b      	uxth	r3, r3
 800edd6:	73fb      	strb	r3, [r7, #15]
        }

        if( ( usCoilCnt >= 1 ) &&
 800edd8:	897b      	ldrh	r3, [r7, #10]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d01e      	beq.n	800ee1c <eMBFuncWriteMultipleCoils+0xb6>
 800edde:	897b      	ldrh	r3, [r7, #10]
 800ede0:	f5b3 6ff6 	cmp.w	r3, #1968	@ 0x7b0
 800ede4:	d81a      	bhi.n	800ee1c <eMBFuncWriteMultipleCoils+0xb6>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 800ede6:	7bfa      	ldrb	r2, [r7, #15]
 800ede8:	7a7b      	ldrb	r3, [r7, #9]
 800edea:	429a      	cmp	r2, r3
 800edec:	d116      	bne.n	800ee1c <eMBFuncWriteMultipleCoils+0xb6>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	1d98      	adds	r0, r3, #6
 800edf2:	897a      	ldrh	r2, [r7, #10]
 800edf4:	89b9      	ldrh	r1, [r7, #12]
 800edf6:	2301      	movs	r3, #1
 800edf8:	f000 fcf0 	bl	800f7dc <eMBRegCoilsCB>
 800edfc:	4603      	mov	r3, r0
 800edfe:	723b      	strb	r3, [r7, #8]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800ee00:	7a3b      	ldrb	r3, [r7, #8]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d006      	beq.n	800ee14 <eMBFuncWriteMultipleCoils+0xae>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800ee06:	7a3b      	ldrb	r3, [r7, #8]
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f000 fabb 	bl	800f384 <prveMBError2Exception>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	73bb      	strb	r3, [r7, #14]
            if( eRegStatus != MB_ENOERR )
 800ee12:	e008      	b.n	800ee26 <eMBFuncWriteMultipleCoils+0xc0>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	2205      	movs	r2, #5
 800ee18:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800ee1a:	e004      	b.n	800ee26 <eMBFuncWriteMultipleCoils+0xc0>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800ee1c:	2303      	movs	r3, #3
 800ee1e:	73bb      	strb	r3, [r7, #14]
 800ee20:	e001      	b.n	800ee26 <eMBFuncWriteMultipleCoils+0xc0>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800ee22:	2303      	movs	r3, #3
 800ee24:	73bb      	strb	r3, [r7, #14]
    }
    return eStatus;
 800ee26:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee28:	4618      	mov	r0, r3
 800ee2a:	3710      	adds	r7, #16
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd80      	pop	{r7, pc}

0800ee30 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b086      	sub	sp, #24
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
 800ee38:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	881b      	ldrh	r3, [r3, #0]
 800ee42:	2b05      	cmp	r3, #5
 800ee44:	d16a      	bne.n	800ef1c <eMBFuncReadDiscreteInputs+0xec>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	3301      	adds	r3, #1
 800ee4a:	781b      	ldrb	r3, [r3, #0]
 800ee4c:	021b      	lsls	r3, r3, #8
 800ee4e:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	3302      	adds	r3, #2
 800ee54:	781b      	ldrb	r3, [r3, #0]
 800ee56:	461a      	mov	r2, r3
 800ee58:	8abb      	ldrh	r3, [r7, #20]
 800ee5a:	4313      	orrs	r3, r2
 800ee5c:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800ee5e:	8abb      	ldrh	r3, [r7, #20]
 800ee60:	3301      	adds	r3, #1
 800ee62:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	3303      	adds	r3, #3
 800ee68:	781b      	ldrb	r3, [r3, #0]
 800ee6a:	021b      	lsls	r3, r3, #8
 800ee6c:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	3304      	adds	r3, #4
 800ee72:	781b      	ldrb	r3, [r3, #0]
 800ee74:	461a      	mov	r2, r3
 800ee76:	8a7b      	ldrh	r3, [r7, #18]
 800ee78:	4313      	orrs	r3, r2
 800ee7a:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 800ee7c:	8a7b      	ldrh	r3, [r7, #18]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d049      	beq.n	800ef16 <eMBFuncReadDiscreteInputs+0xe6>
 800ee82:	8a7b      	ldrh	r3, [r7, #18]
 800ee84:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800ee88:	d245      	bcs.n	800ef16 <eMBFuncReadDiscreteInputs+0xe6>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	2200      	movs	r2, #0
 800ee92:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	1c5a      	adds	r2, r3, #1
 800ee98:	60fa      	str	r2, [r7, #12]
 800ee9a:	2202      	movs	r2, #2
 800ee9c:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	881b      	ldrh	r3, [r3, #0]
 800eea2:	3301      	adds	r3, #1
 800eea4:	b29a      	uxth	r2, r3
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 800eeaa:	8a7b      	ldrh	r3, [r7, #18]
 800eeac:	f003 0307 	and.w	r3, r3, #7
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d006      	beq.n	800eec2 <eMBFuncReadDiscreteInputs+0x92>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 800eeb4:	8a7b      	ldrh	r3, [r7, #18]
 800eeb6:	08db      	lsrs	r3, r3, #3
 800eeb8:	b29b      	uxth	r3, r3
 800eeba:	b2db      	uxtb	r3, r3
 800eebc:	3301      	adds	r3, #1
 800eebe:	75fb      	strb	r3, [r7, #23]
 800eec0:	e003      	b.n	800eeca <eMBFuncReadDiscreteInputs+0x9a>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 800eec2:	8a7b      	ldrh	r3, [r7, #18]
 800eec4:	08db      	lsrs	r3, r3, #3
 800eec6:	b29b      	uxth	r3, r3
 800eec8:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	1c5a      	adds	r2, r3, #1
 800eece:	60fa      	str	r2, [r7, #12]
 800eed0:	7dfa      	ldrb	r2, [r7, #23]
 800eed2:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	881b      	ldrh	r3, [r3, #0]
 800eed8:	3301      	adds	r3, #1
 800eeda:	b29a      	uxth	r2, r3
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 800eee0:	8a7a      	ldrh	r2, [r7, #18]
 800eee2:	8abb      	ldrh	r3, [r7, #20]
 800eee4:	4619      	mov	r1, r3
 800eee6:	68f8      	ldr	r0, [r7, #12]
 800eee8:	f000 fd6c 	bl	800f9c4 <eMBRegDiscreteCB>
 800eeec:	4603      	mov	r3, r0
 800eeee:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800eef0:	7afb      	ldrb	r3, [r7, #11]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d006      	beq.n	800ef04 <eMBFuncReadDiscreteInputs+0xd4>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800eef6:	7afb      	ldrb	r3, [r7, #11]
 800eef8:	4618      	mov	r0, r3
 800eefa:	f000 fa43 	bl	800f384 <prveMBError2Exception>
 800eefe:	4603      	mov	r3, r0
 800ef00:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 800ef02:	e00d      	b.n	800ef20 <eMBFuncReadDiscreteInputs+0xf0>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	881a      	ldrh	r2, [r3, #0]
 800ef08:	7dfb      	ldrb	r3, [r7, #23]
 800ef0a:	b29b      	uxth	r3, r3
 800ef0c:	4413      	add	r3, r2
 800ef0e:	b29a      	uxth	r2, r3
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800ef14:	e004      	b.n	800ef20 <eMBFuncReadDiscreteInputs+0xf0>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800ef16:	2303      	movs	r3, #3
 800ef18:	75bb      	strb	r3, [r7, #22]
 800ef1a:	e001      	b.n	800ef20 <eMBFuncReadDiscreteInputs+0xf0>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800ef1c:	2303      	movs	r3, #3
 800ef1e:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 800ef20:	7dbb      	ldrb	r3, [r7, #22]
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	3718      	adds	r7, #24
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}

0800ef2a <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800ef2a:	b580      	push	{r7, lr}
 800ef2c:	b084      	sub	sp, #16
 800ef2e:	af00      	add	r7, sp, #0
 800ef30:	6078      	str	r0, [r7, #4]
 800ef32:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 800ef34:	2300      	movs	r3, #0
 800ef36:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	881b      	ldrh	r3, [r3, #0]
 800ef3c:	2b05      	cmp	r3, #5
 800ef3e:	d121      	bne.n	800ef84 <eMBFuncWriteHoldingRegister+0x5a>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	3301      	adds	r3, #1
 800ef44:	781b      	ldrb	r3, [r3, #0]
 800ef46:	021b      	lsls	r3, r3, #8
 800ef48:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	3302      	adds	r3, #2
 800ef4e:	781b      	ldrb	r3, [r3, #0]
 800ef50:	461a      	mov	r2, r3
 800ef52:	89bb      	ldrh	r3, [r7, #12]
 800ef54:	4313      	orrs	r3, r2
 800ef56:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 800ef58:	89bb      	ldrh	r3, [r7, #12]
 800ef5a:	3301      	adds	r3, #1
 800ef5c:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	1cd8      	adds	r0, r3, #3
 800ef62:	89b9      	ldrh	r1, [r7, #12]
 800ef64:	2301      	movs	r3, #1
 800ef66:	2201      	movs	r2, #1
 800ef68:	f000 fbc2 	bl	800f6f0 <eMBRegHoldingCB>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 800ef70:	7afb      	ldrb	r3, [r7, #11]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d008      	beq.n	800ef88 <eMBFuncWriteHoldingRegister+0x5e>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 800ef76:	7afb      	ldrb	r3, [r7, #11]
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f000 fa03 	bl	800f384 <prveMBError2Exception>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	73fb      	strb	r3, [r7, #15]
 800ef82:	e001      	b.n	800ef88 <eMBFuncWriteHoldingRegister+0x5e>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800ef84:	2303      	movs	r3, #3
 800ef86:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 800ef88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	3710      	adds	r7, #16
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}

0800ef92 <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800ef92:	b580      	push	{r7, lr}
 800ef94:	b084      	sub	sp, #16
 800ef96:	af00      	add	r7, sp, #0
 800ef98:	6078      	str	r0, [r7, #4]
 800ef9a:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	881b      	ldrh	r3, [r3, #0]
 800efa4:	2b05      	cmp	r3, #5
 800efa6:	d944      	bls.n	800f032 <eMBFuncWriteMultipleHoldingRegister+0xa0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	3301      	adds	r3, #1
 800efac:	781b      	ldrb	r3, [r3, #0]
 800efae:	021b      	lsls	r3, r3, #8
 800efb0:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	3302      	adds	r3, #2
 800efb6:	781b      	ldrb	r3, [r3, #0]
 800efb8:	461a      	mov	r2, r3
 800efba:	89bb      	ldrh	r3, [r7, #12]
 800efbc:	4313      	orrs	r3, r2
 800efbe:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 800efc0:	89bb      	ldrh	r3, [r7, #12]
 800efc2:	3301      	adds	r3, #1
 800efc4:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	3303      	adds	r3, #3
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	021b      	lsls	r3, r3, #8
 800efce:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	3304      	adds	r3, #4
 800efd4:	781b      	ldrb	r3, [r3, #0]
 800efd6:	461a      	mov	r2, r3
 800efd8:	897b      	ldrh	r3, [r7, #10]
 800efda:	4313      	orrs	r3, r2
 800efdc:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	795b      	ldrb	r3, [r3, #5]
 800efe2:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 800efe4:	897b      	ldrh	r3, [r7, #10]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d020      	beq.n	800f02c <eMBFuncWriteMultipleHoldingRegister+0x9a>
 800efea:	897b      	ldrh	r3, [r7, #10]
 800efec:	2b78      	cmp	r3, #120	@ 0x78
 800efee:	d81d      	bhi.n	800f02c <eMBFuncWriteMultipleHoldingRegister+0x9a>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 800eff0:	897b      	ldrh	r3, [r7, #10]
 800eff2:	b2db      	uxtb	r3, r3
 800eff4:	005b      	lsls	r3, r3, #1
 800eff6:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 800eff8:	7a7a      	ldrb	r2, [r7, #9]
 800effa:	429a      	cmp	r2, r3
 800effc:	d116      	bne.n	800f02c <eMBFuncWriteMultipleHoldingRegister+0x9a>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	1d98      	adds	r0, r3, #6
 800f002:	897a      	ldrh	r2, [r7, #10]
 800f004:	89b9      	ldrh	r1, [r7, #12]
 800f006:	2301      	movs	r3, #1
 800f008:	f000 fb72 	bl	800f6f0 <eMBRegHoldingCB>
 800f00c:	4603      	mov	r3, r0
 800f00e:	723b      	strb	r3, [r7, #8]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800f010:	7a3b      	ldrb	r3, [r7, #8]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d006      	beq.n	800f024 <eMBFuncWriteMultipleHoldingRegister+0x92>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800f016:	7a3b      	ldrb	r3, [r7, #8]
 800f018:	4618      	mov	r0, r3
 800f01a:	f000 f9b3 	bl	800f384 <prveMBError2Exception>
 800f01e:	4603      	mov	r3, r0
 800f020:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 800f022:	e008      	b.n	800f036 <eMBFuncWriteMultipleHoldingRegister+0xa4>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	2205      	movs	r2, #5
 800f028:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800f02a:	e004      	b.n	800f036 <eMBFuncWriteMultipleHoldingRegister+0xa4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800f02c:	2303      	movs	r3, #3
 800f02e:	73fb      	strb	r3, [r7, #15]
 800f030:	e001      	b.n	800f036 <eMBFuncWriteMultipleHoldingRegister+0xa4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800f032:	2303      	movs	r3, #3
 800f034:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 800f036:	7bfb      	ldrb	r3, [r7, #15]
}
 800f038:	4618      	mov	r0, r3
 800f03a:	3710      	adds	r7, #16
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}

0800f040 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b086      	sub	sp, #24
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
 800f048:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800f04a:	2300      	movs	r3, #0
 800f04c:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	881b      	ldrh	r3, [r3, #0]
 800f052:	2b05      	cmp	r3, #5
 800f054:	d15d      	bne.n	800f112 <eMBFuncReadHoldingRegister+0xd2>
    {
        usRegAddress  = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	3301      	adds	r3, #1
 800f05a:	781b      	ldrb	r3, [r3, #0]
 800f05c:	021b      	lsls	r3, r3, #8
 800f05e:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	3302      	adds	r3, #2
 800f064:	781b      	ldrb	r3, [r3, #0]
 800f066:	461a      	mov	r2, r3
 800f068:	8abb      	ldrh	r3, [r7, #20]
 800f06a:	4313      	orrs	r3, r2
 800f06c:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800f06e:	8abb      	ldrh	r3, [r7, #20]
 800f070:	3301      	adds	r3, #1
 800f072:	82bb      	strh	r3, [r7, #20]

        usRegCount  = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	3303      	adds	r3, #3
 800f078:	781b      	ldrb	r3, [r3, #0]
 800f07a:	021b      	lsls	r3, r3, #8
 800f07c:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	3304      	adds	r3, #4
 800f082:	781b      	ldrb	r3, [r3, #0]
 800f084:	461a      	mov	r2, r3
 800f086:	8a7b      	ldrh	r3, [r7, #18]
 800f088:	4313      	orrs	r3, r2
 800f08a:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 800f08c:	8a7b      	ldrh	r3, [r7, #18]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d03c      	beq.n	800f10c <eMBFuncReadHoldingRegister+0xcc>
 800f092:	8a7b      	ldrh	r3, [r7, #18]
 800f094:	2b7d      	cmp	r3, #125	@ 0x7d
 800f096:	d839      	bhi.n	800f10c <eMBFuncReadHoldingRegister+0xcc>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	1c5a      	adds	r2, r3, #1
 800f0a6:	60fa      	str	r2, [r7, #12]
 800f0a8:	2203      	movs	r2, #3
 800f0aa:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	881b      	ldrh	r3, [r3, #0]
 800f0b0:	3301      	adds	r3, #1
 800f0b2:	b29a      	uxth	r2, r3
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 800f0b8:	8a7b      	ldrh	r3, [r7, #18]
 800f0ba:	b2da      	uxtb	r2, r3
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	1c59      	adds	r1, r3, #1
 800f0c0:	60f9      	str	r1, [r7, #12]
 800f0c2:	0052      	lsls	r2, r2, #1
 800f0c4:	b2d2      	uxtb	r2, r2
 800f0c6:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	881b      	ldrh	r3, [r3, #0]
 800f0cc:	3301      	adds	r3, #1
 800f0ce:	b29a      	uxth	r2, r3
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 800f0d4:	8a7a      	ldrh	r2, [r7, #18]
 800f0d6:	8ab9      	ldrh	r1, [r7, #20]
 800f0d8:	2300      	movs	r3, #0
 800f0da:	68f8      	ldr	r0, [r7, #12]
 800f0dc:	f000 fb08 	bl	800f6f0 <eMBRegHoldingCB>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800f0e4:	7afb      	ldrb	r3, [r7, #11]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d006      	beq.n	800f0f8 <eMBFuncReadHoldingRegister+0xb8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800f0ea:	7afb      	ldrb	r3, [r7, #11]
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f000 f949 	bl	800f384 <prveMBError2Exception>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800f0f6:	e00e      	b.n	800f116 <eMBFuncReadHoldingRegister+0xd6>
            }
            else
            {
                *usLen += usRegCount * 2;
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	881a      	ldrh	r2, [r3, #0]
 800f0fc:	8a7b      	ldrh	r3, [r7, #18]
 800f0fe:	005b      	lsls	r3, r3, #1
 800f100:	b29b      	uxth	r3, r3
 800f102:	4413      	add	r3, r2
 800f104:	b29a      	uxth	r2, r3
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800f10a:	e004      	b.n	800f116 <eMBFuncReadHoldingRegister+0xd6>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800f10c:	2303      	movs	r3, #3
 800f10e:	75fb      	strb	r3, [r7, #23]
 800f110:	e001      	b.n	800f116 <eMBFuncReadHoldingRegister+0xd6>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800f112:	2303      	movs	r3, #3
 800f114:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 800f116:	7dfb      	ldrb	r3, [r7, #23]
}
 800f118:	4618      	mov	r0, r3
 800f11a:	3718      	adds	r7, #24
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}

0800f120 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b086      	sub	sp, #24
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
 800f128:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800f12a:	2300      	movs	r3, #0
 800f12c:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	881b      	ldrh	r3, [r3, #0]
 800f132:	2b09      	cmp	r3, #9
 800f134:	f240 8095 	bls.w	800f262 <eMBFuncReadWriteMultipleHoldingRegister+0x142>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	3301      	adds	r3, #1
 800f13c:	781b      	ldrb	r3, [r3, #0]
 800f13e:	021b      	lsls	r3, r3, #8
 800f140:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	3302      	adds	r3, #2
 800f146:	781b      	ldrb	r3, [r3, #0]
 800f148:	461a      	mov	r2, r3
 800f14a:	8abb      	ldrh	r3, [r7, #20]
 800f14c:	4313      	orrs	r3, r2
 800f14e:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 800f150:	8abb      	ldrh	r3, [r7, #20]
 800f152:	3301      	adds	r3, #1
 800f154:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	3303      	adds	r3, #3
 800f15a:	781b      	ldrb	r3, [r3, #0]
 800f15c:	021b      	lsls	r3, r3, #8
 800f15e:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	3304      	adds	r3, #4
 800f164:	781b      	ldrb	r3, [r3, #0]
 800f166:	461a      	mov	r2, r3
 800f168:	8a7b      	ldrh	r3, [r7, #18]
 800f16a:	4313      	orrs	r3, r2
 800f16c:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	3305      	adds	r3, #5
 800f172:	781b      	ldrb	r3, [r3, #0]
 800f174:	021b      	lsls	r3, r3, #8
 800f176:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	3306      	adds	r3, #6
 800f17c:	781b      	ldrb	r3, [r3, #0]
 800f17e:	461a      	mov	r2, r3
 800f180:	8a3b      	ldrh	r3, [r7, #16]
 800f182:	4313      	orrs	r3, r2
 800f184:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 800f186:	8a3b      	ldrh	r3, [r7, #16]
 800f188:	3301      	adds	r3, #1
 800f18a:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	3307      	adds	r3, #7
 800f190:	781b      	ldrb	r3, [r3, #0]
 800f192:	021b      	lsls	r3, r3, #8
 800f194:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	3308      	adds	r3, #8
 800f19a:	781b      	ldrb	r3, [r3, #0]
 800f19c:	461a      	mov	r2, r3
 800f19e:	89fb      	ldrh	r3, [r7, #14]
 800f1a0:	4313      	orrs	r3, r2
 800f1a2:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	7a5b      	ldrb	r3, [r3, #9]
 800f1a8:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 800f1aa:	8a7b      	ldrh	r3, [r7, #18]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d056      	beq.n	800f25e <eMBFuncReadWriteMultipleHoldingRegister+0x13e>
 800f1b0:	8a7b      	ldrh	r3, [r7, #18]
 800f1b2:	2b7d      	cmp	r3, #125	@ 0x7d
 800f1b4:	d853      	bhi.n	800f25e <eMBFuncReadWriteMultipleHoldingRegister+0x13e>
 800f1b6:	89fb      	ldrh	r3, [r7, #14]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d050      	beq.n	800f25e <eMBFuncReadWriteMultipleHoldingRegister+0x13e>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 800f1bc:	89fb      	ldrh	r3, [r7, #14]
 800f1be:	2b79      	cmp	r3, #121	@ 0x79
 800f1c0:	d84d      	bhi.n	800f25e <eMBFuncReadWriteMultipleHoldingRegister+0x13e>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 800f1c2:	89fb      	ldrh	r3, [r7, #14]
 800f1c4:	005a      	lsls	r2, r3, #1
 800f1c6:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 800f1c8:	429a      	cmp	r2, r3
 800f1ca:	d148      	bne.n	800f25e <eMBFuncReadWriteMultipleHoldingRegister+0x13e>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f103 000a 	add.w	r0, r3, #10
 800f1d2:	89fa      	ldrh	r2, [r7, #14]
 800f1d4:	8a39      	ldrh	r1, [r7, #16]
 800f1d6:	2301      	movs	r3, #1
 800f1d8:	f000 fa8a 	bl	800f6f0 <eMBRegHoldingCB>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	75bb      	strb	r3, [r7, #22]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 800f1e0:	7dbb      	ldrb	r3, [r7, #22]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d131      	bne.n	800f24a <eMBFuncReadWriteMultipleHoldingRegister+0x12a>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	1c5a      	adds	r2, r3, #1
 800f1f4:	60ba      	str	r2, [r7, #8]
 800f1f6:	2217      	movs	r2, #23
 800f1f8:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	881b      	ldrh	r3, [r3, #0]
 800f1fe:	3301      	adds	r3, #1
 800f200:	b29a      	uxth	r2, r3
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 800f206:	8a7b      	ldrh	r3, [r7, #18]
 800f208:	b2da      	uxtb	r2, r3
 800f20a:	68bb      	ldr	r3, [r7, #8]
 800f20c:	1c59      	adds	r1, r3, #1
 800f20e:	60b9      	str	r1, [r7, #8]
 800f210:	0052      	lsls	r2, r2, #1
 800f212:	b2d2      	uxtb	r2, r2
 800f214:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	881b      	ldrh	r3, [r3, #0]
 800f21a:	3301      	adds	r3, #1
 800f21c:	b29a      	uxth	r2, r3
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 800f222:	8a7a      	ldrh	r2, [r7, #18]
 800f224:	8ab9      	ldrh	r1, [r7, #20]
 800f226:	2300      	movs	r3, #0
 800f228:	68b8      	ldr	r0, [r7, #8]
 800f22a:	f000 fa61 	bl	800f6f0 <eMBRegHoldingCB>
 800f22e:	4603      	mov	r3, r0
 800f230:	75bb      	strb	r3, [r7, #22]
                if( eRegStatus == MB_ENOERR )
 800f232:	7dbb      	ldrb	r3, [r7, #22]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d108      	bne.n	800f24a <eMBFuncReadWriteMultipleHoldingRegister+0x12a>
                {
                    *usLen += 2 * usRegReadCount;
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	881a      	ldrh	r2, [r3, #0]
 800f23c:	8a7b      	ldrh	r3, [r7, #18]
 800f23e:	005b      	lsls	r3, r3, #1
 800f240:	b29b      	uxth	r3, r3
 800f242:	4413      	add	r3, r2
 800f244:	b29a      	uxth	r2, r3
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 800f24a:	7dbb      	ldrb	r3, [r7, #22]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d008      	beq.n	800f262 <eMBFuncReadWriteMultipleHoldingRegister+0x142>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800f250:	7dbb      	ldrb	r3, [r7, #22]
 800f252:	4618      	mov	r0, r3
 800f254:	f000 f896 	bl	800f384 <prveMBError2Exception>
 800f258:	4603      	mov	r3, r0
 800f25a:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800f25c:	e001      	b.n	800f262 <eMBFuncReadWriteMultipleHoldingRegister+0x142>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800f25e:	2303      	movs	r3, #3
 800f260:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 800f262:	7dfb      	ldrb	r3, [r7, #23]
}
 800f264:	4618      	mov	r0, r3
 800f266:	3718      	adds	r7, #24
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}

0800f26c <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b086      	sub	sp, #24
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
 800f274:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800f276:	2300      	movs	r3, #0
 800f278:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	881b      	ldrh	r3, [r3, #0]
 800f27e:	2b05      	cmp	r3, #5
 800f280:	d15d      	bne.n	800f33e <eMBFuncReadInputRegister+0xd2>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	3301      	adds	r3, #1
 800f286:	781b      	ldrb	r3, [r3, #0]
 800f288:	021b      	lsls	r3, r3, #8
 800f28a:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	3302      	adds	r3, #2
 800f290:	781b      	ldrb	r3, [r3, #0]
 800f292:	461a      	mov	r2, r3
 800f294:	8abb      	ldrh	r3, [r7, #20]
 800f296:	4313      	orrs	r3, r2
 800f298:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800f29a:	8abb      	ldrh	r3, [r7, #20]
 800f29c:	3301      	adds	r3, #1
 800f29e:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	3303      	adds	r3, #3
 800f2a4:	781b      	ldrb	r3, [r3, #0]
 800f2a6:	021b      	lsls	r3, r3, #8
 800f2a8:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	3304      	adds	r3, #4
 800f2ae:	781b      	ldrb	r3, [r3, #0]
 800f2b0:	461a      	mov	r2, r3
 800f2b2:	8a7b      	ldrh	r3, [r7, #18]
 800f2b4:	4313      	orrs	r3, r2
 800f2b6:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 800f2b8:	8a7b      	ldrh	r3, [r7, #18]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d03c      	beq.n	800f338 <eMBFuncReadInputRegister+0xcc>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 800f2be:	8a7b      	ldrh	r3, [r7, #18]
 800f2c0:	2b7c      	cmp	r3, #124	@ 0x7c
 800f2c2:	d839      	bhi.n	800f338 <eMBFuncReadInputRegister+0xcc>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	1c5a      	adds	r2, r3, #1
 800f2d2:	60fa      	str	r2, [r7, #12]
 800f2d4:	2204      	movs	r2, #4
 800f2d6:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	881b      	ldrh	r3, [r3, #0]
 800f2dc:	3301      	adds	r3, #1
 800f2de:	b29a      	uxth	r2, r3
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 800f2e4:	8a7b      	ldrh	r3, [r7, #18]
 800f2e6:	b2da      	uxtb	r2, r3
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	1c59      	adds	r1, r3, #1
 800f2ec:	60f9      	str	r1, [r7, #12]
 800f2ee:	0052      	lsls	r2, r2, #1
 800f2f0:	b2d2      	uxtb	r2, r2
 800f2f2:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	881b      	ldrh	r3, [r3, #0]
 800f2f8:	3301      	adds	r3, #1
 800f2fa:	b29a      	uxth	r2, r3
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 800f300:	8a7a      	ldrh	r2, [r7, #18]
 800f302:	8abb      	ldrh	r3, [r7, #20]
 800f304:	4619      	mov	r1, r3
 800f306:	68f8      	ldr	r0, [r7, #12]
 800f308:	f000 fb1e 	bl	800f948 <eMBRegInputCB>
 800f30c:	4603      	mov	r3, r0
 800f30e:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800f310:	7afb      	ldrb	r3, [r7, #11]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d006      	beq.n	800f324 <eMBFuncReadInputRegister+0xb8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800f316:	7afb      	ldrb	r3, [r7, #11]
 800f318:	4618      	mov	r0, r3
 800f31a:	f000 f833 	bl	800f384 <prveMBError2Exception>
 800f31e:	4603      	mov	r3, r0
 800f320:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800f322:	e00e      	b.n	800f342 <eMBFuncReadInputRegister+0xd6>
            }
            else
            {
                *usLen += usRegCount * 2;
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	881a      	ldrh	r2, [r3, #0]
 800f328:	8a7b      	ldrh	r3, [r7, #18]
 800f32a:	005b      	lsls	r3, r3, #1
 800f32c:	b29b      	uxth	r3, r3
 800f32e:	4413      	add	r3, r2
 800f330:	b29a      	uxth	r2, r3
 800f332:	683b      	ldr	r3, [r7, #0]
 800f334:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800f336:	e004      	b.n	800f342 <eMBFuncReadInputRegister+0xd6>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800f338:	2303      	movs	r3, #3
 800f33a:	75fb      	strb	r3, [r7, #23]
 800f33c:	e001      	b.n	800f342 <eMBFuncReadInputRegister+0xd6>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800f33e:	2303      	movs	r3, #3
 800f340:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 800f342:	7dfb      	ldrb	r3, [r7, #23]
}
 800f344:	4618      	mov	r0, r3
 800f346:	3718      	adds	r7, #24
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd80      	pop	{r7, pc}

0800f34c <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b082      	sub	sp, #8
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
 800f354:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	3301      	adds	r3, #1
 800f35a:	4a08      	ldr	r2, [pc, #32]	@ (800f37c <eMBFuncReportSlaveID+0x30>)
 800f35c:	8812      	ldrh	r2, [r2, #0]
 800f35e:	4908      	ldr	r1, [pc, #32]	@ (800f380 <eMBFuncReportSlaveID+0x34>)
 800f360:	4618      	mov	r0, r3
 800f362:	f001 f94e 	bl	8010602 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 800f366:	4b05      	ldr	r3, [pc, #20]	@ (800f37c <eMBFuncReportSlaveID+0x30>)
 800f368:	881b      	ldrh	r3, [r3, #0]
 800f36a:	3301      	adds	r3, #1
 800f36c:	b29a      	uxth	r2, r3
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 800f372:	2300      	movs	r3, #0
}
 800f374:	4618      	mov	r0, r3
 800f376:	3708      	adds	r7, #8
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}
 800f37c:	200084c4 	.word	0x200084c4
 800f380:	200084a4 	.word	0x200084a4

0800f384 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 800f384:	b480      	push	{r7}
 800f386:	b085      	sub	sp, #20
 800f388:	af00      	add	r7, sp, #0
 800f38a:	4603      	mov	r3, r0
 800f38c:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 800f38e:	79fb      	ldrb	r3, [r7, #7]
 800f390:	2b07      	cmp	r3, #7
 800f392:	d00c      	beq.n	800f3ae <prveMBError2Exception+0x2a>
 800f394:	2b07      	cmp	r3, #7
 800f396:	dc0d      	bgt.n	800f3b4 <prveMBError2Exception+0x30>
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d002      	beq.n	800f3a2 <prveMBError2Exception+0x1e>
 800f39c:	2b01      	cmp	r3, #1
 800f39e:	d003      	beq.n	800f3a8 <prveMBError2Exception+0x24>
 800f3a0:	e008      	b.n	800f3b4 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	73fb      	strb	r3, [r7, #15]
            break;
 800f3a6:	e008      	b.n	800f3ba <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 800f3a8:	2302      	movs	r3, #2
 800f3aa:	73fb      	strb	r3, [r7, #15]
            break;
 800f3ac:	e005      	b.n	800f3ba <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 800f3ae:	2306      	movs	r3, #6
 800f3b0:	73fb      	strb	r3, [r7, #15]
            break;
 800f3b2:	e002      	b.n	800f3ba <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 800f3b4:	2304      	movs	r3, #4
 800f3b6:	73fb      	strb	r3, [r7, #15]
            break;
 800f3b8:	bf00      	nop
    }

    return eStatus;
 800f3ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3714      	adds	r7, #20
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr

0800f3c8 <eMBTCPInit>:
}

#if MB_TCP_ENABLED > 0
eMBErrorCode
eMBTCPInit( USHORT ucTCPPort )
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b084      	sub	sp, #16
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	80fb      	strh	r3, [r7, #6]
    eMBErrorCode    eStatus = MB_ENOERR;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	73fb      	strb	r3, [r7, #15]

    if( ( eStatus = eMBTCPDoInit( ucTCPPort ) ) != MB_ENOERR )
 800f3d6:	88fb      	ldrh	r3, [r7, #6]
 800f3d8:	4618      	mov	r0, r3
 800f3da:	f000 fe2f 	bl	801003c <eMBTCPDoInit>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	73fb      	strb	r3, [r7, #15]
 800f3e2:	7bfb      	ldrb	r3, [r7, #15]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d003      	beq.n	800f3f0 <eMBTCPInit+0x28>
    {
        eMBState = STATE_DISABLED;
 800f3e8:	4b14      	ldr	r3, [pc, #80]	@ (800f43c <eMBTCPInit+0x74>)
 800f3ea:	2201      	movs	r2, #1
 800f3ec:	701a      	strb	r2, [r3, #0]
 800f3ee:	e01f      	b.n	800f430 <eMBTCPInit+0x68>
    }
    else if( !xMBPortEventInit(  ) )
 800f3f0:	f000 fb58 	bl	800faa4 <xMBPortEventInit>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d102      	bne.n	800f400 <eMBTCPInit+0x38>
    {
        /* Port dependent event module initalization failed. */
        eStatus = MB_EPORTERR;
 800f3fa:	2303      	movs	r3, #3
 800f3fc:	73fb      	strb	r3, [r7, #15]
 800f3fe:	e017      	b.n	800f430 <eMBTCPInit+0x68>
    }
    else
    {
        pvMBFrameStartCur = eMBTCPStart;
 800f400:	4b0f      	ldr	r3, [pc, #60]	@ (800f440 <eMBTCPInit+0x78>)
 800f402:	4a10      	ldr	r2, [pc, #64]	@ (800f444 <eMBTCPInit+0x7c>)
 800f404:	601a      	str	r2, [r3, #0]
        pvMBFrameStopCur = eMBTCPStop;
 800f406:	4b10      	ldr	r3, [pc, #64]	@ (800f448 <eMBTCPInit+0x80>)
 800f408:	4a10      	ldr	r2, [pc, #64]	@ (800f44c <eMBTCPInit+0x84>)
 800f40a:	601a      	str	r2, [r3, #0]
        peMBFrameReceiveCur = eMBTCPReceive;
 800f40c:	4b10      	ldr	r3, [pc, #64]	@ (800f450 <eMBTCPInit+0x88>)
 800f40e:	4a11      	ldr	r2, [pc, #68]	@ (800f454 <eMBTCPInit+0x8c>)
 800f410:	601a      	str	r2, [r3, #0]
        peMBFrameSendCur = eMBTCPSend;
 800f412:	4b11      	ldr	r3, [pc, #68]	@ (800f458 <eMBTCPInit+0x90>)
 800f414:	4a11      	ldr	r2, [pc, #68]	@ (800f45c <eMBTCPInit+0x94>)
 800f416:	601a      	str	r2, [r3, #0]
        pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBTCPPortClose : NULL;
 800f418:	4b11      	ldr	r3, [pc, #68]	@ (800f460 <eMBTCPInit+0x98>)
 800f41a:	2200      	movs	r2, #0
 800f41c:	601a      	str	r2, [r3, #0]
        ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
 800f41e:	4b11      	ldr	r3, [pc, #68]	@ (800f464 <eMBTCPInit+0x9c>)
 800f420:	22ff      	movs	r2, #255	@ 0xff
 800f422:	701a      	strb	r2, [r3, #0]
        eMBCurrentMode = MB_TCP;
 800f424:	4b10      	ldr	r3, [pc, #64]	@ (800f468 <eMBTCPInit+0xa0>)
 800f426:	2202      	movs	r2, #2
 800f428:	701a      	strb	r2, [r3, #0]
        eMBState = STATE_DISABLED;
 800f42a:	4b04      	ldr	r3, [pc, #16]	@ (800f43c <eMBTCPInit+0x74>)
 800f42c:	2201      	movs	r2, #1
 800f42e:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 800f430:	7bfb      	ldrb	r3, [r7, #15]
}
 800f432:	4618      	mov	r0, r3
 800f434:	3710      	adds	r7, #16
 800f436:	46bd      	mov	sp, r7
 800f438:	bd80      	pop	{r7, pc}
 800f43a:	bf00      	nop
 800f43c:	2000002a 	.word	0x2000002a
 800f440:	200084cc 	.word	0x200084cc
 800f444:	08010067 	.word	0x08010067
 800f448:	200084d0 	.word	0x200084d0
 800f44c:	08010075 	.word	0x08010075
 800f450:	200084d4 	.word	0x200084d4
 800f454:	08010081 	.word	0x08010081
 800f458:	200084c8 	.word	0x200084c8
 800f45c:	080100f1 	.word	0x080100f1
 800f460:	200084d8 	.word	0x200084d8
 800f464:	200084c6 	.word	0x200084c6
 800f468:	200084c7 	.word	0x200084c7

0800f46c <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b082      	sub	sp, #8
 800f470:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 800f472:	2300      	movs	r3, #0
 800f474:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 800f476:	4b09      	ldr	r3, [pc, #36]	@ (800f49c <eMBEnable+0x30>)
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	2b01      	cmp	r3, #1
 800f47c:	d106      	bne.n	800f48c <eMBEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 800f47e:	4b08      	ldr	r3, [pc, #32]	@ (800f4a0 <eMBEnable+0x34>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 800f484:	4b05      	ldr	r3, [pc, #20]	@ (800f49c <eMBEnable+0x30>)
 800f486:	2200      	movs	r2, #0
 800f488:	701a      	strb	r2, [r3, #0]
 800f48a:	e001      	b.n	800f490 <eMBEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 800f48c:	2306      	movs	r3, #6
 800f48e:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 800f490:	79fb      	ldrb	r3, [r7, #7]
}
 800f492:	4618      	mov	r0, r3
 800f494:	3708      	adds	r7, #8
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}
 800f49a:	bf00      	nop
 800f49c:	2000002a 	.word	0x2000002a
 800f4a0:	200084cc 	.word	0x200084cc

0800f4a4 <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 800f4a4:	b590      	push	{r4, r7, lr}
 800f4a6:	b083      	sub	sp, #12
 800f4a8:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 800f4ae:	4b50      	ldr	r3, [pc, #320]	@ (800f5f0 <eMBPoll+0x14c>)
 800f4b0:	781b      	ldrb	r3, [r3, #0]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d001      	beq.n	800f4ba <eMBPoll+0x16>
    {
        return MB_EILLSTATE;
 800f4b6:	2306      	movs	r3, #6
 800f4b8:	e095      	b.n	800f5e6 <eMBPoll+0x142>

    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 800f4ba:	1cbb      	adds	r3, r7, #2
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f000 fb39 	bl	800fb34 <xMBPortEventGet>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	2b01      	cmp	r3, #1
 800f4c6:	f040 808d 	bne.w	800f5e4 <eMBPoll+0x140>
    {
        switch ( eEvent )
 800f4ca:	78bb      	ldrb	r3, [r7, #2]
 800f4cc:	2b03      	cmp	r3, #3
 800f4ce:	f200 8089 	bhi.w	800f5e4 <eMBPoll+0x140>
 800f4d2:	a201      	add	r2, pc, #4	@ (adr r2, 800f4d8 <eMBPoll+0x34>)
 800f4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4d8:	0800f5e5 	.word	0x0800f5e5
 800f4dc:	0800f4e9 	.word	0x0800f4e9
 800f4e0:	0800f51b 	.word	0x0800f51b
 800f4e4:	0800f5e5 	.word	0x0800f5e5
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 800f4e8:	4b42      	ldr	r3, [pc, #264]	@ (800f5f4 <eMBPoll+0x150>)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	4a42      	ldr	r2, [pc, #264]	@ (800f5f8 <eMBPoll+0x154>)
 800f4ee:	4943      	ldr	r1, [pc, #268]	@ (800f5fc <eMBPoll+0x158>)
 800f4f0:	4843      	ldr	r0, [pc, #268]	@ (800f600 <eMBPoll+0x15c>)
 800f4f2:	4798      	blx	r3
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 800f4f8:	78fb      	ldrb	r3, [r7, #3]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d16f      	bne.n	800f5de <eMBPoll+0x13a>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 800f4fe:	4b40      	ldr	r3, [pc, #256]	@ (800f600 <eMBPoll+0x15c>)
 800f500:	781a      	ldrb	r2, [r3, #0]
 800f502:	4b40      	ldr	r3, [pc, #256]	@ (800f604 <eMBPoll+0x160>)
 800f504:	781b      	ldrb	r3, [r3, #0]
 800f506:	429a      	cmp	r2, r3
 800f508:	d003      	beq.n	800f512 <eMBPoll+0x6e>
 800f50a:	4b3d      	ldr	r3, [pc, #244]	@ (800f600 <eMBPoll+0x15c>)
 800f50c:	781b      	ldrb	r3, [r3, #0]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d165      	bne.n	800f5de <eMBPoll+0x13a>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 800f512:	2002      	movs	r0, #2
 800f514:	f000 fadc 	bl	800fad0 <xMBPortEventPost>
                }
            }
            break;
 800f518:	e061      	b.n	800f5de <eMBPoll+0x13a>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 800f51a:	4b38      	ldr	r3, [pc, #224]	@ (800f5fc <eMBPoll+0x158>)
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	781a      	ldrb	r2, [r3, #0]
 800f520:	4b39      	ldr	r3, [pc, #228]	@ (800f608 <eMBPoll+0x164>)
 800f522:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 800f524:	4b39      	ldr	r3, [pc, #228]	@ (800f60c <eMBPoll+0x168>)
 800f526:	2201      	movs	r2, #1
 800f528:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 800f52a:	2300      	movs	r3, #0
 800f52c:	607b      	str	r3, [r7, #4]
 800f52e:	e01f      	b.n	800f570 <eMBPoll+0xcc>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 800f530:	4a37      	ldr	r2, [pc, #220]	@ (800f610 <eMBPoll+0x16c>)
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d01d      	beq.n	800f578 <eMBPoll+0xd4>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 800f53c:	4a34      	ldr	r2, [pc, #208]	@ (800f610 <eMBPoll+0x16c>)
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800f544:	4b30      	ldr	r3, [pc, #192]	@ (800f608 <eMBPoll+0x164>)
 800f546:	781b      	ldrb	r3, [r3, #0]
 800f548:	429a      	cmp	r2, r3
 800f54a:	d10e      	bne.n	800f56a <eMBPoll+0xc6>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 800f54c:	4a30      	ldr	r2, [pc, #192]	@ (800f610 <eMBPoll+0x16c>)
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	00db      	lsls	r3, r3, #3
 800f552:	4413      	add	r3, r2
 800f554:	685b      	ldr	r3, [r3, #4]
 800f556:	4a29      	ldr	r2, [pc, #164]	@ (800f5fc <eMBPoll+0x158>)
 800f558:	6812      	ldr	r2, [r2, #0]
 800f55a:	4927      	ldr	r1, [pc, #156]	@ (800f5f8 <eMBPoll+0x154>)
 800f55c:	4610      	mov	r0, r2
 800f55e:	4798      	blx	r3
 800f560:	4603      	mov	r3, r0
 800f562:	461a      	mov	r2, r3
 800f564:	4b29      	ldr	r3, [pc, #164]	@ (800f60c <eMBPoll+0x168>)
 800f566:	701a      	strb	r2, [r3, #0]
                    break;
 800f568:	e007      	b.n	800f57a <eMBPoll+0xd6>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	3301      	adds	r3, #1
 800f56e:	607b      	str	r3, [r7, #4]
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2b0f      	cmp	r3, #15
 800f574:	dddc      	ble.n	800f530 <eMBPoll+0x8c>
 800f576:	e000      	b.n	800f57a <eMBPoll+0xd6>
                    break;
 800f578:	bf00      	nop
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 800f57a:	4b21      	ldr	r3, [pc, #132]	@ (800f600 <eMBPoll+0x15c>)
 800f57c:	781b      	ldrb	r3, [r3, #0]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d02f      	beq.n	800f5e2 <eMBPoll+0x13e>
            {
                if( eException != MB_EX_NONE )
 800f582:	4b22      	ldr	r3, [pc, #136]	@ (800f60c <eMBPoll+0x168>)
 800f584:	781b      	ldrb	r3, [r3, #0]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d01d      	beq.n	800f5c6 <eMBPoll+0x122>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 800f58a:	4b1b      	ldr	r3, [pc, #108]	@ (800f5f8 <eMBPoll+0x154>)
 800f58c:	2200      	movs	r2, #0
 800f58e:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 800f590:	4b1d      	ldr	r3, [pc, #116]	@ (800f608 <eMBPoll+0x164>)
 800f592:	781a      	ldrb	r2, [r3, #0]
 800f594:	4b19      	ldr	r3, [pc, #100]	@ (800f5fc <eMBPoll+0x158>)
 800f596:	6819      	ldr	r1, [r3, #0]
 800f598:	4b17      	ldr	r3, [pc, #92]	@ (800f5f8 <eMBPoll+0x154>)
 800f59a:	881b      	ldrh	r3, [r3, #0]
 800f59c:	1c58      	adds	r0, r3, #1
 800f59e:	b284      	uxth	r4, r0
 800f5a0:	4815      	ldr	r0, [pc, #84]	@ (800f5f8 <eMBPoll+0x154>)
 800f5a2:	8004      	strh	r4, [r0, #0]
 800f5a4:	440b      	add	r3, r1
 800f5a6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800f5aa:	b2d2      	uxtb	r2, r2
 800f5ac:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 800f5ae:	4b13      	ldr	r3, [pc, #76]	@ (800f5fc <eMBPoll+0x158>)
 800f5b0:	681a      	ldr	r2, [r3, #0]
 800f5b2:	4b11      	ldr	r3, [pc, #68]	@ (800f5f8 <eMBPoll+0x154>)
 800f5b4:	881b      	ldrh	r3, [r3, #0]
 800f5b6:	1c59      	adds	r1, r3, #1
 800f5b8:	b288      	uxth	r0, r1
 800f5ba:	490f      	ldr	r1, [pc, #60]	@ (800f5f8 <eMBPoll+0x154>)
 800f5bc:	8008      	strh	r0, [r1, #0]
 800f5be:	4413      	add	r3, r2
 800f5c0:	4a12      	ldr	r2, [pc, #72]	@ (800f60c <eMBPoll+0x168>)
 800f5c2:	7812      	ldrb	r2, [r2, #0]
 800f5c4:	701a      	strb	r2, [r3, #0]
                if ( ( eMBCurrentMode == MB_RTU ) && MB_RTU_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_RTU_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }
#endif
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 800f5c6:	4b13      	ldr	r3, [pc, #76]	@ (800f614 <eMBPoll+0x170>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	4a0e      	ldr	r2, [pc, #56]	@ (800f604 <eMBPoll+0x160>)
 800f5cc:	7810      	ldrb	r0, [r2, #0]
 800f5ce:	4a0b      	ldr	r2, [pc, #44]	@ (800f5fc <eMBPoll+0x158>)
 800f5d0:	6811      	ldr	r1, [r2, #0]
 800f5d2:	4a09      	ldr	r2, [pc, #36]	@ (800f5f8 <eMBPoll+0x154>)
 800f5d4:	8812      	ldrh	r2, [r2, #0]
 800f5d6:	4798      	blx	r3
 800f5d8:	4603      	mov	r3, r0
 800f5da:	70fb      	strb	r3, [r7, #3]
            }
            break;
 800f5dc:	e001      	b.n	800f5e2 <eMBPoll+0x13e>
            break;
 800f5de:	bf00      	nop
 800f5e0:	e000      	b.n	800f5e4 <eMBPoll+0x140>
            break;
 800f5e2:	bf00      	nop

        case EV_FRAME_SENT:
            break;
        }
    }
    return eStatus;
 800f5e4:	78fb      	ldrb	r3, [r7, #3]
}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	370c      	adds	r7, #12
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd90      	pop	{r4, r7, pc}
 800f5ee:	bf00      	nop
 800f5f0:	2000002a 	.word	0x2000002a
 800f5f4:	200084d4 	.word	0x200084d4
 800f5f8:	200084e4 	.word	0x200084e4
 800f5fc:	200084e0 	.word	0x200084e0
 800f600:	200084dc 	.word	0x200084dc
 800f604:	200084c6 	.word	0x200084c6
 800f608:	200084e6 	.word	0x200084e6
 800f60c:	200084e7 	.word	0x200084e7
 800f610:	2000002c 	.word	0x2000002c
 800f614:	200084c8 	.word	0x200084c8

0800f618 <apply_led_from_coil>:
static USHORT usInputRegs[REG_INPUT_NREGS];
static UCHAR  ucDiscreteInputs[REG_DISC_NDISCRETES];

/* ---- Helpers ---- */
static void apply_led_from_coil(USHORT coilIndex, UCHAR val)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b084      	sub	sp, #16
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	4603      	mov	r3, r0
 800f620:	460a      	mov	r2, r1
 800f622:	80fb      	strh	r3, [r7, #6]
 800f624:	4613      	mov	r3, r2
 800f626:	717b      	strb	r3, [r7, #5]
    /* coilIndex is 0-based index into ucCoils (0..3) */
    GPIO_PinState state = (val ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800f628:	797b      	ldrb	r3, [r7, #5]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	bf14      	ite	ne
 800f62e:	2301      	movne	r3, #1
 800f630:	2300      	moveq	r3, #0
 800f632:	b2db      	uxtb	r3, r3
 800f634:	73fb      	strb	r3, [r7, #15]
    switch (coilIndex) {
 800f636:	88fb      	ldrh	r3, [r7, #6]
 800f638:	2b03      	cmp	r3, #3
 800f63a:	d82b      	bhi.n	800f694 <apply_led_from_coil+0x7c>
 800f63c:	a201      	add	r2, pc, #4	@ (adr r2, 800f644 <apply_led_from_coil+0x2c>)
 800f63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f642:	bf00      	nop
 800f644:	0800f655 	.word	0x0800f655
 800f648:	0800f665 	.word	0x0800f665
 800f64c:	0800f675 	.word	0x0800f675
 800f650:	0800f685 	.word	0x0800f685
        case 0:
            HAL_GPIO_WritePin(LED_PORT, LED_GREEN_PIN, state);
 800f654:	7bfb      	ldrb	r3, [r7, #15]
 800f656:	461a      	mov	r2, r3
 800f658:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800f65c:	4810      	ldr	r0, [pc, #64]	@ (800f6a0 <apply_led_from_coil+0x88>)
 800f65e:	f7f3 f9b3 	bl	80029c8 <HAL_GPIO_WritePin>
            break;
 800f662:	e018      	b.n	800f696 <apply_led_from_coil+0x7e>
        case 1:
            HAL_GPIO_WritePin(LED_PORT, LED_ORANGE_PIN, state);
 800f664:	7bfb      	ldrb	r3, [r7, #15]
 800f666:	461a      	mov	r2, r3
 800f668:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f66c:	480c      	ldr	r0, [pc, #48]	@ (800f6a0 <apply_led_from_coil+0x88>)
 800f66e:	f7f3 f9ab 	bl	80029c8 <HAL_GPIO_WritePin>
            break;
 800f672:	e010      	b.n	800f696 <apply_led_from_coil+0x7e>
        case 2:
            HAL_GPIO_WritePin(LED_PORT, LED_RED_PIN, state);
 800f674:	7bfb      	ldrb	r3, [r7, #15]
 800f676:	461a      	mov	r2, r3
 800f678:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800f67c:	4808      	ldr	r0, [pc, #32]	@ (800f6a0 <apply_led_from_coil+0x88>)
 800f67e:	f7f3 f9a3 	bl	80029c8 <HAL_GPIO_WritePin>
            break;
 800f682:	e008      	b.n	800f696 <apply_led_from_coil+0x7e>
        case 3:
            HAL_GPIO_WritePin(LED_PORT, LED_BLUE_PIN, state);
 800f684:	7bfb      	ldrb	r3, [r7, #15]
 800f686:	461a      	mov	r2, r3
 800f688:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800f68c:	4804      	ldr	r0, [pc, #16]	@ (800f6a0 <apply_led_from_coil+0x88>)
 800f68e:	f7f3 f99b 	bl	80029c8 <HAL_GPIO_WritePin>
            break;
 800f692:	e000      	b.n	800f696 <apply_led_from_coil+0x7e>
        default:
            /* nothing */
            break;
 800f694:	bf00      	nop
    }
}
 800f696:	bf00      	nop
 800f698:	3710      	adds	r7, #16
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}
 800f69e:	bf00      	nop
 800f6a0:	40020c00 	.word	0x40020c00

0800f6a4 <Modbus_InitCallbacks>:

void Modbus_InitCallbacks(void)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b082      	sub	sp, #8
 800f6a8:	af00      	add	r7, sp, #0
    /* initialise storage and apply LEDs to the current coil values (0) */
    memset(usHoldingRegs, 0, sizeof(usHoldingRegs));
 800f6aa:	4b0f      	ldr	r3, [pc, #60]	@ (800f6e8 <Modbus_InitCallbacks+0x44>)
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	801a      	strh	r2, [r3, #0]
    memset(ucCoils, 0, sizeof(ucCoils));
 800f6b0:	2204      	movs	r2, #4
 800f6b2:	2100      	movs	r1, #0
 800f6b4:	480d      	ldr	r0, [pc, #52]	@ (800f6ec <Modbus_InitCallbacks+0x48>)
 800f6b6:	f000 ff2e 	bl	8010516 <memset>
    for (USHORT i = 0; i < REG_COIL_NCOILS; i++) {
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	80fb      	strh	r3, [r7, #6]
 800f6be:	e00a      	b.n	800f6d6 <Modbus_InitCallbacks+0x32>
        apply_led_from_coil(i, ucCoils[i]);
 800f6c0:	88fb      	ldrh	r3, [r7, #6]
 800f6c2:	4a0a      	ldr	r2, [pc, #40]	@ (800f6ec <Modbus_InitCallbacks+0x48>)
 800f6c4:	5cd2      	ldrb	r2, [r2, r3]
 800f6c6:	88fb      	ldrh	r3, [r7, #6]
 800f6c8:	4611      	mov	r1, r2
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f7ff ffa4 	bl	800f618 <apply_led_from_coil>
    for (USHORT i = 0; i < REG_COIL_NCOILS; i++) {
 800f6d0:	88fb      	ldrh	r3, [r7, #6]
 800f6d2:	3301      	adds	r3, #1
 800f6d4:	80fb      	strh	r3, [r7, #6]
 800f6d6:	88fb      	ldrh	r3, [r7, #6]
 800f6d8:	2b03      	cmp	r3, #3
 800f6da:	d9f1      	bls.n	800f6c0 <Modbus_InitCallbacks+0x1c>
    }
}
 800f6dc:	bf00      	nop
 800f6de:	bf00      	nop
 800f6e0:	3708      	adds	r7, #8
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}
 800f6e6:	bf00      	nop
 800f6e8:	200084e8 	.word	0x200084e8
 800f6ec:	200084ec 	.word	0x200084ec

0800f6f0 <eMBRegHoldingCB>:
 * Holding registers callback
 * usAddress is 1-based (FreeModbus calls with address +1 in many flows)
 * ------------------------------------------------------------------*/
eMBErrorCode
eMBRegHoldingCB( UCHAR *pucBuffer, USHORT usAddress, USHORT usNRegs, eMBRegisterMode eMode )
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b088      	sub	sp, #32
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	60f8      	str	r0, [r7, #12]
 800f6f8:	4608      	mov	r0, r1
 800f6fa:	4611      	mov	r1, r2
 800f6fc:	461a      	mov	r2, r3
 800f6fe:	4603      	mov	r3, r0
 800f700:	817b      	strh	r3, [r7, #10]
 800f702:	460b      	mov	r3, r1
 800f704:	813b      	strh	r3, [r7, #8]
 800f706:	4613      	mov	r3, r2
 800f708:	71fb      	strb	r3, [r7, #7]
	LED_ON(LED_GREEN_PIN);
 800f70a:	2201      	movs	r2, #1
 800f70c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800f710:	4830      	ldr	r0, [pc, #192]	@ (800f7d4 <eMBRegHoldingCB+0xe4>)
 800f712:	f7f3 f959 	bl	80029c8 <HAL_GPIO_WritePin>
    /* range check */
    if ((usAddress < REG_HOLDING_START) ||
 800f716:	897b      	ldrh	r3, [r7, #10]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d004      	beq.n	800f726 <eMBRegHoldingCB+0x36>
        (usAddress + usNRegs - 1) > (REG_HOLDING_START + REG_HOLDING_NREGS - 1)) {
 800f71c:	897a      	ldrh	r2, [r7, #10]
 800f71e:	893b      	ldrh	r3, [r7, #8]
 800f720:	4413      	add	r3, r2
    if ((usAddress < REG_HOLDING_START) ||
 800f722:	2b02      	cmp	r3, #2
 800f724:	dd01      	ble.n	800f72a <eMBRegHoldingCB+0x3a>
        return MB_ENOREG;
 800f726:	2301      	movs	r3, #1
 800f728:	e04f      	b.n	800f7ca <eMBRegHoldingCB+0xda>
    }

    USHORT iRegIndex = (USHORT)(usAddress - REG_HOLDING_START);
 800f72a:	897b      	ldrh	r3, [r7, #10]
 800f72c:	3b01      	subs	r3, #1
 800f72e:	837b      	strh	r3, [r7, #26]

    if (eMode == MB_REG_READ) {
 800f730:	79fb      	ldrb	r3, [r7, #7]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d11f      	bne.n	800f776 <eMBRegHoldingCB+0x86>
        /* copy register(s) to buffer (big-endian: high byte first) */
        for (USHORT i = 0; i < usNRegs; i++) {
 800f736:	2300      	movs	r3, #0
 800f738:	83fb      	strh	r3, [r7, #30]
 800f73a:	e017      	b.n	800f76c <eMBRegHoldingCB+0x7c>
            USHORT val = usHoldingRegs[iRegIndex + i];
 800f73c:	8b7a      	ldrh	r2, [r7, #26]
 800f73e:	8bfb      	ldrh	r3, [r7, #30]
 800f740:	4413      	add	r3, r2
 800f742:	4a25      	ldr	r2, [pc, #148]	@ (800f7d8 <eMBRegHoldingCB+0xe8>)
 800f744:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f748:	82bb      	strh	r3, [r7, #20]
            *pucBuffer++ = (UCHAR)(val >> 8);
 800f74a:	8abb      	ldrh	r3, [r7, #20]
 800f74c:	0a1b      	lsrs	r3, r3, #8
 800f74e:	b299      	uxth	r1, r3
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	1c5a      	adds	r2, r3, #1
 800f754:	60fa      	str	r2, [r7, #12]
 800f756:	b2ca      	uxtb	r2, r1
 800f758:	701a      	strb	r2, [r3, #0]
            *pucBuffer++ = (UCHAR)(val & 0xFF);
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	1c5a      	adds	r2, r3, #1
 800f75e:	60fa      	str	r2, [r7, #12]
 800f760:	8aba      	ldrh	r2, [r7, #20]
 800f762:	b2d2      	uxtb	r2, r2
 800f764:	701a      	strb	r2, [r3, #0]
        for (USHORT i = 0; i < usNRegs; i++) {
 800f766:	8bfb      	ldrh	r3, [r7, #30]
 800f768:	3301      	adds	r3, #1
 800f76a:	83fb      	strh	r3, [r7, #30]
 800f76c:	8bfa      	ldrh	r2, [r7, #30]
 800f76e:	893b      	ldrh	r3, [r7, #8]
 800f770:	429a      	cmp	r2, r3
 800f772:	d3e3      	bcc.n	800f73c <eMBRegHoldingCB+0x4c>
 800f774:	e028      	b.n	800f7c8 <eMBRegHoldingCB+0xd8>
        }
    } else if (eMode == MB_REG_WRITE) {
 800f776:	79fb      	ldrb	r3, [r7, #7]
 800f778:	2b01      	cmp	r3, #1
 800f77a:	d123      	bne.n	800f7c4 <eMBRegHoldingCB+0xd4>
        /* write register(s) from buffer */
        for (USHORT i = 0; i < usNRegs; i++) {
 800f77c:	2300      	movs	r3, #0
 800f77e:	83bb      	strh	r3, [r7, #28]
 800f780:	e01b      	b.n	800f7ba <eMBRegHoldingCB+0xca>
            USHORT hi = (USHORT)(*pucBuffer++);
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	1c5a      	adds	r2, r3, #1
 800f786:	60fa      	str	r2, [r7, #12]
 800f788:	781b      	ldrb	r3, [r3, #0]
 800f78a:	833b      	strh	r3, [r7, #24]
            USHORT lo = (USHORT)(*pucBuffer++);
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	1c5a      	adds	r2, r3, #1
 800f790:	60fa      	str	r2, [r7, #12]
 800f792:	781b      	ldrb	r3, [r3, #0]
 800f794:	82fb      	strh	r3, [r7, #22]
            usHoldingRegs[iRegIndex + i] = (USHORT)((hi << 8) | lo);
 800f796:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800f79a:	021b      	lsls	r3, r3, #8
 800f79c:	b21a      	sxth	r2, r3
 800f79e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f7a2:	4313      	orrs	r3, r2
 800f7a4:	b219      	sxth	r1, r3
 800f7a6:	8b7a      	ldrh	r2, [r7, #26]
 800f7a8:	8bbb      	ldrh	r3, [r7, #28]
 800f7aa:	4413      	add	r3, r2
 800f7ac:	b289      	uxth	r1, r1
 800f7ae:	4a0a      	ldr	r2, [pc, #40]	@ (800f7d8 <eMBRegHoldingCB+0xe8>)
 800f7b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (USHORT i = 0; i < usNRegs; i++) {
 800f7b4:	8bbb      	ldrh	r3, [r7, #28]
 800f7b6:	3301      	adds	r3, #1
 800f7b8:	83bb      	strh	r3, [r7, #28]
 800f7ba:	8bba      	ldrh	r2, [r7, #28]
 800f7bc:	893b      	ldrh	r3, [r7, #8]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d3df      	bcc.n	800f782 <eMBRegHoldingCB+0x92>
 800f7c2:	e001      	b.n	800f7c8 <eMBRegHoldingCB+0xd8>
        }
    } else {
        return MB_ENOREG;
 800f7c4:	2301      	movs	r3, #1
 800f7c6:	e000      	b.n	800f7ca <eMBRegHoldingCB+0xda>
    }

    return MB_ENOERR;
 800f7c8:	2300      	movs	r3, #0
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3720      	adds	r7, #32
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}
 800f7d2:	bf00      	nop
 800f7d4:	40020c00 	.word	0x40020c00
 800f7d8:	200084e8 	.word	0x200084e8

0800f7dc <eMBRegCoilsCB>:
 * usAddress is 1-based
 * Note: Modbus coils are bit-packed in pucBuffer LSB-first.
 * ------------------------------------------------------------------*/
eMBErrorCode
eMBRegCoilsCB( UCHAR *pucBuffer, USHORT usAddress, USHORT usNCoils, eMBRegisterMode eMode )
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b08c      	sub	sp, #48	@ 0x30
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	60f8      	str	r0, [r7, #12]
 800f7e4:	4608      	mov	r0, r1
 800f7e6:	4611      	mov	r1, r2
 800f7e8:	461a      	mov	r2, r3
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	817b      	strh	r3, [r7, #10]
 800f7ee:	460b      	mov	r3, r1
 800f7f0:	813b      	strh	r3, [r7, #8]
 800f7f2:	4613      	mov	r3, r2
 800f7f4:	71fb      	strb	r3, [r7, #7]
    if ((usAddress < REG_COIL_START) ||
 800f7f6:	897b      	ldrh	r3, [r7, #10]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d004      	beq.n	800f806 <eMBRegCoilsCB+0x2a>
        (usAddress + usNCoils - 1) > (REG_COIL_START + REG_COIL_NCOILS - 1)) {
 800f7fc:	897a      	ldrh	r2, [r7, #10]
 800f7fe:	893b      	ldrh	r3, [r7, #8]
 800f800:	4413      	add	r3, r2
    if ((usAddress < REG_COIL_START) ||
 800f802:	2b05      	cmp	r3, #5
 800f804:	dd01      	ble.n	800f80a <eMBRegCoilsCB+0x2e>
        return MB_ENOREG;
 800f806:	2301      	movs	r3, #1
 800f808:	e097      	b.n	800f93a <eMBRegCoilsCB+0x15e>
    }

    USHORT iCoilIndex = (USHORT)(usAddress - REG_COIL_START);
 800f80a:	897b      	ldrh	r3, [r7, #10]
 800f80c:	3b01      	subs	r3, #1
 800f80e:	83fb      	strh	r3, [r7, #30]

    if (eMode == MB_REG_READ) {
 800f810:	79fb      	ldrb	r3, [r7, #7]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d145      	bne.n	800f8a2 <eMBRegCoilsCB+0xc6>
        /* pack coils into pucBuffer, LSB-first per byte */
        UCHAR currentByte = 0;
 800f816:	2300      	movs	r3, #0
 800f818:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        UCHAR bitPos = 0;
 800f81c:	2300      	movs	r3, #0
 800f81e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        UCHAR *pOut = pucBuffer;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	62bb      	str	r3, [r7, #40]	@ 0x28

        for (USHORT i = 0; i < usNCoils; i++) {
 800f826:	2300      	movs	r3, #0
 800f828:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f82a:	e02b      	b.n	800f884 <eMBRegCoilsCB+0xa8>
            UCHAR val = (ucCoils[iCoilIndex + i] & 0x01) ? 1 : 0;
 800f82c:	8bfa      	ldrh	r2, [r7, #30]
 800f82e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f830:	4413      	add	r3, r2
 800f832:	4a44      	ldr	r2, [pc, #272]	@ (800f944 <eMBRegCoilsCB+0x168>)
 800f834:	5cd3      	ldrb	r3, [r2, r3]
 800f836:	f003 0301 	and.w	r3, r3, #1
 800f83a:	757b      	strb	r3, [r7, #21]
            currentByte |= (val << bitPos);
 800f83c:	7d7a      	ldrb	r2, [r7, #21]
 800f83e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f842:	fa02 f303 	lsl.w	r3, r2, r3
 800f846:	b25a      	sxtb	r2, r3
 800f848:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800f84c:	4313      	orrs	r3, r2
 800f84e:	b25b      	sxtb	r3, r3
 800f850:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            bitPos++;
 800f854:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f858:	3301      	adds	r3, #1
 800f85a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            if (bitPos == 8) {
 800f85e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f862:	2b08      	cmp	r3, #8
 800f864:	d10b      	bne.n	800f87e <eMBRegCoilsCB+0xa2>
                *pOut++ = currentByte;
 800f866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f868:	1c5a      	adds	r2, r3, #1
 800f86a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800f86c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800f870:	701a      	strb	r2, [r3, #0]
                currentByte = 0;
 800f872:	2300      	movs	r3, #0
 800f874:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                bitPos = 0;
 800f878:	2300      	movs	r3, #0
 800f87a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        for (USHORT i = 0; i < usNCoils; i++) {
 800f87e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f880:	3301      	adds	r3, #1
 800f882:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f884:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800f886:	893b      	ldrh	r3, [r7, #8]
 800f888:	429a      	cmp	r2, r3
 800f88a:	d3cf      	bcc.n	800f82c <eMBRegCoilsCB+0x50>
            }
        }
        /* any remaining partial byte */
        if (bitPos != 0) {
 800f88c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f890:	2b00      	cmp	r3, #0
 800f892:	d051      	beq.n	800f938 <eMBRegCoilsCB+0x15c>
            *pOut++ = currentByte;
 800f894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f896:	1c5a      	adds	r2, r3, #1
 800f898:	62ba      	str	r2, [r7, #40]	@ 0x28
 800f89a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800f89e:	701a      	strb	r2, [r3, #0]
 800f8a0:	e04a      	b.n	800f938 <eMBRegCoilsCB+0x15c>
        }
    } else if (eMode == MB_REG_WRITE) {
 800f8a2:	79fb      	ldrb	r3, [r7, #7]
 800f8a4:	2b01      	cmp	r3, #1
 800f8a6:	d145      	bne.n	800f934 <eMBRegCoilsCB+0x158>
        /* unpack pucBuffer and write to coil storage and LEDs */
        UCHAR *pIn = pucBuffer;
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	61bb      	str	r3, [r7, #24]
        USHORT byteIndex = 0;
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	84bb      	strh	r3, [r7, #36]	@ 0x24
        UCHAR bitIndex = 0;
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        for (USHORT i = 0; i < usNCoils; i++) {
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	843b      	strh	r3, [r7, #32]
 800f8ba:	e036      	b.n	800f92a <eMBRegCoilsCB+0x14e>
            /* ensure we read correct byte */
            UCHAR byte = pIn[byteIndex];
 800f8bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f8be:	69ba      	ldr	r2, [r7, #24]
 800f8c0:	4413      	add	r3, r2
 800f8c2:	781b      	ldrb	r3, [r3, #0]
 800f8c4:	75fb      	strb	r3, [r7, #23]
            UCHAR bit = (byte >> bitIndex) & 0x01;
 800f8c6:	7dfa      	ldrb	r2, [r7, #23]
 800f8c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f8cc:	fa42 f303 	asr.w	r3, r2, r3
 800f8d0:	b2db      	uxtb	r3, r3
 800f8d2:	f003 0301 	and.w	r3, r3, #1
 800f8d6:	75bb      	strb	r3, [r7, #22]
            ucCoils[iCoilIndex + i] = bit ? 1 : 0;
 800f8d8:	7dbb      	ldrb	r3, [r7, #22]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	bf14      	ite	ne
 800f8de:	2301      	movne	r3, #1
 800f8e0:	2300      	moveq	r3, #0
 800f8e2:	b2d9      	uxtb	r1, r3
 800f8e4:	8bfa      	ldrh	r2, [r7, #30]
 800f8e6:	8c3b      	ldrh	r3, [r7, #32]
 800f8e8:	4413      	add	r3, r2
 800f8ea:	4a16      	ldr	r2, [pc, #88]	@ (800f944 <eMBRegCoilsCB+0x168>)
 800f8ec:	54d1      	strb	r1, [r2, r3]
            apply_led_from_coil(iCoilIndex + i, ucCoils[iCoilIndex + i]);
 800f8ee:	8bfa      	ldrh	r2, [r7, #30]
 800f8f0:	8c3b      	ldrh	r3, [r7, #32]
 800f8f2:	4413      	add	r3, r2
 800f8f4:	b298      	uxth	r0, r3
 800f8f6:	8bfa      	ldrh	r2, [r7, #30]
 800f8f8:	8c3b      	ldrh	r3, [r7, #32]
 800f8fa:	4413      	add	r3, r2
 800f8fc:	4a11      	ldr	r2, [pc, #68]	@ (800f944 <eMBRegCoilsCB+0x168>)
 800f8fe:	5cd3      	ldrb	r3, [r2, r3]
 800f900:	4619      	mov	r1, r3
 800f902:	f7ff fe89 	bl	800f618 <apply_led_from_coil>

            bitIndex++;
 800f906:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f90a:	3301      	adds	r3, #1
 800f90c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            if (bitIndex == 8) {
 800f910:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f914:	2b08      	cmp	r3, #8
 800f916:	d105      	bne.n	800f924 <eMBRegCoilsCB+0x148>
                bitIndex = 0;
 800f918:	2300      	movs	r3, #0
 800f91a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                byteIndex++;
 800f91e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f920:	3301      	adds	r3, #1
 800f922:	84bb      	strh	r3, [r7, #36]	@ 0x24
        for (USHORT i = 0; i < usNCoils; i++) {
 800f924:	8c3b      	ldrh	r3, [r7, #32]
 800f926:	3301      	adds	r3, #1
 800f928:	843b      	strh	r3, [r7, #32]
 800f92a:	8c3a      	ldrh	r2, [r7, #32]
 800f92c:	893b      	ldrh	r3, [r7, #8]
 800f92e:	429a      	cmp	r2, r3
 800f930:	d3c4      	bcc.n	800f8bc <eMBRegCoilsCB+0xe0>
 800f932:	e001      	b.n	800f938 <eMBRegCoilsCB+0x15c>
            }
        }
    } else {
        return MB_ENOREG;
 800f934:	2301      	movs	r3, #1
 800f936:	e000      	b.n	800f93a <eMBRegCoilsCB+0x15e>
    }

    return MB_ENOERR;
 800f938:	2300      	movs	r3, #0
}
 800f93a:	4618      	mov	r0, r3
 800f93c:	3730      	adds	r7, #48	@ 0x30
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd80      	pop	{r7, pc}
 800f942:	bf00      	nop
 800f944:	200084ec 	.word	0x200084ec

0800f948 <eMBRegInputCB>:
 * Input registers callback
 * usAddress is 1-based
 * ------------------------------------------------------------------*/
eMBErrorCode
eMBRegInputCB( UCHAR *pucBuffer, USHORT usAddress, USHORT usNRegs )
{
 800f948:	b480      	push	{r7}
 800f94a:	b085      	sub	sp, #20
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
 800f950:	460b      	mov	r3, r1
 800f952:	807b      	strh	r3, [r7, #2]
 800f954:	4613      	mov	r3, r2
 800f956:	803b      	strh	r3, [r7, #0]
    if ((usAddress < REG_INPUT_START) ||
 800f958:	887b      	ldrh	r3, [r7, #2]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d004      	beq.n	800f968 <eMBRegInputCB+0x20>
        (usAddress + usNRegs - 1) > (REG_INPUT_START + REG_INPUT_NREGS - 1)) {
 800f95e:	887a      	ldrh	r2, [r7, #2]
 800f960:	883b      	ldrh	r3, [r7, #0]
 800f962:	4413      	add	r3, r2
    if ((usAddress < REG_INPUT_START) ||
 800f964:	2b03      	cmp	r3, #3
 800f966:	dd01      	ble.n	800f96c <eMBRegInputCB+0x24>
        return MB_ENOREG;
 800f968:	2301      	movs	r3, #1
 800f96a:	e022      	b.n	800f9b2 <eMBRegInputCB+0x6a>
    }

    USHORT iRegIndex = (USHORT)(usAddress - REG_INPUT_START);
 800f96c:	887b      	ldrh	r3, [r7, #2]
 800f96e:	3b01      	subs	r3, #1
 800f970:	81bb      	strh	r3, [r7, #12]

    /* copy register(s) to buffer (big-endian) */
    for (USHORT i = 0; i < usNRegs; i++) {
 800f972:	2300      	movs	r3, #0
 800f974:	81fb      	strh	r3, [r7, #14]
 800f976:	e017      	b.n	800f9a8 <eMBRegInputCB+0x60>
        USHORT val = usInputRegs[iRegIndex + i];
 800f978:	89ba      	ldrh	r2, [r7, #12]
 800f97a:	89fb      	ldrh	r3, [r7, #14]
 800f97c:	4413      	add	r3, r2
 800f97e:	4a10      	ldr	r2, [pc, #64]	@ (800f9c0 <eMBRegInputCB+0x78>)
 800f980:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f984:	817b      	strh	r3, [r7, #10]
        *pucBuffer++ = (UCHAR)(val >> 8);
 800f986:	897b      	ldrh	r3, [r7, #10]
 800f988:	0a1b      	lsrs	r3, r3, #8
 800f98a:	b299      	uxth	r1, r3
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	1c5a      	adds	r2, r3, #1
 800f990:	607a      	str	r2, [r7, #4]
 800f992:	b2ca      	uxtb	r2, r1
 800f994:	701a      	strb	r2, [r3, #0]
        *pucBuffer++ = (UCHAR)(val & 0xFF);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	1c5a      	adds	r2, r3, #1
 800f99a:	607a      	str	r2, [r7, #4]
 800f99c:	897a      	ldrh	r2, [r7, #10]
 800f99e:	b2d2      	uxtb	r2, r2
 800f9a0:	701a      	strb	r2, [r3, #0]
    for (USHORT i = 0; i < usNRegs; i++) {
 800f9a2:	89fb      	ldrh	r3, [r7, #14]
 800f9a4:	3301      	adds	r3, #1
 800f9a6:	81fb      	strh	r3, [r7, #14]
 800f9a8:	89fa      	ldrh	r2, [r7, #14]
 800f9aa:	883b      	ldrh	r3, [r7, #0]
 800f9ac:	429a      	cmp	r2, r3
 800f9ae:	d3e3      	bcc.n	800f978 <eMBRegInputCB+0x30>
    }

    return MB_ENOERR;
 800f9b0:	2300      	movs	r3, #0
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3714      	adds	r7, #20
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9bc:	4770      	bx	lr
 800f9be:	bf00      	nop
 800f9c0:	200084f0 	.word	0x200084f0

0800f9c4 <eMBRegDiscreteCB>:
 * usAddress is 1-based
 * Note: packed into pucBuffer LSB-first per byte
 * ------------------------------------------------------------------*/
eMBErrorCode
eMBRegDiscreteCB( UCHAR *pucBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 800f9c4:	b480      	push	{r7}
 800f9c6:	b087      	sub	sp, #28
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
 800f9cc:	460b      	mov	r3, r1
 800f9ce:	807b      	strh	r3, [r7, #2]
 800f9d0:	4613      	mov	r3, r2
 800f9d2:	803b      	strh	r3, [r7, #0]
    if ((usAddress < REG_DISC_START) ||
 800f9d4:	887b      	ldrh	r3, [r7, #2]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d004      	beq.n	800f9e4 <eMBRegDiscreteCB+0x20>
        (usAddress + usNDiscrete - 1) > (REG_DISC_START + REG_DISC_NDISCRETES - 1)) {
 800f9da:	887a      	ldrh	r2, [r7, #2]
 800f9dc:	883b      	ldrh	r3, [r7, #0]
 800f9de:	4413      	add	r3, r2
    if ((usAddress < REG_DISC_START) ||
 800f9e0:	2b05      	cmp	r3, #5
 800f9e2:	dd01      	ble.n	800f9e8 <eMBRegDiscreteCB+0x24>
        return MB_ENOREG;
 800f9e4:	2301      	movs	r3, #1
 800f9e6:	e03c      	b.n	800fa62 <eMBRegDiscreteCB+0x9e>
    }

    USHORT iDiscIndex = (USHORT)(usAddress - REG_DISC_START);
 800f9e8:	887b      	ldrh	r3, [r7, #2]
 800f9ea:	3b01      	subs	r3, #1
 800f9ec:	81bb      	strh	r3, [r7, #12]

    UCHAR currentByte = 0;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	75fb      	strb	r3, [r7, #23]
    UCHAR bitPos = 0;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	75bb      	strb	r3, [r7, #22]
    UCHAR *pOut = pucBuffer;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	613b      	str	r3, [r7, #16]

    for (USHORT i = 0; i < usNDiscrete; i++) {
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	81fb      	strh	r3, [r7, #14]
 800f9fe:	e023      	b.n	800fa48 <eMBRegDiscreteCB+0x84>
        UCHAR val = (ucDiscreteInputs[iDiscIndex + i] & 0x01) ? 1 : 0;
 800fa00:	89ba      	ldrh	r2, [r7, #12]
 800fa02:	89fb      	ldrh	r3, [r7, #14]
 800fa04:	4413      	add	r3, r2
 800fa06:	4a1a      	ldr	r2, [pc, #104]	@ (800fa70 <eMBRegDiscreteCB+0xac>)
 800fa08:	5cd3      	ldrb	r3, [r2, r3]
 800fa0a:	f003 0301 	and.w	r3, r3, #1
 800fa0e:	72fb      	strb	r3, [r7, #11]
        currentByte |= (val << bitPos);
 800fa10:	7afa      	ldrb	r2, [r7, #11]
 800fa12:	7dbb      	ldrb	r3, [r7, #22]
 800fa14:	fa02 f303 	lsl.w	r3, r2, r3
 800fa18:	b25a      	sxtb	r2, r3
 800fa1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fa1e:	4313      	orrs	r3, r2
 800fa20:	b25b      	sxtb	r3, r3
 800fa22:	75fb      	strb	r3, [r7, #23]
        bitPos++;
 800fa24:	7dbb      	ldrb	r3, [r7, #22]
 800fa26:	3301      	adds	r3, #1
 800fa28:	75bb      	strb	r3, [r7, #22]
        if (bitPos == 8) {
 800fa2a:	7dbb      	ldrb	r3, [r7, #22]
 800fa2c:	2b08      	cmp	r3, #8
 800fa2e:	d108      	bne.n	800fa42 <eMBRegDiscreteCB+0x7e>
            *pOut++ = currentByte;
 800fa30:	693b      	ldr	r3, [r7, #16]
 800fa32:	1c5a      	adds	r2, r3, #1
 800fa34:	613a      	str	r2, [r7, #16]
 800fa36:	7dfa      	ldrb	r2, [r7, #23]
 800fa38:	701a      	strb	r2, [r3, #0]
            currentByte = 0;
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	75fb      	strb	r3, [r7, #23]
            bitPos = 0;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	75bb      	strb	r3, [r7, #22]
    for (USHORT i = 0; i < usNDiscrete; i++) {
 800fa42:	89fb      	ldrh	r3, [r7, #14]
 800fa44:	3301      	adds	r3, #1
 800fa46:	81fb      	strh	r3, [r7, #14]
 800fa48:	89fa      	ldrh	r2, [r7, #14]
 800fa4a:	883b      	ldrh	r3, [r7, #0]
 800fa4c:	429a      	cmp	r2, r3
 800fa4e:	d3d7      	bcc.n	800fa00 <eMBRegDiscreteCB+0x3c>
        }
    }

    /* flush last partial byte */
    if (bitPos != 0) {
 800fa50:	7dbb      	ldrb	r3, [r7, #22]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d004      	beq.n	800fa60 <eMBRegDiscreteCB+0x9c>
        *pOut++ = currentByte;
 800fa56:	693b      	ldr	r3, [r7, #16]
 800fa58:	1c5a      	adds	r2, r3, #1
 800fa5a:	613a      	str	r2, [r7, #16]
 800fa5c:	7dfa      	ldrb	r2, [r7, #23]
 800fa5e:	701a      	strb	r2, [r3, #0]
    }

    return MB_ENOERR;
 800fa60:	2300      	movs	r3, #0
}
 800fa62:	4618      	mov	r0, r3
 800fa64:	371c      	adds	r7, #28
 800fa66:	46bd      	mov	sp, r7
 800fa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6c:	4770      	bx	lr
 800fa6e:	bf00      	nop
 800fa70:	200084f4 	.word	0x200084f4

0800fa74 <Modbus_SetHolding>:
    }
    return 0; /* out-of-range safe default */
}

void Modbus_SetHolding(USHORT index, USHORT value)
{
 800fa74:	b480      	push	{r7}
 800fa76:	b083      	sub	sp, #12
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	460a      	mov	r2, r1
 800fa7e:	80fb      	strh	r3, [r7, #6]
 800fa80:	4613      	mov	r3, r2
 800fa82:	80bb      	strh	r3, [r7, #4]
    if (index < REG_HOLDING_NREGS) {
 800fa84:	88fb      	ldrh	r3, [r7, #6]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d104      	bne.n	800fa94 <Modbus_SetHolding+0x20>
        usHoldingRegs[index] = value;
 800fa8a:	88fb      	ldrh	r3, [r7, #6]
 800fa8c:	4904      	ldr	r1, [pc, #16]	@ (800faa0 <Modbus_SetHolding+0x2c>)
 800fa8e:	88ba      	ldrh	r2, [r7, #4]
 800fa90:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }
}
 800fa94:	bf00      	nop
 800fa96:	370c      	adds	r7, #12
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9e:	4770      	bx	lr
 800faa0:	200084e8 	.word	0x200084e8

0800faa4 <xMBPortEventInit>:
static volatile BOOL         s_event_pending = FALSE;
static volatile eMBEventType s_event_queued  = EV_READY;

/* ----------------------- TCP functions ---------------------- */
BOOL xMBPortEventInit(void)
{
 800faa4:	b480      	push	{r7}
 800faa6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800faa8:	b672      	cpsid	i
}
 800faaa:	bf00      	nop
    __disable_irq();
    s_event_pending = FALSE;
 800faac:	4b06      	ldr	r3, [pc, #24]	@ (800fac8 <xMBPortEventInit+0x24>)
 800faae:	2200      	movs	r2, #0
 800fab0:	701a      	strb	r2, [r3, #0]
    s_event_queued  = EV_READY;
 800fab2:	4b06      	ldr	r3, [pc, #24]	@ (800facc <xMBPortEventInit+0x28>)
 800fab4:	2200      	movs	r2, #0
 800fab6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800fab8:	b662      	cpsie	i
}
 800faba:	bf00      	nop
    __enable_irq();
    return TRUE;
 800fabc:	2301      	movs	r3, #1
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	46bd      	mov	sp, r7
 800fac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac6:	4770      	bx	lr
 800fac8:	20008504 	.word	0x20008504
 800facc:	20008505 	.word	0x20008505

0800fad0 <xMBPortEventPost>:

BOOL xMBPortEventPost(eMBEventType eEvent)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b086      	sub	sp, #24
 800fad4:	af02      	add	r7, sp, #8
 800fad6:	4603      	mov	r3, r0
 800fad8:	71fb      	strb	r3, [r7, #7]
    DEBUG_PRINTF("%s -> post event=%d\r\n", __func__, eEvent);
 800fada:	79fb      	ldrb	r3, [r7, #7]
 800fadc:	9300      	str	r3, [sp, #0]
 800fade:	4b0f      	ldr	r3, [pc, #60]	@ (800fb1c <xMBPortEventPost+0x4c>)
 800fae0:	4a0f      	ldr	r2, [pc, #60]	@ (800fb20 <xMBPortEventPost+0x50>)
 800fae2:	2140      	movs	r1, #64	@ 0x40
 800fae4:	480f      	ldr	r0, [pc, #60]	@ (800fb24 <xMBPortEventPost+0x54>)
 800fae6:	f000 fc73 	bl	80103d0 <sniprintf>
 800faea:	60f8      	str	r0, [r7, #12]
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	b29a      	uxth	r2, r3
 800faf0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800faf4:	490b      	ldr	r1, [pc, #44]	@ (800fb24 <xMBPortEventPost+0x54>)
 800faf6:	480c      	ldr	r0, [pc, #48]	@ (800fb28 <xMBPortEventPost+0x58>)
 800faf8:	f7f3 fc4c 	bl	8003394 <HAL_UART_Transmit>
  __ASM volatile ("cpsid i" : : : "memory");
 800fafc:	b672      	cpsid	i
}
 800fafe:	bf00      	nop
    __disable_irq();
    s_event_queued  = eEvent;
 800fb00:	4a0a      	ldr	r2, [pc, #40]	@ (800fb2c <xMBPortEventPost+0x5c>)
 800fb02:	79fb      	ldrb	r3, [r7, #7]
 800fb04:	7013      	strb	r3, [r2, #0]
    s_event_pending = TRUE;
 800fb06:	4b0a      	ldr	r3, [pc, #40]	@ (800fb30 <xMBPortEventPost+0x60>)
 800fb08:	2201      	movs	r2, #1
 800fb0a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800fb0c:	b662      	cpsie	i
}
 800fb0e:	bf00      	nop
    __enable_irq();

    return TRUE;
 800fb10:	2301      	movs	r3, #1
}
 800fb12:	4618      	mov	r0, r3
 800fb14:	3710      	adds	r7, #16
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}
 800fb1a:	bf00      	nop
 800fb1c:	080141c8 	.word	0x080141c8
 800fb20:	08013fa4 	.word	0x08013fa4
 800fb24:	2000016c 	.word	0x2000016c
 800fb28:	20000124 	.word	0x20000124
 800fb2c:	20008505 	.word	0x20008505
 800fb30:	20008504 	.word	0x20008504

0800fb34 <xMBPortEventGet>:

BOOL xMBPortEventGet(eMBEventType *eEvent)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b084      	sub	sp, #16
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
    if (!eEvent) return FALSE;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d101      	bne.n	800fb46 <xMBPortEventGet+0x12>
 800fb42:	2300      	movs	r3, #0
 800fb44:	e025      	b.n	800fb92 <xMBPortEventGet+0x5e>
  __ASM volatile ("cpsid i" : : : "memory");
 800fb46:	b672      	cpsid	i
}
 800fb48:	bf00      	nop

    __disable_irq();
    if (s_event_pending) {
 800fb4a:	4b14      	ldr	r3, [pc, #80]	@ (800fb9c <xMBPortEventGet+0x68>)
 800fb4c:	781b      	ldrb	r3, [r3, #0]
 800fb4e:	b2db      	uxtb	r3, r3
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d01b      	beq.n	800fb8c <xMBPortEventGet+0x58>
        *eEvent        = s_event_queued;
 800fb54:	4b12      	ldr	r3, [pc, #72]	@ (800fba0 <xMBPortEventGet+0x6c>)
 800fb56:	781b      	ldrb	r3, [r3, #0]
 800fb58:	b2da      	uxtb	r2, r3
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	701a      	strb	r2, [r3, #0]
        s_event_pending = FALSE;
 800fb5e:	4b0f      	ldr	r3, [pc, #60]	@ (800fb9c <xMBPortEventGet+0x68>)
 800fb60:	2200      	movs	r2, #0
 800fb62:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800fb64:	b662      	cpsie	i
}
 800fb66:	bf00      	nop
        __enable_irq();

        DEBUG_PRINTF(" -> got event=%d\r\n", *eEvent);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	781b      	ldrb	r3, [r3, #0]
 800fb6c:	4a0d      	ldr	r2, [pc, #52]	@ (800fba4 <xMBPortEventGet+0x70>)
 800fb6e:	2140      	movs	r1, #64	@ 0x40
 800fb70:	480d      	ldr	r0, [pc, #52]	@ (800fba8 <xMBPortEventGet+0x74>)
 800fb72:	f000 fc2d 	bl	80103d0 <sniprintf>
 800fb76:	60f8      	str	r0, [r7, #12]
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	b29a      	uxth	r2, r3
 800fb7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fb80:	4909      	ldr	r1, [pc, #36]	@ (800fba8 <xMBPortEventGet+0x74>)
 800fb82:	480a      	ldr	r0, [pc, #40]	@ (800fbac <xMBPortEventGet+0x78>)
 800fb84:	f7f3 fc06 	bl	8003394 <HAL_UART_Transmit>
        return TRUE;
 800fb88:	2301      	movs	r3, #1
 800fb8a:	e002      	b.n	800fb92 <xMBPortEventGet+0x5e>
  __ASM volatile ("cpsie i" : : : "memory");
 800fb8c:	b662      	cpsie	i
}
 800fb8e:	bf00      	nop
    }
    __enable_irq();
    return FALSE;
 800fb90:	2300      	movs	r3, #0
}
 800fb92:	4618      	mov	r0, r3
 800fb94:	3710      	adds	r7, #16
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}
 800fb9a:	bf00      	nop
 800fb9c:	20008504 	.word	0x20008504
 800fba0:	20008505 	.word	0x20008505
 800fba4:	08013fbc 	.word	0x08013fbc
 800fba8:	2000016c 	.word	0x2000016c
 800fbac:	20000124 	.word	0x20000124

0800fbb0 <xMBTCPPortInit>:

/* ----------------------- TCP functions ---------------------- */
BOOL xMBTCPPortInit(USHORT usTCPPort)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b084      	sub	sp, #16
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	80fb      	strh	r3, [r7, #6]
    DEBUG_PRINTF("%s\r\n", __func__);
 800fbba:	4b24      	ldr	r3, [pc, #144]	@ (800fc4c <xMBTCPPortInit+0x9c>)
 800fbbc:	4a24      	ldr	r2, [pc, #144]	@ (800fc50 <xMBTCPPortInit+0xa0>)
 800fbbe:	2140      	movs	r1, #64	@ 0x40
 800fbc0:	4824      	ldr	r0, [pc, #144]	@ (800fc54 <xMBTCPPortInit+0xa4>)
 800fbc2:	f000 fc05 	bl	80103d0 <sniprintf>
 800fbc6:	60f8      	str	r0, [r7, #12]
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	b29a      	uxth	r2, r3
 800fbcc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fbd0:	4920      	ldr	r1, [pc, #128]	@ (800fc54 <xMBTCPPortInit+0xa4>)
 800fbd2:	4821      	ldr	r0, [pc, #132]	@ (800fc58 <xMBTCPPortInit+0xa8>)
 800fbd4:	f7f3 fbde 	bl	8003394 <HAL_UART_Transmit>
    mb_listener = tcp_new();
 800fbd8:	f7f7 fe0e 	bl	80077f8 <tcp_new>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	4a1f      	ldr	r2, [pc, #124]	@ (800fc5c <xMBTCPPortInit+0xac>)
 800fbe0:	6013      	str	r3, [r2, #0]
    if (!mb_listener) return FALSE;
 800fbe2:	4b1e      	ldr	r3, [pc, #120]	@ (800fc5c <xMBTCPPortInit+0xac>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d101      	bne.n	800fbee <xMBTCPPortInit+0x3e>
 800fbea:	2300      	movs	r3, #0
 800fbec:	e02a      	b.n	800fc44 <xMBTCPPortInit+0x94>

    if (tcp_bind(mb_listener, IP_ADDR_ANY, usTCPPort) != ERR_OK)
 800fbee:	4b1b      	ldr	r3, [pc, #108]	@ (800fc5c <xMBTCPPortInit+0xac>)
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	88fa      	ldrh	r2, [r7, #6]
 800fbf4:	491a      	ldr	r1, [pc, #104]	@ (800fc60 <xMBTCPPortInit+0xb0>)
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f7f6 fd76 	bl	80066e8 <tcp_bind>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d001      	beq.n	800fc06 <xMBTCPPortInit+0x56>
        return FALSE;
 800fc02:	2300      	movs	r3, #0
 800fc04:	e01e      	b.n	800fc44 <xMBTCPPortInit+0x94>

    mb_listener = tcp_listen(mb_listener);
 800fc06:	4b15      	ldr	r3, [pc, #84]	@ (800fc5c <xMBTCPPortInit+0xac>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	21ff      	movs	r1, #255	@ 0xff
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f7f6 fe23 	bl	8006858 <tcp_listen_with_backlog>
 800fc12:	4603      	mov	r3, r0
 800fc14:	4a11      	ldr	r2, [pc, #68]	@ (800fc5c <xMBTCPPortInit+0xac>)
 800fc16:	6013      	str	r3, [r2, #0]
    tcp_accept(mb_listener, mb_accept);
 800fc18:	4b10      	ldr	r3, [pc, #64]	@ (800fc5c <xMBTCPPortInit+0xac>)
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	4911      	ldr	r1, [pc, #68]	@ (800fc64 <xMBTCPPortInit+0xb4>)
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f7f7 fe14 	bl	800784c <tcp_accept>

    DEBUG_PRINTF(" -> listening on TCP port %u\r\n", (unsigned)usTCPPort);
 800fc24:	88fb      	ldrh	r3, [r7, #6]
 800fc26:	4a10      	ldr	r2, [pc, #64]	@ (800fc68 <xMBTCPPortInit+0xb8>)
 800fc28:	2140      	movs	r1, #64	@ 0x40
 800fc2a:	480a      	ldr	r0, [pc, #40]	@ (800fc54 <xMBTCPPortInit+0xa4>)
 800fc2c:	f000 fbd0 	bl	80103d0 <sniprintf>
 800fc30:	60b8      	str	r0, [r7, #8]
 800fc32:	68bb      	ldr	r3, [r7, #8]
 800fc34:	b29a      	uxth	r2, r3
 800fc36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fc3a:	4906      	ldr	r1, [pc, #24]	@ (800fc54 <xMBTCPPortInit+0xa4>)
 800fc3c:	4806      	ldr	r0, [pc, #24]	@ (800fc58 <xMBTCPPortInit+0xa8>)
 800fc3e:	f7f3 fba9 	bl	8003394 <HAL_UART_Transmit>
    return TRUE;
 800fc42:	2301      	movs	r3, #1
}
 800fc44:	4618      	mov	r0, r3
 800fc46:	3710      	adds	r7, #16
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}
 800fc4c:	080141dc 	.word	0x080141dc
 800fc50:	08013fd0 	.word	0x08013fd0
 800fc54:	2000016c 	.word	0x2000016c
 800fc58:	20000124 	.word	0x20000124
 800fc5c:	200084f8 	.word	0x200084f8
 800fc60:	080141b4 	.word	0x080141b4
 800fc64:	0800fe35 	.word	0x0800fe35
 800fc68:	08013fd8 	.word	0x08013fd8

0800fc6c <vMBTCPPortDisable>:
        mb_listener = NULL;
    }
}

void vMBTCPPortDisable(void)
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b082      	sub	sp, #8
 800fc70:	af00      	add	r7, sp, #0
    DEBUG_PRINTF("%s\r\n", __func__);
 800fc72:	4b15      	ldr	r3, [pc, #84]	@ (800fcc8 <vMBTCPPortDisable+0x5c>)
 800fc74:	4a15      	ldr	r2, [pc, #84]	@ (800fccc <vMBTCPPortDisable+0x60>)
 800fc76:	2140      	movs	r1, #64	@ 0x40
 800fc78:	4815      	ldr	r0, [pc, #84]	@ (800fcd0 <vMBTCPPortDisable+0x64>)
 800fc7a:	f000 fba9 	bl	80103d0 <sniprintf>
 800fc7e:	6078      	str	r0, [r7, #4]
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	b29a      	uxth	r2, r3
 800fc84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fc88:	4911      	ldr	r1, [pc, #68]	@ (800fcd0 <vMBTCPPortDisable+0x64>)
 800fc8a:	4812      	ldr	r0, [pc, #72]	@ (800fcd4 <vMBTCPPortDisable+0x68>)
 800fc8c:	f7f3 fb82 	bl	8003394 <HAL_UART_Transmit>
    if (mb_client) {
 800fc90:	4b11      	ldr	r3, [pc, #68]	@ (800fcd8 <vMBTCPPortDisable+0x6c>)
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d007      	beq.n	800fca8 <vMBTCPPortDisable+0x3c>
        tcp_close(mb_client);
 800fc98:	4b0f      	ldr	r3, [pc, #60]	@ (800fcd8 <vMBTCPPortDisable+0x6c>)
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f7f6 fc2d 	bl	80064fc <tcp_close>
        mb_client = NULL;
 800fca2:	4b0d      	ldr	r3, [pc, #52]	@ (800fcd8 <vMBTCPPortDisable+0x6c>)
 800fca4:	2200      	movs	r2, #0
 800fca6:	601a      	str	r2, [r3, #0]
    }
    if (rx_pbuf) {
 800fca8:	4b0c      	ldr	r3, [pc, #48]	@ (800fcdc <vMBTCPPortDisable+0x70>)
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d007      	beq.n	800fcc0 <vMBTCPPortDisable+0x54>
        pbuf_free(rx_pbuf);
 800fcb0:	4b0a      	ldr	r3, [pc, #40]	@ (800fcdc <vMBTCPPortDisable+0x70>)
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f7f5 ff83 	bl	8005bc0 <pbuf_free>
        rx_pbuf = NULL;
 800fcba:	4b08      	ldr	r3, [pc, #32]	@ (800fcdc <vMBTCPPortDisable+0x70>)
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	601a      	str	r2, [r3, #0]
    }
}
 800fcc0:	bf00      	nop
 800fcc2:	3708      	adds	r7, #8
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	bd80      	pop	{r7, pc}
 800fcc8:	080141ec 	.word	0x080141ec
 800fccc:	08013fd0 	.word	0x08013fd0
 800fcd0:	2000016c 	.word	0x2000016c
 800fcd4:	20000124 	.word	0x20000124
 800fcd8:	200084fc 	.word	0x200084fc
 800fcdc:	20008500 	.word	0x20008500

0800fce0 <xMBTCPPortGetRequest>:

BOOL xMBTCPPortGetRequest(UCHAR **ppucMBTCPFrame, USHORT *pusLength)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b084      	sub	sp, #16
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
 800fce8:	6039      	str	r1, [r7, #0]
    DEBUG_PRINTF("%s\r\n", __func__);
 800fcea:	4b1e      	ldr	r3, [pc, #120]	@ (800fd64 <xMBTCPPortGetRequest+0x84>)
 800fcec:	4a1e      	ldr	r2, [pc, #120]	@ (800fd68 <xMBTCPPortGetRequest+0x88>)
 800fcee:	2140      	movs	r1, #64	@ 0x40
 800fcf0:	481e      	ldr	r0, [pc, #120]	@ (800fd6c <xMBTCPPortGetRequest+0x8c>)
 800fcf2:	f000 fb6d 	bl	80103d0 <sniprintf>
 800fcf6:	60f8      	str	r0, [r7, #12]
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	b29a      	uxth	r2, r3
 800fcfc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fd00:	491a      	ldr	r1, [pc, #104]	@ (800fd6c <xMBTCPPortGetRequest+0x8c>)
 800fd02:	481b      	ldr	r0, [pc, #108]	@ (800fd70 <xMBTCPPortGetRequest+0x90>)
 800fd04:	f7f3 fb46 	bl	8003394 <HAL_UART_Transmit>
    if (!rx_pbuf) return FALSE;
 800fd08:	4b1a      	ldr	r3, [pc, #104]	@ (800fd74 <xMBTCPPortGetRequest+0x94>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d101      	bne.n	800fd14 <xMBTCPPortGetRequest+0x34>
 800fd10:	2300      	movs	r3, #0
 800fd12:	e022      	b.n	800fd5a <xMBTCPPortGetRequest+0x7a>

    *ppucMBTCPFrame = rx_pbuf->payload;
 800fd14:	4b17      	ldr	r3, [pc, #92]	@ (800fd74 <xMBTCPPortGetRequest+0x94>)
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	685a      	ldr	r2, [r3, #4]
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	601a      	str	r2, [r3, #0]
    *pusLength      = rx_pbuf->len;
 800fd1e:	4b15      	ldr	r3, [pc, #84]	@ (800fd74 <xMBTCPPortGetRequest+0x94>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	895a      	ldrh	r2, [r3, #10]
 800fd24:	683b      	ldr	r3, [r7, #0]
 800fd26:	801a      	strh	r2, [r3, #0]

    DEBUG_PRINTF(" -> handing out %u bytes\r\n", (unsigned)*pusLength);
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	881b      	ldrh	r3, [r3, #0]
 800fd2c:	4a12      	ldr	r2, [pc, #72]	@ (800fd78 <xMBTCPPortGetRequest+0x98>)
 800fd2e:	2140      	movs	r1, #64	@ 0x40
 800fd30:	480e      	ldr	r0, [pc, #56]	@ (800fd6c <xMBTCPPortGetRequest+0x8c>)
 800fd32:	f000 fb4d 	bl	80103d0 <sniprintf>
 800fd36:	60b8      	str	r0, [r7, #8]
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	b29a      	uxth	r2, r3
 800fd3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fd40:	490a      	ldr	r1, [pc, #40]	@ (800fd6c <xMBTCPPortGetRequest+0x8c>)
 800fd42:	480b      	ldr	r0, [pc, #44]	@ (800fd70 <xMBTCPPortGetRequest+0x90>)
 800fd44:	f7f3 fb26 	bl	8003394 <HAL_UART_Transmit>

    pbuf_free(rx_pbuf);
 800fd48:	4b0a      	ldr	r3, [pc, #40]	@ (800fd74 <xMBTCPPortGetRequest+0x94>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f7f5 ff37 	bl	8005bc0 <pbuf_free>
    rx_pbuf = NULL;
 800fd52:	4b08      	ldr	r3, [pc, #32]	@ (800fd74 <xMBTCPPortGetRequest+0x94>)
 800fd54:	2200      	movs	r2, #0
 800fd56:	601a      	str	r2, [r3, #0]
    return TRUE;
 800fd58:	2301      	movs	r3, #1
}
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	3710      	adds	r7, #16
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}
 800fd62:	bf00      	nop
 800fd64:	08014200 	.word	0x08014200
 800fd68:	08013fd0 	.word	0x08013fd0
 800fd6c:	2000016c 	.word	0x2000016c
 800fd70:	20000124 	.word	0x20000124
 800fd74:	20008500 	.word	0x20008500
 800fd78:	08013ff8 	.word	0x08013ff8

0800fd7c <xMBTCPPortSendResponse>:

BOOL xMBTCPPortSendResponse(const UCHAR *pucMBTCPFrame, USHORT usLength)
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b086      	sub	sp, #24
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
 800fd84:	460b      	mov	r3, r1
 800fd86:	807b      	strh	r3, [r7, #2]
    DEBUG_PRINTF("%s\r\n", __func__);
 800fd88:	4b23      	ldr	r3, [pc, #140]	@ (800fe18 <xMBTCPPortSendResponse+0x9c>)
 800fd8a:	4a24      	ldr	r2, [pc, #144]	@ (800fe1c <xMBTCPPortSendResponse+0xa0>)
 800fd8c:	2140      	movs	r1, #64	@ 0x40
 800fd8e:	4824      	ldr	r0, [pc, #144]	@ (800fe20 <xMBTCPPortSendResponse+0xa4>)
 800fd90:	f000 fb1e 	bl	80103d0 <sniprintf>
 800fd94:	6178      	str	r0, [r7, #20]
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	b29a      	uxth	r2, r3
 800fd9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fd9e:	4920      	ldr	r1, [pc, #128]	@ (800fe20 <xMBTCPPortSendResponse+0xa4>)
 800fda0:	4820      	ldr	r0, [pc, #128]	@ (800fe24 <xMBTCPPortSendResponse+0xa8>)
 800fda2:	f7f3 faf7 	bl	8003394 <HAL_UART_Transmit>
    if (!mb_client) {
 800fda6:	4b20      	ldr	r3, [pc, #128]	@ (800fe28 <xMBTCPPortSendResponse+0xac>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d10f      	bne.n	800fdce <xMBTCPPortSendResponse+0x52>
        DEBUG_PRINTF(" -> no client\r\n");
 800fdae:	4a1f      	ldr	r2, [pc, #124]	@ (800fe2c <xMBTCPPortSendResponse+0xb0>)
 800fdb0:	2140      	movs	r1, #64	@ 0x40
 800fdb2:	481b      	ldr	r0, [pc, #108]	@ (800fe20 <xMBTCPPortSendResponse+0xa4>)
 800fdb4:	f000 fb0c 	bl	80103d0 <sniprintf>
 800fdb8:	60f8      	str	r0, [r7, #12]
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	b29a      	uxth	r2, r3
 800fdbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fdc2:	4917      	ldr	r1, [pc, #92]	@ (800fe20 <xMBTCPPortSendResponse+0xa4>)
 800fdc4:	4817      	ldr	r0, [pc, #92]	@ (800fe24 <xMBTCPPortSendResponse+0xa8>)
 800fdc6:	f7f3 fae5 	bl	8003394 <HAL_UART_Transmit>
        return FALSE;
 800fdca:	2300      	movs	r3, #0
 800fdcc:	e020      	b.n	800fe10 <xMBTCPPortSendResponse+0x94>
    }

    if (tcp_write(mb_client, pucMBTCPFrame, usLength, TCP_WRITE_FLAG_COPY) != ERR_OK)
 800fdce:	4b16      	ldr	r3, [pc, #88]	@ (800fe28 <xMBTCPPortSendResponse+0xac>)
 800fdd0:	6818      	ldr	r0, [r3, #0]
 800fdd2:	887a      	ldrh	r2, [r7, #2]
 800fdd4:	2301      	movs	r3, #1
 800fdd6:	6879      	ldr	r1, [r7, #4]
 800fdd8:	f7fa fbcc 	bl	800a574 <tcp_write>
 800fddc:	4603      	mov	r3, r0
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d001      	beq.n	800fde6 <xMBTCPPortSendResponse+0x6a>
        return FALSE;
 800fde2:	2300      	movs	r3, #0
 800fde4:	e014      	b.n	800fe10 <xMBTCPPortSendResponse+0x94>

    tcp_output(mb_client);
 800fde6:	4b10      	ldr	r3, [pc, #64]	@ (800fe28 <xMBTCPPortSendResponse+0xac>)
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	4618      	mov	r0, r3
 800fdec:	f7fb f9ac 	bl	800b148 <tcp_output>

    DEBUG_PRINTF(" -> sent %u bytes\r\n", (unsigned)usLength);
 800fdf0:	887b      	ldrh	r3, [r7, #2]
 800fdf2:	4a0f      	ldr	r2, [pc, #60]	@ (800fe30 <xMBTCPPortSendResponse+0xb4>)
 800fdf4:	2140      	movs	r1, #64	@ 0x40
 800fdf6:	480a      	ldr	r0, [pc, #40]	@ (800fe20 <xMBTCPPortSendResponse+0xa4>)
 800fdf8:	f000 faea 	bl	80103d0 <sniprintf>
 800fdfc:	6138      	str	r0, [r7, #16]
 800fdfe:	693b      	ldr	r3, [r7, #16]
 800fe00:	b29a      	uxth	r2, r3
 800fe02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fe06:	4906      	ldr	r1, [pc, #24]	@ (800fe20 <xMBTCPPortSendResponse+0xa4>)
 800fe08:	4806      	ldr	r0, [pc, #24]	@ (800fe24 <xMBTCPPortSendResponse+0xa8>)
 800fe0a:	f7f3 fac3 	bl	8003394 <HAL_UART_Transmit>
    return TRUE;
 800fe0e:	2301      	movs	r3, #1
}
 800fe10:	4618      	mov	r0, r3
 800fe12:	3718      	adds	r7, #24
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}
 800fe18:	08014218 	.word	0x08014218
 800fe1c:	08013fd0 	.word	0x08013fd0
 800fe20:	2000016c 	.word	0x2000016c
 800fe24:	20000124 	.word	0x20000124
 800fe28:	200084fc 	.word	0x200084fc
 800fe2c:	08014014 	.word	0x08014014
 800fe30:	08014024 	.word	0x08014024

0800fe34 <mb_accept>:

/* ----------------------- lwIP callbacks ---------------------- */
static err_t mb_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b086      	sub	sp, #24
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	60f8      	str	r0, [r7, #12]
 800fe3c:	60b9      	str	r1, [r7, #8]
 800fe3e:	4613      	mov	r3, r2
 800fe40:	71fb      	strb	r3, [r7, #7]
    DEBUG_PRINTF("%s\r\n", __func__);
 800fe42:	4b17      	ldr	r3, [pc, #92]	@ (800fea0 <mb_accept+0x6c>)
 800fe44:	4a17      	ldr	r2, [pc, #92]	@ (800fea4 <mb_accept+0x70>)
 800fe46:	2140      	movs	r1, #64	@ 0x40
 800fe48:	4817      	ldr	r0, [pc, #92]	@ (800fea8 <mb_accept+0x74>)
 800fe4a:	f000 fac1 	bl	80103d0 <sniprintf>
 800fe4e:	6178      	str	r0, [r7, #20]
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	b29a      	uxth	r2, r3
 800fe54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fe58:	4913      	ldr	r1, [pc, #76]	@ (800fea8 <mb_accept+0x74>)
 800fe5a:	4814      	ldr	r0, [pc, #80]	@ (800feac <mb_accept+0x78>)
 800fe5c:	f7f3 fa9a 	bl	8003394 <HAL_UART_Transmit>
    (void)arg; (void)err;

    mb_client = newpcb;
 800fe60:	4a13      	ldr	r2, [pc, #76]	@ (800feb0 <mb_accept+0x7c>)
 800fe62:	68bb      	ldr	r3, [r7, #8]
 800fe64:	6013      	str	r3, [r2, #0]
    tcp_recv(mb_client, mb_recv);
 800fe66:	4b12      	ldr	r3, [pc, #72]	@ (800feb0 <mb_accept+0x7c>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	4912      	ldr	r1, [pc, #72]	@ (800feb4 <mb_accept+0x80>)
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f7f7 fccb 	bl	8007808 <tcp_recv>

    DEBUG_PRINTF(" -> client connected\r\n");
 800fe72:	4a11      	ldr	r2, [pc, #68]	@ (800feb8 <mb_accept+0x84>)
 800fe74:	2140      	movs	r1, #64	@ 0x40
 800fe76:	480c      	ldr	r0, [pc, #48]	@ (800fea8 <mb_accept+0x74>)
 800fe78:	f000 faaa 	bl	80103d0 <sniprintf>
 800fe7c:	6138      	str	r0, [r7, #16]
 800fe7e:	693b      	ldr	r3, [r7, #16]
 800fe80:	b29a      	uxth	r2, r3
 800fe82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fe86:	4908      	ldr	r1, [pc, #32]	@ (800fea8 <mb_accept+0x74>)
 800fe88:	4808      	ldr	r0, [pc, #32]	@ (800feac <mb_accept+0x78>)
 800fe8a:	f7f3 fa83 	bl	8003394 <HAL_UART_Transmit>

    xMBPortEventPost(EV_READY);
 800fe8e:	2000      	movs	r0, #0
 800fe90:	f7ff fe1e 	bl	800fad0 <xMBPortEventPost>
    return ERR_OK;
 800fe94:	2300      	movs	r3, #0
}
 800fe96:	4618      	mov	r0, r3
 800fe98:	3718      	adds	r7, #24
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	bd80      	pop	{r7, pc}
 800fe9e:	bf00      	nop
 800fea0:	08014230 	.word	0x08014230
 800fea4:	08013fd0 	.word	0x08013fd0
 800fea8:	2000016c 	.word	0x2000016c
 800feac:	20000124 	.word	0x20000124
 800feb0:	200084fc 	.word	0x200084fc
 800feb4:	0800febd 	.word	0x0800febd
 800feb8:	08014038 	.word	0x08014038

0800febc <mb_recv>:

static err_t mb_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 800febc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800febe:	b093      	sub	sp, #76	@ 0x4c
 800fec0:	af08      	add	r7, sp, #32
 800fec2:	60f8      	str	r0, [r7, #12]
 800fec4:	60b9      	str	r1, [r7, #8]
 800fec6:	607a      	str	r2, [r7, #4]
 800fec8:	70fb      	strb	r3, [r7, #3]
    DEBUG_PRINTF("%s\r\n", __func__);
 800feca:	4b52      	ldr	r3, [pc, #328]	@ (8010014 <mb_recv+0x158>)
 800fecc:	4a52      	ldr	r2, [pc, #328]	@ (8010018 <mb_recv+0x15c>)
 800fece:	2140      	movs	r1, #64	@ 0x40
 800fed0:	4852      	ldr	r0, [pc, #328]	@ (801001c <mb_recv+0x160>)
 800fed2:	f000 fa7d 	bl	80103d0 <sniprintf>
 800fed6:	6278      	str	r0, [r7, #36]	@ 0x24
 800fed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feda:	b29a      	uxth	r2, r3
 800fedc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fee0:	494e      	ldr	r1, [pc, #312]	@ (801001c <mb_recv+0x160>)
 800fee2:	484f      	ldr	r0, [pc, #316]	@ (8010020 <mb_recv+0x164>)
 800fee4:	f7f3 fa56 	bl	8003394 <HAL_UART_Transmit>
    (void)arg; (void)tpcb;

    if (!p) {
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d112      	bne.n	800ff14 <mb_recv+0x58>
        mb_client = NULL;
 800feee:	4b4d      	ldr	r3, [pc, #308]	@ (8010024 <mb_recv+0x168>)
 800fef0:	2200      	movs	r2, #0
 800fef2:	601a      	str	r2, [r3, #0]
        DEBUG_PRINTF(" -> remote closed\r\n");
 800fef4:	4a4c      	ldr	r2, [pc, #304]	@ (8010028 <mb_recv+0x16c>)
 800fef6:	2140      	movs	r1, #64	@ 0x40
 800fef8:	4848      	ldr	r0, [pc, #288]	@ (801001c <mb_recv+0x160>)
 800fefa:	f000 fa69 	bl	80103d0 <sniprintf>
 800fefe:	6138      	str	r0, [r7, #16]
 800ff00:	693b      	ldr	r3, [r7, #16]
 800ff02:	b29a      	uxth	r2, r3
 800ff04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ff08:	4944      	ldr	r1, [pc, #272]	@ (801001c <mb_recv+0x160>)
 800ff0a:	4845      	ldr	r0, [pc, #276]	@ (8010020 <mb_recv+0x164>)
 800ff0c:	f7f3 fa42 	bl	8003394 <HAL_UART_Transmit>
        return ERR_OK;
 800ff10:	2300      	movs	r3, #0
 800ff12:	e07a      	b.n	801000a <mb_recv+0x14e>
    }

    if (err != ERR_OK) {
 800ff14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d015      	beq.n	800ff48 <mb_recv+0x8c>
        pbuf_free(p);
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	f7f5 fe4f 	bl	8005bc0 <pbuf_free>
        DEBUG_PRINTF(" -> error %d\r\n", (int)err);
 800ff22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ff26:	4a41      	ldr	r2, [pc, #260]	@ (801002c <mb_recv+0x170>)
 800ff28:	2140      	movs	r1, #64	@ 0x40
 800ff2a:	483c      	ldr	r0, [pc, #240]	@ (801001c <mb_recv+0x160>)
 800ff2c:	f000 fa50 	bl	80103d0 <sniprintf>
 800ff30:	6178      	str	r0, [r7, #20]
 800ff32:	697b      	ldr	r3, [r7, #20]
 800ff34:	b29a      	uxth	r2, r3
 800ff36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ff3a:	4938      	ldr	r1, [pc, #224]	@ (801001c <mb_recv+0x160>)
 800ff3c:	4838      	ldr	r0, [pc, #224]	@ (8010020 <mb_recv+0x164>)
 800ff3e:	f7f3 fa29 	bl	8003394 <HAL_UART_Transmit>
        return err;
 800ff42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ff46:	e060      	b.n	801000a <mb_recv+0x14e>
    }

    if (rx_pbuf) pbuf_free(rx_pbuf);
 800ff48:	4b39      	ldr	r3, [pc, #228]	@ (8010030 <mb_recv+0x174>)
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d004      	beq.n	800ff5a <mb_recv+0x9e>
 800ff50:	4b37      	ldr	r3, [pc, #220]	@ (8010030 <mb_recv+0x174>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	4618      	mov	r0, r3
 800ff56:	f7f5 fe33 	bl	8005bc0 <pbuf_free>
    rx_pbuf = p;
 800ff5a:	4a35      	ldr	r2, [pc, #212]	@ (8010030 <mb_recv+0x174>)
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	6013      	str	r3, [r2, #0]

    tcp_recved(tpcb, p->tot_len);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	891b      	ldrh	r3, [r3, #8]
 800ff64:	4619      	mov	r1, r3
 800ff66:	68b8      	ldr	r0, [r7, #8]
 800ff68:	f7f6 fd8c 	bl	8006a84 <tcp_recved>

    DEBUG_PRINTF(" -> received %u bytes\r\n", (unsigned)p->tot_len);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	891b      	ldrh	r3, [r3, #8]
 800ff70:	4a30      	ldr	r2, [pc, #192]	@ (8010034 <mb_recv+0x178>)
 800ff72:	2140      	movs	r1, #64	@ 0x40
 800ff74:	4829      	ldr	r0, [pc, #164]	@ (801001c <mb_recv+0x160>)
 800ff76:	f000 fa2b 	bl	80103d0 <sniprintf>
 800ff7a:	6238      	str	r0, [r7, #32]
 800ff7c:	6a3b      	ldr	r3, [r7, #32]
 800ff7e:	b29a      	uxth	r2, r3
 800ff80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ff84:	4925      	ldr	r1, [pc, #148]	@ (801001c <mb_recv+0x160>)
 800ff86:	4826      	ldr	r0, [pc, #152]	@ (8010020 <mb_recv+0x164>)
 800ff88:	f7f3 fa04 	bl	8003394 <HAL_UART_Transmit>
    if (p->len >= 8) {
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	895b      	ldrh	r3, [r3, #10]
 800ff90:	2b07      	cmp	r3, #7
 800ff92:	d936      	bls.n	8010002 <mb_recv+0x146>
        uint8_t *b = (uint8_t*)p->payload;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	685b      	ldr	r3, [r3, #4]
 800ff98:	61fb      	str	r3, [r7, #28]
        DEBUG_PRINTF(" MBAP: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 800ff9a:	69fb      	ldr	r3, [r7, #28]
 800ff9c:	781b      	ldrb	r3, [r3, #0]
 800ff9e:	469c      	mov	ip, r3
 800ffa0:	69fb      	ldr	r3, [r7, #28]
 800ffa2:	3301      	adds	r3, #1
 800ffa4:	781b      	ldrb	r3, [r3, #0]
 800ffa6:	461a      	mov	r2, r3
 800ffa8:	69fb      	ldr	r3, [r7, #28]
 800ffaa:	3302      	adds	r3, #2
 800ffac:	781b      	ldrb	r3, [r3, #0]
 800ffae:	4619      	mov	r1, r3
 800ffb0:	69fb      	ldr	r3, [r7, #28]
 800ffb2:	3303      	adds	r3, #3
 800ffb4:	781b      	ldrb	r3, [r3, #0]
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	69fb      	ldr	r3, [r7, #28]
 800ffba:	3304      	adds	r3, #4
 800ffbc:	781b      	ldrb	r3, [r3, #0]
 800ffbe:	461c      	mov	r4, r3
 800ffc0:	69fb      	ldr	r3, [r7, #28]
 800ffc2:	3305      	adds	r3, #5
 800ffc4:	781b      	ldrb	r3, [r3, #0]
 800ffc6:	461d      	mov	r5, r3
 800ffc8:	69fb      	ldr	r3, [r7, #28]
 800ffca:	3306      	adds	r3, #6
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	461e      	mov	r6, r3
 800ffd0:	69fb      	ldr	r3, [r7, #28]
 800ffd2:	3307      	adds	r3, #7
 800ffd4:	781b      	ldrb	r3, [r3, #0]
 800ffd6:	9306      	str	r3, [sp, #24]
 800ffd8:	9605      	str	r6, [sp, #20]
 800ffda:	9504      	str	r5, [sp, #16]
 800ffdc:	9403      	str	r4, [sp, #12]
 800ffde:	9002      	str	r0, [sp, #8]
 800ffe0:	9101      	str	r1, [sp, #4]
 800ffe2:	9200      	str	r2, [sp, #0]
 800ffe4:	4663      	mov	r3, ip
 800ffe6:	4a14      	ldr	r2, [pc, #80]	@ (8010038 <mb_recv+0x17c>)
 800ffe8:	2140      	movs	r1, #64	@ 0x40
 800ffea:	480c      	ldr	r0, [pc, #48]	@ (801001c <mb_recv+0x160>)
 800ffec:	f000 f9f0 	bl	80103d0 <sniprintf>
 800fff0:	61b8      	str	r0, [r7, #24]
 800fff2:	69bb      	ldr	r3, [r7, #24]
 800fff4:	b29a      	uxth	r2, r3
 800fff6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fffa:	4908      	ldr	r1, [pc, #32]	@ (801001c <mb_recv+0x160>)
 800fffc:	4808      	ldr	r0, [pc, #32]	@ (8010020 <mb_recv+0x164>)
 800fffe:	f7f3 f9c9 	bl	8003394 <HAL_UART_Transmit>
                     b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7]);
    }

    xMBPortEventPost(EV_FRAME_RECEIVED);
 8010002:	2001      	movs	r0, #1
 8010004:	f7ff fd64 	bl	800fad0 <xMBPortEventPost>
    return ERR_OK;
 8010008:	2300      	movs	r3, #0
}
 801000a:	4618      	mov	r0, r3
 801000c:	372c      	adds	r7, #44	@ 0x2c
 801000e:	46bd      	mov	sp, r7
 8010010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010012:	bf00      	nop
 8010014:	0801423c 	.word	0x0801423c
 8010018:	08013fd0 	.word	0x08013fd0
 801001c:	2000016c 	.word	0x2000016c
 8010020:	20000124 	.word	0x20000124
 8010024:	200084fc 	.word	0x200084fc
 8010028:	08014050 	.word	0x08014050
 801002c:	08014064 	.word	0x08014064
 8010030:	20008500 	.word	0x20008500
 8010034:	08014074 	.word	0x08014074
 8010038:	0801408c 	.word	0x0801408c

0801003c <eMBTCPDoInit>:


/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBTCPDoInit( USHORT ucTCPPort )
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b084      	sub	sp, #16
 8010040:	af00      	add	r7, sp, #0
 8010042:	4603      	mov	r3, r0
 8010044:	80fb      	strh	r3, [r7, #6]
    eMBErrorCode    eStatus = MB_ENOERR;
 8010046:	2300      	movs	r3, #0
 8010048:	73fb      	strb	r3, [r7, #15]

    if( xMBTCPPortInit( ucTCPPort ) == FALSE )
 801004a:	88fb      	ldrh	r3, [r7, #6]
 801004c:	4618      	mov	r0, r3
 801004e:	f7ff fdaf 	bl	800fbb0 <xMBTCPPortInit>
 8010052:	4603      	mov	r3, r0
 8010054:	2b00      	cmp	r3, #0
 8010056:	d101      	bne.n	801005c <eMBTCPDoInit+0x20>
    {
        eStatus = MB_EPORTERR;
 8010058:	2303      	movs	r3, #3
 801005a:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 801005c:	7bfb      	ldrb	r3, [r7, #15]
}
 801005e:	4618      	mov	r0, r3
 8010060:	3710      	adds	r7, #16
 8010062:	46bd      	mov	sp, r7
 8010064:	bd80      	pop	{r7, pc}

08010066 <eMBTCPStart>:

void
eMBTCPStart( void )
{
 8010066:	b480      	push	{r7}
 8010068:	af00      	add	r7, sp, #0
}
 801006a:	bf00      	nop
 801006c:	46bd      	mov	sp, r7
 801006e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010072:	4770      	bx	lr

08010074 <eMBTCPStop>:

void
eMBTCPStop( void )
{
 8010074:	b580      	push	{r7, lr}
 8010076:	af00      	add	r7, sp, #0
    /* Make sure that no more clients are connected. */
    vMBTCPPortDisable( );
 8010078:	f7ff fdf8 	bl	800fc6c <vMBTCPPortDisable>
}
 801007c:	bf00      	nop
 801007e:	bd80      	pop	{r7, pc}

08010080 <eMBTCPReceive>:

eMBErrorCode
eMBTCPReceive( UCHAR * pucRcvAddress, UCHAR ** ppucFrame, USHORT * pusLength )
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b088      	sub	sp, #32
 8010084:	af00      	add	r7, sp, #0
 8010086:	60f8      	str	r0, [r7, #12]
 8010088:	60b9      	str	r1, [r7, #8]
 801008a:	607a      	str	r2, [r7, #4]
    eMBErrorCode    eStatus = MB_EIO;
 801008c:	2305      	movs	r3, #5
 801008e:	77fb      	strb	r3, [r7, #31]
    UCHAR          *pucMBTCPFrame;
    USHORT          usLength;
    USHORT          usPID;

    if( xMBTCPPortGetRequest( &pucMBTCPFrame, &usLength ) != FALSE )
 8010090:	f107 0216 	add.w	r2, r7, #22
 8010094:	f107 0318 	add.w	r3, r7, #24
 8010098:	4611      	mov	r1, r2
 801009a:	4618      	mov	r0, r3
 801009c:	f7ff fe20 	bl	800fce0 <xMBTCPPortGetRequest>
 80100a0:	4603      	mov	r3, r0
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d01d      	beq.n	80100e2 <eMBTCPReceive+0x62>
    {
        usPID = pucMBTCPFrame[MB_TCP_PID] << 8U;
 80100a6:	69bb      	ldr	r3, [r7, #24]
 80100a8:	3302      	adds	r3, #2
 80100aa:	781b      	ldrb	r3, [r3, #0]
 80100ac:	021b      	lsls	r3, r3, #8
 80100ae:	83bb      	strh	r3, [r7, #28]
        usPID |= pucMBTCPFrame[MB_TCP_PID + 1];
 80100b0:	69bb      	ldr	r3, [r7, #24]
 80100b2:	3303      	adds	r3, #3
 80100b4:	781b      	ldrb	r3, [r3, #0]
 80100b6:	461a      	mov	r2, r3
 80100b8:	8bbb      	ldrh	r3, [r7, #28]
 80100ba:	4313      	orrs	r3, r2
 80100bc:	83bb      	strh	r3, [r7, #28]

        if( usPID == MB_TCP_PROTOCOL_ID )
 80100be:	8bbb      	ldrh	r3, [r7, #28]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d110      	bne.n	80100e6 <eMBTCPReceive+0x66>
        {
            *ppucFrame = &pucMBTCPFrame[MB_TCP_FUNC];
 80100c4:	69bb      	ldr	r3, [r7, #24]
 80100c6:	1dda      	adds	r2, r3, #7
 80100c8:	68bb      	ldr	r3, [r7, #8]
 80100ca:	601a      	str	r2, [r3, #0]
            *pusLength = usLength - MB_TCP_FUNC;
 80100cc:	8afb      	ldrh	r3, [r7, #22]
 80100ce:	3b07      	subs	r3, #7
 80100d0:	b29a      	uxth	r2, r3
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	801a      	strh	r2, [r3, #0]
            eStatus = MB_ENOERR;
 80100d6:	2300      	movs	r3, #0
 80100d8:	77fb      	strb	r3, [r7, #31]

            /* Modbus TCP does not use any addresses. Fake the source address such
             * that the processing part deals with this frame.
             */
            *pucRcvAddress = MB_TCP_PSEUDO_ADDRESS;
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	22ff      	movs	r2, #255	@ 0xff
 80100de:	701a      	strb	r2, [r3, #0]
 80100e0:	e001      	b.n	80100e6 <eMBTCPReceive+0x66>
        }
    }
    else
    {
        eStatus = MB_EIO;
 80100e2:	2305      	movs	r3, #5
 80100e4:	77fb      	strb	r3, [r7, #31]
    }
    return eStatus;
 80100e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80100e8:	4618      	mov	r0, r3
 80100ea:	3720      	adds	r7, #32
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}

080100f0 <eMBTCPSend>:

eMBErrorCode
eMBTCPSend( UCHAR _unused, const UCHAR * pucFrame, USHORT usLength )
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b086      	sub	sp, #24
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	4603      	mov	r3, r0
 80100f8:	6039      	str	r1, [r7, #0]
 80100fa:	71fb      	strb	r3, [r7, #7]
 80100fc:	4613      	mov	r3, r2
 80100fe:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 8010100:	2300      	movs	r3, #0
 8010102:	75fb      	strb	r3, [r7, #23]
    UCHAR          *pucMBTCPFrame = ( UCHAR * ) pucFrame - MB_TCP_FUNC;
 8010104:	683b      	ldr	r3, [r7, #0]
 8010106:	3b07      	subs	r3, #7
 8010108:	613b      	str	r3, [r7, #16]
    USHORT          usTCPLength = usLength + MB_TCP_FUNC;
 801010a:	88bb      	ldrh	r3, [r7, #4]
 801010c:	3307      	adds	r3, #7
 801010e:	81fb      	strh	r3, [r7, #14]
     * function with the buffer returned by the previous call. Therefore we 
     * only have to update the length in the header. Note that the length 
     * header includes the size of the Modbus PDU and the UID Byte. Therefore 
     * the length is usLength plus one.
     */
    pucMBTCPFrame[MB_TCP_LEN] = ( usLength + 1 ) >> 8U;
 8010110:	88bb      	ldrh	r3, [r7, #4]
 8010112:	3301      	adds	r3, #1
 8010114:	121a      	asrs	r2, r3, #8
 8010116:	693b      	ldr	r3, [r7, #16]
 8010118:	3304      	adds	r3, #4
 801011a:	b2d2      	uxtb	r2, r2
 801011c:	701a      	strb	r2, [r3, #0]
    pucMBTCPFrame[MB_TCP_LEN + 1] = ( usLength + 1 ) & 0xFF;
 801011e:	88bb      	ldrh	r3, [r7, #4]
 8010120:	b2da      	uxtb	r2, r3
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	3305      	adds	r3, #5
 8010126:	3201      	adds	r2, #1
 8010128:	b2d2      	uxtb	r2, r2
 801012a:	701a      	strb	r2, [r3, #0]
    if( xMBTCPPortSendResponse( pucMBTCPFrame, usTCPLength ) == FALSE )
 801012c:	89fb      	ldrh	r3, [r7, #14]
 801012e:	4619      	mov	r1, r3
 8010130:	6938      	ldr	r0, [r7, #16]
 8010132:	f7ff fe23 	bl	800fd7c <xMBTCPPortSendResponse>
 8010136:	4603      	mov	r3, r0
 8010138:	2b00      	cmp	r3, #0
 801013a:	d101      	bne.n	8010140 <eMBTCPSend+0x50>
    {
        eStatus = MB_EIO;
 801013c:	2305      	movs	r3, #5
 801013e:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8010140:	7dfb      	ldrb	r3, [r7, #23]
}
 8010142:	4618      	mov	r0, r3
 8010144:	3718      	adds	r7, #24
 8010146:	46bd      	mov	sp, r7
 8010148:	bd80      	pop	{r7, pc}
	...

0801014c <__assert_func>:
 801014c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801014e:	4614      	mov	r4, r2
 8010150:	461a      	mov	r2, r3
 8010152:	4b09      	ldr	r3, [pc, #36]	@ (8010178 <__assert_func+0x2c>)
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	4605      	mov	r5, r0
 8010158:	68d8      	ldr	r0, [r3, #12]
 801015a:	b14c      	cbz	r4, 8010170 <__assert_func+0x24>
 801015c:	4b07      	ldr	r3, [pc, #28]	@ (801017c <__assert_func+0x30>)
 801015e:	9100      	str	r1, [sp, #0]
 8010160:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010164:	4906      	ldr	r1, [pc, #24]	@ (8010180 <__assert_func+0x34>)
 8010166:	462b      	mov	r3, r5
 8010168:	f000 f8f0 	bl	801034c <fiprintf>
 801016c:	f000 fa57 	bl	801061e <abort>
 8010170:	4b04      	ldr	r3, [pc, #16]	@ (8010184 <__assert_func+0x38>)
 8010172:	461c      	mov	r4, r3
 8010174:	e7f3      	b.n	801015e <__assert_func+0x12>
 8010176:	bf00      	nop
 8010178:	200000b8 	.word	0x200000b8
 801017c:	08014244 	.word	0x08014244
 8010180:	08014251 	.word	0x08014251
 8010184:	0801427f 	.word	0x0801427f

08010188 <rand>:
 8010188:	4b16      	ldr	r3, [pc, #88]	@ (80101e4 <rand+0x5c>)
 801018a:	b510      	push	{r4, lr}
 801018c:	681c      	ldr	r4, [r3, #0]
 801018e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010190:	b9b3      	cbnz	r3, 80101c0 <rand+0x38>
 8010192:	2018      	movs	r0, #24
 8010194:	f000 fa94 	bl	80106c0 <malloc>
 8010198:	4602      	mov	r2, r0
 801019a:	6320      	str	r0, [r4, #48]	@ 0x30
 801019c:	b920      	cbnz	r0, 80101a8 <rand+0x20>
 801019e:	4b12      	ldr	r3, [pc, #72]	@ (80101e8 <rand+0x60>)
 80101a0:	4812      	ldr	r0, [pc, #72]	@ (80101ec <rand+0x64>)
 80101a2:	2152      	movs	r1, #82	@ 0x52
 80101a4:	f7ff ffd2 	bl	801014c <__assert_func>
 80101a8:	4911      	ldr	r1, [pc, #68]	@ (80101f0 <rand+0x68>)
 80101aa:	4b12      	ldr	r3, [pc, #72]	@ (80101f4 <rand+0x6c>)
 80101ac:	e9c0 1300 	strd	r1, r3, [r0]
 80101b0:	4b11      	ldr	r3, [pc, #68]	@ (80101f8 <rand+0x70>)
 80101b2:	6083      	str	r3, [r0, #8]
 80101b4:	230b      	movs	r3, #11
 80101b6:	8183      	strh	r3, [r0, #12]
 80101b8:	2100      	movs	r1, #0
 80101ba:	2001      	movs	r0, #1
 80101bc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80101c0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80101c2:	480e      	ldr	r0, [pc, #56]	@ (80101fc <rand+0x74>)
 80101c4:	690b      	ldr	r3, [r1, #16]
 80101c6:	694c      	ldr	r4, [r1, #20]
 80101c8:	4a0d      	ldr	r2, [pc, #52]	@ (8010200 <rand+0x78>)
 80101ca:	4358      	muls	r0, r3
 80101cc:	fb02 0004 	mla	r0, r2, r4, r0
 80101d0:	fba3 3202 	umull	r3, r2, r3, r2
 80101d4:	3301      	adds	r3, #1
 80101d6:	eb40 0002 	adc.w	r0, r0, r2
 80101da:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80101de:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80101e2:	bd10      	pop	{r4, pc}
 80101e4:	200000b8 	.word	0x200000b8
 80101e8:	08014280 	.word	0x08014280
 80101ec:	08014297 	.word	0x08014297
 80101f0:	abcd330e 	.word	0xabcd330e
 80101f4:	e66d1234 	.word	0xe66d1234
 80101f8:	0005deec 	.word	0x0005deec
 80101fc:	5851f42d 	.word	0x5851f42d
 8010200:	4c957f2d 	.word	0x4c957f2d

08010204 <std>:
 8010204:	2300      	movs	r3, #0
 8010206:	b510      	push	{r4, lr}
 8010208:	4604      	mov	r4, r0
 801020a:	e9c0 3300 	strd	r3, r3, [r0]
 801020e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010212:	6083      	str	r3, [r0, #8]
 8010214:	8181      	strh	r1, [r0, #12]
 8010216:	6643      	str	r3, [r0, #100]	@ 0x64
 8010218:	81c2      	strh	r2, [r0, #14]
 801021a:	6183      	str	r3, [r0, #24]
 801021c:	4619      	mov	r1, r3
 801021e:	2208      	movs	r2, #8
 8010220:	305c      	adds	r0, #92	@ 0x5c
 8010222:	f000 f978 	bl	8010516 <memset>
 8010226:	4b0d      	ldr	r3, [pc, #52]	@ (801025c <std+0x58>)
 8010228:	6263      	str	r3, [r4, #36]	@ 0x24
 801022a:	4b0d      	ldr	r3, [pc, #52]	@ (8010260 <std+0x5c>)
 801022c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801022e:	4b0d      	ldr	r3, [pc, #52]	@ (8010264 <std+0x60>)
 8010230:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010232:	4b0d      	ldr	r3, [pc, #52]	@ (8010268 <std+0x64>)
 8010234:	6323      	str	r3, [r4, #48]	@ 0x30
 8010236:	4b0d      	ldr	r3, [pc, #52]	@ (801026c <std+0x68>)
 8010238:	6224      	str	r4, [r4, #32]
 801023a:	429c      	cmp	r4, r3
 801023c:	d006      	beq.n	801024c <std+0x48>
 801023e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010242:	4294      	cmp	r4, r2
 8010244:	d002      	beq.n	801024c <std+0x48>
 8010246:	33d0      	adds	r3, #208	@ 0xd0
 8010248:	429c      	cmp	r4, r3
 801024a:	d105      	bne.n	8010258 <std+0x54>
 801024c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010254:	f000 b9d2 	b.w	80105fc <__retarget_lock_init_recursive>
 8010258:	bd10      	pop	{r4, pc}
 801025a:	bf00      	nop
 801025c:	0801043d 	.word	0x0801043d
 8010260:	0801045f 	.word	0x0801045f
 8010264:	08010497 	.word	0x08010497
 8010268:	080104bb 	.word	0x080104bb
 801026c:	20008508 	.word	0x20008508

08010270 <stdio_exit_handler>:
 8010270:	4a02      	ldr	r2, [pc, #8]	@ (801027c <stdio_exit_handler+0xc>)
 8010272:	4903      	ldr	r1, [pc, #12]	@ (8010280 <stdio_exit_handler+0x10>)
 8010274:	4803      	ldr	r0, [pc, #12]	@ (8010284 <stdio_exit_handler+0x14>)
 8010276:	f000 b87b 	b.w	8010370 <_fwalk_sglue>
 801027a:	bf00      	nop
 801027c:	200000ac 	.word	0x200000ac
 8010280:	08011181 	.word	0x08011181
 8010284:	200000bc 	.word	0x200000bc

08010288 <cleanup_stdio>:
 8010288:	6841      	ldr	r1, [r0, #4]
 801028a:	4b0c      	ldr	r3, [pc, #48]	@ (80102bc <cleanup_stdio+0x34>)
 801028c:	4299      	cmp	r1, r3
 801028e:	b510      	push	{r4, lr}
 8010290:	4604      	mov	r4, r0
 8010292:	d001      	beq.n	8010298 <cleanup_stdio+0x10>
 8010294:	f000 ff74 	bl	8011180 <_fflush_r>
 8010298:	68a1      	ldr	r1, [r4, #8]
 801029a:	4b09      	ldr	r3, [pc, #36]	@ (80102c0 <cleanup_stdio+0x38>)
 801029c:	4299      	cmp	r1, r3
 801029e:	d002      	beq.n	80102a6 <cleanup_stdio+0x1e>
 80102a0:	4620      	mov	r0, r4
 80102a2:	f000 ff6d 	bl	8011180 <_fflush_r>
 80102a6:	68e1      	ldr	r1, [r4, #12]
 80102a8:	4b06      	ldr	r3, [pc, #24]	@ (80102c4 <cleanup_stdio+0x3c>)
 80102aa:	4299      	cmp	r1, r3
 80102ac:	d004      	beq.n	80102b8 <cleanup_stdio+0x30>
 80102ae:	4620      	mov	r0, r4
 80102b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102b4:	f000 bf64 	b.w	8011180 <_fflush_r>
 80102b8:	bd10      	pop	{r4, pc}
 80102ba:	bf00      	nop
 80102bc:	20008508 	.word	0x20008508
 80102c0:	20008570 	.word	0x20008570
 80102c4:	200085d8 	.word	0x200085d8

080102c8 <global_stdio_init.part.0>:
 80102c8:	b510      	push	{r4, lr}
 80102ca:	4b0b      	ldr	r3, [pc, #44]	@ (80102f8 <global_stdio_init.part.0+0x30>)
 80102cc:	4c0b      	ldr	r4, [pc, #44]	@ (80102fc <global_stdio_init.part.0+0x34>)
 80102ce:	4a0c      	ldr	r2, [pc, #48]	@ (8010300 <global_stdio_init.part.0+0x38>)
 80102d0:	601a      	str	r2, [r3, #0]
 80102d2:	4620      	mov	r0, r4
 80102d4:	2200      	movs	r2, #0
 80102d6:	2104      	movs	r1, #4
 80102d8:	f7ff ff94 	bl	8010204 <std>
 80102dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80102e0:	2201      	movs	r2, #1
 80102e2:	2109      	movs	r1, #9
 80102e4:	f7ff ff8e 	bl	8010204 <std>
 80102e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80102ec:	2202      	movs	r2, #2
 80102ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102f2:	2112      	movs	r1, #18
 80102f4:	f7ff bf86 	b.w	8010204 <std>
 80102f8:	20008640 	.word	0x20008640
 80102fc:	20008508 	.word	0x20008508
 8010300:	08010271 	.word	0x08010271

08010304 <__sfp_lock_acquire>:
 8010304:	4801      	ldr	r0, [pc, #4]	@ (801030c <__sfp_lock_acquire+0x8>)
 8010306:	f000 b97a 	b.w	80105fe <__retarget_lock_acquire_recursive>
 801030a:	bf00      	nop
 801030c:	20008649 	.word	0x20008649

08010310 <__sfp_lock_release>:
 8010310:	4801      	ldr	r0, [pc, #4]	@ (8010318 <__sfp_lock_release+0x8>)
 8010312:	f000 b975 	b.w	8010600 <__retarget_lock_release_recursive>
 8010316:	bf00      	nop
 8010318:	20008649 	.word	0x20008649

0801031c <__sinit>:
 801031c:	b510      	push	{r4, lr}
 801031e:	4604      	mov	r4, r0
 8010320:	f7ff fff0 	bl	8010304 <__sfp_lock_acquire>
 8010324:	6a23      	ldr	r3, [r4, #32]
 8010326:	b11b      	cbz	r3, 8010330 <__sinit+0x14>
 8010328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801032c:	f7ff bff0 	b.w	8010310 <__sfp_lock_release>
 8010330:	4b04      	ldr	r3, [pc, #16]	@ (8010344 <__sinit+0x28>)
 8010332:	6223      	str	r3, [r4, #32]
 8010334:	4b04      	ldr	r3, [pc, #16]	@ (8010348 <__sinit+0x2c>)
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d1f5      	bne.n	8010328 <__sinit+0xc>
 801033c:	f7ff ffc4 	bl	80102c8 <global_stdio_init.part.0>
 8010340:	e7f2      	b.n	8010328 <__sinit+0xc>
 8010342:	bf00      	nop
 8010344:	08010289 	.word	0x08010289
 8010348:	20008640 	.word	0x20008640

0801034c <fiprintf>:
 801034c:	b40e      	push	{r1, r2, r3}
 801034e:	b503      	push	{r0, r1, lr}
 8010350:	4601      	mov	r1, r0
 8010352:	ab03      	add	r3, sp, #12
 8010354:	4805      	ldr	r0, [pc, #20]	@ (801036c <fiprintf+0x20>)
 8010356:	f853 2b04 	ldr.w	r2, [r3], #4
 801035a:	6800      	ldr	r0, [r0, #0]
 801035c:	9301      	str	r3, [sp, #4]
 801035e:	f000 fbe7 	bl	8010b30 <_vfiprintf_r>
 8010362:	b002      	add	sp, #8
 8010364:	f85d eb04 	ldr.w	lr, [sp], #4
 8010368:	b003      	add	sp, #12
 801036a:	4770      	bx	lr
 801036c:	200000b8 	.word	0x200000b8

08010370 <_fwalk_sglue>:
 8010370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010374:	4607      	mov	r7, r0
 8010376:	4688      	mov	r8, r1
 8010378:	4614      	mov	r4, r2
 801037a:	2600      	movs	r6, #0
 801037c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010380:	f1b9 0901 	subs.w	r9, r9, #1
 8010384:	d505      	bpl.n	8010392 <_fwalk_sglue+0x22>
 8010386:	6824      	ldr	r4, [r4, #0]
 8010388:	2c00      	cmp	r4, #0
 801038a:	d1f7      	bne.n	801037c <_fwalk_sglue+0xc>
 801038c:	4630      	mov	r0, r6
 801038e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010392:	89ab      	ldrh	r3, [r5, #12]
 8010394:	2b01      	cmp	r3, #1
 8010396:	d907      	bls.n	80103a8 <_fwalk_sglue+0x38>
 8010398:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801039c:	3301      	adds	r3, #1
 801039e:	d003      	beq.n	80103a8 <_fwalk_sglue+0x38>
 80103a0:	4629      	mov	r1, r5
 80103a2:	4638      	mov	r0, r7
 80103a4:	47c0      	blx	r8
 80103a6:	4306      	orrs	r6, r0
 80103a8:	3568      	adds	r5, #104	@ 0x68
 80103aa:	e7e9      	b.n	8010380 <_fwalk_sglue+0x10>

080103ac <iprintf>:
 80103ac:	b40f      	push	{r0, r1, r2, r3}
 80103ae:	b507      	push	{r0, r1, r2, lr}
 80103b0:	4906      	ldr	r1, [pc, #24]	@ (80103cc <iprintf+0x20>)
 80103b2:	ab04      	add	r3, sp, #16
 80103b4:	6808      	ldr	r0, [r1, #0]
 80103b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80103ba:	6881      	ldr	r1, [r0, #8]
 80103bc:	9301      	str	r3, [sp, #4]
 80103be:	f000 fbb7 	bl	8010b30 <_vfiprintf_r>
 80103c2:	b003      	add	sp, #12
 80103c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80103c8:	b004      	add	sp, #16
 80103ca:	4770      	bx	lr
 80103cc:	200000b8 	.word	0x200000b8

080103d0 <sniprintf>:
 80103d0:	b40c      	push	{r2, r3}
 80103d2:	b530      	push	{r4, r5, lr}
 80103d4:	4b18      	ldr	r3, [pc, #96]	@ (8010438 <sniprintf+0x68>)
 80103d6:	1e0c      	subs	r4, r1, #0
 80103d8:	681d      	ldr	r5, [r3, #0]
 80103da:	b09d      	sub	sp, #116	@ 0x74
 80103dc:	da08      	bge.n	80103f0 <sniprintf+0x20>
 80103de:	238b      	movs	r3, #139	@ 0x8b
 80103e0:	602b      	str	r3, [r5, #0]
 80103e2:	f04f 30ff 	mov.w	r0, #4294967295
 80103e6:	b01d      	add	sp, #116	@ 0x74
 80103e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80103ec:	b002      	add	sp, #8
 80103ee:	4770      	bx	lr
 80103f0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80103f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80103f8:	f04f 0300 	mov.w	r3, #0
 80103fc:	931b      	str	r3, [sp, #108]	@ 0x6c
 80103fe:	bf14      	ite	ne
 8010400:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010404:	4623      	moveq	r3, r4
 8010406:	9304      	str	r3, [sp, #16]
 8010408:	9307      	str	r3, [sp, #28]
 801040a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801040e:	9002      	str	r0, [sp, #8]
 8010410:	9006      	str	r0, [sp, #24]
 8010412:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010416:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010418:	ab21      	add	r3, sp, #132	@ 0x84
 801041a:	a902      	add	r1, sp, #8
 801041c:	4628      	mov	r0, r5
 801041e:	9301      	str	r3, [sp, #4]
 8010420:	f000 fa60 	bl	80108e4 <_svfiprintf_r>
 8010424:	1c43      	adds	r3, r0, #1
 8010426:	bfbc      	itt	lt
 8010428:	238b      	movlt	r3, #139	@ 0x8b
 801042a:	602b      	strlt	r3, [r5, #0]
 801042c:	2c00      	cmp	r4, #0
 801042e:	d0da      	beq.n	80103e6 <sniprintf+0x16>
 8010430:	9b02      	ldr	r3, [sp, #8]
 8010432:	2200      	movs	r2, #0
 8010434:	701a      	strb	r2, [r3, #0]
 8010436:	e7d6      	b.n	80103e6 <sniprintf+0x16>
 8010438:	200000b8 	.word	0x200000b8

0801043c <__sread>:
 801043c:	b510      	push	{r4, lr}
 801043e:	460c      	mov	r4, r1
 8010440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010444:	f000 f892 	bl	801056c <_read_r>
 8010448:	2800      	cmp	r0, #0
 801044a:	bfab      	itete	ge
 801044c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801044e:	89a3      	ldrhlt	r3, [r4, #12]
 8010450:	181b      	addge	r3, r3, r0
 8010452:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010456:	bfac      	ite	ge
 8010458:	6563      	strge	r3, [r4, #84]	@ 0x54
 801045a:	81a3      	strhlt	r3, [r4, #12]
 801045c:	bd10      	pop	{r4, pc}

0801045e <__swrite>:
 801045e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010462:	461f      	mov	r7, r3
 8010464:	898b      	ldrh	r3, [r1, #12]
 8010466:	05db      	lsls	r3, r3, #23
 8010468:	4605      	mov	r5, r0
 801046a:	460c      	mov	r4, r1
 801046c:	4616      	mov	r6, r2
 801046e:	d505      	bpl.n	801047c <__swrite+0x1e>
 8010470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010474:	2302      	movs	r3, #2
 8010476:	2200      	movs	r2, #0
 8010478:	f000 f866 	bl	8010548 <_lseek_r>
 801047c:	89a3      	ldrh	r3, [r4, #12]
 801047e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010482:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010486:	81a3      	strh	r3, [r4, #12]
 8010488:	4632      	mov	r2, r6
 801048a:	463b      	mov	r3, r7
 801048c:	4628      	mov	r0, r5
 801048e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010492:	f000 b87d 	b.w	8010590 <_write_r>

08010496 <__sseek>:
 8010496:	b510      	push	{r4, lr}
 8010498:	460c      	mov	r4, r1
 801049a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801049e:	f000 f853 	bl	8010548 <_lseek_r>
 80104a2:	1c43      	adds	r3, r0, #1
 80104a4:	89a3      	ldrh	r3, [r4, #12]
 80104a6:	bf15      	itete	ne
 80104a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80104aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80104ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80104b2:	81a3      	strheq	r3, [r4, #12]
 80104b4:	bf18      	it	ne
 80104b6:	81a3      	strhne	r3, [r4, #12]
 80104b8:	bd10      	pop	{r4, pc}

080104ba <__sclose>:
 80104ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104be:	f000 b833 	b.w	8010528 <_close_r>

080104c2 <memcmp>:
 80104c2:	b510      	push	{r4, lr}
 80104c4:	3901      	subs	r1, #1
 80104c6:	4402      	add	r2, r0
 80104c8:	4290      	cmp	r0, r2
 80104ca:	d101      	bne.n	80104d0 <memcmp+0xe>
 80104cc:	2000      	movs	r0, #0
 80104ce:	e005      	b.n	80104dc <memcmp+0x1a>
 80104d0:	7803      	ldrb	r3, [r0, #0]
 80104d2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80104d6:	42a3      	cmp	r3, r4
 80104d8:	d001      	beq.n	80104de <memcmp+0x1c>
 80104da:	1b18      	subs	r0, r3, r4
 80104dc:	bd10      	pop	{r4, pc}
 80104de:	3001      	adds	r0, #1
 80104e0:	e7f2      	b.n	80104c8 <memcmp+0x6>

080104e2 <memmove>:
 80104e2:	4288      	cmp	r0, r1
 80104e4:	b510      	push	{r4, lr}
 80104e6:	eb01 0402 	add.w	r4, r1, r2
 80104ea:	d902      	bls.n	80104f2 <memmove+0x10>
 80104ec:	4284      	cmp	r4, r0
 80104ee:	4623      	mov	r3, r4
 80104f0:	d807      	bhi.n	8010502 <memmove+0x20>
 80104f2:	1e43      	subs	r3, r0, #1
 80104f4:	42a1      	cmp	r1, r4
 80104f6:	d008      	beq.n	801050a <memmove+0x28>
 80104f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80104fc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010500:	e7f8      	b.n	80104f4 <memmove+0x12>
 8010502:	4402      	add	r2, r0
 8010504:	4601      	mov	r1, r0
 8010506:	428a      	cmp	r2, r1
 8010508:	d100      	bne.n	801050c <memmove+0x2a>
 801050a:	bd10      	pop	{r4, pc}
 801050c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010510:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010514:	e7f7      	b.n	8010506 <memmove+0x24>

08010516 <memset>:
 8010516:	4402      	add	r2, r0
 8010518:	4603      	mov	r3, r0
 801051a:	4293      	cmp	r3, r2
 801051c:	d100      	bne.n	8010520 <memset+0xa>
 801051e:	4770      	bx	lr
 8010520:	f803 1b01 	strb.w	r1, [r3], #1
 8010524:	e7f9      	b.n	801051a <memset+0x4>
	...

08010528 <_close_r>:
 8010528:	b538      	push	{r3, r4, r5, lr}
 801052a:	4d06      	ldr	r5, [pc, #24]	@ (8010544 <_close_r+0x1c>)
 801052c:	2300      	movs	r3, #0
 801052e:	4604      	mov	r4, r0
 8010530:	4608      	mov	r0, r1
 8010532:	602b      	str	r3, [r5, #0]
 8010534:	f7f0 fb06 	bl	8000b44 <_close>
 8010538:	1c43      	adds	r3, r0, #1
 801053a:	d102      	bne.n	8010542 <_close_r+0x1a>
 801053c:	682b      	ldr	r3, [r5, #0]
 801053e:	b103      	cbz	r3, 8010542 <_close_r+0x1a>
 8010540:	6023      	str	r3, [r4, #0]
 8010542:	bd38      	pop	{r3, r4, r5, pc}
 8010544:	20008644 	.word	0x20008644

08010548 <_lseek_r>:
 8010548:	b538      	push	{r3, r4, r5, lr}
 801054a:	4d07      	ldr	r5, [pc, #28]	@ (8010568 <_lseek_r+0x20>)
 801054c:	4604      	mov	r4, r0
 801054e:	4608      	mov	r0, r1
 8010550:	4611      	mov	r1, r2
 8010552:	2200      	movs	r2, #0
 8010554:	602a      	str	r2, [r5, #0]
 8010556:	461a      	mov	r2, r3
 8010558:	f7f0 fb1b 	bl	8000b92 <_lseek>
 801055c:	1c43      	adds	r3, r0, #1
 801055e:	d102      	bne.n	8010566 <_lseek_r+0x1e>
 8010560:	682b      	ldr	r3, [r5, #0]
 8010562:	b103      	cbz	r3, 8010566 <_lseek_r+0x1e>
 8010564:	6023      	str	r3, [r4, #0]
 8010566:	bd38      	pop	{r3, r4, r5, pc}
 8010568:	20008644 	.word	0x20008644

0801056c <_read_r>:
 801056c:	b538      	push	{r3, r4, r5, lr}
 801056e:	4d07      	ldr	r5, [pc, #28]	@ (801058c <_read_r+0x20>)
 8010570:	4604      	mov	r4, r0
 8010572:	4608      	mov	r0, r1
 8010574:	4611      	mov	r1, r2
 8010576:	2200      	movs	r2, #0
 8010578:	602a      	str	r2, [r5, #0]
 801057a:	461a      	mov	r2, r3
 801057c:	f7f0 faa9 	bl	8000ad2 <_read>
 8010580:	1c43      	adds	r3, r0, #1
 8010582:	d102      	bne.n	801058a <_read_r+0x1e>
 8010584:	682b      	ldr	r3, [r5, #0]
 8010586:	b103      	cbz	r3, 801058a <_read_r+0x1e>
 8010588:	6023      	str	r3, [r4, #0]
 801058a:	bd38      	pop	{r3, r4, r5, pc}
 801058c:	20008644 	.word	0x20008644

08010590 <_write_r>:
 8010590:	b538      	push	{r3, r4, r5, lr}
 8010592:	4d07      	ldr	r5, [pc, #28]	@ (80105b0 <_write_r+0x20>)
 8010594:	4604      	mov	r4, r0
 8010596:	4608      	mov	r0, r1
 8010598:	4611      	mov	r1, r2
 801059a:	2200      	movs	r2, #0
 801059c:	602a      	str	r2, [r5, #0]
 801059e:	461a      	mov	r2, r3
 80105a0:	f7f0 fab4 	bl	8000b0c <_write>
 80105a4:	1c43      	adds	r3, r0, #1
 80105a6:	d102      	bne.n	80105ae <_write_r+0x1e>
 80105a8:	682b      	ldr	r3, [r5, #0]
 80105aa:	b103      	cbz	r3, 80105ae <_write_r+0x1e>
 80105ac:	6023      	str	r3, [r4, #0]
 80105ae:	bd38      	pop	{r3, r4, r5, pc}
 80105b0:	20008644 	.word	0x20008644

080105b4 <__libc_init_array>:
 80105b4:	b570      	push	{r4, r5, r6, lr}
 80105b6:	4d0d      	ldr	r5, [pc, #52]	@ (80105ec <__libc_init_array+0x38>)
 80105b8:	4c0d      	ldr	r4, [pc, #52]	@ (80105f0 <__libc_init_array+0x3c>)
 80105ba:	1b64      	subs	r4, r4, r5
 80105bc:	10a4      	asrs	r4, r4, #2
 80105be:	2600      	movs	r6, #0
 80105c0:	42a6      	cmp	r6, r4
 80105c2:	d109      	bne.n	80105d8 <__libc_init_array+0x24>
 80105c4:	4d0b      	ldr	r5, [pc, #44]	@ (80105f4 <__libc_init_array+0x40>)
 80105c6:	4c0c      	ldr	r4, [pc, #48]	@ (80105f8 <__libc_init_array+0x44>)
 80105c8:	f000 ffa4 	bl	8011514 <_init>
 80105cc:	1b64      	subs	r4, r4, r5
 80105ce:	10a4      	asrs	r4, r4, #2
 80105d0:	2600      	movs	r6, #0
 80105d2:	42a6      	cmp	r6, r4
 80105d4:	d105      	bne.n	80105e2 <__libc_init_array+0x2e>
 80105d6:	bd70      	pop	{r4, r5, r6, pc}
 80105d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80105dc:	4798      	blx	r3
 80105de:	3601      	adds	r6, #1
 80105e0:	e7ee      	b.n	80105c0 <__libc_init_array+0xc>
 80105e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80105e6:	4798      	blx	r3
 80105e8:	3601      	adds	r6, #1
 80105ea:	e7f2      	b.n	80105d2 <__libc_init_array+0x1e>
 80105ec:	0801432c 	.word	0x0801432c
 80105f0:	0801432c 	.word	0x0801432c
 80105f4:	0801432c 	.word	0x0801432c
 80105f8:	08014330 	.word	0x08014330

080105fc <__retarget_lock_init_recursive>:
 80105fc:	4770      	bx	lr

080105fe <__retarget_lock_acquire_recursive>:
 80105fe:	4770      	bx	lr

08010600 <__retarget_lock_release_recursive>:
 8010600:	4770      	bx	lr

08010602 <memcpy>:
 8010602:	440a      	add	r2, r1
 8010604:	4291      	cmp	r1, r2
 8010606:	f100 33ff 	add.w	r3, r0, #4294967295
 801060a:	d100      	bne.n	801060e <memcpy+0xc>
 801060c:	4770      	bx	lr
 801060e:	b510      	push	{r4, lr}
 8010610:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010614:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010618:	4291      	cmp	r1, r2
 801061a:	d1f9      	bne.n	8010610 <memcpy+0xe>
 801061c:	bd10      	pop	{r4, pc}

0801061e <abort>:
 801061e:	b508      	push	{r3, lr}
 8010620:	2006      	movs	r0, #6
 8010622:	f000 fe91 	bl	8011348 <raise>
 8010626:	2001      	movs	r0, #1
 8010628:	f7f0 fa48 	bl	8000abc <_exit>

0801062c <_free_r>:
 801062c:	b538      	push	{r3, r4, r5, lr}
 801062e:	4605      	mov	r5, r0
 8010630:	2900      	cmp	r1, #0
 8010632:	d041      	beq.n	80106b8 <_free_r+0x8c>
 8010634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010638:	1f0c      	subs	r4, r1, #4
 801063a:	2b00      	cmp	r3, #0
 801063c:	bfb8      	it	lt
 801063e:	18e4      	addlt	r4, r4, r3
 8010640:	f000 f8e8 	bl	8010814 <__malloc_lock>
 8010644:	4a1d      	ldr	r2, [pc, #116]	@ (80106bc <_free_r+0x90>)
 8010646:	6813      	ldr	r3, [r2, #0]
 8010648:	b933      	cbnz	r3, 8010658 <_free_r+0x2c>
 801064a:	6063      	str	r3, [r4, #4]
 801064c:	6014      	str	r4, [r2, #0]
 801064e:	4628      	mov	r0, r5
 8010650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010654:	f000 b8e4 	b.w	8010820 <__malloc_unlock>
 8010658:	42a3      	cmp	r3, r4
 801065a:	d908      	bls.n	801066e <_free_r+0x42>
 801065c:	6820      	ldr	r0, [r4, #0]
 801065e:	1821      	adds	r1, r4, r0
 8010660:	428b      	cmp	r3, r1
 8010662:	bf01      	itttt	eq
 8010664:	6819      	ldreq	r1, [r3, #0]
 8010666:	685b      	ldreq	r3, [r3, #4]
 8010668:	1809      	addeq	r1, r1, r0
 801066a:	6021      	streq	r1, [r4, #0]
 801066c:	e7ed      	b.n	801064a <_free_r+0x1e>
 801066e:	461a      	mov	r2, r3
 8010670:	685b      	ldr	r3, [r3, #4]
 8010672:	b10b      	cbz	r3, 8010678 <_free_r+0x4c>
 8010674:	42a3      	cmp	r3, r4
 8010676:	d9fa      	bls.n	801066e <_free_r+0x42>
 8010678:	6811      	ldr	r1, [r2, #0]
 801067a:	1850      	adds	r0, r2, r1
 801067c:	42a0      	cmp	r0, r4
 801067e:	d10b      	bne.n	8010698 <_free_r+0x6c>
 8010680:	6820      	ldr	r0, [r4, #0]
 8010682:	4401      	add	r1, r0
 8010684:	1850      	adds	r0, r2, r1
 8010686:	4283      	cmp	r3, r0
 8010688:	6011      	str	r1, [r2, #0]
 801068a:	d1e0      	bne.n	801064e <_free_r+0x22>
 801068c:	6818      	ldr	r0, [r3, #0]
 801068e:	685b      	ldr	r3, [r3, #4]
 8010690:	6053      	str	r3, [r2, #4]
 8010692:	4408      	add	r0, r1
 8010694:	6010      	str	r0, [r2, #0]
 8010696:	e7da      	b.n	801064e <_free_r+0x22>
 8010698:	d902      	bls.n	80106a0 <_free_r+0x74>
 801069a:	230c      	movs	r3, #12
 801069c:	602b      	str	r3, [r5, #0]
 801069e:	e7d6      	b.n	801064e <_free_r+0x22>
 80106a0:	6820      	ldr	r0, [r4, #0]
 80106a2:	1821      	adds	r1, r4, r0
 80106a4:	428b      	cmp	r3, r1
 80106a6:	bf04      	itt	eq
 80106a8:	6819      	ldreq	r1, [r3, #0]
 80106aa:	685b      	ldreq	r3, [r3, #4]
 80106ac:	6063      	str	r3, [r4, #4]
 80106ae:	bf04      	itt	eq
 80106b0:	1809      	addeq	r1, r1, r0
 80106b2:	6021      	streq	r1, [r4, #0]
 80106b4:	6054      	str	r4, [r2, #4]
 80106b6:	e7ca      	b.n	801064e <_free_r+0x22>
 80106b8:	bd38      	pop	{r3, r4, r5, pc}
 80106ba:	bf00      	nop
 80106bc:	20008650 	.word	0x20008650

080106c0 <malloc>:
 80106c0:	4b02      	ldr	r3, [pc, #8]	@ (80106cc <malloc+0xc>)
 80106c2:	4601      	mov	r1, r0
 80106c4:	6818      	ldr	r0, [r3, #0]
 80106c6:	f000 b825 	b.w	8010714 <_malloc_r>
 80106ca:	bf00      	nop
 80106cc:	200000b8 	.word	0x200000b8

080106d0 <sbrk_aligned>:
 80106d0:	b570      	push	{r4, r5, r6, lr}
 80106d2:	4e0f      	ldr	r6, [pc, #60]	@ (8010710 <sbrk_aligned+0x40>)
 80106d4:	460c      	mov	r4, r1
 80106d6:	6831      	ldr	r1, [r6, #0]
 80106d8:	4605      	mov	r5, r0
 80106da:	b911      	cbnz	r1, 80106e2 <sbrk_aligned+0x12>
 80106dc:	f000 fe50 	bl	8011380 <_sbrk_r>
 80106e0:	6030      	str	r0, [r6, #0]
 80106e2:	4621      	mov	r1, r4
 80106e4:	4628      	mov	r0, r5
 80106e6:	f000 fe4b 	bl	8011380 <_sbrk_r>
 80106ea:	1c43      	adds	r3, r0, #1
 80106ec:	d103      	bne.n	80106f6 <sbrk_aligned+0x26>
 80106ee:	f04f 34ff 	mov.w	r4, #4294967295
 80106f2:	4620      	mov	r0, r4
 80106f4:	bd70      	pop	{r4, r5, r6, pc}
 80106f6:	1cc4      	adds	r4, r0, #3
 80106f8:	f024 0403 	bic.w	r4, r4, #3
 80106fc:	42a0      	cmp	r0, r4
 80106fe:	d0f8      	beq.n	80106f2 <sbrk_aligned+0x22>
 8010700:	1a21      	subs	r1, r4, r0
 8010702:	4628      	mov	r0, r5
 8010704:	f000 fe3c 	bl	8011380 <_sbrk_r>
 8010708:	3001      	adds	r0, #1
 801070a:	d1f2      	bne.n	80106f2 <sbrk_aligned+0x22>
 801070c:	e7ef      	b.n	80106ee <sbrk_aligned+0x1e>
 801070e:	bf00      	nop
 8010710:	2000864c 	.word	0x2000864c

08010714 <_malloc_r>:
 8010714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010718:	1ccd      	adds	r5, r1, #3
 801071a:	f025 0503 	bic.w	r5, r5, #3
 801071e:	3508      	adds	r5, #8
 8010720:	2d0c      	cmp	r5, #12
 8010722:	bf38      	it	cc
 8010724:	250c      	movcc	r5, #12
 8010726:	2d00      	cmp	r5, #0
 8010728:	4606      	mov	r6, r0
 801072a:	db01      	blt.n	8010730 <_malloc_r+0x1c>
 801072c:	42a9      	cmp	r1, r5
 801072e:	d904      	bls.n	801073a <_malloc_r+0x26>
 8010730:	230c      	movs	r3, #12
 8010732:	6033      	str	r3, [r6, #0]
 8010734:	2000      	movs	r0, #0
 8010736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801073a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010810 <_malloc_r+0xfc>
 801073e:	f000 f869 	bl	8010814 <__malloc_lock>
 8010742:	f8d8 3000 	ldr.w	r3, [r8]
 8010746:	461c      	mov	r4, r3
 8010748:	bb44      	cbnz	r4, 801079c <_malloc_r+0x88>
 801074a:	4629      	mov	r1, r5
 801074c:	4630      	mov	r0, r6
 801074e:	f7ff ffbf 	bl	80106d0 <sbrk_aligned>
 8010752:	1c43      	adds	r3, r0, #1
 8010754:	4604      	mov	r4, r0
 8010756:	d158      	bne.n	801080a <_malloc_r+0xf6>
 8010758:	f8d8 4000 	ldr.w	r4, [r8]
 801075c:	4627      	mov	r7, r4
 801075e:	2f00      	cmp	r7, #0
 8010760:	d143      	bne.n	80107ea <_malloc_r+0xd6>
 8010762:	2c00      	cmp	r4, #0
 8010764:	d04b      	beq.n	80107fe <_malloc_r+0xea>
 8010766:	6823      	ldr	r3, [r4, #0]
 8010768:	4639      	mov	r1, r7
 801076a:	4630      	mov	r0, r6
 801076c:	eb04 0903 	add.w	r9, r4, r3
 8010770:	f000 fe06 	bl	8011380 <_sbrk_r>
 8010774:	4581      	cmp	r9, r0
 8010776:	d142      	bne.n	80107fe <_malloc_r+0xea>
 8010778:	6821      	ldr	r1, [r4, #0]
 801077a:	1a6d      	subs	r5, r5, r1
 801077c:	4629      	mov	r1, r5
 801077e:	4630      	mov	r0, r6
 8010780:	f7ff ffa6 	bl	80106d0 <sbrk_aligned>
 8010784:	3001      	adds	r0, #1
 8010786:	d03a      	beq.n	80107fe <_malloc_r+0xea>
 8010788:	6823      	ldr	r3, [r4, #0]
 801078a:	442b      	add	r3, r5
 801078c:	6023      	str	r3, [r4, #0]
 801078e:	f8d8 3000 	ldr.w	r3, [r8]
 8010792:	685a      	ldr	r2, [r3, #4]
 8010794:	bb62      	cbnz	r2, 80107f0 <_malloc_r+0xdc>
 8010796:	f8c8 7000 	str.w	r7, [r8]
 801079a:	e00f      	b.n	80107bc <_malloc_r+0xa8>
 801079c:	6822      	ldr	r2, [r4, #0]
 801079e:	1b52      	subs	r2, r2, r5
 80107a0:	d420      	bmi.n	80107e4 <_malloc_r+0xd0>
 80107a2:	2a0b      	cmp	r2, #11
 80107a4:	d917      	bls.n	80107d6 <_malloc_r+0xc2>
 80107a6:	1961      	adds	r1, r4, r5
 80107a8:	42a3      	cmp	r3, r4
 80107aa:	6025      	str	r5, [r4, #0]
 80107ac:	bf18      	it	ne
 80107ae:	6059      	strne	r1, [r3, #4]
 80107b0:	6863      	ldr	r3, [r4, #4]
 80107b2:	bf08      	it	eq
 80107b4:	f8c8 1000 	streq.w	r1, [r8]
 80107b8:	5162      	str	r2, [r4, r5]
 80107ba:	604b      	str	r3, [r1, #4]
 80107bc:	4630      	mov	r0, r6
 80107be:	f000 f82f 	bl	8010820 <__malloc_unlock>
 80107c2:	f104 000b 	add.w	r0, r4, #11
 80107c6:	1d23      	adds	r3, r4, #4
 80107c8:	f020 0007 	bic.w	r0, r0, #7
 80107cc:	1ac2      	subs	r2, r0, r3
 80107ce:	bf1c      	itt	ne
 80107d0:	1a1b      	subne	r3, r3, r0
 80107d2:	50a3      	strne	r3, [r4, r2]
 80107d4:	e7af      	b.n	8010736 <_malloc_r+0x22>
 80107d6:	6862      	ldr	r2, [r4, #4]
 80107d8:	42a3      	cmp	r3, r4
 80107da:	bf0c      	ite	eq
 80107dc:	f8c8 2000 	streq.w	r2, [r8]
 80107e0:	605a      	strne	r2, [r3, #4]
 80107e2:	e7eb      	b.n	80107bc <_malloc_r+0xa8>
 80107e4:	4623      	mov	r3, r4
 80107e6:	6864      	ldr	r4, [r4, #4]
 80107e8:	e7ae      	b.n	8010748 <_malloc_r+0x34>
 80107ea:	463c      	mov	r4, r7
 80107ec:	687f      	ldr	r7, [r7, #4]
 80107ee:	e7b6      	b.n	801075e <_malloc_r+0x4a>
 80107f0:	461a      	mov	r2, r3
 80107f2:	685b      	ldr	r3, [r3, #4]
 80107f4:	42a3      	cmp	r3, r4
 80107f6:	d1fb      	bne.n	80107f0 <_malloc_r+0xdc>
 80107f8:	2300      	movs	r3, #0
 80107fa:	6053      	str	r3, [r2, #4]
 80107fc:	e7de      	b.n	80107bc <_malloc_r+0xa8>
 80107fe:	230c      	movs	r3, #12
 8010800:	6033      	str	r3, [r6, #0]
 8010802:	4630      	mov	r0, r6
 8010804:	f000 f80c 	bl	8010820 <__malloc_unlock>
 8010808:	e794      	b.n	8010734 <_malloc_r+0x20>
 801080a:	6005      	str	r5, [r0, #0]
 801080c:	e7d6      	b.n	80107bc <_malloc_r+0xa8>
 801080e:	bf00      	nop
 8010810:	20008650 	.word	0x20008650

08010814 <__malloc_lock>:
 8010814:	4801      	ldr	r0, [pc, #4]	@ (801081c <__malloc_lock+0x8>)
 8010816:	f7ff bef2 	b.w	80105fe <__retarget_lock_acquire_recursive>
 801081a:	bf00      	nop
 801081c:	20008648 	.word	0x20008648

08010820 <__malloc_unlock>:
 8010820:	4801      	ldr	r0, [pc, #4]	@ (8010828 <__malloc_unlock+0x8>)
 8010822:	f7ff beed 	b.w	8010600 <__retarget_lock_release_recursive>
 8010826:	bf00      	nop
 8010828:	20008648 	.word	0x20008648

0801082c <__ssputs_r>:
 801082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010830:	688e      	ldr	r6, [r1, #8]
 8010832:	461f      	mov	r7, r3
 8010834:	42be      	cmp	r6, r7
 8010836:	680b      	ldr	r3, [r1, #0]
 8010838:	4682      	mov	sl, r0
 801083a:	460c      	mov	r4, r1
 801083c:	4690      	mov	r8, r2
 801083e:	d82d      	bhi.n	801089c <__ssputs_r+0x70>
 8010840:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010844:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010848:	d026      	beq.n	8010898 <__ssputs_r+0x6c>
 801084a:	6965      	ldr	r5, [r4, #20]
 801084c:	6909      	ldr	r1, [r1, #16]
 801084e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010852:	eba3 0901 	sub.w	r9, r3, r1
 8010856:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801085a:	1c7b      	adds	r3, r7, #1
 801085c:	444b      	add	r3, r9
 801085e:	106d      	asrs	r5, r5, #1
 8010860:	429d      	cmp	r5, r3
 8010862:	bf38      	it	cc
 8010864:	461d      	movcc	r5, r3
 8010866:	0553      	lsls	r3, r2, #21
 8010868:	d527      	bpl.n	80108ba <__ssputs_r+0x8e>
 801086a:	4629      	mov	r1, r5
 801086c:	f7ff ff52 	bl	8010714 <_malloc_r>
 8010870:	4606      	mov	r6, r0
 8010872:	b360      	cbz	r0, 80108ce <__ssputs_r+0xa2>
 8010874:	6921      	ldr	r1, [r4, #16]
 8010876:	464a      	mov	r2, r9
 8010878:	f7ff fec3 	bl	8010602 <memcpy>
 801087c:	89a3      	ldrh	r3, [r4, #12]
 801087e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010886:	81a3      	strh	r3, [r4, #12]
 8010888:	6126      	str	r6, [r4, #16]
 801088a:	6165      	str	r5, [r4, #20]
 801088c:	444e      	add	r6, r9
 801088e:	eba5 0509 	sub.w	r5, r5, r9
 8010892:	6026      	str	r6, [r4, #0]
 8010894:	60a5      	str	r5, [r4, #8]
 8010896:	463e      	mov	r6, r7
 8010898:	42be      	cmp	r6, r7
 801089a:	d900      	bls.n	801089e <__ssputs_r+0x72>
 801089c:	463e      	mov	r6, r7
 801089e:	6820      	ldr	r0, [r4, #0]
 80108a0:	4632      	mov	r2, r6
 80108a2:	4641      	mov	r1, r8
 80108a4:	f7ff fe1d 	bl	80104e2 <memmove>
 80108a8:	68a3      	ldr	r3, [r4, #8]
 80108aa:	1b9b      	subs	r3, r3, r6
 80108ac:	60a3      	str	r3, [r4, #8]
 80108ae:	6823      	ldr	r3, [r4, #0]
 80108b0:	4433      	add	r3, r6
 80108b2:	6023      	str	r3, [r4, #0]
 80108b4:	2000      	movs	r0, #0
 80108b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108ba:	462a      	mov	r2, r5
 80108bc:	f000 fd70 	bl	80113a0 <_realloc_r>
 80108c0:	4606      	mov	r6, r0
 80108c2:	2800      	cmp	r0, #0
 80108c4:	d1e0      	bne.n	8010888 <__ssputs_r+0x5c>
 80108c6:	6921      	ldr	r1, [r4, #16]
 80108c8:	4650      	mov	r0, sl
 80108ca:	f7ff feaf 	bl	801062c <_free_r>
 80108ce:	230c      	movs	r3, #12
 80108d0:	f8ca 3000 	str.w	r3, [sl]
 80108d4:	89a3      	ldrh	r3, [r4, #12]
 80108d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80108da:	81a3      	strh	r3, [r4, #12]
 80108dc:	f04f 30ff 	mov.w	r0, #4294967295
 80108e0:	e7e9      	b.n	80108b6 <__ssputs_r+0x8a>
	...

080108e4 <_svfiprintf_r>:
 80108e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108e8:	4698      	mov	r8, r3
 80108ea:	898b      	ldrh	r3, [r1, #12]
 80108ec:	061b      	lsls	r3, r3, #24
 80108ee:	b09d      	sub	sp, #116	@ 0x74
 80108f0:	4607      	mov	r7, r0
 80108f2:	460d      	mov	r5, r1
 80108f4:	4614      	mov	r4, r2
 80108f6:	d510      	bpl.n	801091a <_svfiprintf_r+0x36>
 80108f8:	690b      	ldr	r3, [r1, #16]
 80108fa:	b973      	cbnz	r3, 801091a <_svfiprintf_r+0x36>
 80108fc:	2140      	movs	r1, #64	@ 0x40
 80108fe:	f7ff ff09 	bl	8010714 <_malloc_r>
 8010902:	6028      	str	r0, [r5, #0]
 8010904:	6128      	str	r0, [r5, #16]
 8010906:	b930      	cbnz	r0, 8010916 <_svfiprintf_r+0x32>
 8010908:	230c      	movs	r3, #12
 801090a:	603b      	str	r3, [r7, #0]
 801090c:	f04f 30ff 	mov.w	r0, #4294967295
 8010910:	b01d      	add	sp, #116	@ 0x74
 8010912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010916:	2340      	movs	r3, #64	@ 0x40
 8010918:	616b      	str	r3, [r5, #20]
 801091a:	2300      	movs	r3, #0
 801091c:	9309      	str	r3, [sp, #36]	@ 0x24
 801091e:	2320      	movs	r3, #32
 8010920:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010924:	f8cd 800c 	str.w	r8, [sp, #12]
 8010928:	2330      	movs	r3, #48	@ 0x30
 801092a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010ac8 <_svfiprintf_r+0x1e4>
 801092e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010932:	f04f 0901 	mov.w	r9, #1
 8010936:	4623      	mov	r3, r4
 8010938:	469a      	mov	sl, r3
 801093a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801093e:	b10a      	cbz	r2, 8010944 <_svfiprintf_r+0x60>
 8010940:	2a25      	cmp	r2, #37	@ 0x25
 8010942:	d1f9      	bne.n	8010938 <_svfiprintf_r+0x54>
 8010944:	ebba 0b04 	subs.w	fp, sl, r4
 8010948:	d00b      	beq.n	8010962 <_svfiprintf_r+0x7e>
 801094a:	465b      	mov	r3, fp
 801094c:	4622      	mov	r2, r4
 801094e:	4629      	mov	r1, r5
 8010950:	4638      	mov	r0, r7
 8010952:	f7ff ff6b 	bl	801082c <__ssputs_r>
 8010956:	3001      	adds	r0, #1
 8010958:	f000 80a7 	beq.w	8010aaa <_svfiprintf_r+0x1c6>
 801095c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801095e:	445a      	add	r2, fp
 8010960:	9209      	str	r2, [sp, #36]	@ 0x24
 8010962:	f89a 3000 	ldrb.w	r3, [sl]
 8010966:	2b00      	cmp	r3, #0
 8010968:	f000 809f 	beq.w	8010aaa <_svfiprintf_r+0x1c6>
 801096c:	2300      	movs	r3, #0
 801096e:	f04f 32ff 	mov.w	r2, #4294967295
 8010972:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010976:	f10a 0a01 	add.w	sl, sl, #1
 801097a:	9304      	str	r3, [sp, #16]
 801097c:	9307      	str	r3, [sp, #28]
 801097e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010982:	931a      	str	r3, [sp, #104]	@ 0x68
 8010984:	4654      	mov	r4, sl
 8010986:	2205      	movs	r2, #5
 8010988:	f814 1b01 	ldrb.w	r1, [r4], #1
 801098c:	484e      	ldr	r0, [pc, #312]	@ (8010ac8 <_svfiprintf_r+0x1e4>)
 801098e:	f7ef fc1f 	bl	80001d0 <memchr>
 8010992:	9a04      	ldr	r2, [sp, #16]
 8010994:	b9d8      	cbnz	r0, 80109ce <_svfiprintf_r+0xea>
 8010996:	06d0      	lsls	r0, r2, #27
 8010998:	bf44      	itt	mi
 801099a:	2320      	movmi	r3, #32
 801099c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80109a0:	0711      	lsls	r1, r2, #28
 80109a2:	bf44      	itt	mi
 80109a4:	232b      	movmi	r3, #43	@ 0x2b
 80109a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80109aa:	f89a 3000 	ldrb.w	r3, [sl]
 80109ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80109b0:	d015      	beq.n	80109de <_svfiprintf_r+0xfa>
 80109b2:	9a07      	ldr	r2, [sp, #28]
 80109b4:	4654      	mov	r4, sl
 80109b6:	2000      	movs	r0, #0
 80109b8:	f04f 0c0a 	mov.w	ip, #10
 80109bc:	4621      	mov	r1, r4
 80109be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80109c2:	3b30      	subs	r3, #48	@ 0x30
 80109c4:	2b09      	cmp	r3, #9
 80109c6:	d94b      	bls.n	8010a60 <_svfiprintf_r+0x17c>
 80109c8:	b1b0      	cbz	r0, 80109f8 <_svfiprintf_r+0x114>
 80109ca:	9207      	str	r2, [sp, #28]
 80109cc:	e014      	b.n	80109f8 <_svfiprintf_r+0x114>
 80109ce:	eba0 0308 	sub.w	r3, r0, r8
 80109d2:	fa09 f303 	lsl.w	r3, r9, r3
 80109d6:	4313      	orrs	r3, r2
 80109d8:	9304      	str	r3, [sp, #16]
 80109da:	46a2      	mov	sl, r4
 80109dc:	e7d2      	b.n	8010984 <_svfiprintf_r+0xa0>
 80109de:	9b03      	ldr	r3, [sp, #12]
 80109e0:	1d19      	adds	r1, r3, #4
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	9103      	str	r1, [sp, #12]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	bfbb      	ittet	lt
 80109ea:	425b      	neglt	r3, r3
 80109ec:	f042 0202 	orrlt.w	r2, r2, #2
 80109f0:	9307      	strge	r3, [sp, #28]
 80109f2:	9307      	strlt	r3, [sp, #28]
 80109f4:	bfb8      	it	lt
 80109f6:	9204      	strlt	r2, [sp, #16]
 80109f8:	7823      	ldrb	r3, [r4, #0]
 80109fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80109fc:	d10a      	bne.n	8010a14 <_svfiprintf_r+0x130>
 80109fe:	7863      	ldrb	r3, [r4, #1]
 8010a00:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a02:	d132      	bne.n	8010a6a <_svfiprintf_r+0x186>
 8010a04:	9b03      	ldr	r3, [sp, #12]
 8010a06:	1d1a      	adds	r2, r3, #4
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	9203      	str	r2, [sp, #12]
 8010a0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010a10:	3402      	adds	r4, #2
 8010a12:	9305      	str	r3, [sp, #20]
 8010a14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010ad8 <_svfiprintf_r+0x1f4>
 8010a18:	7821      	ldrb	r1, [r4, #0]
 8010a1a:	2203      	movs	r2, #3
 8010a1c:	4650      	mov	r0, sl
 8010a1e:	f7ef fbd7 	bl	80001d0 <memchr>
 8010a22:	b138      	cbz	r0, 8010a34 <_svfiprintf_r+0x150>
 8010a24:	9b04      	ldr	r3, [sp, #16]
 8010a26:	eba0 000a 	sub.w	r0, r0, sl
 8010a2a:	2240      	movs	r2, #64	@ 0x40
 8010a2c:	4082      	lsls	r2, r0
 8010a2e:	4313      	orrs	r3, r2
 8010a30:	3401      	adds	r4, #1
 8010a32:	9304      	str	r3, [sp, #16]
 8010a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a38:	4824      	ldr	r0, [pc, #144]	@ (8010acc <_svfiprintf_r+0x1e8>)
 8010a3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010a3e:	2206      	movs	r2, #6
 8010a40:	f7ef fbc6 	bl	80001d0 <memchr>
 8010a44:	2800      	cmp	r0, #0
 8010a46:	d036      	beq.n	8010ab6 <_svfiprintf_r+0x1d2>
 8010a48:	4b21      	ldr	r3, [pc, #132]	@ (8010ad0 <_svfiprintf_r+0x1ec>)
 8010a4a:	bb1b      	cbnz	r3, 8010a94 <_svfiprintf_r+0x1b0>
 8010a4c:	9b03      	ldr	r3, [sp, #12]
 8010a4e:	3307      	adds	r3, #7
 8010a50:	f023 0307 	bic.w	r3, r3, #7
 8010a54:	3308      	adds	r3, #8
 8010a56:	9303      	str	r3, [sp, #12]
 8010a58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a5a:	4433      	add	r3, r6
 8010a5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a5e:	e76a      	b.n	8010936 <_svfiprintf_r+0x52>
 8010a60:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a64:	460c      	mov	r4, r1
 8010a66:	2001      	movs	r0, #1
 8010a68:	e7a8      	b.n	80109bc <_svfiprintf_r+0xd8>
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	3401      	adds	r4, #1
 8010a6e:	9305      	str	r3, [sp, #20]
 8010a70:	4619      	mov	r1, r3
 8010a72:	f04f 0c0a 	mov.w	ip, #10
 8010a76:	4620      	mov	r0, r4
 8010a78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a7c:	3a30      	subs	r2, #48	@ 0x30
 8010a7e:	2a09      	cmp	r2, #9
 8010a80:	d903      	bls.n	8010a8a <_svfiprintf_r+0x1a6>
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d0c6      	beq.n	8010a14 <_svfiprintf_r+0x130>
 8010a86:	9105      	str	r1, [sp, #20]
 8010a88:	e7c4      	b.n	8010a14 <_svfiprintf_r+0x130>
 8010a8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a8e:	4604      	mov	r4, r0
 8010a90:	2301      	movs	r3, #1
 8010a92:	e7f0      	b.n	8010a76 <_svfiprintf_r+0x192>
 8010a94:	ab03      	add	r3, sp, #12
 8010a96:	9300      	str	r3, [sp, #0]
 8010a98:	462a      	mov	r2, r5
 8010a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8010ad4 <_svfiprintf_r+0x1f0>)
 8010a9c:	a904      	add	r1, sp, #16
 8010a9e:	4638      	mov	r0, r7
 8010aa0:	f3af 8000 	nop.w
 8010aa4:	1c42      	adds	r2, r0, #1
 8010aa6:	4606      	mov	r6, r0
 8010aa8:	d1d6      	bne.n	8010a58 <_svfiprintf_r+0x174>
 8010aaa:	89ab      	ldrh	r3, [r5, #12]
 8010aac:	065b      	lsls	r3, r3, #25
 8010aae:	f53f af2d 	bmi.w	801090c <_svfiprintf_r+0x28>
 8010ab2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010ab4:	e72c      	b.n	8010910 <_svfiprintf_r+0x2c>
 8010ab6:	ab03      	add	r3, sp, #12
 8010ab8:	9300      	str	r3, [sp, #0]
 8010aba:	462a      	mov	r2, r5
 8010abc:	4b05      	ldr	r3, [pc, #20]	@ (8010ad4 <_svfiprintf_r+0x1f0>)
 8010abe:	a904      	add	r1, sp, #16
 8010ac0:	4638      	mov	r0, r7
 8010ac2:	f000 f9bb 	bl	8010e3c <_printf_i>
 8010ac6:	e7ed      	b.n	8010aa4 <_svfiprintf_r+0x1c0>
 8010ac8:	080142ef 	.word	0x080142ef
 8010acc:	080142f9 	.word	0x080142f9
 8010ad0:	00000000 	.word	0x00000000
 8010ad4:	0801082d 	.word	0x0801082d
 8010ad8:	080142f5 	.word	0x080142f5

08010adc <__sfputc_r>:
 8010adc:	6893      	ldr	r3, [r2, #8]
 8010ade:	3b01      	subs	r3, #1
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	b410      	push	{r4}
 8010ae4:	6093      	str	r3, [r2, #8]
 8010ae6:	da08      	bge.n	8010afa <__sfputc_r+0x1e>
 8010ae8:	6994      	ldr	r4, [r2, #24]
 8010aea:	42a3      	cmp	r3, r4
 8010aec:	db01      	blt.n	8010af2 <__sfputc_r+0x16>
 8010aee:	290a      	cmp	r1, #10
 8010af0:	d103      	bne.n	8010afa <__sfputc_r+0x1e>
 8010af2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010af6:	f000 bb6b 	b.w	80111d0 <__swbuf_r>
 8010afa:	6813      	ldr	r3, [r2, #0]
 8010afc:	1c58      	adds	r0, r3, #1
 8010afe:	6010      	str	r0, [r2, #0]
 8010b00:	7019      	strb	r1, [r3, #0]
 8010b02:	4608      	mov	r0, r1
 8010b04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b08:	4770      	bx	lr

08010b0a <__sfputs_r>:
 8010b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b0c:	4606      	mov	r6, r0
 8010b0e:	460f      	mov	r7, r1
 8010b10:	4614      	mov	r4, r2
 8010b12:	18d5      	adds	r5, r2, r3
 8010b14:	42ac      	cmp	r4, r5
 8010b16:	d101      	bne.n	8010b1c <__sfputs_r+0x12>
 8010b18:	2000      	movs	r0, #0
 8010b1a:	e007      	b.n	8010b2c <__sfputs_r+0x22>
 8010b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b20:	463a      	mov	r2, r7
 8010b22:	4630      	mov	r0, r6
 8010b24:	f7ff ffda 	bl	8010adc <__sfputc_r>
 8010b28:	1c43      	adds	r3, r0, #1
 8010b2a:	d1f3      	bne.n	8010b14 <__sfputs_r+0xa>
 8010b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010b30 <_vfiprintf_r>:
 8010b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b34:	460d      	mov	r5, r1
 8010b36:	b09d      	sub	sp, #116	@ 0x74
 8010b38:	4614      	mov	r4, r2
 8010b3a:	4698      	mov	r8, r3
 8010b3c:	4606      	mov	r6, r0
 8010b3e:	b118      	cbz	r0, 8010b48 <_vfiprintf_r+0x18>
 8010b40:	6a03      	ldr	r3, [r0, #32]
 8010b42:	b90b      	cbnz	r3, 8010b48 <_vfiprintf_r+0x18>
 8010b44:	f7ff fbea 	bl	801031c <__sinit>
 8010b48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010b4a:	07d9      	lsls	r1, r3, #31
 8010b4c:	d405      	bmi.n	8010b5a <_vfiprintf_r+0x2a>
 8010b4e:	89ab      	ldrh	r3, [r5, #12]
 8010b50:	059a      	lsls	r2, r3, #22
 8010b52:	d402      	bmi.n	8010b5a <_vfiprintf_r+0x2a>
 8010b54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010b56:	f7ff fd52 	bl	80105fe <__retarget_lock_acquire_recursive>
 8010b5a:	89ab      	ldrh	r3, [r5, #12]
 8010b5c:	071b      	lsls	r3, r3, #28
 8010b5e:	d501      	bpl.n	8010b64 <_vfiprintf_r+0x34>
 8010b60:	692b      	ldr	r3, [r5, #16]
 8010b62:	b99b      	cbnz	r3, 8010b8c <_vfiprintf_r+0x5c>
 8010b64:	4629      	mov	r1, r5
 8010b66:	4630      	mov	r0, r6
 8010b68:	f000 fb70 	bl	801124c <__swsetup_r>
 8010b6c:	b170      	cbz	r0, 8010b8c <_vfiprintf_r+0x5c>
 8010b6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010b70:	07dc      	lsls	r4, r3, #31
 8010b72:	d504      	bpl.n	8010b7e <_vfiprintf_r+0x4e>
 8010b74:	f04f 30ff 	mov.w	r0, #4294967295
 8010b78:	b01d      	add	sp, #116	@ 0x74
 8010b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b7e:	89ab      	ldrh	r3, [r5, #12]
 8010b80:	0598      	lsls	r0, r3, #22
 8010b82:	d4f7      	bmi.n	8010b74 <_vfiprintf_r+0x44>
 8010b84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010b86:	f7ff fd3b 	bl	8010600 <__retarget_lock_release_recursive>
 8010b8a:	e7f3      	b.n	8010b74 <_vfiprintf_r+0x44>
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b90:	2320      	movs	r3, #32
 8010b92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010b96:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b9a:	2330      	movs	r3, #48	@ 0x30
 8010b9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010d4c <_vfiprintf_r+0x21c>
 8010ba0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010ba4:	f04f 0901 	mov.w	r9, #1
 8010ba8:	4623      	mov	r3, r4
 8010baa:	469a      	mov	sl, r3
 8010bac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010bb0:	b10a      	cbz	r2, 8010bb6 <_vfiprintf_r+0x86>
 8010bb2:	2a25      	cmp	r2, #37	@ 0x25
 8010bb4:	d1f9      	bne.n	8010baa <_vfiprintf_r+0x7a>
 8010bb6:	ebba 0b04 	subs.w	fp, sl, r4
 8010bba:	d00b      	beq.n	8010bd4 <_vfiprintf_r+0xa4>
 8010bbc:	465b      	mov	r3, fp
 8010bbe:	4622      	mov	r2, r4
 8010bc0:	4629      	mov	r1, r5
 8010bc2:	4630      	mov	r0, r6
 8010bc4:	f7ff ffa1 	bl	8010b0a <__sfputs_r>
 8010bc8:	3001      	adds	r0, #1
 8010bca:	f000 80a7 	beq.w	8010d1c <_vfiprintf_r+0x1ec>
 8010bce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010bd0:	445a      	add	r2, fp
 8010bd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8010bd4:	f89a 3000 	ldrb.w	r3, [sl]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	f000 809f 	beq.w	8010d1c <_vfiprintf_r+0x1ec>
 8010bde:	2300      	movs	r3, #0
 8010be0:	f04f 32ff 	mov.w	r2, #4294967295
 8010be4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010be8:	f10a 0a01 	add.w	sl, sl, #1
 8010bec:	9304      	str	r3, [sp, #16]
 8010bee:	9307      	str	r3, [sp, #28]
 8010bf0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010bf4:	931a      	str	r3, [sp, #104]	@ 0x68
 8010bf6:	4654      	mov	r4, sl
 8010bf8:	2205      	movs	r2, #5
 8010bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bfe:	4853      	ldr	r0, [pc, #332]	@ (8010d4c <_vfiprintf_r+0x21c>)
 8010c00:	f7ef fae6 	bl	80001d0 <memchr>
 8010c04:	9a04      	ldr	r2, [sp, #16]
 8010c06:	b9d8      	cbnz	r0, 8010c40 <_vfiprintf_r+0x110>
 8010c08:	06d1      	lsls	r1, r2, #27
 8010c0a:	bf44      	itt	mi
 8010c0c:	2320      	movmi	r3, #32
 8010c0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010c12:	0713      	lsls	r3, r2, #28
 8010c14:	bf44      	itt	mi
 8010c16:	232b      	movmi	r3, #43	@ 0x2b
 8010c18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010c1c:	f89a 3000 	ldrb.w	r3, [sl]
 8010c20:	2b2a      	cmp	r3, #42	@ 0x2a
 8010c22:	d015      	beq.n	8010c50 <_vfiprintf_r+0x120>
 8010c24:	9a07      	ldr	r2, [sp, #28]
 8010c26:	4654      	mov	r4, sl
 8010c28:	2000      	movs	r0, #0
 8010c2a:	f04f 0c0a 	mov.w	ip, #10
 8010c2e:	4621      	mov	r1, r4
 8010c30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010c34:	3b30      	subs	r3, #48	@ 0x30
 8010c36:	2b09      	cmp	r3, #9
 8010c38:	d94b      	bls.n	8010cd2 <_vfiprintf_r+0x1a2>
 8010c3a:	b1b0      	cbz	r0, 8010c6a <_vfiprintf_r+0x13a>
 8010c3c:	9207      	str	r2, [sp, #28]
 8010c3e:	e014      	b.n	8010c6a <_vfiprintf_r+0x13a>
 8010c40:	eba0 0308 	sub.w	r3, r0, r8
 8010c44:	fa09 f303 	lsl.w	r3, r9, r3
 8010c48:	4313      	orrs	r3, r2
 8010c4a:	9304      	str	r3, [sp, #16]
 8010c4c:	46a2      	mov	sl, r4
 8010c4e:	e7d2      	b.n	8010bf6 <_vfiprintf_r+0xc6>
 8010c50:	9b03      	ldr	r3, [sp, #12]
 8010c52:	1d19      	adds	r1, r3, #4
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	9103      	str	r1, [sp, #12]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	bfbb      	ittet	lt
 8010c5c:	425b      	neglt	r3, r3
 8010c5e:	f042 0202 	orrlt.w	r2, r2, #2
 8010c62:	9307      	strge	r3, [sp, #28]
 8010c64:	9307      	strlt	r3, [sp, #28]
 8010c66:	bfb8      	it	lt
 8010c68:	9204      	strlt	r2, [sp, #16]
 8010c6a:	7823      	ldrb	r3, [r4, #0]
 8010c6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8010c6e:	d10a      	bne.n	8010c86 <_vfiprintf_r+0x156>
 8010c70:	7863      	ldrb	r3, [r4, #1]
 8010c72:	2b2a      	cmp	r3, #42	@ 0x2a
 8010c74:	d132      	bne.n	8010cdc <_vfiprintf_r+0x1ac>
 8010c76:	9b03      	ldr	r3, [sp, #12]
 8010c78:	1d1a      	adds	r2, r3, #4
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	9203      	str	r2, [sp, #12]
 8010c7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010c82:	3402      	adds	r4, #2
 8010c84:	9305      	str	r3, [sp, #20]
 8010c86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010d5c <_vfiprintf_r+0x22c>
 8010c8a:	7821      	ldrb	r1, [r4, #0]
 8010c8c:	2203      	movs	r2, #3
 8010c8e:	4650      	mov	r0, sl
 8010c90:	f7ef fa9e 	bl	80001d0 <memchr>
 8010c94:	b138      	cbz	r0, 8010ca6 <_vfiprintf_r+0x176>
 8010c96:	9b04      	ldr	r3, [sp, #16]
 8010c98:	eba0 000a 	sub.w	r0, r0, sl
 8010c9c:	2240      	movs	r2, #64	@ 0x40
 8010c9e:	4082      	lsls	r2, r0
 8010ca0:	4313      	orrs	r3, r2
 8010ca2:	3401      	adds	r4, #1
 8010ca4:	9304      	str	r3, [sp, #16]
 8010ca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010caa:	4829      	ldr	r0, [pc, #164]	@ (8010d50 <_vfiprintf_r+0x220>)
 8010cac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010cb0:	2206      	movs	r2, #6
 8010cb2:	f7ef fa8d 	bl	80001d0 <memchr>
 8010cb6:	2800      	cmp	r0, #0
 8010cb8:	d03f      	beq.n	8010d3a <_vfiprintf_r+0x20a>
 8010cba:	4b26      	ldr	r3, [pc, #152]	@ (8010d54 <_vfiprintf_r+0x224>)
 8010cbc:	bb1b      	cbnz	r3, 8010d06 <_vfiprintf_r+0x1d6>
 8010cbe:	9b03      	ldr	r3, [sp, #12]
 8010cc0:	3307      	adds	r3, #7
 8010cc2:	f023 0307 	bic.w	r3, r3, #7
 8010cc6:	3308      	adds	r3, #8
 8010cc8:	9303      	str	r3, [sp, #12]
 8010cca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ccc:	443b      	add	r3, r7
 8010cce:	9309      	str	r3, [sp, #36]	@ 0x24
 8010cd0:	e76a      	b.n	8010ba8 <_vfiprintf_r+0x78>
 8010cd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8010cd6:	460c      	mov	r4, r1
 8010cd8:	2001      	movs	r0, #1
 8010cda:	e7a8      	b.n	8010c2e <_vfiprintf_r+0xfe>
 8010cdc:	2300      	movs	r3, #0
 8010cde:	3401      	adds	r4, #1
 8010ce0:	9305      	str	r3, [sp, #20]
 8010ce2:	4619      	mov	r1, r3
 8010ce4:	f04f 0c0a 	mov.w	ip, #10
 8010ce8:	4620      	mov	r0, r4
 8010cea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010cee:	3a30      	subs	r2, #48	@ 0x30
 8010cf0:	2a09      	cmp	r2, #9
 8010cf2:	d903      	bls.n	8010cfc <_vfiprintf_r+0x1cc>
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d0c6      	beq.n	8010c86 <_vfiprintf_r+0x156>
 8010cf8:	9105      	str	r1, [sp, #20]
 8010cfa:	e7c4      	b.n	8010c86 <_vfiprintf_r+0x156>
 8010cfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8010d00:	4604      	mov	r4, r0
 8010d02:	2301      	movs	r3, #1
 8010d04:	e7f0      	b.n	8010ce8 <_vfiprintf_r+0x1b8>
 8010d06:	ab03      	add	r3, sp, #12
 8010d08:	9300      	str	r3, [sp, #0]
 8010d0a:	462a      	mov	r2, r5
 8010d0c:	4b12      	ldr	r3, [pc, #72]	@ (8010d58 <_vfiprintf_r+0x228>)
 8010d0e:	a904      	add	r1, sp, #16
 8010d10:	4630      	mov	r0, r6
 8010d12:	f3af 8000 	nop.w
 8010d16:	4607      	mov	r7, r0
 8010d18:	1c78      	adds	r0, r7, #1
 8010d1a:	d1d6      	bne.n	8010cca <_vfiprintf_r+0x19a>
 8010d1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010d1e:	07d9      	lsls	r1, r3, #31
 8010d20:	d405      	bmi.n	8010d2e <_vfiprintf_r+0x1fe>
 8010d22:	89ab      	ldrh	r3, [r5, #12]
 8010d24:	059a      	lsls	r2, r3, #22
 8010d26:	d402      	bmi.n	8010d2e <_vfiprintf_r+0x1fe>
 8010d28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010d2a:	f7ff fc69 	bl	8010600 <__retarget_lock_release_recursive>
 8010d2e:	89ab      	ldrh	r3, [r5, #12]
 8010d30:	065b      	lsls	r3, r3, #25
 8010d32:	f53f af1f 	bmi.w	8010b74 <_vfiprintf_r+0x44>
 8010d36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010d38:	e71e      	b.n	8010b78 <_vfiprintf_r+0x48>
 8010d3a:	ab03      	add	r3, sp, #12
 8010d3c:	9300      	str	r3, [sp, #0]
 8010d3e:	462a      	mov	r2, r5
 8010d40:	4b05      	ldr	r3, [pc, #20]	@ (8010d58 <_vfiprintf_r+0x228>)
 8010d42:	a904      	add	r1, sp, #16
 8010d44:	4630      	mov	r0, r6
 8010d46:	f000 f879 	bl	8010e3c <_printf_i>
 8010d4a:	e7e4      	b.n	8010d16 <_vfiprintf_r+0x1e6>
 8010d4c:	080142ef 	.word	0x080142ef
 8010d50:	080142f9 	.word	0x080142f9
 8010d54:	00000000 	.word	0x00000000
 8010d58:	08010b0b 	.word	0x08010b0b
 8010d5c:	080142f5 	.word	0x080142f5

08010d60 <_printf_common>:
 8010d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d64:	4616      	mov	r6, r2
 8010d66:	4698      	mov	r8, r3
 8010d68:	688a      	ldr	r2, [r1, #8]
 8010d6a:	690b      	ldr	r3, [r1, #16]
 8010d6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010d70:	4293      	cmp	r3, r2
 8010d72:	bfb8      	it	lt
 8010d74:	4613      	movlt	r3, r2
 8010d76:	6033      	str	r3, [r6, #0]
 8010d78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010d7c:	4607      	mov	r7, r0
 8010d7e:	460c      	mov	r4, r1
 8010d80:	b10a      	cbz	r2, 8010d86 <_printf_common+0x26>
 8010d82:	3301      	adds	r3, #1
 8010d84:	6033      	str	r3, [r6, #0]
 8010d86:	6823      	ldr	r3, [r4, #0]
 8010d88:	0699      	lsls	r1, r3, #26
 8010d8a:	bf42      	ittt	mi
 8010d8c:	6833      	ldrmi	r3, [r6, #0]
 8010d8e:	3302      	addmi	r3, #2
 8010d90:	6033      	strmi	r3, [r6, #0]
 8010d92:	6825      	ldr	r5, [r4, #0]
 8010d94:	f015 0506 	ands.w	r5, r5, #6
 8010d98:	d106      	bne.n	8010da8 <_printf_common+0x48>
 8010d9a:	f104 0a19 	add.w	sl, r4, #25
 8010d9e:	68e3      	ldr	r3, [r4, #12]
 8010da0:	6832      	ldr	r2, [r6, #0]
 8010da2:	1a9b      	subs	r3, r3, r2
 8010da4:	42ab      	cmp	r3, r5
 8010da6:	dc26      	bgt.n	8010df6 <_printf_common+0x96>
 8010da8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010dac:	6822      	ldr	r2, [r4, #0]
 8010dae:	3b00      	subs	r3, #0
 8010db0:	bf18      	it	ne
 8010db2:	2301      	movne	r3, #1
 8010db4:	0692      	lsls	r2, r2, #26
 8010db6:	d42b      	bmi.n	8010e10 <_printf_common+0xb0>
 8010db8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010dbc:	4641      	mov	r1, r8
 8010dbe:	4638      	mov	r0, r7
 8010dc0:	47c8      	blx	r9
 8010dc2:	3001      	adds	r0, #1
 8010dc4:	d01e      	beq.n	8010e04 <_printf_common+0xa4>
 8010dc6:	6823      	ldr	r3, [r4, #0]
 8010dc8:	6922      	ldr	r2, [r4, #16]
 8010dca:	f003 0306 	and.w	r3, r3, #6
 8010dce:	2b04      	cmp	r3, #4
 8010dd0:	bf02      	ittt	eq
 8010dd2:	68e5      	ldreq	r5, [r4, #12]
 8010dd4:	6833      	ldreq	r3, [r6, #0]
 8010dd6:	1aed      	subeq	r5, r5, r3
 8010dd8:	68a3      	ldr	r3, [r4, #8]
 8010dda:	bf0c      	ite	eq
 8010ddc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010de0:	2500      	movne	r5, #0
 8010de2:	4293      	cmp	r3, r2
 8010de4:	bfc4      	itt	gt
 8010de6:	1a9b      	subgt	r3, r3, r2
 8010de8:	18ed      	addgt	r5, r5, r3
 8010dea:	2600      	movs	r6, #0
 8010dec:	341a      	adds	r4, #26
 8010dee:	42b5      	cmp	r5, r6
 8010df0:	d11a      	bne.n	8010e28 <_printf_common+0xc8>
 8010df2:	2000      	movs	r0, #0
 8010df4:	e008      	b.n	8010e08 <_printf_common+0xa8>
 8010df6:	2301      	movs	r3, #1
 8010df8:	4652      	mov	r2, sl
 8010dfa:	4641      	mov	r1, r8
 8010dfc:	4638      	mov	r0, r7
 8010dfe:	47c8      	blx	r9
 8010e00:	3001      	adds	r0, #1
 8010e02:	d103      	bne.n	8010e0c <_printf_common+0xac>
 8010e04:	f04f 30ff 	mov.w	r0, #4294967295
 8010e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e0c:	3501      	adds	r5, #1
 8010e0e:	e7c6      	b.n	8010d9e <_printf_common+0x3e>
 8010e10:	18e1      	adds	r1, r4, r3
 8010e12:	1c5a      	adds	r2, r3, #1
 8010e14:	2030      	movs	r0, #48	@ 0x30
 8010e16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010e1a:	4422      	add	r2, r4
 8010e1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010e20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010e24:	3302      	adds	r3, #2
 8010e26:	e7c7      	b.n	8010db8 <_printf_common+0x58>
 8010e28:	2301      	movs	r3, #1
 8010e2a:	4622      	mov	r2, r4
 8010e2c:	4641      	mov	r1, r8
 8010e2e:	4638      	mov	r0, r7
 8010e30:	47c8      	blx	r9
 8010e32:	3001      	adds	r0, #1
 8010e34:	d0e6      	beq.n	8010e04 <_printf_common+0xa4>
 8010e36:	3601      	adds	r6, #1
 8010e38:	e7d9      	b.n	8010dee <_printf_common+0x8e>
	...

08010e3c <_printf_i>:
 8010e3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010e40:	7e0f      	ldrb	r7, [r1, #24]
 8010e42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010e44:	2f78      	cmp	r7, #120	@ 0x78
 8010e46:	4691      	mov	r9, r2
 8010e48:	4680      	mov	r8, r0
 8010e4a:	460c      	mov	r4, r1
 8010e4c:	469a      	mov	sl, r3
 8010e4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010e52:	d807      	bhi.n	8010e64 <_printf_i+0x28>
 8010e54:	2f62      	cmp	r7, #98	@ 0x62
 8010e56:	d80a      	bhi.n	8010e6e <_printf_i+0x32>
 8010e58:	2f00      	cmp	r7, #0
 8010e5a:	f000 80d1 	beq.w	8011000 <_printf_i+0x1c4>
 8010e5e:	2f58      	cmp	r7, #88	@ 0x58
 8010e60:	f000 80b8 	beq.w	8010fd4 <_printf_i+0x198>
 8010e64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010e68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010e6c:	e03a      	b.n	8010ee4 <_printf_i+0xa8>
 8010e6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010e72:	2b15      	cmp	r3, #21
 8010e74:	d8f6      	bhi.n	8010e64 <_printf_i+0x28>
 8010e76:	a101      	add	r1, pc, #4	@ (adr r1, 8010e7c <_printf_i+0x40>)
 8010e78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010e7c:	08010ed5 	.word	0x08010ed5
 8010e80:	08010ee9 	.word	0x08010ee9
 8010e84:	08010e65 	.word	0x08010e65
 8010e88:	08010e65 	.word	0x08010e65
 8010e8c:	08010e65 	.word	0x08010e65
 8010e90:	08010e65 	.word	0x08010e65
 8010e94:	08010ee9 	.word	0x08010ee9
 8010e98:	08010e65 	.word	0x08010e65
 8010e9c:	08010e65 	.word	0x08010e65
 8010ea0:	08010e65 	.word	0x08010e65
 8010ea4:	08010e65 	.word	0x08010e65
 8010ea8:	08010fe7 	.word	0x08010fe7
 8010eac:	08010f13 	.word	0x08010f13
 8010eb0:	08010fa1 	.word	0x08010fa1
 8010eb4:	08010e65 	.word	0x08010e65
 8010eb8:	08010e65 	.word	0x08010e65
 8010ebc:	08011009 	.word	0x08011009
 8010ec0:	08010e65 	.word	0x08010e65
 8010ec4:	08010f13 	.word	0x08010f13
 8010ec8:	08010e65 	.word	0x08010e65
 8010ecc:	08010e65 	.word	0x08010e65
 8010ed0:	08010fa9 	.word	0x08010fa9
 8010ed4:	6833      	ldr	r3, [r6, #0]
 8010ed6:	1d1a      	adds	r2, r3, #4
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	6032      	str	r2, [r6, #0]
 8010edc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010ee0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	e09c      	b.n	8011022 <_printf_i+0x1e6>
 8010ee8:	6833      	ldr	r3, [r6, #0]
 8010eea:	6820      	ldr	r0, [r4, #0]
 8010eec:	1d19      	adds	r1, r3, #4
 8010eee:	6031      	str	r1, [r6, #0]
 8010ef0:	0606      	lsls	r6, r0, #24
 8010ef2:	d501      	bpl.n	8010ef8 <_printf_i+0xbc>
 8010ef4:	681d      	ldr	r5, [r3, #0]
 8010ef6:	e003      	b.n	8010f00 <_printf_i+0xc4>
 8010ef8:	0645      	lsls	r5, r0, #25
 8010efa:	d5fb      	bpl.n	8010ef4 <_printf_i+0xb8>
 8010efc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010f00:	2d00      	cmp	r5, #0
 8010f02:	da03      	bge.n	8010f0c <_printf_i+0xd0>
 8010f04:	232d      	movs	r3, #45	@ 0x2d
 8010f06:	426d      	negs	r5, r5
 8010f08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010f0c:	4858      	ldr	r0, [pc, #352]	@ (8011070 <_printf_i+0x234>)
 8010f0e:	230a      	movs	r3, #10
 8010f10:	e011      	b.n	8010f36 <_printf_i+0xfa>
 8010f12:	6821      	ldr	r1, [r4, #0]
 8010f14:	6833      	ldr	r3, [r6, #0]
 8010f16:	0608      	lsls	r0, r1, #24
 8010f18:	f853 5b04 	ldr.w	r5, [r3], #4
 8010f1c:	d402      	bmi.n	8010f24 <_printf_i+0xe8>
 8010f1e:	0649      	lsls	r1, r1, #25
 8010f20:	bf48      	it	mi
 8010f22:	b2ad      	uxthmi	r5, r5
 8010f24:	2f6f      	cmp	r7, #111	@ 0x6f
 8010f26:	4852      	ldr	r0, [pc, #328]	@ (8011070 <_printf_i+0x234>)
 8010f28:	6033      	str	r3, [r6, #0]
 8010f2a:	bf14      	ite	ne
 8010f2c:	230a      	movne	r3, #10
 8010f2e:	2308      	moveq	r3, #8
 8010f30:	2100      	movs	r1, #0
 8010f32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010f36:	6866      	ldr	r6, [r4, #4]
 8010f38:	60a6      	str	r6, [r4, #8]
 8010f3a:	2e00      	cmp	r6, #0
 8010f3c:	db05      	blt.n	8010f4a <_printf_i+0x10e>
 8010f3e:	6821      	ldr	r1, [r4, #0]
 8010f40:	432e      	orrs	r6, r5
 8010f42:	f021 0104 	bic.w	r1, r1, #4
 8010f46:	6021      	str	r1, [r4, #0]
 8010f48:	d04b      	beq.n	8010fe2 <_printf_i+0x1a6>
 8010f4a:	4616      	mov	r6, r2
 8010f4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8010f50:	fb03 5711 	mls	r7, r3, r1, r5
 8010f54:	5dc7      	ldrb	r7, [r0, r7]
 8010f56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010f5a:	462f      	mov	r7, r5
 8010f5c:	42bb      	cmp	r3, r7
 8010f5e:	460d      	mov	r5, r1
 8010f60:	d9f4      	bls.n	8010f4c <_printf_i+0x110>
 8010f62:	2b08      	cmp	r3, #8
 8010f64:	d10b      	bne.n	8010f7e <_printf_i+0x142>
 8010f66:	6823      	ldr	r3, [r4, #0]
 8010f68:	07df      	lsls	r7, r3, #31
 8010f6a:	d508      	bpl.n	8010f7e <_printf_i+0x142>
 8010f6c:	6923      	ldr	r3, [r4, #16]
 8010f6e:	6861      	ldr	r1, [r4, #4]
 8010f70:	4299      	cmp	r1, r3
 8010f72:	bfde      	ittt	le
 8010f74:	2330      	movle	r3, #48	@ 0x30
 8010f76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010f7a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010f7e:	1b92      	subs	r2, r2, r6
 8010f80:	6122      	str	r2, [r4, #16]
 8010f82:	f8cd a000 	str.w	sl, [sp]
 8010f86:	464b      	mov	r3, r9
 8010f88:	aa03      	add	r2, sp, #12
 8010f8a:	4621      	mov	r1, r4
 8010f8c:	4640      	mov	r0, r8
 8010f8e:	f7ff fee7 	bl	8010d60 <_printf_common>
 8010f92:	3001      	adds	r0, #1
 8010f94:	d14a      	bne.n	801102c <_printf_i+0x1f0>
 8010f96:	f04f 30ff 	mov.w	r0, #4294967295
 8010f9a:	b004      	add	sp, #16
 8010f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fa0:	6823      	ldr	r3, [r4, #0]
 8010fa2:	f043 0320 	orr.w	r3, r3, #32
 8010fa6:	6023      	str	r3, [r4, #0]
 8010fa8:	4832      	ldr	r0, [pc, #200]	@ (8011074 <_printf_i+0x238>)
 8010faa:	2778      	movs	r7, #120	@ 0x78
 8010fac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010fb0:	6823      	ldr	r3, [r4, #0]
 8010fb2:	6831      	ldr	r1, [r6, #0]
 8010fb4:	061f      	lsls	r7, r3, #24
 8010fb6:	f851 5b04 	ldr.w	r5, [r1], #4
 8010fba:	d402      	bmi.n	8010fc2 <_printf_i+0x186>
 8010fbc:	065f      	lsls	r7, r3, #25
 8010fbe:	bf48      	it	mi
 8010fc0:	b2ad      	uxthmi	r5, r5
 8010fc2:	6031      	str	r1, [r6, #0]
 8010fc4:	07d9      	lsls	r1, r3, #31
 8010fc6:	bf44      	itt	mi
 8010fc8:	f043 0320 	orrmi.w	r3, r3, #32
 8010fcc:	6023      	strmi	r3, [r4, #0]
 8010fce:	b11d      	cbz	r5, 8010fd8 <_printf_i+0x19c>
 8010fd0:	2310      	movs	r3, #16
 8010fd2:	e7ad      	b.n	8010f30 <_printf_i+0xf4>
 8010fd4:	4826      	ldr	r0, [pc, #152]	@ (8011070 <_printf_i+0x234>)
 8010fd6:	e7e9      	b.n	8010fac <_printf_i+0x170>
 8010fd8:	6823      	ldr	r3, [r4, #0]
 8010fda:	f023 0320 	bic.w	r3, r3, #32
 8010fde:	6023      	str	r3, [r4, #0]
 8010fe0:	e7f6      	b.n	8010fd0 <_printf_i+0x194>
 8010fe2:	4616      	mov	r6, r2
 8010fe4:	e7bd      	b.n	8010f62 <_printf_i+0x126>
 8010fe6:	6833      	ldr	r3, [r6, #0]
 8010fe8:	6825      	ldr	r5, [r4, #0]
 8010fea:	6961      	ldr	r1, [r4, #20]
 8010fec:	1d18      	adds	r0, r3, #4
 8010fee:	6030      	str	r0, [r6, #0]
 8010ff0:	062e      	lsls	r6, r5, #24
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	d501      	bpl.n	8010ffa <_printf_i+0x1be>
 8010ff6:	6019      	str	r1, [r3, #0]
 8010ff8:	e002      	b.n	8011000 <_printf_i+0x1c4>
 8010ffa:	0668      	lsls	r0, r5, #25
 8010ffc:	d5fb      	bpl.n	8010ff6 <_printf_i+0x1ba>
 8010ffe:	8019      	strh	r1, [r3, #0]
 8011000:	2300      	movs	r3, #0
 8011002:	6123      	str	r3, [r4, #16]
 8011004:	4616      	mov	r6, r2
 8011006:	e7bc      	b.n	8010f82 <_printf_i+0x146>
 8011008:	6833      	ldr	r3, [r6, #0]
 801100a:	1d1a      	adds	r2, r3, #4
 801100c:	6032      	str	r2, [r6, #0]
 801100e:	681e      	ldr	r6, [r3, #0]
 8011010:	6862      	ldr	r2, [r4, #4]
 8011012:	2100      	movs	r1, #0
 8011014:	4630      	mov	r0, r6
 8011016:	f7ef f8db 	bl	80001d0 <memchr>
 801101a:	b108      	cbz	r0, 8011020 <_printf_i+0x1e4>
 801101c:	1b80      	subs	r0, r0, r6
 801101e:	6060      	str	r0, [r4, #4]
 8011020:	6863      	ldr	r3, [r4, #4]
 8011022:	6123      	str	r3, [r4, #16]
 8011024:	2300      	movs	r3, #0
 8011026:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801102a:	e7aa      	b.n	8010f82 <_printf_i+0x146>
 801102c:	6923      	ldr	r3, [r4, #16]
 801102e:	4632      	mov	r2, r6
 8011030:	4649      	mov	r1, r9
 8011032:	4640      	mov	r0, r8
 8011034:	47d0      	blx	sl
 8011036:	3001      	adds	r0, #1
 8011038:	d0ad      	beq.n	8010f96 <_printf_i+0x15a>
 801103a:	6823      	ldr	r3, [r4, #0]
 801103c:	079b      	lsls	r3, r3, #30
 801103e:	d413      	bmi.n	8011068 <_printf_i+0x22c>
 8011040:	68e0      	ldr	r0, [r4, #12]
 8011042:	9b03      	ldr	r3, [sp, #12]
 8011044:	4298      	cmp	r0, r3
 8011046:	bfb8      	it	lt
 8011048:	4618      	movlt	r0, r3
 801104a:	e7a6      	b.n	8010f9a <_printf_i+0x15e>
 801104c:	2301      	movs	r3, #1
 801104e:	4632      	mov	r2, r6
 8011050:	4649      	mov	r1, r9
 8011052:	4640      	mov	r0, r8
 8011054:	47d0      	blx	sl
 8011056:	3001      	adds	r0, #1
 8011058:	d09d      	beq.n	8010f96 <_printf_i+0x15a>
 801105a:	3501      	adds	r5, #1
 801105c:	68e3      	ldr	r3, [r4, #12]
 801105e:	9903      	ldr	r1, [sp, #12]
 8011060:	1a5b      	subs	r3, r3, r1
 8011062:	42ab      	cmp	r3, r5
 8011064:	dcf2      	bgt.n	801104c <_printf_i+0x210>
 8011066:	e7eb      	b.n	8011040 <_printf_i+0x204>
 8011068:	2500      	movs	r5, #0
 801106a:	f104 0619 	add.w	r6, r4, #25
 801106e:	e7f5      	b.n	801105c <_printf_i+0x220>
 8011070:	08014300 	.word	0x08014300
 8011074:	08014311 	.word	0x08014311

08011078 <__sflush_r>:
 8011078:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801107c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011080:	0716      	lsls	r6, r2, #28
 8011082:	4605      	mov	r5, r0
 8011084:	460c      	mov	r4, r1
 8011086:	d454      	bmi.n	8011132 <__sflush_r+0xba>
 8011088:	684b      	ldr	r3, [r1, #4]
 801108a:	2b00      	cmp	r3, #0
 801108c:	dc02      	bgt.n	8011094 <__sflush_r+0x1c>
 801108e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011090:	2b00      	cmp	r3, #0
 8011092:	dd48      	ble.n	8011126 <__sflush_r+0xae>
 8011094:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011096:	2e00      	cmp	r6, #0
 8011098:	d045      	beq.n	8011126 <__sflush_r+0xae>
 801109a:	2300      	movs	r3, #0
 801109c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80110a0:	682f      	ldr	r7, [r5, #0]
 80110a2:	6a21      	ldr	r1, [r4, #32]
 80110a4:	602b      	str	r3, [r5, #0]
 80110a6:	d030      	beq.n	801110a <__sflush_r+0x92>
 80110a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80110aa:	89a3      	ldrh	r3, [r4, #12]
 80110ac:	0759      	lsls	r1, r3, #29
 80110ae:	d505      	bpl.n	80110bc <__sflush_r+0x44>
 80110b0:	6863      	ldr	r3, [r4, #4]
 80110b2:	1ad2      	subs	r2, r2, r3
 80110b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80110b6:	b10b      	cbz	r3, 80110bc <__sflush_r+0x44>
 80110b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80110ba:	1ad2      	subs	r2, r2, r3
 80110bc:	2300      	movs	r3, #0
 80110be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80110c0:	6a21      	ldr	r1, [r4, #32]
 80110c2:	4628      	mov	r0, r5
 80110c4:	47b0      	blx	r6
 80110c6:	1c43      	adds	r3, r0, #1
 80110c8:	89a3      	ldrh	r3, [r4, #12]
 80110ca:	d106      	bne.n	80110da <__sflush_r+0x62>
 80110cc:	6829      	ldr	r1, [r5, #0]
 80110ce:	291d      	cmp	r1, #29
 80110d0:	d82b      	bhi.n	801112a <__sflush_r+0xb2>
 80110d2:	4a2a      	ldr	r2, [pc, #168]	@ (801117c <__sflush_r+0x104>)
 80110d4:	40ca      	lsrs	r2, r1
 80110d6:	07d6      	lsls	r6, r2, #31
 80110d8:	d527      	bpl.n	801112a <__sflush_r+0xb2>
 80110da:	2200      	movs	r2, #0
 80110dc:	6062      	str	r2, [r4, #4]
 80110de:	04d9      	lsls	r1, r3, #19
 80110e0:	6922      	ldr	r2, [r4, #16]
 80110e2:	6022      	str	r2, [r4, #0]
 80110e4:	d504      	bpl.n	80110f0 <__sflush_r+0x78>
 80110e6:	1c42      	adds	r2, r0, #1
 80110e8:	d101      	bne.n	80110ee <__sflush_r+0x76>
 80110ea:	682b      	ldr	r3, [r5, #0]
 80110ec:	b903      	cbnz	r3, 80110f0 <__sflush_r+0x78>
 80110ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80110f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80110f2:	602f      	str	r7, [r5, #0]
 80110f4:	b1b9      	cbz	r1, 8011126 <__sflush_r+0xae>
 80110f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80110fa:	4299      	cmp	r1, r3
 80110fc:	d002      	beq.n	8011104 <__sflush_r+0x8c>
 80110fe:	4628      	mov	r0, r5
 8011100:	f7ff fa94 	bl	801062c <_free_r>
 8011104:	2300      	movs	r3, #0
 8011106:	6363      	str	r3, [r4, #52]	@ 0x34
 8011108:	e00d      	b.n	8011126 <__sflush_r+0xae>
 801110a:	2301      	movs	r3, #1
 801110c:	4628      	mov	r0, r5
 801110e:	47b0      	blx	r6
 8011110:	4602      	mov	r2, r0
 8011112:	1c50      	adds	r0, r2, #1
 8011114:	d1c9      	bne.n	80110aa <__sflush_r+0x32>
 8011116:	682b      	ldr	r3, [r5, #0]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d0c6      	beq.n	80110aa <__sflush_r+0x32>
 801111c:	2b1d      	cmp	r3, #29
 801111e:	d001      	beq.n	8011124 <__sflush_r+0xac>
 8011120:	2b16      	cmp	r3, #22
 8011122:	d11e      	bne.n	8011162 <__sflush_r+0xea>
 8011124:	602f      	str	r7, [r5, #0]
 8011126:	2000      	movs	r0, #0
 8011128:	e022      	b.n	8011170 <__sflush_r+0xf8>
 801112a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801112e:	b21b      	sxth	r3, r3
 8011130:	e01b      	b.n	801116a <__sflush_r+0xf2>
 8011132:	690f      	ldr	r7, [r1, #16]
 8011134:	2f00      	cmp	r7, #0
 8011136:	d0f6      	beq.n	8011126 <__sflush_r+0xae>
 8011138:	0793      	lsls	r3, r2, #30
 801113a:	680e      	ldr	r6, [r1, #0]
 801113c:	bf08      	it	eq
 801113e:	694b      	ldreq	r3, [r1, #20]
 8011140:	600f      	str	r7, [r1, #0]
 8011142:	bf18      	it	ne
 8011144:	2300      	movne	r3, #0
 8011146:	eba6 0807 	sub.w	r8, r6, r7
 801114a:	608b      	str	r3, [r1, #8]
 801114c:	f1b8 0f00 	cmp.w	r8, #0
 8011150:	dde9      	ble.n	8011126 <__sflush_r+0xae>
 8011152:	6a21      	ldr	r1, [r4, #32]
 8011154:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011156:	4643      	mov	r3, r8
 8011158:	463a      	mov	r2, r7
 801115a:	4628      	mov	r0, r5
 801115c:	47b0      	blx	r6
 801115e:	2800      	cmp	r0, #0
 8011160:	dc08      	bgt.n	8011174 <__sflush_r+0xfc>
 8011162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011166:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801116a:	81a3      	strh	r3, [r4, #12]
 801116c:	f04f 30ff 	mov.w	r0, #4294967295
 8011170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011174:	4407      	add	r7, r0
 8011176:	eba8 0800 	sub.w	r8, r8, r0
 801117a:	e7e7      	b.n	801114c <__sflush_r+0xd4>
 801117c:	20400001 	.word	0x20400001

08011180 <_fflush_r>:
 8011180:	b538      	push	{r3, r4, r5, lr}
 8011182:	690b      	ldr	r3, [r1, #16]
 8011184:	4605      	mov	r5, r0
 8011186:	460c      	mov	r4, r1
 8011188:	b913      	cbnz	r3, 8011190 <_fflush_r+0x10>
 801118a:	2500      	movs	r5, #0
 801118c:	4628      	mov	r0, r5
 801118e:	bd38      	pop	{r3, r4, r5, pc}
 8011190:	b118      	cbz	r0, 801119a <_fflush_r+0x1a>
 8011192:	6a03      	ldr	r3, [r0, #32]
 8011194:	b90b      	cbnz	r3, 801119a <_fflush_r+0x1a>
 8011196:	f7ff f8c1 	bl	801031c <__sinit>
 801119a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d0f3      	beq.n	801118a <_fflush_r+0xa>
 80111a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80111a4:	07d0      	lsls	r0, r2, #31
 80111a6:	d404      	bmi.n	80111b2 <_fflush_r+0x32>
 80111a8:	0599      	lsls	r1, r3, #22
 80111aa:	d402      	bmi.n	80111b2 <_fflush_r+0x32>
 80111ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80111ae:	f7ff fa26 	bl	80105fe <__retarget_lock_acquire_recursive>
 80111b2:	4628      	mov	r0, r5
 80111b4:	4621      	mov	r1, r4
 80111b6:	f7ff ff5f 	bl	8011078 <__sflush_r>
 80111ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80111bc:	07da      	lsls	r2, r3, #31
 80111be:	4605      	mov	r5, r0
 80111c0:	d4e4      	bmi.n	801118c <_fflush_r+0xc>
 80111c2:	89a3      	ldrh	r3, [r4, #12]
 80111c4:	059b      	lsls	r3, r3, #22
 80111c6:	d4e1      	bmi.n	801118c <_fflush_r+0xc>
 80111c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80111ca:	f7ff fa19 	bl	8010600 <__retarget_lock_release_recursive>
 80111ce:	e7dd      	b.n	801118c <_fflush_r+0xc>

080111d0 <__swbuf_r>:
 80111d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111d2:	460e      	mov	r6, r1
 80111d4:	4614      	mov	r4, r2
 80111d6:	4605      	mov	r5, r0
 80111d8:	b118      	cbz	r0, 80111e2 <__swbuf_r+0x12>
 80111da:	6a03      	ldr	r3, [r0, #32]
 80111dc:	b90b      	cbnz	r3, 80111e2 <__swbuf_r+0x12>
 80111de:	f7ff f89d 	bl	801031c <__sinit>
 80111e2:	69a3      	ldr	r3, [r4, #24]
 80111e4:	60a3      	str	r3, [r4, #8]
 80111e6:	89a3      	ldrh	r3, [r4, #12]
 80111e8:	071a      	lsls	r2, r3, #28
 80111ea:	d501      	bpl.n	80111f0 <__swbuf_r+0x20>
 80111ec:	6923      	ldr	r3, [r4, #16]
 80111ee:	b943      	cbnz	r3, 8011202 <__swbuf_r+0x32>
 80111f0:	4621      	mov	r1, r4
 80111f2:	4628      	mov	r0, r5
 80111f4:	f000 f82a 	bl	801124c <__swsetup_r>
 80111f8:	b118      	cbz	r0, 8011202 <__swbuf_r+0x32>
 80111fa:	f04f 37ff 	mov.w	r7, #4294967295
 80111fe:	4638      	mov	r0, r7
 8011200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011202:	6823      	ldr	r3, [r4, #0]
 8011204:	6922      	ldr	r2, [r4, #16]
 8011206:	1a98      	subs	r0, r3, r2
 8011208:	6963      	ldr	r3, [r4, #20]
 801120a:	b2f6      	uxtb	r6, r6
 801120c:	4283      	cmp	r3, r0
 801120e:	4637      	mov	r7, r6
 8011210:	dc05      	bgt.n	801121e <__swbuf_r+0x4e>
 8011212:	4621      	mov	r1, r4
 8011214:	4628      	mov	r0, r5
 8011216:	f7ff ffb3 	bl	8011180 <_fflush_r>
 801121a:	2800      	cmp	r0, #0
 801121c:	d1ed      	bne.n	80111fa <__swbuf_r+0x2a>
 801121e:	68a3      	ldr	r3, [r4, #8]
 8011220:	3b01      	subs	r3, #1
 8011222:	60a3      	str	r3, [r4, #8]
 8011224:	6823      	ldr	r3, [r4, #0]
 8011226:	1c5a      	adds	r2, r3, #1
 8011228:	6022      	str	r2, [r4, #0]
 801122a:	701e      	strb	r6, [r3, #0]
 801122c:	6962      	ldr	r2, [r4, #20]
 801122e:	1c43      	adds	r3, r0, #1
 8011230:	429a      	cmp	r2, r3
 8011232:	d004      	beq.n	801123e <__swbuf_r+0x6e>
 8011234:	89a3      	ldrh	r3, [r4, #12]
 8011236:	07db      	lsls	r3, r3, #31
 8011238:	d5e1      	bpl.n	80111fe <__swbuf_r+0x2e>
 801123a:	2e0a      	cmp	r6, #10
 801123c:	d1df      	bne.n	80111fe <__swbuf_r+0x2e>
 801123e:	4621      	mov	r1, r4
 8011240:	4628      	mov	r0, r5
 8011242:	f7ff ff9d 	bl	8011180 <_fflush_r>
 8011246:	2800      	cmp	r0, #0
 8011248:	d0d9      	beq.n	80111fe <__swbuf_r+0x2e>
 801124a:	e7d6      	b.n	80111fa <__swbuf_r+0x2a>

0801124c <__swsetup_r>:
 801124c:	b538      	push	{r3, r4, r5, lr}
 801124e:	4b29      	ldr	r3, [pc, #164]	@ (80112f4 <__swsetup_r+0xa8>)
 8011250:	4605      	mov	r5, r0
 8011252:	6818      	ldr	r0, [r3, #0]
 8011254:	460c      	mov	r4, r1
 8011256:	b118      	cbz	r0, 8011260 <__swsetup_r+0x14>
 8011258:	6a03      	ldr	r3, [r0, #32]
 801125a:	b90b      	cbnz	r3, 8011260 <__swsetup_r+0x14>
 801125c:	f7ff f85e 	bl	801031c <__sinit>
 8011260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011264:	0719      	lsls	r1, r3, #28
 8011266:	d422      	bmi.n	80112ae <__swsetup_r+0x62>
 8011268:	06da      	lsls	r2, r3, #27
 801126a:	d407      	bmi.n	801127c <__swsetup_r+0x30>
 801126c:	2209      	movs	r2, #9
 801126e:	602a      	str	r2, [r5, #0]
 8011270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011274:	81a3      	strh	r3, [r4, #12]
 8011276:	f04f 30ff 	mov.w	r0, #4294967295
 801127a:	e033      	b.n	80112e4 <__swsetup_r+0x98>
 801127c:	0758      	lsls	r0, r3, #29
 801127e:	d512      	bpl.n	80112a6 <__swsetup_r+0x5a>
 8011280:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011282:	b141      	cbz	r1, 8011296 <__swsetup_r+0x4a>
 8011284:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011288:	4299      	cmp	r1, r3
 801128a:	d002      	beq.n	8011292 <__swsetup_r+0x46>
 801128c:	4628      	mov	r0, r5
 801128e:	f7ff f9cd 	bl	801062c <_free_r>
 8011292:	2300      	movs	r3, #0
 8011294:	6363      	str	r3, [r4, #52]	@ 0x34
 8011296:	89a3      	ldrh	r3, [r4, #12]
 8011298:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801129c:	81a3      	strh	r3, [r4, #12]
 801129e:	2300      	movs	r3, #0
 80112a0:	6063      	str	r3, [r4, #4]
 80112a2:	6923      	ldr	r3, [r4, #16]
 80112a4:	6023      	str	r3, [r4, #0]
 80112a6:	89a3      	ldrh	r3, [r4, #12]
 80112a8:	f043 0308 	orr.w	r3, r3, #8
 80112ac:	81a3      	strh	r3, [r4, #12]
 80112ae:	6923      	ldr	r3, [r4, #16]
 80112b0:	b94b      	cbnz	r3, 80112c6 <__swsetup_r+0x7a>
 80112b2:	89a3      	ldrh	r3, [r4, #12]
 80112b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80112b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80112bc:	d003      	beq.n	80112c6 <__swsetup_r+0x7a>
 80112be:	4621      	mov	r1, r4
 80112c0:	4628      	mov	r0, r5
 80112c2:	f000 f8c1 	bl	8011448 <__smakebuf_r>
 80112c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112ca:	f013 0201 	ands.w	r2, r3, #1
 80112ce:	d00a      	beq.n	80112e6 <__swsetup_r+0x9a>
 80112d0:	2200      	movs	r2, #0
 80112d2:	60a2      	str	r2, [r4, #8]
 80112d4:	6962      	ldr	r2, [r4, #20]
 80112d6:	4252      	negs	r2, r2
 80112d8:	61a2      	str	r2, [r4, #24]
 80112da:	6922      	ldr	r2, [r4, #16]
 80112dc:	b942      	cbnz	r2, 80112f0 <__swsetup_r+0xa4>
 80112de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80112e2:	d1c5      	bne.n	8011270 <__swsetup_r+0x24>
 80112e4:	bd38      	pop	{r3, r4, r5, pc}
 80112e6:	0799      	lsls	r1, r3, #30
 80112e8:	bf58      	it	pl
 80112ea:	6962      	ldrpl	r2, [r4, #20]
 80112ec:	60a2      	str	r2, [r4, #8]
 80112ee:	e7f4      	b.n	80112da <__swsetup_r+0x8e>
 80112f0:	2000      	movs	r0, #0
 80112f2:	e7f7      	b.n	80112e4 <__swsetup_r+0x98>
 80112f4:	200000b8 	.word	0x200000b8

080112f8 <_raise_r>:
 80112f8:	291f      	cmp	r1, #31
 80112fa:	b538      	push	{r3, r4, r5, lr}
 80112fc:	4605      	mov	r5, r0
 80112fe:	460c      	mov	r4, r1
 8011300:	d904      	bls.n	801130c <_raise_r+0x14>
 8011302:	2316      	movs	r3, #22
 8011304:	6003      	str	r3, [r0, #0]
 8011306:	f04f 30ff 	mov.w	r0, #4294967295
 801130a:	bd38      	pop	{r3, r4, r5, pc}
 801130c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801130e:	b112      	cbz	r2, 8011316 <_raise_r+0x1e>
 8011310:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011314:	b94b      	cbnz	r3, 801132a <_raise_r+0x32>
 8011316:	4628      	mov	r0, r5
 8011318:	f000 f830 	bl	801137c <_getpid_r>
 801131c:	4622      	mov	r2, r4
 801131e:	4601      	mov	r1, r0
 8011320:	4628      	mov	r0, r5
 8011322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011326:	f000 b817 	b.w	8011358 <_kill_r>
 801132a:	2b01      	cmp	r3, #1
 801132c:	d00a      	beq.n	8011344 <_raise_r+0x4c>
 801132e:	1c59      	adds	r1, r3, #1
 8011330:	d103      	bne.n	801133a <_raise_r+0x42>
 8011332:	2316      	movs	r3, #22
 8011334:	6003      	str	r3, [r0, #0]
 8011336:	2001      	movs	r0, #1
 8011338:	e7e7      	b.n	801130a <_raise_r+0x12>
 801133a:	2100      	movs	r1, #0
 801133c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011340:	4620      	mov	r0, r4
 8011342:	4798      	blx	r3
 8011344:	2000      	movs	r0, #0
 8011346:	e7e0      	b.n	801130a <_raise_r+0x12>

08011348 <raise>:
 8011348:	4b02      	ldr	r3, [pc, #8]	@ (8011354 <raise+0xc>)
 801134a:	4601      	mov	r1, r0
 801134c:	6818      	ldr	r0, [r3, #0]
 801134e:	f7ff bfd3 	b.w	80112f8 <_raise_r>
 8011352:	bf00      	nop
 8011354:	200000b8 	.word	0x200000b8

08011358 <_kill_r>:
 8011358:	b538      	push	{r3, r4, r5, lr}
 801135a:	4d07      	ldr	r5, [pc, #28]	@ (8011378 <_kill_r+0x20>)
 801135c:	2300      	movs	r3, #0
 801135e:	4604      	mov	r4, r0
 8011360:	4608      	mov	r0, r1
 8011362:	4611      	mov	r1, r2
 8011364:	602b      	str	r3, [r5, #0]
 8011366:	f7ef fb97 	bl	8000a98 <_kill>
 801136a:	1c43      	adds	r3, r0, #1
 801136c:	d102      	bne.n	8011374 <_kill_r+0x1c>
 801136e:	682b      	ldr	r3, [r5, #0]
 8011370:	b103      	cbz	r3, 8011374 <_kill_r+0x1c>
 8011372:	6023      	str	r3, [r4, #0]
 8011374:	bd38      	pop	{r3, r4, r5, pc}
 8011376:	bf00      	nop
 8011378:	20008644 	.word	0x20008644

0801137c <_getpid_r>:
 801137c:	f7ef bb84 	b.w	8000a88 <_getpid>

08011380 <_sbrk_r>:
 8011380:	b538      	push	{r3, r4, r5, lr}
 8011382:	4d06      	ldr	r5, [pc, #24]	@ (801139c <_sbrk_r+0x1c>)
 8011384:	2300      	movs	r3, #0
 8011386:	4604      	mov	r4, r0
 8011388:	4608      	mov	r0, r1
 801138a:	602b      	str	r3, [r5, #0]
 801138c:	f7ef fc0e 	bl	8000bac <_sbrk>
 8011390:	1c43      	adds	r3, r0, #1
 8011392:	d102      	bne.n	801139a <_sbrk_r+0x1a>
 8011394:	682b      	ldr	r3, [r5, #0]
 8011396:	b103      	cbz	r3, 801139a <_sbrk_r+0x1a>
 8011398:	6023      	str	r3, [r4, #0]
 801139a:	bd38      	pop	{r3, r4, r5, pc}
 801139c:	20008644 	.word	0x20008644

080113a0 <_realloc_r>:
 80113a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113a4:	4607      	mov	r7, r0
 80113a6:	4614      	mov	r4, r2
 80113a8:	460d      	mov	r5, r1
 80113aa:	b921      	cbnz	r1, 80113b6 <_realloc_r+0x16>
 80113ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80113b0:	4611      	mov	r1, r2
 80113b2:	f7ff b9af 	b.w	8010714 <_malloc_r>
 80113b6:	b92a      	cbnz	r2, 80113c4 <_realloc_r+0x24>
 80113b8:	f7ff f938 	bl	801062c <_free_r>
 80113bc:	4625      	mov	r5, r4
 80113be:	4628      	mov	r0, r5
 80113c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113c4:	f000 f89e 	bl	8011504 <_malloc_usable_size_r>
 80113c8:	4284      	cmp	r4, r0
 80113ca:	4606      	mov	r6, r0
 80113cc:	d802      	bhi.n	80113d4 <_realloc_r+0x34>
 80113ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80113d2:	d8f4      	bhi.n	80113be <_realloc_r+0x1e>
 80113d4:	4621      	mov	r1, r4
 80113d6:	4638      	mov	r0, r7
 80113d8:	f7ff f99c 	bl	8010714 <_malloc_r>
 80113dc:	4680      	mov	r8, r0
 80113de:	b908      	cbnz	r0, 80113e4 <_realloc_r+0x44>
 80113e0:	4645      	mov	r5, r8
 80113e2:	e7ec      	b.n	80113be <_realloc_r+0x1e>
 80113e4:	42b4      	cmp	r4, r6
 80113e6:	4622      	mov	r2, r4
 80113e8:	4629      	mov	r1, r5
 80113ea:	bf28      	it	cs
 80113ec:	4632      	movcs	r2, r6
 80113ee:	f7ff f908 	bl	8010602 <memcpy>
 80113f2:	4629      	mov	r1, r5
 80113f4:	4638      	mov	r0, r7
 80113f6:	f7ff f919 	bl	801062c <_free_r>
 80113fa:	e7f1      	b.n	80113e0 <_realloc_r+0x40>

080113fc <__swhatbuf_r>:
 80113fc:	b570      	push	{r4, r5, r6, lr}
 80113fe:	460c      	mov	r4, r1
 8011400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011404:	2900      	cmp	r1, #0
 8011406:	b096      	sub	sp, #88	@ 0x58
 8011408:	4615      	mov	r5, r2
 801140a:	461e      	mov	r6, r3
 801140c:	da0d      	bge.n	801142a <__swhatbuf_r+0x2e>
 801140e:	89a3      	ldrh	r3, [r4, #12]
 8011410:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011414:	f04f 0100 	mov.w	r1, #0
 8011418:	bf14      	ite	ne
 801141a:	2340      	movne	r3, #64	@ 0x40
 801141c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011420:	2000      	movs	r0, #0
 8011422:	6031      	str	r1, [r6, #0]
 8011424:	602b      	str	r3, [r5, #0]
 8011426:	b016      	add	sp, #88	@ 0x58
 8011428:	bd70      	pop	{r4, r5, r6, pc}
 801142a:	466a      	mov	r2, sp
 801142c:	f000 f848 	bl	80114c0 <_fstat_r>
 8011430:	2800      	cmp	r0, #0
 8011432:	dbec      	blt.n	801140e <__swhatbuf_r+0x12>
 8011434:	9901      	ldr	r1, [sp, #4]
 8011436:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801143a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801143e:	4259      	negs	r1, r3
 8011440:	4159      	adcs	r1, r3
 8011442:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011446:	e7eb      	b.n	8011420 <__swhatbuf_r+0x24>

08011448 <__smakebuf_r>:
 8011448:	898b      	ldrh	r3, [r1, #12]
 801144a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801144c:	079d      	lsls	r5, r3, #30
 801144e:	4606      	mov	r6, r0
 8011450:	460c      	mov	r4, r1
 8011452:	d507      	bpl.n	8011464 <__smakebuf_r+0x1c>
 8011454:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011458:	6023      	str	r3, [r4, #0]
 801145a:	6123      	str	r3, [r4, #16]
 801145c:	2301      	movs	r3, #1
 801145e:	6163      	str	r3, [r4, #20]
 8011460:	b003      	add	sp, #12
 8011462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011464:	ab01      	add	r3, sp, #4
 8011466:	466a      	mov	r2, sp
 8011468:	f7ff ffc8 	bl	80113fc <__swhatbuf_r>
 801146c:	9f00      	ldr	r7, [sp, #0]
 801146e:	4605      	mov	r5, r0
 8011470:	4639      	mov	r1, r7
 8011472:	4630      	mov	r0, r6
 8011474:	f7ff f94e 	bl	8010714 <_malloc_r>
 8011478:	b948      	cbnz	r0, 801148e <__smakebuf_r+0x46>
 801147a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801147e:	059a      	lsls	r2, r3, #22
 8011480:	d4ee      	bmi.n	8011460 <__smakebuf_r+0x18>
 8011482:	f023 0303 	bic.w	r3, r3, #3
 8011486:	f043 0302 	orr.w	r3, r3, #2
 801148a:	81a3      	strh	r3, [r4, #12]
 801148c:	e7e2      	b.n	8011454 <__smakebuf_r+0xc>
 801148e:	89a3      	ldrh	r3, [r4, #12]
 8011490:	6020      	str	r0, [r4, #0]
 8011492:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011496:	81a3      	strh	r3, [r4, #12]
 8011498:	9b01      	ldr	r3, [sp, #4]
 801149a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801149e:	b15b      	cbz	r3, 80114b8 <__smakebuf_r+0x70>
 80114a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80114a4:	4630      	mov	r0, r6
 80114a6:	f000 f81d 	bl	80114e4 <_isatty_r>
 80114aa:	b128      	cbz	r0, 80114b8 <__smakebuf_r+0x70>
 80114ac:	89a3      	ldrh	r3, [r4, #12]
 80114ae:	f023 0303 	bic.w	r3, r3, #3
 80114b2:	f043 0301 	orr.w	r3, r3, #1
 80114b6:	81a3      	strh	r3, [r4, #12]
 80114b8:	89a3      	ldrh	r3, [r4, #12]
 80114ba:	431d      	orrs	r5, r3
 80114bc:	81a5      	strh	r5, [r4, #12]
 80114be:	e7cf      	b.n	8011460 <__smakebuf_r+0x18>

080114c0 <_fstat_r>:
 80114c0:	b538      	push	{r3, r4, r5, lr}
 80114c2:	4d07      	ldr	r5, [pc, #28]	@ (80114e0 <_fstat_r+0x20>)
 80114c4:	2300      	movs	r3, #0
 80114c6:	4604      	mov	r4, r0
 80114c8:	4608      	mov	r0, r1
 80114ca:	4611      	mov	r1, r2
 80114cc:	602b      	str	r3, [r5, #0]
 80114ce:	f7ef fb45 	bl	8000b5c <_fstat>
 80114d2:	1c43      	adds	r3, r0, #1
 80114d4:	d102      	bne.n	80114dc <_fstat_r+0x1c>
 80114d6:	682b      	ldr	r3, [r5, #0]
 80114d8:	b103      	cbz	r3, 80114dc <_fstat_r+0x1c>
 80114da:	6023      	str	r3, [r4, #0]
 80114dc:	bd38      	pop	{r3, r4, r5, pc}
 80114de:	bf00      	nop
 80114e0:	20008644 	.word	0x20008644

080114e4 <_isatty_r>:
 80114e4:	b538      	push	{r3, r4, r5, lr}
 80114e6:	4d06      	ldr	r5, [pc, #24]	@ (8011500 <_isatty_r+0x1c>)
 80114e8:	2300      	movs	r3, #0
 80114ea:	4604      	mov	r4, r0
 80114ec:	4608      	mov	r0, r1
 80114ee:	602b      	str	r3, [r5, #0]
 80114f0:	f7ef fb44 	bl	8000b7c <_isatty>
 80114f4:	1c43      	adds	r3, r0, #1
 80114f6:	d102      	bne.n	80114fe <_isatty_r+0x1a>
 80114f8:	682b      	ldr	r3, [r5, #0]
 80114fa:	b103      	cbz	r3, 80114fe <_isatty_r+0x1a>
 80114fc:	6023      	str	r3, [r4, #0]
 80114fe:	bd38      	pop	{r3, r4, r5, pc}
 8011500:	20008644 	.word	0x20008644

08011504 <_malloc_usable_size_r>:
 8011504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011508:	1f18      	subs	r0, r3, #4
 801150a:	2b00      	cmp	r3, #0
 801150c:	bfbc      	itt	lt
 801150e:	580b      	ldrlt	r3, [r1, r0]
 8011510:	18c0      	addlt	r0, r0, r3
 8011512:	4770      	bx	lr

08011514 <_init>:
 8011514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011516:	bf00      	nop
 8011518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801151a:	bc08      	pop	{r3}
 801151c:	469e      	mov	lr, r3
 801151e:	4770      	bx	lr

08011520 <_fini>:
 8011520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011522:	bf00      	nop
 8011524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011526:	bc08      	pop	{r3}
 8011528:	469e      	mov	lr, r3
 801152a:	4770      	bx	lr

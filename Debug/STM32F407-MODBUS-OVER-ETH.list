
STM32F407-MODBUS-OVER-ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010344  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e38  080104d4  080104d4  000114d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801330c  0801330c  00015088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801330c  0801330c  0001430c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013314  08013314  00015088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013314  08013314  00014314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013318  08013318  00014318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0801331c  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00015088  2**0
                  CONTENTS
 10 .bss          0000850c  20000088  20000088  00015088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008594  20008594  00015088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00015088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bb3c  00000000  00000000  000150b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f27  00000000  00000000  00030bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c8  00000000  00000000  00035b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fdb  00000000  00000000  00036ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ca35  00000000  00000000  00037ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020da2  00000000  00000000  000648f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db5ca  00000000  00000000  0008569a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00160c64  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a1c  00000000  00000000  00160ca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  001666c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080104bc 	.word	0x080104bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	080104bc 	.word	0x080104bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <dump_tcp_buffers>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void dump_tcp_buffers(struct tcp_pcb *tpcb)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08c      	sub	sp, #48	@ 0x30
 80005b0:	af02      	add	r7, sp, #8
 80005b2:	6078      	str	r0, [r7, #4]
    if (!tpcb) {
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d10e      	bne.n	80005d8 <dump_tcp_buffers+0x2c>
        DEBUG_PRINTF("dump_tcp_buffers: NULL pcb\r\n");
 80005ba:	4a4d      	ldr	r2, [pc, #308]	@ (80006f0 <dump_tcp_buffers+0x144>)
 80005bc:	2140      	movs	r1, #64	@ 0x40
 80005be:	484d      	ldr	r0, [pc, #308]	@ (80006f4 <dump_tcp_buffers+0x148>)
 80005c0:	f00e fd96 	bl	800f0f0 <sniprintf>
 80005c4:	60b8      	str	r0, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	b29a      	uxth	r2, r3
 80005ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ce:	4949      	ldr	r1, [pc, #292]	@ (80006f4 <dump_tcp_buffers+0x148>)
 80005d0:	4849      	ldr	r0, [pc, #292]	@ (80006f8 <dump_tcp_buffers+0x14c>)
 80005d2:	f003 f935 	bl	8003840 <HAL_UART_Transmit>
        return;
 80005d6:	e087      	b.n	80006e8 <dump_tcp_buffers+0x13c>
    }

    struct pbuf *q;

    DEBUG_PRINTF("---- TCP BUFFER DUMP ----\r\n");
 80005d8:	4a48      	ldr	r2, [pc, #288]	@ (80006fc <dump_tcp_buffers+0x150>)
 80005da:	2140      	movs	r1, #64	@ 0x40
 80005dc:	4845      	ldr	r0, [pc, #276]	@ (80006f4 <dump_tcp_buffers+0x148>)
 80005de:	f00e fd87 	bl	800f0f0 <sniprintf>
 80005e2:	6238      	str	r0, [r7, #32]
 80005e4:	6a3b      	ldr	r3, [r7, #32]
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ec:	4941      	ldr	r1, [pc, #260]	@ (80006f4 <dump_tcp_buffers+0x148>)
 80005ee:	4842      	ldr	r0, [pc, #264]	@ (80006f8 <dump_tcp_buffers+0x14c>)
 80005f0:	f003 f926 	bl	8003840 <HAL_UART_Transmit>

    DEBUG_PRINTF("unacked:\r\n");
 80005f4:	4a42      	ldr	r2, [pc, #264]	@ (8000700 <dump_tcp_buffers+0x154>)
 80005f6:	2140      	movs	r1, #64	@ 0x40
 80005f8:	483e      	ldr	r0, [pc, #248]	@ (80006f4 <dump_tcp_buffers+0x148>)
 80005fa:	f00e fd79 	bl	800f0f0 <sniprintf>
 80005fe:	61f8      	str	r0, [r7, #28]
 8000600:	69fb      	ldr	r3, [r7, #28]
 8000602:	b29a      	uxth	r2, r3
 8000604:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000608:	493a      	ldr	r1, [pc, #232]	@ (80006f4 <dump_tcp_buffers+0x148>)
 800060a:	483b      	ldr	r0, [pc, #236]	@ (80006f8 <dump_tcp_buffers+0x14c>)
 800060c:	f003 f918 	bl	8003840 <HAL_UART_Transmit>
    for (q = tpcb->unacked; q != NULL; q = q->next) {
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000614:	627b      	str	r3, [r7, #36]	@ 0x24
 8000616:	e020      	b.n	800065a <dump_tcp_buffers+0xae>
        DEBUG_PRINTF("  len=%d tot_len=%d\r\n", q->len, q->tot_len);
 8000618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800061a:	895b      	ldrh	r3, [r3, #10]
 800061c:	461a      	mov	r2, r3
 800061e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000620:	891b      	ldrh	r3, [r3, #8]
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	4613      	mov	r3, r2
 8000626:	4a37      	ldr	r2, [pc, #220]	@ (8000704 <dump_tcp_buffers+0x158>)
 8000628:	2140      	movs	r1, #64	@ 0x40
 800062a:	4832      	ldr	r0, [pc, #200]	@ (80006f4 <dump_tcp_buffers+0x148>)
 800062c:	f00e fd60 	bl	800f0f0 <sniprintf>
 8000630:	60f8      	str	r0, [r7, #12]
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	b29a      	uxth	r2, r3
 8000636:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800063a:	492e      	ldr	r1, [pc, #184]	@ (80006f4 <dump_tcp_buffers+0x148>)
 800063c:	482e      	ldr	r0, [pc, #184]	@ (80006f8 <dump_tcp_buffers+0x14c>)
 800063e:	f003 f8ff 	bl	8003840 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart4, q->payload, q->len, 1000);
 8000642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000644:	6859      	ldr	r1, [r3, #4]
 8000646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000648:	895a      	ldrh	r2, [r3, #10]
 800064a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800064e:	482a      	ldr	r0, [pc, #168]	@ (80006f8 <dump_tcp_buffers+0x14c>)
 8000650:	f003 f8f6 	bl	8003840 <HAL_UART_Transmit>
    for (q = tpcb->unacked; q != NULL; q = q->next) {
 8000654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	627b      	str	r3, [r7, #36]	@ 0x24
 800065a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800065c:	2b00      	cmp	r3, #0
 800065e:	d1db      	bne.n	8000618 <dump_tcp_buffers+0x6c>
    }

    DEBUG_PRINTF("\r\nunsent:\r\n");
 8000660:	4a29      	ldr	r2, [pc, #164]	@ (8000708 <dump_tcp_buffers+0x15c>)
 8000662:	2140      	movs	r1, #64	@ 0x40
 8000664:	4823      	ldr	r0, [pc, #140]	@ (80006f4 <dump_tcp_buffers+0x148>)
 8000666:	f00e fd43 	bl	800f0f0 <sniprintf>
 800066a:	61b8      	str	r0, [r7, #24]
 800066c:	69bb      	ldr	r3, [r7, #24]
 800066e:	b29a      	uxth	r2, r3
 8000670:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000674:	491f      	ldr	r1, [pc, #124]	@ (80006f4 <dump_tcp_buffers+0x148>)
 8000676:	4820      	ldr	r0, [pc, #128]	@ (80006f8 <dump_tcp_buffers+0x14c>)
 8000678:	f003 f8e2 	bl	8003840 <HAL_UART_Transmit>
    for (q = tpcb->unsent; q != NULL; q = q->next) {
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000680:	627b      	str	r3, [r7, #36]	@ 0x24
 8000682:	e020      	b.n	80006c6 <dump_tcp_buffers+0x11a>
        DEBUG_PRINTF("  len=%d tot_len=%d\r\n", q->len, q->tot_len);
 8000684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000686:	895b      	ldrh	r3, [r3, #10]
 8000688:	461a      	mov	r2, r3
 800068a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800068c:	891b      	ldrh	r3, [r3, #8]
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	4613      	mov	r3, r2
 8000692:	4a1c      	ldr	r2, [pc, #112]	@ (8000704 <dump_tcp_buffers+0x158>)
 8000694:	2140      	movs	r1, #64	@ 0x40
 8000696:	4817      	ldr	r0, [pc, #92]	@ (80006f4 <dump_tcp_buffers+0x148>)
 8000698:	f00e fd2a 	bl	800f0f0 <sniprintf>
 800069c:	6138      	str	r0, [r7, #16]
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006a6:	4913      	ldr	r1, [pc, #76]	@ (80006f4 <dump_tcp_buffers+0x148>)
 80006a8:	4813      	ldr	r0, [pc, #76]	@ (80006f8 <dump_tcp_buffers+0x14c>)
 80006aa:	f003 f8c9 	bl	8003840 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart4, q->payload, q->len, 1000);
 80006ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006b0:	6859      	ldr	r1, [r3, #4]
 80006b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006b4:	895a      	ldrh	r2, [r3, #10]
 80006b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ba:	480f      	ldr	r0, [pc, #60]	@ (80006f8 <dump_tcp_buffers+0x14c>)
 80006bc:	f003 f8c0 	bl	8003840 <HAL_UART_Transmit>
    for (q = tpcb->unsent; q != NULL; q = q->next) {
 80006c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80006c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d1db      	bne.n	8000684 <dump_tcp_buffers+0xd8>
    }

    DEBUG_PRINTF("\r\n---- END DUMP ----\r\n");
 80006cc:	4a0f      	ldr	r2, [pc, #60]	@ (800070c <dump_tcp_buffers+0x160>)
 80006ce:	2140      	movs	r1, #64	@ 0x40
 80006d0:	4808      	ldr	r0, [pc, #32]	@ (80006f4 <dump_tcp_buffers+0x148>)
 80006d2:	f00e fd0d 	bl	800f0f0 <sniprintf>
 80006d6:	6178      	str	r0, [r7, #20]
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	b29a      	uxth	r2, r3
 80006dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006e0:	4904      	ldr	r1, [pc, #16]	@ (80006f4 <dump_tcp_buffers+0x148>)
 80006e2:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <dump_tcp_buffers+0x14c>)
 80006e4:	f003 f8ac 	bl	8003840 <HAL_UART_Transmit>
}
 80006e8:	3728      	adds	r7, #40	@ 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	080104d4 	.word	0x080104d4
 80006f4:	200000fc 	.word	0x200000fc
 80006f8:	200000a4 	.word	0x200000a4
 80006fc:	080104f4 	.word	0x080104f4
 8000700:	08010510 	.word	0x08010510
 8000704:	0801051c 	.word	0x0801051c
 8000708:	08010534 	.word	0x08010534
 800070c:	08010540 	.word	0x08010540

08000710 <tcp_sent_callback>:

static err_t tcp_sent_callback(void *arg, struct tcp_pcb *tpcb, u16_t len) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	4613      	mov	r3, r2
 800071c:	80fb      	strh	r3, [r7, #6]
    DEBUG_PRINTF("tcp_sent: acked %u bytes\r\n", (unsigned)len);
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	4a09      	ldr	r2, [pc, #36]	@ (8000748 <tcp_sent_callback+0x38>)
 8000722:	2140      	movs	r1, #64	@ 0x40
 8000724:	4809      	ldr	r0, [pc, #36]	@ (800074c <tcp_sent_callback+0x3c>)
 8000726:	f00e fce3 	bl	800f0f0 <sniprintf>
 800072a:	6178      	str	r0, [r7, #20]
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	b29a      	uxth	r2, r3
 8000730:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000734:	4905      	ldr	r1, [pc, #20]	@ (800074c <tcp_sent_callback+0x3c>)
 8000736:	4806      	ldr	r0, [pc, #24]	@ (8000750 <tcp_sent_callback+0x40>)
 8000738:	f003 f882 	bl	8003840 <HAL_UART_Transmit>
    return ERR_OK;
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	3718      	adds	r7, #24
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	08010558 	.word	0x08010558
 800074c:	200000fc 	.word	0x200000fc
 8000750:	200000a4 	.word	0x200000a4

08000754 <tcp_connected>:


static err_t tcp_connected(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	4613      	mov	r3, r2
 8000760:	71fb      	strb	r3, [r7, #7]
    if (err == ERR_OK) {
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d117      	bne.n	800079a <tcp_connected+0x46>
        hello_tpcb = tpcb;
 800076a:	4a18      	ldr	r2, [pc, #96]	@ (80007cc <tcp_connected+0x78>)
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	6013      	str	r3, [r2, #0]
        tcp_sent(tpcb, tcp_sent_callback);   // register callback
 8000770:	4917      	ldr	r1, [pc, #92]	@ (80007d0 <tcp_connected+0x7c>)
 8000772:	68b8      	ldr	r0, [r7, #8]
 8000774:	f007 fa42 	bl	8007bfc <tcp_sent>
        DEBUG_PRINTF("tcp_connected: OK (err=%d)\r\n", err);
 8000778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077c:	4a15      	ldr	r2, [pc, #84]	@ (80007d4 <tcp_connected+0x80>)
 800077e:	2140      	movs	r1, #64	@ 0x40
 8000780:	4815      	ldr	r0, [pc, #84]	@ (80007d8 <tcp_connected+0x84>)
 8000782:	f00e fcb5 	bl	800f0f0 <sniprintf>
 8000786:	6138      	str	r0, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
 800078a:	b29a      	uxth	r2, r3
 800078c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000790:	4911      	ldr	r1, [pc, #68]	@ (80007d8 <tcp_connected+0x84>)
 8000792:	4812      	ldr	r0, [pc, #72]	@ (80007dc <tcp_connected+0x88>)
 8000794:	f003 f854 	bl	8003840 <HAL_UART_Transmit>
 8000798:	e012      	b.n	80007c0 <tcp_connected+0x6c>
    } else {
        DEBUG_PRINTF("tcp_connected: FAILED (err=%d)\r\n", err);
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	4a10      	ldr	r2, [pc, #64]	@ (80007e0 <tcp_connected+0x8c>)
 80007a0:	2140      	movs	r1, #64	@ 0x40
 80007a2:	480d      	ldr	r0, [pc, #52]	@ (80007d8 <tcp_connected+0x84>)
 80007a4:	f00e fca4 	bl	800f0f0 <sniprintf>
 80007a8:	6178      	str	r0, [r7, #20]
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007b2:	4909      	ldr	r1, [pc, #36]	@ (80007d8 <tcp_connected+0x84>)
 80007b4:	4809      	ldr	r0, [pc, #36]	@ (80007dc <tcp_connected+0x88>)
 80007b6:	f003 f843 	bl	8003840 <HAL_UART_Transmit>
        hello_tpcb = NULL;
 80007ba:	4b04      	ldr	r3, [pc, #16]	@ (80007cc <tcp_connected+0x78>)
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
    }
    return err;
 80007c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3718      	adds	r7, #24
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200000ec 	.word	0x200000ec
 80007d0:	08000711 	.word	0x08000711
 80007d4:	08010574 	.word	0x08010574
 80007d8:	200000fc 	.word	0x200000fc
 80007dc:	200000a4 	.word	0x200000a4
 80007e0:	08010594 	.word	0x08010594

080007e4 <start_tcp_connection>:


void start_tcp_connection(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af02      	add	r7, sp, #8
    hello_tpcb = tcp_new();
 80007ea:	f007 f9ff 	bl	8007bec <tcp_new>
 80007ee:	4603      	mov	r3, r0
 80007f0:	4a20      	ldr	r2, [pc, #128]	@ (8000874 <start_tcp_connection+0x90>)
 80007f2:	6013      	str	r3, [r2, #0]
    if (hello_tpcb != NULL) {
 80007f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000874 <start_tcp_connection+0x90>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d026      	beq.n	800084a <start_tcp_connection+0x66>
        IP4_ADDR(&dest_ip, 192,168,1,100); // adjust to your PC IP
 80007fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000878 <start_tcp_connection+0x94>)
 80007fe:	4a1f      	ldr	r2, [pc, #124]	@ (800087c <start_tcp_connection+0x98>)
 8000800:	601a      	str	r2, [r3, #0]
        DEBUG_PRINTF("start_tcp_connection: trying %s:%d\r\n", ipaddr_ntoa(&dest_ip), 502);
 8000802:	481d      	ldr	r0, [pc, #116]	@ (8000878 <start_tcp_connection+0x94>)
 8000804:	f00d fcd0 	bl	800e1a8 <ip4addr_ntoa>
 8000808:	4603      	mov	r3, r0
 800080a:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 800080e:	9200      	str	r2, [sp, #0]
 8000810:	4a1b      	ldr	r2, [pc, #108]	@ (8000880 <start_tcp_connection+0x9c>)
 8000812:	2140      	movs	r1, #64	@ 0x40
 8000814:	481b      	ldr	r0, [pc, #108]	@ (8000884 <start_tcp_connection+0xa0>)
 8000816:	f00e fc6b 	bl	800f0f0 <sniprintf>
 800081a:	6038      	str	r0, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	b29a      	uxth	r2, r3
 8000820:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000824:	4917      	ldr	r1, [pc, #92]	@ (8000884 <start_tcp_connection+0xa0>)
 8000826:	4818      	ldr	r0, [pc, #96]	@ (8000888 <start_tcp_connection+0xa4>)
 8000828:	f003 f80a 	bl	8003840 <HAL_UART_Transmit>
        tcp_err(hello_tpcb, tcp_error_callback);
 800082c:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <start_tcp_connection+0x90>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4916      	ldr	r1, [pc, #88]	@ (800088c <start_tcp_connection+0xa8>)
 8000832:	4618      	mov	r0, r3
 8000834:	f007 fa04 	bl	8007c40 <tcp_err>
        tcp_connect(hello_tpcb, &dest_ip, 502, tcp_connected);
 8000838:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <start_tcp_connection+0x90>)
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <start_tcp_connection+0xac>)
 800083e:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 8000842:	490d      	ldr	r1, [pc, #52]	@ (8000878 <start_tcp_connection+0x94>)
 8000844:	f006 fa96 	bl	8006d74 <tcp_connect>
    } else {
        DEBUG_PRINTF("start_tcp_connection: tcp_new failed!\r\n");
        Error_Handler();
    }
}
 8000848:	e00f      	b.n	800086a <start_tcp_connection+0x86>
        DEBUG_PRINTF("start_tcp_connection: tcp_new failed!\r\n");
 800084a:	4a12      	ldr	r2, [pc, #72]	@ (8000894 <start_tcp_connection+0xb0>)
 800084c:	2140      	movs	r1, #64	@ 0x40
 800084e:	480d      	ldr	r0, [pc, #52]	@ (8000884 <start_tcp_connection+0xa0>)
 8000850:	f00e fc4e 	bl	800f0f0 <sniprintf>
 8000854:	6078      	str	r0, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	b29a      	uxth	r2, r3
 800085a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800085e:	4909      	ldr	r1, [pc, #36]	@ (8000884 <start_tcp_connection+0xa0>)
 8000860:	4809      	ldr	r0, [pc, #36]	@ (8000888 <start_tcp_connection+0xa4>)
 8000862:	f002 ffed 	bl	8003840 <HAL_UART_Transmit>
        Error_Handler();
 8000866:	f000 faa1 	bl	8000dac <Error_Handler>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200000ec 	.word	0x200000ec
 8000878:	200000f0 	.word	0x200000f0
 800087c:	6401a8c0 	.word	0x6401a8c0
 8000880:	080105b8 	.word	0x080105b8
 8000884:	200000fc 	.word	0x200000fc
 8000888:	200000a4 	.word	0x200000a4
 800088c:	08000d09 	.word	0x08000d09
 8000890:	08000755 	.word	0x08000755
 8000894:	080105e0 	.word	0x080105e0

08000898 <send_hello_tcp>:

void send_hello_tcp(void)
{
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b08b      	sub	sp, #44	@ 0x2c
 800089c:	af02      	add	r7, sp, #8
    if (hello_tpcb == NULL) {
 800089e:	4b63      	ldr	r3, [pc, #396]	@ (8000a2c <send_hello_tcp+0x194>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d10e      	bne.n	80008c4 <send_hello_tcp+0x2c>
        DEBUG_PRINTF("send_hello_tcp: no active PCB\r\n");
 80008a6:	4a62      	ldr	r2, [pc, #392]	@ (8000a30 <send_hello_tcp+0x198>)
 80008a8:	2140      	movs	r1, #64	@ 0x40
 80008aa:	4862      	ldr	r0, [pc, #392]	@ (8000a34 <send_hello_tcp+0x19c>)
 80008ac:	f00e fc20 	bl	800f0f0 <sniprintf>
 80008b0:	6038      	str	r0, [r7, #0]
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ba:	495e      	ldr	r1, [pc, #376]	@ (8000a34 <send_hello_tcp+0x19c>)
 80008bc:	485e      	ldr	r0, [pc, #376]	@ (8000a38 <send_hello_tcp+0x1a0>)
 80008be:	f002 ffbf 	bl	8003840 <HAL_UART_Transmit>
        return;
 80008c2:	e0af      	b.n	8000a24 <send_hello_tcp+0x18c>
    }

    const char *msg = "Hello World from STM32F407\r\n";
 80008c4:	4b5d      	ldr	r3, [pc, #372]	@ (8000a3c <send_hello_tcp+0x1a4>)
 80008c6:	61fb      	str	r3, [r7, #28]
    u16_t msg_len = strlen(msg);
 80008c8:	69f8      	ldr	r0, [r7, #28]
 80008ca:	f7ff fc81 	bl	80001d0 <strlen>
 80008ce:	4603      	mov	r3, r0
 80008d0:	837b      	strh	r3, [r7, #26]

    if (tcp_sndbuf(hello_tpcb) < msg_len) {
 80008d2:	4b56      	ldr	r3, [pc, #344]	@ (8000a2c <send_hello_tcp+0x194>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80008da:	8b7a      	ldrh	r2, [r7, #26]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d916      	bls.n	800090e <send_hello_tcp+0x76>
        DEBUG_PRINTF("send_hello_tcp: not enough sndbuf (%d available, %d needed)\r\n",
 80008e0:	4b52      	ldr	r3, [pc, #328]	@ (8000a2c <send_hello_tcp+0x194>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80008e8:	461a      	mov	r2, r3
 80008ea:	8b7b      	ldrh	r3, [r7, #26]
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	4613      	mov	r3, r2
 80008f0:	4a53      	ldr	r2, [pc, #332]	@ (8000a40 <send_hello_tcp+0x1a8>)
 80008f2:	2140      	movs	r1, #64	@ 0x40
 80008f4:	484f      	ldr	r0, [pc, #316]	@ (8000a34 <send_hello_tcp+0x19c>)
 80008f6:	f00e fbfb 	bl	800f0f0 <sniprintf>
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	b29a      	uxth	r2, r3
 8000900:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000904:	494b      	ldr	r1, [pc, #300]	@ (8000a34 <send_hello_tcp+0x19c>)
 8000906:	484c      	ldr	r0, [pc, #304]	@ (8000a38 <send_hello_tcp+0x1a0>)
 8000908:	f002 ff9a 	bl	8003840 <HAL_UART_Transmit>
                     tcp_sndbuf(hello_tpcb), msg_len);
        return; // skip this cycle
 800090c:	e08a      	b.n	8000a24 <send_hello_tcp+0x18c>
    }

    err_t err = tcp_write(hello_tpcb, msg, strlen(msg), TCP_WRITE_FLAG_COPY);
 800090e:	4b47      	ldr	r3, [pc, #284]	@ (8000a2c <send_hello_tcp+0x194>)
 8000910:	681c      	ldr	r4, [r3, #0]
 8000912:	69f8      	ldr	r0, [r7, #28]
 8000914:	f7ff fc5c 	bl	80001d0 <strlen>
 8000918:	4603      	mov	r3, r0
 800091a:	b29a      	uxth	r2, r3
 800091c:	2301      	movs	r3, #1
 800091e:	69f9      	ldr	r1, [r7, #28]
 8000920:	4620      	mov	r0, r4
 8000922:	f00a f82b 	bl	800a97c <tcp_write>
 8000926:	4603      	mov	r3, r0
 8000928:	767b      	strb	r3, [r7, #25]

    if (err == ERR_OK) {
 800092a:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d11c      	bne.n	800096c <send_hello_tcp+0xd4>
        tcp_output(hello_tpcb);
 8000932:	4b3e      	ldr	r3, [pc, #248]	@ (8000a2c <send_hello_tcp+0x194>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4618      	mov	r0, r3
 8000938:	f00a fe0a 	bl	800b550 <tcp_output>
        DEBUG_PRINTF("send_hello_tcp: sent OK (%d bytes)\r\n", strlen(msg));
 800093c:	69f8      	ldr	r0, [r7, #28]
 800093e:	f7ff fc47 	bl	80001d0 <strlen>
 8000942:	4603      	mov	r3, r0
 8000944:	4a3f      	ldr	r2, [pc, #252]	@ (8000a44 <send_hello_tcp+0x1ac>)
 8000946:	2140      	movs	r1, #64	@ 0x40
 8000948:	483a      	ldr	r0, [pc, #232]	@ (8000a34 <send_hello_tcp+0x19c>)
 800094a:	f00e fbd1 	bl	800f0f0 <sniprintf>
 800094e:	60b8      	str	r0, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	b29a      	uxth	r2, r3
 8000954:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000958:	4936      	ldr	r1, [pc, #216]	@ (8000a34 <send_hello_tcp+0x19c>)
 800095a:	4837      	ldr	r0, [pc, #220]	@ (8000a38 <send_hello_tcp+0x1a0>)
 800095c:	f002 ff70 	bl	8003840 <HAL_UART_Transmit>
        HAL_GPIO_TogglePin(LED_PORT, LED_BLUE_PIN);
 8000960:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000964:	4838      	ldr	r0, [pc, #224]	@ (8000a48 <send_hello_tcp+0x1b0>)
 8000966:	f002 fa90 	bl	8002e8a <HAL_GPIO_TogglePin>
 800096a:	e05b      	b.n	8000a24 <send_hello_tcp+0x18c>
    }
    else if (err == ERR_MEM) {
 800096c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000970:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000974:	d113      	bne.n	800099e <send_hello_tcp+0x106>
        DEBUG_PRINTF("send_hello_tcp: ERR_MEM, flushing\r\n");
 8000976:	4a35      	ldr	r2, [pc, #212]	@ (8000a4c <send_hello_tcp+0x1b4>)
 8000978:	2140      	movs	r1, #64	@ 0x40
 800097a:	482e      	ldr	r0, [pc, #184]	@ (8000a34 <send_hello_tcp+0x19c>)
 800097c:	f00e fbb8 	bl	800f0f0 <sniprintf>
 8000980:	60f8      	str	r0, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	b29a      	uxth	r2, r3
 8000986:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800098a:	492a      	ldr	r1, [pc, #168]	@ (8000a34 <send_hello_tcp+0x19c>)
 800098c:	482a      	ldr	r0, [pc, #168]	@ (8000a38 <send_hello_tcp+0x1a0>)
 800098e:	f002 ff57 	bl	8003840 <HAL_UART_Transmit>
        tcp_output(hello_tpcb);  // try to flush
 8000992:	4b26      	ldr	r3, [pc, #152]	@ (8000a2c <send_hello_tcp+0x194>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4618      	mov	r0, r3
 8000998:	f00a fdda 	bl	800b550 <tcp_output>
 800099c:	e042      	b.n	8000a24 <send_hello_tcp+0x18c>
    }
    else if (err == ERR_ABRT || err == ERR_RST || err == ERR_CLSD) {
 800099e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80009a2:	f113 0f0d 	cmn.w	r3, #13
 80009a6:	d009      	beq.n	80009bc <send_hello_tcp+0x124>
 80009a8:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80009ac:	f113 0f0e 	cmn.w	r3, #14
 80009b0:	d004      	beq.n	80009bc <send_hello_tcp+0x124>
 80009b2:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80009b6:	f113 0f0f 	cmn.w	r3, #15
 80009ba:	d119      	bne.n	80009f0 <send_hello_tcp+0x158>
        DEBUG_PRINTF("send_hello_tcp: connection closed (err=%d)\r\n", err);
 80009bc:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80009c0:	4a23      	ldr	r2, [pc, #140]	@ (8000a50 <send_hello_tcp+0x1b8>)
 80009c2:	2140      	movs	r1, #64	@ 0x40
 80009c4:	481b      	ldr	r0, [pc, #108]	@ (8000a34 <send_hello_tcp+0x19c>)
 80009c6:	f00e fb93 	bl	800f0f0 <sniprintf>
 80009ca:	6138      	str	r0, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009d4:	4917      	ldr	r1, [pc, #92]	@ (8000a34 <send_hello_tcp+0x19c>)
 80009d6:	4818      	ldr	r0, [pc, #96]	@ (8000a38 <send_hello_tcp+0x1a0>)
 80009d8:	f002 ff32 	bl	8003840 <HAL_UART_Transmit>
        hello_tpcb = NULL;
 80009dc:	4b13      	ldr	r3, [pc, #76]	@ (8000a2c <send_hello_tcp+0x194>)
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin(LED_PORT, LED_RED_PIN, GPIO_PIN_SET);
 80009e2:	2201      	movs	r2, #1
 80009e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009e8:	4817      	ldr	r0, [pc, #92]	@ (8000a48 <send_hello_tcp+0x1b0>)
 80009ea:	f002 fa35 	bl	8002e58 <HAL_GPIO_WritePin>
 80009ee:	e019      	b.n	8000a24 <send_hello_tcp+0x18c>
    }
    else {
        DEBUG_PRINTF("send_hello_tcp: unexpected err=%d\r\n", err);
 80009f0:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80009f4:	4a17      	ldr	r2, [pc, #92]	@ (8000a54 <send_hello_tcp+0x1bc>)
 80009f6:	2140      	movs	r1, #64	@ 0x40
 80009f8:	480e      	ldr	r0, [pc, #56]	@ (8000a34 <send_hello_tcp+0x19c>)
 80009fa:	f00e fb79 	bl	800f0f0 <sniprintf>
 80009fe:	6178      	str	r0, [r7, #20]
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a08:	490a      	ldr	r1, [pc, #40]	@ (8000a34 <send_hello_tcp+0x19c>)
 8000a0a:	480b      	ldr	r0, [pc, #44]	@ (8000a38 <send_hello_tcp+0x1a0>)
 8000a0c:	f002 ff18 	bl	8003840 <HAL_UART_Transmit>
        dump_tcp_buffers(hello_tpcb);
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <send_hello_tcp+0x194>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fdc9 	bl	80005ac <dump_tcp_buffers>
        HAL_GPIO_TogglePin(LED_PORT, LED_ORANGE_PIN);
 8000a1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a1e:	480a      	ldr	r0, [pc, #40]	@ (8000a48 <send_hello_tcp+0x1b0>)
 8000a20:	f002 fa33 	bl	8002e8a <HAL_GPIO_TogglePin>
    }
}
 8000a24:	3724      	adds	r7, #36	@ 0x24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd90      	pop	{r4, r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200000ec 	.word	0x200000ec
 8000a30:	08010608 	.word	0x08010608
 8000a34:	200000fc 	.word	0x200000fc
 8000a38:	200000a4 	.word	0x200000a4
 8000a3c:	08010628 	.word	0x08010628
 8000a40:	08010648 	.word	0x08010648
 8000a44:	08010688 	.word	0x08010688
 8000a48:	40020c00 	.word	0x40020c00
 8000a4c:	080106b0 	.word	0x080106b0
 8000a50:	080106d4 	.word	0x080106d4
 8000a54:	08010704 	.word	0x08010704

08000a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t data = 65;
 8000a5e:	2341      	movs	r3, #65	@ 0x41
 8000a60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a62:	f000 fc65 	bl	8001330 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a66:	f000 f845 	bl	8000af4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6a:	f000 f8d5 	bl	8000c18 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000a6e:	f003 faa3 	bl	8003fb8 <MX_LWIP_Init>
  MX_UART4_Init();
 8000a72:	f000 f8a7 	bl	8000bc4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(LED_PORT, LED_ORANGE_PIN, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a7c:	4819      	ldr	r0, [pc, #100]	@ (8000ae4 <main+0x8c>)
 8000a7e:	f002 f9eb 	bl	8002e58 <HAL_GPIO_WritePin>

	start_tcp_connection();
 8000a82:	f7ff feaf 	bl	80007e4 <start_tcp_connection>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
	    MX_LWIP_Process();      // bring in Ethernet frames
 8000a86:	f003 fbd7 	bl	8004238 <MX_LWIP_Process>
	    sys_check_timeouts();   // let lwIP process TCP timers, ACKs, retransmits
 8000a8a:	f00b fddf 	bl	800c64c <sys_check_timeouts>

	    if (broadcastTCPFlag && hello_tpcb && HAL_GetTick() - lastSend >= 2000) {
 8000a8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ae8 <main+0x90>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d01a      	beq.n	8000acc <main+0x74>
 8000a96:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <main+0x94>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d016      	beq.n	8000acc <main+0x74>
 8000a9e:	f000 fcad 	bl	80013fc <HAL_GetTick>
 8000aa2:	4602      	mov	r2, r0
 8000aa4:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <main+0x98>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000aae:	d30d      	bcc.n	8000acc <main+0x74>
	        if (tcp_sndbuf(hello_tpcb) > 64) {  // at least 64 bytes free
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <main+0x94>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8000ab8:	2b40      	cmp	r3, #64	@ 0x40
 8000aba:	d911      	bls.n	8000ae0 <main+0x88>
	            send_hello_tcp();
 8000abc:	f7ff feec 	bl	8000898 <send_hello_tcp>
	            lastSend = HAL_GetTick();
 8000ac0:	f000 fc9c 	bl	80013fc <HAL_GetTick>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8000af0 <main+0x98>)
 8000ac8:	6013      	str	r3, [r2, #0]
	        if (tcp_sndbuf(hello_tpcb) > 64) {  // at least 64 bytes free
 8000aca:	e009      	b.n	8000ae0 <main+0x88>
	        }
	    }
	    else if (broadcastTCPFlag && !hello_tpcb) {
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <main+0x90>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d0d8      	beq.n	8000a86 <main+0x2e>
 8000ad4:	4b05      	ldr	r3, [pc, #20]	@ (8000aec <main+0x94>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d1d4      	bne.n	8000a86 <main+0x2e>
	        start_tcp_connection();
 8000adc:	f7ff fe82 	bl	80007e4 <start_tcp_connection>
	    MX_LWIP_Process();      // bring in Ethernet frames
 8000ae0:	e7d1      	b.n	8000a86 <main+0x2e>
 8000ae2:	bf00      	nop
 8000ae4:	40020c00 	.word	0x40020c00
 8000ae8:	200000f4 	.word	0x200000f4
 8000aec:	200000ec 	.word	0x200000ec
 8000af0:	200000f8 	.word	0x200000f8

08000af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b094      	sub	sp, #80	@ 0x50
 8000af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afa:	f107 0320 	add.w	r3, r7, #32
 8000afe:	2230      	movs	r2, #48	@ 0x30
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f00e fc66 	bl	800f3d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	4b27      	ldr	r3, [pc, #156]	@ (8000bbc <SystemClock_Config+0xc8>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b20:	4a26      	ldr	r2, [pc, #152]	@ (8000bbc <SystemClock_Config+0xc8>)
 8000b22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b28:	4b24      	ldr	r3, [pc, #144]	@ (8000bbc <SystemClock_Config+0xc8>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b34:	2300      	movs	r3, #0
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	4b21      	ldr	r3, [pc, #132]	@ (8000bc0 <SystemClock_Config+0xcc>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a20      	ldr	r2, [pc, #128]	@ (8000bc0 <SystemClock_Config+0xcc>)
 8000b3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b42:	6013      	str	r3, [r2, #0]
 8000b44:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc0 <SystemClock_Config+0xcc>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b50:	2302      	movs	r3, #2
 8000b52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b54:	2301      	movs	r3, #1
 8000b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b58:	2310      	movs	r3, #16
 8000b5a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b60:	2300      	movs	r3, #0
 8000b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b64:	2308      	movs	r3, #8
 8000b66:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000b68:	2340      	movs	r3, #64	@ 0x40
 8000b6a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b70:	2304      	movs	r3, #4
 8000b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b74:	f107 0320 	add.w	r3, r7, #32
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f002 f9b9 	bl	8002ef0 <HAL_RCC_OscConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b84:	f000 f912 	bl	8000dac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b88:	230f      	movs	r3, #15
 8000b8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000b90:	2380      	movs	r3, #128	@ 0x80
 8000b92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b9c:	f107 030c 	add.w	r3, r7, #12
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f002 fc1c 	bl	80033e0 <HAL_RCC_ClockConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000bae:	f000 f8fd 	bl	8000dac <Error_Handler>
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	3750      	adds	r7, #80	@ 0x50
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40007000 	.word	0x40007000

08000bc4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <MX_UART4_Init+0x4c>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	@ (8000c14 <MX_UART4_Init+0x50>)
 8000bcc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000bce:	4b10      	ldr	r3, [pc, #64]	@ (8000c10 <MX_UART4_Init+0x4c>)
 8000bd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bd4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <MX_UART4_Init+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <MX_UART4_Init+0x4c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000be2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <MX_UART4_Init+0x4c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000be8:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <MX_UART4_Init+0x4c>)
 8000bea:	220c      	movs	r2, #12
 8000bec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bee:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <MX_UART4_Init+0x4c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <MX_UART4_Init+0x4c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000bfa:	4805      	ldr	r0, [pc, #20]	@ (8000c10 <MX_UART4_Init+0x4c>)
 8000bfc:	f002 fdd0 	bl	80037a0 <HAL_UART_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000c06:	f000 f8d1 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200000a4 	.word	0x200000a4
 8000c14:	40004c00 	.word	0x40004c00

08000c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	@ 0x28
 8000c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	4b32      	ldr	r3, [pc, #200]	@ (8000cfc <MX_GPIO_Init+0xe4>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	4a31      	ldr	r2, [pc, #196]	@ (8000cfc <MX_GPIO_Init+0xe4>)
 8000c38:	f043 0304 	orr.w	r3, r3, #4
 8000c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3e:	4b2f      	ldr	r3, [pc, #188]	@ (8000cfc <MX_GPIO_Init+0xe4>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	f003 0304 	and.w	r3, r3, #4
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000cfc <MX_GPIO_Init+0xe4>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	4a2a      	ldr	r2, [pc, #168]	@ (8000cfc <MX_GPIO_Init+0xe4>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5a:	4b28      	ldr	r3, [pc, #160]	@ (8000cfc <MX_GPIO_Init+0xe4>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	4b24      	ldr	r3, [pc, #144]	@ (8000cfc <MX_GPIO_Init+0xe4>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	4a23      	ldr	r2, [pc, #140]	@ (8000cfc <MX_GPIO_Init+0xe4>)
 8000c70:	f043 0302 	orr.w	r3, r3, #2
 8000c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c76:	4b21      	ldr	r3, [pc, #132]	@ (8000cfc <MX_GPIO_Init+0xe4>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	4b1d      	ldr	r3, [pc, #116]	@ (8000cfc <MX_GPIO_Init+0xe4>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cfc <MX_GPIO_Init+0xe4>)
 8000c8c:	f043 0308 	orr.w	r3, r3, #8
 8000c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c92:	4b1a      	ldr	r3, [pc, #104]	@ (8000cfc <MX_GPIO_Init+0xe4>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	f003 0308 	and.w	r3, r3, #8
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000ca4:	4816      	ldr	r0, [pc, #88]	@ (8000d00 <MX_GPIO_Init+0xe8>)
 8000ca6:	f002 f8d7 	bl	8002e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000caa:	2301      	movs	r3, #1
 8000cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4811      	ldr	r0, [pc, #68]	@ (8000d04 <MX_GPIO_Init+0xec>)
 8000cc0:	f001 ff2e 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000cc4:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4808      	ldr	r0, [pc, #32]	@ (8000d00 <MX_GPIO_Init+0xe8>)
 8000cde:	f001 ff1f 	bl	8002b20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2006      	movs	r0, #6
 8000ce8:	f000 fc93 	bl	8001612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000cec:	2006      	movs	r0, #6
 8000cee:	f000 fcac 	bl	800164a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000cf2:	bf00      	nop
 8000cf4:	3728      	adds	r7, #40	@ 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020c00 	.word	0x40020c00
 8000d04:	40020000 	.word	0x40020000

08000d08 <tcp_error_callback>:

/* USER CODE BEGIN 4 */
static void tcp_error_callback(void *arg, err_t err)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	70fb      	strb	r3, [r7, #3]
    DEBUG_PRINTF("tcp_error_callback: err=%d\r\n", err);
 8000d14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d18:	4a0d      	ldr	r2, [pc, #52]	@ (8000d50 <tcp_error_callback+0x48>)
 8000d1a:	2140      	movs	r1, #64	@ 0x40
 8000d1c:	480d      	ldr	r0, [pc, #52]	@ (8000d54 <tcp_error_callback+0x4c>)
 8000d1e:	f00e f9e7 	bl	800f0f0 <sniprintf>
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d2c:	4909      	ldr	r1, [pc, #36]	@ (8000d54 <tcp_error_callback+0x4c>)
 8000d2e:	480a      	ldr	r0, [pc, #40]	@ (8000d58 <tcp_error_callback+0x50>)
 8000d30:	f002 fd86 	bl	8003840 <HAL_UART_Transmit>
    hello_tpcb = NULL; // connection lost
 8000d34:	4b09      	ldr	r3, [pc, #36]	@ (8000d5c <tcp_error_callback+0x54>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(LED_PORT, LED_RED_PIN, GPIO_PIN_SET);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d40:	4807      	ldr	r0, [pc, #28]	@ (8000d60 <tcp_error_callback+0x58>)
 8000d42:	f002 f889 	bl	8002e58 <HAL_GPIO_WritePin>
}
 8000d46:	bf00      	nop
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	08010728 	.word	0x08010728
 8000d54:	200000fc 	.word	0x200000fc
 8000d58:	200000a4 	.word	0x200000a4
 8000d5c:	200000ec 	.word	0x200000ec
 8000d60:	40020c00 	.word	0x40020c00

08000d64 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	80fb      	strh	r3, [r7, #6]
	static uint32_t lastPress = 0;

	if (GPIO_Pin == GPIO_PIN_0) {
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d113      	bne.n	8000d9c <HAL_GPIO_EXTI_Callback+0x38>
		uint32_t now = HAL_GetTick();
 8000d74:	f000 fb42 	bl	80013fc <HAL_GetTick>
 8000d78:	60f8      	str	r0, [r7, #12]
		if (now - lastPress > 200) {
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000da4 <HAL_GPIO_EXTI_Callback+0x40>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	2bc8      	cmp	r3, #200	@ 0xc8
 8000d84:	d90a      	bls.n	8000d9c <HAL_GPIO_EXTI_Callback+0x38>
			broadcastTCPFlag ^= 1;    // toggle flag
 8000d86:	4b08      	ldr	r3, [pc, #32]	@ (8000da8 <HAL_GPIO_EXTI_Callback+0x44>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f083 0301 	eor.w	r3, r3, #1
 8000d8e:	4a06      	ldr	r2, [pc, #24]	@ (8000da8 <HAL_GPIO_EXTI_Callback+0x44>)
 8000d90:	6013      	str	r3, [r2, #0]
			if (broadcastTCPFlag) {
 8000d92:	4b05      	ldr	r3, [pc, #20]	@ (8000da8 <HAL_GPIO_EXTI_Callback+0x44>)
 8000d94:	681b      	ldr	r3, [r3, #0]
			//	HAL_GPIO_WritePin(LED_PORT, LED_ORANGE_PIN, GPIO_PIN_SET); // orange = ON
			} else {
			//	HAL_GPIO_WritePin(LED_PORT, LED_ORANGE_PIN, GPIO_PIN_RESET); // off
			}
			lastPress = now;
 8000d96:	4a03      	ldr	r2, [pc, #12]	@ (8000da4 <HAL_GPIO_EXTI_Callback+0x40>)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000d9c:	bf00      	nop
 8000d9e:	3710      	adds	r7, #16
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	2000013c 	.word	0x2000013c
 8000da8:	200000f4 	.word	0x200000f4

08000dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db0:	b672      	cpsid	i
}
 8000db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <Error_Handler+0x8>

08000db8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	4b10      	ldr	r3, [pc, #64]	@ (8000e04 <HAL_MspInit+0x4c>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc6:	4a0f      	ldr	r2, [pc, #60]	@ (8000e04 <HAL_MspInit+0x4c>)
 8000dc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dce:	4b0d      	ldr	r3, [pc, #52]	@ (8000e04 <HAL_MspInit+0x4c>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	603b      	str	r3, [r7, #0]
 8000dde:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <HAL_MspInit+0x4c>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de2:	4a08      	ldr	r2, [pc, #32]	@ (8000e04 <HAL_MspInit+0x4c>)
 8000de4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000de8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dea:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <HAL_MspInit+0x4c>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800

08000e08 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	@ 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a19      	ldr	r2, [pc, #100]	@ (8000e8c <HAL_UART_MspInit+0x84>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d12c      	bne.n	8000e84 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	4b18      	ldr	r3, [pc, #96]	@ (8000e90 <HAL_UART_MspInit+0x88>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e32:	4a17      	ldr	r2, [pc, #92]	@ (8000e90 <HAL_UART_MspInit+0x88>)
 8000e34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e3a:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <HAL_UART_MspInit+0x88>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <HAL_UART_MspInit+0x88>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	4a10      	ldr	r2, [pc, #64]	@ (8000e90 <HAL_UART_MspInit+0x88>)
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e56:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <HAL_UART_MspInit+0x88>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e62:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e74:	2308      	movs	r3, #8
 8000e76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <HAL_UART_MspInit+0x8c>)
 8000e80:	f001 fe4e 	bl	8002b20 <HAL_GPIO_Init>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 8000e84:	bf00      	nop
 8000e86:	3728      	adds	r7, #40	@ 0x28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40004c00 	.word	0x40004c00
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020800 	.word	0x40020800

08000e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <NMI_Handler+0x4>

08000ea0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <HardFault_Handler+0x4>

08000ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <MemManage_Handler+0x4>

08000eb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <BusFault_Handler+0x4>

08000eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <UsageFault_Handler+0x4>

08000ec0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eee:	f000 fa71 	bl	80013d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000efa:	2001      	movs	r0, #1
 8000efc:	f001 ffe0 	bl	8002ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000f08:	4802      	ldr	r0, [pc, #8]	@ (8000f14 <ETH_IRQHandler+0x10>)
 8000f0a:	f000 ff1b 	bl	8001d44 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20004c64 	.word	0x20004c64

08000f18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return 1;
 8000f1c:	2301      	movs	r3, #1
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <_kill>:

int _kill(int pid, int sig)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f32:	4b05      	ldr	r3, [pc, #20]	@ (8000f48 <_kill+0x20>)
 8000f34:	2216      	movs	r2, #22
 8000f36:	601a      	str	r2, [r3, #0]
  return -1;
 8000f38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	20008588 	.word	0x20008588

08000f4c <_exit>:

void _exit (int status)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ffe5 	bl	8000f28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f5e:	bf00      	nop
 8000f60:	e7fd      	b.n	8000f5e <_exit+0x12>

08000f62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b086      	sub	sp, #24
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	60f8      	str	r0, [r7, #12]
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	e00a      	b.n	8000f8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f74:	f3af 8000 	nop.w
 8000f78:	4601      	mov	r1, r0
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	60ba      	str	r2, [r7, #8]
 8000f80:	b2ca      	uxtb	r2, r1
 8000f82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	3301      	adds	r3, #1
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	dbf0      	blt.n	8000f74 <_read+0x12>
  }

  return len;
 8000f92:	687b      	ldr	r3, [r7, #4]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	e009      	b.n	8000fc2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	1c5a      	adds	r2, r3, #1
 8000fb2:	60ba      	str	r2, [r7, #8]
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	697a      	ldr	r2, [r7, #20]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	dbf1      	blt.n	8000fae <_write+0x12>
  }
  return len;
 8000fca:	687b      	ldr	r3, [r7, #4]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <_close>:

int _close(int file)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ffc:	605a      	str	r2, [r3, #4]
  return 0;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <_isatty>:

int _isatty(int file)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001014:	2301      	movs	r3, #1
}
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001022:	b480      	push	{r7}
 8001024:	b085      	sub	sp, #20
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800103c:	b480      	push	{r7}
 800103e:	b087      	sub	sp, #28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001044:	4a14      	ldr	r2, [pc, #80]	@ (8001098 <_sbrk+0x5c>)
 8001046:	4b15      	ldr	r3, [pc, #84]	@ (800109c <_sbrk+0x60>)
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001050:	4b13      	ldr	r3, [pc, #76]	@ (80010a0 <_sbrk+0x64>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d102      	bne.n	800105e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001058:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <_sbrk+0x64>)
 800105a:	4a12      	ldr	r2, [pc, #72]	@ (80010a4 <_sbrk+0x68>)
 800105c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800105e:	4b10      	ldr	r3, [pc, #64]	@ (80010a0 <_sbrk+0x64>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	429a      	cmp	r2, r3
 800106a:	d205      	bcs.n	8001078 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800106c:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <_sbrk+0x6c>)
 800106e:	220c      	movs	r2, #12
 8001070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001072:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001076:	e009      	b.n	800108c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001078:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <_sbrk+0x64>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800107e:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <_sbrk+0x64>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	4a06      	ldr	r2, [pc, #24]	@ (80010a0 <_sbrk+0x64>)
 8001088:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800108a:	68fb      	ldr	r3, [r7, #12]
}
 800108c:	4618      	mov	r0, r3
 800108e:	371c      	adds	r7, #28
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	20020000 	.word	0x20020000
 800109c:	00000400 	.word	0x00000400
 80010a0:	20000140 	.word	0x20000140
 80010a4:	20008598 	.word	0x20008598
 80010a8:	20008588 	.word	0x20008588

080010ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b0:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <SystemInit+0x20>)
 80010b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010b6:	4a05      	ldr	r2, [pc, #20]	@ (80010cc <SystemInit+0x20>)
 80010b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001108 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010d4:	f7ff ffea 	bl	80010ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d8:	480c      	ldr	r0, [pc, #48]	@ (800110c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010da:	490d      	ldr	r1, [pc, #52]	@ (8001110 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001114 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e0:	e002      	b.n	80010e8 <LoopCopyDataInit>

080010e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e6:	3304      	adds	r3, #4

080010e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ec:	d3f9      	bcc.n	80010e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001118 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010f0:	4c0a      	ldr	r4, [pc, #40]	@ (800111c <LoopFillZerobss+0x22>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f4:	e001      	b.n	80010fa <LoopFillZerobss>

080010f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f8:	3204      	adds	r2, #4

080010fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010fc:	d3fb      	bcc.n	80010f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010fe:	f00e f971 	bl	800f3e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001102:	f7ff fca9 	bl	8000a58 <main>
  bx  lr    
 8001106:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001108:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800110c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001110:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001114:	0801331c 	.word	0x0801331c
  ldr r2, =_sbss
 8001118:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800111c:	20008594 	.word	0x20008594

08001120 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <ADC_IRQHandler>

08001122 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001122:	b480      	push	{r7}
 8001124:	b083      	sub	sp, #12
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00b      	beq.n	800114a <LAN8742_RegisterBusIO+0x28>
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d007      	beq.n	800114a <LAN8742_RegisterBusIO+0x28>
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <LAN8742_RegisterBusIO+0x28>
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d102      	bne.n	8001150 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800114a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800114e:	e014      	b.n	800117a <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	68da      	ldr	r2, [r3, #12]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	691a      	ldr	r2, [r3, #16]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001186:	b580      	push	{r7, lr}
 8001188:	b086      	sub	sp, #24
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d139      	bne.n	8001216 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d002      	beq.n	80011b0 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2220      	movs	r2, #32
 80011b4:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
 80011ba:	e01c      	b.n	80011f6 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	f107 020c 	add.w	r2, r7, #12
 80011c4:	2112      	movs	r1, #18
 80011c6:	6978      	ldr	r0, [r7, #20]
 80011c8:	4798      	blx	r3
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	da03      	bge.n	80011d8 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80011d0:	f06f 0304 	mvn.w	r3, #4
 80011d4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80011d6:	e00b      	b.n	80011f0 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f003 031f 	and.w	r3, r3, #31
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d105      	bne.n	80011f0 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
         break;
 80011ee:	e005      	b.n	80011fc <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	3301      	adds	r3, #1
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	2b1f      	cmp	r3, #31
 80011fa:	d9df      	bls.n	80011bc <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b1f      	cmp	r3, #31
 8001202:	d902      	bls.n	800120a <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001204:	f06f 0302 	mvn.w	r3, #2
 8001208:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d102      	bne.n	8001216 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001216:	693b      	ldr	r3, [r7, #16]
 }
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	6810      	ldr	r0, [r2, #0]
 8001234:	f107 020c 	add.w	r2, r7, #12
 8001238:	2101      	movs	r1, #1
 800123a:	4798      	blx	r3
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	da02      	bge.n	8001248 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001242:	f06f 0304 	mvn.w	r3, #4
 8001246:	e06e      	b.n	8001326 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	6810      	ldr	r0, [r2, #0]
 8001250:	f107 020c 	add.w	r2, r7, #12
 8001254:	2101      	movs	r1, #1
 8001256:	4798      	blx	r3
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	da02      	bge.n	8001264 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800125e:	f06f 0304 	mvn.w	r3, #4
 8001262:	e060      	b.n	8001326 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800126e:	2301      	movs	r3, #1
 8001270:	e059      	b.n	8001326 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	6810      	ldr	r0, [r2, #0]
 800127a:	f107 020c 	add.w	r2, r7, #12
 800127e:	2100      	movs	r1, #0
 8001280:	4798      	blx	r3
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	da02      	bge.n	800128e <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001288:	f06f 0304 	mvn.w	r3, #4
 800128c:	e04b      	b.n	8001326 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d11b      	bne.n	80012d0 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d006      	beq.n	80012b0 <LAN8742_GetLinkState+0x90>
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80012ac:	2302      	movs	r3, #2
 80012ae:	e03a      	b.n	8001326 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e033      	b.n	8001326 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80012c8:	2304      	movs	r3, #4
 80012ca:	e02c      	b.n	8001326 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80012cc:	2305      	movs	r3, #5
 80012ce:	e02a      	b.n	8001326 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	6810      	ldr	r0, [r2, #0]
 80012d8:	f107 020c 	add.w	r2, r7, #12
 80012dc:	211f      	movs	r1, #31
 80012de:	4798      	blx	r3
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	da02      	bge.n	80012ec <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80012e6:	f06f 0304 	mvn.w	r3, #4
 80012ea:	e01c      	b.n	8001326 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80012f6:	2306      	movs	r3, #6
 80012f8:	e015      	b.n	8001326 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f003 031c 	and.w	r3, r3, #28
 8001300:	2b18      	cmp	r3, #24
 8001302:	d101      	bne.n	8001308 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001304:	2302      	movs	r3, #2
 8001306:	e00e      	b.n	8001326 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f003 031c 	and.w	r3, r3, #28
 800130e:	2b08      	cmp	r3, #8
 8001310:	d101      	bne.n	8001316 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001312:	2303      	movs	r3, #3
 8001314:	e007      	b.n	8001326 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f003 031c 	and.w	r3, r3, #28
 800131c:	2b14      	cmp	r3, #20
 800131e:	d101      	bne.n	8001324 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001320:	2304      	movs	r3, #4
 8001322:	e000      	b.n	8001326 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001324:	2305      	movs	r3, #5
    }
  }
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001334:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <HAL_Init+0x40>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0d      	ldr	r2, [pc, #52]	@ (8001370 <HAL_Init+0x40>)
 800133a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800133e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001340:	4b0b      	ldr	r3, [pc, #44]	@ (8001370 <HAL_Init+0x40>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a0a      	ldr	r2, [pc, #40]	@ (8001370 <HAL_Init+0x40>)
 8001346:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800134a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800134c:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <HAL_Init+0x40>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a07      	ldr	r2, [pc, #28]	@ (8001370 <HAL_Init+0x40>)
 8001352:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001356:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001358:	2003      	movs	r0, #3
 800135a:	f000 f94f 	bl	80015fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800135e:	200f      	movs	r0, #15
 8001360:	f000 f808 	bl	8001374 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001364:	f7ff fd28 	bl	8000db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40023c00 	.word	0x40023c00

08001374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800137c:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <HAL_InitTick+0x54>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <HAL_InitTick+0x58>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4619      	mov	r1, r3
 8001386:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800138a:	fbb3 f3f1 	udiv	r3, r3, r1
 800138e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f000 f967 	bl	8001666 <HAL_SYSTICK_Config>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e00e      	b.n	80013c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b0f      	cmp	r3, #15
 80013a6:	d80a      	bhi.n	80013be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a8:	2200      	movs	r2, #0
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013b0:	f000 f92f 	bl	8001612 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b4:	4a06      	ldr	r2, [pc, #24]	@ (80013d0 <HAL_InitTick+0x5c>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e000      	b.n	80013c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000000 	.word	0x20000000
 80013cc:	20000008 	.word	0x20000008
 80013d0:	20000004 	.word	0x20000004

080013d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d8:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <HAL_IncTick+0x20>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <HAL_IncTick+0x24>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	4a04      	ldr	r2, [pc, #16]	@ (80013f8 <HAL_IncTick+0x24>)
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000008 	.word	0x20000008
 80013f8:	20000144 	.word	0x20000144

080013fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001400:	4b03      	ldr	r3, [pc, #12]	@ (8001410 <HAL_GetTick+0x14>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000144 	.word	0x20000144

08001414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800141c:	f7ff ffee 	bl	80013fc <HAL_GetTick>
 8001420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800142c:	d005      	beq.n	800143a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800142e:	4b0a      	ldr	r3, [pc, #40]	@ (8001458 <HAL_Delay+0x44>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4413      	add	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800143a:	bf00      	nop
 800143c:	f7ff ffde 	bl	80013fc <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	429a      	cmp	r2, r3
 800144a:	d8f7      	bhi.n	800143c <HAL_Delay+0x28>
  {
  }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000008 	.word	0x20000008

0800145c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800146c:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001478:	4013      	ands	r3, r2
 800147a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001484:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001488:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800148c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148e:	4a04      	ldr	r2, [pc, #16]	@ (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	60d3      	str	r3, [r2, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a8:	4b04      	ldr	r3, [pc, #16]	@ (80014bc <__NVIC_GetPriorityGrouping+0x18>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	f003 0307 	and.w	r3, r3, #7
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	db0b      	blt.n	80014ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	f003 021f 	and.w	r2, r3, #31
 80014d8:	4907      	ldr	r1, [pc, #28]	@ (80014f8 <__NVIC_EnableIRQ+0x38>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	095b      	lsrs	r3, r3, #5
 80014e0:	2001      	movs	r0, #1
 80014e2:	fa00 f202 	lsl.w	r2, r0, r2
 80014e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000e100 	.word	0xe000e100

080014fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	2b00      	cmp	r3, #0
 800150e:	db0a      	blt.n	8001526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	b2da      	uxtb	r2, r3
 8001514:	490c      	ldr	r1, [pc, #48]	@ (8001548 <__NVIC_SetPriority+0x4c>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	0112      	lsls	r2, r2, #4
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	440b      	add	r3, r1
 8001520:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001524:	e00a      	b.n	800153c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4908      	ldr	r1, [pc, #32]	@ (800154c <__NVIC_SetPriority+0x50>)
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	3b04      	subs	r3, #4
 8001534:	0112      	lsls	r2, r2, #4
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	440b      	add	r3, r1
 800153a:	761a      	strb	r2, [r3, #24]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000e100 	.word	0xe000e100
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001550:	b480      	push	{r7}
 8001552:	b089      	sub	sp, #36	@ 0x24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f1c3 0307 	rsb	r3, r3, #7
 800156a:	2b04      	cmp	r3, #4
 800156c:	bf28      	it	cs
 800156e:	2304      	movcs	r3, #4
 8001570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3304      	adds	r3, #4
 8001576:	2b06      	cmp	r3, #6
 8001578:	d902      	bls.n	8001580 <NVIC_EncodePriority+0x30>
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3b03      	subs	r3, #3
 800157e:	e000      	b.n	8001582 <NVIC_EncodePriority+0x32>
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43da      	mvns	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	401a      	ands	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001598:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	43d9      	mvns	r1, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	4313      	orrs	r3, r2
         );
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3724      	adds	r7, #36	@ 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015c8:	d301      	bcc.n	80015ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ca:	2301      	movs	r3, #1
 80015cc:	e00f      	b.n	80015ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ce:	4a0a      	ldr	r2, [pc, #40]	@ (80015f8 <SysTick_Config+0x40>)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015d6:	210f      	movs	r1, #15
 80015d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015dc:	f7ff ff8e 	bl	80014fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e0:	4b05      	ldr	r3, [pc, #20]	@ (80015f8 <SysTick_Config+0x40>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e6:	4b04      	ldr	r3, [pc, #16]	@ (80015f8 <SysTick_Config+0x40>)
 80015e8:	2207      	movs	r2, #7
 80015ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	e000e010 	.word	0xe000e010

080015fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff29 	bl	800145c <__NVIC_SetPriorityGrouping>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001612:	b580      	push	{r7, lr}
 8001614:	b086      	sub	sp, #24
 8001616:	af00      	add	r7, sp, #0
 8001618:	4603      	mov	r3, r0
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
 800161e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001624:	f7ff ff3e 	bl	80014a4 <__NVIC_GetPriorityGrouping>
 8001628:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	68b9      	ldr	r1, [r7, #8]
 800162e:	6978      	ldr	r0, [r7, #20]
 8001630:	f7ff ff8e 	bl	8001550 <NVIC_EncodePriority>
 8001634:	4602      	mov	r2, r0
 8001636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163a:	4611      	mov	r1, r2
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff5d 	bl	80014fc <__NVIC_SetPriority>
}
 8001642:	bf00      	nop
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff31 	bl	80014c0 <__NVIC_EnableIRQ>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff ffa2 	bl	80015b8 <SysTick_Config>
 8001674:	4603      	mov	r3, r0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e08a      	b.n	80017a8 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001698:	2b00      	cmp	r3, #0
 800169a:	d106      	bne.n	80016aa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2220      	movs	r2, #32
 80016a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f002 ff8b 	bl	80045c0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	4b40      	ldr	r3, [pc, #256]	@ (80017b0 <HAL_ETH_Init+0x130>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b2:	4a3f      	ldr	r2, [pc, #252]	@ (80017b0 <HAL_ETH_Init+0x130>)
 80016b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ba:	4b3d      	ldr	r3, [pc, #244]	@ (80017b0 <HAL_ETH_Init+0x130>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80016c6:	4b3b      	ldr	r3, [pc, #236]	@ (80017b4 <HAL_ETH_Init+0x134>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4a3a      	ldr	r2, [pc, #232]	@ (80017b4 <HAL_ETH_Init+0x134>)
 80016cc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80016d0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80016d2:	4b38      	ldr	r3, [pc, #224]	@ (80017b4 <HAL_ETH_Init+0x134>)
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	4936      	ldr	r1, [pc, #216]	@ (80017b4 <HAL_ETH_Init+0x134>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80016e0:	4b34      	ldr	r3, [pc, #208]	@ (80017b4 <HAL_ETH_Init+0x134>)
 80016e2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	6812      	ldr	r2, [r2, #0]
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016fc:	f7ff fe7e 	bl	80013fc <HAL_GetTick>
 8001700:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001702:	e011      	b.n	8001728 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001704:	f7ff fe7a 	bl	80013fc <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001712:	d909      	bls.n	8001728 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2204      	movs	r2, #4
 8001718:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	22e0      	movs	r2, #224	@ 0xe0
 8001720:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e03f      	b.n	80017a8 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1e4      	bne.n	8001704 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 ff32 	bl	80025a4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 ffdd 	bl	8002700 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f001 f833 	bl	80027b2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	461a      	mov	r2, r3
 8001752:	2100      	movs	r1, #0
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 ff9b 	bl	8002690 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001768:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6812      	ldr	r2, [r2, #0]
 8001776:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800177a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800177e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001792:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2210      	movs	r2, #16
 80017a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40013800 	.word	0x40013800

080017b8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80017c6:	2b10      	cmp	r3, #16
 80017c8:	d161      	bne.n	800188e <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2220      	movs	r2, #32
 80017ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2204      	movs	r2, #4
 80017dc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 fa2c 	bl	8001c3c <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017ec:	2001      	movs	r0, #1
 80017ee:	f7ff fe11 	bl	8001414 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800180c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001810:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001828:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 fd56 	bl	80022dc <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0208 	orr.w	r2, r2, #8
 800183e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001848:	2001      	movs	r0, #1
 800184a:	f7ff fde3 	bl	8001414 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f042 0204 	orr.w	r2, r2, #4
 8001864:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	6812      	ldr	r2, [r2, #0]
 8001874:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8001878:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 800187c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001880:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2240      	movs	r2, #64	@ 0x40
 8001886:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	e000      	b.n	8001890 <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
  }
}
 8001890:	4618      	mov	r0, r3
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018a6:	2b40      	cmp	r3, #64	@ 0x40
 80018a8:	d170      	bne.n	800198c <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2220      	movs	r2, #32
 80018ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018ba:	69db      	ldr	r3, [r3, #28]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 80018c4:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 80018c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018cc:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80018e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018e4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	f023 0302 	bic.w	r3, r3, #2
 80018f8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018fc:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 0204 	bic.w	r2, r2, #4
 800190c:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001916:	2001      	movs	r0, #1
 8001918:	f7ff fd7c 	bl	8001414 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 fcd9 	bl	80022dc <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0208 	bic.w	r2, r2, #8
 8001938:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001942:	2001      	movs	r0, #1
 8001944:	f7ff fd66 	bl	8001414 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	e00e      	b.n	8001974 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	3212      	adds	r2, #18
 800195c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001960:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	3301      	adds	r3, #1
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	2b03      	cmp	r3, #3
 8001978:	d9ed      	bls.n	8001956 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2210      	movs	r2, #16
 8001984:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001988:	2300      	movs	r3, #0
 800198a:	e000      	b.n	800198e <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
  }
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b086      	sub	sp, #24
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d109      	bne.n	80019bc <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ae:	f043 0201 	orr.w	r2, r3, #1
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e07c      	b.n	8001ab6 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80019c2:	2b40      	cmp	r3, #64	@ 0x40
 80019c4:	d176      	bne.n	8001ab4 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80019c6:	2200      	movs	r2, #0
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f000 ff60 	bl	8002890 <ETH_Prepare_Tx_Descriptors>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d009      	beq.n	80019ea <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019dc:	f043 0202 	orr.w	r2, r3, #2
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e065      	b.n	8001ab6 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 80019ea:	f3bf 8f4f 	dsb	sy
}
 80019ee:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	3206      	adds	r2, #6
 80019f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019fc:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d904      	bls.n	8001a1a <HAL_ETH_Transmit+0x84>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a14:	1f1a      	subs	r2, r3, #4
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	3106      	adds	r1, #6
 8001a26:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a2a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a2e:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001a30:	f7ff fce4 	bl	80013fc <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001a36:	e037      	b.n	8001aa8 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d011      	beq.n	8001a6e <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a50:	f043 0208 	orr.w	r2, r3, #8
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a62:	695a      	ldr	r2, [r3, #20]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e023      	b.n	8001ab6 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a74:	d018      	beq.n	8001aa8 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a76:	f7ff fcc1 	bl	80013fc <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d302      	bcc.n	8001a8c <HAL_ETH_Transmit+0xf6>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10d      	bne.n	8001aa8 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a92:	f043 0204 	orr.w	r2, r3, #4
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001aa2:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e006      	b.n	8001ab6 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	dbc3      	blt.n	8001a38 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	e000      	b.n	8001ab6 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
  }
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b088      	sub	sp, #32
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d109      	bne.n	8001aea <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001adc:	f043 0201 	orr.w	r2, r3, #1
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e0a4      	b.n	8001c34 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001af0:	2b40      	cmp	r3, #64	@ 0x40
 8001af2:	d001      	beq.n	8001af8 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e09d      	b.n	8001c34 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001afc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69fa      	ldr	r2, [r7, #28]
 8001b02:	3212      	adds	r2, #18
 8001b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b08:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b0e:	f1c3 0304 	rsb	r3, r3, #4
 8001b12:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001b14:	e066      	b.n	8001be4 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d007      	beq.n	8001b32 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	69da      	ldr	r2, [r3, #28]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	699a      	ldr	r2, [r3, #24]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d103      	bne.n	8001b46 <HAL_ETH_ReadData+0x88>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d03c      	beq.n	8001bc0 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d005      	beq.n	8001b5e <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	0c1b      	lsrs	r3, r3, #16
 8001b64:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001b68:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d005      	beq.n	8001b82 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	f002 fec6 	bl	8004930 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	441a      	add	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	61fb      	str	r3, [r7, #28]
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	d902      	bls.n	8001bd2 <HAL_ETH_ReadData+0x114>
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	3b04      	subs	r3, #4
 8001bd0:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69fa      	ldr	r2, [r7, #28]
 8001bd6:	3212      	adds	r2, #18
 8001bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bdc:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	3301      	adds	r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	db06      	blt.n	8001bfa <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d202      	bcs.n	8001bfa <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8001bf4:	7cfb      	ldrb	r3, [r7, #19]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d08d      	beq.n	8001b16 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	441a      	add	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d002      	beq.n	8001c14 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f814 	bl	8001c3c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001c1a:	7cfb      	ldrb	r3, [r7, #19]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d108      	bne.n	8001c32 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e000      	b.n	8001c34 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3720      	adds	r7, #32
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c50:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69fa      	ldr	r2, [r7, #28]
 8001c56:	3212      	adds	r2, #18
 8001c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c5c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c62:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001c64:	e044      	b.n	8001cf0 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d112      	bne.n	8001c94 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001c6e:	f107 0308 	add.w	r3, r7, #8
 8001c72:	4618      	mov	r0, r3
 8001c74:	f002 fe2c 	bl	80048d0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d102      	bne.n	8001c84 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	74fb      	strb	r3, [r7, #19]
 8001c82:	e007      	b.n	8001c94 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	461a      	mov	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001c94:	7cfb      	ldrb	r3, [r7, #19]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d02a      	beq.n	8001cf0 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d108      	bne.n	8001cb4 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001caa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	6053      	str	r3, [r2, #4]
 8001cb2:	e005      	b.n	8001cc0 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	2b03      	cmp	r3, #3
 8001cd6:	d902      	bls.n	8001cde <ETH_UpdateDescriptor+0xa2>
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	3b04      	subs	r3, #4
 8001cdc:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69fa      	ldr	r2, [r7, #28]
 8001ce2:	3212      	adds	r2, #18
 8001ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce8:	617b      	str	r3, [r7, #20]
      desccount--;
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	3b01      	subs	r3, #1
 8001cee:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d002      	beq.n	8001cfc <ETH_UpdateDescriptor+0xc0>
 8001cf6:	7cfb      	ldrb	r3, [r7, #19]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1b4      	bne.n	8001c66 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d01a      	beq.n	8001d3c <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3303      	adds	r3, #3
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001d10:	f3bf 8f5f 	dmb	sy
}
 8001d14:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6919      	ldr	r1, [r3, #16]
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	18ca      	adds	r2, r1, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d2e:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69fa      	ldr	r2, [r7, #28]
 8001d34:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	3720      	adds	r7, #32
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d52:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8001d6c:	4b4b      	ldr	r3, [pc, #300]	@ (8001e9c <HAL_ETH_IRQHandler+0x158>)
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00e      	beq.n	8001d9a <HAL_ETH_IRQHandler+0x56>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d009      	beq.n	8001d9a <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d8e:	461a      	mov	r2, r3
 8001d90:	4b43      	ldr	r3, [pc, #268]	@ (8001ea0 <HAL_ETH_IRQHandler+0x15c>)
 8001d92:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f891 	bl	8001ebc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00f      	beq.n	8001dc4 <HAL_ETH_IRQHandler+0x80>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00a      	beq.n	8001dc4 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001db6:	461a      	mov	r2, r3
 8001db8:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001dbc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f872 	bl	8001ea8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d042      	beq.n	8001e54 <HAL_ETH_IRQHandler+0x110>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d03d      	beq.n	8001e54 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dde:	f043 0208 	orr.w	r2, r3, #8
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d01a      	beq.n	8001e28 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dfa:	695a      	ldr	r2, [r3, #20]
 8001dfc:	4b29      	ldr	r3, [pc, #164]	@ (8001ea4 <HAL_ETH_IRQHandler+0x160>)
 8001dfe:	4013      	ands	r3, r2
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8001e18:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e1c:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	22e0      	movs	r2, #224	@ 0xe0
 8001e22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001e26:	e012      	b.n	8001e4e <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e30:	695a      	ldr	r2, [r3, #20]
 8001e32:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001e36:	4013      	ands	r3, r2
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e46:	461a      	mov	r2, r3
 8001e48:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001e4c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f83e 	bl	8001ed0 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00e      	beq.n	8001e7c <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e64:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f838 	bl	8001ee4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d006      	beq.n	8001e94 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001e86:	4b05      	ldr	r3, [pc, #20]	@ (8001e9c <HAL_ETH_IRQHandler+0x158>)
 8001e88:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001e8c:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f832 	bl	8001ef8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001e94:	bf00      	nop
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40013c00 	.word	0x40013c00
 8001ea0:	00010040 	.word	0x00010040
 8001ea4:	007e2000 	.word	0x007e2000

08001ea8 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
 8001f18:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f003 031c 	and.w	r3, r3, #28
 8001f28:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	02db      	lsls	r3, r3, #11
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	019b      	lsls	r3, r3, #6
 8001f3a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f023 0302 	bic.w	r3, r3, #2
 8001f4a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001f5c:	f7ff fa4e 	bl	80013fc <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f62:	e00d      	b.n	8001f80 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001f64:	f7ff fa4a 	bl	80013fc <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f72:	d301      	bcc.n	8001f78 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e010      	b.n	8001f9a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1ec      	bne.n	8001f64 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	461a      	mov	r2, r3
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b086      	sub	sp, #24
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
 8001fae:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f003 031c 	and.w	r3, r3, #28
 8001fbe:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	02db      	lsls	r3, r3, #11
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	019b      	lsls	r3, r3, #6
 8001fd0:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f043 0302 	orr.w	r3, r3, #2
 8001fe0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ffc:	f7ff f9fe 	bl	80013fc <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002002:	e00d      	b.n	8002020 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002004:	f7ff f9fa 	bl	80013fc <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002012:	d301      	bcc.n	8002018 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e009      	b.n	800202c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1ec      	bne.n	8002004 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0e6      	b.n	8002216 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	2b00      	cmp	r3, #0
 8002054:	bf14      	ite	ne
 8002056:	2301      	movne	r3, #1
 8002058:	2300      	moveq	r3, #0
 800205a:	b2db      	uxtb	r3, r3
 800205c:	461a      	mov	r2, r3
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800207c:	2b00      	cmp	r3, #0
 800207e:	bf0c      	ite	eq
 8002080:	2301      	moveq	r3, #1
 8002082:	2300      	movne	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	461a      	mov	r2, r3
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002098:	2b00      	cmp	r3, #0
 800209a:	bf14      	ite	ne
 800209c:	2301      	movne	r3, #1
 800209e:	2300      	moveq	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	bf0c      	ite	eq
 80020b6:	2301      	moveq	r3, #1
 80020b8:	2300      	movne	r3, #0
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	461a      	mov	r2, r3
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	bf14      	ite	ne
 80020d0:	2301      	movne	r3, #1
 80020d2:	2300      	moveq	r3, #0
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	461a      	mov	r2, r3
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002102:	2b00      	cmp	r3, #0
 8002104:	bf0c      	ite	eq
 8002106:	2301      	moveq	r3, #1
 8002108:	2300      	movne	r3, #0
 800210a:	b2db      	uxtb	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800211c:	2b00      	cmp	r3, #0
 800211e:	bf0c      	ite	eq
 8002120:	2301      	moveq	r3, #1
 8002122:	2300      	movne	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	461a      	mov	r2, r3
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002136:	2b00      	cmp	r3, #0
 8002138:	bf14      	ite	ne
 800213a:	2301      	movne	r3, #1
 800213c:	2300      	moveq	r3, #0
 800213e:	b2db      	uxtb	r3, r3
 8002140:	461a      	mov	r2, r3
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800215e:	2b00      	cmp	r3, #0
 8002160:	bf14      	ite	ne
 8002162:	2301      	movne	r3, #1
 8002164:	2300      	moveq	r3, #0
 8002166:	b2db      	uxtb	r3, r3
 8002168:	461a      	mov	r2, r3
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf14      	ite	ne
 800217c:	2301      	movne	r3, #1
 800217e:	2300      	moveq	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	bf14      	ite	ne
 8002196:	2301      	movne	r3, #1
 8002198:	2300      	moveq	r3, #0
 800219a:	b2db      	uxtb	r3, r3
 800219c:	461a      	mov	r2, r3
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	bf0c      	ite	eq
 80021b2:	2301      	moveq	r3, #1
 80021b4:	2300      	movne	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	0c1b      	lsrs	r3, r3, #16
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bf14      	ite	ne
 80021ea:	2301      	movne	r3, #1
 80021ec:	2300      	moveq	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	461a      	mov	r2, r3
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002202:	2b00      	cmp	r3, #0
 8002204:	bf14      	ite	ne
 8002206:	2301      	movne	r3, #1
 8002208:	2300      	moveq	r3, #0
 800220a:	b2db      	uxtb	r3, r3
 800220c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e00b      	b.n	800224e <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800223c:	2b10      	cmp	r3, #16
 800223e:	d105      	bne.n	800224c <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002240:	6839      	ldr	r1, [r7, #0]
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f870 	bl	8002328 <ETH_SetMACConfig>

    return HAL_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	e000      	b.n	800224e <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
  }
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f023 031c 	bic.w	r3, r3, #28
 800226e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002270:	f001 fa62 	bl	8003738 <HAL_RCC_GetHCLKFreq>
 8002274:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	4a14      	ldr	r2, [pc, #80]	@ (80022cc <HAL_ETH_SetMDIOClockRange+0x74>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d804      	bhi.n	8002288 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f043 0308 	orr.w	r3, r3, #8
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	e019      	b.n	80022bc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	4a11      	ldr	r2, [pc, #68]	@ (80022d0 <HAL_ETH_SetMDIOClockRange+0x78>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d204      	bcs.n	800229a <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f043 030c 	orr.w	r3, r3, #12
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	e010      	b.n	80022bc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	4a0d      	ldr	r2, [pc, #52]	@ (80022d4 <HAL_ETH_SetMDIOClockRange+0x7c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d90c      	bls.n	80022bc <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	4a0c      	ldr	r2, [pc, #48]	@ (80022d8 <HAL_ETH_SetMDIOClockRange+0x80>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d804      	bhi.n	80022b4 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f043 0304 	orr.w	r3, r3, #4
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	e003      	b.n	80022bc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f043 0310 	orr.w	r3, r3, #16
 80022ba:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	611a      	str	r2, [r3, #16]
}
 80022c4:	bf00      	nop
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	02160ebf 	.word	0x02160ebf
 80022d0:	03938700 	.word	0x03938700
 80022d4:	05f5e0ff 	.word	0x05f5e0ff
 80022d8:	08f0d17f 	.word	0x08f0d17f

080022dc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6812      	ldr	r2, [r2, #0]
 80022f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022fe:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800230c:	2001      	movs	r0, #1
 800230e:	f7ff f881 	bl	8001414 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800231c:	6193      	str	r3, [r2, #24]
}
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4b53      	ldr	r3, [pc, #332]	@ (800248c <ETH_SetMACConfig+0x164>)
 800233e:	4013      	ands	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	7b9b      	ldrb	r3, [r3, #14]
 8002346:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	7c12      	ldrb	r2, [r2, #16]
 800234c:	2a00      	cmp	r2, #0
 800234e:	d102      	bne.n	8002356 <ETH_SetMACConfig+0x2e>
 8002350:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002354:	e000      	b.n	8002358 <ETH_SetMACConfig+0x30>
 8002356:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002358:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	7c52      	ldrb	r2, [r2, #17]
 800235e:	2a00      	cmp	r2, #0
 8002360:	d102      	bne.n	8002368 <ETH_SetMACConfig+0x40>
 8002362:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002366:	e000      	b.n	800236a <ETH_SetMACConfig+0x42>
 8002368:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800236a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002370:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	7fdb      	ldrb	r3, [r3, #31]
 8002376:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002378:	431a      	orrs	r2, r3
                        macconf->Speed |
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800237e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	7f92      	ldrb	r2, [r2, #30]
 8002384:	2a00      	cmp	r2, #0
 8002386:	d102      	bne.n	800238e <ETH_SetMACConfig+0x66>
 8002388:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800238c:	e000      	b.n	8002390 <ETH_SetMACConfig+0x68>
 800238e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002390:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	7f1b      	ldrb	r3, [r3, #28]
 8002396:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002398:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800239e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	791b      	ldrb	r3, [r3, #4]
 80023a4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80023a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	f892 2020 	ldrb.w	r2, [r2, #32]
 80023ae:	2a00      	cmp	r2, #0
 80023b0:	d102      	bne.n	80023b8 <ETH_SetMACConfig+0x90>
 80023b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023b6:	e000      	b.n	80023ba <ETH_SetMACConfig+0x92>
 80023b8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80023ba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	7bdb      	ldrb	r3, [r3, #15]
 80023c0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80023c2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80023c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80023d0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80023d2:	4313      	orrs	r3, r2
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023ea:	2001      	movs	r0, #1
 80023ec:	f7ff f812 	bl	8001414 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002406:	4013      	ands	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800240e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002416:	2a00      	cmp	r2, #0
 8002418:	d101      	bne.n	800241e <ETH_SetMACConfig+0xf6>
 800241a:	2280      	movs	r2, #128	@ 0x80
 800241c:	e000      	b.n	8002420 <ETH_SetMACConfig+0xf8>
 800241e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002420:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002426:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800242e:	2a01      	cmp	r2, #1
 8002430:	d101      	bne.n	8002436 <ETH_SetMACConfig+0x10e>
 8002432:	2208      	movs	r2, #8
 8002434:	e000      	b.n	8002438 <ETH_SetMACConfig+0x110>
 8002436:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002438:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002440:	2a01      	cmp	r2, #1
 8002442:	d101      	bne.n	8002448 <ETH_SetMACConfig+0x120>
 8002444:	2204      	movs	r2, #4
 8002446:	e000      	b.n	800244a <ETH_SetMACConfig+0x122>
 8002448:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800244a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002452:	2a01      	cmp	r2, #1
 8002454:	d101      	bne.n	800245a <ETH_SetMACConfig+0x132>
 8002456:	2202      	movs	r2, #2
 8002458:	e000      	b.n	800245c <ETH_SetMACConfig+0x134>
 800245a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800245c:	4313      	orrs	r3, r2
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	4313      	orrs	r3, r2
 8002462:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002474:	2001      	movs	r0, #1
 8002476:	f7fe ffcd 	bl	8001414 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	619a      	str	r2, [r3, #24]
}
 8002482:	bf00      	nop
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	fd20810f 	.word	0xfd20810f

08002490 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	4b3d      	ldr	r3, [pc, #244]	@ (80025a0 <ETH_SetDMAConfig+0x110>)
 80024aa:	4013      	ands	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	7b1b      	ldrb	r3, [r3, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d102      	bne.n	80024bc <ETH_SetDMAConfig+0x2c>
 80024b6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80024ba:	e000      	b.n	80024be <ETH_SetDMAConfig+0x2e>
 80024bc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	7b5b      	ldrb	r3, [r3, #13]
 80024c2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80024c4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	7f52      	ldrb	r2, [r2, #29]
 80024ca:	2a00      	cmp	r2, #0
 80024cc:	d102      	bne.n	80024d4 <ETH_SetDMAConfig+0x44>
 80024ce:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80024d2:	e000      	b.n	80024d6 <ETH_SetDMAConfig+0x46>
 80024d4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80024d6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	7b9b      	ldrb	r3, [r3, #14]
 80024dc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80024de:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80024e4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	7f1b      	ldrb	r3, [r3, #28]
 80024ea:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80024ec:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	7f9b      	ldrb	r3, [r3, #30]
 80024f2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80024f4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80024fa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002502:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002504:	4313      	orrs	r3, r2
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	4313      	orrs	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002514:	461a      	mov	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002526:	2001      	movs	r0, #1
 8002528:	f7fe ff74 	bl	8001414 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002534:	461a      	mov	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	791b      	ldrb	r3, [r3, #4]
 800253e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002544:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800254a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002550:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002558:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800255a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002560:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002562:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002568:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6812      	ldr	r2, [r2, #0]
 800256e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002572:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002576:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002584:	2001      	movs	r0, #1
 8002586:	f7fe ff45 	bl	8001414 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002592:	461a      	mov	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6013      	str	r3, [r2, #0]
}
 8002598:	bf00      	nop
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	f8de3f23 	.word	0xf8de3f23

080025a4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b0a6      	sub	sp, #152	@ 0x98
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80025ac:	2301      	movs	r3, #1
 80025ae:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80025b2:	2301      	movs	r3, #1
 80025b4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80025b8:	2300      	movs	r3, #0
 80025ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80025bc:	2300      	movs	r3, #0
 80025be:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80025c2:	2301      	movs	r3, #1
 80025c4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80025c8:	2300      	movs	r3, #0
 80025ca:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80025ce:	2301      	movs	r3, #1
 80025d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80025d4:	2301      	movs	r3, #1
 80025d6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80025da:	2300      	movs	r3, #0
 80025dc:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80025e0:	2300      	movs	r3, #0
 80025e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80025e6:	2300      	movs	r3, #0
 80025e8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80025ea:	2300      	movs	r3, #0
 80025ec:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80025f4:	2300      	movs	r3, #0
 80025f6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80025fa:	2300      	movs	r3, #0
 80025fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002600:	2300      	movs	r3, #0
 8002602:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002606:	2300      	movs	r3, #0
 8002608:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800260c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002610:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002612:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002616:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002618:	2300      	movs	r3, #0
 800261a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800261e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002622:	4619      	mov	r1, r3
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff fe7f 	bl	8002328 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800262a:	2301      	movs	r3, #1
 800262c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800262e:	2301      	movs	r3, #1
 8002630:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002632:	2301      	movs	r3, #1
 8002634:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002638:	2301      	movs	r3, #1
 800263a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800263c:	2300      	movs	r3, #0
 800263e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002640:	2300      	movs	r3, #0
 8002642:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002646:	2300      	movs	r3, #0
 8002648:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800264c:	2300      	movs	r3, #0
 800264e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002650:	2301      	movs	r3, #1
 8002652:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002656:	2301      	movs	r3, #1
 8002658:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800265a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800265e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002660:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002664:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002666:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800266a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800266c:	2301      	movs	r3, #1
 800266e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002672:	2300      	movs	r3, #0
 8002674:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800267a:	f107 0308 	add.w	r3, r7, #8
 800267e:	4619      	mov	r1, r3
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff ff05 	bl	8002490 <ETH_SetDMAConfig>
}
 8002686:	bf00      	nop
 8002688:	3798      	adds	r7, #152	@ 0x98
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002690:	b480      	push	{r7}
 8002692:	b087      	sub	sp, #28
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3305      	adds	r3, #5
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	021b      	lsls	r3, r3, #8
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	3204      	adds	r2, #4
 80026a8:	7812      	ldrb	r2, [r2, #0]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	4b11      	ldr	r3, [pc, #68]	@ (80026f8 <ETH_MACAddressConfig+0x68>)
 80026b2:	4413      	add	r3, r2
 80026b4:	461a      	mov	r2, r3
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3303      	adds	r3, #3
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	061a      	lsls	r2, r3, #24
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3302      	adds	r3, #2
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	041b      	lsls	r3, r3, #16
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3301      	adds	r3, #1
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	021b      	lsls	r3, r3, #8
 80026d4:	4313      	orrs	r3, r2
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	7812      	ldrb	r2, [r2, #0]
 80026da:	4313      	orrs	r3, r2
 80026dc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <ETH_MACAddressConfig+0x6c>)
 80026e2:	4413      	add	r3, r2
 80026e4:	461a      	mov	r2, r3
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	6013      	str	r3, [r2, #0]
}
 80026ea:	bf00      	nop
 80026ec:	371c      	adds	r7, #28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40028040 	.word	0x40028040
 80026fc:	40028044 	.word	0x40028044

08002700 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002708:	2300      	movs	r3, #0
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	e03e      	b.n	800278c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68d9      	ldr	r1, [r3, #12]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	4613      	mov	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	440b      	add	r3, r1
 800271e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2200      	movs	r2, #0
 800272a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2200      	movs	r2, #0
 8002736:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002738:	68b9      	ldr	r1, [r7, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	3206      	adds	r2, #6
 8002740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d80c      	bhi.n	8002770 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68d9      	ldr	r1, [r3, #12]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	440b      	add	r3, r1
 8002768:	461a      	mov	r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	60da      	str	r2, [r3, #12]
 800276e:	e004      	b.n	800277a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	461a      	mov	r2, r3
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	3301      	adds	r3, #1
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2b03      	cmp	r3, #3
 8002790:	d9bd      	bls.n	800270e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027a4:	611a      	str	r2, [r3, #16]
}
 80027a6:	bf00      	nop
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b085      	sub	sp, #20
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	e048      	b.n	8002852 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6919      	ldr	r1, [r3, #16]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	440b      	add	r3, r1
 80027d0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2200      	movs	r2, #0
 80027dc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	2200      	movs	r2, #0
 80027e2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2200      	movs	r2, #0
 80027e8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2200      	movs	r2, #0
 80027ee:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2200      	movs	r2, #0
 80027f4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80027fc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002816:	68b9      	ldr	r1, [r7, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	3212      	adds	r2, #18
 800281e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2b02      	cmp	r3, #2
 8002826:	d80c      	bhi.n	8002842 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6919      	ldr	r1, [r3, #16]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	1c5a      	adds	r2, r3, #1
 8002830:	4613      	mov	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	440b      	add	r3, r1
 800283a:	461a      	mov	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	60da      	str	r2, [r3, #12]
 8002840:	e004      	b.n	800284c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	461a      	mov	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	3301      	adds	r3, #1
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b03      	cmp	r3, #3
 8002856:	d9b3      	bls.n	80027c0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691a      	ldr	r2, [r3, #16]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002882:	60da      	str	r2, [r3, #12]
}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002890:	b480      	push	{r7}
 8002892:	b091      	sub	sp, #68	@ 0x44
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3318      	adds	r3, #24
 80028a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80028a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80028a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ba:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80028c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80028ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80028d2:	d007      	beq.n	80028e4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80028d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028d8:	3304      	adds	r3, #4
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80028e4:	2302      	movs	r3, #2
 80028e6:	e115      	b.n	8002b14 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 80028e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ea:	3301      	adds	r3, #1
 80028ec:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80028ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80028f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002900:	f023 031f 	bic.w	r3, r3, #31
 8002904:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002906:	6852      	ldr	r2, [r2, #4]
 8002908:	431a      	orrs	r2, r3
 800290a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d008      	beq.n	800292c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800291a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	431a      	orrs	r2, r3
 8002928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800292a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0320 	and.w	r3, r3, #32
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	431a      	orrs	r2, r3
 8002946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002948:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b00      	cmp	r3, #0
 8002954:	d005      	beq.n	8002962 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800295e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002960:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800296a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800296c:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800296e:	e084      	b.n	8002a7a <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800297a:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d006      	beq.n	8002990 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800298a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	e005      	b.n	800299c <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800299a:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800299c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800299e:	3301      	adds	r3, #1
 80029a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029a4:	2b03      	cmp	r3, #3
 80029a6:	d902      	bls.n	80029ae <ETH_Prepare_Tx_Descriptors+0x11e>
 80029a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029aa:	3b04      	subs	r3, #4
 80029ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80029ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80029b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80029b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80029c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029c4:	d007      	beq.n	80029d6 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80029c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029ca:	3304      	adds	r3, #4
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d029      	beq.n	8002a2a <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80029da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80029de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029e2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80029e4:	2300      	movs	r3, #0
 80029e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029e8:	e019      	b.n	8002a1e <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 80029ea:	f3bf 8f5f 	dmb	sy
}
 80029ee:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80029f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029fa:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80029fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029fe:	3301      	adds	r3, #1
 8002a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d902      	bls.n	8002a0e <ETH_Prepare_Tx_Descriptors+0x17e>
 8002a08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a0a:	3b04      	subs	r3, #4
 8002a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a10:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a16:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d3e1      	bcc.n	80029ea <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8002a26:	2302      	movs	r3, #2
 8002a28:	e074      	b.n	8002b14 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a34:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a38:	3301      	adds	r3, #1
 8002a3a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4a:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002a54:	f023 031f 	bic.w	r3, r3, #31
 8002a58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a5a:	6852      	ldr	r2, [r2, #4]
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a60:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a64:	3301      	adds	r3, #1
 8002a66:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002a68:	f3bf 8f5f 	dmb	sy
}
 8002a6c:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a78:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f47f af76 	bne.w	8002970 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d006      	beq.n	8002a98 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	e005      	b.n	8002aa4 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa2:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aae:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab2:	6a3a      	ldr	r2, [r7, #32]
 8002ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab8:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002aba:	f3bf 8f5f 	dmb	sy
}
 8002abe:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aca:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ace:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ad0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ade:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ae0:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ae6:	613b      	str	r3, [r7, #16]
  return(result);
 8002ae8:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002aea:	61fb      	str	r3, [r7, #28]
 8002aec:	2301      	movs	r3, #1
 8002aee:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f383 8810 	msr	PRIMASK, r3
}
 8002af6:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002afe:	4413      	add	r3, r2
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b04:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	f383 8810 	msr	PRIMASK, r3
}
 8002b10:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3744      	adds	r7, #68	@ 0x44
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b089      	sub	sp, #36	@ 0x24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b36:	2300      	movs	r3, #0
 8002b38:	61fb      	str	r3, [r7, #28]
 8002b3a:	e16b      	b.n	8002e14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	f040 815a 	bne.w	8002e0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d005      	beq.n	8002b72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d130      	bne.n	8002bd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43db      	mvns	r3, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4013      	ands	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ba8:	2201      	movs	r2, #1
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	091b      	lsrs	r3, r3, #4
 8002bbe:	f003 0201 	and.w	r2, r3, #1
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d017      	beq.n	8002c10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	2203      	movs	r2, #3
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d123      	bne.n	8002c64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	08da      	lsrs	r2, r3, #3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3208      	adds	r2, #8
 8002c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	220f      	movs	r2, #15
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	08da      	lsrs	r2, r3, #3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3208      	adds	r2, #8
 8002c5e:	69b9      	ldr	r1, [r7, #24]
 8002c60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	2203      	movs	r2, #3
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 0203 	and.w	r2, r3, #3
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80b4 	beq.w	8002e0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	4b60      	ldr	r3, [pc, #384]	@ (8002e2c <HAL_GPIO_Init+0x30c>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cae:	4a5f      	ldr	r2, [pc, #380]	@ (8002e2c <HAL_GPIO_Init+0x30c>)
 8002cb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cb6:	4b5d      	ldr	r3, [pc, #372]	@ (8002e2c <HAL_GPIO_Init+0x30c>)
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cc2:	4a5b      	ldr	r2, [pc, #364]	@ (8002e30 <HAL_GPIO_Init+0x310>)
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	089b      	lsrs	r3, r3, #2
 8002cc8:	3302      	adds	r3, #2
 8002cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	220f      	movs	r2, #15
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a52      	ldr	r2, [pc, #328]	@ (8002e34 <HAL_GPIO_Init+0x314>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d02b      	beq.n	8002d46 <HAL_GPIO_Init+0x226>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a51      	ldr	r2, [pc, #324]	@ (8002e38 <HAL_GPIO_Init+0x318>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d025      	beq.n	8002d42 <HAL_GPIO_Init+0x222>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a50      	ldr	r2, [pc, #320]	@ (8002e3c <HAL_GPIO_Init+0x31c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d01f      	beq.n	8002d3e <HAL_GPIO_Init+0x21e>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a4f      	ldr	r2, [pc, #316]	@ (8002e40 <HAL_GPIO_Init+0x320>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d019      	beq.n	8002d3a <HAL_GPIO_Init+0x21a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a4e      	ldr	r2, [pc, #312]	@ (8002e44 <HAL_GPIO_Init+0x324>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d013      	beq.n	8002d36 <HAL_GPIO_Init+0x216>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a4d      	ldr	r2, [pc, #308]	@ (8002e48 <HAL_GPIO_Init+0x328>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d00d      	beq.n	8002d32 <HAL_GPIO_Init+0x212>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a4c      	ldr	r2, [pc, #304]	@ (8002e4c <HAL_GPIO_Init+0x32c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d007      	beq.n	8002d2e <HAL_GPIO_Init+0x20e>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a4b      	ldr	r2, [pc, #300]	@ (8002e50 <HAL_GPIO_Init+0x330>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d101      	bne.n	8002d2a <HAL_GPIO_Init+0x20a>
 8002d26:	2307      	movs	r3, #7
 8002d28:	e00e      	b.n	8002d48 <HAL_GPIO_Init+0x228>
 8002d2a:	2308      	movs	r3, #8
 8002d2c:	e00c      	b.n	8002d48 <HAL_GPIO_Init+0x228>
 8002d2e:	2306      	movs	r3, #6
 8002d30:	e00a      	b.n	8002d48 <HAL_GPIO_Init+0x228>
 8002d32:	2305      	movs	r3, #5
 8002d34:	e008      	b.n	8002d48 <HAL_GPIO_Init+0x228>
 8002d36:	2304      	movs	r3, #4
 8002d38:	e006      	b.n	8002d48 <HAL_GPIO_Init+0x228>
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e004      	b.n	8002d48 <HAL_GPIO_Init+0x228>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e002      	b.n	8002d48 <HAL_GPIO_Init+0x228>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <HAL_GPIO_Init+0x228>
 8002d46:	2300      	movs	r3, #0
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	f002 0203 	and.w	r2, r2, #3
 8002d4e:	0092      	lsls	r2, r2, #2
 8002d50:	4093      	lsls	r3, r2
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d58:	4935      	ldr	r1, [pc, #212]	@ (8002e30 <HAL_GPIO_Init+0x310>)
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	089b      	lsrs	r3, r3, #2
 8002d5e:	3302      	adds	r3, #2
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d66:	4b3b      	ldr	r3, [pc, #236]	@ (8002e54 <HAL_GPIO_Init+0x334>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d8a:	4a32      	ldr	r2, [pc, #200]	@ (8002e54 <HAL_GPIO_Init+0x334>)
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d90:	4b30      	ldr	r3, [pc, #192]	@ (8002e54 <HAL_GPIO_Init+0x334>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002db4:	4a27      	ldr	r2, [pc, #156]	@ (8002e54 <HAL_GPIO_Init+0x334>)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dba:	4b26      	ldr	r3, [pc, #152]	@ (8002e54 <HAL_GPIO_Init+0x334>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dde:	4a1d      	ldr	r2, [pc, #116]	@ (8002e54 <HAL_GPIO_Init+0x334>)
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002de4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e54 <HAL_GPIO_Init+0x334>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e08:	4a12      	ldr	r2, [pc, #72]	@ (8002e54 <HAL_GPIO_Init+0x334>)
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	3301      	adds	r3, #1
 8002e12:	61fb      	str	r3, [r7, #28]
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	2b0f      	cmp	r3, #15
 8002e18:	f67f ae90 	bls.w	8002b3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	bf00      	nop
 8002e20:	3724      	adds	r7, #36	@ 0x24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40013800 	.word	0x40013800
 8002e34:	40020000 	.word	0x40020000
 8002e38:	40020400 	.word	0x40020400
 8002e3c:	40020800 	.word	0x40020800
 8002e40:	40020c00 	.word	0x40020c00
 8002e44:	40021000 	.word	0x40021000
 8002e48:	40021400 	.word	0x40021400
 8002e4c:	40021800 	.word	0x40021800
 8002e50:	40021c00 	.word	0x40021c00
 8002e54:	40013c00 	.word	0x40013c00

08002e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	807b      	strh	r3, [r7, #2]
 8002e64:	4613      	mov	r3, r2
 8002e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e68:	787b      	ldrb	r3, [r7, #1]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e6e:	887a      	ldrh	r2, [r7, #2]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e74:	e003      	b.n	8002e7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e76:	887b      	ldrh	r3, [r7, #2]
 8002e78:	041a      	lsls	r2, r3, #16
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	619a      	str	r2, [r3, #24]
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b085      	sub	sp, #20
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	460b      	mov	r3, r1
 8002e94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e9c:	887a      	ldrh	r2, [r7, #2]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	041a      	lsls	r2, r3, #16
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	43d9      	mvns	r1, r3
 8002ea8:	887b      	ldrh	r3, [r7, #2]
 8002eaa:	400b      	ands	r3, r1
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	619a      	str	r2, [r3, #24]
}
 8002eb2:	bf00      	nop
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
	...

08002ec0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002eca:	4b08      	ldr	r3, [pc, #32]	@ (8002eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ecc:	695a      	ldr	r2, [r3, #20]
 8002ece:	88fb      	ldrh	r3, [r7, #6]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d006      	beq.n	8002ee4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ed6:	4a05      	ldr	r2, [pc, #20]	@ (8002eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ed8:	88fb      	ldrh	r3, [r7, #6]
 8002eda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002edc:	88fb      	ldrh	r3, [r7, #6]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fd ff40 	bl	8000d64 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40013c00 	.word	0x40013c00

08002ef0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e267      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d075      	beq.n	8002ffa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f0e:	4b88      	ldr	r3, [pc, #544]	@ (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d00c      	beq.n	8002f34 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f1a:	4b85      	ldr	r3, [pc, #532]	@ (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d112      	bne.n	8002f4c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f26:	4b82      	ldr	r3, [pc, #520]	@ (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f32:	d10b      	bne.n	8002f4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f34:	4b7e      	ldr	r3, [pc, #504]	@ (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d05b      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x108>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d157      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e242      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f54:	d106      	bne.n	8002f64 <HAL_RCC_OscConfig+0x74>
 8002f56:	4b76      	ldr	r3, [pc, #472]	@ (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a75      	ldr	r2, [pc, #468]	@ (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	e01d      	b.n	8002fa0 <HAL_RCC_OscConfig+0xb0>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f6c:	d10c      	bne.n	8002f88 <HAL_RCC_OscConfig+0x98>
 8002f6e:	4b70      	ldr	r3, [pc, #448]	@ (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a6f      	ldr	r2, [pc, #444]	@ (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	4b6d      	ldr	r3, [pc, #436]	@ (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a6c      	ldr	r2, [pc, #432]	@ (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	e00b      	b.n	8002fa0 <HAL_RCC_OscConfig+0xb0>
 8002f88:	4b69      	ldr	r3, [pc, #420]	@ (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a68      	ldr	r2, [pc, #416]	@ (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	4b66      	ldr	r3, [pc, #408]	@ (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a65      	ldr	r2, [pc, #404]	@ (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d013      	beq.n	8002fd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa8:	f7fe fa28 	bl	80013fc <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb0:	f7fe fa24 	bl	80013fc <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b64      	cmp	r3, #100	@ 0x64
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e207      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc2:	4b5b      	ldr	r3, [pc, #364]	@ (8003130 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0xc0>
 8002fce:	e014      	b.n	8002ffa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7fe fa14 	bl	80013fc <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd8:	f7fe fa10 	bl	80013fc <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b64      	cmp	r3, #100	@ 0x64
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e1f3      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fea:	4b51      	ldr	r3, [pc, #324]	@ (8003130 <HAL_RCC_OscConfig+0x240>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0xe8>
 8002ff6:	e000      	b.n	8002ffa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d063      	beq.n	80030ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003006:	4b4a      	ldr	r3, [pc, #296]	@ (8003130 <HAL_RCC_OscConfig+0x240>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00b      	beq.n	800302a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003012:	4b47      	ldr	r3, [pc, #284]	@ (8003130 <HAL_RCC_OscConfig+0x240>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800301a:	2b08      	cmp	r3, #8
 800301c:	d11c      	bne.n	8003058 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800301e:	4b44      	ldr	r3, [pc, #272]	@ (8003130 <HAL_RCC_OscConfig+0x240>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d116      	bne.n	8003058 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800302a:	4b41      	ldr	r3, [pc, #260]	@ (8003130 <HAL_RCC_OscConfig+0x240>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d005      	beq.n	8003042 <HAL_RCC_OscConfig+0x152>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d001      	beq.n	8003042 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e1c7      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003042:	4b3b      	ldr	r3, [pc, #236]	@ (8003130 <HAL_RCC_OscConfig+0x240>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4937      	ldr	r1, [pc, #220]	@ (8003130 <HAL_RCC_OscConfig+0x240>)
 8003052:	4313      	orrs	r3, r2
 8003054:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003056:	e03a      	b.n	80030ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d020      	beq.n	80030a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003060:	4b34      	ldr	r3, [pc, #208]	@ (8003134 <HAL_RCC_OscConfig+0x244>)
 8003062:	2201      	movs	r2, #1
 8003064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003066:	f7fe f9c9 	bl	80013fc <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800306e:	f7fe f9c5 	bl	80013fc <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e1a8      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003080:	4b2b      	ldr	r3, [pc, #172]	@ (8003130 <HAL_RCC_OscConfig+0x240>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0f0      	beq.n	800306e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308c:	4b28      	ldr	r3, [pc, #160]	@ (8003130 <HAL_RCC_OscConfig+0x240>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4925      	ldr	r1, [pc, #148]	@ (8003130 <HAL_RCC_OscConfig+0x240>)
 800309c:	4313      	orrs	r3, r2
 800309e:	600b      	str	r3, [r1, #0]
 80030a0:	e015      	b.n	80030ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030a2:	4b24      	ldr	r3, [pc, #144]	@ (8003134 <HAL_RCC_OscConfig+0x244>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a8:	f7fe f9a8 	bl	80013fc <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b0:	f7fe f9a4 	bl	80013fc <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e187      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003130 <HAL_RCC_OscConfig+0x240>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d036      	beq.n	8003148 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d016      	beq.n	8003110 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030e2:	4b15      	ldr	r3, [pc, #84]	@ (8003138 <HAL_RCC_OscConfig+0x248>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e8:	f7fe f988 	bl	80013fc <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f0:	f7fe f984 	bl	80013fc <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e167      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003102:	4b0b      	ldr	r3, [pc, #44]	@ (8003130 <HAL_RCC_OscConfig+0x240>)
 8003104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCC_OscConfig+0x200>
 800310e:	e01b      	b.n	8003148 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003110:	4b09      	ldr	r3, [pc, #36]	@ (8003138 <HAL_RCC_OscConfig+0x248>)
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003116:	f7fe f971 	bl	80013fc <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800311c:	e00e      	b.n	800313c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800311e:	f7fe f96d 	bl	80013fc <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d907      	bls.n	800313c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e150      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
 8003130:	40023800 	.word	0x40023800
 8003134:	42470000 	.word	0x42470000
 8003138:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800313c:	4b88      	ldr	r3, [pc, #544]	@ (8003360 <HAL_RCC_OscConfig+0x470>)
 800313e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1ea      	bne.n	800311e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 8097 	beq.w	8003284 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003156:	2300      	movs	r3, #0
 8003158:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800315a:	4b81      	ldr	r3, [pc, #516]	@ (8003360 <HAL_RCC_OscConfig+0x470>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10f      	bne.n	8003186 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	60bb      	str	r3, [r7, #8]
 800316a:	4b7d      	ldr	r3, [pc, #500]	@ (8003360 <HAL_RCC_OscConfig+0x470>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316e:	4a7c      	ldr	r2, [pc, #496]	@ (8003360 <HAL_RCC_OscConfig+0x470>)
 8003170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003174:	6413      	str	r3, [r2, #64]	@ 0x40
 8003176:	4b7a      	ldr	r3, [pc, #488]	@ (8003360 <HAL_RCC_OscConfig+0x470>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003182:	2301      	movs	r3, #1
 8003184:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003186:	4b77      	ldr	r3, [pc, #476]	@ (8003364 <HAL_RCC_OscConfig+0x474>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800318e:	2b00      	cmp	r3, #0
 8003190:	d118      	bne.n	80031c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003192:	4b74      	ldr	r3, [pc, #464]	@ (8003364 <HAL_RCC_OscConfig+0x474>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a73      	ldr	r2, [pc, #460]	@ (8003364 <HAL_RCC_OscConfig+0x474>)
 8003198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800319c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800319e:	f7fe f92d 	bl	80013fc <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031a6:	f7fe f929 	bl	80013fc <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e10c      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b8:	4b6a      	ldr	r3, [pc, #424]	@ (8003364 <HAL_RCC_OscConfig+0x474>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0f0      	beq.n	80031a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d106      	bne.n	80031da <HAL_RCC_OscConfig+0x2ea>
 80031cc:	4b64      	ldr	r3, [pc, #400]	@ (8003360 <HAL_RCC_OscConfig+0x470>)
 80031ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d0:	4a63      	ldr	r2, [pc, #396]	@ (8003360 <HAL_RCC_OscConfig+0x470>)
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80031d8:	e01c      	b.n	8003214 <HAL_RCC_OscConfig+0x324>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2b05      	cmp	r3, #5
 80031e0:	d10c      	bne.n	80031fc <HAL_RCC_OscConfig+0x30c>
 80031e2:	4b5f      	ldr	r3, [pc, #380]	@ (8003360 <HAL_RCC_OscConfig+0x470>)
 80031e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e6:	4a5e      	ldr	r2, [pc, #376]	@ (8003360 <HAL_RCC_OscConfig+0x470>)
 80031e8:	f043 0304 	orr.w	r3, r3, #4
 80031ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80031ee:	4b5c      	ldr	r3, [pc, #368]	@ (8003360 <HAL_RCC_OscConfig+0x470>)
 80031f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f2:	4a5b      	ldr	r2, [pc, #364]	@ (8003360 <HAL_RCC_OscConfig+0x470>)
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80031fa:	e00b      	b.n	8003214 <HAL_RCC_OscConfig+0x324>
 80031fc:	4b58      	ldr	r3, [pc, #352]	@ (8003360 <HAL_RCC_OscConfig+0x470>)
 80031fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003200:	4a57      	ldr	r2, [pc, #348]	@ (8003360 <HAL_RCC_OscConfig+0x470>)
 8003202:	f023 0301 	bic.w	r3, r3, #1
 8003206:	6713      	str	r3, [r2, #112]	@ 0x70
 8003208:	4b55      	ldr	r3, [pc, #340]	@ (8003360 <HAL_RCC_OscConfig+0x470>)
 800320a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320c:	4a54      	ldr	r2, [pc, #336]	@ (8003360 <HAL_RCC_OscConfig+0x470>)
 800320e:	f023 0304 	bic.w	r3, r3, #4
 8003212:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d015      	beq.n	8003248 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321c:	f7fe f8ee 	bl	80013fc <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003222:	e00a      	b.n	800323a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003224:	f7fe f8ea 	bl	80013fc <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003232:	4293      	cmp	r3, r2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e0cb      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323a:	4b49      	ldr	r3, [pc, #292]	@ (8003360 <HAL_RCC_OscConfig+0x470>)
 800323c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0ee      	beq.n	8003224 <HAL_RCC_OscConfig+0x334>
 8003246:	e014      	b.n	8003272 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003248:	f7fe f8d8 	bl	80013fc <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800324e:	e00a      	b.n	8003266 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003250:	f7fe f8d4 	bl	80013fc <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800325e:	4293      	cmp	r3, r2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e0b5      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003266:	4b3e      	ldr	r3, [pc, #248]	@ (8003360 <HAL_RCC_OscConfig+0x470>)
 8003268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1ee      	bne.n	8003250 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003272:	7dfb      	ldrb	r3, [r7, #23]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d105      	bne.n	8003284 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003278:	4b39      	ldr	r3, [pc, #228]	@ (8003360 <HAL_RCC_OscConfig+0x470>)
 800327a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327c:	4a38      	ldr	r2, [pc, #224]	@ (8003360 <HAL_RCC_OscConfig+0x470>)
 800327e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003282:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 80a1 	beq.w	80033d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800328e:	4b34      	ldr	r3, [pc, #208]	@ (8003360 <HAL_RCC_OscConfig+0x470>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	2b08      	cmp	r3, #8
 8003298:	d05c      	beq.n	8003354 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d141      	bne.n	8003326 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a2:	4b31      	ldr	r3, [pc, #196]	@ (8003368 <HAL_RCC_OscConfig+0x478>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a8:	f7fe f8a8 	bl	80013fc <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b0:	f7fe f8a4 	bl	80013fc <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e087      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c2:	4b27      	ldr	r3, [pc, #156]	@ (8003360 <HAL_RCC_OscConfig+0x470>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69da      	ldr	r2, [r3, #28]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032dc:	019b      	lsls	r3, r3, #6
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	3b01      	subs	r3, #1
 80032e8:	041b      	lsls	r3, r3, #16
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f0:	061b      	lsls	r3, r3, #24
 80032f2:	491b      	ldr	r1, [pc, #108]	@ (8003360 <HAL_RCC_OscConfig+0x470>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003368 <HAL_RCC_OscConfig+0x478>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fe:	f7fe f87d 	bl	80013fc <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003306:	f7fe f879 	bl	80013fc <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e05c      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003318:	4b11      	ldr	r3, [pc, #68]	@ (8003360 <HAL_RCC_OscConfig+0x470>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x416>
 8003324:	e054      	b.n	80033d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003326:	4b10      	ldr	r3, [pc, #64]	@ (8003368 <HAL_RCC_OscConfig+0x478>)
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332c:	f7fe f866 	bl	80013fc <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003334:	f7fe f862 	bl	80013fc <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e045      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003346:	4b06      	ldr	r3, [pc, #24]	@ (8003360 <HAL_RCC_OscConfig+0x470>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0x444>
 8003352:	e03d      	b.n	80033d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d107      	bne.n	800336c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e038      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
 8003360:	40023800 	.word	0x40023800
 8003364:	40007000 	.word	0x40007000
 8003368:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800336c:	4b1b      	ldr	r3, [pc, #108]	@ (80033dc <HAL_RCC_OscConfig+0x4ec>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d028      	beq.n	80033cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003384:	429a      	cmp	r2, r3
 8003386:	d121      	bne.n	80033cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003392:	429a      	cmp	r2, r3
 8003394:	d11a      	bne.n	80033cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800339c:	4013      	ands	r3, r2
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d111      	bne.n	80033cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b2:	085b      	lsrs	r3, r3, #1
 80033b4:	3b01      	subs	r3, #1
 80033b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d107      	bne.n	80033cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d001      	beq.n	80033d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e000      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40023800 	.word	0x40023800

080033e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e0cc      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033f4:	4b68      	ldr	r3, [pc, #416]	@ (8003598 <HAL_RCC_ClockConfig+0x1b8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d90c      	bls.n	800341c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003402:	4b65      	ldr	r3, [pc, #404]	@ (8003598 <HAL_RCC_ClockConfig+0x1b8>)
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800340a:	4b63      	ldr	r3, [pc, #396]	@ (8003598 <HAL_RCC_ClockConfig+0x1b8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d001      	beq.n	800341c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0b8      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d020      	beq.n	800346a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003434:	4b59      	ldr	r3, [pc, #356]	@ (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	4a58      	ldr	r2, [pc, #352]	@ (800359c <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800343e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800344c:	4b53      	ldr	r3, [pc, #332]	@ (800359c <HAL_RCC_ClockConfig+0x1bc>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	4a52      	ldr	r2, [pc, #328]	@ (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003456:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003458:	4b50      	ldr	r3, [pc, #320]	@ (800359c <HAL_RCC_ClockConfig+0x1bc>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	494d      	ldr	r1, [pc, #308]	@ (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	4313      	orrs	r3, r2
 8003468:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d044      	beq.n	8003500 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d107      	bne.n	800348e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347e:	4b47      	ldr	r3, [pc, #284]	@ (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d119      	bne.n	80034be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e07f      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d003      	beq.n	800349e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800349a:	2b03      	cmp	r3, #3
 800349c:	d107      	bne.n	80034ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800349e:	4b3f      	ldr	r3, [pc, #252]	@ (800359c <HAL_RCC_ClockConfig+0x1bc>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d109      	bne.n	80034be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e06f      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ae:	4b3b      	ldr	r3, [pc, #236]	@ (800359c <HAL_RCC_ClockConfig+0x1bc>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e067      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034be:	4b37      	ldr	r3, [pc, #220]	@ (800359c <HAL_RCC_ClockConfig+0x1bc>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f023 0203 	bic.w	r2, r3, #3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	4934      	ldr	r1, [pc, #208]	@ (800359c <HAL_RCC_ClockConfig+0x1bc>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034d0:	f7fd ff94 	bl	80013fc <HAL_GetTick>
 80034d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d6:	e00a      	b.n	80034ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d8:	f7fd ff90 	bl	80013fc <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e04f      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ee:	4b2b      	ldr	r3, [pc, #172]	@ (800359c <HAL_RCC_ClockConfig+0x1bc>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 020c 	and.w	r2, r3, #12
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d1eb      	bne.n	80034d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003500:	4b25      	ldr	r3, [pc, #148]	@ (8003598 <HAL_RCC_ClockConfig+0x1b8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d20c      	bcs.n	8003528 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350e:	4b22      	ldr	r3, [pc, #136]	@ (8003598 <HAL_RCC_ClockConfig+0x1b8>)
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003516:	4b20      	ldr	r3, [pc, #128]	@ (8003598 <HAL_RCC_ClockConfig+0x1b8>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d001      	beq.n	8003528 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e032      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b00      	cmp	r3, #0
 8003532:	d008      	beq.n	8003546 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003534:	4b19      	ldr	r3, [pc, #100]	@ (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	4916      	ldr	r1, [pc, #88]	@ (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	4313      	orrs	r3, r2
 8003544:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d009      	beq.n	8003566 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003552:	4b12      	ldr	r3, [pc, #72]	@ (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	490e      	ldr	r1, [pc, #56]	@ (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003562:	4313      	orrs	r3, r2
 8003564:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003566:	f000 f821 	bl	80035ac <HAL_RCC_GetSysClockFreq>
 800356a:	4602      	mov	r2, r0
 800356c:	4b0b      	ldr	r3, [pc, #44]	@ (800359c <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	091b      	lsrs	r3, r3, #4
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	490a      	ldr	r1, [pc, #40]	@ (80035a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003578:	5ccb      	ldrb	r3, [r1, r3]
 800357a:	fa22 f303 	lsr.w	r3, r2, r3
 800357e:	4a09      	ldr	r2, [pc, #36]	@ (80035a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003582:	4b09      	ldr	r3, [pc, #36]	@ (80035a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f7fd fef4 	bl	8001374 <HAL_InitTick>

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40023c00 	.word	0x40023c00
 800359c:	40023800 	.word	0x40023800
 80035a0:	08013128 	.word	0x08013128
 80035a4:	20000000 	.word	0x20000000
 80035a8:	20000004 	.word	0x20000004

080035ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035b0:	b090      	sub	sp, #64	@ 0x40
 80035b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80035b8:	2300      	movs	r3, #0
 80035ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035c4:	4b59      	ldr	r3, [pc, #356]	@ (800372c <HAL_RCC_GetSysClockFreq+0x180>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 030c 	and.w	r3, r3, #12
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d00d      	beq.n	80035ec <HAL_RCC_GetSysClockFreq+0x40>
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	f200 80a1 	bhi.w	8003718 <HAL_RCC_GetSysClockFreq+0x16c>
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <HAL_RCC_GetSysClockFreq+0x34>
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d003      	beq.n	80035e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80035de:	e09b      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035e0:	4b53      	ldr	r3, [pc, #332]	@ (8003730 <HAL_RCC_GetSysClockFreq+0x184>)
 80035e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035e4:	e09b      	b.n	800371e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035e6:	4b53      	ldr	r3, [pc, #332]	@ (8003734 <HAL_RCC_GetSysClockFreq+0x188>)
 80035e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035ea:	e098      	b.n	800371e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035ec:	4b4f      	ldr	r3, [pc, #316]	@ (800372c <HAL_RCC_GetSysClockFreq+0x180>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035f6:	4b4d      	ldr	r3, [pc, #308]	@ (800372c <HAL_RCC_GetSysClockFreq+0x180>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d028      	beq.n	8003654 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003602:	4b4a      	ldr	r3, [pc, #296]	@ (800372c <HAL_RCC_GetSysClockFreq+0x180>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	099b      	lsrs	r3, r3, #6
 8003608:	2200      	movs	r2, #0
 800360a:	623b      	str	r3, [r7, #32]
 800360c:	627a      	str	r2, [r7, #36]	@ 0x24
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003614:	2100      	movs	r1, #0
 8003616:	4b47      	ldr	r3, [pc, #284]	@ (8003734 <HAL_RCC_GetSysClockFreq+0x188>)
 8003618:	fb03 f201 	mul.w	r2, r3, r1
 800361c:	2300      	movs	r3, #0
 800361e:	fb00 f303 	mul.w	r3, r0, r3
 8003622:	4413      	add	r3, r2
 8003624:	4a43      	ldr	r2, [pc, #268]	@ (8003734 <HAL_RCC_GetSysClockFreq+0x188>)
 8003626:	fba0 1202 	umull	r1, r2, r0, r2
 800362a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800362c:	460a      	mov	r2, r1
 800362e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003630:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003632:	4413      	add	r3, r2
 8003634:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003638:	2200      	movs	r2, #0
 800363a:	61bb      	str	r3, [r7, #24]
 800363c:	61fa      	str	r2, [r7, #28]
 800363e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003642:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003646:	f7fc fe1b 	bl	8000280 <__aeabi_uldivmod>
 800364a:	4602      	mov	r2, r0
 800364c:	460b      	mov	r3, r1
 800364e:	4613      	mov	r3, r2
 8003650:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003652:	e053      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003654:	4b35      	ldr	r3, [pc, #212]	@ (800372c <HAL_RCC_GetSysClockFreq+0x180>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	099b      	lsrs	r3, r3, #6
 800365a:	2200      	movs	r2, #0
 800365c:	613b      	str	r3, [r7, #16]
 800365e:	617a      	str	r2, [r7, #20]
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003666:	f04f 0b00 	mov.w	fp, #0
 800366a:	4652      	mov	r2, sl
 800366c:	465b      	mov	r3, fp
 800366e:	f04f 0000 	mov.w	r0, #0
 8003672:	f04f 0100 	mov.w	r1, #0
 8003676:	0159      	lsls	r1, r3, #5
 8003678:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800367c:	0150      	lsls	r0, r2, #5
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	ebb2 080a 	subs.w	r8, r2, sl
 8003686:	eb63 090b 	sbc.w	r9, r3, fp
 800368a:	f04f 0200 	mov.w	r2, #0
 800368e:	f04f 0300 	mov.w	r3, #0
 8003692:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003696:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800369a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800369e:	ebb2 0408 	subs.w	r4, r2, r8
 80036a2:	eb63 0509 	sbc.w	r5, r3, r9
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	00eb      	lsls	r3, r5, #3
 80036b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036b4:	00e2      	lsls	r2, r4, #3
 80036b6:	4614      	mov	r4, r2
 80036b8:	461d      	mov	r5, r3
 80036ba:	eb14 030a 	adds.w	r3, r4, sl
 80036be:	603b      	str	r3, [r7, #0]
 80036c0:	eb45 030b 	adc.w	r3, r5, fp
 80036c4:	607b      	str	r3, [r7, #4]
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036d2:	4629      	mov	r1, r5
 80036d4:	028b      	lsls	r3, r1, #10
 80036d6:	4621      	mov	r1, r4
 80036d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036dc:	4621      	mov	r1, r4
 80036de:	028a      	lsls	r2, r1, #10
 80036e0:	4610      	mov	r0, r2
 80036e2:	4619      	mov	r1, r3
 80036e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036e6:	2200      	movs	r2, #0
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	60fa      	str	r2, [r7, #12]
 80036ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036f0:	f7fc fdc6 	bl	8000280 <__aeabi_uldivmod>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4613      	mov	r3, r2
 80036fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80036fc:	4b0b      	ldr	r3, [pc, #44]	@ (800372c <HAL_RCC_GetSysClockFreq+0x180>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	0c1b      	lsrs	r3, r3, #16
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	3301      	adds	r3, #1
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800370c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800370e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003710:	fbb2 f3f3 	udiv	r3, r2, r3
 8003714:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003716:	e002      	b.n	800371e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003718:	4b05      	ldr	r3, [pc, #20]	@ (8003730 <HAL_RCC_GetSysClockFreq+0x184>)
 800371a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800371c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800371e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003720:	4618      	mov	r0, r3
 8003722:	3740      	adds	r7, #64	@ 0x40
 8003724:	46bd      	mov	sp, r7
 8003726:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800372a:	bf00      	nop
 800372c:	40023800 	.word	0x40023800
 8003730:	00f42400 	.word	0x00f42400
 8003734:	017d7840 	.word	0x017d7840

08003738 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800373c:	4b03      	ldr	r3, [pc, #12]	@ (800374c <HAL_RCC_GetHCLKFreq+0x14>)
 800373e:	681b      	ldr	r3, [r3, #0]
}
 8003740:	4618      	mov	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	20000000 	.word	0x20000000

08003750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003754:	f7ff fff0 	bl	8003738 <HAL_RCC_GetHCLKFreq>
 8003758:	4602      	mov	r2, r0
 800375a:	4b05      	ldr	r3, [pc, #20]	@ (8003770 <HAL_RCC_GetPCLK1Freq+0x20>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	0a9b      	lsrs	r3, r3, #10
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	4903      	ldr	r1, [pc, #12]	@ (8003774 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003766:	5ccb      	ldrb	r3, [r1, r3]
 8003768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800376c:	4618      	mov	r0, r3
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40023800 	.word	0x40023800
 8003774:	08013138 	.word	0x08013138

08003778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800377c:	f7ff ffdc 	bl	8003738 <HAL_RCC_GetHCLKFreq>
 8003780:	4602      	mov	r2, r0
 8003782:	4b05      	ldr	r3, [pc, #20]	@ (8003798 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	0b5b      	lsrs	r3, r3, #13
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	4903      	ldr	r1, [pc, #12]	@ (800379c <HAL_RCC_GetPCLK2Freq+0x24>)
 800378e:	5ccb      	ldrb	r3, [r1, r3]
 8003790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003794:	4618      	mov	r0, r3
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40023800 	.word	0x40023800
 800379c:	08013138 	.word	0x08013138

080037a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e042      	b.n	8003838 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7fd fb1e 	bl	8000e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2224      	movs	r2, #36	@ 0x24
 80037d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f973 	bl	8003ad0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	691a      	ldr	r2, [r3, #16]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695a      	ldr	r2, [r3, #20]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003808:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003818:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b08a      	sub	sp, #40	@ 0x28
 8003844:	af02      	add	r7, sp, #8
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	603b      	str	r3, [r7, #0]
 800384c:	4613      	mov	r3, r2
 800384e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b20      	cmp	r3, #32
 800385e:	d175      	bne.n	800394c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_UART_Transmit+0x2c>
 8003866:	88fb      	ldrh	r3, [r7, #6]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e06e      	b.n	800394e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2221      	movs	r2, #33	@ 0x21
 800387a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800387e:	f7fd fdbd 	bl	80013fc <HAL_GetTick>
 8003882:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	88fa      	ldrh	r2, [r7, #6]
 8003888:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	88fa      	ldrh	r2, [r7, #6]
 800388e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003898:	d108      	bne.n	80038ac <HAL_UART_Transmit+0x6c>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d104      	bne.n	80038ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80038a2:	2300      	movs	r3, #0
 80038a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	61bb      	str	r3, [r7, #24]
 80038aa:	e003      	b.n	80038b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038b0:	2300      	movs	r3, #0
 80038b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038b4:	e02e      	b.n	8003914 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2200      	movs	r2, #0
 80038be:	2180      	movs	r1, #128	@ 0x80
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f848 	bl	8003956 <UART_WaitOnFlagUntilTimeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e03a      	b.n	800394e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10b      	bne.n	80038f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	3302      	adds	r3, #2
 80038f2:	61bb      	str	r3, [r7, #24]
 80038f4:	e007      	b.n	8003906 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	781a      	ldrb	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	3301      	adds	r3, #1
 8003904:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1cb      	bne.n	80038b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2200      	movs	r2, #0
 8003926:	2140      	movs	r1, #64	@ 0x40
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 f814 	bl	8003956 <UART_WaitOnFlagUntilTimeout>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d005      	beq.n	8003940 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2220      	movs	r2, #32
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e006      	b.n	800394e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003948:	2300      	movs	r3, #0
 800394a:	e000      	b.n	800394e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800394c:	2302      	movs	r3, #2
  }
}
 800394e:	4618      	mov	r0, r3
 8003950:	3720      	adds	r7, #32
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b086      	sub	sp, #24
 800395a:	af00      	add	r7, sp, #0
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	603b      	str	r3, [r7, #0]
 8003962:	4613      	mov	r3, r2
 8003964:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003966:	e03b      	b.n	80039e0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800396e:	d037      	beq.n	80039e0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003970:	f7fd fd44 	bl	80013fc <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	6a3a      	ldr	r2, [r7, #32]
 800397c:	429a      	cmp	r2, r3
 800397e:	d302      	bcc.n	8003986 <UART_WaitOnFlagUntilTimeout+0x30>
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e03a      	b.n	8003a00 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	d023      	beq.n	80039e0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b80      	cmp	r3, #128	@ 0x80
 800399c:	d020      	beq.n	80039e0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b40      	cmp	r3, #64	@ 0x40
 80039a2:	d01d      	beq.n	80039e0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d116      	bne.n	80039e0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80039b2:	2300      	movs	r3, #0
 80039b4:	617b      	str	r3, [r7, #20]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	617b      	str	r3, [r7, #20]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 f81d 	bl	8003a08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2208      	movs	r2, #8
 80039d2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e00f      	b.n	8003a00 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	4013      	ands	r3, r2
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	bf0c      	ite	eq
 80039f0:	2301      	moveq	r3, #1
 80039f2:	2300      	movne	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	461a      	mov	r2, r3
 80039f8:	79fb      	ldrb	r3, [r7, #7]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d0b4      	beq.n	8003968 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b095      	sub	sp, #84	@ 0x54
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	330c      	adds	r3, #12
 8003a16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a1a:	e853 3f00 	ldrex	r3, [r3]
 8003a1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	330c      	adds	r3, #12
 8003a2e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a30:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a38:	e841 2300 	strex	r3, r2, [r1]
 8003a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1e5      	bne.n	8003a10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3314      	adds	r3, #20
 8003a4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	e853 3f00 	ldrex	r3, [r3]
 8003a52:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	f023 0301 	bic.w	r3, r3, #1
 8003a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3314      	adds	r3, #20
 8003a62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a6c:	e841 2300 	strex	r3, r2, [r1]
 8003a70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1e5      	bne.n	8003a44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d119      	bne.n	8003ab4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	330c      	adds	r3, #12
 8003a86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	e853 3f00 	ldrex	r3, [r3]
 8003a8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f023 0310 	bic.w	r3, r3, #16
 8003a96:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	330c      	adds	r3, #12
 8003a9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003aa0:	61ba      	str	r2, [r7, #24]
 8003aa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa4:	6979      	ldr	r1, [r7, #20]
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	e841 2300 	strex	r3, r2, [r1]
 8003aac:	613b      	str	r3, [r7, #16]
   return(result);
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1e5      	bne.n	8003a80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ac2:	bf00      	nop
 8003ac4:	3754      	adds	r7, #84	@ 0x54
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
	...

08003ad0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ad4:	b0c0      	sub	sp, #256	@ 0x100
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aec:	68d9      	ldr	r1, [r3, #12]
 8003aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	ea40 0301 	orr.w	r3, r0, r1
 8003af8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	431a      	orrs	r2, r3
 8003b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003b28:	f021 010c 	bic.w	r1, r1, #12
 8003b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b36:	430b      	orrs	r3, r1
 8003b38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b4a:	6999      	ldr	r1, [r3, #24]
 8003b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	ea40 0301 	orr.w	r3, r0, r1
 8003b56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	4b8f      	ldr	r3, [pc, #572]	@ (8003d9c <UART_SetConfig+0x2cc>)
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d005      	beq.n	8003b70 <UART_SetConfig+0xa0>
 8003b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	4b8d      	ldr	r3, [pc, #564]	@ (8003da0 <UART_SetConfig+0x2d0>)
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d104      	bne.n	8003b7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b70:	f7ff fe02 	bl	8003778 <HAL_RCC_GetPCLK2Freq>
 8003b74:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003b78:	e003      	b.n	8003b82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b7a:	f7ff fde9 	bl	8003750 <HAL_RCC_GetPCLK1Freq>
 8003b7e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b8c:	f040 810c 	bne.w	8003da8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b94:	2200      	movs	r2, #0
 8003b96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b9a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003b9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003ba2:	4622      	mov	r2, r4
 8003ba4:	462b      	mov	r3, r5
 8003ba6:	1891      	adds	r1, r2, r2
 8003ba8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003baa:	415b      	adcs	r3, r3
 8003bac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003bb2:	4621      	mov	r1, r4
 8003bb4:	eb12 0801 	adds.w	r8, r2, r1
 8003bb8:	4629      	mov	r1, r5
 8003bba:	eb43 0901 	adc.w	r9, r3, r1
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	f04f 0300 	mov.w	r3, #0
 8003bc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bd2:	4690      	mov	r8, r2
 8003bd4:	4699      	mov	r9, r3
 8003bd6:	4623      	mov	r3, r4
 8003bd8:	eb18 0303 	adds.w	r3, r8, r3
 8003bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003be0:	462b      	mov	r3, r5
 8003be2:	eb49 0303 	adc.w	r3, r9, r3
 8003be6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003bf6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003bfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003bfe:	460b      	mov	r3, r1
 8003c00:	18db      	adds	r3, r3, r3
 8003c02:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c04:	4613      	mov	r3, r2
 8003c06:	eb42 0303 	adc.w	r3, r2, r3
 8003c0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c14:	f7fc fb34 	bl	8000280 <__aeabi_uldivmod>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4b61      	ldr	r3, [pc, #388]	@ (8003da4 <UART_SetConfig+0x2d4>)
 8003c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	011c      	lsls	r4, r3, #4
 8003c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c30:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c38:	4642      	mov	r2, r8
 8003c3a:	464b      	mov	r3, r9
 8003c3c:	1891      	adds	r1, r2, r2
 8003c3e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003c40:	415b      	adcs	r3, r3
 8003c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c48:	4641      	mov	r1, r8
 8003c4a:	eb12 0a01 	adds.w	sl, r2, r1
 8003c4e:	4649      	mov	r1, r9
 8003c50:	eb43 0b01 	adc.w	fp, r3, r1
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	f04f 0300 	mov.w	r3, #0
 8003c5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c68:	4692      	mov	sl, r2
 8003c6a:	469b      	mov	fp, r3
 8003c6c:	4643      	mov	r3, r8
 8003c6e:	eb1a 0303 	adds.w	r3, sl, r3
 8003c72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c76:	464b      	mov	r3, r9
 8003c78:	eb4b 0303 	adc.w	r3, fp, r3
 8003c7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c8c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003c90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c94:	460b      	mov	r3, r1
 8003c96:	18db      	adds	r3, r3, r3
 8003c98:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	eb42 0303 	adc.w	r3, r2, r3
 8003ca0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ca2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ca6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003caa:	f7fc fae9 	bl	8000280 <__aeabi_uldivmod>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	4611      	mov	r1, r2
 8003cb4:	4b3b      	ldr	r3, [pc, #236]	@ (8003da4 <UART_SetConfig+0x2d4>)
 8003cb6:	fba3 2301 	umull	r2, r3, r3, r1
 8003cba:	095b      	lsrs	r3, r3, #5
 8003cbc:	2264      	movs	r2, #100	@ 0x64
 8003cbe:	fb02 f303 	mul.w	r3, r2, r3
 8003cc2:	1acb      	subs	r3, r1, r3
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003cca:	4b36      	ldr	r3, [pc, #216]	@ (8003da4 <UART_SetConfig+0x2d4>)
 8003ccc:	fba3 2302 	umull	r2, r3, r3, r2
 8003cd0:	095b      	lsrs	r3, r3, #5
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003cd8:	441c      	add	r4, r3
 8003cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ce4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ce8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003cec:	4642      	mov	r2, r8
 8003cee:	464b      	mov	r3, r9
 8003cf0:	1891      	adds	r1, r2, r2
 8003cf2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003cf4:	415b      	adcs	r3, r3
 8003cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003cfc:	4641      	mov	r1, r8
 8003cfe:	1851      	adds	r1, r2, r1
 8003d00:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d02:	4649      	mov	r1, r9
 8003d04:	414b      	adcs	r3, r1
 8003d06:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d14:	4659      	mov	r1, fp
 8003d16:	00cb      	lsls	r3, r1, #3
 8003d18:	4651      	mov	r1, sl
 8003d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d1e:	4651      	mov	r1, sl
 8003d20:	00ca      	lsls	r2, r1, #3
 8003d22:	4610      	mov	r0, r2
 8003d24:	4619      	mov	r1, r3
 8003d26:	4603      	mov	r3, r0
 8003d28:	4642      	mov	r2, r8
 8003d2a:	189b      	adds	r3, r3, r2
 8003d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d30:	464b      	mov	r3, r9
 8003d32:	460a      	mov	r2, r1
 8003d34:	eb42 0303 	adc.w	r3, r2, r3
 8003d38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d48:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d50:	460b      	mov	r3, r1
 8003d52:	18db      	adds	r3, r3, r3
 8003d54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d56:	4613      	mov	r3, r2
 8003d58:	eb42 0303 	adc.w	r3, r2, r3
 8003d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d66:	f7fc fa8b 	bl	8000280 <__aeabi_uldivmod>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003da4 <UART_SetConfig+0x2d4>)
 8003d70:	fba3 1302 	umull	r1, r3, r3, r2
 8003d74:	095b      	lsrs	r3, r3, #5
 8003d76:	2164      	movs	r1, #100	@ 0x64
 8003d78:	fb01 f303 	mul.w	r3, r1, r3
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	3332      	adds	r3, #50	@ 0x32
 8003d82:	4a08      	ldr	r2, [pc, #32]	@ (8003da4 <UART_SetConfig+0x2d4>)
 8003d84:	fba2 2303 	umull	r2, r3, r2, r3
 8003d88:	095b      	lsrs	r3, r3, #5
 8003d8a:	f003 0207 	and.w	r2, r3, #7
 8003d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4422      	add	r2, r4
 8003d96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d98:	e106      	b.n	8003fa8 <UART_SetConfig+0x4d8>
 8003d9a:	bf00      	nop
 8003d9c:	40011000 	.word	0x40011000
 8003da0:	40011400 	.word	0x40011400
 8003da4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003da8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dac:	2200      	movs	r2, #0
 8003dae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003db2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003db6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003dba:	4642      	mov	r2, r8
 8003dbc:	464b      	mov	r3, r9
 8003dbe:	1891      	adds	r1, r2, r2
 8003dc0:	6239      	str	r1, [r7, #32]
 8003dc2:	415b      	adcs	r3, r3
 8003dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dca:	4641      	mov	r1, r8
 8003dcc:	1854      	adds	r4, r2, r1
 8003dce:	4649      	mov	r1, r9
 8003dd0:	eb43 0501 	adc.w	r5, r3, r1
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	f04f 0300 	mov.w	r3, #0
 8003ddc:	00eb      	lsls	r3, r5, #3
 8003dde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003de2:	00e2      	lsls	r2, r4, #3
 8003de4:	4614      	mov	r4, r2
 8003de6:	461d      	mov	r5, r3
 8003de8:	4643      	mov	r3, r8
 8003dea:	18e3      	adds	r3, r4, r3
 8003dec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003df0:	464b      	mov	r3, r9
 8003df2:	eb45 0303 	adc.w	r3, r5, r3
 8003df6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e0a:	f04f 0200 	mov.w	r2, #0
 8003e0e:	f04f 0300 	mov.w	r3, #0
 8003e12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e16:	4629      	mov	r1, r5
 8003e18:	008b      	lsls	r3, r1, #2
 8003e1a:	4621      	mov	r1, r4
 8003e1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e20:	4621      	mov	r1, r4
 8003e22:	008a      	lsls	r2, r1, #2
 8003e24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003e28:	f7fc fa2a 	bl	8000280 <__aeabi_uldivmod>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4b60      	ldr	r3, [pc, #384]	@ (8003fb4 <UART_SetConfig+0x4e4>)
 8003e32:	fba3 2302 	umull	r2, r3, r3, r2
 8003e36:	095b      	lsrs	r3, r3, #5
 8003e38:	011c      	lsls	r4, r3, #4
 8003e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e4c:	4642      	mov	r2, r8
 8003e4e:	464b      	mov	r3, r9
 8003e50:	1891      	adds	r1, r2, r2
 8003e52:	61b9      	str	r1, [r7, #24]
 8003e54:	415b      	adcs	r3, r3
 8003e56:	61fb      	str	r3, [r7, #28]
 8003e58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e5c:	4641      	mov	r1, r8
 8003e5e:	1851      	adds	r1, r2, r1
 8003e60:	6139      	str	r1, [r7, #16]
 8003e62:	4649      	mov	r1, r9
 8003e64:	414b      	adcs	r3, r1
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	f04f 0200 	mov.w	r2, #0
 8003e6c:	f04f 0300 	mov.w	r3, #0
 8003e70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e74:	4659      	mov	r1, fp
 8003e76:	00cb      	lsls	r3, r1, #3
 8003e78:	4651      	mov	r1, sl
 8003e7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e7e:	4651      	mov	r1, sl
 8003e80:	00ca      	lsls	r2, r1, #3
 8003e82:	4610      	mov	r0, r2
 8003e84:	4619      	mov	r1, r3
 8003e86:	4603      	mov	r3, r0
 8003e88:	4642      	mov	r2, r8
 8003e8a:	189b      	adds	r3, r3, r2
 8003e8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e90:	464b      	mov	r3, r9
 8003e92:	460a      	mov	r2, r1
 8003e94:	eb42 0303 	adc.w	r3, r2, r3
 8003e98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ea6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003ea8:	f04f 0200 	mov.w	r2, #0
 8003eac:	f04f 0300 	mov.w	r3, #0
 8003eb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003eb4:	4649      	mov	r1, r9
 8003eb6:	008b      	lsls	r3, r1, #2
 8003eb8:	4641      	mov	r1, r8
 8003eba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ebe:	4641      	mov	r1, r8
 8003ec0:	008a      	lsls	r2, r1, #2
 8003ec2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003ec6:	f7fc f9db 	bl	8000280 <__aeabi_uldivmod>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4611      	mov	r1, r2
 8003ed0:	4b38      	ldr	r3, [pc, #224]	@ (8003fb4 <UART_SetConfig+0x4e4>)
 8003ed2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	2264      	movs	r2, #100	@ 0x64
 8003eda:	fb02 f303 	mul.w	r3, r2, r3
 8003ede:	1acb      	subs	r3, r1, r3
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	3332      	adds	r3, #50	@ 0x32
 8003ee4:	4a33      	ldr	r2, [pc, #204]	@ (8003fb4 <UART_SetConfig+0x4e4>)
 8003ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ef0:	441c      	add	r4, r3
 8003ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	673b      	str	r3, [r7, #112]	@ 0x70
 8003efa:	677a      	str	r2, [r7, #116]	@ 0x74
 8003efc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f00:	4642      	mov	r2, r8
 8003f02:	464b      	mov	r3, r9
 8003f04:	1891      	adds	r1, r2, r2
 8003f06:	60b9      	str	r1, [r7, #8]
 8003f08:	415b      	adcs	r3, r3
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f10:	4641      	mov	r1, r8
 8003f12:	1851      	adds	r1, r2, r1
 8003f14:	6039      	str	r1, [r7, #0]
 8003f16:	4649      	mov	r1, r9
 8003f18:	414b      	adcs	r3, r1
 8003f1a:	607b      	str	r3, [r7, #4]
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f28:	4659      	mov	r1, fp
 8003f2a:	00cb      	lsls	r3, r1, #3
 8003f2c:	4651      	mov	r1, sl
 8003f2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f32:	4651      	mov	r1, sl
 8003f34:	00ca      	lsls	r2, r1, #3
 8003f36:	4610      	mov	r0, r2
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	4642      	mov	r2, r8
 8003f3e:	189b      	adds	r3, r3, r2
 8003f40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f42:	464b      	mov	r3, r9
 8003f44:	460a      	mov	r2, r1
 8003f46:	eb42 0303 	adc.w	r3, r2, r3
 8003f4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f56:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	f04f 0300 	mov.w	r3, #0
 8003f60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f64:	4649      	mov	r1, r9
 8003f66:	008b      	lsls	r3, r1, #2
 8003f68:	4641      	mov	r1, r8
 8003f6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f6e:	4641      	mov	r1, r8
 8003f70:	008a      	lsls	r2, r1, #2
 8003f72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f76:	f7fc f983 	bl	8000280 <__aeabi_uldivmod>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb4 <UART_SetConfig+0x4e4>)
 8003f80:	fba3 1302 	umull	r1, r3, r3, r2
 8003f84:	095b      	lsrs	r3, r3, #5
 8003f86:	2164      	movs	r1, #100	@ 0x64
 8003f88:	fb01 f303 	mul.w	r3, r1, r3
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	3332      	adds	r3, #50	@ 0x32
 8003f92:	4a08      	ldr	r2, [pc, #32]	@ (8003fb4 <UART_SetConfig+0x4e4>)
 8003f94:	fba2 2303 	umull	r2, r3, r2, r3
 8003f98:	095b      	lsrs	r3, r3, #5
 8003f9a:	f003 020f 	and.w	r2, r3, #15
 8003f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4422      	add	r2, r4
 8003fa6:	609a      	str	r2, [r3, #8]
}
 8003fa8:	bf00      	nop
 8003faa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fb4:	51eb851f 	.word	0x51eb851f

08003fb8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003fbe:	4b87      	ldr	r3, [pc, #540]	@ (80041dc <MX_LWIP_Init+0x224>)
 8003fc0:	22c0      	movs	r2, #192	@ 0xc0
 8003fc2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003fc4:	4b85      	ldr	r3, [pc, #532]	@ (80041dc <MX_LWIP_Init+0x224>)
 8003fc6:	22a8      	movs	r2, #168	@ 0xa8
 8003fc8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8003fca:	4b84      	ldr	r3, [pc, #528]	@ (80041dc <MX_LWIP_Init+0x224>)
 8003fcc:	2201      	movs	r2, #1
 8003fce:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 50;
 8003fd0:	4b82      	ldr	r3, [pc, #520]	@ (80041dc <MX_LWIP_Init+0x224>)
 8003fd2:	2232      	movs	r2, #50	@ 0x32
 8003fd4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003fd6:	4b82      	ldr	r3, [pc, #520]	@ (80041e0 <MX_LWIP_Init+0x228>)
 8003fd8:	22ff      	movs	r2, #255	@ 0xff
 8003fda:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003fdc:	4b80      	ldr	r3, [pc, #512]	@ (80041e0 <MX_LWIP_Init+0x228>)
 8003fde:	22ff      	movs	r2, #255	@ 0xff
 8003fe0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003fe2:	4b7f      	ldr	r3, [pc, #508]	@ (80041e0 <MX_LWIP_Init+0x228>)
 8003fe4:	22ff      	movs	r2, #255	@ 0xff
 8003fe6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003fe8:	4b7d      	ldr	r3, [pc, #500]	@ (80041e0 <MX_LWIP_Init+0x228>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003fee:	4b7d      	ldr	r3, [pc, #500]	@ (80041e4 <MX_LWIP_Init+0x22c>)
 8003ff0:	22c0      	movs	r2, #192	@ 0xc0
 8003ff2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003ff4:	4b7b      	ldr	r3, [pc, #492]	@ (80041e4 <MX_LWIP_Init+0x22c>)
 8003ff6:	22a8      	movs	r2, #168	@ 0xa8
 8003ff8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8003ffa:	4b7a      	ldr	r3, [pc, #488]	@ (80041e4 <MX_LWIP_Init+0x22c>)
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004000:	4b78      	ldr	r3, [pc, #480]	@ (80041e4 <MX_LWIP_Init+0x22c>)
 8004002:	2201      	movs	r2, #1
 8004004:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8004006:	f000 fd02 	bl	8004a0e <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800400a:	4b74      	ldr	r3, [pc, #464]	@ (80041dc <MX_LWIP_Init+0x224>)
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	061a      	lsls	r2, r3, #24
 8004010:	4b72      	ldr	r3, [pc, #456]	@ (80041dc <MX_LWIP_Init+0x224>)
 8004012:	785b      	ldrb	r3, [r3, #1]
 8004014:	041b      	lsls	r3, r3, #16
 8004016:	431a      	orrs	r2, r3
 8004018:	4b70      	ldr	r3, [pc, #448]	@ (80041dc <MX_LWIP_Init+0x224>)
 800401a:	789b      	ldrb	r3, [r3, #2]
 800401c:	021b      	lsls	r3, r3, #8
 800401e:	4313      	orrs	r3, r2
 8004020:	4a6e      	ldr	r2, [pc, #440]	@ (80041dc <MX_LWIP_Init+0x224>)
 8004022:	78d2      	ldrb	r2, [r2, #3]
 8004024:	4313      	orrs	r3, r2
 8004026:	061a      	lsls	r2, r3, #24
 8004028:	4b6c      	ldr	r3, [pc, #432]	@ (80041dc <MX_LWIP_Init+0x224>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	0619      	lsls	r1, r3, #24
 800402e:	4b6b      	ldr	r3, [pc, #428]	@ (80041dc <MX_LWIP_Init+0x224>)
 8004030:	785b      	ldrb	r3, [r3, #1]
 8004032:	041b      	lsls	r3, r3, #16
 8004034:	4319      	orrs	r1, r3
 8004036:	4b69      	ldr	r3, [pc, #420]	@ (80041dc <MX_LWIP_Init+0x224>)
 8004038:	789b      	ldrb	r3, [r3, #2]
 800403a:	021b      	lsls	r3, r3, #8
 800403c:	430b      	orrs	r3, r1
 800403e:	4967      	ldr	r1, [pc, #412]	@ (80041dc <MX_LWIP_Init+0x224>)
 8004040:	78c9      	ldrb	r1, [r1, #3]
 8004042:	430b      	orrs	r3, r1
 8004044:	021b      	lsls	r3, r3, #8
 8004046:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800404a:	431a      	orrs	r2, r3
 800404c:	4b63      	ldr	r3, [pc, #396]	@ (80041dc <MX_LWIP_Init+0x224>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	0619      	lsls	r1, r3, #24
 8004052:	4b62      	ldr	r3, [pc, #392]	@ (80041dc <MX_LWIP_Init+0x224>)
 8004054:	785b      	ldrb	r3, [r3, #1]
 8004056:	041b      	lsls	r3, r3, #16
 8004058:	4319      	orrs	r1, r3
 800405a:	4b60      	ldr	r3, [pc, #384]	@ (80041dc <MX_LWIP_Init+0x224>)
 800405c:	789b      	ldrb	r3, [r3, #2]
 800405e:	021b      	lsls	r3, r3, #8
 8004060:	430b      	orrs	r3, r1
 8004062:	495e      	ldr	r1, [pc, #376]	@ (80041dc <MX_LWIP_Init+0x224>)
 8004064:	78c9      	ldrb	r1, [r1, #3]
 8004066:	430b      	orrs	r3, r1
 8004068:	0a1b      	lsrs	r3, r3, #8
 800406a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800406e:	431a      	orrs	r2, r3
 8004070:	4b5a      	ldr	r3, [pc, #360]	@ (80041dc <MX_LWIP_Init+0x224>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	0619      	lsls	r1, r3, #24
 8004076:	4b59      	ldr	r3, [pc, #356]	@ (80041dc <MX_LWIP_Init+0x224>)
 8004078:	785b      	ldrb	r3, [r3, #1]
 800407a:	041b      	lsls	r3, r3, #16
 800407c:	4319      	orrs	r1, r3
 800407e:	4b57      	ldr	r3, [pc, #348]	@ (80041dc <MX_LWIP_Init+0x224>)
 8004080:	789b      	ldrb	r3, [r3, #2]
 8004082:	021b      	lsls	r3, r3, #8
 8004084:	430b      	orrs	r3, r1
 8004086:	4955      	ldr	r1, [pc, #340]	@ (80041dc <MX_LWIP_Init+0x224>)
 8004088:	78c9      	ldrb	r1, [r1, #3]
 800408a:	430b      	orrs	r3, r1
 800408c:	0e1b      	lsrs	r3, r3, #24
 800408e:	4313      	orrs	r3, r2
 8004090:	4a55      	ldr	r2, [pc, #340]	@ (80041e8 <MX_LWIP_Init+0x230>)
 8004092:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004094:	4b52      	ldr	r3, [pc, #328]	@ (80041e0 <MX_LWIP_Init+0x228>)
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	061a      	lsls	r2, r3, #24
 800409a:	4b51      	ldr	r3, [pc, #324]	@ (80041e0 <MX_LWIP_Init+0x228>)
 800409c:	785b      	ldrb	r3, [r3, #1]
 800409e:	041b      	lsls	r3, r3, #16
 80040a0:	431a      	orrs	r2, r3
 80040a2:	4b4f      	ldr	r3, [pc, #316]	@ (80041e0 <MX_LWIP_Init+0x228>)
 80040a4:	789b      	ldrb	r3, [r3, #2]
 80040a6:	021b      	lsls	r3, r3, #8
 80040a8:	4313      	orrs	r3, r2
 80040aa:	4a4d      	ldr	r2, [pc, #308]	@ (80041e0 <MX_LWIP_Init+0x228>)
 80040ac:	78d2      	ldrb	r2, [r2, #3]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	061a      	lsls	r2, r3, #24
 80040b2:	4b4b      	ldr	r3, [pc, #300]	@ (80041e0 <MX_LWIP_Init+0x228>)
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	0619      	lsls	r1, r3, #24
 80040b8:	4b49      	ldr	r3, [pc, #292]	@ (80041e0 <MX_LWIP_Init+0x228>)
 80040ba:	785b      	ldrb	r3, [r3, #1]
 80040bc:	041b      	lsls	r3, r3, #16
 80040be:	4319      	orrs	r1, r3
 80040c0:	4b47      	ldr	r3, [pc, #284]	@ (80041e0 <MX_LWIP_Init+0x228>)
 80040c2:	789b      	ldrb	r3, [r3, #2]
 80040c4:	021b      	lsls	r3, r3, #8
 80040c6:	430b      	orrs	r3, r1
 80040c8:	4945      	ldr	r1, [pc, #276]	@ (80041e0 <MX_LWIP_Init+0x228>)
 80040ca:	78c9      	ldrb	r1, [r1, #3]
 80040cc:	430b      	orrs	r3, r1
 80040ce:	021b      	lsls	r3, r3, #8
 80040d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80040d4:	431a      	orrs	r2, r3
 80040d6:	4b42      	ldr	r3, [pc, #264]	@ (80041e0 <MX_LWIP_Init+0x228>)
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	0619      	lsls	r1, r3, #24
 80040dc:	4b40      	ldr	r3, [pc, #256]	@ (80041e0 <MX_LWIP_Init+0x228>)
 80040de:	785b      	ldrb	r3, [r3, #1]
 80040e0:	041b      	lsls	r3, r3, #16
 80040e2:	4319      	orrs	r1, r3
 80040e4:	4b3e      	ldr	r3, [pc, #248]	@ (80041e0 <MX_LWIP_Init+0x228>)
 80040e6:	789b      	ldrb	r3, [r3, #2]
 80040e8:	021b      	lsls	r3, r3, #8
 80040ea:	430b      	orrs	r3, r1
 80040ec:	493c      	ldr	r1, [pc, #240]	@ (80041e0 <MX_LWIP_Init+0x228>)
 80040ee:	78c9      	ldrb	r1, [r1, #3]
 80040f0:	430b      	orrs	r3, r1
 80040f2:	0a1b      	lsrs	r3, r3, #8
 80040f4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80040f8:	431a      	orrs	r2, r3
 80040fa:	4b39      	ldr	r3, [pc, #228]	@ (80041e0 <MX_LWIP_Init+0x228>)
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	0619      	lsls	r1, r3, #24
 8004100:	4b37      	ldr	r3, [pc, #220]	@ (80041e0 <MX_LWIP_Init+0x228>)
 8004102:	785b      	ldrb	r3, [r3, #1]
 8004104:	041b      	lsls	r3, r3, #16
 8004106:	4319      	orrs	r1, r3
 8004108:	4b35      	ldr	r3, [pc, #212]	@ (80041e0 <MX_LWIP_Init+0x228>)
 800410a:	789b      	ldrb	r3, [r3, #2]
 800410c:	021b      	lsls	r3, r3, #8
 800410e:	430b      	orrs	r3, r1
 8004110:	4933      	ldr	r1, [pc, #204]	@ (80041e0 <MX_LWIP_Init+0x228>)
 8004112:	78c9      	ldrb	r1, [r1, #3]
 8004114:	430b      	orrs	r3, r1
 8004116:	0e1b      	lsrs	r3, r3, #24
 8004118:	4313      	orrs	r3, r2
 800411a:	4a34      	ldr	r2, [pc, #208]	@ (80041ec <MX_LWIP_Init+0x234>)
 800411c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800411e:	4b31      	ldr	r3, [pc, #196]	@ (80041e4 <MX_LWIP_Init+0x22c>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	061a      	lsls	r2, r3, #24
 8004124:	4b2f      	ldr	r3, [pc, #188]	@ (80041e4 <MX_LWIP_Init+0x22c>)
 8004126:	785b      	ldrb	r3, [r3, #1]
 8004128:	041b      	lsls	r3, r3, #16
 800412a:	431a      	orrs	r2, r3
 800412c:	4b2d      	ldr	r3, [pc, #180]	@ (80041e4 <MX_LWIP_Init+0x22c>)
 800412e:	789b      	ldrb	r3, [r3, #2]
 8004130:	021b      	lsls	r3, r3, #8
 8004132:	4313      	orrs	r3, r2
 8004134:	4a2b      	ldr	r2, [pc, #172]	@ (80041e4 <MX_LWIP_Init+0x22c>)
 8004136:	78d2      	ldrb	r2, [r2, #3]
 8004138:	4313      	orrs	r3, r2
 800413a:	061a      	lsls	r2, r3, #24
 800413c:	4b29      	ldr	r3, [pc, #164]	@ (80041e4 <MX_LWIP_Init+0x22c>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	0619      	lsls	r1, r3, #24
 8004142:	4b28      	ldr	r3, [pc, #160]	@ (80041e4 <MX_LWIP_Init+0x22c>)
 8004144:	785b      	ldrb	r3, [r3, #1]
 8004146:	041b      	lsls	r3, r3, #16
 8004148:	4319      	orrs	r1, r3
 800414a:	4b26      	ldr	r3, [pc, #152]	@ (80041e4 <MX_LWIP_Init+0x22c>)
 800414c:	789b      	ldrb	r3, [r3, #2]
 800414e:	021b      	lsls	r3, r3, #8
 8004150:	430b      	orrs	r3, r1
 8004152:	4924      	ldr	r1, [pc, #144]	@ (80041e4 <MX_LWIP_Init+0x22c>)
 8004154:	78c9      	ldrb	r1, [r1, #3]
 8004156:	430b      	orrs	r3, r1
 8004158:	021b      	lsls	r3, r3, #8
 800415a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800415e:	431a      	orrs	r2, r3
 8004160:	4b20      	ldr	r3, [pc, #128]	@ (80041e4 <MX_LWIP_Init+0x22c>)
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	0619      	lsls	r1, r3, #24
 8004166:	4b1f      	ldr	r3, [pc, #124]	@ (80041e4 <MX_LWIP_Init+0x22c>)
 8004168:	785b      	ldrb	r3, [r3, #1]
 800416a:	041b      	lsls	r3, r3, #16
 800416c:	4319      	orrs	r1, r3
 800416e:	4b1d      	ldr	r3, [pc, #116]	@ (80041e4 <MX_LWIP_Init+0x22c>)
 8004170:	789b      	ldrb	r3, [r3, #2]
 8004172:	021b      	lsls	r3, r3, #8
 8004174:	430b      	orrs	r3, r1
 8004176:	491b      	ldr	r1, [pc, #108]	@ (80041e4 <MX_LWIP_Init+0x22c>)
 8004178:	78c9      	ldrb	r1, [r1, #3]
 800417a:	430b      	orrs	r3, r1
 800417c:	0a1b      	lsrs	r3, r3, #8
 800417e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004182:	431a      	orrs	r2, r3
 8004184:	4b17      	ldr	r3, [pc, #92]	@ (80041e4 <MX_LWIP_Init+0x22c>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	0619      	lsls	r1, r3, #24
 800418a:	4b16      	ldr	r3, [pc, #88]	@ (80041e4 <MX_LWIP_Init+0x22c>)
 800418c:	785b      	ldrb	r3, [r3, #1]
 800418e:	041b      	lsls	r3, r3, #16
 8004190:	4319      	orrs	r1, r3
 8004192:	4b14      	ldr	r3, [pc, #80]	@ (80041e4 <MX_LWIP_Init+0x22c>)
 8004194:	789b      	ldrb	r3, [r3, #2]
 8004196:	021b      	lsls	r3, r3, #8
 8004198:	430b      	orrs	r3, r1
 800419a:	4912      	ldr	r1, [pc, #72]	@ (80041e4 <MX_LWIP_Init+0x22c>)
 800419c:	78c9      	ldrb	r1, [r1, #3]
 800419e:	430b      	orrs	r3, r1
 80041a0:	0e1b      	lsrs	r3, r3, #24
 80041a2:	4313      	orrs	r3, r2
 80041a4:	4a12      	ldr	r2, [pc, #72]	@ (80041f0 <MX_LWIP_Init+0x238>)
 80041a6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80041a8:	4b12      	ldr	r3, [pc, #72]	@ (80041f4 <MX_LWIP_Init+0x23c>)
 80041aa:	9302      	str	r3, [sp, #8]
 80041ac:	4b12      	ldr	r3, [pc, #72]	@ (80041f8 <MX_LWIP_Init+0x240>)
 80041ae:	9301      	str	r3, [sp, #4]
 80041b0:	2300      	movs	r3, #0
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	4b0e      	ldr	r3, [pc, #56]	@ (80041f0 <MX_LWIP_Init+0x238>)
 80041b6:	4a0d      	ldr	r2, [pc, #52]	@ (80041ec <MX_LWIP_Init+0x234>)
 80041b8:	490b      	ldr	r1, [pc, #44]	@ (80041e8 <MX_LWIP_Init+0x230>)
 80041ba:	4810      	ldr	r0, [pc, #64]	@ (80041fc <MX_LWIP_Init+0x244>)
 80041bc:	f001 f912 	bl	80053e4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80041c0:	480e      	ldr	r0, [pc, #56]	@ (80041fc <MX_LWIP_Init+0x244>)
 80041c2:	f001 fac1 	bl	8005748 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80041c6:	480d      	ldr	r0, [pc, #52]	@ (80041fc <MX_LWIP_Init+0x244>)
 80041c8:	f001 face 	bl	8005768 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80041cc:	490c      	ldr	r1, [pc, #48]	@ (8004200 <MX_LWIP_Init+0x248>)
 80041ce:	480b      	ldr	r0, [pc, #44]	@ (80041fc <MX_LWIP_Init+0x244>)
 80041d0:	f001 fbcc 	bl	800596c <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80041d4:	bf00      	nop
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	2000018c 	.word	0x2000018c
 80041e0:	20000190 	.word	0x20000190
 80041e4:	20000194 	.word	0x20000194
 80041e8:	20000180 	.word	0x20000180
 80041ec:	20000184 	.word	0x20000184
 80041f0:	20000188 	.word	0x20000188
 80041f4:	0800ef45 	.word	0x0800ef45
 80041f8:	08004521 	.word	0x08004521
 80041fc:	2000014c 	.word	0x2000014c
 8004200:	08004255 	.word	0x08004255

08004204 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 800420c:	f7fd f8f6 	bl	80013fc <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	4b08      	ldr	r3, [pc, #32]	@ (8004234 <Ethernet_Link_Periodic_Handle+0x30>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b63      	cmp	r3, #99	@ 0x63
 800421a:	d907      	bls.n	800422c <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 800421c:	f7fd f8ee 	bl	80013fc <HAL_GetTick>
 8004220:	4603      	mov	r3, r0
 8004222:	4a04      	ldr	r2, [pc, #16]	@ (8004234 <Ethernet_Link_Periodic_Handle+0x30>)
 8004224:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fac6 	bl	80047b8 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 800422c:	bf00      	nop
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	20000148 	.word	0x20000148

08004238 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800423c:	4804      	ldr	r0, [pc, #16]	@ (8004250 <MX_LWIP_Process+0x18>)
 800423e:	f000 f94f 	bl	80044e0 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8004242:	f008 fa03 	bl	800c64c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8004246:	4802      	ldr	r0, [pc, #8]	@ (8004250 <MX_LWIP_Process+0x18>)
 8004248:	f7ff ffdc 	bl	8004204 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800424c:	bf00      	nop
 800424e:	bd80      	pop	{r7, pc}
 8004250:	2000014c 	.word	0x2000014c

08004254 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004270:	2300      	movs	r3, #0
 8004272:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004274:	4b44      	ldr	r3, [pc, #272]	@ (8004388 <low_level_init+0x120>)
 8004276:	4a45      	ldr	r2, [pc, #276]	@ (800438c <low_level_init+0x124>)
 8004278:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800427a:	2300      	movs	r3, #0
 800427c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800427e:	2380      	movs	r3, #128	@ 0x80
 8004280:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004282:	23e1      	movs	r3, #225	@ 0xe1
 8004284:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004286:	2300      	movs	r3, #0
 8004288:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800428a:	2300      	movs	r3, #0
 800428c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800428e:	2300      	movs	r3, #0
 8004290:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004292:	4a3d      	ldr	r2, [pc, #244]	@ (8004388 <low_level_init+0x120>)
 8004294:	f107 0308 	add.w	r3, r7, #8
 8004298:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800429a:	4b3b      	ldr	r3, [pc, #236]	@ (8004388 <low_level_init+0x120>)
 800429c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80042a0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80042a2:	4b39      	ldr	r3, [pc, #228]	@ (8004388 <low_level_init+0x120>)
 80042a4:	4a3a      	ldr	r2, [pc, #232]	@ (8004390 <low_level_init+0x128>)
 80042a6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80042a8:	4b37      	ldr	r3, [pc, #220]	@ (8004388 <low_level_init+0x120>)
 80042aa:	4a3a      	ldr	r2, [pc, #232]	@ (8004394 <low_level_init+0x12c>)
 80042ac:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80042ae:	4b36      	ldr	r3, [pc, #216]	@ (8004388 <low_level_init+0x120>)
 80042b0:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80042b4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80042b6:	4834      	ldr	r0, [pc, #208]	@ (8004388 <low_level_init+0x120>)
 80042b8:	f7fd f9e2 	bl	8001680 <HAL_ETH_Init>
 80042bc:	4603      	mov	r3, r0
 80042be:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80042c0:	2238      	movs	r2, #56	@ 0x38
 80042c2:	2100      	movs	r1, #0
 80042c4:	4834      	ldr	r0, [pc, #208]	@ (8004398 <low_level_init+0x130>)
 80042c6:	f00b f885 	bl	800f3d4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80042ca:	4b33      	ldr	r3, [pc, #204]	@ (8004398 <low_level_init+0x130>)
 80042cc:	2221      	movs	r2, #33	@ 0x21
 80042ce:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80042d0:	4b31      	ldr	r3, [pc, #196]	@ (8004398 <low_level_init+0x130>)
 80042d2:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80042d6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80042d8:	4b2f      	ldr	r3, [pc, #188]	@ (8004398 <low_level_init+0x130>)
 80042da:	2200      	movs	r2, #0
 80042dc:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80042de:	482f      	ldr	r0, [pc, #188]	@ (800439c <low_level_init+0x134>)
 80042e0:	f000 ff48 	bl	8005174 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2206      	movs	r2, #6
 80042e8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80042ec:	4b26      	ldr	r3, [pc, #152]	@ (8004388 <low_level_init+0x120>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	781a      	ldrb	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80042f8:	4b23      	ldr	r3, [pc, #140]	@ (8004388 <low_level_init+0x120>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	785a      	ldrb	r2, [r3, #1]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004304:	4b20      	ldr	r3, [pc, #128]	@ (8004388 <low_level_init+0x120>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	789a      	ldrb	r2, [r3, #2]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004310:	4b1d      	ldr	r3, [pc, #116]	@ (8004388 <low_level_init+0x120>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	78da      	ldrb	r2, [r3, #3]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800431c:	4b1a      	ldr	r3, [pc, #104]	@ (8004388 <low_level_init+0x120>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	791a      	ldrb	r2, [r3, #4]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004328:	4b17      	ldr	r3, [pc, #92]	@ (8004388 <low_level_init+0x120>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	795a      	ldrb	r2, [r3, #5]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800433a:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004342:	f043 030a 	orr.w	r3, r3, #10
 8004346:	b2da      	uxtb	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800434e:	4914      	ldr	r1, [pc, #80]	@ (80043a0 <low_level_init+0x138>)
 8004350:	4814      	ldr	r0, [pc, #80]	@ (80043a4 <low_level_init+0x13c>)
 8004352:	f7fc fee6 	bl	8001122 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8004356:	4813      	ldr	r0, [pc, #76]	@ (80043a4 <low_level_init+0x13c>)
 8004358:	f7fc ff15 	bl	8001186 <LAN8742_Init>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d006      	beq.n	8004370 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f001 fad2 	bl	800590c <netif_set_link_down>
    netif_set_down(netif);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f001 fa69 	bl	8005840 <netif_set_down>
 800436e:	e008      	b.n	8004382 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d103      	bne.n	800437e <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fa1e 	bl	80047b8 <ethernet_link_check_state>
 800437c:	e001      	b.n	8004382 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 800437e:	f7fc fd15 	bl	8000dac <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	20004c64 	.word	0x20004c64
 800438c:	40028000 	.word	0x40028000
 8004390:	20004bc4 	.word	0x20004bc4
 8004394:	20004b24 	.word	0x20004b24
 8004398:	20004d14 	.word	0x20004d14
 800439c:	08013140 	.word	0x08013140
 80043a0:	2000000c 	.word	0x2000000c
 80043a4:	20004d4c 	.word	0x20004d4c

080043a8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b092      	sub	sp, #72	@ 0x48
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 80043b6:	2300      	movs	r3, #0
 80043b8:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80043c0:	f107 030c 	add.w	r3, r7, #12
 80043c4:	2230      	movs	r2, #48	@ 0x30
 80043c6:	2100      	movs	r1, #0
 80043c8:	4618      	mov	r0, r3
 80043ca:	f00b f803 	bl	800f3d4 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80043ce:	f107 030c 	add.w	r3, r7, #12
 80043d2:	2230      	movs	r2, #48	@ 0x30
 80043d4:	2100      	movs	r1, #0
 80043d6:	4618      	mov	r0, r3
 80043d8:	f00a fffc 	bl	800f3d4 <memset>

  for(q = p; q != NULL; q = q->next)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	643b      	str	r3, [r7, #64]	@ 0x40
 80043e0:	e045      	b.n	800446e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80043e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	d902      	bls.n	80043ee <low_level_output+0x46>
      return ERR_IF;
 80043e8:	f06f 030b 	mvn.w	r3, #11
 80043ec:	e055      	b.n	800449a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80043ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043f0:	6859      	ldr	r1, [r3, #4]
 80043f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043f4:	4613      	mov	r3, r2
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	4413      	add	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	3348      	adds	r3, #72	@ 0x48
 80043fe:	443b      	add	r3, r7
 8004400:	3b3c      	subs	r3, #60	@ 0x3c
 8004402:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004406:	895b      	ldrh	r3, [r3, #10]
 8004408:	4619      	mov	r1, r3
 800440a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800440c:	4613      	mov	r3, r2
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	4413      	add	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	3348      	adds	r3, #72	@ 0x48
 8004416:	443b      	add	r3, r7
 8004418:	3b38      	subs	r3, #56	@ 0x38
 800441a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800441c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800441e:	2b00      	cmp	r3, #0
 8004420:	d011      	beq.n	8004446 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004422:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004424:	1e5a      	subs	r2, r3, #1
 8004426:	f107 000c 	add.w	r0, r7, #12
 800442a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800442c:	460b      	mov	r3, r1
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	440b      	add	r3, r1
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	18c1      	adds	r1, r0, r3
 8004436:	4613      	mov	r3, r2
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	4413      	add	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	3348      	adds	r3, #72	@ 0x48
 8004440:	443b      	add	r3, r7
 8004442:	3b34      	subs	r3, #52	@ 0x34
 8004444:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004446:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d109      	bne.n	8004462 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800444e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004450:	4613      	mov	r3, r2
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	4413      	add	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	3348      	adds	r3, #72	@ 0x48
 800445a:	443b      	add	r3, r7
 800445c:	3b34      	subs	r3, #52	@ 0x34
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004462:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004464:	3301      	adds	r3, #1
 8004466:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8004468:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	643b      	str	r3, [r7, #64]	@ 0x40
 800446e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1b6      	bne.n	80043e2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	891b      	ldrh	r3, [r3, #8]
 8004478:	461a      	mov	r2, r3
 800447a:	4b0a      	ldr	r3, [pc, #40]	@ (80044a4 <low_level_output+0xfc>)
 800447c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800447e:	4a09      	ldr	r2, [pc, #36]	@ (80044a4 <low_level_output+0xfc>)
 8004480:	f107 030c 	add.w	r3, r7, #12
 8004484:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004486:	4a07      	ldr	r2, [pc, #28]	@ (80044a4 <low_level_output+0xfc>)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800448c:	2214      	movs	r2, #20
 800448e:	4905      	ldr	r1, [pc, #20]	@ (80044a4 <low_level_output+0xfc>)
 8004490:	4805      	ldr	r0, [pc, #20]	@ (80044a8 <low_level_output+0x100>)
 8004492:	f7fd fa80 	bl	8001996 <HAL_ETH_Transmit>

  return errval;
 8004496:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800449a:	4618      	mov	r0, r3
 800449c:	3748      	adds	r7, #72	@ 0x48
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	20004d14 	.word	0x20004d14
 80044a8:	20004c64 	.word	0x20004c64

080044ac <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80044b4:	2300      	movs	r3, #0
 80044b6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80044b8:	4b07      	ldr	r3, [pc, #28]	@ (80044d8 <low_level_input+0x2c>)
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d105      	bne.n	80044cc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80044c0:	f107 030c 	add.w	r3, r7, #12
 80044c4:	4619      	mov	r1, r3
 80044c6:	4805      	ldr	r0, [pc, #20]	@ (80044dc <low_level_input+0x30>)
 80044c8:	f7fd faf9 	bl	8001abe <HAL_ETH_ReadData>
  }

  return p;
 80044cc:	68fb      	ldr	r3, [r7, #12]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	20004b20 	.word	0x20004b20
 80044dc:	20004c64 	.word	0x20004c64

080044e0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7ff ffdd 	bl	80044ac <low_level_input>
 80044f2:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00a      	beq.n	8004510 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	4798      	blx	r3
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d002      	beq.n	8004510 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f001 fdae 	bl	800606c <pbuf_free>
      }
    }
  } while(p!=NULL);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1ea      	bne.n	80044ec <ethernetif_input+0xc>
}
 8004516:	bf00      	nop
 8004518:	bf00      	nop
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d106      	bne.n	800453c <ethernetif_init+0x1c>
 800452e:	4b0e      	ldr	r3, [pc, #56]	@ (8004568 <ethernetif_init+0x48>)
 8004530:	f240 126f 	movw	r2, #367	@ 0x16f
 8004534:	490d      	ldr	r1, [pc, #52]	@ (800456c <ethernetif_init+0x4c>)
 8004536:	480e      	ldr	r0, [pc, #56]	@ (8004570 <ethernetif_init+0x50>)
 8004538:	f00a ff10 	bl	800f35c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2273      	movs	r2, #115	@ 0x73
 8004540:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2274      	movs	r2, #116	@ 0x74
 8004548:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a09      	ldr	r2, [pc, #36]	@ (8004574 <ethernetif_init+0x54>)
 8004550:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a08      	ldr	r2, [pc, #32]	@ (8004578 <ethernetif_init+0x58>)
 8004556:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7ff fe85 	bl	8004268 <low_level_init>

  return ERR_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	08010748 	.word	0x08010748
 800456c:	08010764 	.word	0x08010764
 8004570:	08010774 	.word	0x08010774
 8004574:	0800d2dd 	.word	0x0800d2dd
 8004578:	080043a9 	.word	0x080043a9

0800457c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004588:	68f9      	ldr	r1, [r7, #12]
 800458a:	4807      	ldr	r0, [pc, #28]	@ (80045a8 <pbuf_free_custom+0x2c>)
 800458c:	f000 fed4 	bl	8005338 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004590:	4b06      	ldr	r3, [pc, #24]	@ (80045ac <pbuf_free_custom+0x30>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d102      	bne.n	800459e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004598:	4b04      	ldr	r3, [pc, #16]	@ (80045ac <pbuf_free_custom+0x30>)
 800459a:	2200      	movs	r2, #0
 800459c:	701a      	strb	r2, [r3, #0]
  }
}
 800459e:	bf00      	nop
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	08013140 	.word	0x08013140
 80045ac:	20004b20 	.word	0x20004b20

080045b0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80045b4:	f7fc ff22 	bl	80013fc <HAL_GetTick>
 80045b8:	4603      	mov	r3, r0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	bd80      	pop	{r7, pc}
	...

080045c0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08e      	sub	sp, #56	@ 0x38
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	605a      	str	r2, [r3, #4]
 80045d2:	609a      	str	r2, [r3, #8]
 80045d4:	60da      	str	r2, [r3, #12]
 80045d6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a4a      	ldr	r2, [pc, #296]	@ (8004708 <HAL_ETH_MspInit+0x148>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	f040 808d 	bne.w	80046fe <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80045e4:	2300      	movs	r3, #0
 80045e6:	623b      	str	r3, [r7, #32]
 80045e8:	4b48      	ldr	r3, [pc, #288]	@ (800470c <HAL_ETH_MspInit+0x14c>)
 80045ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ec:	4a47      	ldr	r2, [pc, #284]	@ (800470c <HAL_ETH_MspInit+0x14c>)
 80045ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80045f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80045f4:	4b45      	ldr	r3, [pc, #276]	@ (800470c <HAL_ETH_MspInit+0x14c>)
 80045f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045fc:	623b      	str	r3, [r7, #32]
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	2300      	movs	r3, #0
 8004602:	61fb      	str	r3, [r7, #28]
 8004604:	4b41      	ldr	r3, [pc, #260]	@ (800470c <HAL_ETH_MspInit+0x14c>)
 8004606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004608:	4a40      	ldr	r2, [pc, #256]	@ (800470c <HAL_ETH_MspInit+0x14c>)
 800460a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800460e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004610:	4b3e      	ldr	r3, [pc, #248]	@ (800470c <HAL_ETH_MspInit+0x14c>)
 8004612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004614:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004618:	61fb      	str	r3, [r7, #28]
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	2300      	movs	r3, #0
 800461e:	61bb      	str	r3, [r7, #24]
 8004620:	4b3a      	ldr	r3, [pc, #232]	@ (800470c <HAL_ETH_MspInit+0x14c>)
 8004622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004624:	4a39      	ldr	r2, [pc, #228]	@ (800470c <HAL_ETH_MspInit+0x14c>)
 8004626:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800462a:	6313      	str	r3, [r2, #48]	@ 0x30
 800462c:	4b37      	ldr	r3, [pc, #220]	@ (800470c <HAL_ETH_MspInit+0x14c>)
 800462e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004630:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004634:	61bb      	str	r3, [r7, #24]
 8004636:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004638:	2300      	movs	r3, #0
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	4b33      	ldr	r3, [pc, #204]	@ (800470c <HAL_ETH_MspInit+0x14c>)
 800463e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004640:	4a32      	ldr	r2, [pc, #200]	@ (800470c <HAL_ETH_MspInit+0x14c>)
 8004642:	f043 0304 	orr.w	r3, r3, #4
 8004646:	6313      	str	r3, [r2, #48]	@ 0x30
 8004648:	4b30      	ldr	r3, [pc, #192]	@ (800470c <HAL_ETH_MspInit+0x14c>)
 800464a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800464c:	f003 0304 	and.w	r3, r3, #4
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004654:	2300      	movs	r3, #0
 8004656:	613b      	str	r3, [r7, #16]
 8004658:	4b2c      	ldr	r3, [pc, #176]	@ (800470c <HAL_ETH_MspInit+0x14c>)
 800465a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465c:	4a2b      	ldr	r2, [pc, #172]	@ (800470c <HAL_ETH_MspInit+0x14c>)
 800465e:	f043 0301 	orr.w	r3, r3, #1
 8004662:	6313      	str	r3, [r2, #48]	@ 0x30
 8004664:	4b29      	ldr	r3, [pc, #164]	@ (800470c <HAL_ETH_MspInit+0x14c>)
 8004666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	613b      	str	r3, [r7, #16]
 800466e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004670:	2300      	movs	r3, #0
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	4b25      	ldr	r3, [pc, #148]	@ (800470c <HAL_ETH_MspInit+0x14c>)
 8004676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004678:	4a24      	ldr	r2, [pc, #144]	@ (800470c <HAL_ETH_MspInit+0x14c>)
 800467a:	f043 0302 	orr.w	r3, r3, #2
 800467e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004680:	4b22      	ldr	r3, [pc, #136]	@ (800470c <HAL_ETH_MspInit+0x14c>)
 8004682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800468c:	2332      	movs	r3, #50	@ 0x32
 800468e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004690:	2302      	movs	r3, #2
 8004692:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004694:	2300      	movs	r3, #0
 8004696:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004698:	2303      	movs	r3, #3
 800469a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800469c:	230b      	movs	r3, #11
 800469e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046a4:	4619      	mov	r1, r3
 80046a6:	481a      	ldr	r0, [pc, #104]	@ (8004710 <HAL_ETH_MspInit+0x150>)
 80046a8:	f7fe fa3a 	bl	8002b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80046ac:	2386      	movs	r3, #134	@ 0x86
 80046ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046b0:	2302      	movs	r3, #2
 80046b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b4:	2300      	movs	r3, #0
 80046b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046b8:	2303      	movs	r3, #3
 80046ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80046bc:	230b      	movs	r3, #11
 80046be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046c4:	4619      	mov	r1, r3
 80046c6:	4813      	ldr	r0, [pc, #76]	@ (8004714 <HAL_ETH_MspInit+0x154>)
 80046c8:	f7fe fa2a 	bl	8002b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80046cc:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80046d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046d2:	2302      	movs	r3, #2
 80046d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d6:	2300      	movs	r3, #0
 80046d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046da:	2303      	movs	r3, #3
 80046dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80046de:	230b      	movs	r3, #11
 80046e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046e6:	4619      	mov	r1, r3
 80046e8:	480b      	ldr	r0, [pc, #44]	@ (8004718 <HAL_ETH_MspInit+0x158>)
 80046ea:	f7fe fa19 	bl	8002b20 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80046ee:	2200      	movs	r2, #0
 80046f0:	2100      	movs	r1, #0
 80046f2:	203d      	movs	r0, #61	@ 0x3d
 80046f4:	f7fc ff8d 	bl	8001612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80046f8:	203d      	movs	r0, #61	@ 0x3d
 80046fa:	f7fc ffa6 	bl	800164a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80046fe:	bf00      	nop
 8004700:	3738      	adds	r7, #56	@ 0x38
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	40028000 	.word	0x40028000
 800470c:	40023800 	.word	0x40023800
 8004710:	40020800 	.word	0x40020800
 8004714:	40020000 	.word	0x40020000
 8004718:	40020400 	.word	0x40020400

0800471c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004720:	4802      	ldr	r0, [pc, #8]	@ (800472c <ETH_PHY_IO_Init+0x10>)
 8004722:	f7fd fd99 	bl	8002258 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	bd80      	pop	{r7, pc}
 800472c:	20004c64 	.word	0x20004c64

08004730 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0
  return 0;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	68f9      	ldr	r1, [r7, #12]
 8004752:	4807      	ldr	r0, [pc, #28]	@ (8004770 <ETH_PHY_IO_ReadReg+0x30>)
 8004754:	f7fd fbda 	bl	8001f0c <HAL_ETH_ReadPHYRegister>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d002      	beq.n	8004764 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800475e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004762:	e000      	b.n	8004766 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	20004c64 	.word	0x20004c64

08004774 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	68f9      	ldr	r1, [r7, #12]
 8004786:	4807      	ldr	r0, [pc, #28]	@ (80047a4 <ETH_PHY_IO_WriteReg+0x30>)
 8004788:	f7fd fc0b 	bl	8001fa2 <HAL_ETH_WritePHYRegister>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d002      	beq.n	8004798 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004792:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004796:	e000      	b.n	800479a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	20004c64 	.word	0x20004c64

080047a8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80047ac:	f7fc fe26 	bl	80013fc <HAL_GetTick>
 80047b0:	4603      	mov	r3, r0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b0a0      	sub	sp, #128	@ 0x80
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80047c0:	f107 030c 	add.w	r3, r7, #12
 80047c4:	2264      	movs	r2, #100	@ 0x64
 80047c6:	2100      	movs	r1, #0
 80047c8:	4618      	mov	r0, r3
 80047ca:	f00a fe03 	bl	800f3d4 <memset>
  int32_t PHYLinkState = 0;
 80047ce:	2300      	movs	r3, #0
 80047d0:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80047d6:	2300      	movs	r3, #0
 80047d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047da:	2300      	movs	r3, #0
 80047dc:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80047de:	483a      	ldr	r0, [pc, #232]	@ (80048c8 <ethernet_link_check_state+0x110>)
 80047e0:	f7fc fd1e 	bl	8001220 <LAN8742_GetLinkState>
 80047e4:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80047ec:	089b      	lsrs	r3, r3, #2
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00c      	beq.n	8004812 <ethernet_link_check_state+0x5a>
 80047f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	dc09      	bgt.n	8004812 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 80047fe:	4833      	ldr	r0, [pc, #204]	@ (80048cc <ethernet_link_check_state+0x114>)
 8004800:	f7fd f84a 	bl	8001898 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f001 f81b 	bl	8005840 <netif_set_down>
    netif_set_link_down(netif);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f001 f87e 	bl	800590c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004810:	e055      	b.n	80048be <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b00      	cmp	r3, #0
 800481e:	d14e      	bne.n	80048be <ethernet_link_check_state+0x106>
 8004820:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004822:	2b01      	cmp	r3, #1
 8004824:	dd4b      	ble.n	80048be <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8004826:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004828:	3b02      	subs	r3, #2
 800482a:	2b03      	cmp	r3, #3
 800482c:	d82a      	bhi.n	8004884 <ethernet_link_check_state+0xcc>
 800482e:	a201      	add	r2, pc, #4	@ (adr r2, 8004834 <ethernet_link_check_state+0x7c>)
 8004830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004834:	08004845 	.word	0x08004845
 8004838:	08004857 	.word	0x08004857
 800483c:	08004867 	.word	0x08004867
 8004840:	08004877 	.word	0x08004877
      duplex = ETH_FULLDUPLEX_MODE;
 8004844:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004848:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800484a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800484e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004850:	2301      	movs	r3, #1
 8004852:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004854:	e017      	b.n	8004886 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004856:	2300      	movs	r3, #0
 8004858:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800485a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800485e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004860:	2301      	movs	r3, #1
 8004862:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004864:	e00f      	b.n	8004886 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8004866:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800486a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800486c:	2300      	movs	r3, #0
 800486e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004870:	2301      	movs	r3, #1
 8004872:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004874:	e007      	b.n	8004886 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004876:	2300      	movs	r3, #0
 8004878:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800487a:	2300      	movs	r3, #0
 800487c:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800487e:	2301      	movs	r3, #1
 8004880:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004882:	e000      	b.n	8004886 <ethernet_link_check_state+0xce>
      break;
 8004884:	bf00      	nop
    if(linkchanged)
 8004886:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004888:	2b00      	cmp	r3, #0
 800488a:	d018      	beq.n	80048be <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800488c:	f107 030c 	add.w	r3, r7, #12
 8004890:	4619      	mov	r1, r3
 8004892:	480e      	ldr	r0, [pc, #56]	@ (80048cc <ethernet_link_check_state+0x114>)
 8004894:	f7fd fbce 	bl	8002034 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004898:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800489a:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 800489c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800489e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80048a0:	f107 030c 	add.w	r3, r7, #12
 80048a4:	4619      	mov	r1, r3
 80048a6:	4809      	ldr	r0, [pc, #36]	@ (80048cc <ethernet_link_check_state+0x114>)
 80048a8:	f7fd fcbb 	bl	8002222 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80048ac:	4807      	ldr	r0, [pc, #28]	@ (80048cc <ethernet_link_check_state+0x114>)
 80048ae:	f7fc ff83 	bl	80017b8 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 ff58 	bl	8005768 <netif_set_up>
      netif_set_link_up(netif);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 fff3 	bl	80058a4 <netif_set_link_up>
}
 80048be:	bf00      	nop
 80048c0:	3780      	adds	r7, #128	@ 0x80
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	20004d4c 	.word	0x20004d4c
 80048cc:	20004c64 	.word	0x20004c64

080048d0 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af02      	add	r7, sp, #8
 80048d6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80048d8:	4812      	ldr	r0, [pc, #72]	@ (8004924 <HAL_ETH_RxAllocateCallback+0x54>)
 80048da:	f000 fcbf 	bl	800525c <memp_malloc_pool>
 80048de:	60f8      	str	r0, [r7, #12]
  if (p)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d014      	beq.n	8004910 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f103 0220 	add.w	r2, r3, #32
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4a0d      	ldr	r2, [pc, #52]	@ (8004928 <HAL_ETH_RxAllocateCallback+0x58>)
 80048f4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80048fe:	9201      	str	r2, [sp, #4]
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2241      	movs	r2, #65	@ 0x41
 8004906:	2100      	movs	r1, #0
 8004908:	2000      	movs	r0, #0
 800490a:	f001 f9f5 	bl	8005cf8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800490e:	e005      	b.n	800491c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004910:	4b06      	ldr	r3, [pc, #24]	@ (800492c <HAL_ETH_RxAllocateCallback+0x5c>)
 8004912:	2201      	movs	r2, #1
 8004914:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]
}
 800491c:	bf00      	nop
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	08013140 	.word	0x08013140
 8004928:	0800457d 	.word	0x0800457d
 800492c:	20004b20 	.word	0x20004b20

08004930 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004930:	b480      	push	{r7}
 8004932:	b089      	sub	sp, #36	@ 0x24
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004946:	2300      	movs	r3, #0
 8004948:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3b20      	subs	r3, #32
 800494e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	2200      	movs	r2, #0
 800495a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	887a      	ldrh	r2, [r7, #2]
 8004960:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d103      	bne.n	8004972 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	69fa      	ldr	r2, [r7, #28]
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	e003      	b.n	800497a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	69fa      	ldr	r2, [r7, #28]
 800497e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	61fb      	str	r3, [r7, #28]
 8004986:	e009      	b.n	800499c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	891a      	ldrh	r2, [r3, #8]
 800498c:	887b      	ldrh	r3, [r7, #2]
 800498e:	4413      	add	r3, r2
 8004990:	b29a      	uxth	r2, r3
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	61fb      	str	r3, [r7, #28]
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f2      	bne.n	8004988 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80049a2:	bf00      	nop
 80049a4:	bf00      	nop
 80049a6:	3724      	adds	r7, #36	@ 0x24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	4603      	mov	r3, r0
 80049b8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80049ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049be:	021b      	lsls	r3, r3, #8
 80049c0:	b21a      	sxth	r2, r3
 80049c2:	88fb      	ldrh	r3, [r7, #6]
 80049c4:	0a1b      	lsrs	r3, r3, #8
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	b21b      	sxth	r3, r3
 80049ca:	4313      	orrs	r3, r2
 80049cc:	b21b      	sxth	r3, r3
 80049ce:	b29b      	uxth	r3, r3
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	061a      	lsls	r2, r3, #24
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	021b      	lsls	r3, r3, #8
 80049ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80049f0:	431a      	orrs	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	0a1b      	lsrs	r3, r3, #8
 80049f6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	0e1b      	lsrs	r3, r3, #24
 8004a00:	4313      	orrs	r3, r2
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b082      	sub	sp, #8
 8004a12:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004a14:	2300      	movs	r3, #0
 8004a16:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004a18:	f000 f8d4 	bl	8004bc4 <mem_init>
  memp_init();
 8004a1c:	f000 fbda 	bl	80051d4 <memp_init>
  pbuf_init();
  netif_init();
 8004a20:	f000 fcd8 	bl	80053d4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004a24:	f007 fe54 	bl	800c6d0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004a28:	f001 fdae 	bl	8006588 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004a2c:	f007 fdc6 	bl	800c5bc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004a30:	bf00      	nop
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	4603      	mov	r3, r0
 8004a40:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004a42:	4b05      	ldr	r3, [pc, #20]	@ (8004a58 <ptr_to_mem+0x20>)
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	88fb      	ldrh	r3, [r7, #6]
 8004a48:	4413      	add	r3, r2
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	200053d8 	.word	0x200053d8

08004a5c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004a64:	4b05      	ldr	r3, [pc, #20]	@ (8004a7c <mem_to_ptr+0x20>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	b29b      	uxth	r3, r3
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	200053d8 	.word	0x200053d8

08004a80 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004a80:	b590      	push	{r4, r7, lr}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004a88:	4b45      	ldr	r3, [pc, #276]	@ (8004ba0 <plug_holes+0x120>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d206      	bcs.n	8004aa0 <plug_holes+0x20>
 8004a92:	4b44      	ldr	r3, [pc, #272]	@ (8004ba4 <plug_holes+0x124>)
 8004a94:	f240 12df 	movw	r2, #479	@ 0x1df
 8004a98:	4943      	ldr	r1, [pc, #268]	@ (8004ba8 <plug_holes+0x128>)
 8004a9a:	4844      	ldr	r0, [pc, #272]	@ (8004bac <plug_holes+0x12c>)
 8004a9c:	f00a fc5e 	bl	800f35c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004aa0:	4b43      	ldr	r3, [pc, #268]	@ (8004bb0 <plug_holes+0x130>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d306      	bcc.n	8004ab8 <plug_holes+0x38>
 8004aaa:	4b3e      	ldr	r3, [pc, #248]	@ (8004ba4 <plug_holes+0x124>)
 8004aac:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8004ab0:	4940      	ldr	r1, [pc, #256]	@ (8004bb4 <plug_holes+0x134>)
 8004ab2:	483e      	ldr	r0, [pc, #248]	@ (8004bac <plug_holes+0x12c>)
 8004ab4:	f00a fc52 	bl	800f35c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	791b      	ldrb	r3, [r3, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d006      	beq.n	8004ace <plug_holes+0x4e>
 8004ac0:	4b38      	ldr	r3, [pc, #224]	@ (8004ba4 <plug_holes+0x124>)
 8004ac2:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8004ac6:	493c      	ldr	r1, [pc, #240]	@ (8004bb8 <plug_holes+0x138>)
 8004ac8:	4838      	ldr	r0, [pc, #224]	@ (8004bac <plug_holes+0x12c>)
 8004aca:	f00a fc47 	bl	800f35c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004ad6:	d906      	bls.n	8004ae6 <plug_holes+0x66>
 8004ad8:	4b32      	ldr	r3, [pc, #200]	@ (8004ba4 <plug_holes+0x124>)
 8004ada:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8004ade:	4937      	ldr	r1, [pc, #220]	@ (8004bbc <plug_holes+0x13c>)
 8004ae0:	4832      	ldr	r0, [pc, #200]	@ (8004bac <plug_holes+0x12c>)
 8004ae2:	f00a fc3b 	bl	800f35c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff ffa4 	bl	8004a38 <ptr_to_mem>
 8004af0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d024      	beq.n	8004b44 <plug_holes+0xc4>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	791b      	ldrb	r3, [r3, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d120      	bne.n	8004b44 <plug_holes+0xc4>
 8004b02:	4b2b      	ldr	r3, [pc, #172]	@ (8004bb0 <plug_holes+0x130>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d01b      	beq.n	8004b44 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004b0c:	4b2c      	ldr	r3, [pc, #176]	@ (8004bc0 <plug_holes+0x140>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d102      	bne.n	8004b1c <plug_holes+0x9c>
      lfree = mem;
 8004b16:	4a2a      	ldr	r2, [pc, #168]	@ (8004bc0 <plug_holes+0x140>)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	881a      	ldrh	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004b2c:	d00a      	beq.n	8004b44 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7ff ff80 	bl	8004a38 <ptr_to_mem>
 8004b38:	4604      	mov	r4, r0
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7ff ff8e 	bl	8004a5c <mem_to_ptr>
 8004b40:	4603      	mov	r3, r0
 8004b42:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	885b      	ldrh	r3, [r3, #2]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7ff ff75 	bl	8004a38 <ptr_to_mem>
 8004b4e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d01f      	beq.n	8004b98 <plug_holes+0x118>
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	791b      	ldrb	r3, [r3, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d11b      	bne.n	8004b98 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004b60:	4b17      	ldr	r3, [pc, #92]	@ (8004bc0 <plug_holes+0x140>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d102      	bne.n	8004b70 <plug_holes+0xf0>
      lfree = pmem;
 8004b6a:	4a15      	ldr	r2, [pc, #84]	@ (8004bc0 <plug_holes+0x140>)
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	881a      	ldrh	r2, [r3, #0]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004b80:	d00a      	beq.n	8004b98 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff ff56 	bl	8004a38 <ptr_to_mem>
 8004b8c:	4604      	mov	r4, r0
 8004b8e:	68b8      	ldr	r0, [r7, #8]
 8004b90:	f7ff ff64 	bl	8004a5c <mem_to_ptr>
 8004b94:	4603      	mov	r3, r0
 8004b96:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004b98:	bf00      	nop
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd90      	pop	{r4, r7, pc}
 8004ba0:	200053d8 	.word	0x200053d8
 8004ba4:	0801079c 	.word	0x0801079c
 8004ba8:	080107cc 	.word	0x080107cc
 8004bac:	080107e4 	.word	0x080107e4
 8004bb0:	200053dc 	.word	0x200053dc
 8004bb4:	0801080c 	.word	0x0801080c
 8004bb8:	08010828 	.word	0x08010828
 8004bbc:	08010844 	.word	0x08010844
 8004bc0:	200053e0 	.word	0x200053e0

08004bc4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004bca:	4b18      	ldr	r3, [pc, #96]	@ (8004c2c <mem_init+0x68>)
 8004bcc:	3303      	adds	r3, #3
 8004bce:	f023 0303 	bic.w	r3, r3, #3
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	4b16      	ldr	r3, [pc, #88]	@ (8004c30 <mem_init+0x6c>)
 8004bd6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004bd8:	4b15      	ldr	r3, [pc, #84]	@ (8004c30 <mem_init+0x6c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004be4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004bf2:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8004bf6:	f7ff ff1f 	bl	8004a38 <ptr_to_mem>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8004c34 <mem_init+0x70>)
 8004bfe:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004c00:	4b0c      	ldr	r3, [pc, #48]	@ (8004c34 <mem_init+0x70>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2201      	movs	r2, #1
 8004c06:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004c08:	4b0a      	ldr	r3, [pc, #40]	@ (8004c34 <mem_init+0x70>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004c10:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004c12:	4b08      	ldr	r3, [pc, #32]	@ (8004c34 <mem_init+0x70>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004c1a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004c1c:	4b04      	ldr	r3, [pc, #16]	@ (8004c30 <mem_init+0x6c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a05      	ldr	r2, [pc, #20]	@ (8004c38 <mem_init+0x74>)
 8004c22:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004c24:	bf00      	nop
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	20004d84 	.word	0x20004d84
 8004c30:	200053d8 	.word	0x200053d8
 8004c34:	200053dc 	.word	0x200053dc
 8004c38:	200053e0 	.word	0x200053e0

08004c3c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff ff09 	bl	8004a5c <mem_to_ptr>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	881b      	ldrh	r3, [r3, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7ff fef0 	bl	8004a38 <ptr_to_mem>
 8004c58:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	885b      	ldrh	r3, [r3, #2]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7ff feea 	bl	8004a38 <ptr_to_mem>
 8004c64:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	881b      	ldrh	r3, [r3, #0]
 8004c6a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004c6e:	d818      	bhi.n	8004ca2 <mem_link_valid+0x66>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	885b      	ldrh	r3, [r3, #2]
 8004c74:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004c78:	d813      	bhi.n	8004ca2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004c7e:	8afa      	ldrh	r2, [r7, #22]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d004      	beq.n	8004c8e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	8afa      	ldrh	r2, [r7, #22]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d109      	bne.n	8004ca2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004c8e:	4b08      	ldr	r3, [pc, #32]	@ (8004cb0 <mem_link_valid+0x74>)
 8004c90:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d006      	beq.n	8004ca6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	885b      	ldrh	r3, [r3, #2]
 8004c9c:	8afa      	ldrh	r2, [r7, #22]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d001      	beq.n	8004ca6 <mem_link_valid+0x6a>
    return 0;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	e000      	b.n	8004ca8 <mem_link_valid+0x6c>
  }
  return 1;
 8004ca6:	2301      	movs	r3, #1
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	200053dc 	.word	0x200053dc

08004cb4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d04c      	beq.n	8004d5c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f003 0303 	and.w	r3, r3, #3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d007      	beq.n	8004cdc <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004ccc:	4b25      	ldr	r3, [pc, #148]	@ (8004d64 <mem_free+0xb0>)
 8004cce:	f240 2273 	movw	r2, #627	@ 0x273
 8004cd2:	4925      	ldr	r1, [pc, #148]	@ (8004d68 <mem_free+0xb4>)
 8004cd4:	4825      	ldr	r0, [pc, #148]	@ (8004d6c <mem_free+0xb8>)
 8004cd6:	f00a fb41 	bl	800f35c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004cda:	e040      	b.n	8004d5e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3b08      	subs	r3, #8
 8004ce0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004ce2:	4b23      	ldr	r3, [pc, #140]	@ (8004d70 <mem_free+0xbc>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d306      	bcc.n	8004cfa <mem_free+0x46>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f103 020c 	add.w	r2, r3, #12
 8004cf2:	4b20      	ldr	r3, [pc, #128]	@ (8004d74 <mem_free+0xc0>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d907      	bls.n	8004d0a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8004d64 <mem_free+0xb0>)
 8004cfc:	f240 227f 	movw	r2, #639	@ 0x27f
 8004d00:	491d      	ldr	r1, [pc, #116]	@ (8004d78 <mem_free+0xc4>)
 8004d02:	481a      	ldr	r0, [pc, #104]	@ (8004d6c <mem_free+0xb8>)
 8004d04:	f00a fb2a 	bl	800f35c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004d08:	e029      	b.n	8004d5e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	791b      	ldrb	r3, [r3, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d107      	bne.n	8004d22 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004d12:	4b14      	ldr	r3, [pc, #80]	@ (8004d64 <mem_free+0xb0>)
 8004d14:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8004d18:	4918      	ldr	r1, [pc, #96]	@ (8004d7c <mem_free+0xc8>)
 8004d1a:	4814      	ldr	r0, [pc, #80]	@ (8004d6c <mem_free+0xb8>)
 8004d1c:	f00a fb1e 	bl	800f35c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004d20:	e01d      	b.n	8004d5e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f7ff ff8a 	bl	8004c3c <mem_link_valid>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d107      	bne.n	8004d3e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004d64 <mem_free+0xb0>)
 8004d30:	f240 2295 	movw	r2, #661	@ 0x295
 8004d34:	4912      	ldr	r1, [pc, #72]	@ (8004d80 <mem_free+0xcc>)
 8004d36:	480d      	ldr	r0, [pc, #52]	@ (8004d6c <mem_free+0xb8>)
 8004d38:	f00a fb10 	bl	800f35c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004d3c:	e00f      	b.n	8004d5e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004d44:	4b0f      	ldr	r3, [pc, #60]	@ (8004d84 <mem_free+0xd0>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d202      	bcs.n	8004d54 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004d4e:	4a0d      	ldr	r2, [pc, #52]	@ (8004d84 <mem_free+0xd0>)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f7ff fe93 	bl	8004a80 <plug_holes>
 8004d5a:	e000      	b.n	8004d5e <mem_free+0xaa>
    return;
 8004d5c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	0801079c 	.word	0x0801079c
 8004d68:	08010870 	.word	0x08010870
 8004d6c:	080107e4 	.word	0x080107e4
 8004d70:	200053d8 	.word	0x200053d8
 8004d74:	200053dc 	.word	0x200053dc
 8004d78:	08010894 	.word	0x08010894
 8004d7c:	080108b0 	.word	0x080108b0
 8004d80:	080108d8 	.word	0x080108d8
 8004d84:	200053e0 	.word	0x200053e0

08004d88 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004d94:	887b      	ldrh	r3, [r7, #2]
 8004d96:	3303      	adds	r3, #3
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	f023 0303 	bic.w	r3, r3, #3
 8004d9e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004da0:	8bfb      	ldrh	r3, [r7, #30]
 8004da2:	2b0b      	cmp	r3, #11
 8004da4:	d801      	bhi.n	8004daa <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004da6:	230c      	movs	r3, #12
 8004da8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004daa:	8bfb      	ldrh	r3, [r7, #30]
 8004dac:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004db0:	d803      	bhi.n	8004dba <mem_trim+0x32>
 8004db2:	8bfa      	ldrh	r2, [r7, #30]
 8004db4:	887b      	ldrh	r3, [r7, #2]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d201      	bcs.n	8004dbe <mem_trim+0x36>
    return NULL;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	e0cc      	b.n	8004f58 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004dbe:	4b68      	ldr	r3, [pc, #416]	@ (8004f60 <mem_trim+0x1d8>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d304      	bcc.n	8004dd2 <mem_trim+0x4a>
 8004dc8:	4b66      	ldr	r3, [pc, #408]	@ (8004f64 <mem_trim+0x1dc>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d306      	bcc.n	8004de0 <mem_trim+0x58>
 8004dd2:	4b65      	ldr	r3, [pc, #404]	@ (8004f68 <mem_trim+0x1e0>)
 8004dd4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8004dd8:	4964      	ldr	r1, [pc, #400]	@ (8004f6c <mem_trim+0x1e4>)
 8004dda:	4865      	ldr	r0, [pc, #404]	@ (8004f70 <mem_trim+0x1e8>)
 8004ddc:	f00a fabe 	bl	800f35c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004de0:	4b5f      	ldr	r3, [pc, #380]	@ (8004f60 <mem_trim+0x1d8>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d304      	bcc.n	8004df4 <mem_trim+0x6c>
 8004dea:	4b5e      	ldr	r3, [pc, #376]	@ (8004f64 <mem_trim+0x1dc>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d301      	bcc.n	8004df8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	e0af      	b.n	8004f58 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3b08      	subs	r3, #8
 8004dfc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004dfe:	69b8      	ldr	r0, [r7, #24]
 8004e00:	f7ff fe2c 	bl	8004a5c <mem_to_ptr>
 8004e04:	4603      	mov	r3, r0
 8004e06:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	881a      	ldrh	r2, [r3, #0]
 8004e0c:	8afb      	ldrh	r3, [r7, #22]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b08      	subs	r3, #8
 8004e14:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004e16:	8bfa      	ldrh	r2, [r7, #30]
 8004e18:	8abb      	ldrh	r3, [r7, #20]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d906      	bls.n	8004e2c <mem_trim+0xa4>
 8004e1e:	4b52      	ldr	r3, [pc, #328]	@ (8004f68 <mem_trim+0x1e0>)
 8004e20:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8004e24:	4953      	ldr	r1, [pc, #332]	@ (8004f74 <mem_trim+0x1ec>)
 8004e26:	4852      	ldr	r0, [pc, #328]	@ (8004f70 <mem_trim+0x1e8>)
 8004e28:	f00a fa98 	bl	800f35c <iprintf>
  if (newsize > size) {
 8004e2c:	8bfa      	ldrh	r2, [r7, #30]
 8004e2e:	8abb      	ldrh	r3, [r7, #20]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d901      	bls.n	8004e38 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004e34:	2300      	movs	r3, #0
 8004e36:	e08f      	b.n	8004f58 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004e38:	8bfa      	ldrh	r2, [r7, #30]
 8004e3a:	8abb      	ldrh	r3, [r7, #20]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d101      	bne.n	8004e44 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	e089      	b.n	8004f58 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	881b      	ldrh	r3, [r3, #0]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7ff fdf5 	bl	8004a38 <ptr_to_mem>
 8004e4e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	791b      	ldrb	r3, [r3, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d13f      	bne.n	8004ed8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	881b      	ldrh	r3, [r3, #0]
 8004e5c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004e60:	d106      	bne.n	8004e70 <mem_trim+0xe8>
 8004e62:	4b41      	ldr	r3, [pc, #260]	@ (8004f68 <mem_trim+0x1e0>)
 8004e64:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8004e68:	4943      	ldr	r1, [pc, #268]	@ (8004f78 <mem_trim+0x1f0>)
 8004e6a:	4841      	ldr	r0, [pc, #260]	@ (8004f70 <mem_trim+0x1e8>)
 8004e6c:	f00a fa76 	bl	800f35c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	881b      	ldrh	r3, [r3, #0]
 8004e74:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004e76:	8afa      	ldrh	r2, [r7, #22]
 8004e78:	8bfb      	ldrh	r3, [r7, #30]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	3308      	adds	r3, #8
 8004e80:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004e82:	4b3e      	ldr	r3, [pc, #248]	@ (8004f7c <mem_trim+0x1f4>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d106      	bne.n	8004e9a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004e8c:	89fb      	ldrh	r3, [r7, #14]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7ff fdd2 	bl	8004a38 <ptr_to_mem>
 8004e94:	4603      	mov	r3, r0
 8004e96:	4a39      	ldr	r2, [pc, #228]	@ (8004f7c <mem_trim+0x1f4>)
 8004e98:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004e9a:	89fb      	ldrh	r3, [r7, #14]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7ff fdcb 	bl	8004a38 <ptr_to_mem>
 8004ea2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	89ba      	ldrh	r2, [r7, #12]
 8004eae:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	8afa      	ldrh	r2, [r7, #22]
 8004eb4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	89fa      	ldrh	r2, [r7, #14]
 8004eba:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	881b      	ldrh	r3, [r3, #0]
 8004ec0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004ec4:	d047      	beq.n	8004f56 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7ff fdb4 	bl	8004a38 <ptr_to_mem>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	89fb      	ldrh	r3, [r7, #14]
 8004ed4:	8053      	strh	r3, [r2, #2]
 8004ed6:	e03e      	b.n	8004f56 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004ed8:	8bfb      	ldrh	r3, [r7, #30]
 8004eda:	f103 0214 	add.w	r2, r3, #20
 8004ede:	8abb      	ldrh	r3, [r7, #20]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d838      	bhi.n	8004f56 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004ee4:	8afa      	ldrh	r2, [r7, #22]
 8004ee6:	8bfb      	ldrh	r3, [r7, #30]
 8004ee8:	4413      	add	r3, r2
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	3308      	adds	r3, #8
 8004eee:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004ef8:	d106      	bne.n	8004f08 <mem_trim+0x180>
 8004efa:	4b1b      	ldr	r3, [pc, #108]	@ (8004f68 <mem_trim+0x1e0>)
 8004efc:	f240 3216 	movw	r2, #790	@ 0x316
 8004f00:	491d      	ldr	r1, [pc, #116]	@ (8004f78 <mem_trim+0x1f0>)
 8004f02:	481b      	ldr	r0, [pc, #108]	@ (8004f70 <mem_trim+0x1e8>)
 8004f04:	f00a fa2a 	bl	800f35c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004f08:	89fb      	ldrh	r3, [r7, #14]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7ff fd94 	bl	8004a38 <ptr_to_mem>
 8004f10:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004f12:	4b1a      	ldr	r3, [pc, #104]	@ (8004f7c <mem_trim+0x1f4>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d202      	bcs.n	8004f22 <mem_trim+0x19a>
      lfree = mem2;
 8004f1c:	4a17      	ldr	r2, [pc, #92]	@ (8004f7c <mem_trim+0x1f4>)
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	2200      	movs	r2, #0
 8004f26:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	881a      	ldrh	r2, [r3, #0]
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	8afa      	ldrh	r2, [r7, #22]
 8004f34:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	89fa      	ldrh	r2, [r7, #14]
 8004f3a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004f44:	d007      	beq.n	8004f56 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff fd74 	bl	8004a38 <ptr_to_mem>
 8004f50:	4602      	mov	r2, r0
 8004f52:	89fb      	ldrh	r3, [r7, #14]
 8004f54:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004f56:	687b      	ldr	r3, [r7, #4]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3720      	adds	r7, #32
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	200053d8 	.word	0x200053d8
 8004f64:	200053dc 	.word	0x200053dc
 8004f68:	0801079c 	.word	0x0801079c
 8004f6c:	0801090c 	.word	0x0801090c
 8004f70:	080107e4 	.word	0x080107e4
 8004f74:	08010924 	.word	0x08010924
 8004f78:	08010944 	.word	0x08010944
 8004f7c:	200053e0 	.word	0x200053e0

08004f80 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b088      	sub	sp, #32
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	4603      	mov	r3, r0
 8004f88:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004f8a:	88fb      	ldrh	r3, [r7, #6]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <mem_malloc+0x14>
    return NULL;
 8004f90:	2300      	movs	r3, #0
 8004f92:	e0d9      	b.n	8005148 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004f94:	88fb      	ldrh	r3, [r7, #6]
 8004f96:	3303      	adds	r3, #3
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	f023 0303 	bic.w	r3, r3, #3
 8004f9e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004fa0:	8bbb      	ldrh	r3, [r7, #28]
 8004fa2:	2b0b      	cmp	r3, #11
 8004fa4:	d801      	bhi.n	8004faa <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004fa6:	230c      	movs	r3, #12
 8004fa8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004faa:	8bbb      	ldrh	r3, [r7, #28]
 8004fac:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004fb0:	d803      	bhi.n	8004fba <mem_malloc+0x3a>
 8004fb2:	8bba      	ldrh	r2, [r7, #28]
 8004fb4:	88fb      	ldrh	r3, [r7, #6]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d201      	bcs.n	8004fbe <mem_malloc+0x3e>
    return NULL;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	e0c4      	b.n	8005148 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004fbe:	4b64      	ldr	r3, [pc, #400]	@ (8005150 <mem_malloc+0x1d0>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7ff fd4a 	bl	8004a5c <mem_to_ptr>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	83fb      	strh	r3, [r7, #30]
 8004fcc:	e0b4      	b.n	8005138 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004fce:	8bfb      	ldrh	r3, [r7, #30]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7ff fd31 	bl	8004a38 <ptr_to_mem>
 8004fd6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	791b      	ldrb	r3, [r3, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f040 80a4 	bne.w	800512a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	8bfb      	ldrh	r3, [r7, #30]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	f1a3 0208 	sub.w	r2, r3, #8
 8004ff0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	f0c0 8099 	bcc.w	800512a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	8bfb      	ldrh	r3, [r7, #30]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	f1a3 0208 	sub.w	r2, r3, #8
 8005006:	8bbb      	ldrh	r3, [r7, #28]
 8005008:	3314      	adds	r3, #20
 800500a:	429a      	cmp	r2, r3
 800500c:	d333      	bcc.n	8005076 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800500e:	8bfa      	ldrh	r2, [r7, #30]
 8005010:	8bbb      	ldrh	r3, [r7, #28]
 8005012:	4413      	add	r3, r2
 8005014:	b29b      	uxth	r3, r3
 8005016:	3308      	adds	r3, #8
 8005018:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800501a:	8a7b      	ldrh	r3, [r7, #18]
 800501c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005020:	d106      	bne.n	8005030 <mem_malloc+0xb0>
 8005022:	4b4c      	ldr	r3, [pc, #304]	@ (8005154 <mem_malloc+0x1d4>)
 8005024:	f240 3287 	movw	r2, #903	@ 0x387
 8005028:	494b      	ldr	r1, [pc, #300]	@ (8005158 <mem_malloc+0x1d8>)
 800502a:	484c      	ldr	r0, [pc, #304]	@ (800515c <mem_malloc+0x1dc>)
 800502c:	f00a f996 	bl	800f35c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005030:	8a7b      	ldrh	r3, [r7, #18]
 8005032:	4618      	mov	r0, r3
 8005034:	f7ff fd00 	bl	8004a38 <ptr_to_mem>
 8005038:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	881a      	ldrh	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8bfa      	ldrh	r2, [r7, #30]
 800504c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	8a7a      	ldrh	r2, [r7, #18]
 8005052:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	2201      	movs	r2, #1
 8005058:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005062:	d00b      	beq.n	800507c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	4618      	mov	r0, r3
 800506a:	f7ff fce5 	bl	8004a38 <ptr_to_mem>
 800506e:	4602      	mov	r2, r0
 8005070:	8a7b      	ldrh	r3, [r7, #18]
 8005072:	8053      	strh	r3, [r2, #2]
 8005074:	e002      	b.n	800507c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	2201      	movs	r2, #1
 800507a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800507c:	4b34      	ldr	r3, [pc, #208]	@ (8005150 <mem_malloc+0x1d0>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	429a      	cmp	r2, r3
 8005084:	d127      	bne.n	80050d6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005086:	4b32      	ldr	r3, [pc, #200]	@ (8005150 <mem_malloc+0x1d0>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800508c:	e005      	b.n	800509a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	881b      	ldrh	r3, [r3, #0]
 8005092:	4618      	mov	r0, r3
 8005094:	f7ff fcd0 	bl	8004a38 <ptr_to_mem>
 8005098:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	791b      	ldrb	r3, [r3, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d004      	beq.n	80050ac <mem_malloc+0x12c>
 80050a2:	4b2f      	ldr	r3, [pc, #188]	@ (8005160 <mem_malloc+0x1e0>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d1f0      	bne.n	800508e <mem_malloc+0x10e>
          }
          lfree = cur;
 80050ac:	4a28      	ldr	r2, [pc, #160]	@ (8005150 <mem_malloc+0x1d0>)
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80050b2:	4b27      	ldr	r3, [pc, #156]	@ (8005150 <mem_malloc+0x1d0>)
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	4b2a      	ldr	r3, [pc, #168]	@ (8005160 <mem_malloc+0x1e0>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d00b      	beq.n	80050d6 <mem_malloc+0x156>
 80050be:	4b24      	ldr	r3, [pc, #144]	@ (8005150 <mem_malloc+0x1d0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	791b      	ldrb	r3, [r3, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d006      	beq.n	80050d6 <mem_malloc+0x156>
 80050c8:	4b22      	ldr	r3, [pc, #136]	@ (8005154 <mem_malloc+0x1d4>)
 80050ca:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80050ce:	4925      	ldr	r1, [pc, #148]	@ (8005164 <mem_malloc+0x1e4>)
 80050d0:	4822      	ldr	r0, [pc, #136]	@ (800515c <mem_malloc+0x1dc>)
 80050d2:	f00a f943 	bl	800f35c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80050d6:	8bba      	ldrh	r2, [r7, #28]
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	4413      	add	r3, r2
 80050dc:	3308      	adds	r3, #8
 80050de:	4a20      	ldr	r2, [pc, #128]	@ (8005160 <mem_malloc+0x1e0>)
 80050e0:	6812      	ldr	r2, [r2, #0]
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d906      	bls.n	80050f4 <mem_malloc+0x174>
 80050e6:	4b1b      	ldr	r3, [pc, #108]	@ (8005154 <mem_malloc+0x1d4>)
 80050e8:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80050ec:	491e      	ldr	r1, [pc, #120]	@ (8005168 <mem_malloc+0x1e8>)
 80050ee:	481b      	ldr	r0, [pc, #108]	@ (800515c <mem_malloc+0x1dc>)
 80050f0:	f00a f934 	bl	800f35c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d006      	beq.n	800510c <mem_malloc+0x18c>
 80050fe:	4b15      	ldr	r3, [pc, #84]	@ (8005154 <mem_malloc+0x1d4>)
 8005100:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8005104:	4919      	ldr	r1, [pc, #100]	@ (800516c <mem_malloc+0x1ec>)
 8005106:	4815      	ldr	r0, [pc, #84]	@ (800515c <mem_malloc+0x1dc>)
 8005108:	f00a f928 	bl	800f35c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f003 0303 	and.w	r3, r3, #3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d006      	beq.n	8005124 <mem_malloc+0x1a4>
 8005116:	4b0f      	ldr	r3, [pc, #60]	@ (8005154 <mem_malloc+0x1d4>)
 8005118:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800511c:	4914      	ldr	r1, [pc, #80]	@ (8005170 <mem_malloc+0x1f0>)
 800511e:	480f      	ldr	r0, [pc, #60]	@ (800515c <mem_malloc+0x1dc>)
 8005120:	f00a f91c 	bl	800f35c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	3308      	adds	r3, #8
 8005128:	e00e      	b.n	8005148 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800512a:	8bfb      	ldrh	r3, [r7, #30]
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff fc83 	bl	8004a38 <ptr_to_mem>
 8005132:	4603      	mov	r3, r0
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005138:	8bfa      	ldrh	r2, [r7, #30]
 800513a:	8bbb      	ldrh	r3, [r7, #28]
 800513c:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8005140:	429a      	cmp	r2, r3
 8005142:	f4ff af44 	bcc.w	8004fce <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3720      	adds	r7, #32
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	200053e0 	.word	0x200053e0
 8005154:	0801079c 	.word	0x0801079c
 8005158:	08010944 	.word	0x08010944
 800515c:	080107e4 	.word	0x080107e4
 8005160:	200053dc 	.word	0x200053dc
 8005164:	08010958 	.word	0x08010958
 8005168:	08010974 	.word	0x08010974
 800516c:	080109a4 	.word	0x080109a4
 8005170:	080109d4 	.word	0x080109d4

08005174 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	3303      	adds	r3, #3
 800518a:	f023 0303 	bic.w	r3, r3, #3
 800518e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005190:	2300      	movs	r3, #0
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	e011      	b.n	80051ba <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	461a      	mov	r2, r3
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	4413      	add	r3, r2
 80051b2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	3301      	adds	r3, #1
 80051b8:	60fb      	str	r3, [r7, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	885b      	ldrh	r3, [r3, #2]
 80051be:	461a      	mov	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4293      	cmp	r3, r2
 80051c4:	dbe7      	blt.n	8005196 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80051c6:	bf00      	nop
 80051c8:	bf00      	nop
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80051da:	2300      	movs	r3, #0
 80051dc:	80fb      	strh	r3, [r7, #6]
 80051de:	e009      	b.n	80051f4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80051e0:	88fb      	ldrh	r3, [r7, #6]
 80051e2:	4a08      	ldr	r2, [pc, #32]	@ (8005204 <memp_init+0x30>)
 80051e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7ff ffc3 	bl	8005174 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80051ee:	88fb      	ldrh	r3, [r7, #6]
 80051f0:	3301      	adds	r3, #1
 80051f2:	80fb      	strh	r3, [r7, #6]
 80051f4:	88fb      	ldrh	r3, [r7, #6]
 80051f6:	2b08      	cmp	r3, #8
 80051f8:	d9f2      	bls.n	80051e0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80051fa:	bf00      	nop
 80051fc:	bf00      	nop
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	080131b8 	.word	0x080131b8

08005208 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d012      	beq.n	8005244 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	6812      	ldr	r2, [r2, #0]
 8005226:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d006      	beq.n	8005240 <do_memp_malloc_pool+0x38>
 8005232:	4b07      	ldr	r3, [pc, #28]	@ (8005250 <do_memp_malloc_pool+0x48>)
 8005234:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8005238:	4906      	ldr	r1, [pc, #24]	@ (8005254 <do_memp_malloc_pool+0x4c>)
 800523a:	4807      	ldr	r0, [pc, #28]	@ (8005258 <do_memp_malloc_pool+0x50>)
 800523c:	f00a f88e 	bl	800f35c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	e000      	b.n	8005246 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	080109f8 	.word	0x080109f8
 8005254:	08010a28 	.word	0x08010a28
 8005258:	08010a4c 	.word	0x08010a4c

0800525c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d106      	bne.n	8005278 <memp_malloc_pool+0x1c>
 800526a:	4b0a      	ldr	r3, [pc, #40]	@ (8005294 <memp_malloc_pool+0x38>)
 800526c:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8005270:	4909      	ldr	r1, [pc, #36]	@ (8005298 <memp_malloc_pool+0x3c>)
 8005272:	480a      	ldr	r0, [pc, #40]	@ (800529c <memp_malloc_pool+0x40>)
 8005274:	f00a f872 	bl	800f35c <iprintf>
  if (desc == NULL) {
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <memp_malloc_pool+0x26>
    return NULL;
 800527e:	2300      	movs	r3, #0
 8005280:	e003      	b.n	800528a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7ff ffc0 	bl	8005208 <do_memp_malloc_pool>
 8005288:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800528a:	4618      	mov	r0, r3
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	080109f8 	.word	0x080109f8
 8005298:	08010a74 	.word	0x08010a74
 800529c:	08010a4c 	.word	0x08010a4c

080052a0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	4603      	mov	r3, r0
 80052a8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80052aa:	79fb      	ldrb	r3, [r7, #7]
 80052ac:	2b08      	cmp	r3, #8
 80052ae:	d908      	bls.n	80052c2 <memp_malloc+0x22>
 80052b0:	4b0a      	ldr	r3, [pc, #40]	@ (80052dc <memp_malloc+0x3c>)
 80052b2:	f240 1257 	movw	r2, #343	@ 0x157
 80052b6:	490a      	ldr	r1, [pc, #40]	@ (80052e0 <memp_malloc+0x40>)
 80052b8:	480a      	ldr	r0, [pc, #40]	@ (80052e4 <memp_malloc+0x44>)
 80052ba:	f00a f84f 	bl	800f35c <iprintf>
 80052be:	2300      	movs	r3, #0
 80052c0:	e008      	b.n	80052d4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80052c2:	79fb      	ldrb	r3, [r7, #7]
 80052c4:	4a08      	ldr	r2, [pc, #32]	@ (80052e8 <memp_malloc+0x48>)
 80052c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff ff9c 	bl	8005208 <do_memp_malloc_pool>
 80052d0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80052d2:	68fb      	ldr	r3, [r7, #12]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	080109f8 	.word	0x080109f8
 80052e0:	08010a88 	.word	0x08010a88
 80052e4:	08010a4c 	.word	0x08010a4c
 80052e8:	080131b8 	.word	0x080131b8

080052ec <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	f003 0303 	and.w	r3, r3, #3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d006      	beq.n	800530e <do_memp_free_pool+0x22>
 8005300:	4b0a      	ldr	r3, [pc, #40]	@ (800532c <do_memp_free_pool+0x40>)
 8005302:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8005306:	490a      	ldr	r1, [pc, #40]	@ (8005330 <do_memp_free_pool+0x44>)
 8005308:	480a      	ldr	r0, [pc, #40]	@ (8005334 <do_memp_free_pool+0x48>)
 800530a:	f00a f827 	bl	800f35c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005324:	bf00      	nop
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	080109f8 	.word	0x080109f8
 8005330:	08010aa8 	.word	0x08010aa8
 8005334:	08010a4c 	.word	0x08010a4c

08005338 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d106      	bne.n	8005356 <memp_free_pool+0x1e>
 8005348:	4b0a      	ldr	r3, [pc, #40]	@ (8005374 <memp_free_pool+0x3c>)
 800534a:	f240 1295 	movw	r2, #405	@ 0x195
 800534e:	490a      	ldr	r1, [pc, #40]	@ (8005378 <memp_free_pool+0x40>)
 8005350:	480a      	ldr	r0, [pc, #40]	@ (800537c <memp_free_pool+0x44>)
 8005352:	f00a f803 	bl	800f35c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d007      	beq.n	800536c <memp_free_pool+0x34>
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d004      	beq.n	800536c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8005362:	6839      	ldr	r1, [r7, #0]
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7ff ffc1 	bl	80052ec <do_memp_free_pool>
 800536a:	e000      	b.n	800536e <memp_free_pool+0x36>
    return;
 800536c:	bf00      	nop
}
 800536e:	3708      	adds	r7, #8
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	080109f8 	.word	0x080109f8
 8005378:	08010a74 	.word	0x08010a74
 800537c:	08010a4c 	.word	0x08010a4c

08005380 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	4603      	mov	r3, r0
 8005388:	6039      	str	r1, [r7, #0]
 800538a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800538c:	79fb      	ldrb	r3, [r7, #7]
 800538e:	2b08      	cmp	r3, #8
 8005390:	d907      	bls.n	80053a2 <memp_free+0x22>
 8005392:	4b0c      	ldr	r3, [pc, #48]	@ (80053c4 <memp_free+0x44>)
 8005394:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8005398:	490b      	ldr	r1, [pc, #44]	@ (80053c8 <memp_free+0x48>)
 800539a:	480c      	ldr	r0, [pc, #48]	@ (80053cc <memp_free+0x4c>)
 800539c:	f009 ffde 	bl	800f35c <iprintf>
 80053a0:	e00c      	b.n	80053bc <memp_free+0x3c>

  if (mem == NULL) {
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d008      	beq.n	80053ba <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80053a8:	79fb      	ldrb	r3, [r7, #7]
 80053aa:	4a09      	ldr	r2, [pc, #36]	@ (80053d0 <memp_free+0x50>)
 80053ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053b0:	6839      	ldr	r1, [r7, #0]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff ff9a 	bl	80052ec <do_memp_free_pool>
 80053b8:	e000      	b.n	80053bc <memp_free+0x3c>
    return;
 80053ba:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	080109f8 	.word	0x080109f8
 80053c8:	08010ac8 	.word	0x08010ac8
 80053cc:	08010a4c 	.word	0x08010a4c
 80053d0:	080131b8 	.word	0x080131b8

080053d4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80053d4:	b480      	push	{r7}
 80053d6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80053d8:	bf00      	nop
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
	...

080053e4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
 80053f0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d108      	bne.n	800540a <netif_add+0x26>
 80053f8:	4b57      	ldr	r3, [pc, #348]	@ (8005558 <netif_add+0x174>)
 80053fa:	f240 1227 	movw	r2, #295	@ 0x127
 80053fe:	4957      	ldr	r1, [pc, #348]	@ (800555c <netif_add+0x178>)
 8005400:	4857      	ldr	r0, [pc, #348]	@ (8005560 <netif_add+0x17c>)
 8005402:	f009 ffab 	bl	800f35c <iprintf>
 8005406:	2300      	movs	r3, #0
 8005408:	e0a2      	b.n	8005550 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800540a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540c:	2b00      	cmp	r3, #0
 800540e:	d108      	bne.n	8005422 <netif_add+0x3e>
 8005410:	4b51      	ldr	r3, [pc, #324]	@ (8005558 <netif_add+0x174>)
 8005412:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8005416:	4953      	ldr	r1, [pc, #332]	@ (8005564 <netif_add+0x180>)
 8005418:	4851      	ldr	r0, [pc, #324]	@ (8005560 <netif_add+0x17c>)
 800541a:	f009 ff9f 	bl	800f35c <iprintf>
 800541e:	2300      	movs	r3, #0
 8005420:	e096      	b.n	8005550 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005428:	4b4f      	ldr	r3, [pc, #316]	@ (8005568 <netif_add+0x184>)
 800542a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005432:	4b4d      	ldr	r3, [pc, #308]	@ (8005568 <netif_add+0x184>)
 8005434:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800543c:	4b4a      	ldr	r3, [pc, #296]	@ (8005568 <netif_add+0x184>)
 800543e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	4a45      	ldr	r2, [pc, #276]	@ (800556c <netif_add+0x188>)
 8005456:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6a3a      	ldr	r2, [r7, #32]
 8005470:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005472:	4b3f      	ldr	r3, [pc, #252]	@ (8005570 <netif_add+0x18c>)
 8005474:	781a      	ldrb	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005480:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	68b9      	ldr	r1, [r7, #8]
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 f913 	bl	80056b4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800548e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	4798      	blx	r3
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <netif_add+0xba>
    return NULL;
 800549a:	2300      	movs	r3, #0
 800549c:	e058      	b.n	8005550 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80054a4:	2bff      	cmp	r3, #255	@ 0xff
 80054a6:	d103      	bne.n	80054b0 <netif_add+0xcc>
        netif->num = 0;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80054b0:	2300      	movs	r3, #0
 80054b2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80054b4:	4b2f      	ldr	r3, [pc, #188]	@ (8005574 <netif_add+0x190>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	e02b      	b.n	8005514 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d106      	bne.n	80054d2 <netif_add+0xee>
 80054c4:	4b24      	ldr	r3, [pc, #144]	@ (8005558 <netif_add+0x174>)
 80054c6:	f240 128b 	movw	r2, #395	@ 0x18b
 80054ca:	492b      	ldr	r1, [pc, #172]	@ (8005578 <netif_add+0x194>)
 80054cc:	4824      	ldr	r0, [pc, #144]	@ (8005560 <netif_add+0x17c>)
 80054ce:	f009 ff45 	bl	800f35c <iprintf>
        num_netifs++;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	3301      	adds	r3, #1
 80054d6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	2bff      	cmp	r3, #255	@ 0xff
 80054dc:	dd06      	ble.n	80054ec <netif_add+0x108>
 80054de:	4b1e      	ldr	r3, [pc, #120]	@ (8005558 <netif_add+0x174>)
 80054e0:	f240 128d 	movw	r2, #397	@ 0x18d
 80054e4:	4925      	ldr	r1, [pc, #148]	@ (800557c <netif_add+0x198>)
 80054e6:	481e      	ldr	r0, [pc, #120]	@ (8005560 <netif_add+0x17c>)
 80054e8:	f009 ff38 	bl	800f35c <iprintf>
        if (netif2->num == netif->num) {
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d108      	bne.n	800550e <netif_add+0x12a>
          netif->num++;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005502:	3301      	adds	r3, #1
 8005504:	b2da      	uxtb	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800550c:	e005      	b.n	800551a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	617b      	str	r3, [r7, #20]
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1d0      	bne.n	80054bc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1be      	bne.n	800549e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005526:	2bfe      	cmp	r3, #254	@ 0xfe
 8005528:	d103      	bne.n	8005532 <netif_add+0x14e>
    netif_num = 0;
 800552a:	4b11      	ldr	r3, [pc, #68]	@ (8005570 <netif_add+0x18c>)
 800552c:	2200      	movs	r2, #0
 800552e:	701a      	strb	r2, [r3, #0]
 8005530:	e006      	b.n	8005540 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005538:	3301      	adds	r3, #1
 800553a:	b2da      	uxtb	r2, r3
 800553c:	4b0c      	ldr	r3, [pc, #48]	@ (8005570 <netif_add+0x18c>)
 800553e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005540:	4b0c      	ldr	r3, [pc, #48]	@ (8005574 <netif_add+0x190>)
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005548:	4a0a      	ldr	r2, [pc, #40]	@ (8005574 <netif_add+0x190>)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800554e:	68fb      	ldr	r3, [r7, #12]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3718      	adds	r7, #24
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	08010ae4 	.word	0x08010ae4
 800555c:	08010b78 	.word	0x08010b78
 8005560:	08010b34 	.word	0x08010b34
 8005564:	08010b94 	.word	0x08010b94
 8005568:	0801321c 	.word	0x0801321c
 800556c:	0800598f 	.word	0x0800598f
 8005570:	200082d8 	.word	0x200082d8
 8005574:	200082d0 	.word	0x200082d0
 8005578:	08010bb8 	.word	0x08010bb8
 800557c:	08010bcc 	.word	0x08010bcc

08005580 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800558a:	6839      	ldr	r1, [r7, #0]
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f002 fcef 	bl	8007f70 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005592:	6839      	ldr	r1, [r7, #0]
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f007 fa25 	bl	800c9e4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800559a:	bf00      	nop
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
	...

080055a4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d106      	bne.n	80055c4 <netif_do_set_ipaddr+0x20>
 80055b6:	4b1d      	ldr	r3, [pc, #116]	@ (800562c <netif_do_set_ipaddr+0x88>)
 80055b8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80055bc:	491c      	ldr	r1, [pc, #112]	@ (8005630 <netif_do_set_ipaddr+0x8c>)
 80055be:	481d      	ldr	r0, [pc, #116]	@ (8005634 <netif_do_set_ipaddr+0x90>)
 80055c0:	f009 fecc 	bl	800f35c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d106      	bne.n	80055d8 <netif_do_set_ipaddr+0x34>
 80055ca:	4b18      	ldr	r3, [pc, #96]	@ (800562c <netif_do_set_ipaddr+0x88>)
 80055cc:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80055d0:	4917      	ldr	r1, [pc, #92]	@ (8005630 <netif_do_set_ipaddr+0x8c>)
 80055d2:	4818      	ldr	r0, [pc, #96]	@ (8005634 <netif_do_set_ipaddr+0x90>)
 80055d4:	f009 fec2 	bl	800f35c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	3304      	adds	r3, #4
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d01c      	beq.n	8005620 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3304      	adds	r3, #4
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80055f6:	f107 0314 	add.w	r3, r7, #20
 80055fa:	4619      	mov	r1, r3
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f7ff ffbf 	bl	8005580 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d002      	beq.n	800560e <netif_do_set_ipaddr+0x6a>
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	e000      	b.n	8005610 <netif_do_set_ipaddr+0x6c>
 800560e:	2300      	movs	r3, #0
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005614:	2101      	movs	r1, #1
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f000 f8d2 	bl	80057c0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800561c:	2301      	movs	r3, #1
 800561e:	e000      	b.n	8005622 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3718      	adds	r7, #24
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	08010ae4 	.word	0x08010ae4
 8005630:	08010bfc 	.word	0x08010bfc
 8005634:	08010b34 	.word	0x08010b34

08005638 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	3308      	adds	r3, #8
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	429a      	cmp	r2, r3
 8005650:	d00a      	beq.n	8005668 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <netif_do_set_netmask+0x26>
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	e000      	b.n	8005660 <netif_do_set_netmask+0x28>
 800565e:	2300      	movs	r3, #0
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005664:	2301      	movs	r3, #1
 8005666:	e000      	b.n	800566a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005676:	b480      	push	{r7}
 8005678:	b085      	sub	sp, #20
 800567a:	af00      	add	r7, sp, #0
 800567c:	60f8      	str	r0, [r7, #12]
 800567e:	60b9      	str	r1, [r7, #8]
 8005680:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	330c      	adds	r3, #12
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	429a      	cmp	r2, r3
 800568e:	d00a      	beq.n	80056a6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <netif_do_set_gw+0x26>
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	e000      	b.n	800569e <netif_do_set_gw+0x28>
 800569c:	2300      	movs	r3, #0
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80056a2:	2301      	movs	r3, #1
 80056a4:	e000      	b.n	80056a8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b088      	sub	sp, #32
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
 80056c0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80056c2:	2300      	movs	r3, #0
 80056c4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80056c6:	2300      	movs	r3, #0
 80056c8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80056d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005744 <netif_set_addr+0x90>)
 80056d2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80056da:	4b1a      	ldr	r3, [pc, #104]	@ (8005744 <netif_set_addr+0x90>)
 80056dc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80056e4:	4b17      	ldr	r3, [pc, #92]	@ (8005744 <netif_set_addr+0x90>)
 80056e6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <netif_set_addr+0x42>
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <netif_set_addr+0x46>
 80056f6:	2301      	movs	r3, #1
 80056f8:	e000      	b.n	80056fc <netif_set_addr+0x48>
 80056fa:	2300      	movs	r3, #0
 80056fc:	617b      	str	r3, [r7, #20]
  if (remove) {
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d006      	beq.n	8005712 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005704:	f107 0310 	add.w	r3, r7, #16
 8005708:	461a      	mov	r2, r3
 800570a:	68b9      	ldr	r1, [r7, #8]
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f7ff ff49 	bl	80055a4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8005712:	69fa      	ldr	r2, [r7, #28]
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f7ff ff8e 	bl	8005638 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	6839      	ldr	r1, [r7, #0]
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f7ff ffa8 	bl	8005676 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d106      	bne.n	800573a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800572c:	f107 0310 	add.w	r3, r7, #16
 8005730:	461a      	mov	r2, r3
 8005732:	68b9      	ldr	r1, [r7, #8]
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f7ff ff35 	bl	80055a4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800573a:	bf00      	nop
 800573c:	3720      	adds	r7, #32
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	0801321c 	.word	0x0801321c

08005748 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005750:	4a04      	ldr	r2, [pc, #16]	@ (8005764 <netif_set_default+0x1c>)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005756:	bf00      	nop
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	200082d4 	.word	0x200082d4

08005768 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d107      	bne.n	8005786 <netif_set_up+0x1e>
 8005776:	4b0f      	ldr	r3, [pc, #60]	@ (80057b4 <netif_set_up+0x4c>)
 8005778:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800577c:	490e      	ldr	r1, [pc, #56]	@ (80057b8 <netif_set_up+0x50>)
 800577e:	480f      	ldr	r0, [pc, #60]	@ (80057bc <netif_set_up+0x54>)
 8005780:	f009 fdec 	bl	800f35c <iprintf>
 8005784:	e013      	b.n	80057ae <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800578c:	f003 0301 	and.w	r3, r3, #1
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10c      	bne.n	80057ae <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800579a:	f043 0301 	orr.w	r3, r3, #1
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80057a6:	2103      	movs	r1, #3
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f809 	bl	80057c0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	08010ae4 	.word	0x08010ae4
 80057b8:	08010c6c 	.word	0x08010c6c
 80057bc:	08010b34 	.word	0x08010b34

080057c0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	460b      	mov	r3, r1
 80057ca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d106      	bne.n	80057e0 <netif_issue_reports+0x20>
 80057d2:	4b18      	ldr	r3, [pc, #96]	@ (8005834 <netif_issue_reports+0x74>)
 80057d4:	f240 326d 	movw	r2, #877	@ 0x36d
 80057d8:	4917      	ldr	r1, [pc, #92]	@ (8005838 <netif_issue_reports+0x78>)
 80057da:	4818      	ldr	r0, [pc, #96]	@ (800583c <netif_issue_reports+0x7c>)
 80057dc:	f009 fdbe 	bl	800f35c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80057e6:	f003 0304 	and.w	r3, r3, #4
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d01e      	beq.n	800582c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80057f4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d017      	beq.n	800582c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80057fc:	78fb      	ldrb	r3, [r7, #3]
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d013      	beq.n	800582e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	3304      	adds	r3, #4
 800580a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00e      	beq.n	800582e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005816:	f003 0308 	and.w	r3, r3, #8
 800581a:	2b00      	cmp	r3, #0
 800581c:	d007      	beq.n	800582e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	3304      	adds	r3, #4
 8005822:	4619      	mov	r1, r3
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f008 f847 	bl	800d8b8 <etharp_request>
 800582a:	e000      	b.n	800582e <netif_issue_reports+0x6e>
    return;
 800582c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	08010ae4 	.word	0x08010ae4
 8005838:	08010c88 	.word	0x08010c88
 800583c:	08010b34 	.word	0x08010b34

08005840 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d107      	bne.n	800585e <netif_set_down+0x1e>
 800584e:	4b12      	ldr	r3, [pc, #72]	@ (8005898 <netif_set_down+0x58>)
 8005850:	f240 329b 	movw	r2, #923	@ 0x39b
 8005854:	4911      	ldr	r1, [pc, #68]	@ (800589c <netif_set_down+0x5c>)
 8005856:	4812      	ldr	r0, [pc, #72]	@ (80058a0 <netif_set_down+0x60>)
 8005858:	f009 fd80 	bl	800f35c <iprintf>
 800585c:	e019      	b.n	8005892 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	d012      	beq.n	8005892 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005872:	f023 0301 	bic.w	r3, r3, #1
 8005876:	b2da      	uxtb	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005884:	f003 0308 	and.w	r3, r3, #8
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f007 fbd1 	bl	800d034 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	08010ae4 	.word	0x08010ae4
 800589c:	08010cac 	.word	0x08010cac
 80058a0:	08010b34 	.word	0x08010b34

080058a4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d107      	bne.n	80058c2 <netif_set_link_up+0x1e>
 80058b2:	4b13      	ldr	r3, [pc, #76]	@ (8005900 <netif_set_link_up+0x5c>)
 80058b4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80058b8:	4912      	ldr	r1, [pc, #72]	@ (8005904 <netif_set_link_up+0x60>)
 80058ba:	4813      	ldr	r0, [pc, #76]	@ (8005908 <netif_set_link_up+0x64>)
 80058bc:	f009 fd4e 	bl	800f35c <iprintf>
 80058c0:	e01b      	b.n	80058fa <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d114      	bne.n	80058fa <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80058d6:	f043 0304 	orr.w	r3, r3, #4
 80058da:	b2da      	uxtb	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80058e2:	2103      	movs	r1, #3
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f7ff ff6b 	bl	80057c0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <netif_set_link_up+0x56>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80058fa:	3708      	adds	r7, #8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	08010ae4 	.word	0x08010ae4
 8005904:	08010ccc 	.word	0x08010ccc
 8005908:	08010b34 	.word	0x08010b34

0800590c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d107      	bne.n	800592a <netif_set_link_down+0x1e>
 800591a:	4b11      	ldr	r3, [pc, #68]	@ (8005960 <netif_set_link_down+0x54>)
 800591c:	f240 4206 	movw	r2, #1030	@ 0x406
 8005920:	4910      	ldr	r1, [pc, #64]	@ (8005964 <netif_set_link_down+0x58>)
 8005922:	4811      	ldr	r0, [pc, #68]	@ (8005968 <netif_set_link_down+0x5c>)
 8005924:	f009 fd1a 	bl	800f35c <iprintf>
 8005928:	e017      	b.n	800595a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005930:	f003 0304 	and.w	r3, r3, #4
 8005934:	2b00      	cmp	r3, #0
 8005936:	d010      	beq.n	800595a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800593e:	f023 0304 	bic.w	r3, r3, #4
 8005942:	b2da      	uxtb	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <netif_set_link_down+0x4e>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800595a:	3708      	adds	r7, #8
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	08010ae4 	.word	0x08010ae4
 8005964:	08010cf0 	.word	0x08010cf0
 8005968:	08010b34 	.word	0x08010b34

0800596c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	61da      	str	r2, [r3, #28]
  }
}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800598e:	b480      	push	{r7}
 8005990:	b085      	sub	sp, #20
 8005992:	af00      	add	r7, sp, #0
 8005994:	60f8      	str	r0, [r7, #12]
 8005996:	60b9      	str	r1, [r7, #8]
 8005998:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800599a:	f06f 030b 	mvn.w	r3, #11
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3714      	adds	r7, #20
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
	...

080059ac <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	4603      	mov	r3, r0
 80059b4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80059b6:	79fb      	ldrb	r3, [r7, #7]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d013      	beq.n	80059e4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80059bc:	4b0d      	ldr	r3, [pc, #52]	@ (80059f4 <netif_get_by_index+0x48>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	e00c      	b.n	80059de <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80059ca:	3301      	adds	r3, #1
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	79fa      	ldrb	r2, [r7, #7]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d101      	bne.n	80059d8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	e006      	b.n	80059e6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1ef      	bne.n	80059c4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	200082d0 	.word	0x200082d0

080059f8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80059fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005a30 <pbuf_free_ooseq+0x38>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005a04:	4b0b      	ldr	r3, [pc, #44]	@ (8005a34 <pbuf_free_ooseq+0x3c>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	607b      	str	r3, [r7, #4]
 8005a0a:	e00a      	b.n	8005a22 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f002 fae9 	bl	8007fec <tcp_free_ooseq>
      return;
 8005a1a:	e005      	b.n	8005a28 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	607b      	str	r3, [r7, #4]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1f1      	bne.n	8005a0c <pbuf_free_ooseq+0x14>
    }
  }
}
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	200082d9 	.word	0x200082d9
 8005a34:	200082e8 	.word	0x200082e8

08005a38 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005a3c:	4b03      	ldr	r3, [pc, #12]	@ (8005a4c <pbuf_pool_is_empty+0x14>)
 8005a3e:	2201      	movs	r2, #1
 8005a40:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005a42:	bf00      	nop
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	200082d9 	.word	0x200082d9

08005a50 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	4611      	mov	r1, r2
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	460b      	mov	r3, r1
 8005a60:	80fb      	strh	r3, [r7, #6]
 8005a62:	4613      	mov	r3, r2
 8005a64:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	88fa      	ldrh	r2, [r7, #6]
 8005a76:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	88ba      	ldrh	r2, [r7, #4]
 8005a7c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005a7e:	8b3b      	ldrh	r3, [r7, #24]
 8005a80:	b2da      	uxtb	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	7f3a      	ldrb	r2, [r7, #28]
 8005a8a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	73da      	strb	r2, [r3, #15]
}
 8005a98:	bf00      	nop
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b08c      	sub	sp, #48	@ 0x30
 8005aa8:	af02      	add	r7, sp, #8
 8005aaa:	4603      	mov	r3, r0
 8005aac:	71fb      	strb	r3, [r7, #7]
 8005aae:	460b      	mov	r3, r1
 8005ab0:	80bb      	strh	r3, [r7, #4]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005ab6:	79fb      	ldrb	r3, [r7, #7]
 8005ab8:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005aba:	887b      	ldrh	r3, [r7, #2]
 8005abc:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8005ac0:	d07f      	beq.n	8005bc2 <pbuf_alloc+0x11e>
 8005ac2:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8005ac6:	f300 80c8 	bgt.w	8005c5a <pbuf_alloc+0x1b6>
 8005aca:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8005ace:	d010      	beq.n	8005af2 <pbuf_alloc+0x4e>
 8005ad0:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8005ad4:	f300 80c1 	bgt.w	8005c5a <pbuf_alloc+0x1b6>
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d002      	beq.n	8005ae2 <pbuf_alloc+0x3e>
 8005adc:	2b41      	cmp	r3, #65	@ 0x41
 8005ade:	f040 80bc 	bne.w	8005c5a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005ae2:	887a      	ldrh	r2, [r7, #2]
 8005ae4:	88bb      	ldrh	r3, [r7, #4]
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	2000      	movs	r0, #0
 8005aea:	f000 f8d1 	bl	8005c90 <pbuf_alloc_reference>
 8005aee:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8005af0:	e0bd      	b.n	8005c6e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005af2:	2300      	movs	r3, #0
 8005af4:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8005af6:	2300      	movs	r3, #0
 8005af8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005afa:	88bb      	ldrh	r3, [r7, #4]
 8005afc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005afe:	2008      	movs	r0, #8
 8005b00:	f7ff fbce 	bl	80052a0 <memp_malloc>
 8005b04:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d109      	bne.n	8005b20 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005b0c:	f7ff ff94 	bl	8005a38 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d002      	beq.n	8005b1c <pbuf_alloc+0x78>
            pbuf_free(p);
 8005b16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b18:	f000 faa8 	bl	800606c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	e0a7      	b.n	8005c70 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005b20:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005b22:	3303      	adds	r3, #3
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	f023 0303 	bic.w	r3, r3, #3
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	8b7a      	ldrh	r2, [r7, #26]
 8005b34:	4293      	cmp	r3, r2
 8005b36:	bf28      	it	cs
 8005b38:	4613      	movcs	r3, r2
 8005b3a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005b3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005b3e:	3310      	adds	r3, #16
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	4413      	add	r3, r2
 8005b44:	3303      	adds	r3, #3
 8005b46:	f023 0303 	bic.w	r3, r3, #3
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	89f9      	ldrh	r1, [r7, #14]
 8005b4e:	8b7a      	ldrh	r2, [r7, #26]
 8005b50:	2300      	movs	r3, #0
 8005b52:	9301      	str	r3, [sp, #4]
 8005b54:	887b      	ldrh	r3, [r7, #2]
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	4601      	mov	r1, r0
 8005b5c:	6938      	ldr	r0, [r7, #16]
 8005b5e:	f7ff ff77 	bl	8005a50 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f003 0303 	and.w	r3, r3, #3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d006      	beq.n	8005b7c <pbuf_alloc+0xd8>
 8005b6e:	4b42      	ldr	r3, [pc, #264]	@ (8005c78 <pbuf_alloc+0x1d4>)
 8005b70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b74:	4941      	ldr	r1, [pc, #260]	@ (8005c7c <pbuf_alloc+0x1d8>)
 8005b76:	4842      	ldr	r0, [pc, #264]	@ (8005c80 <pbuf_alloc+0x1dc>)
 8005b78:	f009 fbf0 	bl	800f35c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005b7c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005b7e:	3303      	adds	r3, #3
 8005b80:	f023 0303 	bic.w	r3, r3, #3
 8005b84:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8005b88:	d106      	bne.n	8005b98 <pbuf_alloc+0xf4>
 8005b8a:	4b3b      	ldr	r3, [pc, #236]	@ (8005c78 <pbuf_alloc+0x1d4>)
 8005b8c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005b90:	493c      	ldr	r1, [pc, #240]	@ (8005c84 <pbuf_alloc+0x1e0>)
 8005b92:	483b      	ldr	r0, [pc, #236]	@ (8005c80 <pbuf_alloc+0x1dc>)
 8005b94:	f009 fbe2 	bl	800f35c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d102      	bne.n	8005ba4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ba2:	e002      	b.n	8005baa <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005bae:	8b7a      	ldrh	r2, [r7, #26]
 8005bb0:	89fb      	ldrh	r3, [r7, #14]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8005bba:	8b7b      	ldrh	r3, [r7, #26]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d19e      	bne.n	8005afe <pbuf_alloc+0x5a>
      break;
 8005bc0:	e055      	b.n	8005c6e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005bc2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005bc4:	3303      	adds	r3, #3
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	f023 0303 	bic.w	r3, r3, #3
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	88bb      	ldrh	r3, [r7, #4]
 8005bd0:	3303      	adds	r3, #3
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	f023 0303 	bic.w	r3, r3, #3
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	4413      	add	r3, r2
 8005bdc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005bde:	8b3b      	ldrh	r3, [r7, #24]
 8005be0:	3310      	adds	r3, #16
 8005be2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005be4:	8b3a      	ldrh	r2, [r7, #24]
 8005be6:	88bb      	ldrh	r3, [r7, #4]
 8005be8:	3303      	adds	r3, #3
 8005bea:	f023 0303 	bic.w	r3, r3, #3
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d306      	bcc.n	8005c00 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005bf2:	8afa      	ldrh	r2, [r7, #22]
 8005bf4:	88bb      	ldrh	r3, [r7, #4]
 8005bf6:	3303      	adds	r3, #3
 8005bf8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d201      	bcs.n	8005c04 <pbuf_alloc+0x160>
        return NULL;
 8005c00:	2300      	movs	r3, #0
 8005c02:	e035      	b.n	8005c70 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005c04:	8afb      	ldrh	r3, [r7, #22]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff f9ba 	bl	8004f80 <mem_malloc>
 8005c0c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <pbuf_alloc+0x174>
        return NULL;
 8005c14:	2300      	movs	r3, #0
 8005c16:	e02b      	b.n	8005c70 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005c18:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005c1a:	3310      	adds	r3, #16
 8005c1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c1e:	4413      	add	r3, r2
 8005c20:	3303      	adds	r3, #3
 8005c22:	f023 0303 	bic.w	r3, r3, #3
 8005c26:	4618      	mov	r0, r3
 8005c28:	88b9      	ldrh	r1, [r7, #4]
 8005c2a:	88ba      	ldrh	r2, [r7, #4]
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	9301      	str	r3, [sp, #4]
 8005c30:	887b      	ldrh	r3, [r7, #2]
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	460b      	mov	r3, r1
 8005c36:	4601      	mov	r1, r0
 8005c38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c3a:	f7ff ff09 	bl	8005a50 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f003 0303 	and.w	r3, r3, #3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d010      	beq.n	8005c6c <pbuf_alloc+0x1c8>
 8005c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c78 <pbuf_alloc+0x1d4>)
 8005c4c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8005c50:	490d      	ldr	r1, [pc, #52]	@ (8005c88 <pbuf_alloc+0x1e4>)
 8005c52:	480b      	ldr	r0, [pc, #44]	@ (8005c80 <pbuf_alloc+0x1dc>)
 8005c54:	f009 fb82 	bl	800f35c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005c58:	e008      	b.n	8005c6c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005c5a:	4b07      	ldr	r3, [pc, #28]	@ (8005c78 <pbuf_alloc+0x1d4>)
 8005c5c:	f240 1227 	movw	r2, #295	@ 0x127
 8005c60:	490a      	ldr	r1, [pc, #40]	@ (8005c8c <pbuf_alloc+0x1e8>)
 8005c62:	4807      	ldr	r0, [pc, #28]	@ (8005c80 <pbuf_alloc+0x1dc>)
 8005c64:	f009 fb7a 	bl	800f35c <iprintf>
      return NULL;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	e001      	b.n	8005c70 <pbuf_alloc+0x1cc>
      break;
 8005c6c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3728      	adds	r7, #40	@ 0x28
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	08010d14 	.word	0x08010d14
 8005c7c:	08010d44 	.word	0x08010d44
 8005c80:	08010d74 	.word	0x08010d74
 8005c84:	08010d9c 	.word	0x08010d9c
 8005c88:	08010dd0 	.word	0x08010dd0
 8005c8c:	08010dfc 	.word	0x08010dfc

08005c90 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af02      	add	r7, sp, #8
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	807b      	strh	r3, [r7, #2]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005ca0:	883b      	ldrh	r3, [r7, #0]
 8005ca2:	2b41      	cmp	r3, #65	@ 0x41
 8005ca4:	d009      	beq.n	8005cba <pbuf_alloc_reference+0x2a>
 8005ca6:	883b      	ldrh	r3, [r7, #0]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d006      	beq.n	8005cba <pbuf_alloc_reference+0x2a>
 8005cac:	4b0f      	ldr	r3, [pc, #60]	@ (8005cec <pbuf_alloc_reference+0x5c>)
 8005cae:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8005cb2:	490f      	ldr	r1, [pc, #60]	@ (8005cf0 <pbuf_alloc_reference+0x60>)
 8005cb4:	480f      	ldr	r0, [pc, #60]	@ (8005cf4 <pbuf_alloc_reference+0x64>)
 8005cb6:	f009 fb51 	bl	800f35c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005cba:	2007      	movs	r0, #7
 8005cbc:	f7ff faf0 	bl	80052a0 <memp_malloc>
 8005cc0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d101      	bne.n	8005ccc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	e00b      	b.n	8005ce4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005ccc:	8879      	ldrh	r1, [r7, #2]
 8005cce:	887a      	ldrh	r2, [r7, #2]
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	9301      	str	r3, [sp, #4]
 8005cd4:	883b      	ldrh	r3, [r7, #0]
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f7ff feb7 	bl	8005a50 <pbuf_init_alloced_pbuf>
  return p;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	08010d14 	.word	0x08010d14
 8005cf0:	08010e18 	.word	0x08010e18
 8005cf4:	08010d74 	.word	0x08010d74

08005cf8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b088      	sub	sp, #32
 8005cfc:	af02      	add	r7, sp, #8
 8005cfe:	607b      	str	r3, [r7, #4]
 8005d00:	4603      	mov	r3, r0
 8005d02:	73fb      	strb	r3, [r7, #15]
 8005d04:	460b      	mov	r3, r1
 8005d06:	81bb      	strh	r3, [r7, #12]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
 8005d0e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005d10:	8a7b      	ldrh	r3, [r7, #18]
 8005d12:	3303      	adds	r3, #3
 8005d14:	f023 0203 	bic.w	r2, r3, #3
 8005d18:	89bb      	ldrh	r3, [r7, #12]
 8005d1a:	441a      	add	r2, r3
 8005d1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d901      	bls.n	8005d26 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005d22:	2300      	movs	r3, #0
 8005d24:	e018      	b.n	8005d58 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d007      	beq.n	8005d3c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005d2c:	8a7b      	ldrh	r3, [r7, #18]
 8005d2e:	3303      	adds	r3, #3
 8005d30:	f023 0303 	bic.w	r3, r3, #3
 8005d34:	6a3a      	ldr	r2, [r7, #32]
 8005d36:	4413      	add	r3, r2
 8005d38:	617b      	str	r3, [r7, #20]
 8005d3a:	e001      	b.n	8005d40 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	89b9      	ldrh	r1, [r7, #12]
 8005d44:	89ba      	ldrh	r2, [r7, #12]
 8005d46:	2302      	movs	r3, #2
 8005d48:	9301      	str	r3, [sp, #4]
 8005d4a:	897b      	ldrh	r3, [r7, #10]
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	460b      	mov	r3, r1
 8005d50:	6979      	ldr	r1, [r7, #20]
 8005d52:	f7ff fe7d 	bl	8005a50 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005d56:	687b      	ldr	r3, [r7, #4]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d106      	bne.n	8005d80 <pbuf_realloc+0x20>
 8005d72:	4b3a      	ldr	r3, [pc, #232]	@ (8005e5c <pbuf_realloc+0xfc>)
 8005d74:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8005d78:	4939      	ldr	r1, [pc, #228]	@ (8005e60 <pbuf_realloc+0x100>)
 8005d7a:	483a      	ldr	r0, [pc, #232]	@ (8005e64 <pbuf_realloc+0x104>)
 8005d7c:	f009 faee 	bl	800f35c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	891b      	ldrh	r3, [r3, #8]
 8005d84:	887a      	ldrh	r2, [r7, #2]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d263      	bcs.n	8005e52 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	891a      	ldrh	r2, [r3, #8]
 8005d8e:	887b      	ldrh	r3, [r7, #2]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005d94:	887b      	ldrh	r3, [r7, #2]
 8005d96:	817b      	strh	r3, [r7, #10]
  q = p;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005d9c:	e018      	b.n	8005dd0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	895b      	ldrh	r3, [r3, #10]
 8005da2:	897a      	ldrh	r2, [r7, #10]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	891a      	ldrh	r2, [r3, #8]
 8005dac:	893b      	ldrh	r3, [r7, #8]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d106      	bne.n	8005dd0 <pbuf_realloc+0x70>
 8005dc2:	4b26      	ldr	r3, [pc, #152]	@ (8005e5c <pbuf_realloc+0xfc>)
 8005dc4:	f240 12af 	movw	r2, #431	@ 0x1af
 8005dc8:	4927      	ldr	r1, [pc, #156]	@ (8005e68 <pbuf_realloc+0x108>)
 8005dca:	4826      	ldr	r0, [pc, #152]	@ (8005e64 <pbuf_realloc+0x104>)
 8005dcc:	f009 fac6 	bl	800f35c <iprintf>
  while (rem_len > q->len) {
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	895b      	ldrh	r3, [r3, #10]
 8005dd4:	897a      	ldrh	r2, [r7, #10]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d8e1      	bhi.n	8005d9e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	7b1b      	ldrb	r3, [r3, #12]
 8005dde:	f003 030f 	and.w	r3, r3, #15
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d121      	bne.n	8005e2a <pbuf_realloc+0xca>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	895b      	ldrh	r3, [r3, #10]
 8005dea:	897a      	ldrh	r2, [r7, #10]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d01c      	beq.n	8005e2a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	7b5b      	ldrb	r3, [r3, #13]
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d116      	bne.n	8005e2a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	897b      	ldrh	r3, [r7, #10]
 8005e08:	4413      	add	r3, r2
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f7fe ffba 	bl	8004d88 <mem_trim>
 8005e14:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d106      	bne.n	8005e2a <pbuf_realloc+0xca>
 8005e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8005e5c <pbuf_realloc+0xfc>)
 8005e1e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8005e22:	4912      	ldr	r1, [pc, #72]	@ (8005e6c <pbuf_realloc+0x10c>)
 8005e24:	480f      	ldr	r0, [pc, #60]	@ (8005e64 <pbuf_realloc+0x104>)
 8005e26:	f009 fa99 	bl	800f35c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	897a      	ldrh	r2, [r7, #10]
 8005e2e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	895a      	ldrh	r2, [r3, #10]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d004      	beq.n	8005e4a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f000 f911 	bl	800606c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	e000      	b.n	8005e54 <pbuf_realloc+0xf4>
    return;
 8005e52:	bf00      	nop

}
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	08010d14 	.word	0x08010d14
 8005e60:	08010e2c 	.word	0x08010e2c
 8005e64:	08010d74 	.word	0x08010d74
 8005e68:	08010e44 	.word	0x08010e44
 8005e6c:	08010e5c 	.word	0x08010e5c

08005e70 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d106      	bne.n	8005e92 <pbuf_add_header_impl+0x22>
 8005e84:	4b2b      	ldr	r3, [pc, #172]	@ (8005f34 <pbuf_add_header_impl+0xc4>)
 8005e86:	f240 12df 	movw	r2, #479	@ 0x1df
 8005e8a:	492b      	ldr	r1, [pc, #172]	@ (8005f38 <pbuf_add_header_impl+0xc8>)
 8005e8c:	482b      	ldr	r0, [pc, #172]	@ (8005f3c <pbuf_add_header_impl+0xcc>)
 8005e8e:	f009 fa65 	bl	800f35c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <pbuf_add_header_impl+0x30>
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e9e:	d301      	bcc.n	8005ea4 <pbuf_add_header_impl+0x34>
    return 1;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e043      	b.n	8005f2c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <pbuf_add_header_impl+0x3e>
    return 0;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	e03e      	b.n	8005f2c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	891a      	ldrh	r2, [r3, #8]
 8005eb6:	8a7b      	ldrh	r3, [r7, #18]
 8005eb8:	4413      	add	r3, r2
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	8a7a      	ldrh	r2, [r7, #18]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d901      	bls.n	8005ec6 <pbuf_add_header_impl+0x56>
    return 1;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e032      	b.n	8005f2c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	7b1b      	ldrb	r3, [r3, #12]
 8005eca:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005ecc:	8a3b      	ldrh	r3, [r7, #16]
 8005ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00c      	beq.n	8005ef0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	425b      	negs	r3, r3
 8005ede:	4413      	add	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	3310      	adds	r3, #16
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d20d      	bcs.n	8005f08 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e01d      	b.n	8005f2c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005ef0:	79fb      	ldrb	r3, [r7, #7]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d006      	beq.n	8005f04 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	425b      	negs	r3, r3
 8005efe:	4413      	add	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]
 8005f02:	e001      	b.n	8005f08 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e011      	b.n	8005f2c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	895a      	ldrh	r2, [r3, #10]
 8005f12:	8a7b      	ldrh	r3, [r7, #18]
 8005f14:	4413      	add	r3, r2
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	891a      	ldrh	r2, [r3, #8]
 8005f20:	8a7b      	ldrh	r3, [r7, #18]
 8005f22:	4413      	add	r3, r2
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	811a      	strh	r2, [r3, #8]


  return 0;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3718      	adds	r7, #24
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	08010d14 	.word	0x08010d14
 8005f38:	08010e78 	.word	0x08010e78
 8005f3c:	08010d74 	.word	0x08010d74

08005f40 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	6839      	ldr	r1, [r7, #0]
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f7ff ff8e 	bl	8005e70 <pbuf_add_header_impl>
 8005f54:	4603      	mov	r3, r0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3708      	adds	r7, #8
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
	...

08005f60 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d106      	bne.n	8005f7e <pbuf_remove_header+0x1e>
 8005f70:	4b20      	ldr	r3, [pc, #128]	@ (8005ff4 <pbuf_remove_header+0x94>)
 8005f72:	f240 224b 	movw	r2, #587	@ 0x24b
 8005f76:	4920      	ldr	r1, [pc, #128]	@ (8005ff8 <pbuf_remove_header+0x98>)
 8005f78:	4820      	ldr	r0, [pc, #128]	@ (8005ffc <pbuf_remove_header+0x9c>)
 8005f7a:	f009 f9ef 	bl	800f35c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d003      	beq.n	8005f8c <pbuf_remove_header+0x2c>
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f8a:	d301      	bcc.n	8005f90 <pbuf_remove_header+0x30>
    return 1;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e02c      	b.n	8005fea <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <pbuf_remove_header+0x3a>
    return 0;
 8005f96:	2300      	movs	r3, #0
 8005f98:	e027      	b.n	8005fea <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	895b      	ldrh	r3, [r3, #10]
 8005fa2:	89fa      	ldrh	r2, [r7, #14]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d908      	bls.n	8005fba <pbuf_remove_header+0x5a>
 8005fa8:	4b12      	ldr	r3, [pc, #72]	@ (8005ff4 <pbuf_remove_header+0x94>)
 8005faa:	f240 2255 	movw	r2, #597	@ 0x255
 8005fae:	4914      	ldr	r1, [pc, #80]	@ (8006000 <pbuf_remove_header+0xa0>)
 8005fb0:	4812      	ldr	r0, [pc, #72]	@ (8005ffc <pbuf_remove_header+0x9c>)
 8005fb2:	f009 f9d3 	bl	800f35c <iprintf>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e017      	b.n	8005fea <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	441a      	add	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	895a      	ldrh	r2, [r3, #10]
 8005fd0:	89fb      	ldrh	r3, [r7, #14]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	891a      	ldrh	r2, [r3, #8]
 8005fde:	89fb      	ldrh	r3, [r7, #14]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	08010d14 	.word	0x08010d14
 8005ff8:	08010e78 	.word	0x08010e78
 8005ffc:	08010d74 	.word	0x08010d74
 8006000:	08010e84 	.word	0x08010e84

08006004 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	807b      	strh	r3, [r7, #2]
 8006010:	4613      	mov	r3, r2
 8006012:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006014:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006018:	2b00      	cmp	r3, #0
 800601a:	da08      	bge.n	800602e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800601c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006020:	425b      	negs	r3, r3
 8006022:	4619      	mov	r1, r3
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7ff ff9b 	bl	8005f60 <pbuf_remove_header>
 800602a:	4603      	mov	r3, r0
 800602c:	e007      	b.n	800603e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800602e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006032:	787a      	ldrb	r2, [r7, #1]
 8006034:	4619      	mov	r1, r3
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7ff ff1a 	bl	8005e70 <pbuf_add_header_impl>
 800603c:	4603      	mov	r3, r0
  }
}
 800603e:	4618      	mov	r0, r3
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b082      	sub	sp, #8
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	460b      	mov	r3, r1
 8006050:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006052:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006056:	2201      	movs	r2, #1
 8006058:	4619      	mov	r1, r3
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7ff ffd2 	bl	8006004 <pbuf_header_impl>
 8006060:	4603      	mov	r3, r0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3708      	adds	r7, #8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
	...

0800606c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10b      	bne.n	8006092 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d106      	bne.n	800608e <pbuf_free+0x22>
 8006080:	4b38      	ldr	r3, [pc, #224]	@ (8006164 <pbuf_free+0xf8>)
 8006082:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8006086:	4938      	ldr	r1, [pc, #224]	@ (8006168 <pbuf_free+0xfc>)
 8006088:	4838      	ldr	r0, [pc, #224]	@ (800616c <pbuf_free+0x100>)
 800608a:	f009 f967 	bl	800f35c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800608e:	2300      	movs	r3, #0
 8006090:	e063      	b.n	800615a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006092:	2300      	movs	r3, #0
 8006094:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006096:	e05c      	b.n	8006152 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	7b9b      	ldrb	r3, [r3, #14]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d106      	bne.n	80060ae <pbuf_free+0x42>
 80060a0:	4b30      	ldr	r3, [pc, #192]	@ (8006164 <pbuf_free+0xf8>)
 80060a2:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80060a6:	4932      	ldr	r1, [pc, #200]	@ (8006170 <pbuf_free+0x104>)
 80060a8:	4830      	ldr	r0, [pc, #192]	@ (800616c <pbuf_free+0x100>)
 80060aa:	f009 f957 	bl	800f35c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	7b9b      	ldrb	r3, [r3, #14]
 80060b2:	3b01      	subs	r3, #1
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	739a      	strb	r2, [r3, #14]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	7b9b      	ldrb	r3, [r3, #14]
 80060be:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80060c0:	7dbb      	ldrb	r3, [r7, #22]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d143      	bne.n	800614e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	7b1b      	ldrb	r3, [r3, #12]
 80060d0:	f003 030f 	and.w	r3, r3, #15
 80060d4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	7b5b      	ldrb	r3, [r3, #13]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d011      	beq.n	8006106 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d106      	bne.n	80060fc <pbuf_free+0x90>
 80060ee:	4b1d      	ldr	r3, [pc, #116]	@ (8006164 <pbuf_free+0xf8>)
 80060f0:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80060f4:	491f      	ldr	r1, [pc, #124]	@ (8006174 <pbuf_free+0x108>)
 80060f6:	481d      	ldr	r0, [pc, #116]	@ (800616c <pbuf_free+0x100>)
 80060f8:	f009 f930 	bl	800f35c <iprintf>
        pc->custom_free_function(p);
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	4798      	blx	r3
 8006104:	e01d      	b.n	8006142 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006106:	7bfb      	ldrb	r3, [r7, #15]
 8006108:	2b02      	cmp	r3, #2
 800610a:	d104      	bne.n	8006116 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800610c:	6879      	ldr	r1, [r7, #4]
 800610e:	2008      	movs	r0, #8
 8006110:	f7ff f936 	bl	8005380 <memp_free>
 8006114:	e015      	b.n	8006142 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006116:	7bfb      	ldrb	r3, [r7, #15]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d104      	bne.n	8006126 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800611c:	6879      	ldr	r1, [r7, #4]
 800611e:	2007      	movs	r0, #7
 8006120:	f7ff f92e 	bl	8005380 <memp_free>
 8006124:	e00d      	b.n	8006142 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006126:	7bfb      	ldrb	r3, [r7, #15]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d103      	bne.n	8006134 <pbuf_free+0xc8>
          mem_free(p);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7fe fdc1 	bl	8004cb4 <mem_free>
 8006132:	e006      	b.n	8006142 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006134:	4b0b      	ldr	r3, [pc, #44]	@ (8006164 <pbuf_free+0xf8>)
 8006136:	f240 320f 	movw	r2, #783	@ 0x30f
 800613a:	490f      	ldr	r1, [pc, #60]	@ (8006178 <pbuf_free+0x10c>)
 800613c:	480b      	ldr	r0, [pc, #44]	@ (800616c <pbuf_free+0x100>)
 800613e:	f009 f90d 	bl	800f35c <iprintf>
        }
      }
      count++;
 8006142:	7dfb      	ldrb	r3, [r7, #23]
 8006144:	3301      	adds	r3, #1
 8006146:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	607b      	str	r3, [r7, #4]
 800614c:	e001      	b.n	8006152 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800614e:	2300      	movs	r3, #0
 8006150:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d19f      	bne.n	8006098 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006158:	7dfb      	ldrb	r3, [r7, #23]
}
 800615a:	4618      	mov	r0, r3
 800615c:	3718      	adds	r7, #24
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	08010d14 	.word	0x08010d14
 8006168:	08010e78 	.word	0x08010e78
 800616c:	08010d74 	.word	0x08010d74
 8006170:	08010ea4 	.word	0x08010ea4
 8006174:	08010ebc 	.word	0x08010ebc
 8006178:	08010ee0 	.word	0x08010ee0

0800617c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006184:	2300      	movs	r3, #0
 8006186:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006188:	e005      	b.n	8006196 <pbuf_clen+0x1a>
    ++len;
 800618a:	89fb      	ldrh	r3, [r7, #14]
 800618c:	3301      	adds	r3, #1
 800618e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1f6      	bne.n	800618a <pbuf_clen+0xe>
  }
  return len;
 800619c:	89fb      	ldrh	r3, [r7, #14]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
	...

080061ac <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d010      	beq.n	80061dc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	7b9b      	ldrb	r3, [r3, #14]
 80061be:	3301      	adds	r3, #1
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	7b9b      	ldrb	r3, [r3, #14]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d106      	bne.n	80061dc <pbuf_ref+0x30>
 80061ce:	4b05      	ldr	r3, [pc, #20]	@ (80061e4 <pbuf_ref+0x38>)
 80061d0:	f240 3242 	movw	r2, #834	@ 0x342
 80061d4:	4904      	ldr	r1, [pc, #16]	@ (80061e8 <pbuf_ref+0x3c>)
 80061d6:	4805      	ldr	r0, [pc, #20]	@ (80061ec <pbuf_ref+0x40>)
 80061d8:	f009 f8c0 	bl	800f35c <iprintf>
  }
}
 80061dc:	bf00      	nop
 80061de:	3708      	adds	r7, #8
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	08010d14 	.word	0x08010d14
 80061e8:	08010ef4 	.word	0x08010ef4
 80061ec:	08010d74 	.word	0x08010d74

080061f0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d002      	beq.n	8006206 <pbuf_cat+0x16>
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d107      	bne.n	8006216 <pbuf_cat+0x26>
 8006206:	4b20      	ldr	r3, [pc, #128]	@ (8006288 <pbuf_cat+0x98>)
 8006208:	f240 3259 	movw	r2, #857	@ 0x359
 800620c:	491f      	ldr	r1, [pc, #124]	@ (800628c <pbuf_cat+0x9c>)
 800620e:	4820      	ldr	r0, [pc, #128]	@ (8006290 <pbuf_cat+0xa0>)
 8006210:	f009 f8a4 	bl	800f35c <iprintf>
 8006214:	e034      	b.n	8006280 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	60fb      	str	r3, [r7, #12]
 800621a:	e00a      	b.n	8006232 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	891a      	ldrh	r2, [r3, #8]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	891b      	ldrh	r3, [r3, #8]
 8006224:	4413      	add	r3, r2
 8006226:	b29a      	uxth	r2, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	60fb      	str	r3, [r7, #12]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1f0      	bne.n	800621c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	891a      	ldrh	r2, [r3, #8]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	895b      	ldrh	r3, [r3, #10]
 8006242:	429a      	cmp	r2, r3
 8006244:	d006      	beq.n	8006254 <pbuf_cat+0x64>
 8006246:	4b10      	ldr	r3, [pc, #64]	@ (8006288 <pbuf_cat+0x98>)
 8006248:	f240 3262 	movw	r2, #866	@ 0x362
 800624c:	4911      	ldr	r1, [pc, #68]	@ (8006294 <pbuf_cat+0xa4>)
 800624e:	4810      	ldr	r0, [pc, #64]	@ (8006290 <pbuf_cat+0xa0>)
 8006250:	f009 f884 	bl	800f35c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d006      	beq.n	800626a <pbuf_cat+0x7a>
 800625c:	4b0a      	ldr	r3, [pc, #40]	@ (8006288 <pbuf_cat+0x98>)
 800625e:	f240 3263 	movw	r2, #867	@ 0x363
 8006262:	490d      	ldr	r1, [pc, #52]	@ (8006298 <pbuf_cat+0xa8>)
 8006264:	480a      	ldr	r0, [pc, #40]	@ (8006290 <pbuf_cat+0xa0>)
 8006266:	f009 f879 	bl	800f35c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	891a      	ldrh	r2, [r3, #8]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	891b      	ldrh	r3, [r3, #8]
 8006272:	4413      	add	r3, r2
 8006274:	b29a      	uxth	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	08010d14 	.word	0x08010d14
 800628c:	08010f08 	.word	0x08010f08
 8006290:	08010d74 	.word	0x08010d74
 8006294:	08010f40 	.word	0x08010f40
 8006298:	08010f70 	.word	0x08010f70

0800629c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b086      	sub	sp, #24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80062a6:	2300      	movs	r3, #0
 80062a8:	617b      	str	r3, [r7, #20]
 80062aa:	2300      	movs	r3, #0
 80062ac:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d008      	beq.n	80062c6 <pbuf_copy+0x2a>
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d005      	beq.n	80062c6 <pbuf_copy+0x2a>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	891a      	ldrh	r2, [r3, #8]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	891b      	ldrh	r3, [r3, #8]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d209      	bcs.n	80062da <pbuf_copy+0x3e>
 80062c6:	4b57      	ldr	r3, [pc, #348]	@ (8006424 <pbuf_copy+0x188>)
 80062c8:	f240 32c9 	movw	r2, #969	@ 0x3c9
 80062cc:	4956      	ldr	r1, [pc, #344]	@ (8006428 <pbuf_copy+0x18c>)
 80062ce:	4857      	ldr	r0, [pc, #348]	@ (800642c <pbuf_copy+0x190>)
 80062d0:	f009 f844 	bl	800f35c <iprintf>
 80062d4:	f06f 030f 	mvn.w	r3, #15
 80062d8:	e09f      	b.n	800641a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	895b      	ldrh	r3, [r3, #10]
 80062de:	461a      	mov	r2, r3
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	1ad2      	subs	r2, r2, r3
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	895b      	ldrh	r3, [r3, #10]
 80062e8:	4619      	mov	r1, r3
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	1acb      	subs	r3, r1, r3
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d306      	bcc.n	8006300 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	895b      	ldrh	r3, [r3, #10]
 80062f6:	461a      	mov	r2, r3
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	60fb      	str	r3, [r7, #12]
 80062fe:	e005      	b.n	800630c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	895b      	ldrh	r3, [r3, #10]
 8006304:	461a      	mov	r2, r3
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	18d0      	adds	r0, r2, r3
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	685a      	ldr	r2, [r3, #4]
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	4413      	add	r3, r2
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	4619      	mov	r1, r3
 8006320:	f009 f887 	bl	800f432 <memcpy>
    offset_to += len;
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	4413      	add	r3, r2
 800632a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	4413      	add	r3, r2
 8006332:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	895b      	ldrh	r3, [r3, #10]
 8006338:	461a      	mov	r2, r3
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	4293      	cmp	r3, r2
 800633e:	d906      	bls.n	800634e <pbuf_copy+0xb2>
 8006340:	4b38      	ldr	r3, [pc, #224]	@ (8006424 <pbuf_copy+0x188>)
 8006342:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8006346:	493a      	ldr	r1, [pc, #232]	@ (8006430 <pbuf_copy+0x194>)
 8006348:	4838      	ldr	r0, [pc, #224]	@ (800642c <pbuf_copy+0x190>)
 800634a:	f009 f807 	bl	800f35c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	895b      	ldrh	r3, [r3, #10]
 8006352:	461a      	mov	r2, r3
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	4293      	cmp	r3, r2
 8006358:	d906      	bls.n	8006368 <pbuf_copy+0xcc>
 800635a:	4b32      	ldr	r3, [pc, #200]	@ (8006424 <pbuf_copy+0x188>)
 800635c:	f240 32da 	movw	r2, #986	@ 0x3da
 8006360:	4934      	ldr	r1, [pc, #208]	@ (8006434 <pbuf_copy+0x198>)
 8006362:	4832      	ldr	r0, [pc, #200]	@ (800642c <pbuf_copy+0x190>)
 8006364:	f008 fffa 	bl	800f35c <iprintf>
    if (offset_from >= p_from->len) {
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	895b      	ldrh	r3, [r3, #10]
 800636c:	461a      	mov	r2, r3
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	4293      	cmp	r3, r2
 8006372:	d304      	bcc.n	800637e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006374:	2300      	movs	r3, #0
 8006376:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	895b      	ldrh	r3, [r3, #10]
 8006382:	461a      	mov	r2, r3
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	4293      	cmp	r3, r2
 8006388:	d114      	bne.n	80063b4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800638a:	2300      	movs	r3, #0
 800638c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10c      	bne.n	80063b4 <pbuf_copy+0x118>
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d009      	beq.n	80063b4 <pbuf_copy+0x118>
 80063a0:	4b20      	ldr	r3, [pc, #128]	@ (8006424 <pbuf_copy+0x188>)
 80063a2:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80063a6:	4924      	ldr	r1, [pc, #144]	@ (8006438 <pbuf_copy+0x19c>)
 80063a8:	4820      	ldr	r0, [pc, #128]	@ (800642c <pbuf_copy+0x190>)
 80063aa:	f008 ffd7 	bl	800f35c <iprintf>
 80063ae:	f06f 030f 	mvn.w	r3, #15
 80063b2:	e032      	b.n	800641a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d013      	beq.n	80063e2 <pbuf_copy+0x146>
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	895a      	ldrh	r2, [r3, #10]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	891b      	ldrh	r3, [r3, #8]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d10d      	bne.n	80063e2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d009      	beq.n	80063e2 <pbuf_copy+0x146>
 80063ce:	4b15      	ldr	r3, [pc, #84]	@ (8006424 <pbuf_copy+0x188>)
 80063d0:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80063d4:	4919      	ldr	r1, [pc, #100]	@ (800643c <pbuf_copy+0x1a0>)
 80063d6:	4815      	ldr	r0, [pc, #84]	@ (800642c <pbuf_copy+0x190>)
 80063d8:	f008 ffc0 	bl	800f35c <iprintf>
 80063dc:	f06f 0305 	mvn.w	r3, #5
 80063e0:	e01b      	b.n	800641a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d013      	beq.n	8006410 <pbuf_copy+0x174>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	895a      	ldrh	r2, [r3, #10]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	891b      	ldrh	r3, [r3, #8]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d10d      	bne.n	8006410 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d009      	beq.n	8006410 <pbuf_copy+0x174>
 80063fc:	4b09      	ldr	r3, [pc, #36]	@ (8006424 <pbuf_copy+0x188>)
 80063fe:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8006402:	490e      	ldr	r1, [pc, #56]	@ (800643c <pbuf_copy+0x1a0>)
 8006404:	4809      	ldr	r0, [pc, #36]	@ (800642c <pbuf_copy+0x190>)
 8006406:	f008 ffa9 	bl	800f35c <iprintf>
 800640a:	f06f 0305 	mvn.w	r3, #5
 800640e:	e004      	b.n	800641a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	f47f af61 	bne.w	80062da <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3718      	adds	r7, #24
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	08010d14 	.word	0x08010d14
 8006428:	08010fbc 	.word	0x08010fbc
 800642c:	08010d74 	.word	0x08010d74
 8006430:	08010fec 	.word	0x08010fec
 8006434:	08011004 	.word	0x08011004
 8006438:	08011020 	.word	0x08011020
 800643c:	08011030 	.word	0x08011030

08006440 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	4611      	mov	r1, r2
 800644c:	461a      	mov	r2, r3
 800644e:	460b      	mov	r3, r1
 8006450:	80fb      	strh	r3, [r7, #6]
 8006452:	4613      	mov	r3, r2
 8006454:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006456:	2300      	movs	r3, #0
 8006458:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800645a:	2300      	movs	r3, #0
 800645c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d108      	bne.n	8006476 <pbuf_copy_partial+0x36>
 8006464:	4b2b      	ldr	r3, [pc, #172]	@ (8006514 <pbuf_copy_partial+0xd4>)
 8006466:	f240 420a 	movw	r2, #1034	@ 0x40a
 800646a:	492b      	ldr	r1, [pc, #172]	@ (8006518 <pbuf_copy_partial+0xd8>)
 800646c:	482b      	ldr	r0, [pc, #172]	@ (800651c <pbuf_copy_partial+0xdc>)
 800646e:	f008 ff75 	bl	800f35c <iprintf>
 8006472:	2300      	movs	r3, #0
 8006474:	e04a      	b.n	800650c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d108      	bne.n	800648e <pbuf_copy_partial+0x4e>
 800647c:	4b25      	ldr	r3, [pc, #148]	@ (8006514 <pbuf_copy_partial+0xd4>)
 800647e:	f240 420b 	movw	r2, #1035	@ 0x40b
 8006482:	4927      	ldr	r1, [pc, #156]	@ (8006520 <pbuf_copy_partial+0xe0>)
 8006484:	4825      	ldr	r0, [pc, #148]	@ (800651c <pbuf_copy_partial+0xdc>)
 8006486:	f008 ff69 	bl	800f35c <iprintf>
 800648a:	2300      	movs	r3, #0
 800648c:	e03e      	b.n	800650c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	61fb      	str	r3, [r7, #28]
 8006492:	e034      	b.n	80064fe <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006494:	88bb      	ldrh	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00a      	beq.n	80064b0 <pbuf_copy_partial+0x70>
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	895b      	ldrh	r3, [r3, #10]
 800649e:	88ba      	ldrh	r2, [r7, #4]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d305      	bcc.n	80064b0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	895b      	ldrh	r3, [r3, #10]
 80064a8:	88ba      	ldrh	r2, [r7, #4]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	80bb      	strh	r3, [r7, #4]
 80064ae:	e023      	b.n	80064f8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	895a      	ldrh	r2, [r3, #10]
 80064b4:	88bb      	ldrh	r3, [r7, #4]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80064ba:	8b3a      	ldrh	r2, [r7, #24]
 80064bc:	88fb      	ldrh	r3, [r7, #6]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d901      	bls.n	80064c6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80064c2:	88fb      	ldrh	r3, [r7, #6]
 80064c4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80064c6:	8b7b      	ldrh	r3, [r7, #26]
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	18d0      	adds	r0, r2, r3
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	88bb      	ldrh	r3, [r7, #4]
 80064d2:	4413      	add	r3, r2
 80064d4:	8b3a      	ldrh	r2, [r7, #24]
 80064d6:	4619      	mov	r1, r3
 80064d8:	f008 ffab 	bl	800f432 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80064dc:	8afa      	ldrh	r2, [r7, #22]
 80064de:	8b3b      	ldrh	r3, [r7, #24]
 80064e0:	4413      	add	r3, r2
 80064e2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80064e4:	8b7a      	ldrh	r2, [r7, #26]
 80064e6:	8b3b      	ldrh	r3, [r7, #24]
 80064e8:	4413      	add	r3, r2
 80064ea:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80064ec:	88fa      	ldrh	r2, [r7, #6]
 80064ee:	8b3b      	ldrh	r3, [r7, #24]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80064f4:	2300      	movs	r3, #0
 80064f6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	61fb      	str	r3, [r7, #28]
 80064fe:	88fb      	ldrh	r3, [r7, #6]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <pbuf_copy_partial+0xca>
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1c4      	bne.n	8006494 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800650a:	8afb      	ldrh	r3, [r7, #22]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3720      	adds	r7, #32
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	08010d14 	.word	0x08010d14
 8006518:	0801105c 	.word	0x0801105c
 800651c:	08010d74 	.word	0x08010d74
 8006520:	0801107c 	.word	0x0801107c

08006524 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	4603      	mov	r3, r0
 800652c:	603a      	str	r2, [r7, #0]
 800652e:	71fb      	strb	r3, [r7, #7]
 8006530:	460b      	mov	r3, r1
 8006532:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	8919      	ldrh	r1, [r3, #8]
 8006538:	88ba      	ldrh	r2, [r7, #4]
 800653a:	79fb      	ldrb	r3, [r7, #7]
 800653c:	4618      	mov	r0, r3
 800653e:	f7ff fab1 	bl	8005aa4 <pbuf_alloc>
 8006542:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <pbuf_clone+0x2a>
    return NULL;
 800654a:	2300      	movs	r3, #0
 800654c:	e011      	b.n	8006572 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800654e:	6839      	ldr	r1, [r7, #0]
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f7ff fea3 	bl	800629c <pbuf_copy>
 8006556:	4603      	mov	r3, r0
 8006558:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800655a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d006      	beq.n	8006570 <pbuf_clone+0x4c>
 8006562:	4b06      	ldr	r3, [pc, #24]	@ (800657c <pbuf_clone+0x58>)
 8006564:	f240 5224 	movw	r2, #1316	@ 0x524
 8006568:	4905      	ldr	r1, [pc, #20]	@ (8006580 <pbuf_clone+0x5c>)
 800656a:	4806      	ldr	r0, [pc, #24]	@ (8006584 <pbuf_clone+0x60>)
 800656c:	f008 fef6 	bl	800f35c <iprintf>
  return q;
 8006570:	68fb      	ldr	r3, [r7, #12]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	08010d14 	.word	0x08010d14
 8006580:	08011188 	.word	0x08011188
 8006584:	08010d74 	.word	0x08010d74

08006588 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800658c:	f008 fde6 	bl	800f15c <rand>
 8006590:	4603      	mov	r3, r0
 8006592:	b29b      	uxth	r3, r3
 8006594:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006598:	b29b      	uxth	r3, r3
 800659a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800659e:	b29a      	uxth	r2, r3
 80065a0:	4b01      	ldr	r3, [pc, #4]	@ (80065a8 <tcp_init+0x20>)
 80065a2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80065a4:	bf00      	nop
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	20000020 	.word	0x20000020

080065ac <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	7d1b      	ldrb	r3, [r3, #20]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d105      	bne.n	80065c8 <tcp_free+0x1c>
 80065bc:	4b06      	ldr	r3, [pc, #24]	@ (80065d8 <tcp_free+0x2c>)
 80065be:	22d4      	movs	r2, #212	@ 0xd4
 80065c0:	4906      	ldr	r1, [pc, #24]	@ (80065dc <tcp_free+0x30>)
 80065c2:	4807      	ldr	r0, [pc, #28]	@ (80065e0 <tcp_free+0x34>)
 80065c4:	f008 feca 	bl	800f35c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80065c8:	6879      	ldr	r1, [r7, #4]
 80065ca:	2001      	movs	r0, #1
 80065cc:	f7fe fed8 	bl	8005380 <memp_free>
}
 80065d0:	bf00      	nop
 80065d2:	3708      	adds	r7, #8
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	08011214 	.word	0x08011214
 80065dc:	08011244 	.word	0x08011244
 80065e0:	08011258 	.word	0x08011258

080065e4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	7d1b      	ldrb	r3, [r3, #20]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d105      	bne.n	8006600 <tcp_free_listen+0x1c>
 80065f4:	4b06      	ldr	r3, [pc, #24]	@ (8006610 <tcp_free_listen+0x2c>)
 80065f6:	22df      	movs	r2, #223	@ 0xdf
 80065f8:	4906      	ldr	r1, [pc, #24]	@ (8006614 <tcp_free_listen+0x30>)
 80065fa:	4807      	ldr	r0, [pc, #28]	@ (8006618 <tcp_free_listen+0x34>)
 80065fc:	f008 feae 	bl	800f35c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006600:	6879      	ldr	r1, [r7, #4]
 8006602:	2002      	movs	r0, #2
 8006604:	f7fe febc 	bl	8005380 <memp_free>
}
 8006608:	bf00      	nop
 800660a:	3708      	adds	r7, #8
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	08011214 	.word	0x08011214
 8006614:	08011280 	.word	0x08011280
 8006618:	08011258 	.word	0x08011258

0800661c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006620:	f001 f802 	bl	8007628 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006624:	4b07      	ldr	r3, [pc, #28]	@ (8006644 <tcp_tmr+0x28>)
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	3301      	adds	r3, #1
 800662a:	b2da      	uxtb	r2, r3
 800662c:	4b05      	ldr	r3, [pc, #20]	@ (8006644 <tcp_tmr+0x28>)
 800662e:	701a      	strb	r2, [r3, #0]
 8006630:	4b04      	ldr	r3, [pc, #16]	@ (8006644 <tcp_tmr+0x28>)
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	2b00      	cmp	r3, #0
 800663a:	d001      	beq.n	8006640 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800663c:	f000 fcb2 	bl	8006fa4 <tcp_slowtmr>
  }
}
 8006640:	bf00      	nop
 8006642:	bd80      	pop	{r7, pc}
 8006644:	200082f1 	.word	0x200082f1

08006648 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d105      	bne.n	8006664 <tcp_remove_listener+0x1c>
 8006658:	4b0d      	ldr	r3, [pc, #52]	@ (8006690 <tcp_remove_listener+0x48>)
 800665a:	22ff      	movs	r2, #255	@ 0xff
 800665c:	490d      	ldr	r1, [pc, #52]	@ (8006694 <tcp_remove_listener+0x4c>)
 800665e:	480e      	ldr	r0, [pc, #56]	@ (8006698 <tcp_remove_listener+0x50>)
 8006660:	f008 fe7c 	bl	800f35c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	60fb      	str	r3, [r7, #12]
 8006668:	e00a      	b.n	8006680 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	429a      	cmp	r2, r3
 8006672:	d102      	bne.n	800667a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	60fb      	str	r3, [r7, #12]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1f1      	bne.n	800666a <tcp_remove_listener+0x22>
    }
  }
}
 8006686:	bf00      	nop
 8006688:	bf00      	nop
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	08011214 	.word	0x08011214
 8006694:	0801129c 	.word	0x0801129c
 8006698:	08011258 	.word	0x08011258

0800669c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d106      	bne.n	80066b8 <tcp_listen_closed+0x1c>
 80066aa:	4b14      	ldr	r3, [pc, #80]	@ (80066fc <tcp_listen_closed+0x60>)
 80066ac:	f240 1211 	movw	r2, #273	@ 0x111
 80066b0:	4913      	ldr	r1, [pc, #76]	@ (8006700 <tcp_listen_closed+0x64>)
 80066b2:	4814      	ldr	r0, [pc, #80]	@ (8006704 <tcp_listen_closed+0x68>)
 80066b4:	f008 fe52 	bl	800f35c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	7d1b      	ldrb	r3, [r3, #20]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d006      	beq.n	80066ce <tcp_listen_closed+0x32>
 80066c0:	4b0e      	ldr	r3, [pc, #56]	@ (80066fc <tcp_listen_closed+0x60>)
 80066c2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80066c6:	4910      	ldr	r1, [pc, #64]	@ (8006708 <tcp_listen_closed+0x6c>)
 80066c8:	480e      	ldr	r0, [pc, #56]	@ (8006704 <tcp_listen_closed+0x68>)
 80066ca:	f008 fe47 	bl	800f35c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80066ce:	2301      	movs	r3, #1
 80066d0:	60fb      	str	r3, [r7, #12]
 80066d2:	e00b      	b.n	80066ec <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80066d4:	4a0d      	ldr	r2, [pc, #52]	@ (800670c <tcp_listen_closed+0x70>)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	6879      	ldr	r1, [r7, #4]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7ff ffb1 	bl	8006648 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	3301      	adds	r3, #1
 80066ea:	60fb      	str	r3, [r7, #12]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2b03      	cmp	r3, #3
 80066f0:	d9f0      	bls.n	80066d4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80066f2:	bf00      	nop
 80066f4:	bf00      	nop
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	08011214 	.word	0x08011214
 8006700:	080112c4 	.word	0x080112c4
 8006704:	08011258 	.word	0x08011258
 8006708:	080112d0 	.word	0x080112d0
 800670c:	080131f4 	.word	0x080131f4

08006710 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006710:	b5b0      	push	{r4, r5, r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af04      	add	r7, sp, #16
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	460b      	mov	r3, r1
 800671a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d106      	bne.n	8006730 <tcp_close_shutdown+0x20>
 8006722:	4b63      	ldr	r3, [pc, #396]	@ (80068b0 <tcp_close_shutdown+0x1a0>)
 8006724:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8006728:	4962      	ldr	r1, [pc, #392]	@ (80068b4 <tcp_close_shutdown+0x1a4>)
 800672a:	4863      	ldr	r0, [pc, #396]	@ (80068b8 <tcp_close_shutdown+0x1a8>)
 800672c:	f008 fe16 	bl	800f35c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006730:	78fb      	ldrb	r3, [r7, #3]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d066      	beq.n	8006804 <tcp_close_shutdown+0xf4>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	7d1b      	ldrb	r3, [r3, #20]
 800673a:	2b04      	cmp	r3, #4
 800673c:	d003      	beq.n	8006746 <tcp_close_shutdown+0x36>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	7d1b      	ldrb	r3, [r3, #20]
 8006742:	2b07      	cmp	r3, #7
 8006744:	d15e      	bne.n	8006804 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800674a:	2b00      	cmp	r3, #0
 800674c:	d104      	bne.n	8006758 <tcp_close_shutdown+0x48>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006752:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8006756:	d055      	beq.n	8006804 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	8b5b      	ldrh	r3, [r3, #26]
 800675c:	f003 0310 	and.w	r3, r3, #16
 8006760:	2b00      	cmp	r3, #0
 8006762:	d106      	bne.n	8006772 <tcp_close_shutdown+0x62>
 8006764:	4b52      	ldr	r3, [pc, #328]	@ (80068b0 <tcp_close_shutdown+0x1a0>)
 8006766:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800676a:	4954      	ldr	r1, [pc, #336]	@ (80068bc <tcp_close_shutdown+0x1ac>)
 800676c:	4852      	ldr	r0, [pc, #328]	@ (80068b8 <tcp_close_shutdown+0x1a8>)
 800676e:	f008 fdf5 	bl	800f35c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800677a:	687d      	ldr	r5, [r7, #4]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	3304      	adds	r3, #4
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	8ad2      	ldrh	r2, [r2, #22]
 8006784:	6879      	ldr	r1, [r7, #4]
 8006786:	8b09      	ldrh	r1, [r1, #24]
 8006788:	9102      	str	r1, [sp, #8]
 800678a:	9201      	str	r2, [sp, #4]
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	462b      	mov	r3, r5
 8006790:	4622      	mov	r2, r4
 8006792:	4601      	mov	r1, r0
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f005 fc8f 	bl	800c0b8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f001 fa72 	bl	8007c84 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80067a0:	4b47      	ldr	r3, [pc, #284]	@ (80068c0 <tcp_close_shutdown+0x1b0>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d105      	bne.n	80067b6 <tcp_close_shutdown+0xa6>
 80067aa:	4b45      	ldr	r3, [pc, #276]	@ (80068c0 <tcp_close_shutdown+0x1b0>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	4a43      	ldr	r2, [pc, #268]	@ (80068c0 <tcp_close_shutdown+0x1b0>)
 80067b2:	6013      	str	r3, [r2, #0]
 80067b4:	e013      	b.n	80067de <tcp_close_shutdown+0xce>
 80067b6:	4b42      	ldr	r3, [pc, #264]	@ (80068c0 <tcp_close_shutdown+0x1b0>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	60fb      	str	r3, [r7, #12]
 80067bc:	e00c      	b.n	80067d8 <tcp_close_shutdown+0xc8>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d104      	bne.n	80067d2 <tcp_close_shutdown+0xc2>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68da      	ldr	r2, [r3, #12]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	60da      	str	r2, [r3, #12]
 80067d0:	e005      	b.n	80067de <tcp_close_shutdown+0xce>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1ef      	bne.n	80067be <tcp_close_shutdown+0xae>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	60da      	str	r2, [r3, #12]
 80067e4:	4b37      	ldr	r3, [pc, #220]	@ (80068c4 <tcp_close_shutdown+0x1b4>)
 80067e6:	2201      	movs	r2, #1
 80067e8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80067ea:	4b37      	ldr	r3, [pc, #220]	@ (80068c8 <tcp_close_shutdown+0x1b8>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d102      	bne.n	80067fa <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80067f4:	f003 ff06 	bl	800a604 <tcp_trigger_input_pcb_close>
 80067f8:	e002      	b.n	8006800 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7ff fed6 	bl	80065ac <tcp_free>
      }
      return ERR_OK;
 8006800:	2300      	movs	r3, #0
 8006802:	e050      	b.n	80068a6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	7d1b      	ldrb	r3, [r3, #20]
 8006808:	2b02      	cmp	r3, #2
 800680a:	d03b      	beq.n	8006884 <tcp_close_shutdown+0x174>
 800680c:	2b02      	cmp	r3, #2
 800680e:	dc44      	bgt.n	800689a <tcp_close_shutdown+0x18a>
 8006810:	2b00      	cmp	r3, #0
 8006812:	d002      	beq.n	800681a <tcp_close_shutdown+0x10a>
 8006814:	2b01      	cmp	r3, #1
 8006816:	d02a      	beq.n	800686e <tcp_close_shutdown+0x15e>
 8006818:	e03f      	b.n	800689a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	8adb      	ldrh	r3, [r3, #22]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d021      	beq.n	8006866 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006822:	4b2a      	ldr	r3, [pc, #168]	@ (80068cc <tcp_close_shutdown+0x1bc>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	429a      	cmp	r2, r3
 800682a:	d105      	bne.n	8006838 <tcp_close_shutdown+0x128>
 800682c:	4b27      	ldr	r3, [pc, #156]	@ (80068cc <tcp_close_shutdown+0x1bc>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	4a26      	ldr	r2, [pc, #152]	@ (80068cc <tcp_close_shutdown+0x1bc>)
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	e013      	b.n	8006860 <tcp_close_shutdown+0x150>
 8006838:	4b24      	ldr	r3, [pc, #144]	@ (80068cc <tcp_close_shutdown+0x1bc>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	60bb      	str	r3, [r7, #8]
 800683e:	e00c      	b.n	800685a <tcp_close_shutdown+0x14a>
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	429a      	cmp	r2, r3
 8006848:	d104      	bne.n	8006854 <tcp_close_shutdown+0x144>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68da      	ldr	r2, [r3, #12]
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	60da      	str	r2, [r3, #12]
 8006852:	e005      	b.n	8006860 <tcp_close_shutdown+0x150>
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	60bb      	str	r3, [r7, #8]
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1ef      	bne.n	8006840 <tcp_close_shutdown+0x130>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7ff fea0 	bl	80065ac <tcp_free>
      break;
 800686c:	e01a      	b.n	80068a4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7ff ff14 	bl	800669c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006874:	6879      	ldr	r1, [r7, #4]
 8006876:	4816      	ldr	r0, [pc, #88]	@ (80068d0 <tcp_close_shutdown+0x1c0>)
 8006878:	f001 fa54 	bl	8007d24 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f7ff feb1 	bl	80065e4 <tcp_free_listen>
      break;
 8006882:	e00f      	b.n	80068a4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006884:	6879      	ldr	r1, [r7, #4]
 8006886:	480e      	ldr	r0, [pc, #56]	@ (80068c0 <tcp_close_shutdown+0x1b0>)
 8006888:	f001 fa4c 	bl	8007d24 <tcp_pcb_remove>
 800688c:	4b0d      	ldr	r3, [pc, #52]	@ (80068c4 <tcp_close_shutdown+0x1b4>)
 800688e:	2201      	movs	r2, #1
 8006890:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7ff fe8a 	bl	80065ac <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006898:	e004      	b.n	80068a4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f81a 	bl	80068d4 <tcp_close_shutdown_fin>
 80068a0:	4603      	mov	r3, r0
 80068a2:	e000      	b.n	80068a6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bdb0      	pop	{r4, r5, r7, pc}
 80068ae:	bf00      	nop
 80068b0:	08011214 	.word	0x08011214
 80068b4:	080112e8 	.word	0x080112e8
 80068b8:	08011258 	.word	0x08011258
 80068bc:	08011308 	.word	0x08011308
 80068c0:	200082e8 	.word	0x200082e8
 80068c4:	200082f0 	.word	0x200082f0
 80068c8:	20008328 	.word	0x20008328
 80068cc:	200082e0 	.word	0x200082e0
 80068d0:	200082e4 	.word	0x200082e4

080068d4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d106      	bne.n	80068f0 <tcp_close_shutdown_fin+0x1c>
 80068e2:	4b2e      	ldr	r3, [pc, #184]	@ (800699c <tcp_close_shutdown_fin+0xc8>)
 80068e4:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80068e8:	492d      	ldr	r1, [pc, #180]	@ (80069a0 <tcp_close_shutdown_fin+0xcc>)
 80068ea:	482e      	ldr	r0, [pc, #184]	@ (80069a4 <tcp_close_shutdown_fin+0xd0>)
 80068ec:	f008 fd36 	bl	800f35c <iprintf>

  switch (pcb->state) {
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	7d1b      	ldrb	r3, [r3, #20]
 80068f4:	2b07      	cmp	r3, #7
 80068f6:	d020      	beq.n	800693a <tcp_close_shutdown_fin+0x66>
 80068f8:	2b07      	cmp	r3, #7
 80068fa:	dc2b      	bgt.n	8006954 <tcp_close_shutdown_fin+0x80>
 80068fc:	2b03      	cmp	r3, #3
 80068fe:	d002      	beq.n	8006906 <tcp_close_shutdown_fin+0x32>
 8006900:	2b04      	cmp	r3, #4
 8006902:	d00d      	beq.n	8006920 <tcp_close_shutdown_fin+0x4c>
 8006904:	e026      	b.n	8006954 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f004 fce4 	bl	800b2d4 <tcp_send_fin>
 800690c:	4603      	mov	r3, r0
 800690e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d11f      	bne.n	8006958 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2205      	movs	r2, #5
 800691c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800691e:	e01b      	b.n	8006958 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f004 fcd7 	bl	800b2d4 <tcp_send_fin>
 8006926:	4603      	mov	r3, r0
 8006928:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800692a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d114      	bne.n	800695c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2205      	movs	r2, #5
 8006936:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006938:	e010      	b.n	800695c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f004 fcca 	bl	800b2d4 <tcp_send_fin>
 8006940:	4603      	mov	r3, r0
 8006942:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006944:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d109      	bne.n	8006960 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2209      	movs	r2, #9
 8006950:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006952:	e005      	b.n	8006960 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006954:	2300      	movs	r3, #0
 8006956:	e01c      	b.n	8006992 <tcp_close_shutdown_fin+0xbe>
      break;
 8006958:	bf00      	nop
 800695a:	e002      	b.n	8006962 <tcp_close_shutdown_fin+0x8e>
      break;
 800695c:	bf00      	nop
 800695e:	e000      	b.n	8006962 <tcp_close_shutdown_fin+0x8e>
      break;
 8006960:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d103      	bne.n	8006972 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f004 fdf0 	bl	800b550 <tcp_output>
 8006970:	e00d      	b.n	800698e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006976:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800697a:	d108      	bne.n	800698e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	8b5b      	ldrh	r3, [r3, #26]
 8006980:	f043 0308 	orr.w	r3, r3, #8
 8006984:	b29a      	uxth	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800698a:	2300      	movs	r3, #0
 800698c:	e001      	b.n	8006992 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800698e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	08011214 	.word	0x08011214
 80069a0:	080112c4 	.word	0x080112c4
 80069a4:	08011258 	.word	0x08011258

080069a8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d109      	bne.n	80069ca <tcp_close+0x22>
 80069b6:	4b0f      	ldr	r3, [pc, #60]	@ (80069f4 <tcp_close+0x4c>)
 80069b8:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80069bc:	490e      	ldr	r1, [pc, #56]	@ (80069f8 <tcp_close+0x50>)
 80069be:	480f      	ldr	r0, [pc, #60]	@ (80069fc <tcp_close+0x54>)
 80069c0:	f008 fccc 	bl	800f35c <iprintf>
 80069c4:	f06f 030f 	mvn.w	r3, #15
 80069c8:	e00f      	b.n	80069ea <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	7d1b      	ldrb	r3, [r3, #20]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d006      	beq.n	80069e0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	8b5b      	ldrh	r3, [r3, #26]
 80069d6:	f043 0310 	orr.w	r3, r3, #16
 80069da:	b29a      	uxth	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80069e0:	2101      	movs	r1, #1
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7ff fe94 	bl	8006710 <tcp_close_shutdown>
 80069e8:	4603      	mov	r3, r0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	08011214 	.word	0x08011214
 80069f8:	08011324 	.word	0x08011324
 80069fc:	08011258 	.word	0x08011258

08006a00 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b08e      	sub	sp, #56	@ 0x38
 8006a04:	af04      	add	r7, sp, #16
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d107      	bne.n	8006a20 <tcp_abandon+0x20>
 8006a10:	4b52      	ldr	r3, [pc, #328]	@ (8006b5c <tcp_abandon+0x15c>)
 8006a12:	f240 223d 	movw	r2, #573	@ 0x23d
 8006a16:	4952      	ldr	r1, [pc, #328]	@ (8006b60 <tcp_abandon+0x160>)
 8006a18:	4852      	ldr	r0, [pc, #328]	@ (8006b64 <tcp_abandon+0x164>)
 8006a1a:	f008 fc9f 	bl	800f35c <iprintf>
 8006a1e:	e099      	b.n	8006b54 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	7d1b      	ldrb	r3, [r3, #20]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d106      	bne.n	8006a36 <tcp_abandon+0x36>
 8006a28:	4b4c      	ldr	r3, [pc, #304]	@ (8006b5c <tcp_abandon+0x15c>)
 8006a2a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8006a2e:	494e      	ldr	r1, [pc, #312]	@ (8006b68 <tcp_abandon+0x168>)
 8006a30:	484c      	ldr	r0, [pc, #304]	@ (8006b64 <tcp_abandon+0x164>)
 8006a32:	f008 fc93 	bl	800f35c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	7d1b      	ldrb	r3, [r3, #20]
 8006a3a:	2b0a      	cmp	r3, #10
 8006a3c:	d107      	bne.n	8006a4e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006a3e:	6879      	ldr	r1, [r7, #4]
 8006a40:	484a      	ldr	r0, [pc, #296]	@ (8006b6c <tcp_abandon+0x16c>)
 8006a42:	f001 f96f 	bl	8007d24 <tcp_pcb_remove>
    tcp_free(pcb);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7ff fdb0 	bl	80065ac <tcp_free>
 8006a4c:	e082      	b.n	8006b54 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8006a52:	2300      	movs	r3, #0
 8006a54:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a5a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a60:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a68:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	7d1b      	ldrb	r3, [r3, #20]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d126      	bne.n	8006ac6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	8adb      	ldrh	r3, [r3, #22]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d02e      	beq.n	8006ade <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006a80:	4b3b      	ldr	r3, [pc, #236]	@ (8006b70 <tcp_abandon+0x170>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d105      	bne.n	8006a96 <tcp_abandon+0x96>
 8006a8a:	4b39      	ldr	r3, [pc, #228]	@ (8006b70 <tcp_abandon+0x170>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	4a37      	ldr	r2, [pc, #220]	@ (8006b70 <tcp_abandon+0x170>)
 8006a92:	6013      	str	r3, [r2, #0]
 8006a94:	e013      	b.n	8006abe <tcp_abandon+0xbe>
 8006a96:	4b36      	ldr	r3, [pc, #216]	@ (8006b70 <tcp_abandon+0x170>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	61fb      	str	r3, [r7, #28]
 8006a9c:	e00c      	b.n	8006ab8 <tcp_abandon+0xb8>
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d104      	bne.n	8006ab2 <tcp_abandon+0xb2>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68da      	ldr	r2, [r3, #12]
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	60da      	str	r2, [r3, #12]
 8006ab0:	e005      	b.n	8006abe <tcp_abandon+0xbe>
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	61fb      	str	r3, [r7, #28]
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1ef      	bne.n	8006a9e <tcp_abandon+0x9e>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	60da      	str	r2, [r3, #12]
 8006ac4:	e00b      	b.n	8006ade <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	8adb      	ldrh	r3, [r3, #22]
 8006ace:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006ad0:	6879      	ldr	r1, [r7, #4]
 8006ad2:	4828      	ldr	r0, [pc, #160]	@ (8006b74 <tcp_abandon+0x174>)
 8006ad4:	f001 f926 	bl	8007d24 <tcp_pcb_remove>
 8006ad8:	4b27      	ldr	r3, [pc, #156]	@ (8006b78 <tcp_abandon+0x178>)
 8006ada:	2201      	movs	r2, #1
 8006adc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d004      	beq.n	8006af0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aea:	4618      	mov	r0, r3
 8006aec:	f000 fe7c 	bl	80077e8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d004      	beq.n	8006b02 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 fe73 	bl	80077e8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d004      	beq.n	8006b14 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 fe6a 	bl	80077e8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00e      	beq.n	8006b38 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006b1a:	6879      	ldr	r1, [r7, #4]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	3304      	adds	r3, #4
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	8b12      	ldrh	r2, [r2, #24]
 8006b24:	9202      	str	r2, [sp, #8]
 8006b26:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006b28:	9201      	str	r2, [sp, #4]
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	69b9      	ldr	r1, [r7, #24]
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f005 fac0 	bl	800c0b8 <tcp_rst>
    }
    last_state = pcb->state;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	7d1b      	ldrb	r3, [r3, #20]
 8006b3c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7ff fd34 	bl	80065ac <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d004      	beq.n	8006b54 <tcp_abandon+0x154>
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	f06f 010c 	mvn.w	r1, #12
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	4798      	blx	r3
  }
}
 8006b54:	3728      	adds	r7, #40	@ 0x28
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	08011214 	.word	0x08011214
 8006b60:	08011358 	.word	0x08011358
 8006b64:	08011258 	.word	0x08011258
 8006b68:	08011374 	.word	0x08011374
 8006b6c:	200082ec 	.word	0x200082ec
 8006b70:	200082e0 	.word	0x200082e0
 8006b74:	200082e8 	.word	0x200082e8
 8006b78:	200082f0 	.word	0x200082f0

08006b7c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006b84:	2101      	movs	r1, #1
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7ff ff3a 	bl	8006a00 <tcp_abandon>
}
 8006b8c:	bf00      	nop
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d106      	bne.n	8006bb0 <tcp_update_rcv_ann_wnd+0x1c>
 8006ba2:	4b25      	ldr	r3, [pc, #148]	@ (8006c38 <tcp_update_rcv_ann_wnd+0xa4>)
 8006ba4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8006ba8:	4924      	ldr	r1, [pc, #144]	@ (8006c3c <tcp_update_rcv_ann_wnd+0xa8>)
 8006baa:	4825      	ldr	r0, [pc, #148]	@ (8006c40 <tcp_update_rcv_ann_wnd+0xac>)
 8006bac:	f008 fbd6 	bl	800f35c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006bb8:	4413      	add	r3, r2
 8006bba:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8006bc4:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8006bc8:	bf28      	it	cs
 8006bca:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8006bce:	b292      	uxth	r2, r2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	db08      	blt.n	8006bec <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	e020      	b.n	8006c2e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	dd03      	ble.n	8006c02 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006c00:	e014      	b.n	8006c2c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c14:	d306      	bcc.n	8006c24 <tcp_update_rcv_ann_wnd+0x90>
 8006c16:	4b08      	ldr	r3, [pc, #32]	@ (8006c38 <tcp_update_rcv_ann_wnd+0xa4>)
 8006c18:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8006c1c:	4909      	ldr	r1, [pc, #36]	@ (8006c44 <tcp_update_rcv_ann_wnd+0xb0>)
 8006c1e:	4808      	ldr	r0, [pc, #32]	@ (8006c40 <tcp_update_rcv_ann_wnd+0xac>)
 8006c20:	f008 fb9c 	bl	800f35c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8006c2c:	2300      	movs	r3, #0
  }
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	08011214 	.word	0x08011214
 8006c3c:	08011470 	.word	0x08011470
 8006c40:	08011258 	.word	0x08011258
 8006c44:	08011494 	.word	0x08011494

08006c48 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	460b      	mov	r3, r1
 8006c52:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d107      	bne.n	8006c6a <tcp_recved+0x22>
 8006c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8006cd8 <tcp_recved+0x90>)
 8006c5c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8006c60:	491e      	ldr	r1, [pc, #120]	@ (8006cdc <tcp_recved+0x94>)
 8006c62:	481f      	ldr	r0, [pc, #124]	@ (8006ce0 <tcp_recved+0x98>)
 8006c64:	f008 fb7a 	bl	800f35c <iprintf>
 8006c68:	e032      	b.n	8006cd0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	7d1b      	ldrb	r3, [r3, #20]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d106      	bne.n	8006c80 <tcp_recved+0x38>
 8006c72:	4b19      	ldr	r3, [pc, #100]	@ (8006cd8 <tcp_recved+0x90>)
 8006c74:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8006c78:	491a      	ldr	r1, [pc, #104]	@ (8006ce4 <tcp_recved+0x9c>)
 8006c7a:	4819      	ldr	r0, [pc, #100]	@ (8006ce0 <tcp_recved+0x98>)
 8006c7c:	f008 fb6e 	bl	800f35c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8006c84:	887b      	ldrh	r3, [r7, #2]
 8006c86:	4413      	add	r3, r2
 8006c88:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006c8a:	89fb      	ldrh	r3, [r7, #14]
 8006c8c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8006c90:	d804      	bhi.n	8006c9c <tcp_recved+0x54>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c96:	89fa      	ldrh	r2, [r7, #14]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d204      	bcs.n	8006ca6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8006ca2:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006ca4:	e002      	b.n	8006cac <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	89fa      	ldrh	r2, [r7, #14]
 8006caa:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f7ff ff71 	bl	8006b94 <tcp_update_rcv_ann_wnd>
 8006cb2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8006cba:	d309      	bcc.n	8006cd0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	8b5b      	ldrh	r3, [r3, #26]
 8006cc0:	f043 0302 	orr.w	r3, r3, #2
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f004 fc40 	bl	800b550 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	08011214 	.word	0x08011214
 8006cdc:	080114b0 	.word	0x080114b0
 8006ce0:	08011258 	.word	0x08011258
 8006ce4:	080114c8 	.word	0x080114c8

08006ce8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8006cf2:	4b1e      	ldr	r3, [pc, #120]	@ (8006d6c <tcp_new_port+0x84>)
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8006d6c <tcp_new_port+0x84>)
 8006cfc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8006cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8006d6c <tcp_new_port+0x84>)
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d103      	bne.n	8006d12 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8006d0a:	4b18      	ldr	r3, [pc, #96]	@ (8006d6c <tcp_new_port+0x84>)
 8006d0c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8006d10:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006d12:	2300      	movs	r3, #0
 8006d14:	71fb      	strb	r3, [r7, #7]
 8006d16:	e01e      	b.n	8006d56 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006d18:	79fb      	ldrb	r3, [r7, #7]
 8006d1a:	4a15      	ldr	r2, [pc, #84]	@ (8006d70 <tcp_new_port+0x88>)
 8006d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	603b      	str	r3, [r7, #0]
 8006d24:	e011      	b.n	8006d4a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	8ada      	ldrh	r2, [r3, #22]
 8006d2a:	4b10      	ldr	r3, [pc, #64]	@ (8006d6c <tcp_new_port+0x84>)
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d108      	bne.n	8006d44 <tcp_new_port+0x5c>
        n++;
 8006d32:	88bb      	ldrh	r3, [r7, #4]
 8006d34:	3301      	adds	r3, #1
 8006d36:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8006d38:	88bb      	ldrh	r3, [r7, #4]
 8006d3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d3e:	d3d8      	bcc.n	8006cf2 <tcp_new_port+0xa>
          return 0;
 8006d40:	2300      	movs	r3, #0
 8006d42:	e00d      	b.n	8006d60 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	603b      	str	r3, [r7, #0]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1ea      	bne.n	8006d26 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006d50:	79fb      	ldrb	r3, [r7, #7]
 8006d52:	3301      	adds	r3, #1
 8006d54:	71fb      	strb	r3, [r7, #7]
 8006d56:	79fb      	ldrb	r3, [r7, #7]
 8006d58:	2b03      	cmp	r3, #3
 8006d5a:	d9dd      	bls.n	8006d18 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8006d5c:	4b03      	ldr	r3, [pc, #12]	@ (8006d6c <tcp_new_port+0x84>)
 8006d5e:	881b      	ldrh	r3, [r3, #0]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	20000020 	.word	0x20000020
 8006d70:	080131f4 	.word	0x080131f4

08006d74 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b08a      	sub	sp, #40	@ 0x28
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	603b      	str	r3, [r7, #0]
 8006d80:	4613      	mov	r3, r2
 8006d82:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8006d84:	2300      	movs	r3, #0
 8006d86:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d109      	bne.n	8006da2 <tcp_connect+0x2e>
 8006d8e:	4b7d      	ldr	r3, [pc, #500]	@ (8006f84 <tcp_connect+0x210>)
 8006d90:	f240 4235 	movw	r2, #1077	@ 0x435
 8006d94:	497c      	ldr	r1, [pc, #496]	@ (8006f88 <tcp_connect+0x214>)
 8006d96:	487d      	ldr	r0, [pc, #500]	@ (8006f8c <tcp_connect+0x218>)
 8006d98:	f008 fae0 	bl	800f35c <iprintf>
 8006d9c:	f06f 030f 	mvn.w	r3, #15
 8006da0:	e0ec      	b.n	8006f7c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d109      	bne.n	8006dbc <tcp_connect+0x48>
 8006da8:	4b76      	ldr	r3, [pc, #472]	@ (8006f84 <tcp_connect+0x210>)
 8006daa:	f240 4236 	movw	r2, #1078	@ 0x436
 8006dae:	4978      	ldr	r1, [pc, #480]	@ (8006f90 <tcp_connect+0x21c>)
 8006db0:	4876      	ldr	r0, [pc, #472]	@ (8006f8c <tcp_connect+0x218>)
 8006db2:	f008 fad3 	bl	800f35c <iprintf>
 8006db6:	f06f 030f 	mvn.w	r3, #15
 8006dba:	e0df      	b.n	8006f7c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	7d1b      	ldrb	r3, [r3, #20]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d009      	beq.n	8006dd8 <tcp_connect+0x64>
 8006dc4:	4b6f      	ldr	r3, [pc, #444]	@ (8006f84 <tcp_connect+0x210>)
 8006dc6:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 8006dca:	4972      	ldr	r1, [pc, #456]	@ (8006f94 <tcp_connect+0x220>)
 8006dcc:	486f      	ldr	r0, [pc, #444]	@ (8006f8c <tcp_connect+0x218>)
 8006dce:	f008 fac5 	bl	800f35c <iprintf>
 8006dd2:	f06f 0309 	mvn.w	r3, #9
 8006dd6:	e0d1      	b.n	8006f7c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d002      	beq.n	8006de4 <tcp_connect+0x70>
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	e000      	b.n	8006de6 <tcp_connect+0x72>
 8006de4:	2300      	movs	r3, #0
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	88fa      	ldrh	r2, [r7, #6]
 8006dee:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	7a1b      	ldrb	r3, [r3, #8]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d006      	beq.n	8006e06 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	7a1b      	ldrb	r3, [r3, #8]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7fe fdd5 	bl	80059ac <netif_get_by_index>
 8006e02:	6278      	str	r0, [r7, #36]	@ 0x24
 8006e04:	e005      	b.n	8006e12 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	3304      	adds	r3, #4
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f006 fef4 	bl	800dbf8 <ip4_route>
 8006e10:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 8006e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d102      	bne.n	8006e1e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8006e18:	f06f 0303 	mvn.w	r3, #3
 8006e1c:	e0ae      	b.n	8006f7c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d003      	beq.n	8006e2c <tcp_connect+0xb8>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d111      	bne.n	8006e50 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d002      	beq.n	8006e38 <tcp_connect+0xc4>
 8006e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e34:	3304      	adds	r3, #4
 8006e36:	e000      	b.n	8006e3a <tcp_connect+0xc6>
 8006e38:	2300      	movs	r3, #0
 8006e3a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d102      	bne.n	8006e48 <tcp_connect+0xd4>
      return ERR_RTE;
 8006e42:	f06f 0303 	mvn.w	r3, #3
 8006e46:	e099      	b.n	8006f7c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	8adb      	ldrh	r3, [r3, #22]
 8006e54:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	8adb      	ldrh	r3, [r3, #22]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10c      	bne.n	8006e78 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8006e5e:	f7ff ff43 	bl	8006ce8 <tcp_new_port>
 8006e62:	4603      	mov	r3, r0
 8006e64:	461a      	mov	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	8adb      	ldrh	r3, [r3, #22]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d102      	bne.n	8006e78 <tcp_connect+0x104>
      return ERR_BUF;
 8006e72:	f06f 0301 	mvn.w	r3, #1
 8006e76:	e081      	b.n	8006f7c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f000 ffe7 	bl	8007e4c <tcp_next_iss>
 8006e7e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	1e5a      	subs	r2, r3, #1
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	1e5a      	subs	r2, r3, #1
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	1e5a      	subs	r2, r3, #1
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8006eaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8006ec2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8006ecc:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006eda:	f000 ffdd 	bl	8007e98 <tcp_eff_send_mss_netif>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	683a      	ldr	r2, [r7, #0]
 8006ef2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8006ef6:	2102      	movs	r1, #2
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f004 fa3b 	bl	800b374 <tcp_enqueue_flags>
 8006efe:	4603      	mov	r3, r0
 8006f00:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8006f02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d136      	bne.n	8006f78 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8006f10:	8b7b      	ldrh	r3, [r7, #26]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d021      	beq.n	8006f5a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8006f16:	4b20      	ldr	r3, [pc, #128]	@ (8006f98 <tcp_connect+0x224>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d105      	bne.n	8006f2c <tcp_connect+0x1b8>
 8006f20:	4b1d      	ldr	r3, [pc, #116]	@ (8006f98 <tcp_connect+0x224>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	4a1c      	ldr	r2, [pc, #112]	@ (8006f98 <tcp_connect+0x224>)
 8006f28:	6013      	str	r3, [r2, #0]
 8006f2a:	e013      	b.n	8006f54 <tcp_connect+0x1e0>
 8006f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8006f98 <tcp_connect+0x224>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	623b      	str	r3, [r7, #32]
 8006f32:	e00c      	b.n	8006f4e <tcp_connect+0x1da>
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d104      	bne.n	8006f48 <tcp_connect+0x1d4>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	68da      	ldr	r2, [r3, #12]
 8006f42:	6a3b      	ldr	r3, [r7, #32]
 8006f44:	60da      	str	r2, [r3, #12]
 8006f46:	e005      	b.n	8006f54 <tcp_connect+0x1e0>
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	623b      	str	r3, [r7, #32]
 8006f4e:	6a3b      	ldr	r3, [r7, #32]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1ef      	bne.n	8006f34 <tcp_connect+0x1c0>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8006f5a:	4b10      	ldr	r3, [pc, #64]	@ (8006f9c <tcp_connect+0x228>)
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	60da      	str	r2, [r3, #12]
 8006f62:	4a0e      	ldr	r2, [pc, #56]	@ (8006f9c <tcp_connect+0x228>)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6013      	str	r3, [r2, #0]
 8006f68:	f005 fa68 	bl	800c43c <tcp_timer_needed>
 8006f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8006fa0 <tcp_connect+0x22c>)
 8006f6e:	2201      	movs	r2, #1
 8006f70:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f004 faec 	bl	800b550 <tcp_output>
  }
  return ret;
 8006f78:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3728      	adds	r7, #40	@ 0x28
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	08011214 	.word	0x08011214
 8006f88:	080114f0 	.word	0x080114f0
 8006f8c:	08011258 	.word	0x08011258
 8006f90:	0801150c 	.word	0x0801150c
 8006f94:	08011528 	.word	0x08011528
 8006f98:	200082e0 	.word	0x200082e0
 8006f9c:	200082e8 	.word	0x200082e8
 8006fa0:	200082f0 	.word	0x200082f0

08006fa4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006fa4:	b5b0      	push	{r4, r5, r7, lr}
 8006fa6:	b090      	sub	sp, #64	@ 0x40
 8006fa8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006faa:	2300      	movs	r3, #0
 8006fac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8006fb0:	4b95      	ldr	r3, [pc, #596]	@ (8007208 <tcp_slowtmr+0x264>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	4a94      	ldr	r2, [pc, #592]	@ (8007208 <tcp_slowtmr+0x264>)
 8006fb8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006fba:	4b94      	ldr	r3, [pc, #592]	@ (800720c <tcp_slowtmr+0x268>)
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	b2da      	uxtb	r2, r3
 8006fc2:	4b92      	ldr	r3, [pc, #584]	@ (800720c <tcp_slowtmr+0x268>)
 8006fc4:	701a      	strb	r2, [r3, #0]
 8006fc6:	e000      	b.n	8006fca <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8006fc8:	bf00      	nop
  prev = NULL;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8006fce:	4b90      	ldr	r3, [pc, #576]	@ (8007210 <tcp_slowtmr+0x26c>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8006fd4:	e29f      	b.n	8007516 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd8:	7d1b      	ldrb	r3, [r3, #20]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d106      	bne.n	8006fec <tcp_slowtmr+0x48>
 8006fde:	4b8d      	ldr	r3, [pc, #564]	@ (8007214 <tcp_slowtmr+0x270>)
 8006fe0:	f240 42be 	movw	r2, #1214	@ 0x4be
 8006fe4:	498c      	ldr	r1, [pc, #560]	@ (8007218 <tcp_slowtmr+0x274>)
 8006fe6:	488d      	ldr	r0, [pc, #564]	@ (800721c <tcp_slowtmr+0x278>)
 8006fe8:	f008 f9b8 	bl	800f35c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fee:	7d1b      	ldrb	r3, [r3, #20]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d106      	bne.n	8007002 <tcp_slowtmr+0x5e>
 8006ff4:	4b87      	ldr	r3, [pc, #540]	@ (8007214 <tcp_slowtmr+0x270>)
 8006ff6:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8006ffa:	4989      	ldr	r1, [pc, #548]	@ (8007220 <tcp_slowtmr+0x27c>)
 8006ffc:	4887      	ldr	r0, [pc, #540]	@ (800721c <tcp_slowtmr+0x278>)
 8006ffe:	f008 f9ad 	bl	800f35c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007004:	7d1b      	ldrb	r3, [r3, #20]
 8007006:	2b0a      	cmp	r3, #10
 8007008:	d106      	bne.n	8007018 <tcp_slowtmr+0x74>
 800700a:	4b82      	ldr	r3, [pc, #520]	@ (8007214 <tcp_slowtmr+0x270>)
 800700c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8007010:	4984      	ldr	r1, [pc, #528]	@ (8007224 <tcp_slowtmr+0x280>)
 8007012:	4882      	ldr	r0, [pc, #520]	@ (800721c <tcp_slowtmr+0x278>)
 8007014:	f008 f9a2 	bl	800f35c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800701a:	7f9a      	ldrb	r2, [r3, #30]
 800701c:	4b7b      	ldr	r3, [pc, #492]	@ (800720c <tcp_slowtmr+0x268>)
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	429a      	cmp	r2, r3
 8007022:	d105      	bne.n	8007030 <tcp_slowtmr+0x8c>
      prev = pcb;
 8007024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007026:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8007028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800702e:	e272      	b.n	8007516 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8007030:	4b76      	ldr	r3, [pc, #472]	@ (800720c <tcp_slowtmr+0x268>)
 8007032:	781a      	ldrb	r2, [r3, #0]
 8007034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007036:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8007038:	2300      	movs	r3, #0
 800703a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800703e:	2300      	movs	r3, #0
 8007040:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007046:	7d1b      	ldrb	r3, [r3, #20]
 8007048:	2b02      	cmp	r3, #2
 800704a:	d10a      	bne.n	8007062 <tcp_slowtmr+0xbe>
 800704c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800704e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007052:	2b05      	cmp	r3, #5
 8007054:	d905      	bls.n	8007062 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8007056:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800705a:	3301      	adds	r3, #1
 800705c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007060:	e11e      	b.n	80072a0 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007064:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007068:	2b0b      	cmp	r3, #11
 800706a:	d905      	bls.n	8007078 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800706c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007070:	3301      	adds	r3, #1
 8007072:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007076:	e113      	b.n	80072a0 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8007078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800707a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800707e:	2b00      	cmp	r3, #0
 8007080:	d075      	beq.n	800716e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007086:	2b00      	cmp	r3, #0
 8007088:	d006      	beq.n	8007098 <tcp_slowtmr+0xf4>
 800708a:	4b62      	ldr	r3, [pc, #392]	@ (8007214 <tcp_slowtmr+0x270>)
 800708c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8007090:	4965      	ldr	r1, [pc, #404]	@ (8007228 <tcp_slowtmr+0x284>)
 8007092:	4862      	ldr	r0, [pc, #392]	@ (800721c <tcp_slowtmr+0x278>)
 8007094:	f008 f962 	bl	800f35c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800709a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800709c:	2b00      	cmp	r3, #0
 800709e:	d106      	bne.n	80070ae <tcp_slowtmr+0x10a>
 80070a0:	4b5c      	ldr	r3, [pc, #368]	@ (8007214 <tcp_slowtmr+0x270>)
 80070a2:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80070a6:	4961      	ldr	r1, [pc, #388]	@ (800722c <tcp_slowtmr+0x288>)
 80070a8:	485c      	ldr	r0, [pc, #368]	@ (800721c <tcp_slowtmr+0x278>)
 80070aa:	f008 f957 	bl	800f35c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80070ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80070b4:	2b0b      	cmp	r3, #11
 80070b6:	d905      	bls.n	80070c4 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80070b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070bc:	3301      	adds	r3, #1
 80070be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80070c2:	e0ed      	b.n	80072a0 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80070c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80070ca:	3b01      	subs	r3, #1
 80070cc:	4a58      	ldr	r2, [pc, #352]	@ (8007230 <tcp_slowtmr+0x28c>)
 80070ce:	5cd3      	ldrb	r3, [r2, r3]
 80070d0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80070d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070d4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80070d8:	7c7a      	ldrb	r2, [r7, #17]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d907      	bls.n	80070ee <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80070de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80070e4:	3301      	adds	r3, #1
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ea:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80070ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070f0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80070f4:	7c7a      	ldrb	r2, [r7, #17]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	f200 80d2 	bhi.w	80072a0 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80070fc:	2301      	movs	r3, #1
 80070fe:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8007100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007102:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007106:	2b00      	cmp	r3, #0
 8007108:	d108      	bne.n	800711c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800710a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800710c:	f005 f8c8 	bl	800c2a0 <tcp_zero_window_probe>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d014      	beq.n	8007140 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8007116:	2300      	movs	r3, #0
 8007118:	623b      	str	r3, [r7, #32]
 800711a:	e011      	b.n	8007140 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800711c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800711e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007122:	4619      	mov	r1, r3
 8007124:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007126:	f003 ff8d 	bl	800b044 <tcp_split_unsent_seg>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d107      	bne.n	8007140 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8007130:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007132:	f004 fa0d 	bl	800b550 <tcp_output>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800713c:	2300      	movs	r3, #0
 800713e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8007140:	6a3b      	ldr	r3, [r7, #32]
 8007142:	2b00      	cmp	r3, #0
 8007144:	f000 80ac 	beq.w	80072a0 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8007148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800714a:	2200      	movs	r2, #0
 800714c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007152:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007156:	2b06      	cmp	r3, #6
 8007158:	f200 80a2 	bhi.w	80072a0 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800715c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800715e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007162:	3301      	adds	r3, #1
 8007164:	b2da      	uxtb	r2, r3
 8007166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007168:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800716c:	e098      	b.n	80072a0 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800716e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007170:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007174:	2b00      	cmp	r3, #0
 8007176:	db0f      	blt.n	8007198 <tcp_slowtmr+0x1f4>
 8007178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800717a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800717e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8007182:	4293      	cmp	r3, r2
 8007184:	d008      	beq.n	8007198 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8007186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007188:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800718c:	b29b      	uxth	r3, r3
 800718e:	3301      	adds	r3, #1
 8007190:	b29b      	uxth	r3, r3
 8007192:	b21a      	sxth	r2, r3
 8007194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007196:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8007198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800719a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800719e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071a0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80071a4:	429a      	cmp	r2, r3
 80071a6:	db7b      	blt.n	80072a0 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80071a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80071aa:	f004 fcc5 	bl	800bb38 <tcp_rexmit_rto_prepare>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d007      	beq.n	80071c4 <tcp_slowtmr+0x220>
 80071b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d171      	bne.n	80072a0 <tcp_slowtmr+0x2fc>
 80071bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d06d      	beq.n	80072a0 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80071c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071c6:	7d1b      	ldrb	r3, [r3, #20]
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d03a      	beq.n	8007242 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80071cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071d2:	2b0c      	cmp	r3, #12
 80071d4:	bf28      	it	cs
 80071d6:	230c      	movcs	r3, #12
 80071d8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80071da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071dc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80071e0:	10db      	asrs	r3, r3, #3
 80071e2:	b21b      	sxth	r3, r3
 80071e4:	461a      	mov	r2, r3
 80071e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071e8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80071ec:	4413      	add	r3, r2
 80071ee:	7efa      	ldrb	r2, [r7, #27]
 80071f0:	4910      	ldr	r1, [pc, #64]	@ (8007234 <tcp_slowtmr+0x290>)
 80071f2:	5c8a      	ldrb	r2, [r1, r2]
 80071f4:	4093      	lsls	r3, r2
 80071f6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80071fe:	4293      	cmp	r3, r2
 8007200:	dc1a      	bgt.n	8007238 <tcp_slowtmr+0x294>
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	b21a      	sxth	r2, r3
 8007206:	e019      	b.n	800723c <tcp_slowtmr+0x298>
 8007208:	200082dc 	.word	0x200082dc
 800720c:	200082f2 	.word	0x200082f2
 8007210:	200082e8 	.word	0x200082e8
 8007214:	08011214 	.word	0x08011214
 8007218:	08011558 	.word	0x08011558
 800721c:	08011258 	.word	0x08011258
 8007220:	08011584 	.word	0x08011584
 8007224:	080115b0 	.word	0x080115b0
 8007228:	080115e0 	.word	0x080115e0
 800722c:	08011614 	.word	0x08011614
 8007230:	080131ec 	.word	0x080131ec
 8007234:	080131dc 	.word	0x080131dc
 8007238:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800723c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800723e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8007242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007244:	2200      	movs	r2, #0
 8007246:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800724a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800724e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007250:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8007254:	4293      	cmp	r3, r2
 8007256:	bf28      	it	cs
 8007258:	4613      	movcs	r3, r2
 800725a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800725c:	8a7b      	ldrh	r3, [r7, #18]
 800725e:	085b      	lsrs	r3, r3, #1
 8007260:	b29a      	uxth	r2, r3
 8007262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007264:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800726a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800726e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007270:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007272:	005b      	lsls	r3, r3, #1
 8007274:	b29b      	uxth	r3, r3
 8007276:	429a      	cmp	r2, r3
 8007278:	d206      	bcs.n	8007288 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800727a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800727c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800727e:	005b      	lsls	r3, r3, #1
 8007280:	b29a      	uxth	r2, r3
 8007282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007284:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8007288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800728a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800728c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800728e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8007292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007294:	2200      	movs	r2, #0
 8007296:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800729a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800729c:	f004 fcbc 	bl	800bc18 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80072a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a2:	7d1b      	ldrb	r3, [r3, #20]
 80072a4:	2b06      	cmp	r3, #6
 80072a6:	d111      	bne.n	80072cc <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80072a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072aa:	8b5b      	ldrh	r3, [r3, #26]
 80072ac:	f003 0310 	and.w	r3, r3, #16
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00b      	beq.n	80072cc <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80072b4:	4b9d      	ldr	r3, [pc, #628]	@ (800752c <tcp_slowtmr+0x588>)
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ba:	6a1b      	ldr	r3, [r3, #32]
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	2b28      	cmp	r3, #40	@ 0x28
 80072c0:	d904      	bls.n	80072cc <tcp_slowtmr+0x328>
          ++pcb_remove;
 80072c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072c6:	3301      	adds	r3, #1
 80072c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80072cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ce:	7a5b      	ldrb	r3, [r3, #9]
 80072d0:	f003 0308 	and.w	r3, r3, #8
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d04c      	beq.n	8007372 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 80072d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072da:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80072dc:	2b04      	cmp	r3, #4
 80072de:	d003      	beq.n	80072e8 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80072e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80072e4:	2b07      	cmp	r3, #7
 80072e6:	d144      	bne.n	8007372 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80072e8:	4b90      	ldr	r3, [pc, #576]	@ (800752c <tcp_slowtmr+0x588>)
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80072f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072f8:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 80072fc:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8007300:	498b      	ldr	r1, [pc, #556]	@ (8007530 <tcp_slowtmr+0x58c>)
 8007302:	fba1 1303 	umull	r1, r3, r1, r3
 8007306:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007308:	429a      	cmp	r2, r3
 800730a:	d90a      	bls.n	8007322 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800730c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007310:	3301      	adds	r3, #1
 8007312:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8007316:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800731a:	3301      	adds	r3, #1
 800731c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007320:	e027      	b.n	8007372 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007322:	4b82      	ldr	r3, [pc, #520]	@ (800752c <tcp_slowtmr+0x588>)
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800732c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800732e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8007332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007334:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8007338:	4618      	mov	r0, r3
 800733a:	4b7e      	ldr	r3, [pc, #504]	@ (8007534 <tcp_slowtmr+0x590>)
 800733c:	fb00 f303 	mul.w	r3, r0, r3
 8007340:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007342:	497b      	ldr	r1, [pc, #492]	@ (8007530 <tcp_slowtmr+0x58c>)
 8007344:	fba1 1303 	umull	r1, r3, r1, r3
 8007348:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800734a:	429a      	cmp	r2, r3
 800734c:	d911      	bls.n	8007372 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800734e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007350:	f004 ff66 	bl	800c220 <tcp_keepalive>
 8007354:	4603      	mov	r3, r0
 8007356:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800735a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800735e:	2b00      	cmp	r3, #0
 8007360:	d107      	bne.n	8007372 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 8007362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007364:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8007368:	3301      	adds	r3, #1
 800736a:	b2da      	uxtb	r2, r3
 800736c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800736e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8007372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007376:	2b00      	cmp	r3, #0
 8007378:	d011      	beq.n	800739e <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800737a:	4b6c      	ldr	r3, [pc, #432]	@ (800752c <tcp_slowtmr+0x588>)
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	1ad2      	subs	r2, r2, r3
 8007384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007386:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800738a:	4619      	mov	r1, r3
 800738c:	460b      	mov	r3, r1
 800738e:	005b      	lsls	r3, r3, #1
 8007390:	440b      	add	r3, r1
 8007392:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007394:	429a      	cmp	r2, r3
 8007396:	d302      	bcc.n	800739e <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8007398:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800739a:	f000 fe27 	bl	8007fec <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800739e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073a0:	7d1b      	ldrb	r3, [r3, #20]
 80073a2:	2b03      	cmp	r3, #3
 80073a4:	d10b      	bne.n	80073be <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80073a6:	4b61      	ldr	r3, [pc, #388]	@ (800752c <tcp_slowtmr+0x588>)
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	2b28      	cmp	r3, #40	@ 0x28
 80073b2:	d904      	bls.n	80073be <tcp_slowtmr+0x41a>
        ++pcb_remove;
 80073b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073b8:	3301      	adds	r3, #1
 80073ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80073be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c0:	7d1b      	ldrb	r3, [r3, #20]
 80073c2:	2b09      	cmp	r3, #9
 80073c4:	d10b      	bne.n	80073de <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80073c6:	4b59      	ldr	r3, [pc, #356]	@ (800752c <tcp_slowtmr+0x588>)
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	2bf0      	cmp	r3, #240	@ 0xf0
 80073d2:	d904      	bls.n	80073de <tcp_slowtmr+0x43a>
        ++pcb_remove;
 80073d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073d8:	3301      	adds	r3, #1
 80073da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80073de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d060      	beq.n	80074a8 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 80073e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ec:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80073ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80073f0:	f000 fc48 	bl	8007c84 <tcp_pcb_purge>
      if (prev != NULL) {
 80073f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d010      	beq.n	800741c <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80073fa:	4b4f      	ldr	r3, [pc, #316]	@ (8007538 <tcp_slowtmr+0x594>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007400:	429a      	cmp	r2, r3
 8007402:	d106      	bne.n	8007412 <tcp_slowtmr+0x46e>
 8007404:	4b4d      	ldr	r3, [pc, #308]	@ (800753c <tcp_slowtmr+0x598>)
 8007406:	f240 526d 	movw	r2, #1389	@ 0x56d
 800740a:	494d      	ldr	r1, [pc, #308]	@ (8007540 <tcp_slowtmr+0x59c>)
 800740c:	484d      	ldr	r0, [pc, #308]	@ (8007544 <tcp_slowtmr+0x5a0>)
 800740e:	f007 ffa5 	bl	800f35c <iprintf>
        prev->next = pcb->next;
 8007412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007414:	68da      	ldr	r2, [r3, #12]
 8007416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007418:	60da      	str	r2, [r3, #12]
 800741a:	e00f      	b.n	800743c <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800741c:	4b46      	ldr	r3, [pc, #280]	@ (8007538 <tcp_slowtmr+0x594>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007422:	429a      	cmp	r2, r3
 8007424:	d006      	beq.n	8007434 <tcp_slowtmr+0x490>
 8007426:	4b45      	ldr	r3, [pc, #276]	@ (800753c <tcp_slowtmr+0x598>)
 8007428:	f240 5271 	movw	r2, #1393	@ 0x571
 800742c:	4946      	ldr	r1, [pc, #280]	@ (8007548 <tcp_slowtmr+0x5a4>)
 800742e:	4845      	ldr	r0, [pc, #276]	@ (8007544 <tcp_slowtmr+0x5a0>)
 8007430:	f007 ff94 	bl	800f35c <iprintf>
        tcp_active_pcbs = pcb->next;
 8007434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	4a3f      	ldr	r2, [pc, #252]	@ (8007538 <tcp_slowtmr+0x594>)
 800743a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800743c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007440:	2b00      	cmp	r3, #0
 8007442:	d013      	beq.n	800746c <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007446:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8007448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800744a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800744c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800744e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007450:	3304      	adds	r3, #4
 8007452:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007454:	8ad2      	ldrh	r2, [r2, #22]
 8007456:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007458:	8b09      	ldrh	r1, [r1, #24]
 800745a:	9102      	str	r1, [sp, #8]
 800745c:	9201      	str	r2, [sp, #4]
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	462b      	mov	r3, r5
 8007462:	4622      	mov	r2, r4
 8007464:	4601      	mov	r1, r0
 8007466:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007468:	f004 fe26 	bl	800c0b8 <tcp_rst>
      err_arg = pcb->callback_arg;
 800746c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007474:	7d1b      	ldrb	r3, [r3, #20]
 8007476:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800747a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800747c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8007482:	6838      	ldr	r0, [r7, #0]
 8007484:	f7ff f892 	bl	80065ac <tcp_free>
      tcp_active_pcbs_changed = 0;
 8007488:	4b30      	ldr	r3, [pc, #192]	@ (800754c <tcp_slowtmr+0x5a8>)
 800748a:	2200      	movs	r2, #0
 800748c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d004      	beq.n	800749e <tcp_slowtmr+0x4fa>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f06f 010c 	mvn.w	r1, #12
 800749a:	68b8      	ldr	r0, [r7, #8]
 800749c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800749e:	4b2b      	ldr	r3, [pc, #172]	@ (800754c <tcp_slowtmr+0x5a8>)
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d037      	beq.n	8007516 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 80074a6:	e590      	b.n	8006fca <tcp_slowtmr+0x26>
      prev = pcb;
 80074a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80074ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80074b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b4:	7f1b      	ldrb	r3, [r3, #28]
 80074b6:	3301      	adds	r3, #1
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074bc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80074be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c0:	7f1a      	ldrb	r2, [r3, #28]
 80074c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c4:	7f5b      	ldrb	r3, [r3, #29]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d325      	bcc.n	8007516 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 80074ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074cc:	2200      	movs	r2, #0
 80074ce:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80074d0:	4b1e      	ldr	r3, [pc, #120]	@ (800754c <tcp_slowtmr+0x5a8>)
 80074d2:	2200      	movs	r2, #0
 80074d4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80074d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00b      	beq.n	80074f8 <tcp_slowtmr+0x554>
 80074e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074e8:	6912      	ldr	r2, [r2, #16]
 80074ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074ec:	4610      	mov	r0, r2
 80074ee:	4798      	blx	r3
 80074f0:	4603      	mov	r3, r0
 80074f2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80074f6:	e002      	b.n	80074fe <tcp_slowtmr+0x55a>
 80074f8:	2300      	movs	r3, #0
 80074fa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80074fe:	4b13      	ldr	r3, [pc, #76]	@ (800754c <tcp_slowtmr+0x5a8>)
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	f47f ad60 	bne.w	8006fc8 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007508:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800750c:	2b00      	cmp	r3, #0
 800750e:	d102      	bne.n	8007516 <tcp_slowtmr+0x572>
          tcp_output(prev);
 8007510:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007512:	f004 f81d 	bl	800b550 <tcp_output>
  while (pcb != NULL) {
 8007516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007518:	2b00      	cmp	r3, #0
 800751a:	f47f ad5c 	bne.w	8006fd6 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800751e:	2300      	movs	r3, #0
 8007520:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8007522:	4b0b      	ldr	r3, [pc, #44]	@ (8007550 <tcp_slowtmr+0x5ac>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8007528:	e067      	b.n	80075fa <tcp_slowtmr+0x656>
 800752a:	bf00      	nop
 800752c:	200082dc 	.word	0x200082dc
 8007530:	10624dd3 	.word	0x10624dd3
 8007534:	000124f8 	.word	0x000124f8
 8007538:	200082e8 	.word	0x200082e8
 800753c:	08011214 	.word	0x08011214
 8007540:	0801164c 	.word	0x0801164c
 8007544:	08011258 	.word	0x08011258
 8007548:	08011678 	.word	0x08011678
 800754c:	200082f0 	.word	0x200082f0
 8007550:	200082ec 	.word	0x200082ec
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007556:	7d1b      	ldrb	r3, [r3, #20]
 8007558:	2b0a      	cmp	r3, #10
 800755a:	d006      	beq.n	800756a <tcp_slowtmr+0x5c6>
 800755c:	4b2b      	ldr	r3, [pc, #172]	@ (800760c <tcp_slowtmr+0x668>)
 800755e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8007562:	492b      	ldr	r1, [pc, #172]	@ (8007610 <tcp_slowtmr+0x66c>)
 8007564:	482b      	ldr	r0, [pc, #172]	@ (8007614 <tcp_slowtmr+0x670>)
 8007566:	f007 fef9 	bl	800f35c <iprintf>
    pcb_remove = 0;
 800756a:	2300      	movs	r3, #0
 800756c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007570:	4b29      	ldr	r3, [pc, #164]	@ (8007618 <tcp_slowtmr+0x674>)
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007576:	6a1b      	ldr	r3, [r3, #32]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	2bf0      	cmp	r3, #240	@ 0xf0
 800757c:	d904      	bls.n	8007588 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800757e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007582:	3301      	adds	r3, #1
 8007584:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007588:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800758c:	2b00      	cmp	r3, #0
 800758e:	d02f      	beq.n	80075f0 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007590:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007592:	f000 fb77 	bl	8007c84 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007598:	2b00      	cmp	r3, #0
 800759a:	d010      	beq.n	80075be <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800759c:	4b1f      	ldr	r3, [pc, #124]	@ (800761c <tcp_slowtmr+0x678>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d106      	bne.n	80075b4 <tcp_slowtmr+0x610>
 80075a6:	4b19      	ldr	r3, [pc, #100]	@ (800760c <tcp_slowtmr+0x668>)
 80075a8:	f240 52af 	movw	r2, #1455	@ 0x5af
 80075ac:	491c      	ldr	r1, [pc, #112]	@ (8007620 <tcp_slowtmr+0x67c>)
 80075ae:	4819      	ldr	r0, [pc, #100]	@ (8007614 <tcp_slowtmr+0x670>)
 80075b0:	f007 fed4 	bl	800f35c <iprintf>
        prev->next = pcb->next;
 80075b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075b6:	68da      	ldr	r2, [r3, #12]
 80075b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ba:	60da      	str	r2, [r3, #12]
 80075bc:	e00f      	b.n	80075de <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80075be:	4b17      	ldr	r3, [pc, #92]	@ (800761c <tcp_slowtmr+0x678>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d006      	beq.n	80075d6 <tcp_slowtmr+0x632>
 80075c8:	4b10      	ldr	r3, [pc, #64]	@ (800760c <tcp_slowtmr+0x668>)
 80075ca:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80075ce:	4915      	ldr	r1, [pc, #84]	@ (8007624 <tcp_slowtmr+0x680>)
 80075d0:	4810      	ldr	r0, [pc, #64]	@ (8007614 <tcp_slowtmr+0x670>)
 80075d2:	f007 fec3 	bl	800f35c <iprintf>
        tcp_tw_pcbs = pcb->next;
 80075d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	4a10      	ldr	r2, [pc, #64]	@ (800761c <tcp_slowtmr+0x678>)
 80075dc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80075de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075e0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80075e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80075e8:	69f8      	ldr	r0, [r7, #28]
 80075ea:	f7fe ffdf 	bl	80065ac <tcp_free>
 80075ee:	e004      	b.n	80075fa <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80075f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80075f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80075fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1a9      	bne.n	8007554 <tcp_slowtmr+0x5b0>
    }
  }
}
 8007600:	bf00      	nop
 8007602:	bf00      	nop
 8007604:	3730      	adds	r7, #48	@ 0x30
 8007606:	46bd      	mov	sp, r7
 8007608:	bdb0      	pop	{r4, r5, r7, pc}
 800760a:	bf00      	nop
 800760c:	08011214 	.word	0x08011214
 8007610:	080116a4 	.word	0x080116a4
 8007614:	08011258 	.word	0x08011258
 8007618:	200082dc 	.word	0x200082dc
 800761c:	200082ec 	.word	0x200082ec
 8007620:	080116d4 	.word	0x080116d4
 8007624:	080116fc 	.word	0x080116fc

08007628 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800762e:	4b2d      	ldr	r3, [pc, #180]	@ (80076e4 <tcp_fasttmr+0xbc>)
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	3301      	adds	r3, #1
 8007634:	b2da      	uxtb	r2, r3
 8007636:	4b2b      	ldr	r3, [pc, #172]	@ (80076e4 <tcp_fasttmr+0xbc>)
 8007638:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800763a:	4b2b      	ldr	r3, [pc, #172]	@ (80076e8 <tcp_fasttmr+0xc0>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007640:	e048      	b.n	80076d4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	7f9a      	ldrb	r2, [r3, #30]
 8007646:	4b27      	ldr	r3, [pc, #156]	@ (80076e4 <tcp_fasttmr+0xbc>)
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	429a      	cmp	r2, r3
 800764c:	d03f      	beq.n	80076ce <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800764e:	4b25      	ldr	r3, [pc, #148]	@ (80076e4 <tcp_fasttmr+0xbc>)
 8007650:	781a      	ldrb	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	8b5b      	ldrh	r3, [r3, #26]
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	d010      	beq.n	8007684 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	8b5b      	ldrh	r3, [r3, #26]
 8007666:	f043 0302 	orr.w	r3, r3, #2
 800766a:	b29a      	uxth	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f003 ff6d 	bl	800b550 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	8b5b      	ldrh	r3, [r3, #26]
 800767a:	f023 0303 	bic.w	r3, r3, #3
 800767e:	b29a      	uxth	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	8b5b      	ldrh	r3, [r3, #26]
 8007688:	f003 0308 	and.w	r3, r3, #8
 800768c:	2b00      	cmp	r3, #0
 800768e:	d009      	beq.n	80076a4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	8b5b      	ldrh	r3, [r3, #26]
 8007694:	f023 0308 	bic.w	r3, r3, #8
 8007698:	b29a      	uxth	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f7ff f918 	bl	80068d4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00a      	beq.n	80076c8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80076b2:	4b0e      	ldr	r3, [pc, #56]	@ (80076ec <tcp_fasttmr+0xc4>)
 80076b4:	2200      	movs	r2, #0
 80076b6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f819 	bl	80076f0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80076be:	4b0b      	ldr	r3, [pc, #44]	@ (80076ec <tcp_fasttmr+0xc4>)
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d000      	beq.n	80076c8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80076c6:	e7b8      	b.n	800763a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	607b      	str	r3, [r7, #4]
 80076cc:	e002      	b.n	80076d4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1b3      	bne.n	8007642 <tcp_fasttmr+0x1a>
    }
  }
}
 80076da:	bf00      	nop
 80076dc:	bf00      	nop
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	200082f2 	.word	0x200082f2
 80076e8:	200082e8 	.word	0x200082e8
 80076ec:	200082f0 	.word	0x200082f0

080076f0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80076f0:	b590      	push	{r4, r7, lr}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d109      	bne.n	8007712 <tcp_process_refused_data+0x22>
 80076fe:	4b37      	ldr	r3, [pc, #220]	@ (80077dc <tcp_process_refused_data+0xec>)
 8007700:	f240 6209 	movw	r2, #1545	@ 0x609
 8007704:	4936      	ldr	r1, [pc, #216]	@ (80077e0 <tcp_process_refused_data+0xf0>)
 8007706:	4837      	ldr	r0, [pc, #220]	@ (80077e4 <tcp_process_refused_data+0xf4>)
 8007708:	f007 fe28 	bl	800f35c <iprintf>
 800770c:	f06f 030f 	mvn.w	r3, #15
 8007710:	e060      	b.n	80077d4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007716:	7b5b      	ldrb	r3, [r3, #13]
 8007718:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800771e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00b      	beq.n	8007748 <tcp_process_refused_data+0x58>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6918      	ldr	r0, [r3, #16]
 800773a:	2300      	movs	r3, #0
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	6879      	ldr	r1, [r7, #4]
 8007740:	47a0      	blx	r4
 8007742:	4603      	mov	r3, r0
 8007744:	73fb      	strb	r3, [r7, #15]
 8007746:	e007      	b.n	8007758 <tcp_process_refused_data+0x68>
 8007748:	2300      	movs	r3, #0
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	6879      	ldr	r1, [r7, #4]
 800774e:	2000      	movs	r0, #0
 8007750:	f000 f8a4 	bl	800789c <tcp_recv_null>
 8007754:	4603      	mov	r3, r0
 8007756:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d12a      	bne.n	80077b6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007760:	7bbb      	ldrb	r3, [r7, #14]
 8007762:	f003 0320 	and.w	r3, r3, #32
 8007766:	2b00      	cmp	r3, #0
 8007768:	d033      	beq.n	80077d2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800776e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8007772:	d005      	beq.n	8007780 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007778:	3301      	adds	r3, #1
 800777a:	b29a      	uxth	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00b      	beq.n	80077a2 <tcp_process_refused_data+0xb2>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6918      	ldr	r0, [r3, #16]
 8007794:	2300      	movs	r3, #0
 8007796:	2200      	movs	r2, #0
 8007798:	6879      	ldr	r1, [r7, #4]
 800779a:	47a0      	blx	r4
 800779c:	4603      	mov	r3, r0
 800779e:	73fb      	strb	r3, [r7, #15]
 80077a0:	e001      	b.n	80077a6 <tcp_process_refused_data+0xb6>
 80077a2:	2300      	movs	r3, #0
 80077a4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80077a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077aa:	f113 0f0d 	cmn.w	r3, #13
 80077ae:	d110      	bne.n	80077d2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80077b0:	f06f 030c 	mvn.w	r3, #12
 80077b4:	e00e      	b.n	80077d4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80077b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077ba:	f113 0f0d 	cmn.w	r3, #13
 80077be:	d102      	bne.n	80077c6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80077c0:	f06f 030c 	mvn.w	r3, #12
 80077c4:	e006      	b.n	80077d4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80077cc:	f06f 0304 	mvn.w	r3, #4
 80077d0:	e000      	b.n	80077d4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3714      	adds	r7, #20
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd90      	pop	{r4, r7, pc}
 80077dc:	08011214 	.word	0x08011214
 80077e0:	08011724 	.word	0x08011724
 80077e4:	08011258 	.word	0x08011258

080077e8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80077f0:	e007      	b.n	8007802 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f80a 	bl	8007812 <tcp_seg_free>
    seg = next;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1f4      	bne.n	80077f2 <tcp_segs_free+0xa>
  }
}
 8007808:	bf00      	nop
 800780a:	bf00      	nop
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b082      	sub	sp, #8
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00c      	beq.n	800783a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d004      	beq.n	8007832 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	4618      	mov	r0, r3
 800782e:	f7fe fc1d 	bl	800606c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007832:	6879      	ldr	r1, [r7, #4]
 8007834:	2003      	movs	r0, #3
 8007836:	f7fd fda3 	bl	8005380 <memp_free>
  }
}
 800783a:	bf00      	nop
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
	...

08007844 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d106      	bne.n	8007860 <tcp_seg_copy+0x1c>
 8007852:	4b0f      	ldr	r3, [pc, #60]	@ (8007890 <tcp_seg_copy+0x4c>)
 8007854:	f240 6282 	movw	r2, #1666	@ 0x682
 8007858:	490e      	ldr	r1, [pc, #56]	@ (8007894 <tcp_seg_copy+0x50>)
 800785a:	480f      	ldr	r0, [pc, #60]	@ (8007898 <tcp_seg_copy+0x54>)
 800785c:	f007 fd7e 	bl	800f35c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007860:	2003      	movs	r0, #3
 8007862:	f7fd fd1d 	bl	80052a0 <memp_malloc>
 8007866:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d101      	bne.n	8007872 <tcp_seg_copy+0x2e>
    return NULL;
 800786e:	2300      	movs	r3, #0
 8007870:	e00a      	b.n	8007888 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007872:	2210      	movs	r2, #16
 8007874:	6879      	ldr	r1, [r7, #4]
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f007 fddb 	bl	800f432 <memcpy>
  pbuf_ref(cseg->p);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	4618      	mov	r0, r3
 8007882:	f7fe fc93 	bl	80061ac <pbuf_ref>
  return cseg;
 8007886:	68fb      	ldr	r3, [r7, #12]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	08011214 	.word	0x08011214
 8007894:	08011768 	.word	0x08011768
 8007898:	08011258 	.word	0x08011258

0800789c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
 80078a8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d109      	bne.n	80078c4 <tcp_recv_null+0x28>
 80078b0:	4b12      	ldr	r3, [pc, #72]	@ (80078fc <tcp_recv_null+0x60>)
 80078b2:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80078b6:	4912      	ldr	r1, [pc, #72]	@ (8007900 <tcp_recv_null+0x64>)
 80078b8:	4812      	ldr	r0, [pc, #72]	@ (8007904 <tcp_recv_null+0x68>)
 80078ba:	f007 fd4f 	bl	800f35c <iprintf>
 80078be:	f06f 030f 	mvn.w	r3, #15
 80078c2:	e016      	b.n	80078f2 <tcp_recv_null+0x56>

  if (p != NULL) {
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d009      	beq.n	80078de <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	891b      	ldrh	r3, [r3, #8]
 80078ce:	4619      	mov	r1, r3
 80078d0:	68b8      	ldr	r0, [r7, #8]
 80078d2:	f7ff f9b9 	bl	8006c48 <tcp_recved>
    pbuf_free(p);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7fe fbc8 	bl	800606c <pbuf_free>
 80078dc:	e008      	b.n	80078f0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80078de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d104      	bne.n	80078f0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80078e6:	68b8      	ldr	r0, [r7, #8]
 80078e8:	f7ff f85e 	bl	80069a8 <tcp_close>
 80078ec:	4603      	mov	r3, r0
 80078ee:	e000      	b.n	80078f2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	08011214 	.word	0x08011214
 8007900:	08011784 	.word	0x08011784
 8007904:	08011258 	.word	0x08011258

08007908 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b086      	sub	sp, #24
 800790c:	af00      	add	r7, sp, #0
 800790e:	4603      	mov	r3, r0
 8007910:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007916:	2b00      	cmp	r3, #0
 8007918:	db01      	blt.n	800791e <tcp_kill_prio+0x16>
 800791a:	79fb      	ldrb	r3, [r7, #7]
 800791c:	e000      	b.n	8007920 <tcp_kill_prio+0x18>
 800791e:	237f      	movs	r3, #127	@ 0x7f
 8007920:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007922:	7afb      	ldrb	r3, [r7, #11]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d034      	beq.n	8007992 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007928:	7afb      	ldrb	r3, [r7, #11]
 800792a:	3b01      	subs	r3, #1
 800792c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800792e:	2300      	movs	r3, #0
 8007930:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007932:	2300      	movs	r3, #0
 8007934:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007936:	4b19      	ldr	r3, [pc, #100]	@ (800799c <tcp_kill_prio+0x94>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	617b      	str	r3, [r7, #20]
 800793c:	e01f      	b.n	800797e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	7d5b      	ldrb	r3, [r3, #21]
 8007942:	7afa      	ldrb	r2, [r7, #11]
 8007944:	429a      	cmp	r2, r3
 8007946:	d80c      	bhi.n	8007962 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800794c:	7afa      	ldrb	r2, [r7, #11]
 800794e:	429a      	cmp	r2, r3
 8007950:	d112      	bne.n	8007978 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007952:	4b13      	ldr	r3, [pc, #76]	@ (80079a0 <tcp_kill_prio+0x98>)
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	429a      	cmp	r2, r3
 8007960:	d80a      	bhi.n	8007978 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007962:	4b0f      	ldr	r3, [pc, #60]	@ (80079a0 <tcp_kill_prio+0x98>)
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	7d5b      	ldrb	r3, [r3, #21]
 8007976:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	617b      	str	r3, [r7, #20]
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1dc      	bne.n	800793e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d004      	beq.n	8007994 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800798a:	6938      	ldr	r0, [r7, #16]
 800798c:	f7ff f8f6 	bl	8006b7c <tcp_abort>
 8007990:	e000      	b.n	8007994 <tcp_kill_prio+0x8c>
    return;
 8007992:	bf00      	nop
  }
}
 8007994:	3718      	adds	r7, #24
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	200082e8 	.word	0x200082e8
 80079a0:	200082dc 	.word	0x200082dc

080079a4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	4603      	mov	r3, r0
 80079ac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80079ae:	79fb      	ldrb	r3, [r7, #7]
 80079b0:	2b08      	cmp	r3, #8
 80079b2:	d009      	beq.n	80079c8 <tcp_kill_state+0x24>
 80079b4:	79fb      	ldrb	r3, [r7, #7]
 80079b6:	2b09      	cmp	r3, #9
 80079b8:	d006      	beq.n	80079c8 <tcp_kill_state+0x24>
 80079ba:	4b1a      	ldr	r3, [pc, #104]	@ (8007a24 <tcp_kill_state+0x80>)
 80079bc:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80079c0:	4919      	ldr	r1, [pc, #100]	@ (8007a28 <tcp_kill_state+0x84>)
 80079c2:	481a      	ldr	r0, [pc, #104]	@ (8007a2c <tcp_kill_state+0x88>)
 80079c4:	f007 fcca 	bl	800f35c <iprintf>

  inactivity = 0;
 80079c8:	2300      	movs	r3, #0
 80079ca:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80079cc:	2300      	movs	r3, #0
 80079ce:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80079d0:	4b17      	ldr	r3, [pc, #92]	@ (8007a30 <tcp_kill_state+0x8c>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	617b      	str	r3, [r7, #20]
 80079d6:	e017      	b.n	8007a08 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	7d1b      	ldrb	r3, [r3, #20]
 80079dc:	79fa      	ldrb	r2, [r7, #7]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d10f      	bne.n	8007a02 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80079e2:	4b14      	ldr	r3, [pc, #80]	@ (8007a34 <tcp_kill_state+0x90>)
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	6a1b      	ldr	r3, [r3, #32]
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d807      	bhi.n	8007a02 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80079f2:	4b10      	ldr	r3, [pc, #64]	@ (8007a34 <tcp_kill_state+0x90>)
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	6a1b      	ldr	r3, [r3, #32]
 80079fa:	1ad3      	subs	r3, r2, r3
 80079fc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	617b      	str	r3, [r7, #20]
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1e4      	bne.n	80079d8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d003      	beq.n	8007a1c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007a14:	2100      	movs	r1, #0
 8007a16:	6938      	ldr	r0, [r7, #16]
 8007a18:	f7fe fff2 	bl	8006a00 <tcp_abandon>
  }
}
 8007a1c:	bf00      	nop
 8007a1e:	3718      	adds	r7, #24
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	08011214 	.word	0x08011214
 8007a28:	080117a0 	.word	0x080117a0
 8007a2c:	08011258 	.word	0x08011258
 8007a30:	200082e8 	.word	0x200082e8
 8007a34:	200082dc 	.word	0x200082dc

08007a38 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007a42:	2300      	movs	r3, #0
 8007a44:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a46:	4b12      	ldr	r3, [pc, #72]	@ (8007a90 <tcp_kill_timewait+0x58>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	60fb      	str	r3, [r7, #12]
 8007a4c:	e012      	b.n	8007a74 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007a4e:	4b11      	ldr	r3, [pc, #68]	@ (8007a94 <tcp_kill_timewait+0x5c>)
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d807      	bhi.n	8007a6e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a94 <tcp_kill_timewait+0x5c>)
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6a1b      	ldr	r3, [r3, #32]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	60fb      	str	r3, [r7, #12]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1e9      	bne.n	8007a4e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d002      	beq.n	8007a86 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007a80:	68b8      	ldr	r0, [r7, #8]
 8007a82:	f7ff f87b 	bl	8006b7c <tcp_abort>
  }
}
 8007a86:	bf00      	nop
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	200082ec 	.word	0x200082ec
 8007a94:	200082dc 	.word	0x200082dc

08007a98 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007a9e:	4b10      	ldr	r3, [pc, #64]	@ (8007ae0 <tcp_handle_closepend+0x48>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007aa4:	e014      	b.n	8007ad0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	8b5b      	ldrh	r3, [r3, #26]
 8007ab0:	f003 0308 	and.w	r3, r3, #8
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d009      	beq.n	8007acc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	8b5b      	ldrh	r3, [r3, #26]
 8007abc:	f023 0308 	bic.w	r3, r3, #8
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7fe ff04 	bl	80068d4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1e7      	bne.n	8007aa6 <tcp_handle_closepend+0xe>
  }
}
 8007ad6:	bf00      	nop
 8007ad8:	bf00      	nop
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	200082e8 	.word	0x200082e8

08007ae4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	4603      	mov	r3, r0
 8007aec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007aee:	2001      	movs	r0, #1
 8007af0:	f7fd fbd6 	bl	80052a0 <memp_malloc>
 8007af4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d126      	bne.n	8007b4a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007afc:	f7ff ffcc 	bl	8007a98 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007b00:	f7ff ff9a 	bl	8007a38 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b04:	2001      	movs	r0, #1
 8007b06:	f7fd fbcb 	bl	80052a0 <memp_malloc>
 8007b0a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d11b      	bne.n	8007b4a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007b12:	2009      	movs	r0, #9
 8007b14:	f7ff ff46 	bl	80079a4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b18:	2001      	movs	r0, #1
 8007b1a:	f7fd fbc1 	bl	80052a0 <memp_malloc>
 8007b1e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d111      	bne.n	8007b4a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007b26:	2008      	movs	r0, #8
 8007b28:	f7ff ff3c 	bl	80079a4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b2c:	2001      	movs	r0, #1
 8007b2e:	f7fd fbb7 	bl	80052a0 <memp_malloc>
 8007b32:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d107      	bne.n	8007b4a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007b3a:	79fb      	ldrb	r3, [r7, #7]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7ff fee3 	bl	8007908 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b42:	2001      	movs	r0, #1
 8007b44:	f7fd fbac 	bl	80052a0 <memp_malloc>
 8007b48:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d03f      	beq.n	8007bd0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007b50:	229c      	movs	r2, #156	@ 0x9c
 8007b52:	2100      	movs	r1, #0
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	f007 fc3d 	bl	800f3d4 <memset>
    pcb->prio = prio;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	79fa      	ldrb	r2, [r7, #7]
 8007b5e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8007b66:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8007b70:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	22ff      	movs	r2, #255	@ 0xff
 8007b7e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8007b86:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2206      	movs	r2, #6
 8007b8c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2206      	movs	r2, #6
 8007b94:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007b9c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8007ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8007bdc <tcp_alloc+0xf8>)
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007bae:	4b0c      	ldr	r3, [pc, #48]	@ (8007be0 <tcp_alloc+0xfc>)
 8007bb0:	781a      	ldrb	r2, [r3, #0]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8007bbc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4a08      	ldr	r2, [pc, #32]	@ (8007be4 <tcp_alloc+0x100>)
 8007bc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	4a07      	ldr	r2, [pc, #28]	@ (8007be8 <tcp_alloc+0x104>)
 8007bcc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	200082dc 	.word	0x200082dc
 8007be0:	200082f2 	.word	0x200082f2
 8007be4:	0800789d 	.word	0x0800789d
 8007be8:	006ddd00 	.word	0x006ddd00

08007bec <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8007bf0:	2040      	movs	r0, #64	@ 0x40
 8007bf2:	f7ff ff77 	bl	8007ae4 <tcp_alloc>
 8007bf6:	4603      	mov	r3, r0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00e      	beq.n	8007c2a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	7d1b      	ldrb	r3, [r3, #20]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d106      	bne.n	8007c22 <tcp_sent+0x26>
 8007c14:	4b07      	ldr	r3, [pc, #28]	@ (8007c34 <tcp_sent+0x38>)
 8007c16:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8007c1a:	4907      	ldr	r1, [pc, #28]	@ (8007c38 <tcp_sent+0x3c>)
 8007c1c:	4807      	ldr	r0, [pc, #28]	@ (8007c3c <tcp_sent+0x40>)
 8007c1e:	f007 fb9d 	bl	800f35c <iprintf>
    pcb->sent = sent;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	683a      	ldr	r2, [r7, #0]
 8007c26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8007c2a:	bf00      	nop
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	08011214 	.word	0x08011214
 8007c38:	080117d8 	.word	0x080117d8
 8007c3c:	08011258 	.word	0x08011258

08007c40 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00e      	beq.n	8007c6e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	7d1b      	ldrb	r3, [r3, #20]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d106      	bne.n	8007c66 <tcp_err+0x26>
 8007c58:	4b07      	ldr	r3, [pc, #28]	@ (8007c78 <tcp_err+0x38>)
 8007c5a:	f640 020d 	movw	r2, #2061	@ 0x80d
 8007c5e:	4907      	ldr	r1, [pc, #28]	@ (8007c7c <tcp_err+0x3c>)
 8007c60:	4807      	ldr	r0, [pc, #28]	@ (8007c80 <tcp_err+0x40>)
 8007c62:	f007 fb7b 	bl	800f35c <iprintf>
    pcb->errf = err;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	683a      	ldr	r2, [r7, #0]
 8007c6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8007c6e:	bf00      	nop
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	08011214 	.word	0x08011214
 8007c7c:	08011800 	.word	0x08011800
 8007c80:	08011258 	.word	0x08011258

08007c84 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d107      	bne.n	8007ca2 <tcp_pcb_purge+0x1e>
 8007c92:	4b21      	ldr	r3, [pc, #132]	@ (8007d18 <tcp_pcb_purge+0x94>)
 8007c94:	f640 0251 	movw	r2, #2129	@ 0x851
 8007c98:	4920      	ldr	r1, [pc, #128]	@ (8007d1c <tcp_pcb_purge+0x98>)
 8007c9a:	4821      	ldr	r0, [pc, #132]	@ (8007d20 <tcp_pcb_purge+0x9c>)
 8007c9c:	f007 fb5e 	bl	800f35c <iprintf>
 8007ca0:	e037      	b.n	8007d12 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	7d1b      	ldrb	r3, [r3, #20]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d033      	beq.n	8007d12 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007cae:	2b0a      	cmp	r3, #10
 8007cb0:	d02f      	beq.n	8007d12 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d02b      	beq.n	8007d12 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d007      	beq.n	8007cd2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fe f9d0 	bl	800606c <pbuf_free>
      pcb->refused_data = NULL;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d002      	beq.n	8007ce0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f986 	bl	8007fec <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007ce6:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7ff fd7b 	bl	80077e8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7ff fd76 	bl	80077e8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	08011214 	.word	0x08011214
 8007d1c:	08011860 	.word	0x08011860
 8007d20:	08011258 	.word	0x08011258

08007d24 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d106      	bne.n	8007d42 <tcp_pcb_remove+0x1e>
 8007d34:	4b3e      	ldr	r3, [pc, #248]	@ (8007e30 <tcp_pcb_remove+0x10c>)
 8007d36:	f640 0283 	movw	r2, #2179	@ 0x883
 8007d3a:	493e      	ldr	r1, [pc, #248]	@ (8007e34 <tcp_pcb_remove+0x110>)
 8007d3c:	483e      	ldr	r0, [pc, #248]	@ (8007e38 <tcp_pcb_remove+0x114>)
 8007d3e:	f007 fb0d 	bl	800f35c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d106      	bne.n	8007d56 <tcp_pcb_remove+0x32>
 8007d48:	4b39      	ldr	r3, [pc, #228]	@ (8007e30 <tcp_pcb_remove+0x10c>)
 8007d4a:	f640 0284 	movw	r2, #2180	@ 0x884
 8007d4e:	493b      	ldr	r1, [pc, #236]	@ (8007e3c <tcp_pcb_remove+0x118>)
 8007d50:	4839      	ldr	r0, [pc, #228]	@ (8007e38 <tcp_pcb_remove+0x114>)
 8007d52:	f007 fb03 	bl	800f35c <iprintf>

  TCP_RMV(pcblist, pcb);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	683a      	ldr	r2, [r7, #0]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d105      	bne.n	8007d6c <tcp_pcb_remove+0x48>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68da      	ldr	r2, [r3, #12]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	601a      	str	r2, [r3, #0]
 8007d6a:	e013      	b.n	8007d94 <tcp_pcb_remove+0x70>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	60fb      	str	r3, [r7, #12]
 8007d72:	e00c      	b.n	8007d8e <tcp_pcb_remove+0x6a>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	683a      	ldr	r2, [r7, #0]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d104      	bne.n	8007d88 <tcp_pcb_remove+0x64>
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	68da      	ldr	r2, [r3, #12]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	60da      	str	r2, [r3, #12]
 8007d86:	e005      	b.n	8007d94 <tcp_pcb_remove+0x70>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	60fb      	str	r3, [r7, #12]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1ef      	bne.n	8007d74 <tcp_pcb_remove+0x50>
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	2200      	movs	r2, #0
 8007d98:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007d9a:	6838      	ldr	r0, [r7, #0]
 8007d9c:	f7ff ff72 	bl	8007c84 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	7d1b      	ldrb	r3, [r3, #20]
 8007da4:	2b0a      	cmp	r3, #10
 8007da6:	d013      	beq.n	8007dd0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d00f      	beq.n	8007dd0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	8b5b      	ldrh	r3, [r3, #26]
 8007db4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d009      	beq.n	8007dd0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	8b5b      	ldrh	r3, [r3, #26]
 8007dc0:	f043 0302 	orr.w	r3, r3, #2
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007dca:	6838      	ldr	r0, [r7, #0]
 8007dcc:	f003 fbc0 	bl	800b550 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	7d1b      	ldrb	r3, [r3, #20]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d020      	beq.n	8007e1a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d006      	beq.n	8007dee <tcp_pcb_remove+0xca>
 8007de0:	4b13      	ldr	r3, [pc, #76]	@ (8007e30 <tcp_pcb_remove+0x10c>)
 8007de2:	f640 0293 	movw	r2, #2195	@ 0x893
 8007de6:	4916      	ldr	r1, [pc, #88]	@ (8007e40 <tcp_pcb_remove+0x11c>)
 8007de8:	4813      	ldr	r0, [pc, #76]	@ (8007e38 <tcp_pcb_remove+0x114>)
 8007dea:	f007 fab7 	bl	800f35c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d006      	beq.n	8007e04 <tcp_pcb_remove+0xe0>
 8007df6:	4b0e      	ldr	r3, [pc, #56]	@ (8007e30 <tcp_pcb_remove+0x10c>)
 8007df8:	f640 0294 	movw	r2, #2196	@ 0x894
 8007dfc:	4911      	ldr	r1, [pc, #68]	@ (8007e44 <tcp_pcb_remove+0x120>)
 8007dfe:	480e      	ldr	r0, [pc, #56]	@ (8007e38 <tcp_pcb_remove+0x114>)
 8007e00:	f007 faac 	bl	800f35c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d006      	beq.n	8007e1a <tcp_pcb_remove+0xf6>
 8007e0c:	4b08      	ldr	r3, [pc, #32]	@ (8007e30 <tcp_pcb_remove+0x10c>)
 8007e0e:	f640 0296 	movw	r2, #2198	@ 0x896
 8007e12:	490d      	ldr	r1, [pc, #52]	@ (8007e48 <tcp_pcb_remove+0x124>)
 8007e14:	4808      	ldr	r0, [pc, #32]	@ (8007e38 <tcp_pcb_remove+0x114>)
 8007e16:	f007 faa1 	bl	800f35c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	2200      	movs	r2, #0
 8007e24:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007e26:	bf00      	nop
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	08011214 	.word	0x08011214
 8007e34:	0801187c 	.word	0x0801187c
 8007e38:	08011258 	.word	0x08011258
 8007e3c:	08011898 	.word	0x08011898
 8007e40:	080118b8 	.word	0x080118b8
 8007e44:	080118d0 	.word	0x080118d0
 8007e48:	080118ec 	.word	0x080118ec

08007e4c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d106      	bne.n	8007e68 <tcp_next_iss+0x1c>
 8007e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8007e84 <tcp_next_iss+0x38>)
 8007e5c:	f640 02af 	movw	r2, #2223	@ 0x8af
 8007e60:	4909      	ldr	r1, [pc, #36]	@ (8007e88 <tcp_next_iss+0x3c>)
 8007e62:	480a      	ldr	r0, [pc, #40]	@ (8007e8c <tcp_next_iss+0x40>)
 8007e64:	f007 fa7a 	bl	800f35c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007e68:	4b09      	ldr	r3, [pc, #36]	@ (8007e90 <tcp_next_iss+0x44>)
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	4b09      	ldr	r3, [pc, #36]	@ (8007e94 <tcp_next_iss+0x48>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4413      	add	r3, r2
 8007e72:	4a07      	ldr	r2, [pc, #28]	@ (8007e90 <tcp_next_iss+0x44>)
 8007e74:	6013      	str	r3, [r2, #0]
  return iss;
 8007e76:	4b06      	ldr	r3, [pc, #24]	@ (8007e90 <tcp_next_iss+0x44>)
 8007e78:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	08011214 	.word	0x08011214
 8007e88:	08011904 	.word	0x08011904
 8007e8c:	08011258 	.word	0x08011258
 8007e90:	20000024 	.word	0x20000024
 8007e94:	200082dc 	.word	0x200082dc

08007e98 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b086      	sub	sp, #24
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
 8007ea4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d106      	bne.n	8007eba <tcp_eff_send_mss_netif+0x22>
 8007eac:	4b14      	ldr	r3, [pc, #80]	@ (8007f00 <tcp_eff_send_mss_netif+0x68>)
 8007eae:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8007eb2:	4914      	ldr	r1, [pc, #80]	@ (8007f04 <tcp_eff_send_mss_netif+0x6c>)
 8007eb4:	4814      	ldr	r0, [pc, #80]	@ (8007f08 <tcp_eff_send_mss_netif+0x70>)
 8007eb6:	f007 fa51 	bl	800f35c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d101      	bne.n	8007ec4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007ec0:	89fb      	ldrh	r3, [r7, #14]
 8007ec2:	e019      	b.n	8007ef8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007ec8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007eca:	8afb      	ldrh	r3, [r7, #22]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d012      	beq.n	8007ef6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007ed0:	2328      	movs	r3, #40	@ 0x28
 8007ed2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007ed4:	8afa      	ldrh	r2, [r7, #22]
 8007ed6:	8abb      	ldrh	r3, [r7, #20]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d904      	bls.n	8007ee6 <tcp_eff_send_mss_netif+0x4e>
 8007edc:	8afa      	ldrh	r2, [r7, #22]
 8007ede:	8abb      	ldrh	r3, [r7, #20]
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	e000      	b.n	8007ee8 <tcp_eff_send_mss_netif+0x50>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007eea:	8a7a      	ldrh	r2, [r7, #18]
 8007eec:	89fb      	ldrh	r3, [r7, #14]
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	bf28      	it	cs
 8007ef2:	4613      	movcs	r3, r2
 8007ef4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8007ef6:	89fb      	ldrh	r3, [r7, #14]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3718      	adds	r7, #24
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	08011214 	.word	0x08011214
 8007f04:	08011920 	.word	0x08011920
 8007f08:	08011258 	.word	0x08011258

08007f0c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d119      	bne.n	8007f54 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007f20:	4b10      	ldr	r3, [pc, #64]	@ (8007f64 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007f22:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8007f26:	4910      	ldr	r1, [pc, #64]	@ (8007f68 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007f28:	4810      	ldr	r0, [pc, #64]	@ (8007f6c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007f2a:	f007 fa17 	bl	800f35c <iprintf>

  while (pcb != NULL) {
 8007f2e:	e011      	b.n	8007f54 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d108      	bne.n	8007f4e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f7fe fe1a 	bl	8006b7c <tcp_abort>
      pcb = next;
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	60fb      	str	r3, [r7, #12]
 8007f4c:	e002      	b.n	8007f54 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d1ea      	bne.n	8007f30 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007f5a:	bf00      	nop
 8007f5c:	bf00      	nop
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	08011214 	.word	0x08011214
 8007f68:	08011948 	.word	0x08011948
 8007f6c:	08011258 	.word	0x08011258

08007f70 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d02a      	beq.n	8007fd6 <tcp_netif_ip_addr_changed+0x66>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d026      	beq.n	8007fd6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007f88:	4b15      	ldr	r3, [pc, #84]	@ (8007fe0 <tcp_netif_ip_addr_changed+0x70>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7ff ffbc 	bl	8007f0c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007f94:	4b13      	ldr	r3, [pc, #76]	@ (8007fe4 <tcp_netif_ip_addr_changed+0x74>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4619      	mov	r1, r3
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f7ff ffb6 	bl	8007f0c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d017      	beq.n	8007fd6 <tcp_netif_ip_addr_changed+0x66>
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d013      	beq.n	8007fd6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007fae:	4b0e      	ldr	r3, [pc, #56]	@ (8007fe8 <tcp_netif_ip_addr_changed+0x78>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	60fb      	str	r3, [r7, #12]
 8007fb4:	e00c      	b.n	8007fd0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d103      	bne.n	8007fca <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	60fb      	str	r3, [r7, #12]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1ef      	bne.n	8007fb6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007fd6:	bf00      	nop
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	200082e8 	.word	0x200082e8
 8007fe4:	200082e0 	.word	0x200082e0
 8007fe8:	200082e4 	.word	0x200082e4

08007fec <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d007      	beq.n	800800c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008000:	4618      	mov	r0, r3
 8008002:	f7ff fbf1 	bl	80077e8 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800800c:	bf00      	nop
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008014:	b590      	push	{r4, r7, lr}
 8008016:	b08d      	sub	sp, #52	@ 0x34
 8008018:	af04      	add	r7, sp, #16
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d105      	bne.n	8008030 <tcp_input+0x1c>
 8008024:	4b9b      	ldr	r3, [pc, #620]	@ (8008294 <tcp_input+0x280>)
 8008026:	2283      	movs	r2, #131	@ 0x83
 8008028:	499b      	ldr	r1, [pc, #620]	@ (8008298 <tcp_input+0x284>)
 800802a:	489c      	ldr	r0, [pc, #624]	@ (800829c <tcp_input+0x288>)
 800802c:	f007 f996 	bl	800f35c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	4a9a      	ldr	r2, [pc, #616]	@ (80082a0 <tcp_input+0x28c>)
 8008036:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	895b      	ldrh	r3, [r3, #10]
 800803c:	2b13      	cmp	r3, #19
 800803e:	f240 83d1 	bls.w	80087e4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008042:	4b98      	ldr	r3, [pc, #608]	@ (80082a4 <tcp_input+0x290>)
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	4a97      	ldr	r2, [pc, #604]	@ (80082a4 <tcp_input+0x290>)
 8008048:	6812      	ldr	r2, [r2, #0]
 800804a:	4611      	mov	r1, r2
 800804c:	4618      	mov	r0, r3
 800804e:	f006 f869 	bl	800e124 <ip4_addr_isbroadcast_u32>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	f040 83c7 	bne.w	80087e8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800805a:	4b92      	ldr	r3, [pc, #584]	@ (80082a4 <tcp_input+0x290>)
 800805c:	695b      	ldr	r3, [r3, #20]
 800805e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008062:	2be0      	cmp	r3, #224	@ 0xe0
 8008064:	f000 83c0 	beq.w	80087e8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008068:	4b8d      	ldr	r3, [pc, #564]	@ (80082a0 <tcp_input+0x28c>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	899b      	ldrh	r3, [r3, #12]
 800806e:	b29b      	uxth	r3, r3
 8008070:	4618      	mov	r0, r3
 8008072:	f7fc fc9d 	bl	80049b0 <lwip_htons>
 8008076:	4603      	mov	r3, r0
 8008078:	0b1b      	lsrs	r3, r3, #12
 800807a:	b29b      	uxth	r3, r3
 800807c:	b2db      	uxtb	r3, r3
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008082:	7cbb      	ldrb	r3, [r7, #18]
 8008084:	2b13      	cmp	r3, #19
 8008086:	f240 83b1 	bls.w	80087ec <tcp_input+0x7d8>
 800808a:	7cbb      	ldrb	r3, [r7, #18]
 800808c:	b29a      	uxth	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	891b      	ldrh	r3, [r3, #8]
 8008092:	429a      	cmp	r2, r3
 8008094:	f200 83aa 	bhi.w	80087ec <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008098:	7cbb      	ldrb	r3, [r7, #18]
 800809a:	b29b      	uxth	r3, r3
 800809c:	3b14      	subs	r3, #20
 800809e:	b29a      	uxth	r2, r3
 80080a0:	4b81      	ldr	r3, [pc, #516]	@ (80082a8 <tcp_input+0x294>)
 80080a2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80080a4:	4b81      	ldr	r3, [pc, #516]	@ (80082ac <tcp_input+0x298>)
 80080a6:	2200      	movs	r2, #0
 80080a8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	895a      	ldrh	r2, [r3, #10]
 80080ae:	7cbb      	ldrb	r3, [r7, #18]
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d309      	bcc.n	80080ca <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80080b6:	4b7c      	ldr	r3, [pc, #496]	@ (80082a8 <tcp_input+0x294>)
 80080b8:	881a      	ldrh	r2, [r3, #0]
 80080ba:	4b7d      	ldr	r3, [pc, #500]	@ (80082b0 <tcp_input+0x29c>)
 80080bc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80080be:	7cbb      	ldrb	r3, [r7, #18]
 80080c0:	4619      	mov	r1, r3
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f7fd ff4c 	bl	8005f60 <pbuf_remove_header>
 80080c8:	e04e      	b.n	8008168 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d105      	bne.n	80080de <tcp_input+0xca>
 80080d2:	4b70      	ldr	r3, [pc, #448]	@ (8008294 <tcp_input+0x280>)
 80080d4:	22c2      	movs	r2, #194	@ 0xc2
 80080d6:	4977      	ldr	r1, [pc, #476]	@ (80082b4 <tcp_input+0x2a0>)
 80080d8:	4870      	ldr	r0, [pc, #448]	@ (800829c <tcp_input+0x288>)
 80080da:	f007 f93f 	bl	800f35c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80080de:	2114      	movs	r1, #20
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f7fd ff3d 	bl	8005f60 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	895a      	ldrh	r2, [r3, #10]
 80080ea:	4b71      	ldr	r3, [pc, #452]	@ (80082b0 <tcp_input+0x29c>)
 80080ec:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80080ee:	4b6e      	ldr	r3, [pc, #440]	@ (80082a8 <tcp_input+0x294>)
 80080f0:	881a      	ldrh	r2, [r3, #0]
 80080f2:	4b6f      	ldr	r3, [pc, #444]	@ (80082b0 <tcp_input+0x29c>)
 80080f4:	881b      	ldrh	r3, [r3, #0]
 80080f6:	1ad3      	subs	r3, r2, r3
 80080f8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80080fa:	4b6d      	ldr	r3, [pc, #436]	@ (80082b0 <tcp_input+0x29c>)
 80080fc:	881b      	ldrh	r3, [r3, #0]
 80080fe:	4619      	mov	r1, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f7fd ff2d 	bl	8005f60 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	895b      	ldrh	r3, [r3, #10]
 800810c:	8a3a      	ldrh	r2, [r7, #16]
 800810e:	429a      	cmp	r2, r3
 8008110:	f200 836e 	bhi.w	80087f0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	4a64      	ldr	r2, [pc, #400]	@ (80082ac <tcp_input+0x298>)
 800811c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	8a3a      	ldrh	r2, [r7, #16]
 8008124:	4611      	mov	r1, r2
 8008126:	4618      	mov	r0, r3
 8008128:	f7fd ff1a 	bl	8005f60 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	891a      	ldrh	r2, [r3, #8]
 8008130:	8a3b      	ldrh	r3, [r7, #16]
 8008132:	1ad3      	subs	r3, r2, r3
 8008134:	b29a      	uxth	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	895b      	ldrh	r3, [r3, #10]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d005      	beq.n	800814e <tcp_input+0x13a>
 8008142:	4b54      	ldr	r3, [pc, #336]	@ (8008294 <tcp_input+0x280>)
 8008144:	22df      	movs	r2, #223	@ 0xdf
 8008146:	495c      	ldr	r1, [pc, #368]	@ (80082b8 <tcp_input+0x2a4>)
 8008148:	4854      	ldr	r0, [pc, #336]	@ (800829c <tcp_input+0x288>)
 800814a:	f007 f907 	bl	800f35c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	891a      	ldrh	r2, [r3, #8]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	891b      	ldrh	r3, [r3, #8]
 8008158:	429a      	cmp	r2, r3
 800815a:	d005      	beq.n	8008168 <tcp_input+0x154>
 800815c:	4b4d      	ldr	r3, [pc, #308]	@ (8008294 <tcp_input+0x280>)
 800815e:	22e0      	movs	r2, #224	@ 0xe0
 8008160:	4956      	ldr	r1, [pc, #344]	@ (80082bc <tcp_input+0x2a8>)
 8008162:	484e      	ldr	r0, [pc, #312]	@ (800829c <tcp_input+0x288>)
 8008164:	f007 f8fa 	bl	800f35c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008168:	4b4d      	ldr	r3, [pc, #308]	@ (80082a0 <tcp_input+0x28c>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	881b      	ldrh	r3, [r3, #0]
 800816e:	b29b      	uxth	r3, r3
 8008170:	4a4b      	ldr	r2, [pc, #300]	@ (80082a0 <tcp_input+0x28c>)
 8008172:	6814      	ldr	r4, [r2, #0]
 8008174:	4618      	mov	r0, r3
 8008176:	f7fc fc1b 	bl	80049b0 <lwip_htons>
 800817a:	4603      	mov	r3, r0
 800817c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800817e:	4b48      	ldr	r3, [pc, #288]	@ (80082a0 <tcp_input+0x28c>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	885b      	ldrh	r3, [r3, #2]
 8008184:	b29b      	uxth	r3, r3
 8008186:	4a46      	ldr	r2, [pc, #280]	@ (80082a0 <tcp_input+0x28c>)
 8008188:	6814      	ldr	r4, [r2, #0]
 800818a:	4618      	mov	r0, r3
 800818c:	f7fc fc10 	bl	80049b0 <lwip_htons>
 8008190:	4603      	mov	r3, r0
 8008192:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008194:	4b42      	ldr	r3, [pc, #264]	@ (80082a0 <tcp_input+0x28c>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	4a41      	ldr	r2, [pc, #260]	@ (80082a0 <tcp_input+0x28c>)
 800819c:	6814      	ldr	r4, [r2, #0]
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fc fc1c 	bl	80049dc <lwip_htonl>
 80081a4:	4603      	mov	r3, r0
 80081a6:	6063      	str	r3, [r4, #4]
 80081a8:	6863      	ldr	r3, [r4, #4]
 80081aa:	4a45      	ldr	r2, [pc, #276]	@ (80082c0 <tcp_input+0x2ac>)
 80081ac:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80081ae:	4b3c      	ldr	r3, [pc, #240]	@ (80082a0 <tcp_input+0x28c>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	4a3a      	ldr	r2, [pc, #232]	@ (80082a0 <tcp_input+0x28c>)
 80081b6:	6814      	ldr	r4, [r2, #0]
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7fc fc0f 	bl	80049dc <lwip_htonl>
 80081be:	4603      	mov	r3, r0
 80081c0:	60a3      	str	r3, [r4, #8]
 80081c2:	68a3      	ldr	r3, [r4, #8]
 80081c4:	4a3f      	ldr	r2, [pc, #252]	@ (80082c4 <tcp_input+0x2b0>)
 80081c6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80081c8:	4b35      	ldr	r3, [pc, #212]	@ (80082a0 <tcp_input+0x28c>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	89db      	ldrh	r3, [r3, #14]
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	4a33      	ldr	r2, [pc, #204]	@ (80082a0 <tcp_input+0x28c>)
 80081d2:	6814      	ldr	r4, [r2, #0]
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7fc fbeb 	bl	80049b0 <lwip_htons>
 80081da:	4603      	mov	r3, r0
 80081dc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80081de:	4b30      	ldr	r3, [pc, #192]	@ (80082a0 <tcp_input+0x28c>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	899b      	ldrh	r3, [r3, #12]
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7fc fbe2 	bl	80049b0 <lwip_htons>
 80081ec:	4603      	mov	r3, r0
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081f4:	b2da      	uxtb	r2, r3
 80081f6:	4b34      	ldr	r3, [pc, #208]	@ (80082c8 <tcp_input+0x2b4>)
 80081f8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	891a      	ldrh	r2, [r3, #8]
 80081fe:	4b33      	ldr	r3, [pc, #204]	@ (80082cc <tcp_input+0x2b8>)
 8008200:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008202:	4b31      	ldr	r3, [pc, #196]	@ (80082c8 <tcp_input+0x2b4>)
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	f003 0303 	and.w	r3, r3, #3
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00c      	beq.n	8008228 <tcp_input+0x214>
    tcplen++;
 800820e:	4b2f      	ldr	r3, [pc, #188]	@ (80082cc <tcp_input+0x2b8>)
 8008210:	881b      	ldrh	r3, [r3, #0]
 8008212:	3301      	adds	r3, #1
 8008214:	b29a      	uxth	r2, r3
 8008216:	4b2d      	ldr	r3, [pc, #180]	@ (80082cc <tcp_input+0x2b8>)
 8008218:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	891a      	ldrh	r2, [r3, #8]
 800821e:	4b2b      	ldr	r3, [pc, #172]	@ (80082cc <tcp_input+0x2b8>)
 8008220:	881b      	ldrh	r3, [r3, #0]
 8008222:	429a      	cmp	r2, r3
 8008224:	f200 82e6 	bhi.w	80087f4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008228:	2300      	movs	r3, #0
 800822a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800822c:	4b28      	ldr	r3, [pc, #160]	@ (80082d0 <tcp_input+0x2bc>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	61fb      	str	r3, [r7, #28]
 8008232:	e09d      	b.n	8008370 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	7d1b      	ldrb	r3, [r3, #20]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d105      	bne.n	8008248 <tcp_input+0x234>
 800823c:	4b15      	ldr	r3, [pc, #84]	@ (8008294 <tcp_input+0x280>)
 800823e:	22fb      	movs	r2, #251	@ 0xfb
 8008240:	4924      	ldr	r1, [pc, #144]	@ (80082d4 <tcp_input+0x2c0>)
 8008242:	4816      	ldr	r0, [pc, #88]	@ (800829c <tcp_input+0x288>)
 8008244:	f007 f88a 	bl	800f35c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	7d1b      	ldrb	r3, [r3, #20]
 800824c:	2b0a      	cmp	r3, #10
 800824e:	d105      	bne.n	800825c <tcp_input+0x248>
 8008250:	4b10      	ldr	r3, [pc, #64]	@ (8008294 <tcp_input+0x280>)
 8008252:	22fc      	movs	r2, #252	@ 0xfc
 8008254:	4920      	ldr	r1, [pc, #128]	@ (80082d8 <tcp_input+0x2c4>)
 8008256:	4811      	ldr	r0, [pc, #68]	@ (800829c <tcp_input+0x288>)
 8008258:	f007 f880 	bl	800f35c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	7d1b      	ldrb	r3, [r3, #20]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d105      	bne.n	8008270 <tcp_input+0x25c>
 8008264:	4b0b      	ldr	r3, [pc, #44]	@ (8008294 <tcp_input+0x280>)
 8008266:	22fd      	movs	r2, #253	@ 0xfd
 8008268:	491c      	ldr	r1, [pc, #112]	@ (80082dc <tcp_input+0x2c8>)
 800826a:	480c      	ldr	r0, [pc, #48]	@ (800829c <tcp_input+0x288>)
 800826c:	f007 f876 	bl	800f35c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	7a1b      	ldrb	r3, [r3, #8]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d033      	beq.n	80082e0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	7a1a      	ldrb	r2, [r3, #8]
 800827c:	4b09      	ldr	r3, [pc, #36]	@ (80082a4 <tcp_input+0x290>)
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008284:	3301      	adds	r3, #1
 8008286:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008288:	429a      	cmp	r2, r3
 800828a:	d029      	beq.n	80082e0 <tcp_input+0x2cc>
      prev = pcb;
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	61bb      	str	r3, [r7, #24]
      continue;
 8008290:	e06b      	b.n	800836a <tcp_input+0x356>
 8008292:	bf00      	nop
 8008294:	0801197c 	.word	0x0801197c
 8008298:	080119b0 	.word	0x080119b0
 800829c:	080119c8 	.word	0x080119c8
 80082a0:	20008304 	.word	0x20008304
 80082a4:	20004d6c 	.word	0x20004d6c
 80082a8:	20008308 	.word	0x20008308
 80082ac:	2000830c 	.word	0x2000830c
 80082b0:	2000830a 	.word	0x2000830a
 80082b4:	080119f0 	.word	0x080119f0
 80082b8:	08011a00 	.word	0x08011a00
 80082bc:	08011a0c 	.word	0x08011a0c
 80082c0:	20008314 	.word	0x20008314
 80082c4:	20008318 	.word	0x20008318
 80082c8:	20008320 	.word	0x20008320
 80082cc:	2000831e 	.word	0x2000831e
 80082d0:	200082e8 	.word	0x200082e8
 80082d4:	08011a2c 	.word	0x08011a2c
 80082d8:	08011a54 	.word	0x08011a54
 80082dc:	08011a80 	.word	0x08011a80
    }

    if (pcb->remote_port == tcphdr->src &&
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	8b1a      	ldrh	r2, [r3, #24]
 80082e4:	4b72      	ldr	r3, [pc, #456]	@ (80084b0 <tcp_input+0x49c>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	881b      	ldrh	r3, [r3, #0]
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d13a      	bne.n	8008366 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	8ada      	ldrh	r2, [r3, #22]
 80082f4:	4b6e      	ldr	r3, [pc, #440]	@ (80084b0 <tcp_input+0x49c>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	885b      	ldrh	r3, [r3, #2]
 80082fa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d132      	bne.n	8008366 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	685a      	ldr	r2, [r3, #4]
 8008304:	4b6b      	ldr	r3, [pc, #428]	@ (80084b4 <tcp_input+0x4a0>)
 8008306:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008308:	429a      	cmp	r2, r3
 800830a:	d12c      	bne.n	8008366 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	4b68      	ldr	r3, [pc, #416]	@ (80084b4 <tcp_input+0x4a0>)
 8008312:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008314:	429a      	cmp	r2, r3
 8008316:	d126      	bne.n	8008366 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	69fa      	ldr	r2, [r7, #28]
 800831e:	429a      	cmp	r2, r3
 8008320:	d106      	bne.n	8008330 <tcp_input+0x31c>
 8008322:	4b65      	ldr	r3, [pc, #404]	@ (80084b8 <tcp_input+0x4a4>)
 8008324:	f240 120d 	movw	r2, #269	@ 0x10d
 8008328:	4964      	ldr	r1, [pc, #400]	@ (80084bc <tcp_input+0x4a8>)
 800832a:	4865      	ldr	r0, [pc, #404]	@ (80084c0 <tcp_input+0x4ac>)
 800832c:	f007 f816 	bl	800f35c <iprintf>
      if (prev != NULL) {
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00a      	beq.n	800834c <tcp_input+0x338>
        prev->next = pcb->next;
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	68da      	ldr	r2, [r3, #12]
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800833e:	4b61      	ldr	r3, [pc, #388]	@ (80084c4 <tcp_input+0x4b0>)
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008346:	4a5f      	ldr	r2, [pc, #380]	@ (80084c4 <tcp_input+0x4b0>)
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	69fa      	ldr	r2, [r7, #28]
 8008352:	429a      	cmp	r2, r3
 8008354:	d111      	bne.n	800837a <tcp_input+0x366>
 8008356:	4b58      	ldr	r3, [pc, #352]	@ (80084b8 <tcp_input+0x4a4>)
 8008358:	f240 1215 	movw	r2, #277	@ 0x115
 800835c:	495a      	ldr	r1, [pc, #360]	@ (80084c8 <tcp_input+0x4b4>)
 800835e:	4858      	ldr	r0, [pc, #352]	@ (80084c0 <tcp_input+0x4ac>)
 8008360:	f006 fffc 	bl	800f35c <iprintf>
      break;
 8008364:	e009      	b.n	800837a <tcp_input+0x366>
    }
    prev = pcb;
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	61fb      	str	r3, [r7, #28]
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	2b00      	cmp	r3, #0
 8008374:	f47f af5e 	bne.w	8008234 <tcp_input+0x220>
 8008378:	e000      	b.n	800837c <tcp_input+0x368>
      break;
 800837a:	bf00      	nop
  }

  if (pcb == NULL) {
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	2b00      	cmp	r3, #0
 8008380:	f040 80aa 	bne.w	80084d8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008384:	4b51      	ldr	r3, [pc, #324]	@ (80084cc <tcp_input+0x4b8>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	61fb      	str	r3, [r7, #28]
 800838a:	e03f      	b.n	800840c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	7d1b      	ldrb	r3, [r3, #20]
 8008390:	2b0a      	cmp	r3, #10
 8008392:	d006      	beq.n	80083a2 <tcp_input+0x38e>
 8008394:	4b48      	ldr	r3, [pc, #288]	@ (80084b8 <tcp_input+0x4a4>)
 8008396:	f240 121f 	movw	r2, #287	@ 0x11f
 800839a:	494d      	ldr	r1, [pc, #308]	@ (80084d0 <tcp_input+0x4bc>)
 800839c:	4848      	ldr	r0, [pc, #288]	@ (80084c0 <tcp_input+0x4ac>)
 800839e:	f006 ffdd 	bl	800f35c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	7a1b      	ldrb	r3, [r3, #8]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d009      	beq.n	80083be <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	7a1a      	ldrb	r2, [r3, #8]
 80083ae:	4b41      	ldr	r3, [pc, #260]	@ (80084b4 <tcp_input+0x4a0>)
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80083b6:	3301      	adds	r3, #1
 80083b8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d122      	bne.n	8008404 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	8b1a      	ldrh	r2, [r3, #24]
 80083c2:	4b3b      	ldr	r3, [pc, #236]	@ (80084b0 <tcp_input+0x49c>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	881b      	ldrh	r3, [r3, #0]
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d11b      	bne.n	8008406 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	8ada      	ldrh	r2, [r3, #22]
 80083d2:	4b37      	ldr	r3, [pc, #220]	@ (80084b0 <tcp_input+0x49c>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	885b      	ldrh	r3, [r3, #2]
 80083d8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80083da:	429a      	cmp	r2, r3
 80083dc:	d113      	bne.n	8008406 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	685a      	ldr	r2, [r3, #4]
 80083e2:	4b34      	ldr	r3, [pc, #208]	@ (80084b4 <tcp_input+0x4a0>)
 80083e4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d10d      	bne.n	8008406 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	4b31      	ldr	r3, [pc, #196]	@ (80084b4 <tcp_input+0x4a0>)
 80083f0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d107      	bne.n	8008406 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80083f6:	69f8      	ldr	r0, [r7, #28]
 80083f8:	f000 fb56 	bl	8008aa8 <tcp_timewait_input>
        }
        pbuf_free(p);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f7fd fe35 	bl	800606c <pbuf_free>
        return;
 8008402:	e1fd      	b.n	8008800 <tcp_input+0x7ec>
        continue;
 8008404:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	61fb      	str	r3, [r7, #28]
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1bc      	bne.n	800838c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008412:	2300      	movs	r3, #0
 8008414:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008416:	4b2f      	ldr	r3, [pc, #188]	@ (80084d4 <tcp_input+0x4c0>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	617b      	str	r3, [r7, #20]
 800841c:	e02a      	b.n	8008474 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	7a1b      	ldrb	r3, [r3, #8]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00c      	beq.n	8008440 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	7a1a      	ldrb	r2, [r3, #8]
 800842a:	4b22      	ldr	r3, [pc, #136]	@ (80084b4 <tcp_input+0x4a0>)
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008432:	3301      	adds	r3, #1
 8008434:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008436:	429a      	cmp	r2, r3
 8008438:	d002      	beq.n	8008440 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	61bb      	str	r3, [r7, #24]
        continue;
 800843e:	e016      	b.n	800846e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	8ada      	ldrh	r2, [r3, #22]
 8008444:	4b1a      	ldr	r3, [pc, #104]	@ (80084b0 <tcp_input+0x49c>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	885b      	ldrh	r3, [r3, #2]
 800844a:	b29b      	uxth	r3, r3
 800844c:	429a      	cmp	r2, r3
 800844e:	d10c      	bne.n	800846a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	4b17      	ldr	r3, [pc, #92]	@ (80084b4 <tcp_input+0x4a0>)
 8008456:	695b      	ldr	r3, [r3, #20]
 8008458:	429a      	cmp	r2, r3
 800845a:	d00f      	beq.n	800847c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00d      	beq.n	800847e <tcp_input+0x46a>
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d009      	beq.n	800847e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	617b      	str	r3, [r7, #20]
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1d1      	bne.n	800841e <tcp_input+0x40a>
 800847a:	e000      	b.n	800847e <tcp_input+0x46a>
            break;
 800847c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d029      	beq.n	80084d8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00a      	beq.n	80084a0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	68da      	ldr	r2, [r3, #12]
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008492:	4b10      	ldr	r3, [pc, #64]	@ (80084d4 <tcp_input+0x4c0>)
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800849a:	4a0e      	ldr	r2, [pc, #56]	@ (80084d4 <tcp_input+0x4c0>)
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80084a0:	6978      	ldr	r0, [r7, #20]
 80084a2:	f000 fa03 	bl	80088ac <tcp_listen_input>
      }
      pbuf_free(p);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f7fd fde0 	bl	800606c <pbuf_free>
      return;
 80084ac:	e1a8      	b.n	8008800 <tcp_input+0x7ec>
 80084ae:	bf00      	nop
 80084b0:	20008304 	.word	0x20008304
 80084b4:	20004d6c 	.word	0x20004d6c
 80084b8:	0801197c 	.word	0x0801197c
 80084bc:	08011aa8 	.word	0x08011aa8
 80084c0:	080119c8 	.word	0x080119c8
 80084c4:	200082e8 	.word	0x200082e8
 80084c8:	08011ad4 	.word	0x08011ad4
 80084cc:	200082ec 	.word	0x200082ec
 80084d0:	08011b00 	.word	0x08011b00
 80084d4:	200082e4 	.word	0x200082e4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f000 8158 	beq.w	8008790 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80084e0:	4b95      	ldr	r3, [pc, #596]	@ (8008738 <tcp_input+0x724>)
 80084e2:	2200      	movs	r2, #0
 80084e4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	891a      	ldrh	r2, [r3, #8]
 80084ea:	4b93      	ldr	r3, [pc, #588]	@ (8008738 <tcp_input+0x724>)
 80084ec:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80084ee:	4a92      	ldr	r2, [pc, #584]	@ (8008738 <tcp_input+0x724>)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80084f4:	4b91      	ldr	r3, [pc, #580]	@ (800873c <tcp_input+0x728>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a8f      	ldr	r2, [pc, #572]	@ (8008738 <tcp_input+0x724>)
 80084fa:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80084fc:	4b90      	ldr	r3, [pc, #576]	@ (8008740 <tcp_input+0x72c>)
 80084fe:	2200      	movs	r2, #0
 8008500:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008502:	4b90      	ldr	r3, [pc, #576]	@ (8008744 <tcp_input+0x730>)
 8008504:	2200      	movs	r2, #0
 8008506:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008508:	4b8f      	ldr	r3, [pc, #572]	@ (8008748 <tcp_input+0x734>)
 800850a:	2200      	movs	r2, #0
 800850c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800850e:	4b8f      	ldr	r3, [pc, #572]	@ (800874c <tcp_input+0x738>)
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	f003 0308 	and.w	r3, r3, #8
 8008516:	2b00      	cmp	r3, #0
 8008518:	d006      	beq.n	8008528 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	7b5b      	ldrb	r3, [r3, #13]
 800851e:	f043 0301 	orr.w	r3, r3, #1
 8008522:	b2da      	uxtb	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800852c:	2b00      	cmp	r3, #0
 800852e:	d017      	beq.n	8008560 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008530:	69f8      	ldr	r0, [r7, #28]
 8008532:	f7ff f8dd 	bl	80076f0 <tcp_process_refused_data>
 8008536:	4603      	mov	r3, r0
 8008538:	f113 0f0d 	cmn.w	r3, #13
 800853c:	d007      	beq.n	800854e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00c      	beq.n	8008560 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008546:	4b82      	ldr	r3, [pc, #520]	@ (8008750 <tcp_input+0x73c>)
 8008548:	881b      	ldrh	r3, [r3, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d008      	beq.n	8008560 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008552:	2b00      	cmp	r3, #0
 8008554:	f040 80e3 	bne.w	800871e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008558:	69f8      	ldr	r0, [r7, #28]
 800855a:	f003 fdff 	bl	800c15c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800855e:	e0de      	b.n	800871e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8008560:	4a7c      	ldr	r2, [pc, #496]	@ (8008754 <tcp_input+0x740>)
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008566:	69f8      	ldr	r0, [r7, #28]
 8008568:	f000 fb18 	bl	8008b9c <tcp_process>
 800856c:	4603      	mov	r3, r0
 800856e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008570:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008574:	f113 0f0d 	cmn.w	r3, #13
 8008578:	f000 80d3 	beq.w	8008722 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800857c:	4b71      	ldr	r3, [pc, #452]	@ (8008744 <tcp_input+0x730>)
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	f003 0308 	and.w	r3, r3, #8
 8008584:	2b00      	cmp	r3, #0
 8008586:	d015      	beq.n	80085b4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800858e:	2b00      	cmp	r3, #0
 8008590:	d008      	beq.n	80085a4 <tcp_input+0x590>
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008598:	69fa      	ldr	r2, [r7, #28]
 800859a:	6912      	ldr	r2, [r2, #16]
 800859c:	f06f 010d 	mvn.w	r1, #13
 80085a0:	4610      	mov	r0, r2
 80085a2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80085a4:	69f9      	ldr	r1, [r7, #28]
 80085a6:	486c      	ldr	r0, [pc, #432]	@ (8008758 <tcp_input+0x744>)
 80085a8:	f7ff fbbc 	bl	8007d24 <tcp_pcb_remove>
        tcp_free(pcb);
 80085ac:	69f8      	ldr	r0, [r7, #28]
 80085ae:	f7fd fffd 	bl	80065ac <tcp_free>
 80085b2:	e0da      	b.n	800876a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80085b4:	2300      	movs	r3, #0
 80085b6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80085b8:	4b63      	ldr	r3, [pc, #396]	@ (8008748 <tcp_input+0x734>)
 80085ba:	881b      	ldrh	r3, [r3, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d01d      	beq.n	80085fc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80085c0:	4b61      	ldr	r3, [pc, #388]	@ (8008748 <tcp_input+0x734>)
 80085c2:	881b      	ldrh	r3, [r3, #0]
 80085c4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00a      	beq.n	80085e6 <tcp_input+0x5d2>
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085d6:	69fa      	ldr	r2, [r7, #28]
 80085d8:	6910      	ldr	r0, [r2, #16]
 80085da:	89fa      	ldrh	r2, [r7, #14]
 80085dc:	69f9      	ldr	r1, [r7, #28]
 80085de:	4798      	blx	r3
 80085e0:	4603      	mov	r3, r0
 80085e2:	74fb      	strb	r3, [r7, #19]
 80085e4:	e001      	b.n	80085ea <tcp_input+0x5d6>
 80085e6:	2300      	movs	r3, #0
 80085e8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80085ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80085ee:	f113 0f0d 	cmn.w	r3, #13
 80085f2:	f000 8098 	beq.w	8008726 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80085f6:	4b54      	ldr	r3, [pc, #336]	@ (8008748 <tcp_input+0x734>)
 80085f8:	2200      	movs	r2, #0
 80085fa:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80085fc:	69f8      	ldr	r0, [r7, #28]
 80085fe:	f000 f915 	bl	800882c <tcp_input_delayed_close>
 8008602:	4603      	mov	r3, r0
 8008604:	2b00      	cmp	r3, #0
 8008606:	f040 8090 	bne.w	800872a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800860a:	4b4d      	ldr	r3, [pc, #308]	@ (8008740 <tcp_input+0x72c>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d041      	beq.n	8008696 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008616:	2b00      	cmp	r3, #0
 8008618:	d006      	beq.n	8008628 <tcp_input+0x614>
 800861a:	4b50      	ldr	r3, [pc, #320]	@ (800875c <tcp_input+0x748>)
 800861c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8008620:	494f      	ldr	r1, [pc, #316]	@ (8008760 <tcp_input+0x74c>)
 8008622:	4850      	ldr	r0, [pc, #320]	@ (8008764 <tcp_input+0x750>)
 8008624:	f006 fe9a 	bl	800f35c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	8b5b      	ldrh	r3, [r3, #26]
 800862c:	f003 0310 	and.w	r3, r3, #16
 8008630:	2b00      	cmp	r3, #0
 8008632:	d008      	beq.n	8008646 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008634:	4b42      	ldr	r3, [pc, #264]	@ (8008740 <tcp_input+0x72c>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4618      	mov	r0, r3
 800863a:	f7fd fd17 	bl	800606c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800863e:	69f8      	ldr	r0, [r7, #28]
 8008640:	f7fe fa9c 	bl	8006b7c <tcp_abort>
            goto aborted;
 8008644:	e091      	b.n	800876a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00c      	beq.n	800866a <tcp_input+0x656>
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	6918      	ldr	r0, [r3, #16]
 800865a:	4b39      	ldr	r3, [pc, #228]	@ (8008740 <tcp_input+0x72c>)
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	2300      	movs	r3, #0
 8008660:	69f9      	ldr	r1, [r7, #28]
 8008662:	47a0      	blx	r4
 8008664:	4603      	mov	r3, r0
 8008666:	74fb      	strb	r3, [r7, #19]
 8008668:	e008      	b.n	800867c <tcp_input+0x668>
 800866a:	4b35      	ldr	r3, [pc, #212]	@ (8008740 <tcp_input+0x72c>)
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	2300      	movs	r3, #0
 8008670:	69f9      	ldr	r1, [r7, #28]
 8008672:	2000      	movs	r0, #0
 8008674:	f7ff f912 	bl	800789c <tcp_recv_null>
 8008678:	4603      	mov	r3, r0
 800867a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800867c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008680:	f113 0f0d 	cmn.w	r3, #13
 8008684:	d053      	beq.n	800872e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008686:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d003      	beq.n	8008696 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800868e:	4b2c      	ldr	r3, [pc, #176]	@ (8008740 <tcp_input+0x72c>)
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008696:	4b2b      	ldr	r3, [pc, #172]	@ (8008744 <tcp_input+0x730>)
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	f003 0320 	and.w	r3, r3, #32
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d030      	beq.n	8008704 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d009      	beq.n	80086be <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086ae:	7b5a      	ldrb	r2, [r3, #13]
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086b4:	f042 0220 	orr.w	r2, r2, #32
 80086b8:	b2d2      	uxtb	r2, r2
 80086ba:	735a      	strb	r2, [r3, #13]
 80086bc:	e022      	b.n	8008704 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086c2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80086c6:	d005      	beq.n	80086d4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086cc:	3301      	adds	r3, #1
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	69fb      	ldr	r3, [r7, #28]
 80086d2:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00b      	beq.n	80086f6 <tcp_input+0x6e2>
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	6918      	ldr	r0, [r3, #16]
 80086e8:	2300      	movs	r3, #0
 80086ea:	2200      	movs	r2, #0
 80086ec:	69f9      	ldr	r1, [r7, #28]
 80086ee:	47a0      	blx	r4
 80086f0:	4603      	mov	r3, r0
 80086f2:	74fb      	strb	r3, [r7, #19]
 80086f4:	e001      	b.n	80086fa <tcp_input+0x6e6>
 80086f6:	2300      	movs	r3, #0
 80086f8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80086fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80086fe:	f113 0f0d 	cmn.w	r3, #13
 8008702:	d016      	beq.n	8008732 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008704:	4b13      	ldr	r3, [pc, #76]	@ (8008754 <tcp_input+0x740>)
 8008706:	2200      	movs	r2, #0
 8008708:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800870a:	69f8      	ldr	r0, [r7, #28]
 800870c:	f000 f88e 	bl	800882c <tcp_input_delayed_close>
 8008710:	4603      	mov	r3, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	d128      	bne.n	8008768 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008716:	69f8      	ldr	r0, [r7, #28]
 8008718:	f002 ff1a 	bl	800b550 <tcp_output>
 800871c:	e025      	b.n	800876a <tcp_input+0x756>
        goto aborted;
 800871e:	bf00      	nop
 8008720:	e023      	b.n	800876a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008722:	bf00      	nop
 8008724:	e021      	b.n	800876a <tcp_input+0x756>
              goto aborted;
 8008726:	bf00      	nop
 8008728:	e01f      	b.n	800876a <tcp_input+0x756>
          goto aborted;
 800872a:	bf00      	nop
 800872c:	e01d      	b.n	800876a <tcp_input+0x756>
            goto aborted;
 800872e:	bf00      	nop
 8008730:	e01b      	b.n	800876a <tcp_input+0x756>
              goto aborted;
 8008732:	bf00      	nop
 8008734:	e019      	b.n	800876a <tcp_input+0x756>
 8008736:	bf00      	nop
 8008738:	200082f4 	.word	0x200082f4
 800873c:	20008304 	.word	0x20008304
 8008740:	20008324 	.word	0x20008324
 8008744:	20008321 	.word	0x20008321
 8008748:	2000831c 	.word	0x2000831c
 800874c:	20008320 	.word	0x20008320
 8008750:	2000831e 	.word	0x2000831e
 8008754:	20008328 	.word	0x20008328
 8008758:	200082e8 	.word	0x200082e8
 800875c:	0801197c 	.word	0x0801197c
 8008760:	08011b30 	.word	0x08011b30
 8008764:	080119c8 	.word	0x080119c8
          goto aborted;
 8008768:	bf00      	nop
    tcp_input_pcb = NULL;
 800876a:	4b27      	ldr	r3, [pc, #156]	@ (8008808 <tcp_input+0x7f4>)
 800876c:	2200      	movs	r2, #0
 800876e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008770:	4b26      	ldr	r3, [pc, #152]	@ (800880c <tcp_input+0x7f8>)
 8008772:	2200      	movs	r2, #0
 8008774:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008776:	4b26      	ldr	r3, [pc, #152]	@ (8008810 <tcp_input+0x7fc>)
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d03f      	beq.n	80087fe <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800877e:	4b24      	ldr	r3, [pc, #144]	@ (8008810 <tcp_input+0x7fc>)
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	4618      	mov	r0, r3
 8008784:	f7fd fc72 	bl	800606c <pbuf_free>
      inseg.p = NULL;
 8008788:	4b21      	ldr	r3, [pc, #132]	@ (8008810 <tcp_input+0x7fc>)
 800878a:	2200      	movs	r2, #0
 800878c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800878e:	e036      	b.n	80087fe <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008790:	4b20      	ldr	r3, [pc, #128]	@ (8008814 <tcp_input+0x800>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	899b      	ldrh	r3, [r3, #12]
 8008796:	b29b      	uxth	r3, r3
 8008798:	4618      	mov	r0, r3
 800879a:	f7fc f909 	bl	80049b0 <lwip_htons>
 800879e:	4603      	mov	r3, r0
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	f003 0304 	and.w	r3, r3, #4
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d118      	bne.n	80087dc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80087aa:	4b1b      	ldr	r3, [pc, #108]	@ (8008818 <tcp_input+0x804>)
 80087ac:	6819      	ldr	r1, [r3, #0]
 80087ae:	4b1b      	ldr	r3, [pc, #108]	@ (800881c <tcp_input+0x808>)
 80087b0:	881b      	ldrh	r3, [r3, #0]
 80087b2:	461a      	mov	r2, r3
 80087b4:	4b1a      	ldr	r3, [pc, #104]	@ (8008820 <tcp_input+0x80c>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80087ba:	4b16      	ldr	r3, [pc, #88]	@ (8008814 <tcp_input+0x800>)
 80087bc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80087be:	885b      	ldrh	r3, [r3, #2]
 80087c0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80087c2:	4a14      	ldr	r2, [pc, #80]	@ (8008814 <tcp_input+0x800>)
 80087c4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80087c6:	8812      	ldrh	r2, [r2, #0]
 80087c8:	b292      	uxth	r2, r2
 80087ca:	9202      	str	r2, [sp, #8]
 80087cc:	9301      	str	r3, [sp, #4]
 80087ce:	4b15      	ldr	r3, [pc, #84]	@ (8008824 <tcp_input+0x810>)
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	4b15      	ldr	r3, [pc, #84]	@ (8008828 <tcp_input+0x814>)
 80087d4:	4602      	mov	r2, r0
 80087d6:	2000      	movs	r0, #0
 80087d8:	f003 fc6e 	bl	800c0b8 <tcp_rst>
    pbuf_free(p);
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f7fd fc45 	bl	800606c <pbuf_free>
  return;
 80087e2:	e00c      	b.n	80087fe <tcp_input+0x7ea>
    goto dropped;
 80087e4:	bf00      	nop
 80087e6:	e006      	b.n	80087f6 <tcp_input+0x7e2>
    goto dropped;
 80087e8:	bf00      	nop
 80087ea:	e004      	b.n	80087f6 <tcp_input+0x7e2>
    goto dropped;
 80087ec:	bf00      	nop
 80087ee:	e002      	b.n	80087f6 <tcp_input+0x7e2>
      goto dropped;
 80087f0:	bf00      	nop
 80087f2:	e000      	b.n	80087f6 <tcp_input+0x7e2>
      goto dropped;
 80087f4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f7fd fc38 	bl	800606c <pbuf_free>
 80087fc:	e000      	b.n	8008800 <tcp_input+0x7ec>
  return;
 80087fe:	bf00      	nop
}
 8008800:	3724      	adds	r7, #36	@ 0x24
 8008802:	46bd      	mov	sp, r7
 8008804:	bd90      	pop	{r4, r7, pc}
 8008806:	bf00      	nop
 8008808:	20008328 	.word	0x20008328
 800880c:	20008324 	.word	0x20008324
 8008810:	200082f4 	.word	0x200082f4
 8008814:	20008304 	.word	0x20008304
 8008818:	20008318 	.word	0x20008318
 800881c:	2000831e 	.word	0x2000831e
 8008820:	20008314 	.word	0x20008314
 8008824:	20004d7c 	.word	0x20004d7c
 8008828:	20004d80 	.word	0x20004d80

0800882c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d106      	bne.n	8008848 <tcp_input_delayed_close+0x1c>
 800883a:	4b17      	ldr	r3, [pc, #92]	@ (8008898 <tcp_input_delayed_close+0x6c>)
 800883c:	f240 225a 	movw	r2, #602	@ 0x25a
 8008840:	4916      	ldr	r1, [pc, #88]	@ (800889c <tcp_input_delayed_close+0x70>)
 8008842:	4817      	ldr	r0, [pc, #92]	@ (80088a0 <tcp_input_delayed_close+0x74>)
 8008844:	f006 fd8a 	bl	800f35c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008848:	4b16      	ldr	r3, [pc, #88]	@ (80088a4 <tcp_input_delayed_close+0x78>)
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	f003 0310 	and.w	r3, r3, #16
 8008850:	2b00      	cmp	r3, #0
 8008852:	d01c      	beq.n	800888e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	8b5b      	ldrh	r3, [r3, #26]
 8008858:	f003 0310 	and.w	r3, r3, #16
 800885c:	2b00      	cmp	r3, #0
 800885e:	d10d      	bne.n	800887c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008866:	2b00      	cmp	r3, #0
 8008868:	d008      	beq.n	800887c <tcp_input_delayed_close+0x50>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	6912      	ldr	r2, [r2, #16]
 8008874:	f06f 010e 	mvn.w	r1, #14
 8008878:	4610      	mov	r0, r2
 800887a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800887c:	6879      	ldr	r1, [r7, #4]
 800887e:	480a      	ldr	r0, [pc, #40]	@ (80088a8 <tcp_input_delayed_close+0x7c>)
 8008880:	f7ff fa50 	bl	8007d24 <tcp_pcb_remove>
    tcp_free(pcb);
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f7fd fe91 	bl	80065ac <tcp_free>
    return 1;
 800888a:	2301      	movs	r3, #1
 800888c:	e000      	b.n	8008890 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	0801197c 	.word	0x0801197c
 800889c:	08011b4c 	.word	0x08011b4c
 80088a0:	080119c8 	.word	0x080119c8
 80088a4:	20008321 	.word	0x20008321
 80088a8:	200082e8 	.word	0x200082e8

080088ac <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80088ac:	b590      	push	{r4, r7, lr}
 80088ae:	b08b      	sub	sp, #44	@ 0x2c
 80088b0:	af04      	add	r7, sp, #16
 80088b2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80088b4:	4b6f      	ldr	r3, [pc, #444]	@ (8008a74 <tcp_listen_input+0x1c8>)
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	f003 0304 	and.w	r3, r3, #4
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f040 80d2 	bne.w	8008a66 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d106      	bne.n	80088d6 <tcp_listen_input+0x2a>
 80088c8:	4b6b      	ldr	r3, [pc, #428]	@ (8008a78 <tcp_listen_input+0x1cc>)
 80088ca:	f240 2281 	movw	r2, #641	@ 0x281
 80088ce:	496b      	ldr	r1, [pc, #428]	@ (8008a7c <tcp_listen_input+0x1d0>)
 80088d0:	486b      	ldr	r0, [pc, #428]	@ (8008a80 <tcp_listen_input+0x1d4>)
 80088d2:	f006 fd43 	bl	800f35c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80088d6:	4b67      	ldr	r3, [pc, #412]	@ (8008a74 <tcp_listen_input+0x1c8>)
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	f003 0310 	and.w	r3, r3, #16
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d019      	beq.n	8008916 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80088e2:	4b68      	ldr	r3, [pc, #416]	@ (8008a84 <tcp_listen_input+0x1d8>)
 80088e4:	6819      	ldr	r1, [r3, #0]
 80088e6:	4b68      	ldr	r3, [pc, #416]	@ (8008a88 <tcp_listen_input+0x1dc>)
 80088e8:	881b      	ldrh	r3, [r3, #0]
 80088ea:	461a      	mov	r2, r3
 80088ec:	4b67      	ldr	r3, [pc, #412]	@ (8008a8c <tcp_listen_input+0x1e0>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80088f2:	4b67      	ldr	r3, [pc, #412]	@ (8008a90 <tcp_listen_input+0x1e4>)
 80088f4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80088f6:	885b      	ldrh	r3, [r3, #2]
 80088f8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80088fa:	4a65      	ldr	r2, [pc, #404]	@ (8008a90 <tcp_listen_input+0x1e4>)
 80088fc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80088fe:	8812      	ldrh	r2, [r2, #0]
 8008900:	b292      	uxth	r2, r2
 8008902:	9202      	str	r2, [sp, #8]
 8008904:	9301      	str	r3, [sp, #4]
 8008906:	4b63      	ldr	r3, [pc, #396]	@ (8008a94 <tcp_listen_input+0x1e8>)
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	4b63      	ldr	r3, [pc, #396]	@ (8008a98 <tcp_listen_input+0x1ec>)
 800890c:	4602      	mov	r2, r0
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f003 fbd2 	bl	800c0b8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008914:	e0a9      	b.n	8008a6a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8008916:	4b57      	ldr	r3, [pc, #348]	@ (8008a74 <tcp_listen_input+0x1c8>)
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	f003 0302 	and.w	r3, r3, #2
 800891e:	2b00      	cmp	r3, #0
 8008920:	f000 80a3 	beq.w	8008a6a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	7d5b      	ldrb	r3, [r3, #21]
 8008928:	4618      	mov	r0, r3
 800892a:	f7ff f8db 	bl	8007ae4 <tcp_alloc>
 800892e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d111      	bne.n	800895a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	699b      	ldr	r3, [r3, #24]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00a      	beq.n	8008954 <tcp_listen_input+0xa8>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	6910      	ldr	r0, [r2, #16]
 8008946:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800894a:	2100      	movs	r1, #0
 800894c:	4798      	blx	r3
 800894e:	4603      	mov	r3, r0
 8008950:	73bb      	strb	r3, [r7, #14]
      return;
 8008952:	e08b      	b.n	8008a6c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008954:	23f0      	movs	r3, #240	@ 0xf0
 8008956:	73bb      	strb	r3, [r7, #14]
      return;
 8008958:	e088      	b.n	8008a6c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800895a:	4b50      	ldr	r3, [pc, #320]	@ (8008a9c <tcp_listen_input+0x1f0>)
 800895c:	695a      	ldr	r2, [r3, #20]
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008962:	4b4e      	ldr	r3, [pc, #312]	@ (8008a9c <tcp_listen_input+0x1f0>)
 8008964:	691a      	ldr	r2, [r3, #16]
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	8ada      	ldrh	r2, [r3, #22]
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008972:	4b47      	ldr	r3, [pc, #284]	@ (8008a90 <tcp_listen_input+0x1e4>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	881b      	ldrh	r3, [r3, #0]
 8008978:	b29a      	uxth	r2, r3
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	2203      	movs	r2, #3
 8008982:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008984:	4b41      	ldr	r3, [pc, #260]	@ (8008a8c <tcp_listen_input+0x1e0>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	1c5a      	adds	r2, r3, #1
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8008996:	6978      	ldr	r0, [r7, #20]
 8008998:	f7ff fa58 	bl	8007e4c <tcp_next_iss>
 800899c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	693a      	ldr	r2, [r7, #16]
 80089a2:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	693a      	ldr	r2, [r7, #16]
 80089a8:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	693a      	ldr	r2, [r7, #16]
 80089b4:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80089b6:	4b35      	ldr	r3, [pc, #212]	@ (8008a8c <tcp_listen_input+0x1e0>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	1e5a      	subs	r2, r3, #1
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	691a      	ldr	r2, [r3, #16]
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	7a5b      	ldrb	r3, [r3, #9]
 80089d2:	f003 030c 	and.w	r3, r3, #12
 80089d6:	b2da      	uxtb	r2, r3
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	7a1a      	ldrb	r2, [r3, #8]
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80089e4:	4b2e      	ldr	r3, [pc, #184]	@ (8008aa0 <tcp_listen_input+0x1f4>)
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	60da      	str	r2, [r3, #12]
 80089ec:	4a2c      	ldr	r2, [pc, #176]	@ (8008aa0 <tcp_listen_input+0x1f4>)
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	6013      	str	r3, [r2, #0]
 80089f2:	f003 fd23 	bl	800c43c <tcp_timer_needed>
 80089f6:	4b2b      	ldr	r3, [pc, #172]	@ (8008aa4 <tcp_listen_input+0x1f8>)
 80089f8:	2201      	movs	r2, #1
 80089fa:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80089fc:	6978      	ldr	r0, [r7, #20]
 80089fe:	f001 fd8b 	bl	800a518 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008a02:	4b23      	ldr	r3, [pc, #140]	@ (8008a90 <tcp_listen_input+0x1e4>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	89db      	ldrh	r3, [r3, #14]
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	3304      	adds	r3, #4
 8008a24:	4618      	mov	r0, r3
 8008a26:	f005 f8e7 	bl	800dbf8 <ip4_route>
 8008a2a:	4601      	mov	r1, r0
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	3304      	adds	r3, #4
 8008a30:	461a      	mov	r2, r3
 8008a32:	4620      	mov	r0, r4
 8008a34:	f7ff fa30 	bl	8007e98 <tcp_eff_send_mss_netif>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008a40:	2112      	movs	r1, #18
 8008a42:	6978      	ldr	r0, [r7, #20]
 8008a44:	f002 fc96 	bl	800b374 <tcp_enqueue_flags>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d004      	beq.n	8008a5e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008a54:	2100      	movs	r1, #0
 8008a56:	6978      	ldr	r0, [r7, #20]
 8008a58:	f7fd ffd2 	bl	8006a00 <tcp_abandon>
      return;
 8008a5c:	e006      	b.n	8008a6c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8008a5e:	6978      	ldr	r0, [r7, #20]
 8008a60:	f002 fd76 	bl	800b550 <tcp_output>
  return;
 8008a64:	e001      	b.n	8008a6a <tcp_listen_input+0x1be>
    return;
 8008a66:	bf00      	nop
 8008a68:	e000      	b.n	8008a6c <tcp_listen_input+0x1c0>
  return;
 8008a6a:	bf00      	nop
}
 8008a6c:	371c      	adds	r7, #28
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd90      	pop	{r4, r7, pc}
 8008a72:	bf00      	nop
 8008a74:	20008320 	.word	0x20008320
 8008a78:	0801197c 	.word	0x0801197c
 8008a7c:	08011b74 	.word	0x08011b74
 8008a80:	080119c8 	.word	0x080119c8
 8008a84:	20008318 	.word	0x20008318
 8008a88:	2000831e 	.word	0x2000831e
 8008a8c:	20008314 	.word	0x20008314
 8008a90:	20008304 	.word	0x20008304
 8008a94:	20004d7c 	.word	0x20004d7c
 8008a98:	20004d80 	.word	0x20004d80
 8008a9c:	20004d6c 	.word	0x20004d6c
 8008aa0:	200082e8 	.word	0x200082e8
 8008aa4:	200082f0 	.word	0x200082f0

08008aa8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af04      	add	r7, sp, #16
 8008aae:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008ab0:	4b2f      	ldr	r3, [pc, #188]	@ (8008b70 <tcp_timewait_input+0xc8>)
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	f003 0304 	and.w	r3, r3, #4
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d153      	bne.n	8008b64 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d106      	bne.n	8008ad0 <tcp_timewait_input+0x28>
 8008ac2:	4b2c      	ldr	r3, [pc, #176]	@ (8008b74 <tcp_timewait_input+0xcc>)
 8008ac4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8008ac8:	492b      	ldr	r1, [pc, #172]	@ (8008b78 <tcp_timewait_input+0xd0>)
 8008aca:	482c      	ldr	r0, [pc, #176]	@ (8008b7c <tcp_timewait_input+0xd4>)
 8008acc:	f006 fc46 	bl	800f35c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008ad0:	4b27      	ldr	r3, [pc, #156]	@ (8008b70 <tcp_timewait_input+0xc8>)
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	f003 0302 	and.w	r3, r3, #2
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d02a      	beq.n	8008b32 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008adc:	4b28      	ldr	r3, [pc, #160]	@ (8008b80 <tcp_timewait_input+0xd8>)
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	db2d      	blt.n	8008b46 <tcp_timewait_input+0x9e>
 8008aea:	4b25      	ldr	r3, [pc, #148]	@ (8008b80 <tcp_timewait_input+0xd8>)
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008af2:	6879      	ldr	r1, [r7, #4]
 8008af4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008af6:	440b      	add	r3, r1
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	dc23      	bgt.n	8008b46 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008afe:	4b21      	ldr	r3, [pc, #132]	@ (8008b84 <tcp_timewait_input+0xdc>)
 8008b00:	6819      	ldr	r1, [r3, #0]
 8008b02:	4b21      	ldr	r3, [pc, #132]	@ (8008b88 <tcp_timewait_input+0xe0>)
 8008b04:	881b      	ldrh	r3, [r3, #0]
 8008b06:	461a      	mov	r2, r3
 8008b08:	4b1d      	ldr	r3, [pc, #116]	@ (8008b80 <tcp_timewait_input+0xd8>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008b0e:	4b1f      	ldr	r3, [pc, #124]	@ (8008b8c <tcp_timewait_input+0xe4>)
 8008b10:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b12:	885b      	ldrh	r3, [r3, #2]
 8008b14:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008b16:	4a1d      	ldr	r2, [pc, #116]	@ (8008b8c <tcp_timewait_input+0xe4>)
 8008b18:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b1a:	8812      	ldrh	r2, [r2, #0]
 8008b1c:	b292      	uxth	r2, r2
 8008b1e:	9202      	str	r2, [sp, #8]
 8008b20:	9301      	str	r3, [sp, #4]
 8008b22:	4b1b      	ldr	r3, [pc, #108]	@ (8008b90 <tcp_timewait_input+0xe8>)
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	4b1b      	ldr	r3, [pc, #108]	@ (8008b94 <tcp_timewait_input+0xec>)
 8008b28:	4602      	mov	r2, r0
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f003 fac4 	bl	800c0b8 <tcp_rst>
      return;
 8008b30:	e01b      	b.n	8008b6a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008b32:	4b0f      	ldr	r3, [pc, #60]	@ (8008b70 <tcp_timewait_input+0xc8>)
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	f003 0301 	and.w	r3, r3, #1
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d003      	beq.n	8008b46 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008b3e:	4b16      	ldr	r3, [pc, #88]	@ (8008b98 <tcp_timewait_input+0xf0>)
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008b46:	4b10      	ldr	r3, [pc, #64]	@ (8008b88 <tcp_timewait_input+0xe0>)
 8008b48:	881b      	ldrh	r3, [r3, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00c      	beq.n	8008b68 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	8b5b      	ldrh	r3, [r3, #26]
 8008b52:	f043 0302 	orr.w	r3, r3, #2
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f002 fcf7 	bl	800b550 <tcp_output>
  }
  return;
 8008b62:	e001      	b.n	8008b68 <tcp_timewait_input+0xc0>
    return;
 8008b64:	bf00      	nop
 8008b66:	e000      	b.n	8008b6a <tcp_timewait_input+0xc2>
  return;
 8008b68:	bf00      	nop
}
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	20008320 	.word	0x20008320
 8008b74:	0801197c 	.word	0x0801197c
 8008b78:	08011b94 	.word	0x08011b94
 8008b7c:	080119c8 	.word	0x080119c8
 8008b80:	20008314 	.word	0x20008314
 8008b84:	20008318 	.word	0x20008318
 8008b88:	2000831e 	.word	0x2000831e
 8008b8c:	20008304 	.word	0x20008304
 8008b90:	20004d7c 	.word	0x20004d7c
 8008b94:	20004d80 	.word	0x20004d80
 8008b98:	200082dc 	.word	0x200082dc

08008b9c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008b9c:	b590      	push	{r4, r7, lr}
 8008b9e:	b08d      	sub	sp, #52	@ 0x34
 8008ba0:	af04      	add	r7, sp, #16
 8008ba2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d106      	bne.n	8008bc0 <tcp_process+0x24>
 8008bb2:	4b9d      	ldr	r3, [pc, #628]	@ (8008e28 <tcp_process+0x28c>)
 8008bb4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8008bb8:	499c      	ldr	r1, [pc, #624]	@ (8008e2c <tcp_process+0x290>)
 8008bba:	489d      	ldr	r0, [pc, #628]	@ (8008e30 <tcp_process+0x294>)
 8008bbc:	f006 fbce 	bl	800f35c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008bc0:	4b9c      	ldr	r3, [pc, #624]	@ (8008e34 <tcp_process+0x298>)
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	f003 0304 	and.w	r3, r3, #4
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d04e      	beq.n	8008c6a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	7d1b      	ldrb	r3, [r3, #20]
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	d108      	bne.n	8008be6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008bd8:	4b97      	ldr	r3, [pc, #604]	@ (8008e38 <tcp_process+0x29c>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d123      	bne.n	8008c28 <tcp_process+0x8c>
        acceptable = 1;
 8008be0:	2301      	movs	r3, #1
 8008be2:	76fb      	strb	r3, [r7, #27]
 8008be4:	e020      	b.n	8008c28 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008bea:	4b94      	ldr	r3, [pc, #592]	@ (8008e3c <tcp_process+0x2a0>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d102      	bne.n	8008bf8 <tcp_process+0x5c>
        acceptable = 1;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	76fb      	strb	r3, [r7, #27]
 8008bf6:	e017      	b.n	8008c28 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008bf8:	4b90      	ldr	r3, [pc, #576]	@ (8008e3c <tcp_process+0x2a0>)
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c00:	1ad3      	subs	r3, r2, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	db10      	blt.n	8008c28 <tcp_process+0x8c>
 8008c06:	4b8d      	ldr	r3, [pc, #564]	@ (8008e3c <tcp_process+0x2a0>)
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c0e:	6879      	ldr	r1, [r7, #4]
 8008c10:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008c12:	440b      	add	r3, r1
 8008c14:	1ad3      	subs	r3, r2, r3
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	dc06      	bgt.n	8008c28 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	8b5b      	ldrh	r3, [r3, #26]
 8008c1e:	f043 0302 	orr.w	r3, r3, #2
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008c28:	7efb      	ldrb	r3, [r7, #27]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d01b      	beq.n	8008c66 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	7d1b      	ldrb	r3, [r3, #20]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d106      	bne.n	8008c44 <tcp_process+0xa8>
 8008c36:	4b7c      	ldr	r3, [pc, #496]	@ (8008e28 <tcp_process+0x28c>)
 8008c38:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8008c3c:	4980      	ldr	r1, [pc, #512]	@ (8008e40 <tcp_process+0x2a4>)
 8008c3e:	487c      	ldr	r0, [pc, #496]	@ (8008e30 <tcp_process+0x294>)
 8008c40:	f006 fb8c 	bl	800f35c <iprintf>
      recv_flags |= TF_RESET;
 8008c44:	4b7f      	ldr	r3, [pc, #508]	@ (8008e44 <tcp_process+0x2a8>)
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	f043 0308 	orr.w	r3, r3, #8
 8008c4c:	b2da      	uxtb	r2, r3
 8008c4e:	4b7d      	ldr	r3, [pc, #500]	@ (8008e44 <tcp_process+0x2a8>)
 8008c50:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	8b5b      	ldrh	r3, [r3, #26]
 8008c56:	f023 0301 	bic.w	r3, r3, #1
 8008c5a:	b29a      	uxth	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008c60:	f06f 030d 	mvn.w	r3, #13
 8008c64:	e37a      	b.n	800935c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008c66:	2300      	movs	r3, #0
 8008c68:	e378      	b.n	800935c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008c6a:	4b72      	ldr	r3, [pc, #456]	@ (8008e34 <tcp_process+0x298>)
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	f003 0302 	and.w	r3, r3, #2
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d010      	beq.n	8008c98 <tcp_process+0xfc>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	7d1b      	ldrb	r3, [r3, #20]
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d00c      	beq.n	8008c98 <tcp_process+0xfc>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	7d1b      	ldrb	r3, [r3, #20]
 8008c82:	2b03      	cmp	r3, #3
 8008c84:	d008      	beq.n	8008c98 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	8b5b      	ldrh	r3, [r3, #26]
 8008c8a:	f043 0302 	orr.w	r3, r3, #2
 8008c8e:	b29a      	uxth	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008c94:	2300      	movs	r3, #0
 8008c96:	e361      	b.n	800935c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	8b5b      	ldrh	r3, [r3, #26]
 8008c9c:	f003 0310 	and.w	r3, r3, #16
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d103      	bne.n	8008cac <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008ca4:	4b68      	ldr	r3, [pc, #416]	@ (8008e48 <tcp_process+0x2ac>)
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f001 fc2b 	bl	800a518 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	7d1b      	ldrb	r3, [r3, #20]
 8008cc6:	3b02      	subs	r3, #2
 8008cc8:	2b07      	cmp	r3, #7
 8008cca:	f200 8337 	bhi.w	800933c <tcp_process+0x7a0>
 8008cce:	a201      	add	r2, pc, #4	@ (adr r2, 8008cd4 <tcp_process+0x138>)
 8008cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd4:	08008cf5 	.word	0x08008cf5
 8008cd8:	08008f25 	.word	0x08008f25
 8008cdc:	0800909d 	.word	0x0800909d
 8008ce0:	080090c7 	.word	0x080090c7
 8008ce4:	080091eb 	.word	0x080091eb
 8008ce8:	0800909d 	.word	0x0800909d
 8008cec:	08009277 	.word	0x08009277
 8008cf0:	08009307 	.word	0x08009307
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008cf4:	4b4f      	ldr	r3, [pc, #316]	@ (8008e34 <tcp_process+0x298>)
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	f003 0310 	and.w	r3, r3, #16
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f000 80e4 	beq.w	8008eca <tcp_process+0x32e>
 8008d02:	4b4c      	ldr	r3, [pc, #304]	@ (8008e34 <tcp_process+0x298>)
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	f003 0302 	and.w	r3, r3, #2
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f000 80dd 	beq.w	8008eca <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d14:	1c5a      	adds	r2, r3, #1
 8008d16:	4b48      	ldr	r3, [pc, #288]	@ (8008e38 <tcp_process+0x29c>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	f040 80d5 	bne.w	8008eca <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008d20:	4b46      	ldr	r3, [pc, #280]	@ (8008e3c <tcp_process+0x2a0>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	1c5a      	adds	r2, r3, #1
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8008d32:	4b41      	ldr	r3, [pc, #260]	@ (8008e38 <tcp_process+0x29c>)
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008d3a:	4b44      	ldr	r3, [pc, #272]	@ (8008e4c <tcp_process+0x2b0>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	89db      	ldrh	r3, [r3, #14]
 8008d40:	b29a      	uxth	r2, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008d54:	4b39      	ldr	r3, [pc, #228]	@ (8008e3c <tcp_process+0x2a0>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	1e5a      	subs	r2, r3, #1
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2204      	movs	r2, #4
 8008d62:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	3304      	adds	r3, #4
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f004 ff43 	bl	800dbf8 <ip4_route>
 8008d72:	4601      	mov	r1, r0
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	3304      	adds	r3, #4
 8008d78:	461a      	mov	r2, r3
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f7ff f88c 	bl	8007e98 <tcp_eff_send_mss_netif>
 8008d80:	4603      	mov	r3, r0
 8008d82:	461a      	mov	r2, r3
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008d8c:	009a      	lsls	r2, r3, #2
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008d92:	005b      	lsls	r3, r3, #1
 8008d94:	f241 111c 	movw	r1, #4380	@ 0x111c
 8008d98:	428b      	cmp	r3, r1
 8008d9a:	bf38      	it	cc
 8008d9c:	460b      	movcc	r3, r1
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d204      	bcs.n	8008dac <tcp_process+0x210>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	e00d      	b.n	8008dc8 <tcp_process+0x22c>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008db0:	005b      	lsls	r3, r3, #1
 8008db2:	f241 121c 	movw	r2, #4380	@ 0x111c
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d904      	bls.n	8008dc4 <tcp_process+0x228>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008dbe:	005b      	lsls	r3, r3, #1
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	e001      	b.n	8008dc8 <tcp_process+0x22c>
 8008dc4:	f241 131c 	movw	r3, #4380	@ 0x111c
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d106      	bne.n	8008de6 <tcp_process+0x24a>
 8008dd8:	4b13      	ldr	r3, [pc, #76]	@ (8008e28 <tcp_process+0x28c>)
 8008dda:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8008dde:	491c      	ldr	r1, [pc, #112]	@ (8008e50 <tcp_process+0x2b4>)
 8008de0:	4813      	ldr	r0, [pc, #76]	@ (8008e30 <tcp_process+0x294>)
 8008de2:	f006 fabb 	bl	800f35c <iprintf>
        --pcb->snd_queuelen;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8008dec:	3b01      	subs	r3, #1
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dfa:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d12a      	bne.n	8008e58 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e06:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d106      	bne.n	8008e1c <tcp_process+0x280>
 8008e0e:	4b06      	ldr	r3, [pc, #24]	@ (8008e28 <tcp_process+0x28c>)
 8008e10:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8008e14:	490f      	ldr	r1, [pc, #60]	@ (8008e54 <tcp_process+0x2b8>)
 8008e16:	4806      	ldr	r0, [pc, #24]	@ (8008e30 <tcp_process+0x294>)
 8008e18:	f006 faa0 	bl	800f35c <iprintf>
          pcb->unsent = rseg->next;
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008e24:	e01c      	b.n	8008e60 <tcp_process+0x2c4>
 8008e26:	bf00      	nop
 8008e28:	0801197c 	.word	0x0801197c
 8008e2c:	08011bb4 	.word	0x08011bb4
 8008e30:	080119c8 	.word	0x080119c8
 8008e34:	20008320 	.word	0x20008320
 8008e38:	20008318 	.word	0x20008318
 8008e3c:	20008314 	.word	0x20008314
 8008e40:	08011bd0 	.word	0x08011bd0
 8008e44:	20008321 	.word	0x20008321
 8008e48:	200082dc 	.word	0x200082dc
 8008e4c:	20008304 	.word	0x20008304
 8008e50:	08011bf0 	.word	0x08011bf0
 8008e54:	08011c08 	.word	0x08011c08
        } else {
          pcb->unacked = rseg->next;
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8008e60:	69f8      	ldr	r0, [r7, #28]
 8008e62:	f7fe fcd6 	bl	8007812 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d104      	bne.n	8008e78 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008e74:	861a      	strh	r2, [r3, #48]	@ 0x30
 8008e76:	e006      	b.n	8008e86 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00a      	beq.n	8008ea6 <tcp_process+0x30a>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	6910      	ldr	r0, [r2, #16]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	6879      	ldr	r1, [r7, #4]
 8008e9e:	4798      	blx	r3
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	76bb      	strb	r3, [r7, #26]
 8008ea4:	e001      	b.n	8008eaa <tcp_process+0x30e>
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008eaa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008eae:	f113 0f0d 	cmn.w	r3, #13
 8008eb2:	d102      	bne.n	8008eba <tcp_process+0x31e>
          return ERR_ABRT;
 8008eb4:	f06f 030c 	mvn.w	r3, #12
 8008eb8:	e250      	b.n	800935c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	8b5b      	ldrh	r3, [r3, #26]
 8008ebe:	f043 0302 	orr.w	r3, r3, #2
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008ec8:	e23a      	b.n	8009340 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008eca:	4b98      	ldr	r3, [pc, #608]	@ (800912c <tcp_process+0x590>)
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	f003 0310 	and.w	r3, r3, #16
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f000 8234 	beq.w	8009340 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ed8:	4b95      	ldr	r3, [pc, #596]	@ (8009130 <tcp_process+0x594>)
 8008eda:	6819      	ldr	r1, [r3, #0]
 8008edc:	4b95      	ldr	r3, [pc, #596]	@ (8009134 <tcp_process+0x598>)
 8008ede:	881b      	ldrh	r3, [r3, #0]
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	4b95      	ldr	r3, [pc, #596]	@ (8009138 <tcp_process+0x59c>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008ee8:	4b94      	ldr	r3, [pc, #592]	@ (800913c <tcp_process+0x5a0>)
 8008eea:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008eec:	885b      	ldrh	r3, [r3, #2]
 8008eee:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008ef0:	4a92      	ldr	r2, [pc, #584]	@ (800913c <tcp_process+0x5a0>)
 8008ef2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ef4:	8812      	ldrh	r2, [r2, #0]
 8008ef6:	b292      	uxth	r2, r2
 8008ef8:	9202      	str	r2, [sp, #8]
 8008efa:	9301      	str	r3, [sp, #4]
 8008efc:	4b90      	ldr	r3, [pc, #576]	@ (8009140 <tcp_process+0x5a4>)
 8008efe:	9300      	str	r3, [sp, #0]
 8008f00:	4b90      	ldr	r3, [pc, #576]	@ (8009144 <tcp_process+0x5a8>)
 8008f02:	4602      	mov	r2, r0
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f003 f8d7 	bl	800c0b8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008f10:	2b05      	cmp	r3, #5
 8008f12:	f200 8215 	bhi.w	8009340 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f002 fea3 	bl	800bc68 <tcp_rexmit_rto>
      break;
 8008f22:	e20d      	b.n	8009340 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008f24:	4b81      	ldr	r3, [pc, #516]	@ (800912c <tcp_process+0x590>)
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	f003 0310 	and.w	r3, r3, #16
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f000 80a1 	beq.w	8009074 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008f32:	4b7f      	ldr	r3, [pc, #508]	@ (8009130 <tcp_process+0x594>)
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f3a:	1ad3      	subs	r3, r2, r3
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	db7e      	blt.n	8009040 <tcp_process+0x4a4>
 8008f42:	4b7b      	ldr	r3, [pc, #492]	@ (8009130 <tcp_process+0x594>)
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f4a:	1ad3      	subs	r3, r2, r3
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	dc77      	bgt.n	8009040 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2204      	movs	r2, #4
 8008f54:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d102      	bne.n	8008f64 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8008f5e:	23fa      	movs	r3, #250	@ 0xfa
 8008f60:	76bb      	strb	r3, [r7, #26]
 8008f62:	e01d      	b.n	8008fa0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f68:	699b      	ldr	r3, [r3, #24]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d106      	bne.n	8008f7c <tcp_process+0x3e0>
 8008f6e:	4b76      	ldr	r3, [pc, #472]	@ (8009148 <tcp_process+0x5ac>)
 8008f70:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8008f74:	4975      	ldr	r1, [pc, #468]	@ (800914c <tcp_process+0x5b0>)
 8008f76:	4876      	ldr	r0, [pc, #472]	@ (8009150 <tcp_process+0x5b4>)
 8008f78:	f006 f9f0 	bl	800f35c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f80:	699b      	ldr	r3, [r3, #24]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00a      	beq.n	8008f9c <tcp_process+0x400>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f8a:	699b      	ldr	r3, [r3, #24]
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	6910      	ldr	r0, [r2, #16]
 8008f90:	2200      	movs	r2, #0
 8008f92:	6879      	ldr	r1, [r7, #4]
 8008f94:	4798      	blx	r3
 8008f96:	4603      	mov	r3, r0
 8008f98:	76bb      	strb	r3, [r7, #26]
 8008f9a:	e001      	b.n	8008fa0 <tcp_process+0x404>
 8008f9c:	23f0      	movs	r3, #240	@ 0xf0
 8008f9e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008fa0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00a      	beq.n	8008fbe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008fa8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008fac:	f113 0f0d 	cmn.w	r3, #13
 8008fb0:	d002      	beq.n	8008fb8 <tcp_process+0x41c>
              tcp_abort(pcb);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f7fd fde2 	bl	8006b7c <tcp_abort>
            }
            return ERR_ABRT;
 8008fb8:	f06f 030c 	mvn.w	r3, #12
 8008fbc:	e1ce      	b.n	800935c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 fae0 	bl	8009584 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008fc4:	4b63      	ldr	r3, [pc, #396]	@ (8009154 <tcp_process+0x5b8>)
 8008fc6:	881b      	ldrh	r3, [r3, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d005      	beq.n	8008fd8 <tcp_process+0x43c>
            recv_acked--;
 8008fcc:	4b61      	ldr	r3, [pc, #388]	@ (8009154 <tcp_process+0x5b8>)
 8008fce:	881b      	ldrh	r3, [r3, #0]
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	b29a      	uxth	r2, r3
 8008fd4:	4b5f      	ldr	r3, [pc, #380]	@ (8009154 <tcp_process+0x5b8>)
 8008fd6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008fdc:	009a      	lsls	r2, r3, #2
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008fe2:	005b      	lsls	r3, r3, #1
 8008fe4:	f241 111c 	movw	r1, #4380	@ 0x111c
 8008fe8:	428b      	cmp	r3, r1
 8008fea:	bf38      	it	cc
 8008fec:	460b      	movcc	r3, r1
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d204      	bcs.n	8008ffc <tcp_process+0x460>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	e00d      	b.n	8009018 <tcp_process+0x47c>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009000:	005b      	lsls	r3, r3, #1
 8009002:	f241 121c 	movw	r2, #4380	@ 0x111c
 8009006:	4293      	cmp	r3, r2
 8009008:	d904      	bls.n	8009014 <tcp_process+0x478>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800900e:	005b      	lsls	r3, r3, #1
 8009010:	b29b      	uxth	r3, r3
 8009012:	e001      	b.n	8009018 <tcp_process+0x47c>
 8009014:	f241 131c 	movw	r3, #4380	@ 0x111c
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800901e:	4b4e      	ldr	r3, [pc, #312]	@ (8009158 <tcp_process+0x5bc>)
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	f003 0320 	and.w	r3, r3, #32
 8009026:	2b00      	cmp	r3, #0
 8009028:	d037      	beq.n	800909a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	8b5b      	ldrh	r3, [r3, #26]
 800902e:	f043 0302 	orr.w	r3, r3, #2
 8009032:	b29a      	uxth	r2, r3
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2207      	movs	r2, #7
 800903c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800903e:	e02c      	b.n	800909a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009040:	4b3b      	ldr	r3, [pc, #236]	@ (8009130 <tcp_process+0x594>)
 8009042:	6819      	ldr	r1, [r3, #0]
 8009044:	4b3b      	ldr	r3, [pc, #236]	@ (8009134 <tcp_process+0x598>)
 8009046:	881b      	ldrh	r3, [r3, #0]
 8009048:	461a      	mov	r2, r3
 800904a:	4b3b      	ldr	r3, [pc, #236]	@ (8009138 <tcp_process+0x59c>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009050:	4b3a      	ldr	r3, [pc, #232]	@ (800913c <tcp_process+0x5a0>)
 8009052:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009054:	885b      	ldrh	r3, [r3, #2]
 8009056:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009058:	4a38      	ldr	r2, [pc, #224]	@ (800913c <tcp_process+0x5a0>)
 800905a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800905c:	8812      	ldrh	r2, [r2, #0]
 800905e:	b292      	uxth	r2, r2
 8009060:	9202      	str	r2, [sp, #8]
 8009062:	9301      	str	r3, [sp, #4]
 8009064:	4b36      	ldr	r3, [pc, #216]	@ (8009140 <tcp_process+0x5a4>)
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	4b36      	ldr	r3, [pc, #216]	@ (8009144 <tcp_process+0x5a8>)
 800906a:	4602      	mov	r2, r0
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f003 f823 	bl	800c0b8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8009072:	e167      	b.n	8009344 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009074:	4b2d      	ldr	r3, [pc, #180]	@ (800912c <tcp_process+0x590>)
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	f003 0302 	and.w	r3, r3, #2
 800907c:	2b00      	cmp	r3, #0
 800907e:	f000 8161 	beq.w	8009344 <tcp_process+0x7a8>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009086:	1e5a      	subs	r2, r3, #1
 8009088:	4b2b      	ldr	r3, [pc, #172]	@ (8009138 <tcp_process+0x59c>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	429a      	cmp	r2, r3
 800908e:	f040 8159 	bne.w	8009344 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f002 fe0a 	bl	800bcac <tcp_rexmit>
      break;
 8009098:	e154      	b.n	8009344 <tcp_process+0x7a8>
 800909a:	e153      	b.n	8009344 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 fa71 	bl	8009584 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80090a2:	4b2d      	ldr	r3, [pc, #180]	@ (8009158 <tcp_process+0x5bc>)
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	f003 0320 	and.w	r3, r3, #32
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	f000 814c 	beq.w	8009348 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	8b5b      	ldrh	r3, [r3, #26]
 80090b4:	f043 0302 	orr.w	r3, r3, #2
 80090b8:	b29a      	uxth	r2, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2207      	movs	r2, #7
 80090c2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80090c4:	e140      	b.n	8009348 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 fa5c 	bl	8009584 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80090cc:	4b22      	ldr	r3, [pc, #136]	@ (8009158 <tcp_process+0x5bc>)
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	f003 0320 	and.w	r3, r3, #32
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d071      	beq.n	80091bc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80090d8:	4b14      	ldr	r3, [pc, #80]	@ (800912c <tcp_process+0x590>)
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	f003 0310 	and.w	r3, r3, #16
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d060      	beq.n	80091a6 <tcp_process+0x60a>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80090e8:	4b11      	ldr	r3, [pc, #68]	@ (8009130 <tcp_process+0x594>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d15a      	bne.n	80091a6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d156      	bne.n	80091a6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	8b5b      	ldrh	r3, [r3, #26]
 80090fc:	f043 0302 	orr.w	r3, r3, #2
 8009100:	b29a      	uxth	r2, r3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f7fe fdbc 	bl	8007c84 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800910c:	4b13      	ldr	r3, [pc, #76]	@ (800915c <tcp_process+0x5c0>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	429a      	cmp	r2, r3
 8009114:	d105      	bne.n	8009122 <tcp_process+0x586>
 8009116:	4b11      	ldr	r3, [pc, #68]	@ (800915c <tcp_process+0x5c0>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	4a0f      	ldr	r2, [pc, #60]	@ (800915c <tcp_process+0x5c0>)
 800911e:	6013      	str	r3, [r2, #0]
 8009120:	e02e      	b.n	8009180 <tcp_process+0x5e4>
 8009122:	4b0e      	ldr	r3, [pc, #56]	@ (800915c <tcp_process+0x5c0>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	617b      	str	r3, [r7, #20]
 8009128:	e027      	b.n	800917a <tcp_process+0x5de>
 800912a:	bf00      	nop
 800912c:	20008320 	.word	0x20008320
 8009130:	20008318 	.word	0x20008318
 8009134:	2000831e 	.word	0x2000831e
 8009138:	20008314 	.word	0x20008314
 800913c:	20008304 	.word	0x20008304
 8009140:	20004d7c 	.word	0x20004d7c
 8009144:	20004d80 	.word	0x20004d80
 8009148:	0801197c 	.word	0x0801197c
 800914c:	08011c1c 	.word	0x08011c1c
 8009150:	080119c8 	.word	0x080119c8
 8009154:	2000831c 	.word	0x2000831c
 8009158:	20008321 	.word	0x20008321
 800915c:	200082e8 	.word	0x200082e8
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	429a      	cmp	r2, r3
 8009168:	d104      	bne.n	8009174 <tcp_process+0x5d8>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	68da      	ldr	r2, [r3, #12]
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	60da      	str	r2, [r3, #12]
 8009172:	e005      	b.n	8009180 <tcp_process+0x5e4>
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	617b      	str	r3, [r7, #20]
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d1ef      	bne.n	8009160 <tcp_process+0x5c4>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	60da      	str	r2, [r3, #12]
 8009186:	4b77      	ldr	r3, [pc, #476]	@ (8009364 <tcp_process+0x7c8>)
 8009188:	2201      	movs	r2, #1
 800918a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	220a      	movs	r2, #10
 8009190:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009192:	4b75      	ldr	r3, [pc, #468]	@ (8009368 <tcp_process+0x7cc>)
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	60da      	str	r2, [r3, #12]
 800919a:	4a73      	ldr	r2, [pc, #460]	@ (8009368 <tcp_process+0x7cc>)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6013      	str	r3, [r2, #0]
 80091a0:	f003 f94c 	bl	800c43c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80091a4:	e0d2      	b.n	800934c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	8b5b      	ldrh	r3, [r3, #26]
 80091aa:	f043 0302 	orr.w	r3, r3, #2
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2208      	movs	r2, #8
 80091b8:	751a      	strb	r2, [r3, #20]
      break;
 80091ba:	e0c7      	b.n	800934c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80091bc:	4b6b      	ldr	r3, [pc, #428]	@ (800936c <tcp_process+0x7d0>)
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	f003 0310 	and.w	r3, r3, #16
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f000 80c1 	beq.w	800934c <tcp_process+0x7b0>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80091ce:	4b68      	ldr	r3, [pc, #416]	@ (8009370 <tcp_process+0x7d4>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	f040 80ba 	bne.w	800934c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f040 80b5 	bne.w	800934c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2206      	movs	r2, #6
 80091e6:	751a      	strb	r2, [r3, #20]
      break;
 80091e8:	e0b0      	b.n	800934c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f9ca 	bl	8009584 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80091f0:	4b60      	ldr	r3, [pc, #384]	@ (8009374 <tcp_process+0x7d8>)
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	f003 0320 	and.w	r3, r3, #32
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	f000 80a9 	beq.w	8009350 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	8b5b      	ldrh	r3, [r3, #26]
 8009202:	f043 0302 	orr.w	r3, r3, #2
 8009206:	b29a      	uxth	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f7fe fd39 	bl	8007c84 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009212:	4b59      	ldr	r3, [pc, #356]	@ (8009378 <tcp_process+0x7dc>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	429a      	cmp	r2, r3
 800921a:	d105      	bne.n	8009228 <tcp_process+0x68c>
 800921c:	4b56      	ldr	r3, [pc, #344]	@ (8009378 <tcp_process+0x7dc>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	4a55      	ldr	r2, [pc, #340]	@ (8009378 <tcp_process+0x7dc>)
 8009224:	6013      	str	r3, [r2, #0]
 8009226:	e013      	b.n	8009250 <tcp_process+0x6b4>
 8009228:	4b53      	ldr	r3, [pc, #332]	@ (8009378 <tcp_process+0x7dc>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	613b      	str	r3, [r7, #16]
 800922e:	e00c      	b.n	800924a <tcp_process+0x6ae>
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	429a      	cmp	r2, r3
 8009238:	d104      	bne.n	8009244 <tcp_process+0x6a8>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	68da      	ldr	r2, [r3, #12]
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	60da      	str	r2, [r3, #12]
 8009242:	e005      	b.n	8009250 <tcp_process+0x6b4>
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	613b      	str	r3, [r7, #16]
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d1ef      	bne.n	8009230 <tcp_process+0x694>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	60da      	str	r2, [r3, #12]
 8009256:	4b43      	ldr	r3, [pc, #268]	@ (8009364 <tcp_process+0x7c8>)
 8009258:	2201      	movs	r2, #1
 800925a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	220a      	movs	r2, #10
 8009260:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009262:	4b41      	ldr	r3, [pc, #260]	@ (8009368 <tcp_process+0x7cc>)
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	60da      	str	r2, [r3, #12]
 800926a:	4a3f      	ldr	r2, [pc, #252]	@ (8009368 <tcp_process+0x7cc>)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6013      	str	r3, [r2, #0]
 8009270:	f003 f8e4 	bl	800c43c <tcp_timer_needed>
      }
      break;
 8009274:	e06c      	b.n	8009350 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 f984 	bl	8009584 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800927c:	4b3b      	ldr	r3, [pc, #236]	@ (800936c <tcp_process+0x7d0>)
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	f003 0310 	and.w	r3, r3, #16
 8009284:	2b00      	cmp	r3, #0
 8009286:	d065      	beq.n	8009354 <tcp_process+0x7b8>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800928c:	4b38      	ldr	r3, [pc, #224]	@ (8009370 <tcp_process+0x7d4>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	429a      	cmp	r2, r3
 8009292:	d15f      	bne.n	8009354 <tcp_process+0x7b8>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009298:	2b00      	cmp	r3, #0
 800929a:	d15b      	bne.n	8009354 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f7fe fcf1 	bl	8007c84 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80092a2:	4b35      	ldr	r3, [pc, #212]	@ (8009378 <tcp_process+0x7dc>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d105      	bne.n	80092b8 <tcp_process+0x71c>
 80092ac:	4b32      	ldr	r3, [pc, #200]	@ (8009378 <tcp_process+0x7dc>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	4a31      	ldr	r2, [pc, #196]	@ (8009378 <tcp_process+0x7dc>)
 80092b4:	6013      	str	r3, [r2, #0]
 80092b6:	e013      	b.n	80092e0 <tcp_process+0x744>
 80092b8:	4b2f      	ldr	r3, [pc, #188]	@ (8009378 <tcp_process+0x7dc>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	60fb      	str	r3, [r7, #12]
 80092be:	e00c      	b.n	80092da <tcp_process+0x73e>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d104      	bne.n	80092d4 <tcp_process+0x738>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	68da      	ldr	r2, [r3, #12]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	60da      	str	r2, [r3, #12]
 80092d2:	e005      	b.n	80092e0 <tcp_process+0x744>
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	60fb      	str	r3, [r7, #12]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d1ef      	bne.n	80092c0 <tcp_process+0x724>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	60da      	str	r2, [r3, #12]
 80092e6:	4b1f      	ldr	r3, [pc, #124]	@ (8009364 <tcp_process+0x7c8>)
 80092e8:	2201      	movs	r2, #1
 80092ea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	220a      	movs	r2, #10
 80092f0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80092f2:	4b1d      	ldr	r3, [pc, #116]	@ (8009368 <tcp_process+0x7cc>)
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	60da      	str	r2, [r3, #12]
 80092fa:	4a1b      	ldr	r2, [pc, #108]	@ (8009368 <tcp_process+0x7cc>)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6013      	str	r3, [r2, #0]
 8009300:	f003 f89c 	bl	800c43c <tcp_timer_needed>
      }
      break;
 8009304:	e026      	b.n	8009354 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 f93c 	bl	8009584 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800930c:	4b17      	ldr	r3, [pc, #92]	@ (800936c <tcp_process+0x7d0>)
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	f003 0310 	and.w	r3, r3, #16
 8009314:	2b00      	cmp	r3, #0
 8009316:	d01f      	beq.n	8009358 <tcp_process+0x7bc>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800931c:	4b14      	ldr	r3, [pc, #80]	@ (8009370 <tcp_process+0x7d4>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	429a      	cmp	r2, r3
 8009322:	d119      	bne.n	8009358 <tcp_process+0x7bc>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009328:	2b00      	cmp	r3, #0
 800932a:	d115      	bne.n	8009358 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800932c:	4b11      	ldr	r3, [pc, #68]	@ (8009374 <tcp_process+0x7d8>)
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	f043 0310 	orr.w	r3, r3, #16
 8009334:	b2da      	uxtb	r2, r3
 8009336:	4b0f      	ldr	r3, [pc, #60]	@ (8009374 <tcp_process+0x7d8>)
 8009338:	701a      	strb	r2, [r3, #0]
      }
      break;
 800933a:	e00d      	b.n	8009358 <tcp_process+0x7bc>
    default:
      break;
 800933c:	bf00      	nop
 800933e:	e00c      	b.n	800935a <tcp_process+0x7be>
      break;
 8009340:	bf00      	nop
 8009342:	e00a      	b.n	800935a <tcp_process+0x7be>
      break;
 8009344:	bf00      	nop
 8009346:	e008      	b.n	800935a <tcp_process+0x7be>
      break;
 8009348:	bf00      	nop
 800934a:	e006      	b.n	800935a <tcp_process+0x7be>
      break;
 800934c:	bf00      	nop
 800934e:	e004      	b.n	800935a <tcp_process+0x7be>
      break;
 8009350:	bf00      	nop
 8009352:	e002      	b.n	800935a <tcp_process+0x7be>
      break;
 8009354:	bf00      	nop
 8009356:	e000      	b.n	800935a <tcp_process+0x7be>
      break;
 8009358:	bf00      	nop
  }
  return ERR_OK;
 800935a:	2300      	movs	r3, #0
}
 800935c:	4618      	mov	r0, r3
 800935e:	3724      	adds	r7, #36	@ 0x24
 8009360:	46bd      	mov	sp, r7
 8009362:	bd90      	pop	{r4, r7, pc}
 8009364:	200082f0 	.word	0x200082f0
 8009368:	200082ec 	.word	0x200082ec
 800936c:	20008320 	.word	0x20008320
 8009370:	20008318 	.word	0x20008318
 8009374:	20008321 	.word	0x20008321
 8009378:	200082e8 	.word	0x200082e8

0800937c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800937c:	b590      	push	{r4, r7, lr}
 800937e:	b085      	sub	sp, #20
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d106      	bne.n	800939a <tcp_oos_insert_segment+0x1e>
 800938c:	4b3b      	ldr	r3, [pc, #236]	@ (800947c <tcp_oos_insert_segment+0x100>)
 800938e:	f240 421f 	movw	r2, #1055	@ 0x41f
 8009392:	493b      	ldr	r1, [pc, #236]	@ (8009480 <tcp_oos_insert_segment+0x104>)
 8009394:	483b      	ldr	r0, [pc, #236]	@ (8009484 <tcp_oos_insert_segment+0x108>)
 8009396:	f005 ffe1 	bl	800f35c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	899b      	ldrh	r3, [r3, #12]
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7fb fb04 	bl	80049b0 <lwip_htons>
 80093a8:	4603      	mov	r3, r0
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	f003 0301 	and.w	r3, r3, #1
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d028      	beq.n	8009406 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80093b4:	6838      	ldr	r0, [r7, #0]
 80093b6:	f7fe fa17 	bl	80077e8 <tcp_segs_free>
    next = NULL;
 80093ba:	2300      	movs	r3, #0
 80093bc:	603b      	str	r3, [r7, #0]
 80093be:	e056      	b.n	800946e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	899b      	ldrh	r3, [r3, #12]
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7fb faf1 	bl	80049b0 <lwip_htons>
 80093ce:	4603      	mov	r3, r0
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	f003 0301 	and.w	r3, r3, #1
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00d      	beq.n	80093f6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	899b      	ldrh	r3, [r3, #12]
 80093e0:	b29c      	uxth	r4, r3
 80093e2:	2001      	movs	r0, #1
 80093e4:	f7fb fae4 	bl	80049b0 <lwip_htons>
 80093e8:	4603      	mov	r3, r0
 80093ea:	461a      	mov	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	68db      	ldr	r3, [r3, #12]
 80093f0:	4322      	orrs	r2, r4
 80093f2:	b292      	uxth	r2, r2
 80093f4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f7fe fa06 	bl	8007812 <tcp_seg_free>
    while (next &&
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00e      	beq.n	800942a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	891b      	ldrh	r3, [r3, #8]
 8009410:	461a      	mov	r2, r3
 8009412:	4b1d      	ldr	r3, [pc, #116]	@ (8009488 <tcp_oos_insert_segment+0x10c>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	441a      	add	r2, r3
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	6839      	ldr	r1, [r7, #0]
 8009420:	8909      	ldrh	r1, [r1, #8]
 8009422:	440b      	add	r3, r1
 8009424:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009426:	2b00      	cmp	r3, #0
 8009428:	daca      	bge.n	80093c0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d01e      	beq.n	800946e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	891b      	ldrh	r3, [r3, #8]
 8009434:	461a      	mov	r2, r3
 8009436:	4b14      	ldr	r3, [pc, #80]	@ (8009488 <tcp_oos_insert_segment+0x10c>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	441a      	add	r2, r3
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009444:	2b00      	cmp	r3, #0
 8009446:	dd12      	ble.n	800946e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	b29a      	uxth	r2, r3
 8009450:	4b0d      	ldr	r3, [pc, #52]	@ (8009488 <tcp_oos_insert_segment+0x10c>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	b29b      	uxth	r3, r3
 8009456:	1ad3      	subs	r3, r2, r3
 8009458:	b29a      	uxth	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	685a      	ldr	r2, [r3, #4]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	891b      	ldrh	r3, [r3, #8]
 8009466:	4619      	mov	r1, r3
 8009468:	4610      	mov	r0, r2
 800946a:	f7fc fc79 	bl	8005d60 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	683a      	ldr	r2, [r7, #0]
 8009472:	601a      	str	r2, [r3, #0]
}
 8009474:	bf00      	nop
 8009476:	3714      	adds	r7, #20
 8009478:	46bd      	mov	sp, r7
 800947a:	bd90      	pop	{r4, r7, pc}
 800947c:	0801197c 	.word	0x0801197c
 8009480:	08011c3c 	.word	0x08011c3c
 8009484:	080119c8 	.word	0x080119c8
 8009488:	20008314 	.word	0x20008314

0800948c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800948c:	b5b0      	push	{r4, r5, r7, lr}
 800948e:	b086      	sub	sp, #24
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	607a      	str	r2, [r7, #4]
 8009498:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800949a:	e03e      	b.n	800951a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7fc fe66 	bl	800617c <pbuf_clen>
 80094b0:	4603      	mov	r3, r0
 80094b2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80094ba:	8a7a      	ldrh	r2, [r7, #18]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d906      	bls.n	80094ce <tcp_free_acked_segments+0x42>
 80094c0:	4b2a      	ldr	r3, [pc, #168]	@ (800956c <tcp_free_acked_segments+0xe0>)
 80094c2:	f240 4257 	movw	r2, #1111	@ 0x457
 80094c6:	492a      	ldr	r1, [pc, #168]	@ (8009570 <tcp_free_acked_segments+0xe4>)
 80094c8:	482a      	ldr	r0, [pc, #168]	@ (8009574 <tcp_free_acked_segments+0xe8>)
 80094ca:	f005 ff47 	bl	800f35c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80094d4:	8a7b      	ldrh	r3, [r7, #18]
 80094d6:	1ad3      	subs	r3, r2, r3
 80094d8:	b29a      	uxth	r2, r3
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	891a      	ldrh	r2, [r3, #8]
 80094e4:	4b24      	ldr	r3, [pc, #144]	@ (8009578 <tcp_free_acked_segments+0xec>)
 80094e6:	881b      	ldrh	r3, [r3, #0]
 80094e8:	4413      	add	r3, r2
 80094ea:	b29a      	uxth	r2, r3
 80094ec:	4b22      	ldr	r3, [pc, #136]	@ (8009578 <tcp_free_acked_segments+0xec>)
 80094ee:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80094f0:	6978      	ldr	r0, [r7, #20]
 80094f2:	f7fe f98e 	bl	8007812 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00c      	beq.n	800951a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d109      	bne.n	800951a <tcp_free_acked_segments+0x8e>
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d106      	bne.n	800951a <tcp_free_acked_segments+0x8e>
 800950c:	4b17      	ldr	r3, [pc, #92]	@ (800956c <tcp_free_acked_segments+0xe0>)
 800950e:	f240 4261 	movw	r2, #1121	@ 0x461
 8009512:	491a      	ldr	r1, [pc, #104]	@ (800957c <tcp_free_acked_segments+0xf0>)
 8009514:	4817      	ldr	r0, [pc, #92]	@ (8009574 <tcp_free_acked_segments+0xe8>)
 8009516:	f005 ff21 	bl	800f35c <iprintf>
  while (seg_list != NULL &&
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d020      	beq.n	8009562 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	4618      	mov	r0, r3
 8009528:	f7fb fa58 	bl	80049dc <lwip_htonl>
 800952c:	4604      	mov	r4, r0
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	891b      	ldrh	r3, [r3, #8]
 8009532:	461d      	mov	r5, r3
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	899b      	ldrh	r3, [r3, #12]
 800953a:	b29b      	uxth	r3, r3
 800953c:	4618      	mov	r0, r3
 800953e:	f7fb fa37 	bl	80049b0 <lwip_htons>
 8009542:	4603      	mov	r3, r0
 8009544:	b2db      	uxtb	r3, r3
 8009546:	f003 0303 	and.w	r3, r3, #3
 800954a:	2b00      	cmp	r3, #0
 800954c:	d001      	beq.n	8009552 <tcp_free_acked_segments+0xc6>
 800954e:	2301      	movs	r3, #1
 8009550:	e000      	b.n	8009554 <tcp_free_acked_segments+0xc8>
 8009552:	2300      	movs	r3, #0
 8009554:	442b      	add	r3, r5
 8009556:	18e2      	adds	r2, r4, r3
 8009558:	4b09      	ldr	r3, [pc, #36]	@ (8009580 <tcp_free_acked_segments+0xf4>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800955e:	2b00      	cmp	r3, #0
 8009560:	dd9c      	ble.n	800949c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009562:	68bb      	ldr	r3, [r7, #8]
}
 8009564:	4618      	mov	r0, r3
 8009566:	3718      	adds	r7, #24
 8009568:	46bd      	mov	sp, r7
 800956a:	bdb0      	pop	{r4, r5, r7, pc}
 800956c:	0801197c 	.word	0x0801197c
 8009570:	08011c64 	.word	0x08011c64
 8009574:	080119c8 	.word	0x080119c8
 8009578:	2000831c 	.word	0x2000831c
 800957c:	08011c8c 	.word	0x08011c8c
 8009580:	20008318 	.word	0x20008318

08009584 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009584:	b5b0      	push	{r4, r5, r7, lr}
 8009586:	b094      	sub	sp, #80	@ 0x50
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800958c:	2300      	movs	r3, #0
 800958e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d106      	bne.n	80095a4 <tcp_receive+0x20>
 8009596:	4b91      	ldr	r3, [pc, #580]	@ (80097dc <tcp_receive+0x258>)
 8009598:	f240 427b 	movw	r2, #1147	@ 0x47b
 800959c:	4990      	ldr	r1, [pc, #576]	@ (80097e0 <tcp_receive+0x25c>)
 800959e:	4891      	ldr	r0, [pc, #580]	@ (80097e4 <tcp_receive+0x260>)
 80095a0:	f005 fedc 	bl	800f35c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	7d1b      	ldrb	r3, [r3, #20]
 80095a8:	2b03      	cmp	r3, #3
 80095aa:	d806      	bhi.n	80095ba <tcp_receive+0x36>
 80095ac:	4b8b      	ldr	r3, [pc, #556]	@ (80097dc <tcp_receive+0x258>)
 80095ae:	f240 427c 	movw	r2, #1148	@ 0x47c
 80095b2:	498d      	ldr	r1, [pc, #564]	@ (80097e8 <tcp_receive+0x264>)
 80095b4:	488b      	ldr	r0, [pc, #556]	@ (80097e4 <tcp_receive+0x260>)
 80095b6:	f005 fed1 	bl	800f35c <iprintf>

  if (flags & TCP_ACK) {
 80095ba:	4b8c      	ldr	r3, [pc, #560]	@ (80097ec <tcp_receive+0x268>)
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	f003 0310 	and.w	r3, r3, #16
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	f000 8264 	beq.w	8009a90 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80095ce:	461a      	mov	r2, r3
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095d4:	4413      	add	r3, r2
 80095d6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80095dc:	4b84      	ldr	r3, [pc, #528]	@ (80097f0 <tcp_receive+0x26c>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	db1b      	blt.n	800961e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80095ea:	4b81      	ldr	r3, [pc, #516]	@ (80097f0 <tcp_receive+0x26c>)
 80095ec:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d106      	bne.n	8009600 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80095f6:	4b7f      	ldr	r3, [pc, #508]	@ (80097f4 <tcp_receive+0x270>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	1ad3      	subs	r3, r2, r3
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	db0e      	blt.n	800961e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009604:	4b7b      	ldr	r3, [pc, #492]	@ (80097f4 <tcp_receive+0x270>)
 8009606:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009608:	429a      	cmp	r2, r3
 800960a:	d125      	bne.n	8009658 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800960c:	4b7a      	ldr	r3, [pc, #488]	@ (80097f8 <tcp_receive+0x274>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	89db      	ldrh	r3, [r3, #14]
 8009612:	b29a      	uxth	r2, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800961a:	429a      	cmp	r2, r3
 800961c:	d91c      	bls.n	8009658 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800961e:	4b76      	ldr	r3, [pc, #472]	@ (80097f8 <tcp_receive+0x274>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	89db      	ldrh	r3, [r3, #14]
 8009624:	b29a      	uxth	r2, r3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009638:	429a      	cmp	r2, r3
 800963a:	d205      	bcs.n	8009648 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8009648:	4b69      	ldr	r3, [pc, #420]	@ (80097f0 <tcp_receive+0x26c>)
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8009650:	4b68      	ldr	r3, [pc, #416]	@ (80097f4 <tcp_receive+0x270>)
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009658:	4b66      	ldr	r3, [pc, #408]	@ (80097f4 <tcp_receive+0x270>)
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	2b00      	cmp	r3, #0
 8009664:	dc58      	bgt.n	8009718 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8009666:	4b65      	ldr	r3, [pc, #404]	@ (80097fc <tcp_receive+0x278>)
 8009668:	881b      	ldrh	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d14b      	bne.n	8009706 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8009678:	4413      	add	r3, r2
 800967a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800967c:	429a      	cmp	r2, r3
 800967e:	d142      	bne.n	8009706 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009686:	2b00      	cmp	r3, #0
 8009688:	db3d      	blt.n	8009706 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800968e:	4b59      	ldr	r3, [pc, #356]	@ (80097f4 <tcp_receive+0x270>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	429a      	cmp	r2, r3
 8009694:	d137      	bne.n	8009706 <tcp_receive+0x182>
              found_dupack = 1;
 8009696:	2301      	movs	r3, #1
 8009698:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80096a0:	2bff      	cmp	r3, #255	@ 0xff
 80096a2:	d007      	beq.n	80096b4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80096aa:	3301      	adds	r3, #1
 80096ac:	b2da      	uxtb	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80096ba:	2b03      	cmp	r3, #3
 80096bc:	d91b      	bls.n	80096f6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80096c8:	4413      	add	r3, r2
 80096ca:	b29a      	uxth	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d30a      	bcc.n	80096ec <tcp_receive+0x168>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80096e0:	4413      	add	r3, r2
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80096ea:	e004      	b.n	80096f6 <tcp_receive+0x172>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80096f2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80096fc:	2b02      	cmp	r3, #2
 80096fe:	d902      	bls.n	8009706 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f002 fb3f 	bl	800bd84 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009706:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009708:	2b00      	cmp	r3, #0
 800970a:	f040 8161 	bne.w	80099d0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009716:	e15b      	b.n	80099d0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009718:	4b36      	ldr	r3, [pc, #216]	@ (80097f4 <tcp_receive+0x270>)
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009720:	1ad3      	subs	r3, r2, r3
 8009722:	3b01      	subs	r3, #1
 8009724:	2b00      	cmp	r3, #0
 8009726:	f2c0 814e 	blt.w	80099c6 <tcp_receive+0x442>
 800972a:	4b32      	ldr	r3, [pc, #200]	@ (80097f4 <tcp_receive+0x270>)
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	2b00      	cmp	r3, #0
 8009736:	f300 8146 	bgt.w	80099c6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	8b5b      	ldrh	r3, [r3, #26]
 800973e:	f003 0304 	and.w	r3, r3, #4
 8009742:	2b00      	cmp	r3, #0
 8009744:	d010      	beq.n	8009768 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	8b5b      	ldrh	r3, [r3, #26]
 800974a:	f023 0304 	bic.w	r3, r3, #4
 800974e:	b29a      	uxth	r2, r3
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009776:	10db      	asrs	r3, r3, #3
 8009778:	b21b      	sxth	r3, r3
 800977a:	b29a      	uxth	r2, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009782:	b29b      	uxth	r3, r3
 8009784:	4413      	add	r3, r2
 8009786:	b29b      	uxth	r3, r3
 8009788:	b21a      	sxth	r2, r3
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009790:	4b18      	ldr	r3, [pc, #96]	@ (80097f4 <tcp_receive+0x270>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	b29a      	uxth	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800979a:	b29b      	uxth	r3, r3
 800979c:	1ad3      	subs	r3, r2, r3
 800979e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80097a8:	4b12      	ldr	r3, [pc, #72]	@ (80097f4 <tcp_receive+0x270>)
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	7d1b      	ldrb	r3, [r3, #20]
 80097b4:	2b03      	cmp	r3, #3
 80097b6:	f240 8097 	bls.w	80098e8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d245      	bcs.n	8009856 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	8b5b      	ldrh	r3, [r3, #26]
 80097ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d014      	beq.n	8009800 <tcp_receive+0x27c>
 80097d6:	2301      	movs	r3, #1
 80097d8:	e013      	b.n	8009802 <tcp_receive+0x27e>
 80097da:	bf00      	nop
 80097dc:	0801197c 	.word	0x0801197c
 80097e0:	08011cac 	.word	0x08011cac
 80097e4:	080119c8 	.word	0x080119c8
 80097e8:	08011cc8 	.word	0x08011cc8
 80097ec:	20008320 	.word	0x20008320
 80097f0:	20008314 	.word	0x20008314
 80097f4:	20008318 	.word	0x20008318
 80097f8:	20008304 	.word	0x20008304
 80097fc:	2000831e 	.word	0x2000831e
 8009800:	2302      	movs	r3, #2
 8009802:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009806:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800980a:	b29a      	uxth	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009810:	fb12 f303 	smulbb	r3, r2, r3
 8009814:	b29b      	uxth	r3, r3
 8009816:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009818:	4293      	cmp	r3, r2
 800981a:	bf28      	it	cs
 800981c:	4613      	movcs	r3, r2
 800981e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009826:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009828:	4413      	add	r3, r2
 800982a:	b29a      	uxth	r2, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009832:	429a      	cmp	r2, r3
 8009834:	d309      	bcc.n	800984a <tcp_receive+0x2c6>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800983c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800983e:	4413      	add	r3, r2
 8009840:	b29a      	uxth	r2, r3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009848:	e04e      	b.n	80098e8 <tcp_receive+0x364>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009850:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009854:	e048      	b.n	80098e8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800985c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800985e:	4413      	add	r3, r2
 8009860:	b29a      	uxth	r2, r3
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009868:	429a      	cmp	r2, r3
 800986a:	d309      	bcc.n	8009880 <tcp_receive+0x2fc>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009872:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009874:	4413      	add	r3, r2
 8009876:	b29a      	uxth	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800987e:	e004      	b.n	800988a <tcp_receive+0x306>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009886:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009896:	429a      	cmp	r2, r3
 8009898:	d326      	bcc.n	80098e8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80098a6:	1ad3      	subs	r3, r2, r3
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80098ba:	4413      	add	r3, r2
 80098bc:	b29a      	uxth	r2, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d30a      	bcc.n	80098de <tcp_receive+0x35a>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80098d2:	4413      	add	r3, r2
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80098dc:	e004      	b.n	80098e8 <tcp_receive+0x364>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80098e4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098f0:	4a98      	ldr	r2, [pc, #608]	@ (8009b54 <tcp_receive+0x5d0>)
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f7ff fdca 	bl	800948c <tcp_free_acked_segments>
 80098f8:	4602      	mov	r2, r0
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009906:	4a94      	ldr	r2, [pc, #592]	@ (8009b58 <tcp_receive+0x5d4>)
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f7ff fdbf 	bl	800948c <tcp_free_acked_segments>
 800990e:	4602      	mov	r2, r0
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009918:	2b00      	cmp	r3, #0
 800991a:	d104      	bne.n	8009926 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009922:	861a      	strh	r2, [r3, #48]	@ 0x30
 8009924:	e002      	b.n	800992c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009936:	2b00      	cmp	r3, #0
 8009938:	d103      	bne.n	8009942 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8009948:	4b84      	ldr	r3, [pc, #528]	@ (8009b5c <tcp_receive+0x5d8>)
 800994a:	881b      	ldrh	r3, [r3, #0]
 800994c:	4413      	add	r3, r2
 800994e:	b29a      	uxth	r2, r3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	8b5b      	ldrh	r3, [r3, #26]
 800995a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800995e:	2b00      	cmp	r3, #0
 8009960:	d035      	beq.n	80099ce <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009966:	2b00      	cmp	r3, #0
 8009968:	d118      	bne.n	800999c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00c      	beq.n	800998c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	4618      	mov	r0, r3
 8009980:	f7fb f82c 	bl	80049dc <lwip_htonl>
 8009984:	4603      	mov	r3, r0
 8009986:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009988:	2b00      	cmp	r3, #0
 800998a:	dc20      	bgt.n	80099ce <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	8b5b      	ldrh	r3, [r3, #26]
 8009990:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009994:	b29a      	uxth	r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800999a:	e018      	b.n	80099ce <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7fb f817 	bl	80049dc <lwip_htonl>
 80099ae:	4603      	mov	r3, r0
 80099b0:	1ae3      	subs	r3, r4, r3
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	dc0b      	bgt.n	80099ce <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	8b5b      	ldrh	r3, [r3, #26]
 80099ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80099be:	b29a      	uxth	r2, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80099c4:	e003      	b.n	80099ce <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f002 fbc8 	bl	800c15c <tcp_send_empty_ack>
 80099cc:	e000      	b.n	80099d0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80099ce:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d05b      	beq.n	8009a90 <tcp_receive+0x50c>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099dc:	4b60      	ldr	r3, [pc, #384]	@ (8009b60 <tcp_receive+0x5dc>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	1ad3      	subs	r3, r2, r3
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	da54      	bge.n	8009a90 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80099e6:	4b5f      	ldr	r3, [pc, #380]	@ (8009b64 <tcp_receive+0x5e0>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	b29a      	uxth	r2, r3
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	1ad3      	subs	r3, r2, r3
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80099fa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009a04:	10db      	asrs	r3, r3, #3
 8009a06:	b21b      	sxth	r3, r3
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	1ad3      	subs	r3, r2, r3
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009a18:	b29a      	uxth	r2, r3
 8009a1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009a1e:	4413      	add	r3, r2
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	b21a      	sxth	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8009a28:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	da05      	bge.n	8009a3c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009a30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009a34:	425b      	negs	r3, r3
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009a3c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009a46:	109b      	asrs	r3, r3, #2
 8009a48:	b21b      	sxth	r3, r3
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	1ad3      	subs	r3, r2, r3
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009a60:	4413      	add	r3, r2
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	b21a      	sxth	r2, r3
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009a70:	10db      	asrs	r3, r3, #3
 8009a72:	b21b      	sxth	r3, r3
 8009a74:	b29a      	uxth	r2, r3
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	4413      	add	r3, r2
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	b21a      	sxth	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009a90:	4b35      	ldr	r3, [pc, #212]	@ (8009b68 <tcp_receive+0x5e4>)
 8009a92:	881b      	ldrh	r3, [r3, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	f000 84df 	beq.w	800a458 <tcp_receive+0xed4>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	7d1b      	ldrb	r3, [r3, #20]
 8009a9e:	2b06      	cmp	r3, #6
 8009aa0:	f200 84da 	bhi.w	800a458 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009aa8:	4b30      	ldr	r3, [pc, #192]	@ (8009b6c <tcp_receive+0x5e8>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	1ad3      	subs	r3, r2, r3
 8009aae:	3b01      	subs	r3, #1
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	f2c0 808f 	blt.w	8009bd4 <tcp_receive+0x650>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009aba:	4b2b      	ldr	r3, [pc, #172]	@ (8009b68 <tcp_receive+0x5e4>)
 8009abc:	881b      	ldrh	r3, [r3, #0]
 8009abe:	4619      	mov	r1, r3
 8009ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8009b6c <tcp_receive+0x5e8>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	440b      	add	r3, r1
 8009ac6:	1ad3      	subs	r3, r2, r3
 8009ac8:	3301      	adds	r3, #1
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	f300 8082 	bgt.w	8009bd4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009ad0:	4b27      	ldr	r3, [pc, #156]	@ (8009b70 <tcp_receive+0x5ec>)
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ada:	4b24      	ldr	r3, [pc, #144]	@ (8009b6c <tcp_receive+0x5e8>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	1ad3      	subs	r3, r2, r3
 8009ae0:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009ae2:	4b23      	ldr	r3, [pc, #140]	@ (8009b70 <tcp_receive+0x5ec>)
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d106      	bne.n	8009af8 <tcp_receive+0x574>
 8009aea:	4b22      	ldr	r3, [pc, #136]	@ (8009b74 <tcp_receive+0x5f0>)
 8009aec:	f240 5294 	movw	r2, #1428	@ 0x594
 8009af0:	4921      	ldr	r1, [pc, #132]	@ (8009b78 <tcp_receive+0x5f4>)
 8009af2:	4822      	ldr	r0, [pc, #136]	@ (8009b7c <tcp_receive+0x5f8>)
 8009af4:	f005 fc32 	bl	800f35c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009afa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d906      	bls.n	8009b10 <tcp_receive+0x58c>
 8009b02:	4b1c      	ldr	r3, [pc, #112]	@ (8009b74 <tcp_receive+0x5f0>)
 8009b04:	f240 5295 	movw	r2, #1429	@ 0x595
 8009b08:	491d      	ldr	r1, [pc, #116]	@ (8009b80 <tcp_receive+0x5fc>)
 8009b0a:	481c      	ldr	r0, [pc, #112]	@ (8009b7c <tcp_receive+0x5f8>)
 8009b0c:	f005 fc26 	bl	800f35c <iprintf>
      off = (u16_t)off32;
 8009b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b12:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009b16:	4b16      	ldr	r3, [pc, #88]	@ (8009b70 <tcp_receive+0x5ec>)
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	891b      	ldrh	r3, [r3, #8]
 8009b1c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d906      	bls.n	8009b32 <tcp_receive+0x5ae>
 8009b24:	4b13      	ldr	r3, [pc, #76]	@ (8009b74 <tcp_receive+0x5f0>)
 8009b26:	f240 5297 	movw	r2, #1431	@ 0x597
 8009b2a:	4916      	ldr	r1, [pc, #88]	@ (8009b84 <tcp_receive+0x600>)
 8009b2c:	4813      	ldr	r0, [pc, #76]	@ (8009b7c <tcp_receive+0x5f8>)
 8009b2e:	f005 fc15 	bl	800f35c <iprintf>
      inseg.len -= off;
 8009b32:	4b0f      	ldr	r3, [pc, #60]	@ (8009b70 <tcp_receive+0x5ec>)
 8009b34:	891a      	ldrh	r2, [r3, #8]
 8009b36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009b3a:	1ad3      	subs	r3, r2, r3
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8009b70 <tcp_receive+0x5ec>)
 8009b40:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009b42:	4b0b      	ldr	r3, [pc, #44]	@ (8009b70 <tcp_receive+0x5ec>)
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	891a      	ldrh	r2, [r3, #8]
 8009b48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009b4c:	1ad3      	subs	r3, r2, r3
 8009b4e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8009b50:	e02a      	b.n	8009ba8 <tcp_receive+0x624>
 8009b52:	bf00      	nop
 8009b54:	08011ce4 	.word	0x08011ce4
 8009b58:	08011cec 	.word	0x08011cec
 8009b5c:	2000831c 	.word	0x2000831c
 8009b60:	20008318 	.word	0x20008318
 8009b64:	200082dc 	.word	0x200082dc
 8009b68:	2000831e 	.word	0x2000831e
 8009b6c:	20008314 	.word	0x20008314
 8009b70:	200082f4 	.word	0x200082f4
 8009b74:	0801197c 	.word	0x0801197c
 8009b78:	08011cf4 	.word	0x08011cf4
 8009b7c:	080119c8 	.word	0x080119c8
 8009b80:	08011d04 	.word	0x08011d04
 8009b84:	08011d14 	.word	0x08011d14
        off -= p->len;
 8009b88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b8a:	895b      	ldrh	r3, [r3, #10]
 8009b8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009b90:	1ad3      	subs	r3, r2, r3
 8009b92:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009b96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b98:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8009b9a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009b9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009ba2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8009ba8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009baa:	895b      	ldrh	r3, [r3, #10]
 8009bac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d8e9      	bhi.n	8009b88 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009bb4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009bb8:	4619      	mov	r1, r3
 8009bba:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8009bbc:	f7fc f9d0 	bl	8005f60 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bc4:	4a90      	ldr	r2, [pc, #576]	@ (8009e08 <tcp_receive+0x884>)
 8009bc6:	6013      	str	r3, [r2, #0]
 8009bc8:	4b90      	ldr	r3, [pc, #576]	@ (8009e0c <tcp_receive+0x888>)
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	4a8e      	ldr	r2, [pc, #568]	@ (8009e08 <tcp_receive+0x884>)
 8009bce:	6812      	ldr	r2, [r2, #0]
 8009bd0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009bd2:	e00d      	b.n	8009bf0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009bd4:	4b8c      	ldr	r3, [pc, #560]	@ (8009e08 <tcp_receive+0x884>)
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	da06      	bge.n	8009bf0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	8b5b      	ldrh	r3, [r3, #26]
 8009be6:	f043 0302 	orr.w	r3, r3, #2
 8009bea:	b29a      	uxth	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009bf0:	4b85      	ldr	r3, [pc, #532]	@ (8009e08 <tcp_receive+0x884>)
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bf8:	1ad3      	subs	r3, r2, r3
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	f2c0 8427 	blt.w	800a44e <tcp_receive+0xeca>
 8009c00:	4b81      	ldr	r3, [pc, #516]	@ (8009e08 <tcp_receive+0x884>)
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c08:	6879      	ldr	r1, [r7, #4]
 8009c0a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009c0c:	440b      	add	r3, r1
 8009c0e:	1ad3      	subs	r3, r2, r3
 8009c10:	3301      	adds	r3, #1
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f300 841b 	bgt.w	800a44e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009c1c:	4b7a      	ldr	r3, [pc, #488]	@ (8009e08 <tcp_receive+0x884>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	f040 8298 	bne.w	800a156 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009c26:	4b79      	ldr	r3, [pc, #484]	@ (8009e0c <tcp_receive+0x888>)
 8009c28:	891c      	ldrh	r4, [r3, #8]
 8009c2a:	4b78      	ldr	r3, [pc, #480]	@ (8009e0c <tcp_receive+0x888>)
 8009c2c:	68db      	ldr	r3, [r3, #12]
 8009c2e:	899b      	ldrh	r3, [r3, #12]
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7fa febc 	bl	80049b0 <lwip_htons>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	f003 0303 	and.w	r3, r3, #3
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d001      	beq.n	8009c48 <tcp_receive+0x6c4>
 8009c44:	2301      	movs	r3, #1
 8009c46:	e000      	b.n	8009c4a <tcp_receive+0x6c6>
 8009c48:	2300      	movs	r3, #0
 8009c4a:	4423      	add	r3, r4
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	4b70      	ldr	r3, [pc, #448]	@ (8009e10 <tcp_receive+0x88c>)
 8009c50:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009c56:	4b6e      	ldr	r3, [pc, #440]	@ (8009e10 <tcp_receive+0x88c>)
 8009c58:	881b      	ldrh	r3, [r3, #0]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d274      	bcs.n	8009d48 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009c5e:	4b6b      	ldr	r3, [pc, #428]	@ (8009e0c <tcp_receive+0x888>)
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	899b      	ldrh	r3, [r3, #12]
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7fa fea2 	bl	80049b0 <lwip_htons>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	f003 0301 	and.w	r3, r3, #1
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d01e      	beq.n	8009cb6 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009c78:	4b64      	ldr	r3, [pc, #400]	@ (8009e0c <tcp_receive+0x888>)
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	899b      	ldrh	r3, [r3, #12]
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	b21b      	sxth	r3, r3
 8009c82:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009c86:	b21c      	sxth	r4, r3
 8009c88:	4b60      	ldr	r3, [pc, #384]	@ (8009e0c <tcp_receive+0x888>)
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	899b      	ldrh	r3, [r3, #12]
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7fa fe8d 	bl	80049b0 <lwip_htons>
 8009c96:	4603      	mov	r3, r0
 8009c98:	b2db      	uxtb	r3, r3
 8009c9a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7fa fe85 	bl	80049b0 <lwip_htons>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	b21b      	sxth	r3, r3
 8009caa:	4323      	orrs	r3, r4
 8009cac:	b21a      	sxth	r2, r3
 8009cae:	4b57      	ldr	r3, [pc, #348]	@ (8009e0c <tcp_receive+0x888>)
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	b292      	uxth	r2, r2
 8009cb4:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009cba:	4b54      	ldr	r3, [pc, #336]	@ (8009e0c <tcp_receive+0x888>)
 8009cbc:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009cbe:	4b53      	ldr	r3, [pc, #332]	@ (8009e0c <tcp_receive+0x888>)
 8009cc0:	68db      	ldr	r3, [r3, #12]
 8009cc2:	899b      	ldrh	r3, [r3, #12]
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7fa fe72 	bl	80049b0 <lwip_htons>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	f003 0302 	and.w	r3, r3, #2
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d005      	beq.n	8009ce4 <tcp_receive+0x760>
            inseg.len -= 1;
 8009cd8:	4b4c      	ldr	r3, [pc, #304]	@ (8009e0c <tcp_receive+0x888>)
 8009cda:	891b      	ldrh	r3, [r3, #8]
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	4b4a      	ldr	r3, [pc, #296]	@ (8009e0c <tcp_receive+0x888>)
 8009ce2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009ce4:	4b49      	ldr	r3, [pc, #292]	@ (8009e0c <tcp_receive+0x888>)
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	4a48      	ldr	r2, [pc, #288]	@ (8009e0c <tcp_receive+0x888>)
 8009cea:	8912      	ldrh	r2, [r2, #8]
 8009cec:	4611      	mov	r1, r2
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7fc f836 	bl	8005d60 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009cf4:	4b45      	ldr	r3, [pc, #276]	@ (8009e0c <tcp_receive+0x888>)
 8009cf6:	891c      	ldrh	r4, [r3, #8]
 8009cf8:	4b44      	ldr	r3, [pc, #272]	@ (8009e0c <tcp_receive+0x888>)
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	899b      	ldrh	r3, [r3, #12]
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7fa fe55 	bl	80049b0 <lwip_htons>
 8009d06:	4603      	mov	r3, r0
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	f003 0303 	and.w	r3, r3, #3
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d001      	beq.n	8009d16 <tcp_receive+0x792>
 8009d12:	2301      	movs	r3, #1
 8009d14:	e000      	b.n	8009d18 <tcp_receive+0x794>
 8009d16:	2300      	movs	r3, #0
 8009d18:	4423      	add	r3, r4
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	4b3c      	ldr	r3, [pc, #240]	@ (8009e10 <tcp_receive+0x88c>)
 8009d1e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009d20:	4b3b      	ldr	r3, [pc, #236]	@ (8009e10 <tcp_receive+0x88c>)
 8009d22:	881b      	ldrh	r3, [r3, #0]
 8009d24:	461a      	mov	r2, r3
 8009d26:	4b38      	ldr	r3, [pc, #224]	@ (8009e08 <tcp_receive+0x884>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	441a      	add	r2, r3
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d30:	6879      	ldr	r1, [r7, #4]
 8009d32:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009d34:	440b      	add	r3, r1
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d006      	beq.n	8009d48 <tcp_receive+0x7c4>
 8009d3a:	4b36      	ldr	r3, [pc, #216]	@ (8009e14 <tcp_receive+0x890>)
 8009d3c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8009d40:	4935      	ldr	r1, [pc, #212]	@ (8009e18 <tcp_receive+0x894>)
 8009d42:	4836      	ldr	r0, [pc, #216]	@ (8009e1c <tcp_receive+0x898>)
 8009d44:	f005 fb0a 	bl	800f35c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f000 80e6 	beq.w	8009f1e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009d52:	4b2e      	ldr	r3, [pc, #184]	@ (8009e0c <tcp_receive+0x888>)
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	899b      	ldrh	r3, [r3, #12]
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7fa fe28 	bl	80049b0 <lwip_htons>
 8009d60:	4603      	mov	r3, r0
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	f003 0301 	and.w	r3, r3, #1
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d010      	beq.n	8009d8e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009d6c:	e00a      	b.n	8009d84 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d72:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	f7fd fd47 	bl	8007812 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1f0      	bne.n	8009d6e <tcp_receive+0x7ea>
 8009d8c:	e0c7      	b.n	8009f1e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009d94:	e051      	b.n	8009e3a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	899b      	ldrh	r3, [r3, #12]
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7fa fe06 	bl	80049b0 <lwip_htons>
 8009da4:	4603      	mov	r3, r0
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	f003 0301 	and.w	r3, r3, #1
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d03c      	beq.n	8009e2a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009db0:	4b16      	ldr	r3, [pc, #88]	@ (8009e0c <tcp_receive+0x888>)
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	899b      	ldrh	r3, [r3, #12]
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7fa fdf9 	bl	80049b0 <lwip_htons>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d12f      	bne.n	8009e2a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009dca:	4b10      	ldr	r3, [pc, #64]	@ (8009e0c <tcp_receive+0x888>)
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	899b      	ldrh	r3, [r3, #12]
 8009dd0:	b29c      	uxth	r4, r3
 8009dd2:	2001      	movs	r0, #1
 8009dd4:	f7fa fdec 	bl	80049b0 <lwip_htons>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	461a      	mov	r2, r3
 8009ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8009e0c <tcp_receive+0x888>)
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	4322      	orrs	r2, r4
 8009de2:	b292      	uxth	r2, r2
 8009de4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009de6:	4b09      	ldr	r3, [pc, #36]	@ (8009e0c <tcp_receive+0x888>)
 8009de8:	891c      	ldrh	r4, [r3, #8]
 8009dea:	4b08      	ldr	r3, [pc, #32]	@ (8009e0c <tcp_receive+0x888>)
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	899b      	ldrh	r3, [r3, #12]
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7fa fddc 	bl	80049b0 <lwip_htons>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	f003 0303 	and.w	r3, r3, #3
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d00d      	beq.n	8009e20 <tcp_receive+0x89c>
 8009e04:	2301      	movs	r3, #1
 8009e06:	e00c      	b.n	8009e22 <tcp_receive+0x89e>
 8009e08:	20008314 	.word	0x20008314
 8009e0c:	200082f4 	.word	0x200082f4
 8009e10:	2000831e 	.word	0x2000831e
 8009e14:	0801197c 	.word	0x0801197c
 8009e18:	08011d24 	.word	0x08011d24
 8009e1c:	080119c8 	.word	0x080119c8
 8009e20:	2300      	movs	r3, #0
 8009e22:	4423      	add	r3, r4
 8009e24:	b29a      	uxth	r2, r3
 8009e26:	4b98      	ldr	r3, [pc, #608]	@ (800a088 <tcp_receive+0xb04>)
 8009e28:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e2c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8009e34:	6938      	ldr	r0, [r7, #16]
 8009e36:	f7fd fcec 	bl	8007812 <tcp_seg_free>
            while (next &&
 8009e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d00e      	beq.n	8009e5e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009e40:	4b91      	ldr	r3, [pc, #580]	@ (800a088 <tcp_receive+0xb04>)
 8009e42:	881b      	ldrh	r3, [r3, #0]
 8009e44:	461a      	mov	r2, r3
 8009e46:	4b91      	ldr	r3, [pc, #580]	@ (800a08c <tcp_receive+0xb08>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	441a      	add	r2, r3
 8009e4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009e54:	8909      	ldrh	r1, [r1, #8]
 8009e56:	440b      	add	r3, r1
 8009e58:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	da9b      	bge.n	8009d96 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009e5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d059      	beq.n	8009f18 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8009e64:	4b88      	ldr	r3, [pc, #544]	@ (800a088 <tcp_receive+0xb04>)
 8009e66:	881b      	ldrh	r3, [r3, #0]
 8009e68:	461a      	mov	r2, r3
 8009e6a:	4b88      	ldr	r3, [pc, #544]	@ (800a08c <tcp_receive+0xb08>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	441a      	add	r2, r3
 8009e70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	dd4d      	ble.n	8009f18 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009e7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	b29a      	uxth	r2, r3
 8009e84:	4b81      	ldr	r3, [pc, #516]	@ (800a08c <tcp_receive+0xb08>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	b29a      	uxth	r2, r3
 8009e8e:	4b80      	ldr	r3, [pc, #512]	@ (800a090 <tcp_receive+0xb0c>)
 8009e90:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009e92:	4b7f      	ldr	r3, [pc, #508]	@ (800a090 <tcp_receive+0xb0c>)
 8009e94:	68db      	ldr	r3, [r3, #12]
 8009e96:	899b      	ldrh	r3, [r3, #12]
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7fa fd88 	bl	80049b0 <lwip_htons>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	f003 0302 	and.w	r3, r3, #2
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d005      	beq.n	8009eb8 <tcp_receive+0x934>
                inseg.len -= 1;
 8009eac:	4b78      	ldr	r3, [pc, #480]	@ (800a090 <tcp_receive+0xb0c>)
 8009eae:	891b      	ldrh	r3, [r3, #8]
 8009eb0:	3b01      	subs	r3, #1
 8009eb2:	b29a      	uxth	r2, r3
 8009eb4:	4b76      	ldr	r3, [pc, #472]	@ (800a090 <tcp_receive+0xb0c>)
 8009eb6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009eb8:	4b75      	ldr	r3, [pc, #468]	@ (800a090 <tcp_receive+0xb0c>)
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	4a74      	ldr	r2, [pc, #464]	@ (800a090 <tcp_receive+0xb0c>)
 8009ebe:	8912      	ldrh	r2, [r2, #8]
 8009ec0:	4611      	mov	r1, r2
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7fb ff4c 	bl	8005d60 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009ec8:	4b71      	ldr	r3, [pc, #452]	@ (800a090 <tcp_receive+0xb0c>)
 8009eca:	891c      	ldrh	r4, [r3, #8]
 8009ecc:	4b70      	ldr	r3, [pc, #448]	@ (800a090 <tcp_receive+0xb0c>)
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	899b      	ldrh	r3, [r3, #12]
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7fa fd6b 	bl	80049b0 <lwip_htons>
 8009eda:	4603      	mov	r3, r0
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	f003 0303 	and.w	r3, r3, #3
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d001      	beq.n	8009eea <tcp_receive+0x966>
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e000      	b.n	8009eec <tcp_receive+0x968>
 8009eea:	2300      	movs	r3, #0
 8009eec:	4423      	add	r3, r4
 8009eee:	b29a      	uxth	r2, r3
 8009ef0:	4b65      	ldr	r3, [pc, #404]	@ (800a088 <tcp_receive+0xb04>)
 8009ef2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009ef4:	4b64      	ldr	r3, [pc, #400]	@ (800a088 <tcp_receive+0xb04>)
 8009ef6:	881b      	ldrh	r3, [r3, #0]
 8009ef8:	461a      	mov	r2, r3
 8009efa:	4b64      	ldr	r3, [pc, #400]	@ (800a08c <tcp_receive+0xb08>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	441a      	add	r2, r3
 8009f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d006      	beq.n	8009f18 <tcp_receive+0x994>
 8009f0a:	4b62      	ldr	r3, [pc, #392]	@ (800a094 <tcp_receive+0xb10>)
 8009f0c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8009f10:	4961      	ldr	r1, [pc, #388]	@ (800a098 <tcp_receive+0xb14>)
 8009f12:	4862      	ldr	r0, [pc, #392]	@ (800a09c <tcp_receive+0xb18>)
 8009f14:	f005 fa22 	bl	800f35c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009f1c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009f1e:	4b5a      	ldr	r3, [pc, #360]	@ (800a088 <tcp_receive+0xb04>)
 8009f20:	881b      	ldrh	r3, [r3, #0]
 8009f22:	461a      	mov	r2, r3
 8009f24:	4b59      	ldr	r3, [pc, #356]	@ (800a08c <tcp_receive+0xb08>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	441a      	add	r2, r3
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009f32:	4b55      	ldr	r3, [pc, #340]	@ (800a088 <tcp_receive+0xb04>)
 8009f34:	881b      	ldrh	r3, [r3, #0]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d206      	bcs.n	8009f48 <tcp_receive+0x9c4>
 8009f3a:	4b56      	ldr	r3, [pc, #344]	@ (800a094 <tcp_receive+0xb10>)
 8009f3c:	f240 6207 	movw	r2, #1543	@ 0x607
 8009f40:	4957      	ldr	r1, [pc, #348]	@ (800a0a0 <tcp_receive+0xb1c>)
 8009f42:	4856      	ldr	r0, [pc, #344]	@ (800a09c <tcp_receive+0xb18>)
 8009f44:	f005 fa0a 	bl	800f35c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009f4c:	4b4e      	ldr	r3, [pc, #312]	@ (800a088 <tcp_receive+0xb04>)
 8009f4e:	881b      	ldrh	r3, [r3, #0]
 8009f50:	1ad3      	subs	r3, r2, r3
 8009f52:	b29a      	uxth	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f7fc fe1b 	bl	8006b94 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009f5e:	4b4c      	ldr	r3, [pc, #304]	@ (800a090 <tcp_receive+0xb0c>)
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	891b      	ldrh	r3, [r3, #8]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d006      	beq.n	8009f76 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8009f68:	4b49      	ldr	r3, [pc, #292]	@ (800a090 <tcp_receive+0xb0c>)
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	4a4d      	ldr	r2, [pc, #308]	@ (800a0a4 <tcp_receive+0xb20>)
 8009f6e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009f70:	4b47      	ldr	r3, [pc, #284]	@ (800a090 <tcp_receive+0xb0c>)
 8009f72:	2200      	movs	r2, #0
 8009f74:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009f76:	4b46      	ldr	r3, [pc, #280]	@ (800a090 <tcp_receive+0xb0c>)
 8009f78:	68db      	ldr	r3, [r3, #12]
 8009f7a:	899b      	ldrh	r3, [r3, #12]
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7fa fd16 	bl	80049b0 <lwip_htons>
 8009f84:	4603      	mov	r3, r0
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	f003 0301 	and.w	r3, r3, #1
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f000 80b8 	beq.w	800a102 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009f92:	4b45      	ldr	r3, [pc, #276]	@ (800a0a8 <tcp_receive+0xb24>)
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	f043 0320 	orr.w	r3, r3, #32
 8009f9a:	b2da      	uxtb	r2, r3
 8009f9c:	4b42      	ldr	r3, [pc, #264]	@ (800a0a8 <tcp_receive+0xb24>)
 8009f9e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009fa0:	e0af      	b.n	800a102 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009fa6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009fac:	68db      	ldr	r3, [r3, #12]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	4a36      	ldr	r2, [pc, #216]	@ (800a08c <tcp_receive+0xb08>)
 8009fb2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	891b      	ldrh	r3, [r3, #8]
 8009fb8:	461c      	mov	r4, r3
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	899b      	ldrh	r3, [r3, #12]
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7fa fcf4 	bl	80049b0 <lwip_htons>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	f003 0303 	and.w	r3, r3, #3
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d001      	beq.n	8009fd8 <tcp_receive+0xa54>
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e000      	b.n	8009fda <tcp_receive+0xa56>
 8009fd8:	2300      	movs	r3, #0
 8009fda:	191a      	adds	r2, r3, r4
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fe0:	441a      	add	r2, r3
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fea:	461c      	mov	r4, r3
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	891b      	ldrh	r3, [r3, #8]
 8009ff0:	461d      	mov	r5, r3
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	899b      	ldrh	r3, [r3, #12]
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7fa fcd8 	bl	80049b0 <lwip_htons>
 800a000:	4603      	mov	r3, r0
 800a002:	b2db      	uxtb	r3, r3
 800a004:	f003 0303 	and.w	r3, r3, #3
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d001      	beq.n	800a010 <tcp_receive+0xa8c>
 800a00c:	2301      	movs	r3, #1
 800a00e:	e000      	b.n	800a012 <tcp_receive+0xa8e>
 800a010:	2300      	movs	r3, #0
 800a012:	442b      	add	r3, r5
 800a014:	429c      	cmp	r4, r3
 800a016:	d206      	bcs.n	800a026 <tcp_receive+0xaa2>
 800a018:	4b1e      	ldr	r3, [pc, #120]	@ (800a094 <tcp_receive+0xb10>)
 800a01a:	f240 622b 	movw	r2, #1579	@ 0x62b
 800a01e:	4923      	ldr	r1, [pc, #140]	@ (800a0ac <tcp_receive+0xb28>)
 800a020:	481e      	ldr	r0, [pc, #120]	@ (800a09c <tcp_receive+0xb18>)
 800a022:	f005 f99b 	bl	800f35c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	891b      	ldrh	r3, [r3, #8]
 800a02a:	461c      	mov	r4, r3
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	899b      	ldrh	r3, [r3, #12]
 800a032:	b29b      	uxth	r3, r3
 800a034:	4618      	mov	r0, r3
 800a036:	f7fa fcbb 	bl	80049b0 <lwip_htons>
 800a03a:	4603      	mov	r3, r0
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	f003 0303 	and.w	r3, r3, #3
 800a042:	2b00      	cmp	r3, #0
 800a044:	d001      	beq.n	800a04a <tcp_receive+0xac6>
 800a046:	2301      	movs	r3, #1
 800a048:	e000      	b.n	800a04c <tcp_receive+0xac8>
 800a04a:	2300      	movs	r3, #0
 800a04c:	1919      	adds	r1, r3, r4
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a052:	b28b      	uxth	r3, r1
 800a054:	1ad3      	subs	r3, r2, r3
 800a056:	b29a      	uxth	r2, r3
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f7fc fd99 	bl	8006b94 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	891b      	ldrh	r3, [r3, #8]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d028      	beq.n	800a0be <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a06c:	4b0d      	ldr	r3, [pc, #52]	@ (800a0a4 <tcp_receive+0xb20>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d01d      	beq.n	800a0b0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800a074:	4b0b      	ldr	r3, [pc, #44]	@ (800a0a4 <tcp_receive+0xb20>)
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	4619      	mov	r1, r3
 800a07e:	4610      	mov	r0, r2
 800a080:	f7fc f8b6 	bl	80061f0 <pbuf_cat>
 800a084:	e018      	b.n	800a0b8 <tcp_receive+0xb34>
 800a086:	bf00      	nop
 800a088:	2000831e 	.word	0x2000831e
 800a08c:	20008314 	.word	0x20008314
 800a090:	200082f4 	.word	0x200082f4
 800a094:	0801197c 	.word	0x0801197c
 800a098:	08011d5c 	.word	0x08011d5c
 800a09c:	080119c8 	.word	0x080119c8
 800a0a0:	08011d98 	.word	0x08011d98
 800a0a4:	20008324 	.word	0x20008324
 800a0a8:	20008321 	.word	0x20008321
 800a0ac:	08011db8 	.word	0x08011db8
            } else {
              recv_data = cseg->p;
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	4a70      	ldr	r2, [pc, #448]	@ (800a278 <tcp_receive+0xcf4>)
 800a0b6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	68db      	ldr	r3, [r3, #12]
 800a0c2:	899b      	ldrh	r3, [r3, #12]
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7fa fc72 	bl	80049b0 <lwip_htons>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	b2db      	uxtb	r3, r3
 800a0d0:	f003 0301 	and.w	r3, r3, #1
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d00d      	beq.n	800a0f4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a0d8:	4b68      	ldr	r3, [pc, #416]	@ (800a27c <tcp_receive+0xcf8>)
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	f043 0320 	orr.w	r3, r3, #32
 800a0e0:	b2da      	uxtb	r2, r3
 800a0e2:	4b66      	ldr	r3, [pc, #408]	@ (800a27c <tcp_receive+0xcf8>)
 800a0e4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	7d1b      	ldrb	r3, [r3, #20]
 800a0ea:	2b04      	cmp	r3, #4
 800a0ec:	d102      	bne.n	800a0f4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2207      	movs	r2, #7
 800a0f2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800a0fc:	68b8      	ldr	r0, [r7, #8]
 800a0fe:	f7fd fb88 	bl	8007812 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a106:	2b00      	cmp	r3, #0
 800a108:	d008      	beq.n	800a11c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	685a      	ldr	r2, [r3, #4]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800a116:	429a      	cmp	r2, r3
 800a118:	f43f af43 	beq.w	8009fa2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	8b5b      	ldrh	r3, [r3, #26]
 800a120:	f003 0301 	and.w	r3, r3, #1
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00e      	beq.n	800a146 <tcp_receive+0xbc2>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	8b5b      	ldrh	r3, [r3, #26]
 800a12c:	f023 0301 	bic.w	r3, r3, #1
 800a130:	b29a      	uxth	r2, r3
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	835a      	strh	r2, [r3, #26]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	8b5b      	ldrh	r3, [r3, #26]
 800a13a:	f043 0302 	orr.w	r3, r3, #2
 800a13e:	b29a      	uxth	r2, r3
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a144:	e187      	b.n	800a456 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	8b5b      	ldrh	r3, [r3, #26]
 800a14a:	f043 0301 	orr.w	r3, r3, #1
 800a14e:	b29a      	uxth	r2, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a154:	e17f      	b.n	800a456 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d106      	bne.n	800a16c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a15e:	4848      	ldr	r0, [pc, #288]	@ (800a280 <tcp_receive+0xcfc>)
 800a160:	f7fd fb70 	bl	8007844 <tcp_seg_copy>
 800a164:	4602      	mov	r2, r0
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	675a      	str	r2, [r3, #116]	@ 0x74
 800a16a:	e16c      	b.n	800a446 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a16c:	2300      	movs	r3, #0
 800a16e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a174:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a176:	e156      	b.n	800a426 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800a178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	685a      	ldr	r2, [r3, #4]
 800a17e:	4b41      	ldr	r3, [pc, #260]	@ (800a284 <tcp_receive+0xd00>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	429a      	cmp	r2, r3
 800a184:	d11d      	bne.n	800a1c2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a186:	4b3e      	ldr	r3, [pc, #248]	@ (800a280 <tcp_receive+0xcfc>)
 800a188:	891a      	ldrh	r2, [r3, #8]
 800a18a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a18c:	891b      	ldrh	r3, [r3, #8]
 800a18e:	429a      	cmp	r2, r3
 800a190:	f240 814e 	bls.w	800a430 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a194:	483a      	ldr	r0, [pc, #232]	@ (800a280 <tcp_receive+0xcfc>)
 800a196:	f7fd fb55 	bl	8007844 <tcp_seg_copy>
 800a19a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	f000 8148 	beq.w	800a434 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800a1a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d003      	beq.n	800a1b2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800a1aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1ac:	697a      	ldr	r2, [r7, #20]
 800a1ae:	601a      	str	r2, [r3, #0]
 800a1b0:	e002      	b.n	800a1b8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	697a      	ldr	r2, [r7, #20]
 800a1b6:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a1b8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a1ba:	6978      	ldr	r0, [r7, #20]
 800a1bc:	f7ff f8de 	bl	800937c <tcp_oos_insert_segment>
                }
                break;
 800a1c0:	e138      	b.n	800a434 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a1c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d117      	bne.n	800a1f8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a1c8:	4b2e      	ldr	r3, [pc, #184]	@ (800a284 <tcp_receive+0xd00>)
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ce:	68db      	ldr	r3, [r3, #12]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	1ad3      	subs	r3, r2, r3
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	da57      	bge.n	800a288 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a1d8:	4829      	ldr	r0, [pc, #164]	@ (800a280 <tcp_receive+0xcfc>)
 800a1da:	f7fd fb33 	bl	8007844 <tcp_seg_copy>
 800a1de:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a1e0:	69bb      	ldr	r3, [r7, #24]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	f000 8128 	beq.w	800a438 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	69ba      	ldr	r2, [r7, #24]
 800a1ec:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a1ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a1f0:	69b8      	ldr	r0, [r7, #24]
 800a1f2:	f7ff f8c3 	bl	800937c <tcp_oos_insert_segment>
                  }
                  break;
 800a1f6:	e11f      	b.n	800a438 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a1f8:	4b22      	ldr	r3, [pc, #136]	@ (800a284 <tcp_receive+0xd00>)
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	1ad3      	subs	r3, r2, r3
 800a204:	3b01      	subs	r3, #1
 800a206:	2b00      	cmp	r3, #0
 800a208:	db3e      	blt.n	800a288 <tcp_receive+0xd04>
 800a20a:	4b1e      	ldr	r3, [pc, #120]	@ (800a284 <tcp_receive+0xd00>)
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	1ad3      	subs	r3, r2, r3
 800a216:	3301      	adds	r3, #1
 800a218:	2b00      	cmp	r3, #0
 800a21a:	dc35      	bgt.n	800a288 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a21c:	4818      	ldr	r0, [pc, #96]	@ (800a280 <tcp_receive+0xcfc>)
 800a21e:	f7fd fb11 	bl	8007844 <tcp_seg_copy>
 800a222:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	2b00      	cmp	r3, #0
 800a228:	f000 8108 	beq.w	800a43c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a22c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a234:	8912      	ldrh	r2, [r2, #8]
 800a236:	441a      	add	r2, r3
 800a238:	4b12      	ldr	r3, [pc, #72]	@ (800a284 <tcp_receive+0xd00>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	1ad3      	subs	r3, r2, r3
 800a23e:	2b00      	cmp	r3, #0
 800a240:	dd12      	ble.n	800a268 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a242:	4b10      	ldr	r3, [pc, #64]	@ (800a284 <tcp_receive+0xd00>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	b29a      	uxth	r2, r3
 800a248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	b29b      	uxth	r3, r3
 800a250:	1ad3      	subs	r3, r2, r3
 800a252:	b29a      	uxth	r2, r3
 800a254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a256:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a25a:	685a      	ldr	r2, [r3, #4]
 800a25c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a25e:	891b      	ldrh	r3, [r3, #8]
 800a260:	4619      	mov	r1, r3
 800a262:	4610      	mov	r0, r2
 800a264:	f7fb fd7c 	bl	8005d60 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a26a:	69fa      	ldr	r2, [r7, #28]
 800a26c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a26e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a270:	69f8      	ldr	r0, [r7, #28]
 800a272:	f7ff f883 	bl	800937c <tcp_oos_insert_segment>
                  }
                  break;
 800a276:	e0e1      	b.n	800a43c <tcp_receive+0xeb8>
 800a278:	20008324 	.word	0x20008324
 800a27c:	20008321 	.word	0x20008321
 800a280:	200082f4 	.word	0x200082f4
 800a284:	20008314 	.word	0x20008314
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a28a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a28c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	f040 80c5 	bne.w	800a420 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a296:	4b7f      	ldr	r3, [pc, #508]	@ (800a494 <tcp_receive+0xf10>)
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	f340 80bc 	ble.w	800a420 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	899b      	ldrh	r3, [r3, #12]
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7fa fb7d 	bl	80049b0 <lwip_htons>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	f003 0301 	and.w	r3, r3, #1
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	f040 80be 	bne.w	800a440 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a2c4:	4874      	ldr	r0, [pc, #464]	@ (800a498 <tcp_receive+0xf14>)
 800a2c6:	f7fd fabd 	bl	8007844 <tcp_seg_copy>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ce:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	f000 80b5 	beq.w	800a444 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a2da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a2e2:	8912      	ldrh	r2, [r2, #8]
 800a2e4:	441a      	add	r2, r3
 800a2e6:	4b6b      	ldr	r3, [pc, #428]	@ (800a494 <tcp_receive+0xf10>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	1ad3      	subs	r3, r2, r3
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	dd12      	ble.n	800a316 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a2f0:	4b68      	ldr	r3, [pc, #416]	@ (800a494 <tcp_receive+0xf10>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	b29a      	uxth	r2, r3
 800a2f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	1ad3      	subs	r3, r2, r3
 800a300:	b29a      	uxth	r2, r3
 800a302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a304:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a308:	685a      	ldr	r2, [r3, #4]
 800a30a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a30c:	891b      	ldrh	r3, [r3, #8]
 800a30e:	4619      	mov	r1, r3
 800a310:	4610      	mov	r0, r2
 800a312:	f7fb fd25 	bl	8005d60 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a316:	4b61      	ldr	r3, [pc, #388]	@ (800a49c <tcp_receive+0xf18>)
 800a318:	881b      	ldrh	r3, [r3, #0]
 800a31a:	461a      	mov	r2, r3
 800a31c:	4b5d      	ldr	r3, [pc, #372]	@ (800a494 <tcp_receive+0xf10>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	441a      	add	r2, r3
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a326:	6879      	ldr	r1, [r7, #4]
 800a328:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a32a:	440b      	add	r3, r1
 800a32c:	1ad3      	subs	r3, r2, r3
 800a32e:	2b00      	cmp	r3, #0
 800a330:	f340 8088 	ble.w	800a444 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	899b      	ldrh	r3, [r3, #12]
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	4618      	mov	r0, r3
 800a340:	f7fa fb36 	bl	80049b0 <lwip_htons>
 800a344:	4603      	mov	r3, r0
 800a346:	b2db      	uxtb	r3, r3
 800a348:	f003 0301 	and.w	r3, r3, #1
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d021      	beq.n	800a394 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	899b      	ldrh	r3, [r3, #12]
 800a358:	b29b      	uxth	r3, r3
 800a35a:	b21b      	sxth	r3, r3
 800a35c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a360:	b21c      	sxth	r4, r3
 800a362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	899b      	ldrh	r3, [r3, #12]
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	4618      	mov	r0, r3
 800a36e:	f7fa fb1f 	bl	80049b0 <lwip_htons>
 800a372:	4603      	mov	r3, r0
 800a374:	b2db      	uxtb	r3, r3
 800a376:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	4618      	mov	r0, r3
 800a37e:	f7fa fb17 	bl	80049b0 <lwip_htons>
 800a382:	4603      	mov	r3, r0
 800a384:	b21b      	sxth	r3, r3
 800a386:	4323      	orrs	r3, r4
 800a388:	b21a      	sxth	r2, r3
 800a38a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	b292      	uxth	r2, r2
 800a392:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a398:	b29a      	uxth	r2, r3
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a39e:	4413      	add	r3, r2
 800a3a0:	b299      	uxth	r1, r3
 800a3a2:	4b3c      	ldr	r3, [pc, #240]	@ (800a494 <tcp_receive+0xf10>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	b29a      	uxth	r2, r3
 800a3a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	1a8a      	subs	r2, r1, r2
 800a3ae:	b292      	uxth	r2, r2
 800a3b0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a3b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	685a      	ldr	r2, [r3, #4]
 800a3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	891b      	ldrh	r3, [r3, #8]
 800a3be:	4619      	mov	r1, r3
 800a3c0:	4610      	mov	r0, r2
 800a3c2:	f7fb fccd 	bl	8005d60 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	891c      	ldrh	r4, [r3, #8]
 800a3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	899b      	ldrh	r3, [r3, #12]
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7fa faea 	bl	80049b0 <lwip_htons>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	f003 0303 	and.w	r3, r3, #3
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d001      	beq.n	800a3ec <tcp_receive+0xe68>
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e000      	b.n	800a3ee <tcp_receive+0xe6a>
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	4423      	add	r3, r4
 800a3f0:	b29a      	uxth	r2, r3
 800a3f2:	4b2a      	ldr	r3, [pc, #168]	@ (800a49c <tcp_receive+0xf18>)
 800a3f4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a3f6:	4b29      	ldr	r3, [pc, #164]	@ (800a49c <tcp_receive+0xf18>)
 800a3f8:	881b      	ldrh	r3, [r3, #0]
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	4b25      	ldr	r3, [pc, #148]	@ (800a494 <tcp_receive+0xf10>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	441a      	add	r2, r3
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a406:	6879      	ldr	r1, [r7, #4]
 800a408:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a40a:	440b      	add	r3, r1
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d019      	beq.n	800a444 <tcp_receive+0xec0>
 800a410:	4b23      	ldr	r3, [pc, #140]	@ (800a4a0 <tcp_receive+0xf1c>)
 800a412:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800a416:	4923      	ldr	r1, [pc, #140]	@ (800a4a4 <tcp_receive+0xf20>)
 800a418:	4823      	ldr	r0, [pc, #140]	@ (800a4a8 <tcp_receive+0xf24>)
 800a41a:	f004 ff9f 	bl	800f35c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a41e:	e011      	b.n	800a444 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a428:	2b00      	cmp	r3, #0
 800a42a:	f47f aea5 	bne.w	800a178 <tcp_receive+0xbf4>
 800a42e:	e00a      	b.n	800a446 <tcp_receive+0xec2>
                break;
 800a430:	bf00      	nop
 800a432:	e008      	b.n	800a446 <tcp_receive+0xec2>
                break;
 800a434:	bf00      	nop
 800a436:	e006      	b.n	800a446 <tcp_receive+0xec2>
                  break;
 800a438:	bf00      	nop
 800a43a:	e004      	b.n	800a446 <tcp_receive+0xec2>
                  break;
 800a43c:	bf00      	nop
 800a43e:	e002      	b.n	800a446 <tcp_receive+0xec2>
                  break;
 800a440:	bf00      	nop
 800a442:	e000      	b.n	800a446 <tcp_receive+0xec2>
                break;
 800a444:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f001 fe88 	bl	800c15c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a44c:	e003      	b.n	800a456 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f001 fe84 	bl	800c15c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a454:	e01a      	b.n	800a48c <tcp_receive+0xf08>
 800a456:	e019      	b.n	800a48c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a458:	4b0e      	ldr	r3, [pc, #56]	@ (800a494 <tcp_receive+0xf10>)
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a460:	1ad3      	subs	r3, r2, r3
 800a462:	2b00      	cmp	r3, #0
 800a464:	db0a      	blt.n	800a47c <tcp_receive+0xef8>
 800a466:	4b0b      	ldr	r3, [pc, #44]	@ (800a494 <tcp_receive+0xf10>)
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a46e:	6879      	ldr	r1, [r7, #4]
 800a470:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a472:	440b      	add	r3, r1
 800a474:	1ad3      	subs	r3, r2, r3
 800a476:	3301      	adds	r3, #1
 800a478:	2b00      	cmp	r3, #0
 800a47a:	dd07      	ble.n	800a48c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	8b5b      	ldrh	r3, [r3, #26]
 800a480:	f043 0302 	orr.w	r3, r3, #2
 800a484:	b29a      	uxth	r2, r3
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a48a:	e7ff      	b.n	800a48c <tcp_receive+0xf08>
 800a48c:	bf00      	nop
 800a48e:	3750      	adds	r7, #80	@ 0x50
 800a490:	46bd      	mov	sp, r7
 800a492:	bdb0      	pop	{r4, r5, r7, pc}
 800a494:	20008314 	.word	0x20008314
 800a498:	200082f4 	.word	0x200082f4
 800a49c:	2000831e 	.word	0x2000831e
 800a4a0:	0801197c 	.word	0x0801197c
 800a4a4:	08011d24 	.word	0x08011d24
 800a4a8:	080119c8 	.word	0x080119c8

0800a4ac <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a4b2:	4b15      	ldr	r3, [pc, #84]	@ (800a508 <tcp_get_next_optbyte+0x5c>)
 800a4b4:	881b      	ldrh	r3, [r3, #0]
 800a4b6:	1c5a      	adds	r2, r3, #1
 800a4b8:	b291      	uxth	r1, r2
 800a4ba:	4a13      	ldr	r2, [pc, #76]	@ (800a508 <tcp_get_next_optbyte+0x5c>)
 800a4bc:	8011      	strh	r1, [r2, #0]
 800a4be:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a4c0:	4b12      	ldr	r3, [pc, #72]	@ (800a50c <tcp_get_next_optbyte+0x60>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d004      	beq.n	800a4d2 <tcp_get_next_optbyte+0x26>
 800a4c8:	4b11      	ldr	r3, [pc, #68]	@ (800a510 <tcp_get_next_optbyte+0x64>)
 800a4ca:	881b      	ldrh	r3, [r3, #0]
 800a4cc:	88fa      	ldrh	r2, [r7, #6]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d208      	bcs.n	800a4e4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a4d2:	4b10      	ldr	r3, [pc, #64]	@ (800a514 <tcp_get_next_optbyte+0x68>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	3314      	adds	r3, #20
 800a4d8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a4da:	88fb      	ldrh	r3, [r7, #6]
 800a4dc:	683a      	ldr	r2, [r7, #0]
 800a4de:	4413      	add	r3, r2
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	e00b      	b.n	800a4fc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a4e4:	88fb      	ldrh	r3, [r7, #6]
 800a4e6:	b2da      	uxtb	r2, r3
 800a4e8:	4b09      	ldr	r3, [pc, #36]	@ (800a510 <tcp_get_next_optbyte+0x64>)
 800a4ea:	881b      	ldrh	r3, [r3, #0]
 800a4ec:	b2db      	uxtb	r3, r3
 800a4ee:	1ad3      	subs	r3, r2, r3
 800a4f0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a4f2:	4b06      	ldr	r3, [pc, #24]	@ (800a50c <tcp_get_next_optbyte+0x60>)
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	797b      	ldrb	r3, [r7, #5]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr
 800a508:	20008310 	.word	0x20008310
 800a50c:	2000830c 	.word	0x2000830c
 800a510:	2000830a 	.word	0x2000830a
 800a514:	20008304 	.word	0x20008304

0800a518 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d106      	bne.n	800a534 <tcp_parseopt+0x1c>
 800a526:	4b32      	ldr	r3, [pc, #200]	@ (800a5f0 <tcp_parseopt+0xd8>)
 800a528:	f240 727d 	movw	r2, #1917	@ 0x77d
 800a52c:	4931      	ldr	r1, [pc, #196]	@ (800a5f4 <tcp_parseopt+0xdc>)
 800a52e:	4832      	ldr	r0, [pc, #200]	@ (800a5f8 <tcp_parseopt+0xe0>)
 800a530:	f004 ff14 	bl	800f35c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a534:	4b31      	ldr	r3, [pc, #196]	@ (800a5fc <tcp_parseopt+0xe4>)
 800a536:	881b      	ldrh	r3, [r3, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d056      	beq.n	800a5ea <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a53c:	4b30      	ldr	r3, [pc, #192]	@ (800a600 <tcp_parseopt+0xe8>)
 800a53e:	2200      	movs	r2, #0
 800a540:	801a      	strh	r2, [r3, #0]
 800a542:	e046      	b.n	800a5d2 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800a544:	f7ff ffb2 	bl	800a4ac <tcp_get_next_optbyte>
 800a548:	4603      	mov	r3, r0
 800a54a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a54c:	7bfb      	ldrb	r3, [r7, #15]
 800a54e:	2b02      	cmp	r3, #2
 800a550:	d006      	beq.n	800a560 <tcp_parseopt+0x48>
 800a552:	2b02      	cmp	r3, #2
 800a554:	dc2a      	bgt.n	800a5ac <tcp_parseopt+0x94>
 800a556:	2b00      	cmp	r3, #0
 800a558:	d042      	beq.n	800a5e0 <tcp_parseopt+0xc8>
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d038      	beq.n	800a5d0 <tcp_parseopt+0xb8>
 800a55e:	e025      	b.n	800a5ac <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a560:	f7ff ffa4 	bl	800a4ac <tcp_get_next_optbyte>
 800a564:	4603      	mov	r3, r0
 800a566:	2b04      	cmp	r3, #4
 800a568:	d13c      	bne.n	800a5e4 <tcp_parseopt+0xcc>
 800a56a:	4b25      	ldr	r3, [pc, #148]	@ (800a600 <tcp_parseopt+0xe8>)
 800a56c:	881b      	ldrh	r3, [r3, #0]
 800a56e:	3301      	adds	r3, #1
 800a570:	4a22      	ldr	r2, [pc, #136]	@ (800a5fc <tcp_parseopt+0xe4>)
 800a572:	8812      	ldrh	r2, [r2, #0]
 800a574:	4293      	cmp	r3, r2
 800a576:	da35      	bge.n	800a5e4 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a578:	f7ff ff98 	bl	800a4ac <tcp_get_next_optbyte>
 800a57c:	4603      	mov	r3, r0
 800a57e:	021b      	lsls	r3, r3, #8
 800a580:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a582:	f7ff ff93 	bl	800a4ac <tcp_get_next_optbyte>
 800a586:	4603      	mov	r3, r0
 800a588:	461a      	mov	r2, r3
 800a58a:	89bb      	ldrh	r3, [r7, #12]
 800a58c:	4313      	orrs	r3, r2
 800a58e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a590:	89bb      	ldrh	r3, [r7, #12]
 800a592:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800a596:	d804      	bhi.n	800a5a2 <tcp_parseopt+0x8a>
 800a598:	89bb      	ldrh	r3, [r7, #12]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d001      	beq.n	800a5a2 <tcp_parseopt+0x8a>
 800a59e:	89ba      	ldrh	r2, [r7, #12]
 800a5a0:	e001      	b.n	800a5a6 <tcp_parseopt+0x8e>
 800a5a2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800a5aa:	e012      	b.n	800a5d2 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a5ac:	f7ff ff7e 	bl	800a4ac <tcp_get_next_optbyte>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a5b4:	7afb      	ldrb	r3, [r7, #11]
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d916      	bls.n	800a5e8 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a5ba:	7afb      	ldrb	r3, [r7, #11]
 800a5bc:	b29a      	uxth	r2, r3
 800a5be:	4b10      	ldr	r3, [pc, #64]	@ (800a600 <tcp_parseopt+0xe8>)
 800a5c0:	881b      	ldrh	r3, [r3, #0]
 800a5c2:	4413      	add	r3, r2
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	3b02      	subs	r3, #2
 800a5c8:	b29a      	uxth	r2, r3
 800a5ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a600 <tcp_parseopt+0xe8>)
 800a5cc:	801a      	strh	r2, [r3, #0]
 800a5ce:	e000      	b.n	800a5d2 <tcp_parseopt+0xba>
          break;
 800a5d0:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a5d2:	4b0b      	ldr	r3, [pc, #44]	@ (800a600 <tcp_parseopt+0xe8>)
 800a5d4:	881a      	ldrh	r2, [r3, #0]
 800a5d6:	4b09      	ldr	r3, [pc, #36]	@ (800a5fc <tcp_parseopt+0xe4>)
 800a5d8:	881b      	ldrh	r3, [r3, #0]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d3b2      	bcc.n	800a544 <tcp_parseopt+0x2c>
 800a5de:	e004      	b.n	800a5ea <tcp_parseopt+0xd2>
          return;
 800a5e0:	bf00      	nop
 800a5e2:	e002      	b.n	800a5ea <tcp_parseopt+0xd2>
            return;
 800a5e4:	bf00      	nop
 800a5e6:	e000      	b.n	800a5ea <tcp_parseopt+0xd2>
            return;
 800a5e8:	bf00      	nop
      }
    }
  }
}
 800a5ea:	3710      	adds	r7, #16
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	0801197c 	.word	0x0801197c
 800a5f4:	08011de0 	.word	0x08011de0
 800a5f8:	080119c8 	.word	0x080119c8
 800a5fc:	20008308 	.word	0x20008308
 800a600:	20008310 	.word	0x20008310

0800a604 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a604:	b480      	push	{r7}
 800a606:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a608:	4b05      	ldr	r3, [pc, #20]	@ (800a620 <tcp_trigger_input_pcb_close+0x1c>)
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	f043 0310 	orr.w	r3, r3, #16
 800a610:	b2da      	uxtb	r2, r3
 800a612:	4b03      	ldr	r3, [pc, #12]	@ (800a620 <tcp_trigger_input_pcb_close+0x1c>)
 800a614:	701a      	strb	r2, [r3, #0]
}
 800a616:	bf00      	nop
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr
 800a620:	20008321 	.word	0x20008321

0800a624 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d00a      	beq.n	800a64c <tcp_route+0x28>
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	7a1b      	ldrb	r3, [r3, #8]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d006      	beq.n	800a64c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	7a1b      	ldrb	r3, [r3, #8]
 800a642:	4618      	mov	r0, r3
 800a644:	f7fb f9b2 	bl	80059ac <netif_get_by_index>
 800a648:	4603      	mov	r3, r0
 800a64a:	e003      	b.n	800a654 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f003 fad3 	bl	800dbf8 <ip4_route>
 800a652:	4603      	mov	r3, r0
  }
}
 800a654:	4618      	mov	r0, r3
 800a656:	3710      	adds	r7, #16
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a65c:	b590      	push	{r4, r7, lr}
 800a65e:	b087      	sub	sp, #28
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	60b9      	str	r1, [r7, #8]
 800a666:	603b      	str	r3, [r7, #0]
 800a668:	4613      	mov	r3, r2
 800a66a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d105      	bne.n	800a67e <tcp_create_segment+0x22>
 800a672:	4b43      	ldr	r3, [pc, #268]	@ (800a780 <tcp_create_segment+0x124>)
 800a674:	22a3      	movs	r2, #163	@ 0xa3
 800a676:	4943      	ldr	r1, [pc, #268]	@ (800a784 <tcp_create_segment+0x128>)
 800a678:	4843      	ldr	r0, [pc, #268]	@ (800a788 <tcp_create_segment+0x12c>)
 800a67a:	f004 fe6f 	bl	800f35c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d105      	bne.n	800a690 <tcp_create_segment+0x34>
 800a684:	4b3e      	ldr	r3, [pc, #248]	@ (800a780 <tcp_create_segment+0x124>)
 800a686:	22a4      	movs	r2, #164	@ 0xa4
 800a688:	4940      	ldr	r1, [pc, #256]	@ (800a78c <tcp_create_segment+0x130>)
 800a68a:	483f      	ldr	r0, [pc, #252]	@ (800a788 <tcp_create_segment+0x12c>)
 800a68c:	f004 fe66 	bl	800f35c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a690:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	b2db      	uxtb	r3, r3
 800a698:	f003 0304 	and.w	r3, r3, #4
 800a69c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a69e:	2003      	movs	r0, #3
 800a6a0:	f7fa fdfe 	bl	80052a0 <memp_malloc>
 800a6a4:	6138      	str	r0, [r7, #16]
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d104      	bne.n	800a6b6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a6ac:	68b8      	ldr	r0, [r7, #8]
 800a6ae:	f7fb fcdd 	bl	800606c <pbuf_free>
    return NULL;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	e060      	b.n	800a778 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800a6bc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	68ba      	ldr	r2, [r7, #8]
 800a6c8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	891a      	ldrh	r2, [r3, #8]
 800a6ce:	7dfb      	ldrb	r3, [r7, #23]
 800a6d0:	b29b      	uxth	r3, r3
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d205      	bcs.n	800a6e2 <tcp_create_segment+0x86>
 800a6d6:	4b2a      	ldr	r3, [pc, #168]	@ (800a780 <tcp_create_segment+0x124>)
 800a6d8:	22b0      	movs	r2, #176	@ 0xb0
 800a6da:	492d      	ldr	r1, [pc, #180]	@ (800a790 <tcp_create_segment+0x134>)
 800a6dc:	482a      	ldr	r0, [pc, #168]	@ (800a788 <tcp_create_segment+0x12c>)
 800a6de:	f004 fe3d 	bl	800f35c <iprintf>
  seg->len = p->tot_len - optlen;
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	891a      	ldrh	r2, [r3, #8]
 800a6e6:	7dfb      	ldrb	r3, [r7, #23]
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	1ad3      	subs	r3, r2, r3
 800a6ec:	b29a      	uxth	r2, r3
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a6f2:	2114      	movs	r1, #20
 800a6f4:	68b8      	ldr	r0, [r7, #8]
 800a6f6:	f7fb fc23 	bl	8005f40 <pbuf_add_header>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d004      	beq.n	800a70a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a700:	6938      	ldr	r0, [r7, #16]
 800a702:	f7fd f886 	bl	8007812 <tcp_seg_free>
    return NULL;
 800a706:	2300      	movs	r3, #0
 800a708:	e036      	b.n	800a778 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	685a      	ldr	r2, [r3, #4]
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	8ada      	ldrh	r2, [r3, #22]
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	68dc      	ldr	r4, [r3, #12]
 800a71c:	4610      	mov	r0, r2
 800a71e:	f7fa f947 	bl	80049b0 <lwip_htons>
 800a722:	4603      	mov	r3, r0
 800a724:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	8b1a      	ldrh	r2, [r3, #24]
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	68dc      	ldr	r4, [r3, #12]
 800a72e:	4610      	mov	r0, r2
 800a730:	f7fa f93e 	bl	80049b0 <lwip_htons>
 800a734:	4603      	mov	r3, r0
 800a736:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	68dc      	ldr	r4, [r3, #12]
 800a73c:	6838      	ldr	r0, [r7, #0]
 800a73e:	f7fa f94d 	bl	80049dc <lwip_htonl>
 800a742:	4603      	mov	r3, r0
 800a744:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a746:	7dfb      	ldrb	r3, [r7, #23]
 800a748:	089b      	lsrs	r3, r3, #2
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	3305      	adds	r3, #5
 800a74e:	b29b      	uxth	r3, r3
 800a750:	031b      	lsls	r3, r3, #12
 800a752:	b29a      	uxth	r2, r3
 800a754:	79fb      	ldrb	r3, [r7, #7]
 800a756:	b29b      	uxth	r3, r3
 800a758:	4313      	orrs	r3, r2
 800a75a:	b29a      	uxth	r2, r3
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	68dc      	ldr	r4, [r3, #12]
 800a760:	4610      	mov	r0, r2
 800a762:	f7fa f925 	bl	80049b0 <lwip_htons>
 800a766:	4603      	mov	r3, r0
 800a768:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	68db      	ldr	r3, [r3, #12]
 800a76e:	2200      	movs	r2, #0
 800a770:	749a      	strb	r2, [r3, #18]
 800a772:	2200      	movs	r2, #0
 800a774:	74da      	strb	r2, [r3, #19]
  return seg;
 800a776:	693b      	ldr	r3, [r7, #16]
}
 800a778:	4618      	mov	r0, r3
 800a77a:	371c      	adds	r7, #28
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd90      	pop	{r4, r7, pc}
 800a780:	08011dfc 	.word	0x08011dfc
 800a784:	08011e30 	.word	0x08011e30
 800a788:	08011e50 	.word	0x08011e50
 800a78c:	08011e78 	.word	0x08011e78
 800a790:	08011e9c 	.word	0x08011e9c

0800a794 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b086      	sub	sp, #24
 800a798:	af00      	add	r7, sp, #0
 800a79a:	607b      	str	r3, [r7, #4]
 800a79c:	4603      	mov	r3, r0
 800a79e:	73fb      	strb	r3, [r7, #15]
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	81bb      	strh	r3, [r7, #12]
 800a7a4:	4613      	mov	r3, r2
 800a7a6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800a7a8:	89bb      	ldrh	r3, [r7, #12]
 800a7aa:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d105      	bne.n	800a7be <tcp_pbuf_prealloc+0x2a>
 800a7b2:	4b30      	ldr	r3, [pc, #192]	@ (800a874 <tcp_pbuf_prealloc+0xe0>)
 800a7b4:	22e8      	movs	r2, #232	@ 0xe8
 800a7b6:	4930      	ldr	r1, [pc, #192]	@ (800a878 <tcp_pbuf_prealloc+0xe4>)
 800a7b8:	4830      	ldr	r0, [pc, #192]	@ (800a87c <tcp_pbuf_prealloc+0xe8>)
 800a7ba:	f004 fdcf 	bl	800f35c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800a7be:	6a3b      	ldr	r3, [r7, #32]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d105      	bne.n	800a7d0 <tcp_pbuf_prealloc+0x3c>
 800a7c4:	4b2b      	ldr	r3, [pc, #172]	@ (800a874 <tcp_pbuf_prealloc+0xe0>)
 800a7c6:	22e9      	movs	r2, #233	@ 0xe9
 800a7c8:	492d      	ldr	r1, [pc, #180]	@ (800a880 <tcp_pbuf_prealloc+0xec>)
 800a7ca:	482c      	ldr	r0, [pc, #176]	@ (800a87c <tcp_pbuf_prealloc+0xe8>)
 800a7cc:	f004 fdc6 	bl	800f35c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800a7d0:	89ba      	ldrh	r2, [r7, #12]
 800a7d2:	897b      	ldrh	r3, [r7, #10]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d221      	bcs.n	800a81c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800a7d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a7dc:	f003 0302 	and.w	r3, r3, #2
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d111      	bne.n	800a808 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800a7e4:	6a3b      	ldr	r3, [r7, #32]
 800a7e6:	8b5b      	ldrh	r3, [r3, #26]
 800a7e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d115      	bne.n	800a81c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800a7f0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d007      	beq.n	800a808 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800a7f8:	6a3b      	ldr	r3, [r7, #32]
 800a7fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d103      	bne.n	800a808 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800a800:	6a3b      	ldr	r3, [r7, #32]
 800a802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 800a804:	2b00      	cmp	r3, #0
 800a806:	d009      	beq.n	800a81c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800a808:	89bb      	ldrh	r3, [r7, #12]
 800a80a:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800a80e:	f023 0203 	bic.w	r2, r3, #3
 800a812:	897b      	ldrh	r3, [r7, #10]
 800a814:	4293      	cmp	r3, r2
 800a816:	bf28      	it	cs
 800a818:	4613      	movcs	r3, r2
 800a81a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800a81c:	8af9      	ldrh	r1, [r7, #22]
 800a81e:	7bfb      	ldrb	r3, [r7, #15]
 800a820:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a824:	4618      	mov	r0, r3
 800a826:	f7fb f93d 	bl	8005aa4 <pbuf_alloc>
 800a82a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d101      	bne.n	800a836 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800a832:	2300      	movs	r3, #0
 800a834:	e019      	b.n	800a86a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d006      	beq.n	800a84c <tcp_pbuf_prealloc+0xb8>
 800a83e:	4b0d      	ldr	r3, [pc, #52]	@ (800a874 <tcp_pbuf_prealloc+0xe0>)
 800a840:	f240 120b 	movw	r2, #267	@ 0x10b
 800a844:	490f      	ldr	r1, [pc, #60]	@ (800a884 <tcp_pbuf_prealloc+0xf0>)
 800a846:	480d      	ldr	r0, [pc, #52]	@ (800a87c <tcp_pbuf_prealloc+0xe8>)
 800a848:	f004 fd88 	bl	800f35c <iprintf>
  *oversize = p->len - length;
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	895a      	ldrh	r2, [r3, #10]
 800a850:	89bb      	ldrh	r3, [r7, #12]
 800a852:	1ad3      	subs	r3, r2, r3
 800a854:	b29a      	uxth	r2, r3
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	89ba      	ldrh	r2, [r7, #12]
 800a85e:	811a      	strh	r2, [r3, #8]
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	891a      	ldrh	r2, [r3, #8]
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	815a      	strh	r2, [r3, #10]
  return p;
 800a868:	693b      	ldr	r3, [r7, #16]
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3718      	adds	r7, #24
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	08011dfc 	.word	0x08011dfc
 800a878:	08011eb4 	.word	0x08011eb4
 800a87c:	08011e50 	.word	0x08011e50
 800a880:	08011ed8 	.word	0x08011ed8
 800a884:	08011ef8 	.word	0x08011ef8

0800a888 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	460b      	mov	r3, r1
 800a892:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d106      	bne.n	800a8a8 <tcp_write_checks+0x20>
 800a89a:	4b33      	ldr	r3, [pc, #204]	@ (800a968 <tcp_write_checks+0xe0>)
 800a89c:	f240 1233 	movw	r2, #307	@ 0x133
 800a8a0:	4932      	ldr	r1, [pc, #200]	@ (800a96c <tcp_write_checks+0xe4>)
 800a8a2:	4833      	ldr	r0, [pc, #204]	@ (800a970 <tcp_write_checks+0xe8>)
 800a8a4:	f004 fd5a 	bl	800f35c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	7d1b      	ldrb	r3, [r3, #20]
 800a8ac:	2b04      	cmp	r3, #4
 800a8ae:	d00e      	beq.n	800a8ce <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800a8b4:	2b07      	cmp	r3, #7
 800a8b6:	d00a      	beq.n	800a8ce <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800a8bc:	2b02      	cmp	r3, #2
 800a8be:	d006      	beq.n	800a8ce <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800a8c4:	2b03      	cmp	r3, #3
 800a8c6:	d002      	beq.n	800a8ce <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800a8c8:	f06f 030a 	mvn.w	r3, #10
 800a8cc:	e048      	b.n	800a960 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800a8ce:	887b      	ldrh	r3, [r7, #2]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d101      	bne.n	800a8d8 <tcp_write_checks+0x50>
    return ERR_OK;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	e043      	b.n	800a960 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a8de:	887a      	ldrh	r2, [r7, #2]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d909      	bls.n	800a8f8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	8b5b      	ldrh	r3, [r3, #26]
 800a8e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8ec:	b29a      	uxth	r2, r3
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800a8f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a8f6:	e033      	b.n	800a960 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a8fe:	2b08      	cmp	r3, #8
 800a900:	d909      	bls.n	800a916 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	8b5b      	ldrh	r3, [r3, #26]
 800a906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a90a:	b29a      	uxth	r2, r3
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800a910:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a914:	e024      	b.n	800a960 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00f      	beq.n	800a940 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a924:	2b00      	cmp	r3, #0
 800a926:	d11a      	bne.n	800a95e <tcp_write_checks+0xd6>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d116      	bne.n	800a95e <tcp_write_checks+0xd6>
 800a930:	4b0d      	ldr	r3, [pc, #52]	@ (800a968 <tcp_write_checks+0xe0>)
 800a932:	f240 1255 	movw	r2, #341	@ 0x155
 800a936:	490f      	ldr	r1, [pc, #60]	@ (800a974 <tcp_write_checks+0xec>)
 800a938:	480d      	ldr	r0, [pc, #52]	@ (800a970 <tcp_write_checks+0xe8>)
 800a93a:	f004 fd0f 	bl	800f35c <iprintf>
 800a93e:	e00e      	b.n	800a95e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a944:	2b00      	cmp	r3, #0
 800a946:	d103      	bne.n	800a950 <tcp_write_checks+0xc8>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d006      	beq.n	800a95e <tcp_write_checks+0xd6>
 800a950:	4b05      	ldr	r3, [pc, #20]	@ (800a968 <tcp_write_checks+0xe0>)
 800a952:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800a956:	4908      	ldr	r1, [pc, #32]	@ (800a978 <tcp_write_checks+0xf0>)
 800a958:	4805      	ldr	r0, [pc, #20]	@ (800a970 <tcp_write_checks+0xe8>)
 800a95a:	f004 fcff 	bl	800f35c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800a95e:	2300      	movs	r3, #0
}
 800a960:	4618      	mov	r0, r3
 800a962:	3708      	adds	r7, #8
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}
 800a968:	08011dfc 	.word	0x08011dfc
 800a96c:	08011f0c 	.word	0x08011f0c
 800a970:	08011e50 	.word	0x08011e50
 800a974:	08011f2c 	.word	0x08011f2c
 800a978:	08011f68 	.word	0x08011f68

0800a97c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800a97c:	b590      	push	{r4, r7, lr}
 800a97e:	b09b      	sub	sp, #108	@ 0x6c
 800a980:	af04      	add	r7, sp, #16
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	4611      	mov	r1, r2
 800a988:	461a      	mov	r2, r3
 800a98a:	460b      	mov	r3, r1
 800a98c:	80fb      	strh	r3, [r7, #6]
 800a98e:	4613      	mov	r3, r2
 800a990:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800a992:	2300      	movs	r3, #0
 800a994:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a996:	2300      	movs	r3, #0
 800a998:	653b      	str	r3, [r7, #80]	@ 0x50
 800a99a:	2300      	movs	r3, #0
 800a99c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a99e:	2300      	movs	r3, #0
 800a9a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d109      	bne.n	800a9d8 <tcp_write+0x5c>
 800a9c4:	4ba4      	ldr	r3, [pc, #656]	@ (800ac58 <tcp_write+0x2dc>)
 800a9c6:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800a9ca:	49a4      	ldr	r1, [pc, #656]	@ (800ac5c <tcp_write+0x2e0>)
 800a9cc:	48a4      	ldr	r0, [pc, #656]	@ (800ac60 <tcp_write+0x2e4>)
 800a9ce:	f004 fcc5 	bl	800f35c <iprintf>
 800a9d2:	f06f 030f 	mvn.w	r3, #15
 800a9d6:	e32a      	b.n	800b02e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a9de:	085b      	lsrs	r3, r3, #1
 800a9e0:	b29a      	uxth	r2, r3
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	bf28      	it	cs
 800a9ea:	4613      	movcs	r3, r2
 800a9ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800a9ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d102      	bne.n	800a9fa <tcp_write+0x7e>
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a9f8:	e000      	b.n	800a9fc <tcp_write+0x80>
 800a9fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a9fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d109      	bne.n	800aa18 <tcp_write+0x9c>
 800aa04:	4b94      	ldr	r3, [pc, #592]	@ (800ac58 <tcp_write+0x2dc>)
 800aa06:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800aa0a:	4996      	ldr	r1, [pc, #600]	@ (800ac64 <tcp_write+0x2e8>)
 800aa0c:	4894      	ldr	r0, [pc, #592]	@ (800ac60 <tcp_write+0x2e4>)
 800aa0e:	f004 fca5 	bl	800f35c <iprintf>
 800aa12:	f06f 030f 	mvn.w	r3, #15
 800aa16:	e30a      	b.n	800b02e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800aa18:	88fb      	ldrh	r3, [r7, #6]
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f7ff ff33 	bl	800a888 <tcp_write_checks>
 800aa22:	4603      	mov	r3, r0
 800aa24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 800aa28:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d002      	beq.n	800aa36 <tcp_write+0xba>
    return err;
 800aa30:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800aa34:	e2fb      	b.n	800b02e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800aa3c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800aa40:	2300      	movs	r3, #0
 800aa42:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	f000 80f6 	beq.w	800ac3c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa54:	653b      	str	r3, [r7, #80]	@ 0x50
 800aa56:	e002      	b.n	800aa5e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800aa58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800aa5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d1f8      	bne.n	800aa58 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800aa66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa68:	7a9b      	ldrb	r3, [r3, #10]
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	f003 0304 	and.w	r3, r3, #4
 800aa72:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800aa74:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800aa76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa78:	891b      	ldrh	r3, [r3, #8]
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	8c3b      	ldrh	r3, [r7, #32]
 800aa7e:	440b      	add	r3, r1
 800aa80:	429a      	cmp	r2, r3
 800aa82:	da06      	bge.n	800aa92 <tcp_write+0x116>
 800aa84:	4b74      	ldr	r3, [pc, #464]	@ (800ac58 <tcp_write+0x2dc>)
 800aa86:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800aa8a:	4977      	ldr	r1, [pc, #476]	@ (800ac68 <tcp_write+0x2ec>)
 800aa8c:	4874      	ldr	r0, [pc, #464]	@ (800ac60 <tcp_write+0x2e4>)
 800aa8e:	f004 fc65 	bl	800f35c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800aa92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa94:	891a      	ldrh	r2, [r3, #8]
 800aa96:	8c3b      	ldrh	r3, [r7, #32]
 800aa98:	4413      	add	r3, r2
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800aa9e:	1ad3      	subs	r3, r2, r3
 800aaa0:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800aaa8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800aaaa:	8a7b      	ldrh	r3, [r7, #18]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d026      	beq.n	800aafe <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800aab0:	8a7b      	ldrh	r3, [r7, #18]
 800aab2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d206      	bcs.n	800aac6 <tcp_write+0x14a>
 800aab8:	4b67      	ldr	r3, [pc, #412]	@ (800ac58 <tcp_write+0x2dc>)
 800aaba:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800aabe:	496b      	ldr	r1, [pc, #428]	@ (800ac6c <tcp_write+0x2f0>)
 800aac0:	4867      	ldr	r0, [pc, #412]	@ (800ac60 <tcp_write+0x2e4>)
 800aac2:	f004 fc4b 	bl	800f35c <iprintf>
      seg = last_unsent;
 800aac6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800aaca:	8a7b      	ldrh	r3, [r7, #18]
 800aacc:	88fa      	ldrh	r2, [r7, #6]
 800aace:	4293      	cmp	r3, r2
 800aad0:	bf28      	it	cs
 800aad2:	4613      	movcs	r3, r2
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800aad8:	4293      	cmp	r3, r2
 800aada:	bf28      	it	cs
 800aadc:	4613      	movcs	r3, r2
 800aade:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 800aae0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800aae4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800aae6:	4413      	add	r3, r2
 800aae8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 800aaec:	8a7a      	ldrh	r2, [r7, #18]
 800aaee:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800aaf0:	1ad3      	subs	r3, r2, r3
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800aaf6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800aaf8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800aafa:	1ad3      	subs	r3, r2, r3
 800aafc:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800aafe:	8a7b      	ldrh	r3, [r7, #18]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d00b      	beq.n	800ab1c <tcp_write+0x1a0>
 800ab04:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ab08:	88fb      	ldrh	r3, [r7, #6]
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d006      	beq.n	800ab1c <tcp_write+0x1a0>
 800ab0e:	4b52      	ldr	r3, [pc, #328]	@ (800ac58 <tcp_write+0x2dc>)
 800ab10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ab14:	4956      	ldr	r1, [pc, #344]	@ (800ac70 <tcp_write+0x2f4>)
 800ab16:	4852      	ldr	r0, [pc, #328]	@ (800ac60 <tcp_write+0x2e4>)
 800ab18:	f004 fc20 	bl	800f35c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800ab1c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ab20:	88fb      	ldrh	r3, [r7, #6]
 800ab22:	429a      	cmp	r2, r3
 800ab24:	f080 8167 	bcs.w	800adf6 <tcp_write+0x47a>
 800ab28:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	f000 8163 	beq.w	800adf6 <tcp_write+0x47a>
 800ab30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab32:	891b      	ldrh	r3, [r3, #8]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	f000 815e 	beq.w	800adf6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800ab3a:	88fa      	ldrh	r2, [r7, #6]
 800ab3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ab40:	1ad2      	subs	r2, r2, r3
 800ab42:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ab44:	4293      	cmp	r3, r2
 800ab46:	bfa8      	it	ge
 800ab48:	4613      	movge	r3, r2
 800ab4a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800ab4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab4e:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ab50:	797b      	ldrb	r3, [r7, #5]
 800ab52:	f003 0301 	and.w	r3, r3, #1
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d027      	beq.n	800abaa <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800ab5a:	f107 0012 	add.w	r0, r7, #18
 800ab5e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ab60:	8bf9      	ldrh	r1, [r7, #30]
 800ab62:	2301      	movs	r3, #1
 800ab64:	9302      	str	r3, [sp, #8]
 800ab66:	797b      	ldrb	r3, [r7, #5]
 800ab68:	9301      	str	r3, [sp, #4]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	9300      	str	r3, [sp, #0]
 800ab6e:	4603      	mov	r3, r0
 800ab70:	2000      	movs	r0, #0
 800ab72:	f7ff fe0f 	bl	800a794 <tcp_pbuf_prealloc>
 800ab76:	6578      	str	r0, [r7, #84]	@ 0x54
 800ab78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	f000 8225 	beq.w	800afca <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800ab80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab82:	6858      	ldr	r0, [r3, #4]
 800ab84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ab88:	68ba      	ldr	r2, [r7, #8]
 800ab8a:	4413      	add	r3, r2
 800ab8c:	8bfa      	ldrh	r2, [r7, #30]
 800ab8e:	4619      	mov	r1, r3
 800ab90:	f004 fc4f 	bl	800f432 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800ab94:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800ab96:	f7fb faf1 	bl	800617c <pbuf_clen>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800aba2:	4413      	add	r3, r2
 800aba4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800aba8:	e041      	b.n	800ac2e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800abaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	637b      	str	r3, [r7, #52]	@ 0x34
 800abb0:	e002      	b.n	800abb8 <tcp_write+0x23c>
 800abb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800abb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d1f8      	bne.n	800abb2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800abc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abc2:	7b1b      	ldrb	r3, [r3, #12]
 800abc4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d115      	bne.n	800abf8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800abcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800abd2:	8952      	ldrh	r2, [r2, #10]
 800abd4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800abd6:	68ba      	ldr	r2, [r7, #8]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d10d      	bne.n	800abf8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800abdc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d006      	beq.n	800abf2 <tcp_write+0x276>
 800abe4:	4b1c      	ldr	r3, [pc, #112]	@ (800ac58 <tcp_write+0x2dc>)
 800abe6:	f240 2231 	movw	r2, #561	@ 0x231
 800abea:	4922      	ldr	r1, [pc, #136]	@ (800ac74 <tcp_write+0x2f8>)
 800abec:	481c      	ldr	r0, [pc, #112]	@ (800ac60 <tcp_write+0x2e4>)
 800abee:	f004 fbb5 	bl	800f35c <iprintf>
          extendlen = seglen;
 800abf2:	8bfb      	ldrh	r3, [r7, #30]
 800abf4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800abf6:	e01a      	b.n	800ac2e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800abf8:	8bfb      	ldrh	r3, [r7, #30]
 800abfa:	2201      	movs	r2, #1
 800abfc:	4619      	mov	r1, r3
 800abfe:	2000      	movs	r0, #0
 800ac00:	f7fa ff50 	bl	8005aa4 <pbuf_alloc>
 800ac04:	6578      	str	r0, [r7, #84]	@ 0x54
 800ac06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	f000 81e0 	beq.w	800afce <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800ac0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ac12:	68ba      	ldr	r2, [r7, #8]
 800ac14:	441a      	add	r2, r3
 800ac16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac18:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800ac1a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800ac1c:	f7fb faae 	bl	800617c <pbuf_clen>
 800ac20:	4603      	mov	r3, r0
 800ac22:	461a      	mov	r2, r3
 800ac24:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ac28:	4413      	add	r3, r2
 800ac2a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800ac2e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ac32:	8bfb      	ldrh	r3, [r7, #30]
 800ac34:	4413      	add	r3, r2
 800ac36:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800ac3a:	e0dc      	b.n	800adf6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	f000 80d7 	beq.w	800adf6 <tcp_write+0x47a>
 800ac48:	4b03      	ldr	r3, [pc, #12]	@ (800ac58 <tcp_write+0x2dc>)
 800ac4a:	f240 224a 	movw	r2, #586	@ 0x24a
 800ac4e:	490a      	ldr	r1, [pc, #40]	@ (800ac78 <tcp_write+0x2fc>)
 800ac50:	4803      	ldr	r0, [pc, #12]	@ (800ac60 <tcp_write+0x2e4>)
 800ac52:	f004 fb83 	bl	800f35c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800ac56:	e0ce      	b.n	800adf6 <tcp_write+0x47a>
 800ac58:	08011dfc 	.word	0x08011dfc
 800ac5c:	08011f9c 	.word	0x08011f9c
 800ac60:	08011e50 	.word	0x08011e50
 800ac64:	08011fb4 	.word	0x08011fb4
 800ac68:	08011fe8 	.word	0x08011fe8
 800ac6c:	08012000 	.word	0x08012000
 800ac70:	08012020 	.word	0x08012020
 800ac74:	08012040 	.word	0x08012040
 800ac78:	0801206c 	.word	0x0801206c
    struct pbuf *p;
    u16_t left = len - pos;
 800ac7c:	88fa      	ldrh	r2, [r7, #6]
 800ac7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ac82:	1ad3      	subs	r3, r2, r3
 800ac84:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800ac86:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ac8e:	1ad3      	subs	r3, r2, r3
 800ac90:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800ac92:	8b7a      	ldrh	r2, [r7, #26]
 800ac94:	8bbb      	ldrh	r3, [r7, #28]
 800ac96:	4293      	cmp	r3, r2
 800ac98:	bf28      	it	cs
 800ac9a:	4613      	movcs	r3, r2
 800ac9c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ac9e:	797b      	ldrb	r3, [r7, #5]
 800aca0:	f003 0301 	and.w	r3, r3, #1
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d036      	beq.n	800ad16 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800aca8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800acac:	b29a      	uxth	r2, r3
 800acae:	8b3b      	ldrh	r3, [r7, #24]
 800acb0:	4413      	add	r3, r2
 800acb2:	b299      	uxth	r1, r3
 800acb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	bf0c      	ite	eq
 800acba:	2301      	moveq	r3, #1
 800acbc:	2300      	movne	r3, #0
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	f107 0012 	add.w	r0, r7, #18
 800acc4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800acc6:	9302      	str	r3, [sp, #8]
 800acc8:	797b      	ldrb	r3, [r7, #5]
 800acca:	9301      	str	r3, [sp, #4]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	9300      	str	r3, [sp, #0]
 800acd0:	4603      	mov	r3, r0
 800acd2:	2036      	movs	r0, #54	@ 0x36
 800acd4:	f7ff fd5e 	bl	800a794 <tcp_pbuf_prealloc>
 800acd8:	6338      	str	r0, [r7, #48]	@ 0x30
 800acda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acdc:	2b00      	cmp	r3, #0
 800acde:	f000 8178 	beq.w	800afd2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800ace2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace4:	895b      	ldrh	r3, [r3, #10]
 800ace6:	8b3a      	ldrh	r2, [r7, #24]
 800ace8:	429a      	cmp	r2, r3
 800acea:	d906      	bls.n	800acfa <tcp_write+0x37e>
 800acec:	4b8c      	ldr	r3, [pc, #560]	@ (800af20 <tcp_write+0x5a4>)
 800acee:	f240 2266 	movw	r2, #614	@ 0x266
 800acf2:	498c      	ldr	r1, [pc, #560]	@ (800af24 <tcp_write+0x5a8>)
 800acf4:	488c      	ldr	r0, [pc, #560]	@ (800af28 <tcp_write+0x5ac>)
 800acf6:	f004 fb31 	bl	800f35c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800acfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acfc:	685a      	ldr	r2, [r3, #4]
 800acfe:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ad02:	18d0      	adds	r0, r2, r3
 800ad04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ad08:	68ba      	ldr	r2, [r7, #8]
 800ad0a:	4413      	add	r3, r2
 800ad0c:	8b3a      	ldrh	r2, [r7, #24]
 800ad0e:	4619      	mov	r1, r3
 800ad10:	f004 fb8f 	bl	800f432 <memcpy>
 800ad14:	e02f      	b.n	800ad76 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800ad16:	8a7b      	ldrh	r3, [r7, #18]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d006      	beq.n	800ad2a <tcp_write+0x3ae>
 800ad1c:	4b80      	ldr	r3, [pc, #512]	@ (800af20 <tcp_write+0x5a4>)
 800ad1e:	f240 2271 	movw	r2, #625	@ 0x271
 800ad22:	4982      	ldr	r1, [pc, #520]	@ (800af2c <tcp_write+0x5b0>)
 800ad24:	4880      	ldr	r0, [pc, #512]	@ (800af28 <tcp_write+0x5ac>)
 800ad26:	f004 fb19 	bl	800f35c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800ad2a:	8b3b      	ldrh	r3, [r7, #24]
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	4619      	mov	r1, r3
 800ad30:	2036      	movs	r0, #54	@ 0x36
 800ad32:	f7fa feb7 	bl	8005aa4 <pbuf_alloc>
 800ad36:	6178      	str	r0, [r7, #20]
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	f000 814b 	beq.w	800afd6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800ad40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ad44:	68ba      	ldr	r2, [r7, #8]
 800ad46:	441a      	add	r2, r3
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ad4c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ad56:	4619      	mov	r1, r3
 800ad58:	2036      	movs	r0, #54	@ 0x36
 800ad5a:	f7fa fea3 	bl	8005aa4 <pbuf_alloc>
 800ad5e:	6338      	str	r0, [r7, #48]	@ 0x30
 800ad60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d103      	bne.n	800ad6e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800ad66:	6978      	ldr	r0, [r7, #20]
 800ad68:	f7fb f980 	bl	800606c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800ad6c:	e136      	b.n	800afdc <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800ad6e:	6979      	ldr	r1, [r7, #20]
 800ad70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ad72:	f7fb fa3d 	bl	80061f0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800ad76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ad78:	f7fb fa00 	bl	800617c <pbuf_clen>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	461a      	mov	r2, r3
 800ad80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ad84:	4413      	add	r3, r2
 800ad86:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800ad8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ad8e:	2b09      	cmp	r3, #9
 800ad90:	d903      	bls.n	800ad9a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800ad92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ad94:	f7fb f96a 	bl	800606c <pbuf_free>
      goto memerr;
 800ad98:	e120      	b.n	800afdc <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ad9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ada2:	441a      	add	r2, r3
 800ada4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ada8:	9300      	str	r3, [sp, #0]
 800adaa:	4613      	mov	r3, r2
 800adac:	2200      	movs	r2, #0
 800adae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	f7ff fc53 	bl	800a65c <tcp_create_segment>
 800adb6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800adb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adba:	2b00      	cmp	r3, #0
 800adbc:	f000 810d 	beq.w	800afda <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800adc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d102      	bne.n	800adcc <tcp_write+0x450>
      queue = seg;
 800adc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adc8:	647b      	str	r3, [r7, #68]	@ 0x44
 800adca:	e00c      	b.n	800ade6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800adcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adce:	2b00      	cmp	r3, #0
 800add0:	d106      	bne.n	800ade0 <tcp_write+0x464>
 800add2:	4b53      	ldr	r3, [pc, #332]	@ (800af20 <tcp_write+0x5a4>)
 800add4:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800add8:	4955      	ldr	r1, [pc, #340]	@ (800af30 <tcp_write+0x5b4>)
 800adda:	4853      	ldr	r0, [pc, #332]	@ (800af28 <tcp_write+0x5ac>)
 800addc:	f004 fabe 	bl	800f35c <iprintf>
      prev_seg->next = seg;
 800ade0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ade2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ade4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800ade6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ade8:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800adea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800adee:	8b3b      	ldrh	r3, [r7, #24]
 800adf0:	4413      	add	r3, r2
 800adf2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 800adf6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800adfa:	88fb      	ldrh	r3, [r7, #6]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	f4ff af3d 	bcc.w	800ac7c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800ae02:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d02c      	beq.n	800ae62 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800ae08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae0e:	e01e      	b.n	800ae4e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800ae10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae12:	891a      	ldrh	r2, [r3, #8]
 800ae14:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ae16:	4413      	add	r3, r2
 800ae18:	b29a      	uxth	r2, r3
 800ae1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae1c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800ae1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d110      	bne.n	800ae48 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800ae26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae2c:	8952      	ldrh	r2, [r2, #10]
 800ae2e:	4413      	add	r3, r2
 800ae30:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800ae32:	68b9      	ldr	r1, [r7, #8]
 800ae34:	4618      	mov	r0, r3
 800ae36:	f004 fafc 	bl	800f432 <memcpy>
        p->len += oversize_used;
 800ae3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae3c:	895a      	ldrh	r2, [r3, #10]
 800ae3e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ae40:	4413      	add	r3, r2
 800ae42:	b29a      	uxth	r2, r3
 800ae44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae46:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800ae48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d1dd      	bne.n	800ae10 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800ae54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae56:	891a      	ldrh	r2, [r3, #8]
 800ae58:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ae5a:	4413      	add	r3, r2
 800ae5c:	b29a      	uxth	r2, r3
 800ae5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae60:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800ae62:	8a7a      	ldrh	r2, [r7, #18]
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800ae6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d018      	beq.n	800aea2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800ae70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d106      	bne.n	800ae84 <tcp_write+0x508>
 800ae76:	4b2a      	ldr	r3, [pc, #168]	@ (800af20 <tcp_write+0x5a4>)
 800ae78:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800ae7c:	492d      	ldr	r1, [pc, #180]	@ (800af34 <tcp_write+0x5b8>)
 800ae7e:	482a      	ldr	r0, [pc, #168]	@ (800af28 <tcp_write+0x5ac>)
 800ae80:	f004 fa6c 	bl	800f35c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800ae84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7fb f9b0 	bl	80061f0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800ae90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae92:	891a      	ldrh	r2, [r3, #8]
 800ae94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae96:	891b      	ldrh	r3, [r3, #8]
 800ae98:	4413      	add	r3, r2
 800ae9a:	b29a      	uxth	r2, r3
 800ae9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae9e:	811a      	strh	r2, [r3, #8]
 800aea0:	e037      	b.n	800af12 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800aea2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d034      	beq.n	800af12 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800aea8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d003      	beq.n	800aeb6 <tcp_write+0x53a>
 800aeae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d106      	bne.n	800aec4 <tcp_write+0x548>
 800aeb6:	4b1a      	ldr	r3, [pc, #104]	@ (800af20 <tcp_write+0x5a4>)
 800aeb8:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800aebc:	491e      	ldr	r1, [pc, #120]	@ (800af38 <tcp_write+0x5bc>)
 800aebe:	481a      	ldr	r0, [pc, #104]	@ (800af28 <tcp_write+0x5ac>)
 800aec0:	f004 fa4c 	bl	800f35c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800aec4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aeca:	e009      	b.n	800aee0 <tcp_write+0x564>
      p->tot_len += extendlen;
 800aecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aece:	891a      	ldrh	r2, [r3, #8]
 800aed0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800aed2:	4413      	add	r3, r2
 800aed4:	b29a      	uxth	r2, r3
 800aed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aed8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800aeda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d1f1      	bne.n	800aecc <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800aee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeea:	891a      	ldrh	r2, [r3, #8]
 800aeec:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800aeee:	4413      	add	r3, r2
 800aef0:	b29a      	uxth	r2, r3
 800aef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aef4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800aef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aef8:	895a      	ldrh	r2, [r3, #10]
 800aefa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800aefc:	4413      	add	r3, r2
 800aefe:	b29a      	uxth	r2, r3
 800af00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af02:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800af04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af06:	891a      	ldrh	r2, [r3, #8]
 800af08:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800af0a:	4413      	add	r3, r2
 800af0c:	b29a      	uxth	r2, r3
 800af0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af10:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800af12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af14:	2b00      	cmp	r3, #0
 800af16:	d111      	bne.n	800af3c <tcp_write+0x5c0>
    pcb->unsent = queue;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af1c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800af1e:	e010      	b.n	800af42 <tcp_write+0x5c6>
 800af20:	08011dfc 	.word	0x08011dfc
 800af24:	0801209c 	.word	0x0801209c
 800af28:	08011e50 	.word	0x08011e50
 800af2c:	080120dc 	.word	0x080120dc
 800af30:	080120ec 	.word	0x080120ec
 800af34:	08012100 	.word	0x08012100
 800af38:	08012138 	.word	0x08012138
  } else {
    last_unsent->next = queue;
 800af3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af40:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800af46:	88fb      	ldrh	r3, [r7, #6]
 800af48:	441a      	add	r2, r3
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800af54:	88fb      	ldrh	r3, [r7, #6]
 800af56:	1ad3      	subs	r3, r2, r3
 800af58:	b29a      	uxth	r2, r3
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800af66:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800af70:	2b00      	cmp	r3, #0
 800af72:	d00e      	beq.n	800af92 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d10a      	bne.n	800af92 <tcp_write+0x616>
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af80:	2b00      	cmp	r3, #0
 800af82:	d106      	bne.n	800af92 <tcp_write+0x616>
 800af84:	4b2c      	ldr	r3, [pc, #176]	@ (800b038 <tcp_write+0x6bc>)
 800af86:	f240 3212 	movw	r2, #786	@ 0x312
 800af8a:	492c      	ldr	r1, [pc, #176]	@ (800b03c <tcp_write+0x6c0>)
 800af8c:	482c      	ldr	r0, [pc, #176]	@ (800b040 <tcp_write+0x6c4>)
 800af8e:	f004 f9e5 	bl	800f35c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800af92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af94:	2b00      	cmp	r3, #0
 800af96:	d016      	beq.n	800afc6 <tcp_write+0x64a>
 800af98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af9a:	68db      	ldr	r3, [r3, #12]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d012      	beq.n	800afc6 <tcp_write+0x64a>
 800afa0:	797b      	ldrb	r3, [r7, #5]
 800afa2:	f003 0302 	and.w	r3, r3, #2
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d10d      	bne.n	800afc6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800afaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afac:	68db      	ldr	r3, [r3, #12]
 800afae:	899b      	ldrh	r3, [r3, #12]
 800afb0:	b29c      	uxth	r4, r3
 800afb2:	2008      	movs	r0, #8
 800afb4:	f7f9 fcfc 	bl	80049b0 <lwip_htons>
 800afb8:	4603      	mov	r3, r0
 800afba:	461a      	mov	r2, r3
 800afbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	4322      	orrs	r2, r4
 800afc2:	b292      	uxth	r2, r2
 800afc4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800afc6:	2300      	movs	r3, #0
 800afc8:	e031      	b.n	800b02e <tcp_write+0x6b2>
          goto memerr;
 800afca:	bf00      	nop
 800afcc:	e006      	b.n	800afdc <tcp_write+0x660>
            goto memerr;
 800afce:	bf00      	nop
 800afd0:	e004      	b.n	800afdc <tcp_write+0x660>
        goto memerr;
 800afd2:	bf00      	nop
 800afd4:	e002      	b.n	800afdc <tcp_write+0x660>
        goto memerr;
 800afd6:	bf00      	nop
 800afd8:	e000      	b.n	800afdc <tcp_write+0x660>
      goto memerr;
 800afda:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	8b5b      	ldrh	r3, [r3, #26]
 800afe0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afe4:	b29a      	uxth	r2, r3
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800afea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afec:	2b00      	cmp	r3, #0
 800afee:	d002      	beq.n	800aff6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800aff0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800aff2:	f7fb f83b 	bl	800606c <pbuf_free>
  }
  if (queue != NULL) {
 800aff6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d002      	beq.n	800b002 <tcp_write+0x686>
    tcp_segs_free(queue);
 800affc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800affe:	f7fc fbf3 	bl	80077e8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d00e      	beq.n	800b02a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b010:	2b00      	cmp	r3, #0
 800b012:	d10a      	bne.n	800b02a <tcp_write+0x6ae>
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d106      	bne.n	800b02a <tcp_write+0x6ae>
 800b01c:	4b06      	ldr	r3, [pc, #24]	@ (800b038 <tcp_write+0x6bc>)
 800b01e:	f240 3227 	movw	r2, #807	@ 0x327
 800b022:	4906      	ldr	r1, [pc, #24]	@ (800b03c <tcp_write+0x6c0>)
 800b024:	4806      	ldr	r0, [pc, #24]	@ (800b040 <tcp_write+0x6c4>)
 800b026:	f004 f999 	bl	800f35c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800b02a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800b02e:	4618      	mov	r0, r3
 800b030:	375c      	adds	r7, #92	@ 0x5c
 800b032:	46bd      	mov	sp, r7
 800b034:	bd90      	pop	{r4, r7, pc}
 800b036:	bf00      	nop
 800b038:	08011dfc 	.word	0x08011dfc
 800b03c:	08012170 	.word	0x08012170
 800b040:	08011e50 	.word	0x08011e50

0800b044 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b044:	b590      	push	{r4, r7, lr}
 800b046:	b08b      	sub	sp, #44	@ 0x2c
 800b048:	af02      	add	r7, sp, #8
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	460b      	mov	r3, r1
 800b04e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b050:	2300      	movs	r3, #0
 800b052:	61fb      	str	r3, [r7, #28]
 800b054:	2300      	movs	r3, #0
 800b056:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b058:	2300      	movs	r3, #0
 800b05a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d106      	bne.n	800b070 <tcp_split_unsent_seg+0x2c>
 800b062:	4b95      	ldr	r3, [pc, #596]	@ (800b2b8 <tcp_split_unsent_seg+0x274>)
 800b064:	f240 324b 	movw	r2, #843	@ 0x34b
 800b068:	4994      	ldr	r1, [pc, #592]	@ (800b2bc <tcp_split_unsent_seg+0x278>)
 800b06a:	4895      	ldr	r0, [pc, #596]	@ (800b2c0 <tcp_split_unsent_seg+0x27c>)
 800b06c:	f004 f976 	bl	800f35c <iprintf>

  useg = pcb->unsent;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b074:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d102      	bne.n	800b082 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800b07c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b080:	e116      	b.n	800b2b0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800b082:	887b      	ldrh	r3, [r7, #2]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d109      	bne.n	800b09c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b088:	4b8b      	ldr	r3, [pc, #556]	@ (800b2b8 <tcp_split_unsent_seg+0x274>)
 800b08a:	f240 3253 	movw	r2, #851	@ 0x353
 800b08e:	498d      	ldr	r1, [pc, #564]	@ (800b2c4 <tcp_split_unsent_seg+0x280>)
 800b090:	488b      	ldr	r0, [pc, #556]	@ (800b2c0 <tcp_split_unsent_seg+0x27c>)
 800b092:	f004 f963 	bl	800f35c <iprintf>
    return ERR_VAL;
 800b096:	f06f 0305 	mvn.w	r3, #5
 800b09a:	e109      	b.n	800b2b0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	891b      	ldrh	r3, [r3, #8]
 800b0a0:	887a      	ldrh	r2, [r7, #2]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d301      	bcc.n	800b0aa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	e102      	b.n	800b2b0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b0ae:	887a      	ldrh	r2, [r7, #2]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d906      	bls.n	800b0c2 <tcp_split_unsent_seg+0x7e>
 800b0b4:	4b80      	ldr	r3, [pc, #512]	@ (800b2b8 <tcp_split_unsent_seg+0x274>)
 800b0b6:	f240 325b 	movw	r2, #859	@ 0x35b
 800b0ba:	4983      	ldr	r1, [pc, #524]	@ (800b2c8 <tcp_split_unsent_seg+0x284>)
 800b0bc:	4880      	ldr	r0, [pc, #512]	@ (800b2c0 <tcp_split_unsent_seg+0x27c>)
 800b0be:	f004 f94d 	bl	800f35c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	891b      	ldrh	r3, [r3, #8]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d106      	bne.n	800b0d8 <tcp_split_unsent_seg+0x94>
 800b0ca:	4b7b      	ldr	r3, [pc, #492]	@ (800b2b8 <tcp_split_unsent_seg+0x274>)
 800b0cc:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800b0d0:	497e      	ldr	r1, [pc, #504]	@ (800b2cc <tcp_split_unsent_seg+0x288>)
 800b0d2:	487b      	ldr	r0, [pc, #492]	@ (800b2c0 <tcp_split_unsent_seg+0x27c>)
 800b0d4:	f004 f942 	bl	800f35c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	7a9b      	ldrb	r3, [r3, #10]
 800b0dc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b0de:	7bfb      	ldrb	r3, [r7, #15]
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	f003 0304 	and.w	r3, r3, #4
 800b0e8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	891a      	ldrh	r2, [r3, #8]
 800b0ee:	887b      	ldrh	r3, [r7, #2]
 800b0f0:	1ad3      	subs	r3, r2, r3
 800b0f2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b0f4:	7bbb      	ldrb	r3, [r7, #14]
 800b0f6:	b29a      	uxth	r2, r3
 800b0f8:	89bb      	ldrh	r3, [r7, #12]
 800b0fa:	4413      	add	r3, r2
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b102:	4619      	mov	r1, r3
 800b104:	2036      	movs	r0, #54	@ 0x36
 800b106:	f7fa fccd 	bl	8005aa4 <pbuf_alloc>
 800b10a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	f000 80b7 	beq.w	800b282 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	891a      	ldrh	r2, [r3, #8]
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	891b      	ldrh	r3, [r3, #8]
 800b11e:	1ad3      	subs	r3, r2, r3
 800b120:	b29a      	uxth	r2, r3
 800b122:	887b      	ldrh	r3, [r7, #2]
 800b124:	4413      	add	r3, r2
 800b126:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	6858      	ldr	r0, [r3, #4]
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	685a      	ldr	r2, [r3, #4]
 800b130:	7bbb      	ldrb	r3, [r7, #14]
 800b132:	18d1      	adds	r1, r2, r3
 800b134:	897b      	ldrh	r3, [r7, #10]
 800b136:	89ba      	ldrh	r2, [r7, #12]
 800b138:	f7fb f982 	bl	8006440 <pbuf_copy_partial>
 800b13c:	4603      	mov	r3, r0
 800b13e:	461a      	mov	r2, r3
 800b140:	89bb      	ldrh	r3, [r7, #12]
 800b142:	4293      	cmp	r3, r2
 800b144:	f040 809f 	bne.w	800b286 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	899b      	ldrh	r3, [r3, #12]
 800b14e:	b29b      	uxth	r3, r3
 800b150:	4618      	mov	r0, r3
 800b152:	f7f9 fc2d 	bl	80049b0 <lwip_htons>
 800b156:	4603      	mov	r3, r0
 800b158:	b2db      	uxtb	r3, r3
 800b15a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b15e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b160:	2300      	movs	r3, #0
 800b162:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800b164:	7efb      	ldrb	r3, [r7, #27]
 800b166:	f003 0308 	and.w	r3, r3, #8
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d007      	beq.n	800b17e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800b16e:	7efb      	ldrb	r3, [r7, #27]
 800b170:	f023 0308 	bic.w	r3, r3, #8
 800b174:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800b176:	7ebb      	ldrb	r3, [r7, #26]
 800b178:	f043 0308 	orr.w	r3, r3, #8
 800b17c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800b17e:	7efb      	ldrb	r3, [r7, #27]
 800b180:	f003 0301 	and.w	r3, r3, #1
 800b184:	2b00      	cmp	r3, #0
 800b186:	d007      	beq.n	800b198 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800b188:	7efb      	ldrb	r3, [r7, #27]
 800b18a:	f023 0301 	bic.w	r3, r3, #1
 800b18e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800b190:	7ebb      	ldrb	r3, [r7, #26]
 800b192:	f043 0301 	orr.w	r3, r3, #1
 800b196:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7f9 fc1c 	bl	80049dc <lwip_htonl>
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	887b      	ldrh	r3, [r7, #2]
 800b1a8:	18d1      	adds	r1, r2, r3
 800b1aa:	7eba      	ldrb	r2, [r7, #26]
 800b1ac:	7bfb      	ldrb	r3, [r7, #15]
 800b1ae:	9300      	str	r3, [sp, #0]
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	6939      	ldr	r1, [r7, #16]
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f7ff fa51 	bl	800a65c <tcp_create_segment>
 800b1ba:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800b1bc:	69fb      	ldr	r3, [r7, #28]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d063      	beq.n	800b28a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f7fa ffd8 	bl	800617c <pbuf_clen>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b1d6:	1a9b      	subs	r3, r3, r2
 800b1d8:	b29a      	uxth	r2, r3
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	6858      	ldr	r0, [r3, #4]
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	891a      	ldrh	r2, [r3, #8]
 800b1ea:	89bb      	ldrh	r3, [r7, #12]
 800b1ec:	1ad3      	subs	r3, r2, r3
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	f7fa fdb5 	bl	8005d60 <pbuf_realloc>
  useg->len -= remainder;
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	891a      	ldrh	r2, [r3, #8]
 800b1fa:	89bb      	ldrh	r3, [r7, #12]
 800b1fc:	1ad3      	subs	r3, r2, r3
 800b1fe:	b29a      	uxth	r2, r3
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	68db      	ldr	r3, [r3, #12]
 800b208:	899b      	ldrh	r3, [r3, #12]
 800b20a:	b29c      	uxth	r4, r3
 800b20c:	7efb      	ldrb	r3, [r7, #27]
 800b20e:	b29b      	uxth	r3, r3
 800b210:	4618      	mov	r0, r3
 800b212:	f7f9 fbcd 	bl	80049b0 <lwip_htons>
 800b216:	4603      	mov	r3, r0
 800b218:	461a      	mov	r2, r3
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	68db      	ldr	r3, [r3, #12]
 800b21e:	4322      	orrs	r2, r4
 800b220:	b292      	uxth	r2, r2
 800b222:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	4618      	mov	r0, r3
 800b22a:	f7fa ffa7 	bl	800617c <pbuf_clen>
 800b22e:	4603      	mov	r3, r0
 800b230:	461a      	mov	r2, r3
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b238:	4413      	add	r3, r2
 800b23a:	b29a      	uxth	r2, r3
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b242:	69fb      	ldr	r3, [r7, #28]
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	4618      	mov	r0, r3
 800b248:	f7fa ff98 	bl	800617c <pbuf_clen>
 800b24c:	4603      	mov	r3, r0
 800b24e:	461a      	mov	r2, r3
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b256:	4413      	add	r3, r2
 800b258:	b29a      	uxth	r2, r3
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	69fb      	ldr	r3, [r7, #28]
 800b266:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	69fa      	ldr	r2, [r7, #28]
 800b26c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b26e:	69fb      	ldr	r3, [r7, #28]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d103      	bne.n	800b27e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b27e:	2300      	movs	r3, #0
 800b280:	e016      	b.n	800b2b0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800b282:	bf00      	nop
 800b284:	e002      	b.n	800b28c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b286:	bf00      	nop
 800b288:	e000      	b.n	800b28c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b28a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d006      	beq.n	800b2a0 <tcp_split_unsent_seg+0x25c>
 800b292:	4b09      	ldr	r3, [pc, #36]	@ (800b2b8 <tcp_split_unsent_seg+0x274>)
 800b294:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800b298:	490d      	ldr	r1, [pc, #52]	@ (800b2d0 <tcp_split_unsent_seg+0x28c>)
 800b29a:	4809      	ldr	r0, [pc, #36]	@ (800b2c0 <tcp_split_unsent_seg+0x27c>)
 800b29c:	f004 f85e 	bl	800f35c <iprintf>
  if (p != NULL) {
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d002      	beq.n	800b2ac <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800b2a6:	6938      	ldr	r0, [r7, #16]
 800b2a8:	f7fa fee0 	bl	800606c <pbuf_free>
  }

  return ERR_MEM;
 800b2ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3724      	adds	r7, #36	@ 0x24
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd90      	pop	{r4, r7, pc}
 800b2b8:	08011dfc 	.word	0x08011dfc
 800b2bc:	08012190 	.word	0x08012190
 800b2c0:	08011e50 	.word	0x08011e50
 800b2c4:	080121b4 	.word	0x080121b4
 800b2c8:	080121d8 	.word	0x080121d8
 800b2cc:	080121e8 	.word	0x080121e8
 800b2d0:	080121f8 	.word	0x080121f8

0800b2d4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b2d4:	b590      	push	{r4, r7, lr}
 800b2d6:	b085      	sub	sp, #20
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d106      	bne.n	800b2f0 <tcp_send_fin+0x1c>
 800b2e2:	4b21      	ldr	r3, [pc, #132]	@ (800b368 <tcp_send_fin+0x94>)
 800b2e4:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800b2e8:	4920      	ldr	r1, [pc, #128]	@ (800b36c <tcp_send_fin+0x98>)
 800b2ea:	4821      	ldr	r0, [pc, #132]	@ (800b370 <tcp_send_fin+0x9c>)
 800b2ec:	f004 f836 	bl	800f35c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d02e      	beq.n	800b356 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2fc:	60fb      	str	r3, [r7, #12]
 800b2fe:	e002      	b.n	800b306 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d1f8      	bne.n	800b300 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	899b      	ldrh	r3, [r3, #12]
 800b314:	b29b      	uxth	r3, r3
 800b316:	4618      	mov	r0, r3
 800b318:	f7f9 fb4a 	bl	80049b0 <lwip_htons>
 800b31c:	4603      	mov	r3, r0
 800b31e:	b2db      	uxtb	r3, r3
 800b320:	f003 0307 	and.w	r3, r3, #7
 800b324:	2b00      	cmp	r3, #0
 800b326:	d116      	bne.n	800b356 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	899b      	ldrh	r3, [r3, #12]
 800b32e:	b29c      	uxth	r4, r3
 800b330:	2001      	movs	r0, #1
 800b332:	f7f9 fb3d 	bl	80049b0 <lwip_htons>
 800b336:	4603      	mov	r3, r0
 800b338:	461a      	mov	r2, r3
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	68db      	ldr	r3, [r3, #12]
 800b33e:	4322      	orrs	r2, r4
 800b340:	b292      	uxth	r2, r2
 800b342:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	8b5b      	ldrh	r3, [r3, #26]
 800b348:	f043 0320 	orr.w	r3, r3, #32
 800b34c:	b29a      	uxth	r2, r3
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b352:	2300      	movs	r3, #0
 800b354:	e004      	b.n	800b360 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b356:	2101      	movs	r1, #1
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f000 f80b 	bl	800b374 <tcp_enqueue_flags>
 800b35e:	4603      	mov	r3, r0
}
 800b360:	4618      	mov	r0, r3
 800b362:	3714      	adds	r7, #20
 800b364:	46bd      	mov	sp, r7
 800b366:	bd90      	pop	{r4, r7, pc}
 800b368:	08011dfc 	.word	0x08011dfc
 800b36c:	08012204 	.word	0x08012204
 800b370:	08011e50 	.word	0x08011e50

0800b374 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b08a      	sub	sp, #40	@ 0x28
 800b378:	af02      	add	r7, sp, #8
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	460b      	mov	r3, r1
 800b37e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b380:	2300      	movs	r3, #0
 800b382:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b384:	2300      	movs	r3, #0
 800b386:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b388:	78fb      	ldrb	r3, [r7, #3]
 800b38a:	f003 0303 	and.w	r3, r3, #3
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d106      	bne.n	800b3a0 <tcp_enqueue_flags+0x2c>
 800b392:	4b67      	ldr	r3, [pc, #412]	@ (800b530 <tcp_enqueue_flags+0x1bc>)
 800b394:	f240 4211 	movw	r2, #1041	@ 0x411
 800b398:	4966      	ldr	r1, [pc, #408]	@ (800b534 <tcp_enqueue_flags+0x1c0>)
 800b39a:	4867      	ldr	r0, [pc, #412]	@ (800b538 <tcp_enqueue_flags+0x1c4>)
 800b39c:	f003 ffde 	bl	800f35c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d106      	bne.n	800b3b4 <tcp_enqueue_flags+0x40>
 800b3a6:	4b62      	ldr	r3, [pc, #392]	@ (800b530 <tcp_enqueue_flags+0x1bc>)
 800b3a8:	f240 4213 	movw	r2, #1043	@ 0x413
 800b3ac:	4963      	ldr	r1, [pc, #396]	@ (800b53c <tcp_enqueue_flags+0x1c8>)
 800b3ae:	4862      	ldr	r0, [pc, #392]	@ (800b538 <tcp_enqueue_flags+0x1c4>)
 800b3b0:	f003 ffd4 	bl	800f35c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b3b4:	78fb      	ldrb	r3, [r7, #3]
 800b3b6:	f003 0302 	and.w	r3, r3, #2
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d001      	beq.n	800b3c2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b3c2:	7ffb      	ldrb	r3, [r7, #31]
 800b3c4:	009b      	lsls	r3, r3, #2
 800b3c6:	b2db      	uxtb	r3, r3
 800b3c8:	f003 0304 	and.w	r3, r3, #4
 800b3cc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b3ce:	7dfb      	ldrb	r3, [r7, #23]
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	2036      	movs	r0, #54	@ 0x36
 800b3da:	f7fa fb63 	bl	8005aa4 <pbuf_alloc>
 800b3de:	6138      	str	r0, [r7, #16]
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d109      	bne.n	800b3fa <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	8b5b      	ldrh	r3, [r3, #26]
 800b3ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3ee:	b29a      	uxth	r2, r3
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b3f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b3f8:	e095      	b.n	800b526 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	895a      	ldrh	r2, [r3, #10]
 800b3fe:	7dfb      	ldrb	r3, [r7, #23]
 800b400:	b29b      	uxth	r3, r3
 800b402:	429a      	cmp	r2, r3
 800b404:	d206      	bcs.n	800b414 <tcp_enqueue_flags+0xa0>
 800b406:	4b4a      	ldr	r3, [pc, #296]	@ (800b530 <tcp_enqueue_flags+0x1bc>)
 800b408:	f240 4239 	movw	r2, #1081	@ 0x439
 800b40c:	494c      	ldr	r1, [pc, #304]	@ (800b540 <tcp_enqueue_flags+0x1cc>)
 800b40e:	484a      	ldr	r0, [pc, #296]	@ (800b538 <tcp_enqueue_flags+0x1c4>)
 800b410:	f003 ffa4 	bl	800f35c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800b418:	78fa      	ldrb	r2, [r7, #3]
 800b41a:	7ffb      	ldrb	r3, [r7, #31]
 800b41c:	9300      	str	r3, [sp, #0]
 800b41e:	460b      	mov	r3, r1
 800b420:	6939      	ldr	r1, [r7, #16]
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f7ff f91a 	bl	800a65c <tcp_create_segment>
 800b428:	60f8      	str	r0, [r7, #12]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d109      	bne.n	800b444 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	8b5b      	ldrh	r3, [r3, #26]
 800b434:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b438:	b29a      	uxth	r2, r3
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b43e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b442:	e070      	b.n	800b526 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	68db      	ldr	r3, [r3, #12]
 800b448:	f003 0303 	and.w	r3, r3, #3
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d006      	beq.n	800b45e <tcp_enqueue_flags+0xea>
 800b450:	4b37      	ldr	r3, [pc, #220]	@ (800b530 <tcp_enqueue_flags+0x1bc>)
 800b452:	f240 4242 	movw	r2, #1090	@ 0x442
 800b456:	493b      	ldr	r1, [pc, #236]	@ (800b544 <tcp_enqueue_flags+0x1d0>)
 800b458:	4837      	ldr	r0, [pc, #220]	@ (800b538 <tcp_enqueue_flags+0x1c4>)
 800b45a:	f003 ff7f 	bl	800f35c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	891b      	ldrh	r3, [r3, #8]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d006      	beq.n	800b474 <tcp_enqueue_flags+0x100>
 800b466:	4b32      	ldr	r3, [pc, #200]	@ (800b530 <tcp_enqueue_flags+0x1bc>)
 800b468:	f240 4243 	movw	r2, #1091	@ 0x443
 800b46c:	4936      	ldr	r1, [pc, #216]	@ (800b548 <tcp_enqueue_flags+0x1d4>)
 800b46e:	4832      	ldr	r0, [pc, #200]	@ (800b538 <tcp_enqueue_flags+0x1c4>)
 800b470:	f003 ff74 	bl	800f35c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d103      	bne.n	800b484 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	68fa      	ldr	r2, [r7, #12]
 800b480:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b482:	e00d      	b.n	800b4a0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b488:	61bb      	str	r3, [r7, #24]
 800b48a:	e002      	b.n	800b492 <tcp_enqueue_flags+0x11e>
 800b48c:	69bb      	ldr	r3, [r7, #24]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	61bb      	str	r3, [r7, #24]
 800b492:	69bb      	ldr	r3, [r7, #24]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d1f8      	bne.n	800b48c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b49a:	69bb      	ldr	r3, [r7, #24]
 800b49c:	68fa      	ldr	r2, [r7, #12]
 800b49e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b4a8:	78fb      	ldrb	r3, [r7, #3]
 800b4aa:	f003 0302 	and.w	r3, r3, #2
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d104      	bne.n	800b4bc <tcp_enqueue_flags+0x148>
 800b4b2:	78fb      	ldrb	r3, [r7, #3]
 800b4b4:	f003 0301 	and.w	r3, r3, #1
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d004      	beq.n	800b4c6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4c0:	1c5a      	adds	r2, r3, #1
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b4c6:	78fb      	ldrb	r3, [r7, #3]
 800b4c8:	f003 0301 	and.w	r3, r3, #1
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d006      	beq.n	800b4de <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	8b5b      	ldrh	r3, [r3, #26]
 800b4d4:	f043 0320 	orr.w	r3, r3, #32
 800b4d8:	b29a      	uxth	r2, r3
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7fa fe4a 	bl	800617c <pbuf_clen>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b4f2:	4413      	add	r3, r2
 800b4f4:	b29a      	uxth	r2, r3
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b502:	2b00      	cmp	r3, #0
 800b504:	d00e      	beq.n	800b524 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d10a      	bne.n	800b524 <tcp_enqueue_flags+0x1b0>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b512:	2b00      	cmp	r3, #0
 800b514:	d106      	bne.n	800b524 <tcp_enqueue_flags+0x1b0>
 800b516:	4b06      	ldr	r3, [pc, #24]	@ (800b530 <tcp_enqueue_flags+0x1bc>)
 800b518:	f240 4265 	movw	r2, #1125	@ 0x465
 800b51c:	490b      	ldr	r1, [pc, #44]	@ (800b54c <tcp_enqueue_flags+0x1d8>)
 800b51e:	4806      	ldr	r0, [pc, #24]	@ (800b538 <tcp_enqueue_flags+0x1c4>)
 800b520:	f003 ff1c 	bl	800f35c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b524:	2300      	movs	r3, #0
}
 800b526:	4618      	mov	r0, r3
 800b528:	3720      	adds	r7, #32
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	08011dfc 	.word	0x08011dfc
 800b534:	08012220 	.word	0x08012220
 800b538:	08011e50 	.word	0x08011e50
 800b53c:	08012278 	.word	0x08012278
 800b540:	08012298 	.word	0x08012298
 800b544:	080122d4 	.word	0x080122d4
 800b548:	080122ec 	.word	0x080122ec
 800b54c:	08012318 	.word	0x08012318

0800b550 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b550:	b5b0      	push	{r4, r5, r7, lr}
 800b552:	b08a      	sub	sp, #40	@ 0x28
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d106      	bne.n	800b56c <tcp_output+0x1c>
 800b55e:	4b8a      	ldr	r3, [pc, #552]	@ (800b788 <tcp_output+0x238>)
 800b560:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800b564:	4989      	ldr	r1, [pc, #548]	@ (800b78c <tcp_output+0x23c>)
 800b566:	488a      	ldr	r0, [pc, #552]	@ (800b790 <tcp_output+0x240>)
 800b568:	f003 fef8 	bl	800f35c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	7d1b      	ldrb	r3, [r3, #20]
 800b570:	2b01      	cmp	r3, #1
 800b572:	d106      	bne.n	800b582 <tcp_output+0x32>
 800b574:	4b84      	ldr	r3, [pc, #528]	@ (800b788 <tcp_output+0x238>)
 800b576:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800b57a:	4986      	ldr	r1, [pc, #536]	@ (800b794 <tcp_output+0x244>)
 800b57c:	4884      	ldr	r0, [pc, #528]	@ (800b790 <tcp_output+0x240>)
 800b57e:	f003 feed 	bl	800f35c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b582:	4b85      	ldr	r3, [pc, #532]	@ (800b798 <tcp_output+0x248>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	687a      	ldr	r2, [r7, #4]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d101      	bne.n	800b590 <tcp_output+0x40>
    return ERR_OK;
 800b58c:	2300      	movs	r3, #0
 800b58e:	e1ce      	b.n	800b92e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b59c:	4293      	cmp	r3, r2
 800b59e:	bf28      	it	cs
 800b5a0:	4613      	movcs	r3, r2
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5aa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800b5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d10b      	bne.n	800b5ca <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	8b5b      	ldrh	r3, [r3, #26]
 800b5b6:	f003 0302 	and.w	r3, r3, #2
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	f000 81aa 	beq.w	800b914 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 fdcb 	bl	800c15c <tcp_send_empty_ack>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	e1b1      	b.n	800b92e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b5ca:	6879      	ldr	r1, [r7, #4]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	3304      	adds	r3, #4
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f7ff f826 	bl	800a624 <tcp_route>
 800b5d8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d102      	bne.n	800b5e6 <tcp_output+0x96>
    return ERR_RTE;
 800b5e0:	f06f 0303 	mvn.w	r3, #3
 800b5e4:	e1a3      	b.n	800b92e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d003      	beq.n	800b5f4 <tcp_output+0xa4>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d111      	bne.n	800b618 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d002      	beq.n	800b600 <tcp_output+0xb0>
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	3304      	adds	r3, #4
 800b5fe:	e000      	b.n	800b602 <tcp_output+0xb2>
 800b600:	2300      	movs	r3, #0
 800b602:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d102      	bne.n	800b610 <tcp_output+0xc0>
      return ERR_RTE;
 800b60a:	f06f 0303 	mvn.w	r3, #3
 800b60e:	e18e      	b.n	800b92e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b61a:	68db      	ldr	r3, [r3, #12]
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	4618      	mov	r0, r3
 800b620:	f7f9 f9dc 	bl	80049dc <lwip_htonl>
 800b624:	4602      	mov	r2, r0
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b62a:	1ad3      	subs	r3, r2, r3
 800b62c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b62e:	8912      	ldrh	r2, [r2, #8]
 800b630:	4413      	add	r3, r2
 800b632:	69ba      	ldr	r2, [r7, #24]
 800b634:	429a      	cmp	r2, r3
 800b636:	d227      	bcs.n	800b688 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b63e:	461a      	mov	r2, r3
 800b640:	69bb      	ldr	r3, [r7, #24]
 800b642:	4293      	cmp	r3, r2
 800b644:	d114      	bne.n	800b670 <tcp_output+0x120>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d110      	bne.n	800b670 <tcp_output+0x120>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b654:	2b00      	cmp	r3, #0
 800b656:	d10b      	bne.n	800b670 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2200      	movs	r2, #0
 800b65c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2201      	movs	r2, #1
 800b664:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2200      	movs	r2, #0
 800b66c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	8b5b      	ldrh	r3, [r3, #26]
 800b674:	f003 0302 	and.w	r3, r3, #2
 800b678:	2b00      	cmp	r3, #0
 800b67a:	f000 814d 	beq.w	800b918 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f000 fd6c 	bl	800c15c <tcp_send_empty_ack>
 800b684:	4603      	mov	r3, r0
 800b686:	e152      	b.n	800b92e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2200      	movs	r2, #0
 800b68c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b694:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b696:	6a3b      	ldr	r3, [r7, #32]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	f000 811c 	beq.w	800b8d6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800b69e:	e002      	b.n	800b6a6 <tcp_output+0x156>
 800b6a0:	6a3b      	ldr	r3, [r7, #32]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	623b      	str	r3, [r7, #32]
 800b6a6:	6a3b      	ldr	r3, [r7, #32]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d1f8      	bne.n	800b6a0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b6ae:	e112      	b.n	800b8d6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b2:	68db      	ldr	r3, [r3, #12]
 800b6b4:	899b      	ldrh	r3, [r3, #12]
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7f9 f979 	bl	80049b0 <lwip_htons>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	f003 0304 	and.w	r3, r3, #4
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d006      	beq.n	800b6d8 <tcp_output+0x188>
 800b6ca:	4b2f      	ldr	r3, [pc, #188]	@ (800b788 <tcp_output+0x238>)
 800b6cc:	f240 5236 	movw	r2, #1334	@ 0x536
 800b6d0:	4932      	ldr	r1, [pc, #200]	@ (800b79c <tcp_output+0x24c>)
 800b6d2:	482f      	ldr	r0, [pc, #188]	@ (800b790 <tcp_output+0x240>)
 800b6d4:	f003 fe42 	bl	800f35c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d01f      	beq.n	800b720 <tcp_output+0x1d0>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	8b5b      	ldrh	r3, [r3, #26]
 800b6e4:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d119      	bne.n	800b720 <tcp_output+0x1d0>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d00b      	beq.n	800b70c <tcp_output+0x1bc>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d110      	bne.n	800b720 <tcp_output+0x1d0>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b702:	891a      	ldrh	r2, [r3, #8]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b708:	429a      	cmp	r2, r3
 800b70a:	d209      	bcs.n	800b720 <tcp_output+0x1d0>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b712:	2b00      	cmp	r3, #0
 800b714:	d004      	beq.n	800b720 <tcp_output+0x1d0>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b71c:	2b08      	cmp	r3, #8
 800b71e:	d901      	bls.n	800b724 <tcp_output+0x1d4>
 800b720:	2301      	movs	r3, #1
 800b722:	e000      	b.n	800b726 <tcp_output+0x1d6>
 800b724:	2300      	movs	r3, #0
 800b726:	2b00      	cmp	r3, #0
 800b728:	d106      	bne.n	800b738 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	8b5b      	ldrh	r3, [r3, #26]
 800b72e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b732:	2b00      	cmp	r3, #0
 800b734:	f000 80e4 	beq.w	800b900 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	7d1b      	ldrb	r3, [r3, #20]
 800b73c:	2b02      	cmp	r3, #2
 800b73e:	d00d      	beq.n	800b75c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b742:	68db      	ldr	r3, [r3, #12]
 800b744:	899b      	ldrh	r3, [r3, #12]
 800b746:	b29c      	uxth	r4, r3
 800b748:	2010      	movs	r0, #16
 800b74a:	f7f9 f931 	bl	80049b0 <lwip_htons>
 800b74e:	4603      	mov	r3, r0
 800b750:	461a      	mov	r2, r3
 800b752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b754:	68db      	ldr	r3, [r3, #12]
 800b756:	4322      	orrs	r2, r4
 800b758:	b292      	uxth	r2, r2
 800b75a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800b75c:	697a      	ldr	r2, [r7, #20]
 800b75e:	6879      	ldr	r1, [r7, #4]
 800b760:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b762:	f000 f909 	bl	800b978 <tcp_output_segment>
 800b766:	4603      	mov	r3, r0
 800b768:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b76a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d016      	beq.n	800b7a0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	8b5b      	ldrh	r3, [r3, #26]
 800b776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b77a:	b29a      	uxth	r2, r3
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	835a      	strh	r2, [r3, #26]
      return err;
 800b780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b784:	e0d3      	b.n	800b92e <tcp_output+0x3de>
 800b786:	bf00      	nop
 800b788:	08011dfc 	.word	0x08011dfc
 800b78c:	08012340 	.word	0x08012340
 800b790:	08011e50 	.word	0x08011e50
 800b794:	08012358 	.word	0x08012358
 800b798:	20008328 	.word	0x20008328
 800b79c:	08012380 	.word	0x08012380
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	7d1b      	ldrb	r3, [r3, #20]
 800b7ac:	2b02      	cmp	r3, #2
 800b7ae:	d006      	beq.n	800b7be <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	8b5b      	ldrh	r3, [r3, #26]
 800b7b4:	f023 0303 	bic.w	r3, r3, #3
 800b7b8:	b29a      	uxth	r2, r3
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b7be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7c0:	68db      	ldr	r3, [r3, #12]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f7f9 f909 	bl	80049dc <lwip_htonl>
 800b7ca:	4604      	mov	r4, r0
 800b7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ce:	891b      	ldrh	r3, [r3, #8]
 800b7d0:	461d      	mov	r5, r3
 800b7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d4:	68db      	ldr	r3, [r3, #12]
 800b7d6:	899b      	ldrh	r3, [r3, #12]
 800b7d8:	b29b      	uxth	r3, r3
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f7f9 f8e8 	bl	80049b0 <lwip_htons>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	f003 0303 	and.w	r3, r3, #3
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d001      	beq.n	800b7f0 <tcp_output+0x2a0>
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	e000      	b.n	800b7f2 <tcp_output+0x2a2>
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	442b      	add	r3, r5
 800b7f4:	4423      	add	r3, r4
 800b7f6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	1ad3      	subs	r3, r2, r3
 800b800:	2b00      	cmp	r3, #0
 800b802:	da02      	bge.n	800b80a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	68ba      	ldr	r2, [r7, #8]
 800b808:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b80c:	891b      	ldrh	r3, [r3, #8]
 800b80e:	461c      	mov	r4, r3
 800b810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	899b      	ldrh	r3, [r3, #12]
 800b816:	b29b      	uxth	r3, r3
 800b818:	4618      	mov	r0, r3
 800b81a:	f7f9 f8c9 	bl	80049b0 <lwip_htons>
 800b81e:	4603      	mov	r3, r0
 800b820:	b2db      	uxtb	r3, r3
 800b822:	f003 0303 	and.w	r3, r3, #3
 800b826:	2b00      	cmp	r3, #0
 800b828:	d001      	beq.n	800b82e <tcp_output+0x2de>
 800b82a:	2301      	movs	r3, #1
 800b82c:	e000      	b.n	800b830 <tcp_output+0x2e0>
 800b82e:	2300      	movs	r3, #0
 800b830:	4423      	add	r3, r4
 800b832:	2b00      	cmp	r3, #0
 800b834:	d049      	beq.n	800b8ca <tcp_output+0x37a>
      seg->next = NULL;
 800b836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b838:	2200      	movs	r2, #0
 800b83a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b840:	2b00      	cmp	r3, #0
 800b842:	d105      	bne.n	800b850 <tcp_output+0x300>
        pcb->unacked = seg;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b848:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800b84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b84c:	623b      	str	r3, [r7, #32]
 800b84e:	e03f      	b.n	800b8d0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b852:	68db      	ldr	r3, [r3, #12]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	4618      	mov	r0, r3
 800b858:	f7f9 f8c0 	bl	80049dc <lwip_htonl>
 800b85c:	4604      	mov	r4, r0
 800b85e:	6a3b      	ldr	r3, [r7, #32]
 800b860:	68db      	ldr	r3, [r3, #12]
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	4618      	mov	r0, r3
 800b866:	f7f9 f8b9 	bl	80049dc <lwip_htonl>
 800b86a:	4603      	mov	r3, r0
 800b86c:	1ae3      	subs	r3, r4, r3
 800b86e:	2b00      	cmp	r3, #0
 800b870:	da24      	bge.n	800b8bc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	3370      	adds	r3, #112	@ 0x70
 800b876:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b878:	e002      	b.n	800b880 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b87a:	69fb      	ldr	r3, [r7, #28]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b880:	69fb      	ldr	r3, [r7, #28]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d011      	beq.n	800b8ac <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	68db      	ldr	r3, [r3, #12]
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	4618      	mov	r0, r3
 800b892:	f7f9 f8a3 	bl	80049dc <lwip_htonl>
 800b896:	4604      	mov	r4, r0
 800b898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b89a:	68db      	ldr	r3, [r3, #12]
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f7f9 f89c 	bl	80049dc <lwip_htonl>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	dbe6      	blt.n	800b87a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800b8ac:	69fb      	ldr	r3, [r7, #28]
 800b8ae:	681a      	ldr	r2, [r3, #0]
 800b8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8b2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b8b4:	69fb      	ldr	r3, [r7, #28]
 800b8b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8b8:	601a      	str	r2, [r3, #0]
 800b8ba:	e009      	b.n	800b8d0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b8bc:	6a3b      	ldr	r3, [r7, #32]
 800b8be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8c0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b8c2:	6a3b      	ldr	r3, [r7, #32]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	623b      	str	r3, [r7, #32]
 800b8c8:	e002      	b.n	800b8d0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b8ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b8cc:	f7fb ffa1 	bl	8007812 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8d4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800b8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d012      	beq.n	800b902 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b8dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8de:	68db      	ldr	r3, [r3, #12]
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7f9 f87a 	bl	80049dc <lwip_htonl>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8ee:	1ad3      	subs	r3, r2, r3
 800b8f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8f2:	8912      	ldrh	r2, [r2, #8]
 800b8f4:	4413      	add	r3, r2
  while (seg != NULL &&
 800b8f6:	69ba      	ldr	r2, [r7, #24]
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	f4bf aed9 	bcs.w	800b6b0 <tcp_output+0x160>
 800b8fe:	e000      	b.n	800b902 <tcp_output+0x3b2>
      break;
 800b900:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b906:	2b00      	cmp	r3, #0
 800b908:	d108      	bne.n	800b91c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2200      	movs	r2, #0
 800b90e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800b912:	e004      	b.n	800b91e <tcp_output+0x3ce>
    goto output_done;
 800b914:	bf00      	nop
 800b916:	e002      	b.n	800b91e <tcp_output+0x3ce>
    goto output_done;
 800b918:	bf00      	nop
 800b91a:	e000      	b.n	800b91e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b91c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	8b5b      	ldrh	r3, [r3, #26]
 800b922:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b926:	b29a      	uxth	r2, r3
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b92c:	2300      	movs	r3, #0
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3728      	adds	r7, #40	@ 0x28
 800b932:	46bd      	mov	sp, r7
 800b934:	bdb0      	pop	{r4, r5, r7, pc}
 800b936:	bf00      	nop

0800b938 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d106      	bne.n	800b954 <tcp_output_segment_busy+0x1c>
 800b946:	4b09      	ldr	r3, [pc, #36]	@ (800b96c <tcp_output_segment_busy+0x34>)
 800b948:	f240 529a 	movw	r2, #1434	@ 0x59a
 800b94c:	4908      	ldr	r1, [pc, #32]	@ (800b970 <tcp_output_segment_busy+0x38>)
 800b94e:	4809      	ldr	r0, [pc, #36]	@ (800b974 <tcp_output_segment_busy+0x3c>)
 800b950:	f003 fd04 	bl	800f35c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	7b9b      	ldrb	r3, [r3, #14]
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	d001      	beq.n	800b962 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b95e:	2301      	movs	r3, #1
 800b960:	e000      	b.n	800b964 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b962:	2300      	movs	r3, #0
}
 800b964:	4618      	mov	r0, r3
 800b966:	3708      	adds	r7, #8
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}
 800b96c:	08011dfc 	.word	0x08011dfc
 800b970:	08012398 	.word	0x08012398
 800b974:	08011e50 	.word	0x08011e50

0800b978 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b978:	b5b0      	push	{r4, r5, r7, lr}
 800b97a:	b08c      	sub	sp, #48	@ 0x30
 800b97c:	af04      	add	r7, sp, #16
 800b97e:	60f8      	str	r0, [r7, #12]
 800b980:	60b9      	str	r1, [r7, #8]
 800b982:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d106      	bne.n	800b998 <tcp_output_segment+0x20>
 800b98a:	4b64      	ldr	r3, [pc, #400]	@ (800bb1c <tcp_output_segment+0x1a4>)
 800b98c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800b990:	4963      	ldr	r1, [pc, #396]	@ (800bb20 <tcp_output_segment+0x1a8>)
 800b992:	4864      	ldr	r0, [pc, #400]	@ (800bb24 <tcp_output_segment+0x1ac>)
 800b994:	f003 fce2 	bl	800f35c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d106      	bne.n	800b9ac <tcp_output_segment+0x34>
 800b99e:	4b5f      	ldr	r3, [pc, #380]	@ (800bb1c <tcp_output_segment+0x1a4>)
 800b9a0:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800b9a4:	4960      	ldr	r1, [pc, #384]	@ (800bb28 <tcp_output_segment+0x1b0>)
 800b9a6:	485f      	ldr	r0, [pc, #380]	@ (800bb24 <tcp_output_segment+0x1ac>)
 800b9a8:	f003 fcd8 	bl	800f35c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d106      	bne.n	800b9c0 <tcp_output_segment+0x48>
 800b9b2:	4b5a      	ldr	r3, [pc, #360]	@ (800bb1c <tcp_output_segment+0x1a4>)
 800b9b4:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800b9b8:	495c      	ldr	r1, [pc, #368]	@ (800bb2c <tcp_output_segment+0x1b4>)
 800b9ba:	485a      	ldr	r0, [pc, #360]	@ (800bb24 <tcp_output_segment+0x1ac>)
 800b9bc:	f003 fcce 	bl	800f35c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b9c0:	68f8      	ldr	r0, [r7, #12]
 800b9c2:	f7ff ffb9 	bl	800b938 <tcp_output_segment_busy>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d001      	beq.n	800b9d0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	e0a1      	b.n	800bb14 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	68dc      	ldr	r4, [r3, #12]
 800b9d8:	4610      	mov	r0, r2
 800b9da:	f7f8 ffff 	bl	80049dc <lwip_htonl>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	68dc      	ldr	r4, [r3, #12]
 800b9ea:	4610      	mov	r0, r2
 800b9ec:	f7f8 ffe0 	bl	80049b0 <lwip_htons>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9f8:	68ba      	ldr	r2, [r7, #8]
 800b9fa:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800b9fc:	441a      	add	r2, r3
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	68db      	ldr	r3, [r3, #12]
 800ba06:	3314      	adds	r3, #20
 800ba08:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	7a9b      	ldrb	r3, [r3, #10]
 800ba0e:	f003 0301 	and.w	r3, r3, #1
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d015      	beq.n	800ba42 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	3304      	adds	r3, #4
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	6879      	ldr	r1, [r7, #4]
 800ba1e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800ba22:	f7fc fa39 	bl	8007e98 <tcp_eff_send_mss_netif>
 800ba26:	4603      	mov	r3, r0
 800ba28:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ba2a:	8b7b      	ldrh	r3, [r7, #26]
 800ba2c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800ba30:	4618      	mov	r0, r3
 800ba32:	f7f8 ffd3 	bl	80049dc <lwip_htonl>
 800ba36:	4602      	mov	r2, r0
 800ba38:	69fb      	ldr	r3, [r7, #28]
 800ba3a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ba3c:	69fb      	ldr	r3, [r7, #28]
 800ba3e:	3304      	adds	r3, #4
 800ba40:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	da02      	bge.n	800ba52 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d10c      	bne.n	800ba74 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800ba5a:	4b35      	ldr	r3, [pc, #212]	@ (800bb30 <tcp_output_segment+0x1b8>)
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	68db      	ldr	r3, [r3, #12]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f7f8 ffb7 	bl	80049dc <lwip_htonl>
 800ba6e:	4602      	mov	r2, r0
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	68da      	ldr	r2, [r3, #12]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	1ad3      	subs	r3, r2, r3
 800ba80:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	8959      	ldrh	r1, [r3, #10]
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	8b3a      	ldrh	r2, [r7, #24]
 800ba8e:	1a8a      	subs	r2, r1, r2
 800ba90:	b292      	uxth	r2, r2
 800ba92:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	8919      	ldrh	r1, [r3, #8]
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	8b3a      	ldrh	r2, [r7, #24]
 800baa0:	1a8a      	subs	r2, r1, r2
 800baa2:	b292      	uxth	r2, r2
 800baa4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	685b      	ldr	r3, [r3, #4]
 800baaa:	68fa      	ldr	r2, [r7, #12]
 800baac:	68d2      	ldr	r2, [r2, #12]
 800baae:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	68db      	ldr	r3, [r3, #12]
 800bab4:	2200      	movs	r2, #0
 800bab6:	741a      	strb	r2, [r3, #16]
 800bab8:	2200      	movs	r2, #0
 800baba:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	68da      	ldr	r2, [r3, #12]
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	7a9b      	ldrb	r3, [r3, #10]
 800bac4:	f003 0301 	and.w	r3, r3, #1
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d001      	beq.n	800bad0 <tcp_output_segment+0x158>
 800bacc:	2318      	movs	r3, #24
 800bace:	e000      	b.n	800bad2 <tcp_output_segment+0x15a>
 800bad0:	2314      	movs	r3, #20
 800bad2:	4413      	add	r3, r2
 800bad4:	69fa      	ldr	r2, [r7, #28]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d006      	beq.n	800bae8 <tcp_output_segment+0x170>
 800bada:	4b10      	ldr	r3, [pc, #64]	@ (800bb1c <tcp_output_segment+0x1a4>)
 800badc:	f240 621c 	movw	r2, #1564	@ 0x61c
 800bae0:	4914      	ldr	r1, [pc, #80]	@ (800bb34 <tcp_output_segment+0x1bc>)
 800bae2:	4810      	ldr	r0, [pc, #64]	@ (800bb24 <tcp_output_segment+0x1ac>)
 800bae4:	f003 fc3a 	bl	800f35c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	6858      	ldr	r0, [r3, #4]
 800baec:	68b9      	ldr	r1, [r7, #8]
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	1d1c      	adds	r4, r3, #4
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	7add      	ldrb	r5, [r3, #11]
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	7a9b      	ldrb	r3, [r3, #10]
 800bafa:	687a      	ldr	r2, [r7, #4]
 800bafc:	9202      	str	r2, [sp, #8]
 800bafe:	2206      	movs	r2, #6
 800bb00:	9201      	str	r2, [sp, #4]
 800bb02:	9300      	str	r3, [sp, #0]
 800bb04:	462b      	mov	r3, r5
 800bb06:	4622      	mov	r2, r4
 800bb08:	f002 fa34 	bl	800df74 <ip4_output_if>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800bb10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3720      	adds	r7, #32
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bdb0      	pop	{r4, r5, r7, pc}
 800bb1c:	08011dfc 	.word	0x08011dfc
 800bb20:	080123c0 	.word	0x080123c0
 800bb24:	08011e50 	.word	0x08011e50
 800bb28:	080123e0 	.word	0x080123e0
 800bb2c:	08012400 	.word	0x08012400
 800bb30:	200082dc 	.word	0x200082dc
 800bb34:	08012424 	.word	0x08012424

0800bb38 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800bb38:	b5b0      	push	{r4, r5, r7, lr}
 800bb3a:	b084      	sub	sp, #16
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d106      	bne.n	800bb54 <tcp_rexmit_rto_prepare+0x1c>
 800bb46:	4b31      	ldr	r3, [pc, #196]	@ (800bc0c <tcp_rexmit_rto_prepare+0xd4>)
 800bb48:	f240 6263 	movw	r2, #1635	@ 0x663
 800bb4c:	4930      	ldr	r1, [pc, #192]	@ (800bc10 <tcp_rexmit_rto_prepare+0xd8>)
 800bb4e:	4831      	ldr	r0, [pc, #196]	@ (800bc14 <tcp_rexmit_rto_prepare+0xdc>)
 800bb50:	f003 fc04 	bl	800f35c <iprintf>

  if (pcb->unacked == NULL) {
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d102      	bne.n	800bb62 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800bb5c:	f06f 0305 	mvn.w	r3, #5
 800bb60:	e050      	b.n	800bc04 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb66:	60fb      	str	r3, [r7, #12]
 800bb68:	e00b      	b.n	800bb82 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800bb6a:	68f8      	ldr	r0, [r7, #12]
 800bb6c:	f7ff fee4 	bl	800b938 <tcp_output_segment_busy>
 800bb70:	4603      	mov	r3, r0
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d002      	beq.n	800bb7c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800bb76:	f06f 0305 	mvn.w	r3, #5
 800bb7a:	e043      	b.n	800bc04 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	60fb      	str	r3, [r7, #12]
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d1ef      	bne.n	800bb6a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800bb8a:	68f8      	ldr	r0, [r7, #12]
 800bb8c:	f7ff fed4 	bl	800b938 <tcp_output_segment_busy>
 800bb90:	4603      	mov	r3, r0
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d002      	beq.n	800bb9c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800bb96:	f06f 0305 	mvn.w	r3, #5
 800bb9a:	e033      	b.n	800bc04 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	8b5b      	ldrh	r3, [r3, #26]
 800bbb6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800bbba:	b29a      	uxth	r2, r3
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	68db      	ldr	r3, [r3, #12]
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f7f8 ff08 	bl	80049dc <lwip_htonl>
 800bbcc:	4604      	mov	r4, r0
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	891b      	ldrh	r3, [r3, #8]
 800bbd2:	461d      	mov	r5, r3
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	899b      	ldrh	r3, [r3, #12]
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f7f8 fee7 	bl	80049b0 <lwip_htons>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	b2db      	uxtb	r3, r3
 800bbe6:	f003 0303 	and.w	r3, r3, #3
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d001      	beq.n	800bbf2 <tcp_rexmit_rto_prepare+0xba>
 800bbee:	2301      	movs	r3, #1
 800bbf0:	e000      	b.n	800bbf4 <tcp_rexmit_rto_prepare+0xbc>
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	442b      	add	r3, r5
 800bbf6:	18e2      	adds	r2, r4, r3
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800bc02:	2300      	movs	r3, #0
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3710      	adds	r7, #16
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bdb0      	pop	{r4, r5, r7, pc}
 800bc0c:	08011dfc 	.word	0x08011dfc
 800bc10:	08012438 	.word	0x08012438
 800bc14:	08011e50 	.word	0x08011e50

0800bc18 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d106      	bne.n	800bc34 <tcp_rexmit_rto_commit+0x1c>
 800bc26:	4b0d      	ldr	r3, [pc, #52]	@ (800bc5c <tcp_rexmit_rto_commit+0x44>)
 800bc28:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800bc2c:	490c      	ldr	r1, [pc, #48]	@ (800bc60 <tcp_rexmit_rto_commit+0x48>)
 800bc2e:	480d      	ldr	r0, [pc, #52]	@ (800bc64 <tcp_rexmit_rto_commit+0x4c>)
 800bc30:	f003 fb94 	bl	800f35c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bc3a:	2bff      	cmp	r3, #255	@ 0xff
 800bc3c:	d007      	beq.n	800bc4e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bc44:	3301      	adds	r3, #1
 800bc46:	b2da      	uxtb	r2, r3
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f7ff fc7e 	bl	800b550 <tcp_output>
}
 800bc54:	bf00      	nop
 800bc56:	3708      	adds	r7, #8
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	08011dfc 	.word	0x08011dfc
 800bc60:	0801245c 	.word	0x0801245c
 800bc64:	08011e50 	.word	0x08011e50

0800bc68 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b082      	sub	sp, #8
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d106      	bne.n	800bc84 <tcp_rexmit_rto+0x1c>
 800bc76:	4b0a      	ldr	r3, [pc, #40]	@ (800bca0 <tcp_rexmit_rto+0x38>)
 800bc78:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800bc7c:	4909      	ldr	r1, [pc, #36]	@ (800bca4 <tcp_rexmit_rto+0x3c>)
 800bc7e:	480a      	ldr	r0, [pc, #40]	@ (800bca8 <tcp_rexmit_rto+0x40>)
 800bc80:	f003 fb6c 	bl	800f35c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f7ff ff57 	bl	800bb38 <tcp_rexmit_rto_prepare>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d102      	bne.n	800bc96 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f7ff ffc1 	bl	800bc18 <tcp_rexmit_rto_commit>
  }
}
 800bc96:	bf00      	nop
 800bc98:	3708      	adds	r7, #8
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}
 800bc9e:	bf00      	nop
 800bca0:	08011dfc 	.word	0x08011dfc
 800bca4:	08012480 	.word	0x08012480
 800bca8:	08011e50 	.word	0x08011e50

0800bcac <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800bcac:	b590      	push	{r4, r7, lr}
 800bcae:	b085      	sub	sp, #20
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d106      	bne.n	800bcc8 <tcp_rexmit+0x1c>
 800bcba:	4b2f      	ldr	r3, [pc, #188]	@ (800bd78 <tcp_rexmit+0xcc>)
 800bcbc:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800bcc0:	492e      	ldr	r1, [pc, #184]	@ (800bd7c <tcp_rexmit+0xd0>)
 800bcc2:	482f      	ldr	r0, [pc, #188]	@ (800bd80 <tcp_rexmit+0xd4>)
 800bcc4:	f003 fb4a 	bl	800f35c <iprintf>

  if (pcb->unacked == NULL) {
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d102      	bne.n	800bcd6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800bcd0:	f06f 0305 	mvn.w	r3, #5
 800bcd4:	e04c      	b.n	800bd70 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bcda:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800bcdc:	68b8      	ldr	r0, [r7, #8]
 800bcde:	f7ff fe2b 	bl	800b938 <tcp_output_segment_busy>
 800bce2:	4603      	mov	r3, r0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d002      	beq.n	800bcee <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800bce8:	f06f 0305 	mvn.w	r3, #5
 800bcec:	e040      	b.n	800bd70 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	681a      	ldr	r2, [r3, #0]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	336c      	adds	r3, #108	@ 0x6c
 800bcfa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bcfc:	e002      	b.n	800bd04 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d011      	beq.n	800bd30 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	68db      	ldr	r3, [r3, #12]
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	4618      	mov	r0, r3
 800bd16:	f7f8 fe61 	bl	80049dc <lwip_htonl>
 800bd1a:	4604      	mov	r4, r0
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	68db      	ldr	r3, [r3, #12]
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	4618      	mov	r0, r3
 800bd24:	f7f8 fe5a 	bl	80049dc <lwip_htonl>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	dbe6      	blt.n	800bcfe <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681a      	ldr	r2, [r3, #0]
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	68ba      	ldr	r2, [r7, #8]
 800bd3c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d103      	bne.n	800bd4e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bd54:	2bff      	cmp	r3, #255	@ 0xff
 800bd56:	d007      	beq.n	800bd68 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bd5e:	3301      	adds	r3, #1
 800bd60:	b2da      	uxtb	r2, r3
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800bd6e:	2300      	movs	r3, #0
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3714      	adds	r7, #20
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd90      	pop	{r4, r7, pc}
 800bd78:	08011dfc 	.word	0x08011dfc
 800bd7c:	0801249c 	.word	0x0801249c
 800bd80:	08011e50 	.word	0x08011e50

0800bd84 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d106      	bne.n	800bda0 <tcp_rexmit_fast+0x1c>
 800bd92:	4b2a      	ldr	r3, [pc, #168]	@ (800be3c <tcp_rexmit_fast+0xb8>)
 800bd94:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800bd98:	4929      	ldr	r1, [pc, #164]	@ (800be40 <tcp_rexmit_fast+0xbc>)
 800bd9a:	482a      	ldr	r0, [pc, #168]	@ (800be44 <tcp_rexmit_fast+0xc0>)
 800bd9c:	f003 fade 	bl	800f35c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d044      	beq.n	800be32 <tcp_rexmit_fast+0xae>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	8b5b      	ldrh	r3, [r3, #26]
 800bdac:	f003 0304 	and.w	r3, r3, #4
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d13e      	bne.n	800be32 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f7ff ff79 	bl	800bcac <tcp_rexmit>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d138      	bne.n	800be32 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	bf28      	it	cs
 800bdd0:	4613      	movcs	r3, r2
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	0fda      	lsrs	r2, r3, #31
 800bdd6:	4413      	add	r3, r2
 800bdd8:	105b      	asrs	r3, r3, #1
 800bdda:	b29a      	uxth	r2, r3
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800bde8:	461a      	mov	r2, r3
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bdee:	005b      	lsls	r3, r3, #1
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d206      	bcs.n	800be02 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bdf8:	005b      	lsls	r3, r3, #1
 800bdfa:	b29a      	uxth	r2, r3
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800be0c:	4619      	mov	r1, r3
 800be0e:	0049      	lsls	r1, r1, #1
 800be10:	440b      	add	r3, r1
 800be12:	b29b      	uxth	r3, r3
 800be14:	4413      	add	r3, r2
 800be16:	b29a      	uxth	r2, r3
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	8b5b      	ldrh	r3, [r3, #26]
 800be22:	f043 0304 	orr.w	r3, r3, #4
 800be26:	b29a      	uxth	r2, r3
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2200      	movs	r2, #0
 800be30:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800be32:	bf00      	nop
 800be34:	3708      	adds	r7, #8
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}
 800be3a:	bf00      	nop
 800be3c:	08011dfc 	.word	0x08011dfc
 800be40:	080124b4 	.word	0x080124b4
 800be44:	08011e50 	.word	0x08011e50

0800be48 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b086      	sub	sp, #24
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	60f8      	str	r0, [r7, #12]
 800be50:	607b      	str	r3, [r7, #4]
 800be52:	460b      	mov	r3, r1
 800be54:	817b      	strh	r3, [r7, #10]
 800be56:	4613      	mov	r3, r2
 800be58:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800be5a:	897a      	ldrh	r2, [r7, #10]
 800be5c:	893b      	ldrh	r3, [r7, #8]
 800be5e:	4413      	add	r3, r2
 800be60:	b29b      	uxth	r3, r3
 800be62:	3314      	adds	r3, #20
 800be64:	b29b      	uxth	r3, r3
 800be66:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800be6a:	4619      	mov	r1, r3
 800be6c:	2022      	movs	r0, #34	@ 0x22
 800be6e:	f7f9 fe19 	bl	8005aa4 <pbuf_alloc>
 800be72:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d04d      	beq.n	800bf16 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800be7a:	897b      	ldrh	r3, [r7, #10]
 800be7c:	3313      	adds	r3, #19
 800be7e:	697a      	ldr	r2, [r7, #20]
 800be80:	8952      	ldrh	r2, [r2, #10]
 800be82:	4293      	cmp	r3, r2
 800be84:	db06      	blt.n	800be94 <tcp_output_alloc_header_common+0x4c>
 800be86:	4b26      	ldr	r3, [pc, #152]	@ (800bf20 <tcp_output_alloc_header_common+0xd8>)
 800be88:	f240 7223 	movw	r2, #1827	@ 0x723
 800be8c:	4925      	ldr	r1, [pc, #148]	@ (800bf24 <tcp_output_alloc_header_common+0xdc>)
 800be8e:	4826      	ldr	r0, [pc, #152]	@ (800bf28 <tcp_output_alloc_header_common+0xe0>)
 800be90:	f003 fa64 	bl	800f35c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800be9a:	8c3b      	ldrh	r3, [r7, #32]
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7f8 fd87 	bl	80049b0 <lwip_htons>
 800bea2:	4603      	mov	r3, r0
 800bea4:	461a      	mov	r2, r3
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800beaa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800beac:	4618      	mov	r0, r3
 800beae:	f7f8 fd7f 	bl	80049b0 <lwip_htons>
 800beb2:	4603      	mov	r3, r0
 800beb4:	461a      	mov	r2, r3
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	687a      	ldr	r2, [r7, #4]
 800bebe:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800bec0:	68f8      	ldr	r0, [r7, #12]
 800bec2:	f7f8 fd8b 	bl	80049dc <lwip_htonl>
 800bec6:	4602      	mov	r2, r0
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800becc:	897b      	ldrh	r3, [r7, #10]
 800bece:	089b      	lsrs	r3, r3, #2
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	3305      	adds	r3, #5
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	031b      	lsls	r3, r3, #12
 800bed8:	b29a      	uxth	r2, r3
 800beda:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bede:	b29b      	uxth	r3, r3
 800bee0:	4313      	orrs	r3, r2
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	4618      	mov	r0, r3
 800bee6:	f7f8 fd63 	bl	80049b0 <lwip_htons>
 800beea:	4603      	mov	r3, r0
 800beec:	461a      	mov	r2, r3
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800bef2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800bef4:	4618      	mov	r0, r3
 800bef6:	f7f8 fd5b 	bl	80049b0 <lwip_htons>
 800befa:	4603      	mov	r3, r0
 800befc:	461a      	mov	r2, r3
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800bf02:	693b      	ldr	r3, [r7, #16]
 800bf04:	2200      	movs	r2, #0
 800bf06:	741a      	strb	r2, [r3, #16]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	749a      	strb	r2, [r3, #18]
 800bf12:	2200      	movs	r2, #0
 800bf14:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800bf16:	697b      	ldr	r3, [r7, #20]
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3718      	adds	r7, #24
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	08011dfc 	.word	0x08011dfc
 800bf24:	080124d4 	.word	0x080124d4
 800bf28:	08011e50 	.word	0x08011e50

0800bf2c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800bf2c:	b5b0      	push	{r4, r5, r7, lr}
 800bf2e:	b08a      	sub	sp, #40	@ 0x28
 800bf30:	af04      	add	r7, sp, #16
 800bf32:	60f8      	str	r0, [r7, #12]
 800bf34:	607b      	str	r3, [r7, #4]
 800bf36:	460b      	mov	r3, r1
 800bf38:	817b      	strh	r3, [r7, #10]
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d106      	bne.n	800bf52 <tcp_output_alloc_header+0x26>
 800bf44:	4b15      	ldr	r3, [pc, #84]	@ (800bf9c <tcp_output_alloc_header+0x70>)
 800bf46:	f240 7242 	movw	r2, #1858	@ 0x742
 800bf4a:	4915      	ldr	r1, [pc, #84]	@ (800bfa0 <tcp_output_alloc_header+0x74>)
 800bf4c:	4815      	ldr	r0, [pc, #84]	@ (800bfa4 <tcp_output_alloc_header+0x78>)
 800bf4e:	f003 fa05 	bl	800f35c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	8adb      	ldrh	r3, [r3, #22]
 800bf5a:	68fa      	ldr	r2, [r7, #12]
 800bf5c:	8b12      	ldrh	r2, [r2, #24]
 800bf5e:	68f9      	ldr	r1, [r7, #12]
 800bf60:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800bf62:	893d      	ldrh	r5, [r7, #8]
 800bf64:	897c      	ldrh	r4, [r7, #10]
 800bf66:	9103      	str	r1, [sp, #12]
 800bf68:	2110      	movs	r1, #16
 800bf6a:	9102      	str	r1, [sp, #8]
 800bf6c:	9201      	str	r2, [sp, #4]
 800bf6e:	9300      	str	r3, [sp, #0]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	462a      	mov	r2, r5
 800bf74:	4621      	mov	r1, r4
 800bf76:	f7ff ff67 	bl	800be48 <tcp_output_alloc_header_common>
 800bf7a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d006      	beq.n	800bf90 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf86:	68fa      	ldr	r2, [r7, #12]
 800bf88:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800bf8a:	441a      	add	r2, r3
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800bf90:	697b      	ldr	r3, [r7, #20]
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3718      	adds	r7, #24
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bdb0      	pop	{r4, r5, r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	08011dfc 	.word	0x08011dfc
 800bfa0:	08012504 	.word	0x08012504
 800bfa4:	08011e50 	.word	0x08011e50

0800bfa8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b088      	sub	sp, #32
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	60f8      	str	r0, [r7, #12]
 800bfb0:	60b9      	str	r1, [r7, #8]
 800bfb2:	4611      	mov	r1, r2
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	460b      	mov	r3, r1
 800bfb8:	71fb      	strb	r3, [r7, #7]
 800bfba:	4613      	mov	r3, r2
 800bfbc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d106      	bne.n	800bfd6 <tcp_output_fill_options+0x2e>
 800bfc8:	4b12      	ldr	r3, [pc, #72]	@ (800c014 <tcp_output_fill_options+0x6c>)
 800bfca:	f240 7256 	movw	r2, #1878	@ 0x756
 800bfce:	4912      	ldr	r1, [pc, #72]	@ (800c018 <tcp_output_fill_options+0x70>)
 800bfd0:	4812      	ldr	r0, [pc, #72]	@ (800c01c <tcp_output_fill_options+0x74>)
 800bfd2:	f003 f9c3 	bl	800f35c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800bfdc:	69bb      	ldr	r3, [r7, #24]
 800bfde:	3314      	adds	r3, #20
 800bfe0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800bfe2:	8bfb      	ldrh	r3, [r7, #30]
 800bfe4:	009b      	lsls	r3, r3, #2
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	79fb      	ldrb	r3, [r7, #7]
 800bfea:	009b      	lsls	r3, r3, #2
 800bfec:	f003 0304 	and.w	r3, r3, #4
 800bff0:	4413      	add	r3, r2
 800bff2:	3314      	adds	r3, #20
 800bff4:	69ba      	ldr	r2, [r7, #24]
 800bff6:	4413      	add	r3, r2
 800bff8:	697a      	ldr	r2, [r7, #20]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d006      	beq.n	800c00c <tcp_output_fill_options+0x64>
 800bffe:	4b05      	ldr	r3, [pc, #20]	@ (800c014 <tcp_output_fill_options+0x6c>)
 800c000:	f240 7275 	movw	r2, #1909	@ 0x775
 800c004:	4906      	ldr	r1, [pc, #24]	@ (800c020 <tcp_output_fill_options+0x78>)
 800c006:	4805      	ldr	r0, [pc, #20]	@ (800c01c <tcp_output_fill_options+0x74>)
 800c008:	f003 f9a8 	bl	800f35c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c00c:	bf00      	nop
 800c00e:	3720      	adds	r7, #32
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}
 800c014:	08011dfc 	.word	0x08011dfc
 800c018:	0801252c 	.word	0x0801252c
 800c01c:	08011e50 	.word	0x08011e50
 800c020:	08012424 	.word	0x08012424

0800c024 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b08a      	sub	sp, #40	@ 0x28
 800c028:	af04      	add	r7, sp, #16
 800c02a:	60f8      	str	r0, [r7, #12]
 800c02c:	60b9      	str	r1, [r7, #8]
 800c02e:	607a      	str	r2, [r7, #4]
 800c030:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d106      	bne.n	800c046 <tcp_output_control_segment+0x22>
 800c038:	4b1c      	ldr	r3, [pc, #112]	@ (800c0ac <tcp_output_control_segment+0x88>)
 800c03a:	f240 7287 	movw	r2, #1927	@ 0x787
 800c03e:	491c      	ldr	r1, [pc, #112]	@ (800c0b0 <tcp_output_control_segment+0x8c>)
 800c040:	481c      	ldr	r0, [pc, #112]	@ (800c0b4 <tcp_output_control_segment+0x90>)
 800c042:	f003 f98b 	bl	800f35c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c046:	683a      	ldr	r2, [r7, #0]
 800c048:	6879      	ldr	r1, [r7, #4]
 800c04a:	68f8      	ldr	r0, [r7, #12]
 800c04c:	f7fe faea 	bl	800a624 <tcp_route>
 800c050:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d102      	bne.n	800c05e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800c058:	23fc      	movs	r3, #252	@ 0xfc
 800c05a:	75fb      	strb	r3, [r7, #23]
 800c05c:	e01c      	b.n	800c098 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d006      	beq.n	800c072 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	7adb      	ldrb	r3, [r3, #11]
 800c068:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	7a9b      	ldrb	r3, [r3, #10]
 800c06e:	757b      	strb	r3, [r7, #21]
 800c070:	e003      	b.n	800c07a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c072:	23ff      	movs	r3, #255	@ 0xff
 800c074:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c076:	2300      	movs	r3, #0
 800c078:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c07a:	7dba      	ldrb	r2, [r7, #22]
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	9302      	str	r3, [sp, #8]
 800c080:	2306      	movs	r3, #6
 800c082:	9301      	str	r3, [sp, #4]
 800c084:	7d7b      	ldrb	r3, [r7, #21]
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	4613      	mov	r3, r2
 800c08a:	683a      	ldr	r2, [r7, #0]
 800c08c:	6879      	ldr	r1, [r7, #4]
 800c08e:	68b8      	ldr	r0, [r7, #8]
 800c090:	f001 ff70 	bl	800df74 <ip4_output_if>
 800c094:	4603      	mov	r3, r0
 800c096:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c098:	68b8      	ldr	r0, [r7, #8]
 800c09a:	f7f9 ffe7 	bl	800606c <pbuf_free>
  return err;
 800c09e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3718      	adds	r7, #24
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	08011dfc 	.word	0x08011dfc
 800c0b0:	08012554 	.word	0x08012554
 800c0b4:	08011e50 	.word	0x08011e50

0800c0b8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c0b8:	b590      	push	{r4, r7, lr}
 800c0ba:	b08b      	sub	sp, #44	@ 0x2c
 800c0bc:	af04      	add	r7, sp, #16
 800c0be:	60f8      	str	r0, [r7, #12]
 800c0c0:	60b9      	str	r1, [r7, #8]
 800c0c2:	607a      	str	r2, [r7, #4]
 800c0c4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d106      	bne.n	800c0da <tcp_rst+0x22>
 800c0cc:	4b1f      	ldr	r3, [pc, #124]	@ (800c14c <tcp_rst+0x94>)
 800c0ce:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800c0d2:	491f      	ldr	r1, [pc, #124]	@ (800c150 <tcp_rst+0x98>)
 800c0d4:	481f      	ldr	r0, [pc, #124]	@ (800c154 <tcp_rst+0x9c>)
 800c0d6:	f003 f941 	bl	800f35c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c0da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d106      	bne.n	800c0ee <tcp_rst+0x36>
 800c0e0:	4b1a      	ldr	r3, [pc, #104]	@ (800c14c <tcp_rst+0x94>)
 800c0e2:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800c0e6:	491c      	ldr	r1, [pc, #112]	@ (800c158 <tcp_rst+0xa0>)
 800c0e8:	481a      	ldr	r0, [pc, #104]	@ (800c154 <tcp_rst+0x9c>)
 800c0ea:	f003 f937 	bl	800f35c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c0f2:	f246 0308 	movw	r3, #24584	@ 0x6008
 800c0f6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c0f8:	7dfb      	ldrb	r3, [r7, #23]
 800c0fa:	b29c      	uxth	r4, r3
 800c0fc:	68b8      	ldr	r0, [r7, #8]
 800c0fe:	f7f8 fc6d 	bl	80049dc <lwip_htonl>
 800c102:	4602      	mov	r2, r0
 800c104:	8abb      	ldrh	r3, [r7, #20]
 800c106:	9303      	str	r3, [sp, #12]
 800c108:	2314      	movs	r3, #20
 800c10a:	9302      	str	r3, [sp, #8]
 800c10c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800c10e:	9301      	str	r3, [sp, #4]
 800c110:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c112:	9300      	str	r3, [sp, #0]
 800c114:	4613      	mov	r3, r2
 800c116:	2200      	movs	r2, #0
 800c118:	4621      	mov	r1, r4
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f7ff fe94 	bl	800be48 <tcp_output_alloc_header_common>
 800c120:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d00c      	beq.n	800c142 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c128:	7dfb      	ldrb	r3, [r7, #23]
 800c12a:	2200      	movs	r2, #0
 800c12c:	6939      	ldr	r1, [r7, #16]
 800c12e:	68f8      	ldr	r0, [r7, #12]
 800c130:	f7ff ff3a 	bl	800bfa8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c136:	683a      	ldr	r2, [r7, #0]
 800c138:	6939      	ldr	r1, [r7, #16]
 800c13a:	68f8      	ldr	r0, [r7, #12]
 800c13c:	f7ff ff72 	bl	800c024 <tcp_output_control_segment>
 800c140:	e000      	b.n	800c144 <tcp_rst+0x8c>
    return;
 800c142:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c144:	371c      	adds	r7, #28
 800c146:	46bd      	mov	sp, r7
 800c148:	bd90      	pop	{r4, r7, pc}
 800c14a:	bf00      	nop
 800c14c:	08011dfc 	.word	0x08011dfc
 800c150:	08012580 	.word	0x08012580
 800c154:	08011e50 	.word	0x08011e50
 800c158:	0801259c 	.word	0x0801259c

0800c15c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c15c:	b590      	push	{r4, r7, lr}
 800c15e:	b087      	sub	sp, #28
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c164:	2300      	movs	r3, #0
 800c166:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c168:	2300      	movs	r3, #0
 800c16a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d106      	bne.n	800c180 <tcp_send_empty_ack+0x24>
 800c172:	4b28      	ldr	r3, [pc, #160]	@ (800c214 <tcp_send_empty_ack+0xb8>)
 800c174:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800c178:	4927      	ldr	r1, [pc, #156]	@ (800c218 <tcp_send_empty_ack+0xbc>)
 800c17a:	4828      	ldr	r0, [pc, #160]	@ (800c21c <tcp_send_empty_ack+0xc0>)
 800c17c:	f003 f8ee 	bl	800f35c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c180:	7dfb      	ldrb	r3, [r7, #23]
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	b2db      	uxtb	r3, r3
 800c186:	f003 0304 	and.w	r3, r3, #4
 800c18a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c18c:	7d7b      	ldrb	r3, [r7, #21]
 800c18e:	b29c      	uxth	r4, r3
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c194:	4618      	mov	r0, r3
 800c196:	f7f8 fc21 	bl	80049dc <lwip_htonl>
 800c19a:	4603      	mov	r3, r0
 800c19c:	2200      	movs	r2, #0
 800c19e:	4621      	mov	r1, r4
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f7ff fec3 	bl	800bf2c <tcp_output_alloc_header>
 800c1a6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d109      	bne.n	800c1c2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	8b5b      	ldrh	r3, [r3, #26]
 800c1b2:	f043 0303 	orr.w	r3, r3, #3
 800c1b6:	b29a      	uxth	r2, r3
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c1bc:	f06f 0301 	mvn.w	r3, #1
 800c1c0:	e023      	b.n	800c20a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c1c2:	7dbb      	ldrb	r3, [r7, #22]
 800c1c4:	7dfa      	ldrb	r2, [r7, #23]
 800c1c6:	6939      	ldr	r1, [r7, #16]
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f7ff feed 	bl	800bfa8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c1ce:	687a      	ldr	r2, [r7, #4]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	3304      	adds	r3, #4
 800c1d4:	6939      	ldr	r1, [r7, #16]
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f7ff ff24 	bl	800c024 <tcp_output_control_segment>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c1e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d007      	beq.n	800c1f8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	8b5b      	ldrh	r3, [r3, #26]
 800c1ec:	f043 0303 	orr.w	r3, r3, #3
 800c1f0:	b29a      	uxth	r2, r3
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	835a      	strh	r2, [r3, #26]
 800c1f6:	e006      	b.n	800c206 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	8b5b      	ldrh	r3, [r3, #26]
 800c1fc:	f023 0303 	bic.w	r3, r3, #3
 800c200:	b29a      	uxth	r2, r3
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c206:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	371c      	adds	r7, #28
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd90      	pop	{r4, r7, pc}
 800c212:	bf00      	nop
 800c214:	08011dfc 	.word	0x08011dfc
 800c218:	080125b8 	.word	0x080125b8
 800c21c:	08011e50 	.word	0x08011e50

0800c220 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c220:	b590      	push	{r4, r7, lr}
 800c222:	b087      	sub	sp, #28
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c228:	2300      	movs	r3, #0
 800c22a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d106      	bne.n	800c240 <tcp_keepalive+0x20>
 800c232:	4b18      	ldr	r3, [pc, #96]	@ (800c294 <tcp_keepalive+0x74>)
 800c234:	f640 0224 	movw	r2, #2084	@ 0x824
 800c238:	4917      	ldr	r1, [pc, #92]	@ (800c298 <tcp_keepalive+0x78>)
 800c23a:	4818      	ldr	r0, [pc, #96]	@ (800c29c <tcp_keepalive+0x7c>)
 800c23c:	f003 f88e 	bl	800f35c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c240:	7dfb      	ldrb	r3, [r7, #23]
 800c242:	b29c      	uxth	r4, r3
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c248:	3b01      	subs	r3, #1
 800c24a:	4618      	mov	r0, r3
 800c24c:	f7f8 fbc6 	bl	80049dc <lwip_htonl>
 800c250:	4603      	mov	r3, r0
 800c252:	2200      	movs	r2, #0
 800c254:	4621      	mov	r1, r4
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f7ff fe68 	bl	800bf2c <tcp_output_alloc_header>
 800c25c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d102      	bne.n	800c26a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c264:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c268:	e010      	b.n	800c28c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c26a:	7dfb      	ldrb	r3, [r7, #23]
 800c26c:	2200      	movs	r2, #0
 800c26e:	6939      	ldr	r1, [r7, #16]
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f7ff fe99 	bl	800bfa8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	3304      	adds	r3, #4
 800c27c:	6939      	ldr	r1, [r7, #16]
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f7ff fed0 	bl	800c024 <tcp_output_control_segment>
 800c284:	4603      	mov	r3, r0
 800c286:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c288:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	371c      	adds	r7, #28
 800c290:	46bd      	mov	sp, r7
 800c292:	bd90      	pop	{r4, r7, pc}
 800c294:	08011dfc 	.word	0x08011dfc
 800c298:	080125d8 	.word	0x080125d8
 800c29c:	08011e50 	.word	0x08011e50

0800c2a0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c2a0:	b590      	push	{r4, r7, lr}
 800c2a2:	b08b      	sub	sp, #44	@ 0x2c
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d106      	bne.n	800c2c2 <tcp_zero_window_probe+0x22>
 800c2b4:	4b4c      	ldr	r3, [pc, #304]	@ (800c3e8 <tcp_zero_window_probe+0x148>)
 800c2b6:	f640 024f 	movw	r2, #2127	@ 0x84f
 800c2ba:	494c      	ldr	r1, [pc, #304]	@ (800c3ec <tcp_zero_window_probe+0x14c>)
 800c2bc:	484c      	ldr	r0, [pc, #304]	@ (800c3f0 <tcp_zero_window_probe+0x150>)
 800c2be:	f003 f84d 	bl	800f35c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2c6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c2c8:	6a3b      	ldr	r3, [r7, #32]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d101      	bne.n	800c2d2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	e086      	b.n	800c3e0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c2d8:	2bff      	cmp	r3, #255	@ 0xff
 800c2da:	d007      	beq.n	800c2ec <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	b2da      	uxtb	r2, r3
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c2ec:	6a3b      	ldr	r3, [r7, #32]
 800c2ee:	68db      	ldr	r3, [r3, #12]
 800c2f0:	899b      	ldrh	r3, [r3, #12]
 800c2f2:	b29b      	uxth	r3, r3
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f7f8 fb5b 	bl	80049b0 <lwip_htons>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	b2db      	uxtb	r3, r3
 800c2fe:	f003 0301 	and.w	r3, r3, #1
 800c302:	2b00      	cmp	r3, #0
 800c304:	d005      	beq.n	800c312 <tcp_zero_window_probe+0x72>
 800c306:	6a3b      	ldr	r3, [r7, #32]
 800c308:	891b      	ldrh	r3, [r3, #8]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d101      	bne.n	800c312 <tcp_zero_window_probe+0x72>
 800c30e:	2301      	movs	r3, #1
 800c310:	e000      	b.n	800c314 <tcp_zero_window_probe+0x74>
 800c312:	2300      	movs	r3, #0
 800c314:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c316:	7ffb      	ldrb	r3, [r7, #31]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	bf0c      	ite	eq
 800c31c:	2301      	moveq	r3, #1
 800c31e:	2300      	movne	r3, #0
 800c320:	b2db      	uxtb	r3, r3
 800c322:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c324:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c328:	b299      	uxth	r1, r3
 800c32a:	6a3b      	ldr	r3, [r7, #32]
 800c32c:	68db      	ldr	r3, [r3, #12]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	8bba      	ldrh	r2, [r7, #28]
 800c332:	6878      	ldr	r0, [r7, #4]
 800c334:	f7ff fdfa 	bl	800bf2c <tcp_output_alloc_header>
 800c338:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c33a:	69bb      	ldr	r3, [r7, #24]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d102      	bne.n	800c346 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c340:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c344:	e04c      	b.n	800c3e0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c346:	69bb      	ldr	r3, [r7, #24]
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c34c:	7ffb      	ldrb	r3, [r7, #31]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d011      	beq.n	800c376 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	899b      	ldrh	r3, [r3, #12]
 800c356:	b29b      	uxth	r3, r3
 800c358:	b21b      	sxth	r3, r3
 800c35a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c35e:	b21c      	sxth	r4, r3
 800c360:	2011      	movs	r0, #17
 800c362:	f7f8 fb25 	bl	80049b0 <lwip_htons>
 800c366:	4603      	mov	r3, r0
 800c368:	b21b      	sxth	r3, r3
 800c36a:	4323      	orrs	r3, r4
 800c36c:	b21b      	sxth	r3, r3
 800c36e:	b29a      	uxth	r2, r3
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	819a      	strh	r2, [r3, #12]
 800c374:	e010      	b.n	800c398 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c376:	69bb      	ldr	r3, [r7, #24]
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	3314      	adds	r3, #20
 800c37c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c37e:	6a3b      	ldr	r3, [r7, #32]
 800c380:	6858      	ldr	r0, [r3, #4]
 800c382:	6a3b      	ldr	r3, [r7, #32]
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	891a      	ldrh	r2, [r3, #8]
 800c388:	6a3b      	ldr	r3, [r7, #32]
 800c38a:	891b      	ldrh	r3, [r3, #8]
 800c38c:	1ad3      	subs	r3, r2, r3
 800c38e:	b29b      	uxth	r3, r3
 800c390:	2201      	movs	r2, #1
 800c392:	6939      	ldr	r1, [r7, #16]
 800c394:	f7fa f854 	bl	8006440 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c398:	6a3b      	ldr	r3, [r7, #32]
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7f8 fb1c 	bl	80049dc <lwip_htonl>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	3301      	adds	r3, #1
 800c3a8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	1ad3      	subs	r3, r2, r3
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	da02      	bge.n	800c3bc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	68fa      	ldr	r2, [r7, #12]
 800c3ba:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c3bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	69b9      	ldr	r1, [r7, #24]
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f7ff fdef 	bl	800bfa8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c3ca:	687a      	ldr	r2, [r7, #4]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	3304      	adds	r3, #4
 800c3d0:	69b9      	ldr	r1, [r7, #24]
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f7ff fe26 	bl	800c024 <tcp_output_control_segment>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c3dc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	372c      	adds	r7, #44	@ 0x2c
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd90      	pop	{r4, r7, pc}
 800c3e8:	08011dfc 	.word	0x08011dfc
 800c3ec:	080125f4 	.word	0x080125f4
 800c3f0:	08011e50 	.word	0x08011e50

0800c3f4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b082      	sub	sp, #8
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c3fc:	f7fa f90e 	bl	800661c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c400:	4b0a      	ldr	r3, [pc, #40]	@ (800c42c <tcpip_tcp_timer+0x38>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d103      	bne.n	800c410 <tcpip_tcp_timer+0x1c>
 800c408:	4b09      	ldr	r3, [pc, #36]	@ (800c430 <tcpip_tcp_timer+0x3c>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d005      	beq.n	800c41c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c410:	2200      	movs	r2, #0
 800c412:	4908      	ldr	r1, [pc, #32]	@ (800c434 <tcpip_tcp_timer+0x40>)
 800c414:	20fa      	movs	r0, #250	@ 0xfa
 800c416:	f000 f8f3 	bl	800c600 <sys_timeout>
 800c41a:	e003      	b.n	800c424 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c41c:	4b06      	ldr	r3, [pc, #24]	@ (800c438 <tcpip_tcp_timer+0x44>)
 800c41e:	2200      	movs	r2, #0
 800c420:	601a      	str	r2, [r3, #0]
  }
}
 800c422:	bf00      	nop
 800c424:	bf00      	nop
 800c426:	3708      	adds	r7, #8
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}
 800c42c:	200082e8 	.word	0x200082e8
 800c430:	200082ec 	.word	0x200082ec
 800c434:	0800c3f5 	.word	0x0800c3f5
 800c438:	20008334 	.word	0x20008334

0800c43c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c440:	4b0a      	ldr	r3, [pc, #40]	@ (800c46c <tcp_timer_needed+0x30>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d10f      	bne.n	800c468 <tcp_timer_needed+0x2c>
 800c448:	4b09      	ldr	r3, [pc, #36]	@ (800c470 <tcp_timer_needed+0x34>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d103      	bne.n	800c458 <tcp_timer_needed+0x1c>
 800c450:	4b08      	ldr	r3, [pc, #32]	@ (800c474 <tcp_timer_needed+0x38>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d007      	beq.n	800c468 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c458:	4b04      	ldr	r3, [pc, #16]	@ (800c46c <tcp_timer_needed+0x30>)
 800c45a:	2201      	movs	r2, #1
 800c45c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c45e:	2200      	movs	r2, #0
 800c460:	4905      	ldr	r1, [pc, #20]	@ (800c478 <tcp_timer_needed+0x3c>)
 800c462:	20fa      	movs	r0, #250	@ 0xfa
 800c464:	f000 f8cc 	bl	800c600 <sys_timeout>
  }
}
 800c468:	bf00      	nop
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	20008334 	.word	0x20008334
 800c470:	200082e8 	.word	0x200082e8
 800c474:	200082ec 	.word	0x200082ec
 800c478:	0800c3f5 	.word	0x0800c3f5

0800c47c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b086      	sub	sp, #24
 800c480:	af00      	add	r7, sp, #0
 800c482:	60f8      	str	r0, [r7, #12]
 800c484:	60b9      	str	r1, [r7, #8]
 800c486:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c488:	2006      	movs	r0, #6
 800c48a:	f7f8 ff09 	bl	80052a0 <memp_malloc>
 800c48e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d109      	bne.n	800c4aa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d151      	bne.n	800c540 <sys_timeout_abs+0xc4>
 800c49c:	4b2a      	ldr	r3, [pc, #168]	@ (800c548 <sys_timeout_abs+0xcc>)
 800c49e:	22be      	movs	r2, #190	@ 0xbe
 800c4a0:	492a      	ldr	r1, [pc, #168]	@ (800c54c <sys_timeout_abs+0xd0>)
 800c4a2:	482b      	ldr	r0, [pc, #172]	@ (800c550 <sys_timeout_abs+0xd4>)
 800c4a4:	f002 ff5a 	bl	800f35c <iprintf>
    return;
 800c4a8:	e04a      	b.n	800c540 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	68ba      	ldr	r2, [r7, #8]
 800c4b4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	68fa      	ldr	r2, [r7, #12]
 800c4c0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c4c2:	4b24      	ldr	r3, [pc, #144]	@ (800c554 <sys_timeout_abs+0xd8>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d103      	bne.n	800c4d2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c4ca:	4a22      	ldr	r2, [pc, #136]	@ (800c554 <sys_timeout_abs+0xd8>)
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	6013      	str	r3, [r2, #0]
    return;
 800c4d0:	e037      	b.n	800c542 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	685a      	ldr	r2, [r3, #4]
 800c4d6:	4b1f      	ldr	r3, [pc, #124]	@ (800c554 <sys_timeout_abs+0xd8>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	685b      	ldr	r3, [r3, #4]
 800c4dc:	1ad3      	subs	r3, r2, r3
 800c4de:	0fdb      	lsrs	r3, r3, #31
 800c4e0:	f003 0301 	and.w	r3, r3, #1
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d007      	beq.n	800c4fa <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c4ea:	4b1a      	ldr	r3, [pc, #104]	@ (800c554 <sys_timeout_abs+0xd8>)
 800c4ec:	681a      	ldr	r2, [r3, #0]
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c4f2:	4a18      	ldr	r2, [pc, #96]	@ (800c554 <sys_timeout_abs+0xd8>)
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	6013      	str	r3, [r2, #0]
 800c4f8:	e023      	b.n	800c542 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c4fa:	4b16      	ldr	r3, [pc, #88]	@ (800c554 <sys_timeout_abs+0xd8>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	617b      	str	r3, [r7, #20]
 800c500:	e01a      	b.n	800c538 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d00b      	beq.n	800c522 <sys_timeout_abs+0xa6>
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	685a      	ldr	r2, [r3, #4]
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	685b      	ldr	r3, [r3, #4]
 800c514:	1ad3      	subs	r3, r2, r3
 800c516:	0fdb      	lsrs	r3, r3, #31
 800c518:	f003 0301 	and.w	r3, r3, #1
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d007      	beq.n	800c532 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	681a      	ldr	r2, [r3, #0]
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	693a      	ldr	r2, [r7, #16]
 800c52e:	601a      	str	r2, [r3, #0]
        break;
 800c530:	e007      	b.n	800c542 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	617b      	str	r3, [r7, #20]
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d1e1      	bne.n	800c502 <sys_timeout_abs+0x86>
 800c53e:	e000      	b.n	800c542 <sys_timeout_abs+0xc6>
    return;
 800c540:	bf00      	nop
      }
    }
  }
}
 800c542:	3718      	adds	r7, #24
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}
 800c548:	08012618 	.word	0x08012618
 800c54c:	0801264c 	.word	0x0801264c
 800c550:	0801268c 	.word	0x0801268c
 800c554:	2000832c 	.word	0x2000832c

0800c558 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b086      	sub	sp, #24
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	4798      	blx	r3

  now = sys_now();
 800c56a:	f7f8 f821 	bl	80045b0 <sys_now>
 800c56e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	681a      	ldr	r2, [r3, #0]
 800c574:	4b0f      	ldr	r3, [pc, #60]	@ (800c5b4 <lwip_cyclic_timer+0x5c>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	4413      	add	r3, r2
 800c57a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c57c:	68fa      	ldr	r2, [r7, #12]
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	1ad3      	subs	r3, r2, r3
 800c582:	0fdb      	lsrs	r3, r3, #31
 800c584:	f003 0301 	and.w	r3, r3, #1
 800c588:	b2db      	uxtb	r3, r3
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d009      	beq.n	800c5a2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	681a      	ldr	r2, [r3, #0]
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	4413      	add	r3, r2
 800c596:	687a      	ldr	r2, [r7, #4]
 800c598:	4907      	ldr	r1, [pc, #28]	@ (800c5b8 <lwip_cyclic_timer+0x60>)
 800c59a:	4618      	mov	r0, r3
 800c59c:	f7ff ff6e 	bl	800c47c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c5a0:	e004      	b.n	800c5ac <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	4904      	ldr	r1, [pc, #16]	@ (800c5b8 <lwip_cyclic_timer+0x60>)
 800c5a6:	68f8      	ldr	r0, [r7, #12]
 800c5a8:	f7ff ff68 	bl	800c47c <sys_timeout_abs>
}
 800c5ac:	bf00      	nop
 800c5ae:	3718      	adds	r7, #24
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}
 800c5b4:	20008330 	.word	0x20008330
 800c5b8:	0800c559 	.word	0x0800c559

0800c5bc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	607b      	str	r3, [r7, #4]
 800c5c6:	e00e      	b.n	800c5e6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c5c8:	4a0b      	ldr	r2, [pc, #44]	@ (800c5f8 <sys_timeouts_init+0x3c>)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	00db      	lsls	r3, r3, #3
 800c5d4:	4a08      	ldr	r2, [pc, #32]	@ (800c5f8 <sys_timeouts_init+0x3c>)
 800c5d6:	4413      	add	r3, r2
 800c5d8:	461a      	mov	r2, r3
 800c5da:	4908      	ldr	r1, [pc, #32]	@ (800c5fc <sys_timeouts_init+0x40>)
 800c5dc:	f000 f810 	bl	800c600 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	607b      	str	r3, [r7, #4]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2b02      	cmp	r3, #2
 800c5ea:	d9ed      	bls.n	800c5c8 <sys_timeouts_init+0xc>
  }
}
 800c5ec:	bf00      	nop
 800c5ee:	bf00      	nop
 800c5f0:	3708      	adds	r7, #8
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	08013204 	.word	0x08013204
 800c5fc:	0800c559 	.word	0x0800c559

0800c600 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b086      	sub	sp, #24
 800c604:	af00      	add	r7, sp, #0
 800c606:	60f8      	str	r0, [r7, #12]
 800c608:	60b9      	str	r1, [r7, #8]
 800c60a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c612:	d306      	bcc.n	800c622 <sys_timeout+0x22>
 800c614:	4b0a      	ldr	r3, [pc, #40]	@ (800c640 <sys_timeout+0x40>)
 800c616:	f240 1229 	movw	r2, #297	@ 0x129
 800c61a:	490a      	ldr	r1, [pc, #40]	@ (800c644 <sys_timeout+0x44>)
 800c61c:	480a      	ldr	r0, [pc, #40]	@ (800c648 <sys_timeout+0x48>)
 800c61e:	f002 fe9d 	bl	800f35c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c622:	f7f7 ffc5 	bl	80045b0 <sys_now>
 800c626:	4602      	mov	r2, r0
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	4413      	add	r3, r2
 800c62c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c62e:	687a      	ldr	r2, [r7, #4]
 800c630:	68b9      	ldr	r1, [r7, #8]
 800c632:	6978      	ldr	r0, [r7, #20]
 800c634:	f7ff ff22 	bl	800c47c <sys_timeout_abs>
#endif
}
 800c638:	bf00      	nop
 800c63a:	3718      	adds	r7, #24
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}
 800c640:	08012618 	.word	0x08012618
 800c644:	080126b4 	.word	0x080126b4
 800c648:	0801268c 	.word	0x0801268c

0800c64c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b084      	sub	sp, #16
 800c650:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c652:	f7f7 ffad 	bl	80045b0 <sys_now>
 800c656:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c658:	4b1a      	ldr	r3, [pc, #104]	@ (800c6c4 <sys_check_timeouts+0x78>)
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	b2db      	uxtb	r3, r3
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d001      	beq.n	800c666 <sys_check_timeouts+0x1a>
 800c662:	f7f9 f9c9 	bl	80059f8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c666:	4b18      	ldr	r3, [pc, #96]	@ (800c6c8 <sys_check_timeouts+0x7c>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d022      	beq.n	800c6b8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	685b      	ldr	r3, [r3, #4]
 800c676:	68fa      	ldr	r2, [r7, #12]
 800c678:	1ad3      	subs	r3, r2, r3
 800c67a:	0fdb      	lsrs	r3, r3, #31
 800c67c:	f003 0301 	and.w	r3, r3, #1
 800c680:	b2db      	uxtb	r3, r3
 800c682:	2b00      	cmp	r3, #0
 800c684:	d11a      	bne.n	800c6bc <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4a0f      	ldr	r2, [pc, #60]	@ (800c6c8 <sys_check_timeouts+0x7c>)
 800c68c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	689b      	ldr	r3, [r3, #8]
 800c692:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	68db      	ldr	r3, [r3, #12]
 800c698:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	685b      	ldr	r3, [r3, #4]
 800c69e:	4a0b      	ldr	r2, [pc, #44]	@ (800c6cc <sys_check_timeouts+0x80>)
 800c6a0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c6a2:	68b9      	ldr	r1, [r7, #8]
 800c6a4:	2006      	movs	r0, #6
 800c6a6:	f7f8 fe6b 	bl	8005380 <memp_free>
    if (handler != NULL) {
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d0d3      	beq.n	800c658 <sys_check_timeouts+0xc>
      handler(arg);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6838      	ldr	r0, [r7, #0]
 800c6b4:	4798      	blx	r3
  do {
 800c6b6:	e7cf      	b.n	800c658 <sys_check_timeouts+0xc>
      return;
 800c6b8:	bf00      	nop
 800c6ba:	e000      	b.n	800c6be <sys_check_timeouts+0x72>
      return;
 800c6bc:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c6be:	3710      	adds	r7, #16
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}
 800c6c4:	200082d9 	.word	0x200082d9
 800c6c8:	2000832c 	.word	0x2000832c
 800c6cc:	20008330 	.word	0x20008330

0800c6d0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c6d4:	f002 fd42 	bl	800f15c <rand>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	b29b      	uxth	r3, r3
 800c6dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c6e0:	b29b      	uxth	r3, r3
 800c6e2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800c6e6:	b29a      	uxth	r2, r3
 800c6e8:	4b01      	ldr	r3, [pc, #4]	@ (800c6f0 <udp_init+0x20>)
 800c6ea:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c6ec:	bf00      	nop
 800c6ee:	bd80      	pop	{r7, pc}
 800c6f0:	20000028 	.word	0x20000028

0800c6f4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	60f8      	str	r0, [r7, #12]
 800c6fc:	60b9      	str	r1, [r7, #8]
 800c6fe:	4613      	mov	r3, r2
 800c700:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d105      	bne.n	800c714 <udp_input_local_match+0x20>
 800c708:	4b27      	ldr	r3, [pc, #156]	@ (800c7a8 <udp_input_local_match+0xb4>)
 800c70a:	2287      	movs	r2, #135	@ 0x87
 800c70c:	4927      	ldr	r1, [pc, #156]	@ (800c7ac <udp_input_local_match+0xb8>)
 800c70e:	4828      	ldr	r0, [pc, #160]	@ (800c7b0 <udp_input_local_match+0xbc>)
 800c710:	f002 fe24 	bl	800f35c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d105      	bne.n	800c726 <udp_input_local_match+0x32>
 800c71a:	4b23      	ldr	r3, [pc, #140]	@ (800c7a8 <udp_input_local_match+0xb4>)
 800c71c:	2288      	movs	r2, #136	@ 0x88
 800c71e:	4925      	ldr	r1, [pc, #148]	@ (800c7b4 <udp_input_local_match+0xc0>)
 800c720:	4823      	ldr	r0, [pc, #140]	@ (800c7b0 <udp_input_local_match+0xbc>)
 800c722:	f002 fe1b 	bl	800f35c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	7a1b      	ldrb	r3, [r3, #8]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d00b      	beq.n	800c746 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	7a1a      	ldrb	r2, [r3, #8]
 800c732:	4b21      	ldr	r3, [pc, #132]	@ (800c7b8 <udp_input_local_match+0xc4>)
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c73a:	3301      	adds	r3, #1
 800c73c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c73e:	429a      	cmp	r2, r3
 800c740:	d001      	beq.n	800c746 <udp_input_local_match+0x52>
    return 0;
 800c742:	2300      	movs	r3, #0
 800c744:	e02b      	b.n	800c79e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c746:	79fb      	ldrb	r3, [r7, #7]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d018      	beq.n	800c77e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d013      	beq.n	800c77a <udp_input_local_match+0x86>
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d00f      	beq.n	800c77a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c75a:	4b17      	ldr	r3, [pc, #92]	@ (800c7b8 <udp_input_local_match+0xc4>)
 800c75c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c75e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c762:	d00a      	beq.n	800c77a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	681a      	ldr	r2, [r3, #0]
 800c768:	4b13      	ldr	r3, [pc, #76]	@ (800c7b8 <udp_input_local_match+0xc4>)
 800c76a:	695b      	ldr	r3, [r3, #20]
 800c76c:	405a      	eors	r2, r3
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	3308      	adds	r3, #8
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c776:	2b00      	cmp	r3, #0
 800c778:	d110      	bne.n	800c79c <udp_input_local_match+0xa8>
          return 1;
 800c77a:	2301      	movs	r3, #1
 800c77c:	e00f      	b.n	800c79e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d009      	beq.n	800c798 <udp_input_local_match+0xa4>
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d005      	beq.n	800c798 <udp_input_local_match+0xa4>
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	681a      	ldr	r2, [r3, #0]
 800c790:	4b09      	ldr	r3, [pc, #36]	@ (800c7b8 <udp_input_local_match+0xc4>)
 800c792:	695b      	ldr	r3, [r3, #20]
 800c794:	429a      	cmp	r2, r3
 800c796:	d101      	bne.n	800c79c <udp_input_local_match+0xa8>
        return 1;
 800c798:	2301      	movs	r3, #1
 800c79a:	e000      	b.n	800c79e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c79c:	2300      	movs	r3, #0
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3710      	adds	r7, #16
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}
 800c7a6:	bf00      	nop
 800c7a8:	08012700 	.word	0x08012700
 800c7ac:	08012730 	.word	0x08012730
 800c7b0:	08012754 	.word	0x08012754
 800c7b4:	0801277c 	.word	0x0801277c
 800c7b8:	20004d6c 	.word	0x20004d6c

0800c7bc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c7bc:	b590      	push	{r4, r7, lr}
 800c7be:	b08d      	sub	sp, #52	@ 0x34
 800c7c0:	af02      	add	r7, sp, #8
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d105      	bne.n	800c7dc <udp_input+0x20>
 800c7d0:	4b7c      	ldr	r3, [pc, #496]	@ (800c9c4 <udp_input+0x208>)
 800c7d2:	22cf      	movs	r2, #207	@ 0xcf
 800c7d4:	497c      	ldr	r1, [pc, #496]	@ (800c9c8 <udp_input+0x20c>)
 800c7d6:	487d      	ldr	r0, [pc, #500]	@ (800c9cc <udp_input+0x210>)
 800c7d8:	f002 fdc0 	bl	800f35c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d105      	bne.n	800c7ee <udp_input+0x32>
 800c7e2:	4b78      	ldr	r3, [pc, #480]	@ (800c9c4 <udp_input+0x208>)
 800c7e4:	22d0      	movs	r2, #208	@ 0xd0
 800c7e6:	497a      	ldr	r1, [pc, #488]	@ (800c9d0 <udp_input+0x214>)
 800c7e8:	4878      	ldr	r0, [pc, #480]	@ (800c9cc <udp_input+0x210>)
 800c7ea:	f002 fdb7 	bl	800f35c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	895b      	ldrh	r3, [r3, #10]
 800c7f2:	2b07      	cmp	r3, #7
 800c7f4:	d803      	bhi.n	800c7fe <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f7f9 fc38 	bl	800606c <pbuf_free>
    goto end;
 800c7fc:	e0de      	b.n	800c9bc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c804:	4b73      	ldr	r3, [pc, #460]	@ (800c9d4 <udp_input+0x218>)
 800c806:	695b      	ldr	r3, [r3, #20]
 800c808:	4a72      	ldr	r2, [pc, #456]	@ (800c9d4 <udp_input+0x218>)
 800c80a:	6812      	ldr	r2, [r2, #0]
 800c80c:	4611      	mov	r1, r2
 800c80e:	4618      	mov	r0, r3
 800c810:	f001 fc88 	bl	800e124 <ip4_addr_isbroadcast_u32>
 800c814:	4603      	mov	r3, r0
 800c816:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	881b      	ldrh	r3, [r3, #0]
 800c81c:	b29b      	uxth	r3, r3
 800c81e:	4618      	mov	r0, r3
 800c820:	f7f8 f8c6 	bl	80049b0 <lwip_htons>
 800c824:	4603      	mov	r3, r0
 800c826:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	885b      	ldrh	r3, [r3, #2]
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	4618      	mov	r0, r3
 800c830:	f7f8 f8be 	bl	80049b0 <lwip_htons>
 800c834:	4603      	mov	r3, r0
 800c836:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c838:	2300      	movs	r3, #0
 800c83a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800c83c:	2300      	movs	r3, #0
 800c83e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c840:	2300      	movs	r3, #0
 800c842:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c844:	4b64      	ldr	r3, [pc, #400]	@ (800c9d8 <udp_input+0x21c>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	627b      	str	r3, [r7, #36]	@ 0x24
 800c84a:	e054      	b.n	800c8f6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c84c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c84e:	8a5b      	ldrh	r3, [r3, #18]
 800c850:	89fa      	ldrh	r2, [r7, #14]
 800c852:	429a      	cmp	r2, r3
 800c854:	d14a      	bne.n	800c8ec <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c856:	7cfb      	ldrb	r3, [r7, #19]
 800c858:	461a      	mov	r2, r3
 800c85a:	6839      	ldr	r1, [r7, #0]
 800c85c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c85e:	f7ff ff49 	bl	800c6f4 <udp_input_local_match>
 800c862:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c864:	2b00      	cmp	r3, #0
 800c866:	d041      	beq.n	800c8ec <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c86a:	7c1b      	ldrb	r3, [r3, #16]
 800c86c:	f003 0304 	and.w	r3, r3, #4
 800c870:	2b00      	cmp	r3, #0
 800c872:	d11d      	bne.n	800c8b0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c874:	69fb      	ldr	r3, [r7, #28]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d102      	bne.n	800c880 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c87c:	61fb      	str	r3, [r7, #28]
 800c87e:	e017      	b.n	800c8b0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c880:	7cfb      	ldrb	r3, [r7, #19]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d014      	beq.n	800c8b0 <udp_input+0xf4>
 800c886:	4b53      	ldr	r3, [pc, #332]	@ (800c9d4 <udp_input+0x218>)
 800c888:	695b      	ldr	r3, [r3, #20]
 800c88a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c88e:	d10f      	bne.n	800c8b0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c890:	69fb      	ldr	r3, [r7, #28]
 800c892:	681a      	ldr	r2, [r3, #0]
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	3304      	adds	r3, #4
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d008      	beq.n	800c8b0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	3304      	adds	r3, #4
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d101      	bne.n	800c8b0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ae:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b2:	8a9b      	ldrh	r3, [r3, #20]
 800c8b4:	8a3a      	ldrh	r2, [r7, #16]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d118      	bne.n	800c8ec <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8bc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d005      	beq.n	800c8ce <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c4:	685a      	ldr	r2, [r3, #4]
 800c8c6:	4b43      	ldr	r3, [pc, #268]	@ (800c9d4 <udp_input+0x218>)
 800c8c8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d10e      	bne.n	800c8ec <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c8ce:	6a3b      	ldr	r3, [r7, #32]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d014      	beq.n	800c8fe <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8d6:	68da      	ldr	r2, [r3, #12]
 800c8d8:	6a3b      	ldr	r3, [r7, #32]
 800c8da:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c8dc:	4b3e      	ldr	r3, [pc, #248]	@ (800c9d8 <udp_input+0x21c>)
 800c8de:	681a      	ldr	r2, [r3, #0]
 800c8e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8e2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c8e4:	4a3c      	ldr	r2, [pc, #240]	@ (800c9d8 <udp_input+0x21c>)
 800c8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8e8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c8ea:	e008      	b.n	800c8fe <udp_input+0x142>
      }
    }

    prev = pcb;
 800c8ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ee:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8f2:	68db      	ldr	r3, [r3, #12]
 800c8f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c8f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d1a7      	bne.n	800c84c <udp_input+0x90>
 800c8fc:	e000      	b.n	800c900 <udp_input+0x144>
        break;
 800c8fe:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c902:	2b00      	cmp	r3, #0
 800c904:	d101      	bne.n	800c90a <udp_input+0x14e>
    pcb = uncon_pcb;
 800c906:	69fb      	ldr	r3, [r7, #28]
 800c908:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c90a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d002      	beq.n	800c916 <udp_input+0x15a>
    for_us = 1;
 800c910:	2301      	movs	r3, #1
 800c912:	76fb      	strb	r3, [r7, #27]
 800c914:	e00a      	b.n	800c92c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	3304      	adds	r3, #4
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	4b2d      	ldr	r3, [pc, #180]	@ (800c9d4 <udp_input+0x218>)
 800c91e:	695b      	ldr	r3, [r3, #20]
 800c920:	429a      	cmp	r2, r3
 800c922:	bf0c      	ite	eq
 800c924:	2301      	moveq	r3, #1
 800c926:	2300      	movne	r3, #0
 800c928:	b2db      	uxtb	r3, r3
 800c92a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c92c:	7efb      	ldrb	r3, [r7, #27]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d041      	beq.n	800c9b6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c932:	2108      	movs	r1, #8
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f7f9 fb13 	bl	8005f60 <pbuf_remove_header>
 800c93a:	4603      	mov	r3, r0
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d00a      	beq.n	800c956 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c940:	4b20      	ldr	r3, [pc, #128]	@ (800c9c4 <udp_input+0x208>)
 800c942:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800c946:	4925      	ldr	r1, [pc, #148]	@ (800c9dc <udp_input+0x220>)
 800c948:	4820      	ldr	r0, [pc, #128]	@ (800c9cc <udp_input+0x210>)
 800c94a:	f002 fd07 	bl	800f35c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f7f9 fb8c 	bl	800606c <pbuf_free>
      goto end;
 800c954:	e032      	b.n	800c9bc <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d012      	beq.n	800c982 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c95e:	699b      	ldr	r3, [r3, #24]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d00a      	beq.n	800c97a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c966:	699c      	ldr	r4, [r3, #24]
 800c968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c96a:	69d8      	ldr	r0, [r3, #28]
 800c96c:	8a3b      	ldrh	r3, [r7, #16]
 800c96e:	9300      	str	r3, [sp, #0]
 800c970:	4b1b      	ldr	r3, [pc, #108]	@ (800c9e0 <udp_input+0x224>)
 800c972:	687a      	ldr	r2, [r7, #4]
 800c974:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c976:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c978:	e021      	b.n	800c9be <udp_input+0x202>
        pbuf_free(p);
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f7f9 fb76 	bl	800606c <pbuf_free>
        goto end;
 800c980:	e01c      	b.n	800c9bc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c982:	7cfb      	ldrb	r3, [r7, #19]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d112      	bne.n	800c9ae <udp_input+0x1f2>
 800c988:	4b12      	ldr	r3, [pc, #72]	@ (800c9d4 <udp_input+0x218>)
 800c98a:	695b      	ldr	r3, [r3, #20]
 800c98c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c990:	2be0      	cmp	r3, #224	@ 0xe0
 800c992:	d00c      	beq.n	800c9ae <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c994:	4b0f      	ldr	r3, [pc, #60]	@ (800c9d4 <udp_input+0x218>)
 800c996:	899b      	ldrh	r3, [r3, #12]
 800c998:	3308      	adds	r3, #8
 800c99a:	b29b      	uxth	r3, r3
 800c99c:	b21b      	sxth	r3, r3
 800c99e:	4619      	mov	r1, r3
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f7f9 fb50 	bl	8006046 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c9a6:	2103      	movs	r1, #3
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f001 f89b 	bl	800dae4 <icmp_dest_unreach>
      pbuf_free(p);
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f7f9 fb5c 	bl	800606c <pbuf_free>
  return;
 800c9b4:	e003      	b.n	800c9be <udp_input+0x202>
    pbuf_free(p);
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f7f9 fb58 	bl	800606c <pbuf_free>
  return;
 800c9bc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c9be:	372c      	adds	r7, #44	@ 0x2c
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd90      	pop	{r4, r7, pc}
 800c9c4:	08012700 	.word	0x08012700
 800c9c8:	080127a4 	.word	0x080127a4
 800c9cc:	08012754 	.word	0x08012754
 800c9d0:	080127bc 	.word	0x080127bc
 800c9d4:	20004d6c 	.word	0x20004d6c
 800c9d8:	20008338 	.word	0x20008338
 800c9dc:	080127d8 	.word	0x080127d8
 800c9e0:	20004d7c 	.word	0x20004d7c

0800c9e4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b085      	sub	sp, #20
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d01e      	beq.n	800ca32 <udp_netif_ip_addr_changed+0x4e>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d01a      	beq.n	800ca32 <udp_netif_ip_addr_changed+0x4e>
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d017      	beq.n	800ca32 <udp_netif_ip_addr_changed+0x4e>
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d013      	beq.n	800ca32 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ca0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ca40 <udp_netif_ip_addr_changed+0x5c>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	60fb      	str	r3, [r7, #12]
 800ca10:	e00c      	b.n	800ca2c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681a      	ldr	r2, [r3, #0]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d103      	bne.n	800ca26 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	681a      	ldr	r2, [r3, #0]
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	68db      	ldr	r3, [r3, #12]
 800ca2a:	60fb      	str	r3, [r7, #12]
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d1ef      	bne.n	800ca12 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ca32:	bf00      	nop
 800ca34:	3714      	adds	r7, #20
 800ca36:	46bd      	mov	sp, r7
 800ca38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3c:	4770      	bx	lr
 800ca3e:	bf00      	nop
 800ca40:	20008338 	.word	0x20008338

0800ca44 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b082      	sub	sp, #8
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ca4c:	4915      	ldr	r1, [pc, #84]	@ (800caa4 <etharp_free_entry+0x60>)
 800ca4e:	687a      	ldr	r2, [r7, #4]
 800ca50:	4613      	mov	r3, r2
 800ca52:	005b      	lsls	r3, r3, #1
 800ca54:	4413      	add	r3, r2
 800ca56:	00db      	lsls	r3, r3, #3
 800ca58:	440b      	add	r3, r1
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d013      	beq.n	800ca88 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ca60:	4910      	ldr	r1, [pc, #64]	@ (800caa4 <etharp_free_entry+0x60>)
 800ca62:	687a      	ldr	r2, [r7, #4]
 800ca64:	4613      	mov	r3, r2
 800ca66:	005b      	lsls	r3, r3, #1
 800ca68:	4413      	add	r3, r2
 800ca6a:	00db      	lsls	r3, r3, #3
 800ca6c:	440b      	add	r3, r1
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	4618      	mov	r0, r3
 800ca72:	f7f9 fafb 	bl	800606c <pbuf_free>
    arp_table[i].q = NULL;
 800ca76:	490b      	ldr	r1, [pc, #44]	@ (800caa4 <etharp_free_entry+0x60>)
 800ca78:	687a      	ldr	r2, [r7, #4]
 800ca7a:	4613      	mov	r3, r2
 800ca7c:	005b      	lsls	r3, r3, #1
 800ca7e:	4413      	add	r3, r2
 800ca80:	00db      	lsls	r3, r3, #3
 800ca82:	440b      	add	r3, r1
 800ca84:	2200      	movs	r2, #0
 800ca86:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ca88:	4906      	ldr	r1, [pc, #24]	@ (800caa4 <etharp_free_entry+0x60>)
 800ca8a:	687a      	ldr	r2, [r7, #4]
 800ca8c:	4613      	mov	r3, r2
 800ca8e:	005b      	lsls	r3, r3, #1
 800ca90:	4413      	add	r3, r2
 800ca92:	00db      	lsls	r3, r3, #3
 800ca94:	440b      	add	r3, r1
 800ca96:	3314      	adds	r3, #20
 800ca98:	2200      	movs	r2, #0
 800ca9a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ca9c:	bf00      	nop
 800ca9e:	3708      	adds	r7, #8
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	2000833c 	.word	0x2000833c

0800caa8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800caae:	2300      	movs	r3, #0
 800cab0:	607b      	str	r3, [r7, #4]
 800cab2:	e096      	b.n	800cbe2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800cab4:	494f      	ldr	r1, [pc, #316]	@ (800cbf4 <etharp_tmr+0x14c>)
 800cab6:	687a      	ldr	r2, [r7, #4]
 800cab8:	4613      	mov	r3, r2
 800caba:	005b      	lsls	r3, r3, #1
 800cabc:	4413      	add	r3, r2
 800cabe:	00db      	lsls	r3, r3, #3
 800cac0:	440b      	add	r3, r1
 800cac2:	3314      	adds	r3, #20
 800cac4:	781b      	ldrb	r3, [r3, #0]
 800cac6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800cac8:	78fb      	ldrb	r3, [r7, #3]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	f000 8086 	beq.w	800cbdc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800cad0:	4948      	ldr	r1, [pc, #288]	@ (800cbf4 <etharp_tmr+0x14c>)
 800cad2:	687a      	ldr	r2, [r7, #4]
 800cad4:	4613      	mov	r3, r2
 800cad6:	005b      	lsls	r3, r3, #1
 800cad8:	4413      	add	r3, r2
 800cada:	00db      	lsls	r3, r3, #3
 800cadc:	440b      	add	r3, r1
 800cade:	3312      	adds	r3, #18
 800cae0:	881b      	ldrh	r3, [r3, #0]
 800cae2:	3301      	adds	r3, #1
 800cae4:	b298      	uxth	r0, r3
 800cae6:	4943      	ldr	r1, [pc, #268]	@ (800cbf4 <etharp_tmr+0x14c>)
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	4613      	mov	r3, r2
 800caec:	005b      	lsls	r3, r3, #1
 800caee:	4413      	add	r3, r2
 800caf0:	00db      	lsls	r3, r3, #3
 800caf2:	440b      	add	r3, r1
 800caf4:	3312      	adds	r3, #18
 800caf6:	4602      	mov	r2, r0
 800caf8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cafa:	493e      	ldr	r1, [pc, #248]	@ (800cbf4 <etharp_tmr+0x14c>)
 800cafc:	687a      	ldr	r2, [r7, #4]
 800cafe:	4613      	mov	r3, r2
 800cb00:	005b      	lsls	r3, r3, #1
 800cb02:	4413      	add	r3, r2
 800cb04:	00db      	lsls	r3, r3, #3
 800cb06:	440b      	add	r3, r1
 800cb08:	3312      	adds	r3, #18
 800cb0a:	881b      	ldrh	r3, [r3, #0]
 800cb0c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800cb10:	d215      	bcs.n	800cb3e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cb12:	4938      	ldr	r1, [pc, #224]	@ (800cbf4 <etharp_tmr+0x14c>)
 800cb14:	687a      	ldr	r2, [r7, #4]
 800cb16:	4613      	mov	r3, r2
 800cb18:	005b      	lsls	r3, r3, #1
 800cb1a:	4413      	add	r3, r2
 800cb1c:	00db      	lsls	r3, r3, #3
 800cb1e:	440b      	add	r3, r1
 800cb20:	3314      	adds	r3, #20
 800cb22:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	d10e      	bne.n	800cb46 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800cb28:	4932      	ldr	r1, [pc, #200]	@ (800cbf4 <etharp_tmr+0x14c>)
 800cb2a:	687a      	ldr	r2, [r7, #4]
 800cb2c:	4613      	mov	r3, r2
 800cb2e:	005b      	lsls	r3, r3, #1
 800cb30:	4413      	add	r3, r2
 800cb32:	00db      	lsls	r3, r3, #3
 800cb34:	440b      	add	r3, r1
 800cb36:	3312      	adds	r3, #18
 800cb38:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cb3a:	2b04      	cmp	r3, #4
 800cb3c:	d903      	bls.n	800cb46 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f7ff ff80 	bl	800ca44 <etharp_free_entry>
 800cb44:	e04a      	b.n	800cbdc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800cb46:	492b      	ldr	r1, [pc, #172]	@ (800cbf4 <etharp_tmr+0x14c>)
 800cb48:	687a      	ldr	r2, [r7, #4]
 800cb4a:	4613      	mov	r3, r2
 800cb4c:	005b      	lsls	r3, r3, #1
 800cb4e:	4413      	add	r3, r2
 800cb50:	00db      	lsls	r3, r3, #3
 800cb52:	440b      	add	r3, r1
 800cb54:	3314      	adds	r3, #20
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	2b03      	cmp	r3, #3
 800cb5a:	d10a      	bne.n	800cb72 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800cb5c:	4925      	ldr	r1, [pc, #148]	@ (800cbf4 <etharp_tmr+0x14c>)
 800cb5e:	687a      	ldr	r2, [r7, #4]
 800cb60:	4613      	mov	r3, r2
 800cb62:	005b      	lsls	r3, r3, #1
 800cb64:	4413      	add	r3, r2
 800cb66:	00db      	lsls	r3, r3, #3
 800cb68:	440b      	add	r3, r1
 800cb6a:	3314      	adds	r3, #20
 800cb6c:	2204      	movs	r2, #4
 800cb6e:	701a      	strb	r2, [r3, #0]
 800cb70:	e034      	b.n	800cbdc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800cb72:	4920      	ldr	r1, [pc, #128]	@ (800cbf4 <etharp_tmr+0x14c>)
 800cb74:	687a      	ldr	r2, [r7, #4]
 800cb76:	4613      	mov	r3, r2
 800cb78:	005b      	lsls	r3, r3, #1
 800cb7a:	4413      	add	r3, r2
 800cb7c:	00db      	lsls	r3, r3, #3
 800cb7e:	440b      	add	r3, r1
 800cb80:	3314      	adds	r3, #20
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	2b04      	cmp	r3, #4
 800cb86:	d10a      	bne.n	800cb9e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800cb88:	491a      	ldr	r1, [pc, #104]	@ (800cbf4 <etharp_tmr+0x14c>)
 800cb8a:	687a      	ldr	r2, [r7, #4]
 800cb8c:	4613      	mov	r3, r2
 800cb8e:	005b      	lsls	r3, r3, #1
 800cb90:	4413      	add	r3, r2
 800cb92:	00db      	lsls	r3, r3, #3
 800cb94:	440b      	add	r3, r1
 800cb96:	3314      	adds	r3, #20
 800cb98:	2202      	movs	r2, #2
 800cb9a:	701a      	strb	r2, [r3, #0]
 800cb9c:	e01e      	b.n	800cbdc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cb9e:	4915      	ldr	r1, [pc, #84]	@ (800cbf4 <etharp_tmr+0x14c>)
 800cba0:	687a      	ldr	r2, [r7, #4]
 800cba2:	4613      	mov	r3, r2
 800cba4:	005b      	lsls	r3, r3, #1
 800cba6:	4413      	add	r3, r2
 800cba8:	00db      	lsls	r3, r3, #3
 800cbaa:	440b      	add	r3, r1
 800cbac:	3314      	adds	r3, #20
 800cbae:	781b      	ldrb	r3, [r3, #0]
 800cbb0:	2b01      	cmp	r3, #1
 800cbb2:	d113      	bne.n	800cbdc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800cbb4:	490f      	ldr	r1, [pc, #60]	@ (800cbf4 <etharp_tmr+0x14c>)
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	4613      	mov	r3, r2
 800cbba:	005b      	lsls	r3, r3, #1
 800cbbc:	4413      	add	r3, r2
 800cbbe:	00db      	lsls	r3, r3, #3
 800cbc0:	440b      	add	r3, r1
 800cbc2:	3308      	adds	r3, #8
 800cbc4:	6818      	ldr	r0, [r3, #0]
 800cbc6:	687a      	ldr	r2, [r7, #4]
 800cbc8:	4613      	mov	r3, r2
 800cbca:	005b      	lsls	r3, r3, #1
 800cbcc:	4413      	add	r3, r2
 800cbce:	00db      	lsls	r3, r3, #3
 800cbd0:	4a08      	ldr	r2, [pc, #32]	@ (800cbf4 <etharp_tmr+0x14c>)
 800cbd2:	4413      	add	r3, r2
 800cbd4:	3304      	adds	r3, #4
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	f000 fe6e 	bl	800d8b8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	3301      	adds	r3, #1
 800cbe0:	607b      	str	r3, [r7, #4]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2b09      	cmp	r3, #9
 800cbe6:	f77f af65 	ble.w	800cab4 <etharp_tmr+0xc>
      }
    }
  }
}
 800cbea:	bf00      	nop
 800cbec:	bf00      	nop
 800cbee:	3708      	adds	r7, #8
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}
 800cbf4:	2000833c 	.word	0x2000833c

0800cbf8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b08a      	sub	sp, #40	@ 0x28
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	460b      	mov	r3, r1
 800cc02:	607a      	str	r2, [r7, #4]
 800cc04:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800cc06:	230a      	movs	r3, #10
 800cc08:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800cc0a:	230a      	movs	r3, #10
 800cc0c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800cc0e:	230a      	movs	r3, #10
 800cc10:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800cc12:	2300      	movs	r3, #0
 800cc14:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800cc16:	230a      	movs	r3, #10
 800cc18:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	83bb      	strh	r3, [r7, #28]
 800cc1e:	2300      	movs	r3, #0
 800cc20:	837b      	strh	r3, [r7, #26]
 800cc22:	2300      	movs	r3, #0
 800cc24:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cc26:	2300      	movs	r3, #0
 800cc28:	843b      	strh	r3, [r7, #32]
 800cc2a:	e0ae      	b.n	800cd8a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800cc2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc30:	49a6      	ldr	r1, [pc, #664]	@ (800cecc <etharp_find_entry+0x2d4>)
 800cc32:	4613      	mov	r3, r2
 800cc34:	005b      	lsls	r3, r3, #1
 800cc36:	4413      	add	r3, r2
 800cc38:	00db      	lsls	r3, r3, #3
 800cc3a:	440b      	add	r3, r1
 800cc3c:	3314      	adds	r3, #20
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800cc42:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800cc46:	2b0a      	cmp	r3, #10
 800cc48:	d105      	bne.n	800cc56 <etharp_find_entry+0x5e>
 800cc4a:	7dfb      	ldrb	r3, [r7, #23]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d102      	bne.n	800cc56 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800cc50:	8c3b      	ldrh	r3, [r7, #32]
 800cc52:	847b      	strh	r3, [r7, #34]	@ 0x22
 800cc54:	e095      	b.n	800cd82 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800cc56:	7dfb      	ldrb	r3, [r7, #23]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	f000 8092 	beq.w	800cd82 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800cc5e:	7dfb      	ldrb	r3, [r7, #23]
 800cc60:	2b01      	cmp	r3, #1
 800cc62:	d009      	beq.n	800cc78 <etharp_find_entry+0x80>
 800cc64:	7dfb      	ldrb	r3, [r7, #23]
 800cc66:	2b01      	cmp	r3, #1
 800cc68:	d806      	bhi.n	800cc78 <etharp_find_entry+0x80>
 800cc6a:	4b99      	ldr	r3, [pc, #612]	@ (800ced0 <etharp_find_entry+0x2d8>)
 800cc6c:	f240 1223 	movw	r2, #291	@ 0x123
 800cc70:	4998      	ldr	r1, [pc, #608]	@ (800ced4 <etharp_find_entry+0x2dc>)
 800cc72:	4899      	ldr	r0, [pc, #612]	@ (800ced8 <etharp_find_entry+0x2e0>)
 800cc74:	f002 fb72 	bl	800f35c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d020      	beq.n	800ccc0 <etharp_find_entry+0xc8>
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	6819      	ldr	r1, [r3, #0]
 800cc82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc86:	4891      	ldr	r0, [pc, #580]	@ (800cecc <etharp_find_entry+0x2d4>)
 800cc88:	4613      	mov	r3, r2
 800cc8a:	005b      	lsls	r3, r3, #1
 800cc8c:	4413      	add	r3, r2
 800cc8e:	00db      	lsls	r3, r3, #3
 800cc90:	4403      	add	r3, r0
 800cc92:	3304      	adds	r3, #4
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	4299      	cmp	r1, r3
 800cc98:	d112      	bne.n	800ccc0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d00c      	beq.n	800ccba <etharp_find_entry+0xc2>
 800cca0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cca4:	4989      	ldr	r1, [pc, #548]	@ (800cecc <etharp_find_entry+0x2d4>)
 800cca6:	4613      	mov	r3, r2
 800cca8:	005b      	lsls	r3, r3, #1
 800ccaa:	4413      	add	r3, r2
 800ccac:	00db      	lsls	r3, r3, #3
 800ccae:	440b      	add	r3, r1
 800ccb0:	3308      	adds	r3, #8
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	687a      	ldr	r2, [r7, #4]
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d102      	bne.n	800ccc0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800ccba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ccbe:	e100      	b.n	800cec2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800ccc0:	7dfb      	ldrb	r3, [r7, #23]
 800ccc2:	2b01      	cmp	r3, #1
 800ccc4:	d140      	bne.n	800cd48 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800ccc6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ccca:	4980      	ldr	r1, [pc, #512]	@ (800cecc <etharp_find_entry+0x2d4>)
 800cccc:	4613      	mov	r3, r2
 800ccce:	005b      	lsls	r3, r3, #1
 800ccd0:	4413      	add	r3, r2
 800ccd2:	00db      	lsls	r3, r3, #3
 800ccd4:	440b      	add	r3, r1
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d01a      	beq.n	800cd12 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800ccdc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cce0:	497a      	ldr	r1, [pc, #488]	@ (800cecc <etharp_find_entry+0x2d4>)
 800cce2:	4613      	mov	r3, r2
 800cce4:	005b      	lsls	r3, r3, #1
 800cce6:	4413      	add	r3, r2
 800cce8:	00db      	lsls	r3, r3, #3
 800ccea:	440b      	add	r3, r1
 800ccec:	3312      	adds	r3, #18
 800ccee:	881b      	ldrh	r3, [r3, #0]
 800ccf0:	8bba      	ldrh	r2, [r7, #28]
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	d845      	bhi.n	800cd82 <etharp_find_entry+0x18a>
            old_queue = i;
 800ccf6:	8c3b      	ldrh	r3, [r7, #32]
 800ccf8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800ccfa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ccfe:	4973      	ldr	r1, [pc, #460]	@ (800cecc <etharp_find_entry+0x2d4>)
 800cd00:	4613      	mov	r3, r2
 800cd02:	005b      	lsls	r3, r3, #1
 800cd04:	4413      	add	r3, r2
 800cd06:	00db      	lsls	r3, r3, #3
 800cd08:	440b      	add	r3, r1
 800cd0a:	3312      	adds	r3, #18
 800cd0c:	881b      	ldrh	r3, [r3, #0]
 800cd0e:	83bb      	strh	r3, [r7, #28]
 800cd10:	e037      	b.n	800cd82 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800cd12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd16:	496d      	ldr	r1, [pc, #436]	@ (800cecc <etharp_find_entry+0x2d4>)
 800cd18:	4613      	mov	r3, r2
 800cd1a:	005b      	lsls	r3, r3, #1
 800cd1c:	4413      	add	r3, r2
 800cd1e:	00db      	lsls	r3, r3, #3
 800cd20:	440b      	add	r3, r1
 800cd22:	3312      	adds	r3, #18
 800cd24:	881b      	ldrh	r3, [r3, #0]
 800cd26:	8b7a      	ldrh	r2, [r7, #26]
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d82a      	bhi.n	800cd82 <etharp_find_entry+0x18a>
            old_pending = i;
 800cd2c:	8c3b      	ldrh	r3, [r7, #32]
 800cd2e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800cd30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd34:	4965      	ldr	r1, [pc, #404]	@ (800cecc <etharp_find_entry+0x2d4>)
 800cd36:	4613      	mov	r3, r2
 800cd38:	005b      	lsls	r3, r3, #1
 800cd3a:	4413      	add	r3, r2
 800cd3c:	00db      	lsls	r3, r3, #3
 800cd3e:	440b      	add	r3, r1
 800cd40:	3312      	adds	r3, #18
 800cd42:	881b      	ldrh	r3, [r3, #0]
 800cd44:	837b      	strh	r3, [r7, #26]
 800cd46:	e01c      	b.n	800cd82 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800cd48:	7dfb      	ldrb	r3, [r7, #23]
 800cd4a:	2b01      	cmp	r3, #1
 800cd4c:	d919      	bls.n	800cd82 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800cd4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd52:	495e      	ldr	r1, [pc, #376]	@ (800cecc <etharp_find_entry+0x2d4>)
 800cd54:	4613      	mov	r3, r2
 800cd56:	005b      	lsls	r3, r3, #1
 800cd58:	4413      	add	r3, r2
 800cd5a:	00db      	lsls	r3, r3, #3
 800cd5c:	440b      	add	r3, r1
 800cd5e:	3312      	adds	r3, #18
 800cd60:	881b      	ldrh	r3, [r3, #0]
 800cd62:	8b3a      	ldrh	r2, [r7, #24]
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d80c      	bhi.n	800cd82 <etharp_find_entry+0x18a>
            old_stable = i;
 800cd68:	8c3b      	ldrh	r3, [r7, #32]
 800cd6a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800cd6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd70:	4956      	ldr	r1, [pc, #344]	@ (800cecc <etharp_find_entry+0x2d4>)
 800cd72:	4613      	mov	r3, r2
 800cd74:	005b      	lsls	r3, r3, #1
 800cd76:	4413      	add	r3, r2
 800cd78:	00db      	lsls	r3, r3, #3
 800cd7a:	440b      	add	r3, r1
 800cd7c:	3312      	adds	r3, #18
 800cd7e:	881b      	ldrh	r3, [r3, #0]
 800cd80:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cd82:	8c3b      	ldrh	r3, [r7, #32]
 800cd84:	3301      	adds	r3, #1
 800cd86:	b29b      	uxth	r3, r3
 800cd88:	843b      	strh	r3, [r7, #32]
 800cd8a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cd8e:	2b09      	cmp	r3, #9
 800cd90:	f77f af4c 	ble.w	800cc2c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800cd94:	7afb      	ldrb	r3, [r7, #11]
 800cd96:	f003 0302 	and.w	r3, r3, #2
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d108      	bne.n	800cdb0 <etharp_find_entry+0x1b8>
 800cd9e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800cda2:	2b0a      	cmp	r3, #10
 800cda4:	d107      	bne.n	800cdb6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800cda6:	7afb      	ldrb	r3, [r7, #11]
 800cda8:	f003 0301 	and.w	r3, r3, #1
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d102      	bne.n	800cdb6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800cdb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cdb4:	e085      	b.n	800cec2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800cdb6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800cdba:	2b09      	cmp	r3, #9
 800cdbc:	dc02      	bgt.n	800cdc4 <etharp_find_entry+0x1cc>
    i = empty;
 800cdbe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cdc0:	843b      	strh	r3, [r7, #32]
 800cdc2:	e039      	b.n	800ce38 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800cdc4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800cdc8:	2b09      	cmp	r3, #9
 800cdca:	dc14      	bgt.n	800cdf6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800cdcc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cdce:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800cdd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cdd4:	493d      	ldr	r1, [pc, #244]	@ (800cecc <etharp_find_entry+0x2d4>)
 800cdd6:	4613      	mov	r3, r2
 800cdd8:	005b      	lsls	r3, r3, #1
 800cdda:	4413      	add	r3, r2
 800cddc:	00db      	lsls	r3, r3, #3
 800cdde:	440b      	add	r3, r1
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d018      	beq.n	800ce18 <etharp_find_entry+0x220>
 800cde6:	4b3a      	ldr	r3, [pc, #232]	@ (800ced0 <etharp_find_entry+0x2d8>)
 800cde8:	f240 126d 	movw	r2, #365	@ 0x16d
 800cdec:	493b      	ldr	r1, [pc, #236]	@ (800cedc <etharp_find_entry+0x2e4>)
 800cdee:	483a      	ldr	r0, [pc, #232]	@ (800ced8 <etharp_find_entry+0x2e0>)
 800cdf0:	f002 fab4 	bl	800f35c <iprintf>
 800cdf4:	e010      	b.n	800ce18 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800cdf6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800cdfa:	2b09      	cmp	r3, #9
 800cdfc:	dc02      	bgt.n	800ce04 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800cdfe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ce00:	843b      	strh	r3, [r7, #32]
 800ce02:	e009      	b.n	800ce18 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ce04:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ce08:	2b09      	cmp	r3, #9
 800ce0a:	dc02      	bgt.n	800ce12 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800ce0c:	8bfb      	ldrh	r3, [r7, #30]
 800ce0e:	843b      	strh	r3, [r7, #32]
 800ce10:	e002      	b.n	800ce18 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800ce12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ce16:	e054      	b.n	800cec2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ce18:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ce1c:	2b09      	cmp	r3, #9
 800ce1e:	dd06      	ble.n	800ce2e <etharp_find_entry+0x236>
 800ce20:	4b2b      	ldr	r3, [pc, #172]	@ (800ced0 <etharp_find_entry+0x2d8>)
 800ce22:	f240 127f 	movw	r2, #383	@ 0x17f
 800ce26:	492e      	ldr	r1, [pc, #184]	@ (800cee0 <etharp_find_entry+0x2e8>)
 800ce28:	482b      	ldr	r0, [pc, #172]	@ (800ced8 <etharp_find_entry+0x2e0>)
 800ce2a:	f002 fa97 	bl	800f35c <iprintf>
    etharp_free_entry(i);
 800ce2e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7ff fe06 	bl	800ca44 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ce38:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ce3c:	2b09      	cmp	r3, #9
 800ce3e:	dd06      	ble.n	800ce4e <etharp_find_entry+0x256>
 800ce40:	4b23      	ldr	r3, [pc, #140]	@ (800ced0 <etharp_find_entry+0x2d8>)
 800ce42:	f240 1283 	movw	r2, #387	@ 0x183
 800ce46:	4926      	ldr	r1, [pc, #152]	@ (800cee0 <etharp_find_entry+0x2e8>)
 800ce48:	4823      	ldr	r0, [pc, #140]	@ (800ced8 <etharp_find_entry+0x2e0>)
 800ce4a:	f002 fa87 	bl	800f35c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ce4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce52:	491e      	ldr	r1, [pc, #120]	@ (800cecc <etharp_find_entry+0x2d4>)
 800ce54:	4613      	mov	r3, r2
 800ce56:	005b      	lsls	r3, r3, #1
 800ce58:	4413      	add	r3, r2
 800ce5a:	00db      	lsls	r3, r3, #3
 800ce5c:	440b      	add	r3, r1
 800ce5e:	3314      	adds	r3, #20
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d006      	beq.n	800ce74 <etharp_find_entry+0x27c>
 800ce66:	4b1a      	ldr	r3, [pc, #104]	@ (800ced0 <etharp_find_entry+0x2d8>)
 800ce68:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800ce6c:	491d      	ldr	r1, [pc, #116]	@ (800cee4 <etharp_find_entry+0x2ec>)
 800ce6e:	481a      	ldr	r0, [pc, #104]	@ (800ced8 <etharp_find_entry+0x2e0>)
 800ce70:	f002 fa74 	bl	800f35c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d00b      	beq.n	800ce92 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ce7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	6819      	ldr	r1, [r3, #0]
 800ce82:	4812      	ldr	r0, [pc, #72]	@ (800cecc <etharp_find_entry+0x2d4>)
 800ce84:	4613      	mov	r3, r2
 800ce86:	005b      	lsls	r3, r3, #1
 800ce88:	4413      	add	r3, r2
 800ce8a:	00db      	lsls	r3, r3, #3
 800ce8c:	4403      	add	r3, r0
 800ce8e:	3304      	adds	r3, #4
 800ce90:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ce92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce96:	490d      	ldr	r1, [pc, #52]	@ (800cecc <etharp_find_entry+0x2d4>)
 800ce98:	4613      	mov	r3, r2
 800ce9a:	005b      	lsls	r3, r3, #1
 800ce9c:	4413      	add	r3, r2
 800ce9e:	00db      	lsls	r3, r3, #3
 800cea0:	440b      	add	r3, r1
 800cea2:	3312      	adds	r3, #18
 800cea4:	2200      	movs	r2, #0
 800cea6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800cea8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ceac:	4907      	ldr	r1, [pc, #28]	@ (800cecc <etharp_find_entry+0x2d4>)
 800ceae:	4613      	mov	r3, r2
 800ceb0:	005b      	lsls	r3, r3, #1
 800ceb2:	4413      	add	r3, r2
 800ceb4:	00db      	lsls	r3, r3, #3
 800ceb6:	440b      	add	r3, r1
 800ceb8:	3308      	adds	r3, #8
 800ceba:	687a      	ldr	r2, [r7, #4]
 800cebc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800cebe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3728      	adds	r7, #40	@ 0x28
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}
 800ceca:	bf00      	nop
 800cecc:	2000833c 	.word	0x2000833c
 800ced0:	08012a64 	.word	0x08012a64
 800ced4:	08012a9c 	.word	0x08012a9c
 800ced8:	08012adc 	.word	0x08012adc
 800cedc:	08012b04 	.word	0x08012b04
 800cee0:	08012b1c 	.word	0x08012b1c
 800cee4:	08012b30 	.word	0x08012b30

0800cee8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b088      	sub	sp, #32
 800ceec:	af02      	add	r7, sp, #8
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	607a      	str	r2, [r7, #4]
 800cef4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cefc:	2b06      	cmp	r3, #6
 800cefe:	d006      	beq.n	800cf0e <etharp_update_arp_entry+0x26>
 800cf00:	4b48      	ldr	r3, [pc, #288]	@ (800d024 <etharp_update_arp_entry+0x13c>)
 800cf02:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800cf06:	4948      	ldr	r1, [pc, #288]	@ (800d028 <etharp_update_arp_entry+0x140>)
 800cf08:	4848      	ldr	r0, [pc, #288]	@ (800d02c <etharp_update_arp_entry+0x144>)
 800cf0a:	f002 fa27 	bl	800f35c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d012      	beq.n	800cf3a <etharp_update_arp_entry+0x52>
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d00e      	beq.n	800cf3a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	68f9      	ldr	r1, [r7, #12]
 800cf22:	4618      	mov	r0, r3
 800cf24:	f001 f8fe 	bl	800e124 <ip4_addr_isbroadcast_u32>
 800cf28:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d105      	bne.n	800cf3a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cf36:	2be0      	cmp	r3, #224	@ 0xe0
 800cf38:	d102      	bne.n	800cf40 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cf3a:	f06f 030f 	mvn.w	r3, #15
 800cf3e:	e06c      	b.n	800d01a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800cf40:	78fb      	ldrb	r3, [r7, #3]
 800cf42:	68fa      	ldr	r2, [r7, #12]
 800cf44:	4619      	mov	r1, r3
 800cf46:	68b8      	ldr	r0, [r7, #8]
 800cf48:	f7ff fe56 	bl	800cbf8 <etharp_find_entry>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800cf50:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	da02      	bge.n	800cf5e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800cf58:	8afb      	ldrh	r3, [r7, #22]
 800cf5a:	b25b      	sxtb	r3, r3
 800cf5c:	e05d      	b.n	800d01a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800cf5e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cf62:	4933      	ldr	r1, [pc, #204]	@ (800d030 <etharp_update_arp_entry+0x148>)
 800cf64:	4613      	mov	r3, r2
 800cf66:	005b      	lsls	r3, r3, #1
 800cf68:	4413      	add	r3, r2
 800cf6a:	00db      	lsls	r3, r3, #3
 800cf6c:	440b      	add	r3, r1
 800cf6e:	3314      	adds	r3, #20
 800cf70:	2202      	movs	r2, #2
 800cf72:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800cf74:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cf78:	492d      	ldr	r1, [pc, #180]	@ (800d030 <etharp_update_arp_entry+0x148>)
 800cf7a:	4613      	mov	r3, r2
 800cf7c:	005b      	lsls	r3, r3, #1
 800cf7e:	4413      	add	r3, r2
 800cf80:	00db      	lsls	r3, r3, #3
 800cf82:	440b      	add	r3, r1
 800cf84:	3308      	adds	r3, #8
 800cf86:	68fa      	ldr	r2, [r7, #12]
 800cf88:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800cf8a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cf8e:	4613      	mov	r3, r2
 800cf90:	005b      	lsls	r3, r3, #1
 800cf92:	4413      	add	r3, r2
 800cf94:	00db      	lsls	r3, r3, #3
 800cf96:	3308      	adds	r3, #8
 800cf98:	4a25      	ldr	r2, [pc, #148]	@ (800d030 <etharp_update_arp_entry+0x148>)
 800cf9a:	4413      	add	r3, r2
 800cf9c:	3304      	adds	r3, #4
 800cf9e:	2206      	movs	r2, #6
 800cfa0:	6879      	ldr	r1, [r7, #4]
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f002 fa45 	bl	800f432 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800cfa8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cfac:	4920      	ldr	r1, [pc, #128]	@ (800d030 <etharp_update_arp_entry+0x148>)
 800cfae:	4613      	mov	r3, r2
 800cfb0:	005b      	lsls	r3, r3, #1
 800cfb2:	4413      	add	r3, r2
 800cfb4:	00db      	lsls	r3, r3, #3
 800cfb6:	440b      	add	r3, r1
 800cfb8:	3312      	adds	r3, #18
 800cfba:	2200      	movs	r2, #0
 800cfbc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800cfbe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cfc2:	491b      	ldr	r1, [pc, #108]	@ (800d030 <etharp_update_arp_entry+0x148>)
 800cfc4:	4613      	mov	r3, r2
 800cfc6:	005b      	lsls	r3, r3, #1
 800cfc8:	4413      	add	r3, r2
 800cfca:	00db      	lsls	r3, r3, #3
 800cfcc:	440b      	add	r3, r1
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d021      	beq.n	800d018 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800cfd4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cfd8:	4915      	ldr	r1, [pc, #84]	@ (800d030 <etharp_update_arp_entry+0x148>)
 800cfda:	4613      	mov	r3, r2
 800cfdc:	005b      	lsls	r3, r3, #1
 800cfde:	4413      	add	r3, r2
 800cfe0:	00db      	lsls	r3, r3, #3
 800cfe2:	440b      	add	r3, r1
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800cfe8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cfec:	4910      	ldr	r1, [pc, #64]	@ (800d030 <etharp_update_arp_entry+0x148>)
 800cfee:	4613      	mov	r3, r2
 800cff0:	005b      	lsls	r3, r3, #1
 800cff2:	4413      	add	r3, r2
 800cff4:	00db      	lsls	r3, r3, #3
 800cff6:	440b      	add	r3, r1
 800cff8:	2200      	movs	r2, #0
 800cffa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800d002:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d006:	9300      	str	r3, [sp, #0]
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6939      	ldr	r1, [r7, #16]
 800d00c:	68f8      	ldr	r0, [r7, #12]
 800d00e:	f002 f827 	bl	800f060 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d012:	6938      	ldr	r0, [r7, #16]
 800d014:	f7f9 f82a 	bl	800606c <pbuf_free>
  }
  return ERR_OK;
 800d018:	2300      	movs	r3, #0
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3718      	adds	r7, #24
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	08012a64 	.word	0x08012a64
 800d028:	08012b5c 	.word	0x08012b5c
 800d02c:	08012adc 	.word	0x08012adc
 800d030:	2000833c 	.word	0x2000833c

0800d034 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b084      	sub	sp, #16
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d03c:	2300      	movs	r3, #0
 800d03e:	60fb      	str	r3, [r7, #12]
 800d040:	e01e      	b.n	800d080 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d042:	4913      	ldr	r1, [pc, #76]	@ (800d090 <etharp_cleanup_netif+0x5c>)
 800d044:	68fa      	ldr	r2, [r7, #12]
 800d046:	4613      	mov	r3, r2
 800d048:	005b      	lsls	r3, r3, #1
 800d04a:	4413      	add	r3, r2
 800d04c:	00db      	lsls	r3, r3, #3
 800d04e:	440b      	add	r3, r1
 800d050:	3314      	adds	r3, #20
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d056:	7afb      	ldrb	r3, [r7, #11]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d00e      	beq.n	800d07a <etharp_cleanup_netif+0x46>
 800d05c:	490c      	ldr	r1, [pc, #48]	@ (800d090 <etharp_cleanup_netif+0x5c>)
 800d05e:	68fa      	ldr	r2, [r7, #12]
 800d060:	4613      	mov	r3, r2
 800d062:	005b      	lsls	r3, r3, #1
 800d064:	4413      	add	r3, r2
 800d066:	00db      	lsls	r3, r3, #3
 800d068:	440b      	add	r3, r1
 800d06a:	3308      	adds	r3, #8
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	429a      	cmp	r2, r3
 800d072:	d102      	bne.n	800d07a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800d074:	68f8      	ldr	r0, [r7, #12]
 800d076:	f7ff fce5 	bl	800ca44 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	3301      	adds	r3, #1
 800d07e:	60fb      	str	r3, [r7, #12]
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	2b09      	cmp	r3, #9
 800d084:	dddd      	ble.n	800d042 <etharp_cleanup_netif+0xe>
    }
  }
}
 800d086:	bf00      	nop
 800d088:	bf00      	nop
 800d08a:	3710      	adds	r7, #16
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}
 800d090:	2000833c 	.word	0x2000833c

0800d094 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d094:	b5b0      	push	{r4, r5, r7, lr}
 800d096:	b08a      	sub	sp, #40	@ 0x28
 800d098:	af04      	add	r7, sp, #16
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d107      	bne.n	800d0b4 <etharp_input+0x20>
 800d0a4:	4b3d      	ldr	r3, [pc, #244]	@ (800d19c <etharp_input+0x108>)
 800d0a6:	f240 228a 	movw	r2, #650	@ 0x28a
 800d0aa:	493d      	ldr	r1, [pc, #244]	@ (800d1a0 <etharp_input+0x10c>)
 800d0ac:	483d      	ldr	r0, [pc, #244]	@ (800d1a4 <etharp_input+0x110>)
 800d0ae:	f002 f955 	bl	800f35c <iprintf>
 800d0b2:	e06f      	b.n	800d194 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	685b      	ldr	r3, [r3, #4]
 800d0b8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	881b      	ldrh	r3, [r3, #0]
 800d0be:	b29b      	uxth	r3, r3
 800d0c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d0c4:	d10c      	bne.n	800d0e0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d0ca:	2b06      	cmp	r3, #6
 800d0cc:	d108      	bne.n	800d0e0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d0d2:	2b04      	cmp	r3, #4
 800d0d4:	d104      	bne.n	800d0e0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	885b      	ldrh	r3, [r3, #2]
 800d0da:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d0dc:	2b08      	cmp	r3, #8
 800d0de:	d003      	beq.n	800d0e8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f7f8 ffc3 	bl	800606c <pbuf_free>
    return;
 800d0e6:	e055      	b.n	800d194 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d0e8:	693b      	ldr	r3, [r7, #16]
 800d0ea:	330e      	adds	r3, #14
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	3318      	adds	r3, #24
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	3304      	adds	r3, #4
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d102      	bne.n	800d108 <etharp_input+0x74>
    for_us = 0;
 800d102:	2300      	movs	r3, #0
 800d104:	75fb      	strb	r3, [r7, #23]
 800d106:	e009      	b.n	800d11c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d108:	68ba      	ldr	r2, [r7, #8]
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	3304      	adds	r3, #4
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	429a      	cmp	r2, r3
 800d112:	bf0c      	ite	eq
 800d114:	2301      	moveq	r3, #1
 800d116:	2300      	movne	r3, #0
 800d118:	b2db      	uxtb	r3, r3
 800d11a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d11c:	693b      	ldr	r3, [r7, #16]
 800d11e:	f103 0208 	add.w	r2, r3, #8
 800d122:	7dfb      	ldrb	r3, [r7, #23]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d001      	beq.n	800d12c <etharp_input+0x98>
 800d128:	2301      	movs	r3, #1
 800d12a:	e000      	b.n	800d12e <etharp_input+0x9a>
 800d12c:	2302      	movs	r3, #2
 800d12e:	f107 010c 	add.w	r1, r7, #12
 800d132:	6838      	ldr	r0, [r7, #0]
 800d134:	f7ff fed8 	bl	800cee8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	88db      	ldrh	r3, [r3, #6]
 800d13c:	b29b      	uxth	r3, r3
 800d13e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d142:	d003      	beq.n	800d14c <etharp_input+0xb8>
 800d144:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d148:	d01e      	beq.n	800d188 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d14a:	e020      	b.n	800d18e <etharp_input+0xfa>
      if (for_us) {
 800d14c:	7dfb      	ldrb	r3, [r7, #23]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d01c      	beq.n	800d18c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d168:	693a      	ldr	r2, [r7, #16]
 800d16a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d16c:	2102      	movs	r1, #2
 800d16e:	9103      	str	r1, [sp, #12]
 800d170:	f107 010c 	add.w	r1, r7, #12
 800d174:	9102      	str	r1, [sp, #8]
 800d176:	9201      	str	r2, [sp, #4]
 800d178:	9300      	str	r3, [sp, #0]
 800d17a:	462b      	mov	r3, r5
 800d17c:	4622      	mov	r2, r4
 800d17e:	4601      	mov	r1, r0
 800d180:	6838      	ldr	r0, [r7, #0]
 800d182:	f000 faeb 	bl	800d75c <etharp_raw>
      break;
 800d186:	e001      	b.n	800d18c <etharp_input+0xf8>
      break;
 800d188:	bf00      	nop
 800d18a:	e000      	b.n	800d18e <etharp_input+0xfa>
      break;
 800d18c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f7f8 ff6c 	bl	800606c <pbuf_free>
}
 800d194:	3718      	adds	r7, #24
 800d196:	46bd      	mov	sp, r7
 800d198:	bdb0      	pop	{r4, r5, r7, pc}
 800d19a:	bf00      	nop
 800d19c:	08012a64 	.word	0x08012a64
 800d1a0:	08012bb4 	.word	0x08012bb4
 800d1a4:	08012adc 	.word	0x08012adc

0800d1a8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b086      	sub	sp, #24
 800d1ac:	af02      	add	r7, sp, #8
 800d1ae:	60f8      	str	r0, [r7, #12]
 800d1b0:	60b9      	str	r1, [r7, #8]
 800d1b2:	4613      	mov	r3, r2
 800d1b4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d1b6:	79fa      	ldrb	r2, [r7, #7]
 800d1b8:	4944      	ldr	r1, [pc, #272]	@ (800d2cc <etharp_output_to_arp_index+0x124>)
 800d1ba:	4613      	mov	r3, r2
 800d1bc:	005b      	lsls	r3, r3, #1
 800d1be:	4413      	add	r3, r2
 800d1c0:	00db      	lsls	r3, r3, #3
 800d1c2:	440b      	add	r3, r1
 800d1c4:	3314      	adds	r3, #20
 800d1c6:	781b      	ldrb	r3, [r3, #0]
 800d1c8:	2b01      	cmp	r3, #1
 800d1ca:	d806      	bhi.n	800d1da <etharp_output_to_arp_index+0x32>
 800d1cc:	4b40      	ldr	r3, [pc, #256]	@ (800d2d0 <etharp_output_to_arp_index+0x128>)
 800d1ce:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800d1d2:	4940      	ldr	r1, [pc, #256]	@ (800d2d4 <etharp_output_to_arp_index+0x12c>)
 800d1d4:	4840      	ldr	r0, [pc, #256]	@ (800d2d8 <etharp_output_to_arp_index+0x130>)
 800d1d6:	f002 f8c1 	bl	800f35c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d1da:	79fa      	ldrb	r2, [r7, #7]
 800d1dc:	493b      	ldr	r1, [pc, #236]	@ (800d2cc <etharp_output_to_arp_index+0x124>)
 800d1de:	4613      	mov	r3, r2
 800d1e0:	005b      	lsls	r3, r3, #1
 800d1e2:	4413      	add	r3, r2
 800d1e4:	00db      	lsls	r3, r3, #3
 800d1e6:	440b      	add	r3, r1
 800d1e8:	3314      	adds	r3, #20
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	2b02      	cmp	r3, #2
 800d1ee:	d153      	bne.n	800d298 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d1f0:	79fa      	ldrb	r2, [r7, #7]
 800d1f2:	4936      	ldr	r1, [pc, #216]	@ (800d2cc <etharp_output_to_arp_index+0x124>)
 800d1f4:	4613      	mov	r3, r2
 800d1f6:	005b      	lsls	r3, r3, #1
 800d1f8:	4413      	add	r3, r2
 800d1fa:	00db      	lsls	r3, r3, #3
 800d1fc:	440b      	add	r3, r1
 800d1fe:	3312      	adds	r3, #18
 800d200:	881b      	ldrh	r3, [r3, #0]
 800d202:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800d206:	d919      	bls.n	800d23c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d208:	79fa      	ldrb	r2, [r7, #7]
 800d20a:	4613      	mov	r3, r2
 800d20c:	005b      	lsls	r3, r3, #1
 800d20e:	4413      	add	r3, r2
 800d210:	00db      	lsls	r3, r3, #3
 800d212:	4a2e      	ldr	r2, [pc, #184]	@ (800d2cc <etharp_output_to_arp_index+0x124>)
 800d214:	4413      	add	r3, r2
 800d216:	3304      	adds	r3, #4
 800d218:	4619      	mov	r1, r3
 800d21a:	68f8      	ldr	r0, [r7, #12]
 800d21c:	f000 fb4c 	bl	800d8b8 <etharp_request>
 800d220:	4603      	mov	r3, r0
 800d222:	2b00      	cmp	r3, #0
 800d224:	d138      	bne.n	800d298 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d226:	79fa      	ldrb	r2, [r7, #7]
 800d228:	4928      	ldr	r1, [pc, #160]	@ (800d2cc <etharp_output_to_arp_index+0x124>)
 800d22a:	4613      	mov	r3, r2
 800d22c:	005b      	lsls	r3, r3, #1
 800d22e:	4413      	add	r3, r2
 800d230:	00db      	lsls	r3, r3, #3
 800d232:	440b      	add	r3, r1
 800d234:	3314      	adds	r3, #20
 800d236:	2203      	movs	r2, #3
 800d238:	701a      	strb	r2, [r3, #0]
 800d23a:	e02d      	b.n	800d298 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d23c:	79fa      	ldrb	r2, [r7, #7]
 800d23e:	4923      	ldr	r1, [pc, #140]	@ (800d2cc <etharp_output_to_arp_index+0x124>)
 800d240:	4613      	mov	r3, r2
 800d242:	005b      	lsls	r3, r3, #1
 800d244:	4413      	add	r3, r2
 800d246:	00db      	lsls	r3, r3, #3
 800d248:	440b      	add	r3, r1
 800d24a:	3312      	adds	r3, #18
 800d24c:	881b      	ldrh	r3, [r3, #0]
 800d24e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800d252:	d321      	bcc.n	800d298 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d254:	79fa      	ldrb	r2, [r7, #7]
 800d256:	4613      	mov	r3, r2
 800d258:	005b      	lsls	r3, r3, #1
 800d25a:	4413      	add	r3, r2
 800d25c:	00db      	lsls	r3, r3, #3
 800d25e:	4a1b      	ldr	r2, [pc, #108]	@ (800d2cc <etharp_output_to_arp_index+0x124>)
 800d260:	4413      	add	r3, r2
 800d262:	1d19      	adds	r1, r3, #4
 800d264:	79fa      	ldrb	r2, [r7, #7]
 800d266:	4613      	mov	r3, r2
 800d268:	005b      	lsls	r3, r3, #1
 800d26a:	4413      	add	r3, r2
 800d26c:	00db      	lsls	r3, r3, #3
 800d26e:	3308      	adds	r3, #8
 800d270:	4a16      	ldr	r2, [pc, #88]	@ (800d2cc <etharp_output_to_arp_index+0x124>)
 800d272:	4413      	add	r3, r2
 800d274:	3304      	adds	r3, #4
 800d276:	461a      	mov	r2, r3
 800d278:	68f8      	ldr	r0, [r7, #12]
 800d27a:	f000 fafb 	bl	800d874 <etharp_request_dst>
 800d27e:	4603      	mov	r3, r0
 800d280:	2b00      	cmp	r3, #0
 800d282:	d109      	bne.n	800d298 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d284:	79fa      	ldrb	r2, [r7, #7]
 800d286:	4911      	ldr	r1, [pc, #68]	@ (800d2cc <etharp_output_to_arp_index+0x124>)
 800d288:	4613      	mov	r3, r2
 800d28a:	005b      	lsls	r3, r3, #1
 800d28c:	4413      	add	r3, r2
 800d28e:	00db      	lsls	r3, r3, #3
 800d290:	440b      	add	r3, r1
 800d292:	3314      	adds	r3, #20
 800d294:	2203      	movs	r2, #3
 800d296:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800d29e:	79fa      	ldrb	r2, [r7, #7]
 800d2a0:	4613      	mov	r3, r2
 800d2a2:	005b      	lsls	r3, r3, #1
 800d2a4:	4413      	add	r3, r2
 800d2a6:	00db      	lsls	r3, r3, #3
 800d2a8:	3308      	adds	r3, #8
 800d2aa:	4a08      	ldr	r2, [pc, #32]	@ (800d2cc <etharp_output_to_arp_index+0x124>)
 800d2ac:	4413      	add	r3, r2
 800d2ae:	3304      	adds	r3, #4
 800d2b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d2b4:	9200      	str	r2, [sp, #0]
 800d2b6:	460a      	mov	r2, r1
 800d2b8:	68b9      	ldr	r1, [r7, #8]
 800d2ba:	68f8      	ldr	r0, [r7, #12]
 800d2bc:	f001 fed0 	bl	800f060 <ethernet_output>
 800d2c0:	4603      	mov	r3, r0
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3710      	adds	r7, #16
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	2000833c 	.word	0x2000833c
 800d2d0:	08012a64 	.word	0x08012a64
 800d2d4:	08012bd4 	.word	0x08012bd4
 800d2d8:	08012adc 	.word	0x08012adc

0800d2dc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b08a      	sub	sp, #40	@ 0x28
 800d2e0:	af02      	add	r7, sp, #8
 800d2e2:	60f8      	str	r0, [r7, #12]
 800d2e4:	60b9      	str	r1, [r7, #8]
 800d2e6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d106      	bne.n	800d300 <etharp_output+0x24>
 800d2f2:	4b73      	ldr	r3, [pc, #460]	@ (800d4c0 <etharp_output+0x1e4>)
 800d2f4:	f240 321e 	movw	r2, #798	@ 0x31e
 800d2f8:	4972      	ldr	r1, [pc, #456]	@ (800d4c4 <etharp_output+0x1e8>)
 800d2fa:	4873      	ldr	r0, [pc, #460]	@ (800d4c8 <etharp_output+0x1ec>)
 800d2fc:	f002 f82e 	bl	800f35c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d106      	bne.n	800d314 <etharp_output+0x38>
 800d306:	4b6e      	ldr	r3, [pc, #440]	@ (800d4c0 <etharp_output+0x1e4>)
 800d308:	f240 321f 	movw	r2, #799	@ 0x31f
 800d30c:	496f      	ldr	r1, [pc, #444]	@ (800d4cc <etharp_output+0x1f0>)
 800d30e:	486e      	ldr	r0, [pc, #440]	@ (800d4c8 <etharp_output+0x1ec>)
 800d310:	f002 f824 	bl	800f35c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d106      	bne.n	800d328 <etharp_output+0x4c>
 800d31a:	4b69      	ldr	r3, [pc, #420]	@ (800d4c0 <etharp_output+0x1e4>)
 800d31c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800d320:	496b      	ldr	r1, [pc, #428]	@ (800d4d0 <etharp_output+0x1f4>)
 800d322:	4869      	ldr	r0, [pc, #420]	@ (800d4c8 <etharp_output+0x1ec>)
 800d324:	f002 f81a 	bl	800f35c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	68f9      	ldr	r1, [r7, #12]
 800d32e:	4618      	mov	r0, r3
 800d330:	f000 fef8 	bl	800e124 <ip4_addr_isbroadcast_u32>
 800d334:	4603      	mov	r3, r0
 800d336:	2b00      	cmp	r3, #0
 800d338:	d002      	beq.n	800d340 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d33a:	4b66      	ldr	r3, [pc, #408]	@ (800d4d4 <etharp_output+0x1f8>)
 800d33c:	61fb      	str	r3, [r7, #28]
 800d33e:	e0af      	b.n	800d4a0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d348:	2be0      	cmp	r3, #224	@ 0xe0
 800d34a:	d118      	bne.n	800d37e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d34c:	2301      	movs	r3, #1
 800d34e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d350:	2300      	movs	r3, #0
 800d352:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d354:	235e      	movs	r3, #94	@ 0x5e
 800d356:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	3301      	adds	r3, #1
 800d35c:	781b      	ldrb	r3, [r3, #0]
 800d35e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d362:	b2db      	uxtb	r3, r3
 800d364:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	3302      	adds	r3, #2
 800d36a:	781b      	ldrb	r3, [r3, #0]
 800d36c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	3303      	adds	r3, #3
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d376:	f107 0310 	add.w	r3, r7, #16
 800d37a:	61fb      	str	r3, [r7, #28]
 800d37c:	e090      	b.n	800d4a0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681a      	ldr	r2, [r3, #0]
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	3304      	adds	r3, #4
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	405a      	eors	r2, r3
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	3308      	adds	r3, #8
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	4013      	ands	r3, r2
 800d392:	2b00      	cmp	r3, #0
 800d394:	d012      	beq.n	800d3bc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d39c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800d3a0:	4293      	cmp	r3, r2
 800d3a2:	d00b      	beq.n	800d3bc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	330c      	adds	r3, #12
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d003      	beq.n	800d3b6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	330c      	adds	r3, #12
 800d3b2:	61bb      	str	r3, [r7, #24]
 800d3b4:	e002      	b.n	800d3bc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d3b6:	f06f 0303 	mvn.w	r3, #3
 800d3ba:	e07d      	b.n	800d4b8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d3bc:	4b46      	ldr	r3, [pc, #280]	@ (800d4d8 <etharp_output+0x1fc>)
 800d3be:	781b      	ldrb	r3, [r3, #0]
 800d3c0:	4619      	mov	r1, r3
 800d3c2:	4a46      	ldr	r2, [pc, #280]	@ (800d4dc <etharp_output+0x200>)
 800d3c4:	460b      	mov	r3, r1
 800d3c6:	005b      	lsls	r3, r3, #1
 800d3c8:	440b      	add	r3, r1
 800d3ca:	00db      	lsls	r3, r3, #3
 800d3cc:	4413      	add	r3, r2
 800d3ce:	3314      	adds	r3, #20
 800d3d0:	781b      	ldrb	r3, [r3, #0]
 800d3d2:	2b01      	cmp	r3, #1
 800d3d4:	d925      	bls.n	800d422 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d3d6:	4b40      	ldr	r3, [pc, #256]	@ (800d4d8 <etharp_output+0x1fc>)
 800d3d8:	781b      	ldrb	r3, [r3, #0]
 800d3da:	4619      	mov	r1, r3
 800d3dc:	4a3f      	ldr	r2, [pc, #252]	@ (800d4dc <etharp_output+0x200>)
 800d3de:	460b      	mov	r3, r1
 800d3e0:	005b      	lsls	r3, r3, #1
 800d3e2:	440b      	add	r3, r1
 800d3e4:	00db      	lsls	r3, r3, #3
 800d3e6:	4413      	add	r3, r2
 800d3e8:	3308      	adds	r3, #8
 800d3ea:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d3ec:	68fa      	ldr	r2, [r7, #12]
 800d3ee:	429a      	cmp	r2, r3
 800d3f0:	d117      	bne.n	800d422 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d3f2:	69bb      	ldr	r3, [r7, #24]
 800d3f4:	681a      	ldr	r2, [r3, #0]
 800d3f6:	4b38      	ldr	r3, [pc, #224]	@ (800d4d8 <etharp_output+0x1fc>)
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	4937      	ldr	r1, [pc, #220]	@ (800d4dc <etharp_output+0x200>)
 800d3fe:	4603      	mov	r3, r0
 800d400:	005b      	lsls	r3, r3, #1
 800d402:	4403      	add	r3, r0
 800d404:	00db      	lsls	r3, r3, #3
 800d406:	440b      	add	r3, r1
 800d408:	3304      	adds	r3, #4
 800d40a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d108      	bne.n	800d422 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d410:	4b31      	ldr	r3, [pc, #196]	@ (800d4d8 <etharp_output+0x1fc>)
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	461a      	mov	r2, r3
 800d416:	68b9      	ldr	r1, [r7, #8]
 800d418:	68f8      	ldr	r0, [r7, #12]
 800d41a:	f7ff fec5 	bl	800d1a8 <etharp_output_to_arp_index>
 800d41e:	4603      	mov	r3, r0
 800d420:	e04a      	b.n	800d4b8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d422:	2300      	movs	r3, #0
 800d424:	75fb      	strb	r3, [r7, #23]
 800d426:	e031      	b.n	800d48c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d428:	7dfa      	ldrb	r2, [r7, #23]
 800d42a:	492c      	ldr	r1, [pc, #176]	@ (800d4dc <etharp_output+0x200>)
 800d42c:	4613      	mov	r3, r2
 800d42e:	005b      	lsls	r3, r3, #1
 800d430:	4413      	add	r3, r2
 800d432:	00db      	lsls	r3, r3, #3
 800d434:	440b      	add	r3, r1
 800d436:	3314      	adds	r3, #20
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	2b01      	cmp	r3, #1
 800d43c:	d923      	bls.n	800d486 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d43e:	7dfa      	ldrb	r2, [r7, #23]
 800d440:	4926      	ldr	r1, [pc, #152]	@ (800d4dc <etharp_output+0x200>)
 800d442:	4613      	mov	r3, r2
 800d444:	005b      	lsls	r3, r3, #1
 800d446:	4413      	add	r3, r2
 800d448:	00db      	lsls	r3, r3, #3
 800d44a:	440b      	add	r3, r1
 800d44c:	3308      	adds	r3, #8
 800d44e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d450:	68fa      	ldr	r2, [r7, #12]
 800d452:	429a      	cmp	r2, r3
 800d454:	d117      	bne.n	800d486 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d456:	69bb      	ldr	r3, [r7, #24]
 800d458:	6819      	ldr	r1, [r3, #0]
 800d45a:	7dfa      	ldrb	r2, [r7, #23]
 800d45c:	481f      	ldr	r0, [pc, #124]	@ (800d4dc <etharp_output+0x200>)
 800d45e:	4613      	mov	r3, r2
 800d460:	005b      	lsls	r3, r3, #1
 800d462:	4413      	add	r3, r2
 800d464:	00db      	lsls	r3, r3, #3
 800d466:	4403      	add	r3, r0
 800d468:	3304      	adds	r3, #4
 800d46a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d46c:	4299      	cmp	r1, r3
 800d46e:	d10a      	bne.n	800d486 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d470:	4a19      	ldr	r2, [pc, #100]	@ (800d4d8 <etharp_output+0x1fc>)
 800d472:	7dfb      	ldrb	r3, [r7, #23]
 800d474:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d476:	7dfb      	ldrb	r3, [r7, #23]
 800d478:	461a      	mov	r2, r3
 800d47a:	68b9      	ldr	r1, [r7, #8]
 800d47c:	68f8      	ldr	r0, [r7, #12]
 800d47e:	f7ff fe93 	bl	800d1a8 <etharp_output_to_arp_index>
 800d482:	4603      	mov	r3, r0
 800d484:	e018      	b.n	800d4b8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d486:	7dfb      	ldrb	r3, [r7, #23]
 800d488:	3301      	adds	r3, #1
 800d48a:	75fb      	strb	r3, [r7, #23]
 800d48c:	7dfb      	ldrb	r3, [r7, #23]
 800d48e:	2b09      	cmp	r3, #9
 800d490:	d9ca      	bls.n	800d428 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d492:	68ba      	ldr	r2, [r7, #8]
 800d494:	69b9      	ldr	r1, [r7, #24]
 800d496:	68f8      	ldr	r0, [r7, #12]
 800d498:	f000 f822 	bl	800d4e0 <etharp_query>
 800d49c:	4603      	mov	r3, r0
 800d49e:	e00b      	b.n	800d4b8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800d4a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d4aa:	9300      	str	r3, [sp, #0]
 800d4ac:	69fb      	ldr	r3, [r7, #28]
 800d4ae:	68b9      	ldr	r1, [r7, #8]
 800d4b0:	68f8      	ldr	r0, [r7, #12]
 800d4b2:	f001 fdd5 	bl	800f060 <ethernet_output>
 800d4b6:	4603      	mov	r3, r0
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3720      	adds	r7, #32
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}
 800d4c0:	08012a64 	.word	0x08012a64
 800d4c4:	08012bb4 	.word	0x08012bb4
 800d4c8:	08012adc 	.word	0x08012adc
 800d4cc:	08012c04 	.word	0x08012c04
 800d4d0:	08012ba4 	.word	0x08012ba4
 800d4d4:	08013220 	.word	0x08013220
 800d4d8:	2000842c 	.word	0x2000842c
 800d4dc:	2000833c 	.word	0x2000833c

0800d4e0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b08c      	sub	sp, #48	@ 0x30
 800d4e4:	af02      	add	r7, sp, #8
 800d4e6:	60f8      	str	r0, [r7, #12]
 800d4e8:	60b9      	str	r1, [r7, #8]
 800d4ea:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	3326      	adds	r3, #38	@ 0x26
 800d4f0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d4f2:	23ff      	movs	r3, #255	@ 0xff
 800d4f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	68f9      	ldr	r1, [r7, #12]
 800d502:	4618      	mov	r0, r3
 800d504:	f000 fe0e 	bl	800e124 <ip4_addr_isbroadcast_u32>
 800d508:	4603      	mov	r3, r0
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d10c      	bne.n	800d528 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d516:	2be0      	cmp	r3, #224	@ 0xe0
 800d518:	d006      	beq.n	800d528 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d003      	beq.n	800d528 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d102      	bne.n	800d52e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d528:	f06f 030f 	mvn.w	r3, #15
 800d52c:	e101      	b.n	800d732 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d52e:	68fa      	ldr	r2, [r7, #12]
 800d530:	2101      	movs	r1, #1
 800d532:	68b8      	ldr	r0, [r7, #8]
 800d534:	f7ff fb60 	bl	800cbf8 <etharp_find_entry>
 800d538:	4603      	mov	r3, r0
 800d53a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d53c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d540:	2b00      	cmp	r3, #0
 800d542:	da02      	bge.n	800d54a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d544:	8a7b      	ldrh	r3, [r7, #18]
 800d546:	b25b      	sxtb	r3, r3
 800d548:	e0f3      	b.n	800d732 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d54a:	8a7b      	ldrh	r3, [r7, #18]
 800d54c:	2b7e      	cmp	r3, #126	@ 0x7e
 800d54e:	d906      	bls.n	800d55e <etharp_query+0x7e>
 800d550:	4b7a      	ldr	r3, [pc, #488]	@ (800d73c <etharp_query+0x25c>)
 800d552:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800d556:	497a      	ldr	r1, [pc, #488]	@ (800d740 <etharp_query+0x260>)
 800d558:	487a      	ldr	r0, [pc, #488]	@ (800d744 <etharp_query+0x264>)
 800d55a:	f001 feff 	bl	800f35c <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d55e:	8a7b      	ldrh	r3, [r7, #18]
 800d560:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d562:	7c7a      	ldrb	r2, [r7, #17]
 800d564:	4978      	ldr	r1, [pc, #480]	@ (800d748 <etharp_query+0x268>)
 800d566:	4613      	mov	r3, r2
 800d568:	005b      	lsls	r3, r3, #1
 800d56a:	4413      	add	r3, r2
 800d56c:	00db      	lsls	r3, r3, #3
 800d56e:	440b      	add	r3, r1
 800d570:	3314      	adds	r3, #20
 800d572:	781b      	ldrb	r3, [r3, #0]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d115      	bne.n	800d5a4 <etharp_query+0xc4>
    is_new_entry = 1;
 800d578:	2301      	movs	r3, #1
 800d57a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d57c:	7c7a      	ldrb	r2, [r7, #17]
 800d57e:	4972      	ldr	r1, [pc, #456]	@ (800d748 <etharp_query+0x268>)
 800d580:	4613      	mov	r3, r2
 800d582:	005b      	lsls	r3, r3, #1
 800d584:	4413      	add	r3, r2
 800d586:	00db      	lsls	r3, r3, #3
 800d588:	440b      	add	r3, r1
 800d58a:	3314      	adds	r3, #20
 800d58c:	2201      	movs	r2, #1
 800d58e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d590:	7c7a      	ldrb	r2, [r7, #17]
 800d592:	496d      	ldr	r1, [pc, #436]	@ (800d748 <etharp_query+0x268>)
 800d594:	4613      	mov	r3, r2
 800d596:	005b      	lsls	r3, r3, #1
 800d598:	4413      	add	r3, r2
 800d59a:	00db      	lsls	r3, r3, #3
 800d59c:	440b      	add	r3, r1
 800d59e:	3308      	adds	r3, #8
 800d5a0:	68fa      	ldr	r2, [r7, #12]
 800d5a2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d5a4:	7c7a      	ldrb	r2, [r7, #17]
 800d5a6:	4968      	ldr	r1, [pc, #416]	@ (800d748 <etharp_query+0x268>)
 800d5a8:	4613      	mov	r3, r2
 800d5aa:	005b      	lsls	r3, r3, #1
 800d5ac:	4413      	add	r3, r2
 800d5ae:	00db      	lsls	r3, r3, #3
 800d5b0:	440b      	add	r3, r1
 800d5b2:	3314      	adds	r3, #20
 800d5b4:	781b      	ldrb	r3, [r3, #0]
 800d5b6:	2b01      	cmp	r3, #1
 800d5b8:	d011      	beq.n	800d5de <etharp_query+0xfe>
 800d5ba:	7c7a      	ldrb	r2, [r7, #17]
 800d5bc:	4962      	ldr	r1, [pc, #392]	@ (800d748 <etharp_query+0x268>)
 800d5be:	4613      	mov	r3, r2
 800d5c0:	005b      	lsls	r3, r3, #1
 800d5c2:	4413      	add	r3, r2
 800d5c4:	00db      	lsls	r3, r3, #3
 800d5c6:	440b      	add	r3, r1
 800d5c8:	3314      	adds	r3, #20
 800d5ca:	781b      	ldrb	r3, [r3, #0]
 800d5cc:	2b01      	cmp	r3, #1
 800d5ce:	d806      	bhi.n	800d5de <etharp_query+0xfe>
 800d5d0:	4b5a      	ldr	r3, [pc, #360]	@ (800d73c <etharp_query+0x25c>)
 800d5d2:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800d5d6:	495d      	ldr	r1, [pc, #372]	@ (800d74c <etharp_query+0x26c>)
 800d5d8:	485a      	ldr	r0, [pc, #360]	@ (800d744 <etharp_query+0x264>)
 800d5da:	f001 febf 	bl	800f35c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d5de:	6a3b      	ldr	r3, [r7, #32]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d102      	bne.n	800d5ea <etharp_query+0x10a>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d10c      	bne.n	800d604 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d5ea:	68b9      	ldr	r1, [r7, #8]
 800d5ec:	68f8      	ldr	r0, [r7, #12]
 800d5ee:	f000 f963 	bl	800d8b8 <etharp_request>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d102      	bne.n	800d604 <etharp_query+0x124>
      return result;
 800d5fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d602:	e096      	b.n	800d732 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d106      	bne.n	800d618 <etharp_query+0x138>
 800d60a:	4b4c      	ldr	r3, [pc, #304]	@ (800d73c <etharp_query+0x25c>)
 800d60c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800d610:	494f      	ldr	r1, [pc, #316]	@ (800d750 <etharp_query+0x270>)
 800d612:	484c      	ldr	r0, [pc, #304]	@ (800d744 <etharp_query+0x264>)
 800d614:	f001 fea2 	bl	800f35c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d618:	7c7a      	ldrb	r2, [r7, #17]
 800d61a:	494b      	ldr	r1, [pc, #300]	@ (800d748 <etharp_query+0x268>)
 800d61c:	4613      	mov	r3, r2
 800d61e:	005b      	lsls	r3, r3, #1
 800d620:	4413      	add	r3, r2
 800d622:	00db      	lsls	r3, r3, #3
 800d624:	440b      	add	r3, r1
 800d626:	3314      	adds	r3, #20
 800d628:	781b      	ldrb	r3, [r3, #0]
 800d62a:	2b01      	cmp	r3, #1
 800d62c:	d917      	bls.n	800d65e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d62e:	4a49      	ldr	r2, [pc, #292]	@ (800d754 <etharp_query+0x274>)
 800d630:	7c7b      	ldrb	r3, [r7, #17]
 800d632:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d634:	7c7a      	ldrb	r2, [r7, #17]
 800d636:	4613      	mov	r3, r2
 800d638:	005b      	lsls	r3, r3, #1
 800d63a:	4413      	add	r3, r2
 800d63c:	00db      	lsls	r3, r3, #3
 800d63e:	3308      	adds	r3, #8
 800d640:	4a41      	ldr	r2, [pc, #260]	@ (800d748 <etharp_query+0x268>)
 800d642:	4413      	add	r3, r2
 800d644:	3304      	adds	r3, #4
 800d646:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d64a:	9200      	str	r2, [sp, #0]
 800d64c:	697a      	ldr	r2, [r7, #20]
 800d64e:	6879      	ldr	r1, [r7, #4]
 800d650:	68f8      	ldr	r0, [r7, #12]
 800d652:	f001 fd05 	bl	800f060 <ethernet_output>
 800d656:	4603      	mov	r3, r0
 800d658:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d65c:	e067      	b.n	800d72e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d65e:	7c7a      	ldrb	r2, [r7, #17]
 800d660:	4939      	ldr	r1, [pc, #228]	@ (800d748 <etharp_query+0x268>)
 800d662:	4613      	mov	r3, r2
 800d664:	005b      	lsls	r3, r3, #1
 800d666:	4413      	add	r3, r2
 800d668:	00db      	lsls	r3, r3, #3
 800d66a:	440b      	add	r3, r1
 800d66c:	3314      	adds	r3, #20
 800d66e:	781b      	ldrb	r3, [r3, #0]
 800d670:	2b01      	cmp	r3, #1
 800d672:	d15c      	bne.n	800d72e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d674:	2300      	movs	r3, #0
 800d676:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d67c:	e01c      	b.n	800d6b8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d67e:	69fb      	ldr	r3, [r7, #28]
 800d680:	895a      	ldrh	r2, [r3, #10]
 800d682:	69fb      	ldr	r3, [r7, #28]
 800d684:	891b      	ldrh	r3, [r3, #8]
 800d686:	429a      	cmp	r2, r3
 800d688:	d10a      	bne.n	800d6a0 <etharp_query+0x1c0>
 800d68a:	69fb      	ldr	r3, [r7, #28]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d006      	beq.n	800d6a0 <etharp_query+0x1c0>
 800d692:	4b2a      	ldr	r3, [pc, #168]	@ (800d73c <etharp_query+0x25c>)
 800d694:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800d698:	492f      	ldr	r1, [pc, #188]	@ (800d758 <etharp_query+0x278>)
 800d69a:	482a      	ldr	r0, [pc, #168]	@ (800d744 <etharp_query+0x264>)
 800d69c:	f001 fe5e 	bl	800f35c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d6a0:	69fb      	ldr	r3, [r7, #28]
 800d6a2:	7b1b      	ldrb	r3, [r3, #12]
 800d6a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d002      	beq.n	800d6b2 <etharp_query+0x1d2>
        copy_needed = 1;
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	61bb      	str	r3, [r7, #24]
        break;
 800d6b0:	e005      	b.n	800d6be <etharp_query+0x1de>
      }
      p = p->next;
 800d6b2:	69fb      	ldr	r3, [r7, #28]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d6b8:	69fb      	ldr	r3, [r7, #28]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d1df      	bne.n	800d67e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d6be:	69bb      	ldr	r3, [r7, #24]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d007      	beq.n	800d6d4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d6c4:	687a      	ldr	r2, [r7, #4]
 800d6c6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800d6ca:	200e      	movs	r0, #14
 800d6cc:	f7f8 ff2a 	bl	8006524 <pbuf_clone>
 800d6d0:	61f8      	str	r0, [r7, #28]
 800d6d2:	e004      	b.n	800d6de <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d6d8:	69f8      	ldr	r0, [r7, #28]
 800d6da:	f7f8 fd67 	bl	80061ac <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d6de:	69fb      	ldr	r3, [r7, #28]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d021      	beq.n	800d728 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d6e4:	7c7a      	ldrb	r2, [r7, #17]
 800d6e6:	4918      	ldr	r1, [pc, #96]	@ (800d748 <etharp_query+0x268>)
 800d6e8:	4613      	mov	r3, r2
 800d6ea:	005b      	lsls	r3, r3, #1
 800d6ec:	4413      	add	r3, r2
 800d6ee:	00db      	lsls	r3, r3, #3
 800d6f0:	440b      	add	r3, r1
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d00a      	beq.n	800d70e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d6f8:	7c7a      	ldrb	r2, [r7, #17]
 800d6fa:	4913      	ldr	r1, [pc, #76]	@ (800d748 <etharp_query+0x268>)
 800d6fc:	4613      	mov	r3, r2
 800d6fe:	005b      	lsls	r3, r3, #1
 800d700:	4413      	add	r3, r2
 800d702:	00db      	lsls	r3, r3, #3
 800d704:	440b      	add	r3, r1
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	4618      	mov	r0, r3
 800d70a:	f7f8 fcaf 	bl	800606c <pbuf_free>
      }
      arp_table[i].q = p;
 800d70e:	7c7a      	ldrb	r2, [r7, #17]
 800d710:	490d      	ldr	r1, [pc, #52]	@ (800d748 <etharp_query+0x268>)
 800d712:	4613      	mov	r3, r2
 800d714:	005b      	lsls	r3, r3, #1
 800d716:	4413      	add	r3, r2
 800d718:	00db      	lsls	r3, r3, #3
 800d71a:	440b      	add	r3, r1
 800d71c:	69fa      	ldr	r2, [r7, #28]
 800d71e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d720:	2300      	movs	r3, #0
 800d722:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d726:	e002      	b.n	800d72e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d728:	23ff      	movs	r3, #255	@ 0xff
 800d72a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800d72e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800d732:	4618      	mov	r0, r3
 800d734:	3728      	adds	r7, #40	@ 0x28
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}
 800d73a:	bf00      	nop
 800d73c:	08012a64 	.word	0x08012a64
 800d740:	08012c10 	.word	0x08012c10
 800d744:	08012adc 	.word	0x08012adc
 800d748:	2000833c 	.word	0x2000833c
 800d74c:	08012c20 	.word	0x08012c20
 800d750:	08012c04 	.word	0x08012c04
 800d754:	2000842c 	.word	0x2000842c
 800d758:	08012c48 	.word	0x08012c48

0800d75c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b08a      	sub	sp, #40	@ 0x28
 800d760:	af02      	add	r7, sp, #8
 800d762:	60f8      	str	r0, [r7, #12]
 800d764:	60b9      	str	r1, [r7, #8]
 800d766:	607a      	str	r2, [r7, #4]
 800d768:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d76a:	2300      	movs	r3, #0
 800d76c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d106      	bne.n	800d782 <etharp_raw+0x26>
 800d774:	4b3a      	ldr	r3, [pc, #232]	@ (800d860 <etharp_raw+0x104>)
 800d776:	f240 4257 	movw	r2, #1111	@ 0x457
 800d77a:	493a      	ldr	r1, [pc, #232]	@ (800d864 <etharp_raw+0x108>)
 800d77c:	483a      	ldr	r0, [pc, #232]	@ (800d868 <etharp_raw+0x10c>)
 800d77e:	f001 fded 	bl	800f35c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d782:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d786:	211c      	movs	r1, #28
 800d788:	200e      	movs	r0, #14
 800d78a:	f7f8 f98b 	bl	8005aa4 <pbuf_alloc>
 800d78e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d790:	69bb      	ldr	r3, [r7, #24]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d102      	bne.n	800d79c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d796:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d79a:	e05d      	b.n	800d858 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d79c:	69bb      	ldr	r3, [r7, #24]
 800d79e:	895b      	ldrh	r3, [r3, #10]
 800d7a0:	2b1b      	cmp	r3, #27
 800d7a2:	d806      	bhi.n	800d7b2 <etharp_raw+0x56>
 800d7a4:	4b2e      	ldr	r3, [pc, #184]	@ (800d860 <etharp_raw+0x104>)
 800d7a6:	f240 4262 	movw	r2, #1122	@ 0x462
 800d7aa:	4930      	ldr	r1, [pc, #192]	@ (800d86c <etharp_raw+0x110>)
 800d7ac:	482e      	ldr	r0, [pc, #184]	@ (800d868 <etharp_raw+0x10c>)
 800d7ae:	f001 fdd5 	bl	800f35c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d7b2:	69bb      	ldr	r3, [r7, #24]
 800d7b4:	685b      	ldr	r3, [r3, #4]
 800d7b6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d7b8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f7f7 f8f8 	bl	80049b0 <lwip_htons>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	461a      	mov	r2, r3
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d7ce:	2b06      	cmp	r3, #6
 800d7d0:	d006      	beq.n	800d7e0 <etharp_raw+0x84>
 800d7d2:	4b23      	ldr	r3, [pc, #140]	@ (800d860 <etharp_raw+0x104>)
 800d7d4:	f240 4269 	movw	r2, #1129	@ 0x469
 800d7d8:	4925      	ldr	r1, [pc, #148]	@ (800d870 <etharp_raw+0x114>)
 800d7da:	4823      	ldr	r0, [pc, #140]	@ (800d868 <etharp_raw+0x10c>)
 800d7dc:	f001 fdbe 	bl	800f35c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	3308      	adds	r3, #8
 800d7e4:	2206      	movs	r2, #6
 800d7e6:	6839      	ldr	r1, [r7, #0]
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f001 fe22 	bl	800f432 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	3312      	adds	r3, #18
 800d7f2:	2206      	movs	r2, #6
 800d7f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f001 fe1b 	bl	800f432 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	330e      	adds	r3, #14
 800d800:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d802:	6812      	ldr	r2, [r2, #0]
 800d804:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	3318      	adds	r3, #24
 800d80a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d80c:	6812      	ldr	r2, [r2, #0]
 800d80e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	2200      	movs	r2, #0
 800d814:	701a      	strb	r2, [r3, #0]
 800d816:	2200      	movs	r2, #0
 800d818:	f042 0201 	orr.w	r2, r2, #1
 800d81c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	2200      	movs	r2, #0
 800d822:	f042 0208 	orr.w	r2, r2, #8
 800d826:	709a      	strb	r2, [r3, #2]
 800d828:	2200      	movs	r2, #0
 800d82a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	2206      	movs	r2, #6
 800d830:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	2204      	movs	r2, #4
 800d836:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d838:	f640 0306 	movw	r3, #2054	@ 0x806
 800d83c:	9300      	str	r3, [sp, #0]
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	68ba      	ldr	r2, [r7, #8]
 800d842:	69b9      	ldr	r1, [r7, #24]
 800d844:	68f8      	ldr	r0, [r7, #12]
 800d846:	f001 fc0b 	bl	800f060 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d84a:	69b8      	ldr	r0, [r7, #24]
 800d84c:	f7f8 fc0e 	bl	800606c <pbuf_free>
  p = NULL;
 800d850:	2300      	movs	r3, #0
 800d852:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d854:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3720      	adds	r7, #32
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}
 800d860:	08012a64 	.word	0x08012a64
 800d864:	08012bb4 	.word	0x08012bb4
 800d868:	08012adc 	.word	0x08012adc
 800d86c:	08012c64 	.word	0x08012c64
 800d870:	08012c98 	.word	0x08012c98

0800d874 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b088      	sub	sp, #32
 800d878:	af04      	add	r7, sp, #16
 800d87a:	60f8      	str	r0, [r7, #12]
 800d87c:	60b9      	str	r1, [r7, #8]
 800d87e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d890:	2201      	movs	r2, #1
 800d892:	9203      	str	r2, [sp, #12]
 800d894:	68ba      	ldr	r2, [r7, #8]
 800d896:	9202      	str	r2, [sp, #8]
 800d898:	4a06      	ldr	r2, [pc, #24]	@ (800d8b4 <etharp_request_dst+0x40>)
 800d89a:	9201      	str	r2, [sp, #4]
 800d89c:	9300      	str	r3, [sp, #0]
 800d89e:	4603      	mov	r3, r0
 800d8a0:	687a      	ldr	r2, [r7, #4]
 800d8a2:	68f8      	ldr	r0, [r7, #12]
 800d8a4:	f7ff ff5a 	bl	800d75c <etharp_raw>
 800d8a8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3710      	adds	r7, #16
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}
 800d8b2:	bf00      	nop
 800d8b4:	08013228 	.word	0x08013228

0800d8b8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b082      	sub	sp, #8
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d8c2:	4a05      	ldr	r2, [pc, #20]	@ (800d8d8 <etharp_request+0x20>)
 800d8c4:	6839      	ldr	r1, [r7, #0]
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f7ff ffd4 	bl	800d874 <etharp_request_dst>
 800d8cc:	4603      	mov	r3, r0
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3708      	adds	r7, #8
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}
 800d8d6:	bf00      	nop
 800d8d8:	08013220 	.word	0x08013220

0800d8dc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b08e      	sub	sp, #56	@ 0x38
 800d8e0:	af04      	add	r7, sp, #16
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d8e6:	4b79      	ldr	r3, [pc, #484]	@ (800dacc <icmp_input+0x1f0>)
 800d8e8:	689b      	ldr	r3, [r3, #8]
 800d8ea:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d8ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	f003 030f 	and.w	r3, r3, #15
 800d8f4:	b2db      	uxtb	r3, r3
 800d8f6:	009b      	lsls	r3, r3, #2
 800d8f8:	b2db      	uxtb	r3, r3
 800d8fa:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800d8fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d8fe:	2b13      	cmp	r3, #19
 800d900:	f240 80cd 	bls.w	800da9e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	895b      	ldrh	r3, [r3, #10]
 800d908:	2b03      	cmp	r3, #3
 800d90a:	f240 80ca 	bls.w	800daa2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	685b      	ldr	r3, [r3, #4]
 800d912:	781b      	ldrb	r3, [r3, #0]
 800d914:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d918:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	f000 80b7 	beq.w	800da90 <icmp_input+0x1b4>
 800d922:	2b08      	cmp	r3, #8
 800d924:	f040 80b7 	bne.w	800da96 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d928:	4b69      	ldr	r3, [pc, #420]	@ (800dad0 <icmp_input+0x1f4>)
 800d92a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d92c:	4b67      	ldr	r3, [pc, #412]	@ (800dacc <icmp_input+0x1f0>)
 800d92e:	695b      	ldr	r3, [r3, #20]
 800d930:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d934:	2be0      	cmp	r3, #224	@ 0xe0
 800d936:	f000 80bb 	beq.w	800dab0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d93a:	4b64      	ldr	r3, [pc, #400]	@ (800dacc <icmp_input+0x1f0>)
 800d93c:	695b      	ldr	r3, [r3, #20]
 800d93e:	4a63      	ldr	r2, [pc, #396]	@ (800dacc <icmp_input+0x1f0>)
 800d940:	6812      	ldr	r2, [r2, #0]
 800d942:	4611      	mov	r1, r2
 800d944:	4618      	mov	r0, r3
 800d946:	f000 fbed 	bl	800e124 <ip4_addr_isbroadcast_u32>
 800d94a:	4603      	mov	r3, r0
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	f040 80b1 	bne.w	800dab4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	891b      	ldrh	r3, [r3, #8]
 800d956:	2b07      	cmp	r3, #7
 800d958:	f240 80a5 	bls.w	800daa6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d95c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d95e:	330e      	adds	r3, #14
 800d960:	4619      	mov	r1, r3
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f7f8 faec 	bl	8005f40 <pbuf_add_header>
 800d968:	4603      	mov	r3, r0
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d04b      	beq.n	800da06 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	891a      	ldrh	r2, [r3, #8]
 800d972:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d974:	4413      	add	r3, r2
 800d976:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	891b      	ldrh	r3, [r3, #8]
 800d97c:	8b7a      	ldrh	r2, [r7, #26]
 800d97e:	429a      	cmp	r2, r3
 800d980:	f0c0 809a 	bcc.w	800dab8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d984:	8b7b      	ldrh	r3, [r7, #26]
 800d986:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d98a:	4619      	mov	r1, r3
 800d98c:	200e      	movs	r0, #14
 800d98e:	f7f8 f889 	bl	8005aa4 <pbuf_alloc>
 800d992:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	2b00      	cmp	r3, #0
 800d998:	f000 8090 	beq.w	800dabc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	895b      	ldrh	r3, [r3, #10]
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d9a4:	3308      	adds	r3, #8
 800d9a6:	429a      	cmp	r2, r3
 800d9a8:	d203      	bcs.n	800d9b2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d9aa:	6978      	ldr	r0, [r7, #20]
 800d9ac:	f7f8 fb5e 	bl	800606c <pbuf_free>
          goto icmperr;
 800d9b0:	e085      	b.n	800dabe <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	685b      	ldr	r3, [r3, #4]
 800d9b6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d9b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f001 fd39 	bl	800f432 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d9c0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	6978      	ldr	r0, [r7, #20]
 800d9c6:	f7f8 facb 	bl	8005f60 <pbuf_remove_header>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d009      	beq.n	800d9e4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d9d0:	4b40      	ldr	r3, [pc, #256]	@ (800dad4 <icmp_input+0x1f8>)
 800d9d2:	22b6      	movs	r2, #182	@ 0xb6
 800d9d4:	4940      	ldr	r1, [pc, #256]	@ (800dad8 <icmp_input+0x1fc>)
 800d9d6:	4841      	ldr	r0, [pc, #260]	@ (800dadc <icmp_input+0x200>)
 800d9d8:	f001 fcc0 	bl	800f35c <iprintf>
          pbuf_free(r);
 800d9dc:	6978      	ldr	r0, [r7, #20]
 800d9de:	f7f8 fb45 	bl	800606c <pbuf_free>
          goto icmperr;
 800d9e2:	e06c      	b.n	800dabe <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d9e4:	6879      	ldr	r1, [r7, #4]
 800d9e6:	6978      	ldr	r0, [r7, #20]
 800d9e8:	f7f8 fc58 	bl	800629c <pbuf_copy>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d003      	beq.n	800d9fa <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d9f2:	6978      	ldr	r0, [r7, #20]
 800d9f4:	f7f8 fb3a 	bl	800606c <pbuf_free>
          goto icmperr;
 800d9f8:	e061      	b.n	800dabe <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f7f8 fb36 	bl	800606c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	607b      	str	r3, [r7, #4]
 800da04:	e00f      	b.n	800da26 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800da06:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800da08:	330e      	adds	r3, #14
 800da0a:	4619      	mov	r1, r3
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f7f8 faa7 	bl	8005f60 <pbuf_remove_header>
 800da12:	4603      	mov	r3, r0
 800da14:	2b00      	cmp	r3, #0
 800da16:	d006      	beq.n	800da26 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800da18:	4b2e      	ldr	r3, [pc, #184]	@ (800dad4 <icmp_input+0x1f8>)
 800da1a:	22c7      	movs	r2, #199	@ 0xc7
 800da1c:	4930      	ldr	r1, [pc, #192]	@ (800dae0 <icmp_input+0x204>)
 800da1e:	482f      	ldr	r0, [pc, #188]	@ (800dadc <icmp_input+0x200>)
 800da20:	f001 fc9c 	bl	800f35c <iprintf>
          goto icmperr;
 800da24:	e04b      	b.n	800dabe <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	685b      	ldr	r3, [r3, #4]
 800da2a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800da2c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800da2e:	4619      	mov	r1, r3
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	f7f8 fa85 	bl	8005f40 <pbuf_add_header>
 800da36:	4603      	mov	r3, r0
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d12b      	bne.n	800da94 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	685b      	ldr	r3, [r3, #4]
 800da40:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800da42:	69fb      	ldr	r3, [r7, #28]
 800da44:	681a      	ldr	r2, [r3, #0]
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800da4a:	4b20      	ldr	r3, [pc, #128]	@ (800dacc <icmp_input+0x1f0>)
 800da4c:	691a      	ldr	r2, [r3, #16]
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	2200      	movs	r2, #0
 800da56:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800da58:	693b      	ldr	r3, [r7, #16]
 800da5a:	2200      	movs	r2, #0
 800da5c:	709a      	strb	r2, [r3, #2]
 800da5e:	2200      	movs	r2, #0
 800da60:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	22ff      	movs	r2, #255	@ 0xff
 800da66:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	2200      	movs	r2, #0
 800da6c:	729a      	strb	r2, [r3, #10]
 800da6e:	2200      	movs	r2, #0
 800da70:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	9302      	str	r3, [sp, #8]
 800da76:	2301      	movs	r3, #1
 800da78:	9301      	str	r3, [sp, #4]
 800da7a:	2300      	movs	r3, #0
 800da7c:	9300      	str	r3, [sp, #0]
 800da7e:	23ff      	movs	r3, #255	@ 0xff
 800da80:	2200      	movs	r2, #0
 800da82:	69f9      	ldr	r1, [r7, #28]
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f000 fa75 	bl	800df74 <ip4_output_if>
 800da8a:	4603      	mov	r3, r0
 800da8c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800da8e:	e001      	b.n	800da94 <icmp_input+0x1b8>
      break;
 800da90:	bf00      	nop
 800da92:	e000      	b.n	800da96 <icmp_input+0x1ba>
      break;
 800da94:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f7f8 fae8 	bl	800606c <pbuf_free>
  return;
 800da9c:	e013      	b.n	800dac6 <icmp_input+0x1ea>
    goto lenerr;
 800da9e:	bf00      	nop
 800daa0:	e002      	b.n	800daa8 <icmp_input+0x1cc>
    goto lenerr;
 800daa2:	bf00      	nop
 800daa4:	e000      	b.n	800daa8 <icmp_input+0x1cc>
        goto lenerr;
 800daa6:	bf00      	nop
lenerr:
  pbuf_free(p);
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f7f8 fadf 	bl	800606c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800daae:	e00a      	b.n	800dac6 <icmp_input+0x1ea>
        goto icmperr;
 800dab0:	bf00      	nop
 800dab2:	e004      	b.n	800dabe <icmp_input+0x1e2>
        goto icmperr;
 800dab4:	bf00      	nop
 800dab6:	e002      	b.n	800dabe <icmp_input+0x1e2>
          goto icmperr;
 800dab8:	bf00      	nop
 800daba:	e000      	b.n	800dabe <icmp_input+0x1e2>
          goto icmperr;
 800dabc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f7f8 fad4 	bl	800606c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dac4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800dac6:	3728      	adds	r7, #40	@ 0x28
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}
 800dacc:	20004d6c 	.word	0x20004d6c
 800dad0:	20004d80 	.word	0x20004d80
 800dad4:	08012cdc 	.word	0x08012cdc
 800dad8:	08012d14 	.word	0x08012d14
 800dadc:	08012d4c 	.word	0x08012d4c
 800dae0:	08012d74 	.word	0x08012d74

0800dae4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b082      	sub	sp, #8
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
 800daec:	460b      	mov	r3, r1
 800daee:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800daf0:	78fb      	ldrb	r3, [r7, #3]
 800daf2:	461a      	mov	r2, r3
 800daf4:	2103      	movs	r1, #3
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f000 f814 	bl	800db24 <icmp_send_response>
}
 800dafc:	bf00      	nop
 800dafe:	3708      	adds	r7, #8
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b082      	sub	sp, #8
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	460b      	mov	r3, r1
 800db0e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800db10:	78fb      	ldrb	r3, [r7, #3]
 800db12:	461a      	mov	r2, r3
 800db14:	210b      	movs	r1, #11
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	f000 f804 	bl	800db24 <icmp_send_response>
}
 800db1c:	bf00      	nop
 800db1e:	3708      	adds	r7, #8
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}

0800db24 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b08c      	sub	sp, #48	@ 0x30
 800db28:	af04      	add	r7, sp, #16
 800db2a:	6078      	str	r0, [r7, #4]
 800db2c:	460b      	mov	r3, r1
 800db2e:	70fb      	strb	r3, [r7, #3]
 800db30:	4613      	mov	r3, r2
 800db32:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800db34:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800db38:	2124      	movs	r1, #36	@ 0x24
 800db3a:	2022      	movs	r0, #34	@ 0x22
 800db3c:	f7f7 ffb2 	bl	8005aa4 <pbuf_alloc>
 800db40:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800db42:	69fb      	ldr	r3, [r7, #28]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d04c      	beq.n	800dbe2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800db48:	69fb      	ldr	r3, [r7, #28]
 800db4a:	895b      	ldrh	r3, [r3, #10]
 800db4c:	2b23      	cmp	r3, #35	@ 0x23
 800db4e:	d806      	bhi.n	800db5e <icmp_send_response+0x3a>
 800db50:	4b26      	ldr	r3, [pc, #152]	@ (800dbec <icmp_send_response+0xc8>)
 800db52:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800db56:	4926      	ldr	r1, [pc, #152]	@ (800dbf0 <icmp_send_response+0xcc>)
 800db58:	4826      	ldr	r0, [pc, #152]	@ (800dbf4 <icmp_send_response+0xd0>)
 800db5a:	f001 fbff 	bl	800f35c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	685b      	ldr	r3, [r3, #4]
 800db62:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800db64:	69fb      	ldr	r3, [r7, #28]
 800db66:	685b      	ldr	r3, [r3, #4]
 800db68:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	78fa      	ldrb	r2, [r7, #3]
 800db6e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	78ba      	ldrb	r2, [r7, #2]
 800db74:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800db76:	697b      	ldr	r3, [r7, #20]
 800db78:	2200      	movs	r2, #0
 800db7a:	711a      	strb	r2, [r3, #4]
 800db7c:	2200      	movs	r2, #0
 800db7e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	2200      	movs	r2, #0
 800db84:	719a      	strb	r2, [r3, #6]
 800db86:	2200      	movs	r2, #0
 800db88:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800db8a:	69fb      	ldr	r3, [r7, #28]
 800db8c:	685b      	ldr	r3, [r3, #4]
 800db8e:	f103 0008 	add.w	r0, r3, #8
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	221c      	movs	r2, #28
 800db98:	4619      	mov	r1, r3
 800db9a:	f001 fc4a 	bl	800f432 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800db9e:	69bb      	ldr	r3, [r7, #24]
 800dba0:	68db      	ldr	r3, [r3, #12]
 800dba2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800dba4:	f107 030c 	add.w	r3, r7, #12
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f000 f825 	bl	800dbf8 <ip4_route>
 800dbae:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d011      	beq.n	800dbda <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	709a      	strb	r2, [r3, #2]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800dbc0:	f107 020c 	add.w	r2, r7, #12
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	9302      	str	r3, [sp, #8]
 800dbc8:	2301      	movs	r3, #1
 800dbca:	9301      	str	r3, [sp, #4]
 800dbcc:	2300      	movs	r3, #0
 800dbce:	9300      	str	r3, [sp, #0]
 800dbd0:	23ff      	movs	r3, #255	@ 0xff
 800dbd2:	2100      	movs	r1, #0
 800dbd4:	69f8      	ldr	r0, [r7, #28]
 800dbd6:	f000 f9cd 	bl	800df74 <ip4_output_if>
  }
  pbuf_free(q);
 800dbda:	69f8      	ldr	r0, [r7, #28]
 800dbdc:	f7f8 fa46 	bl	800606c <pbuf_free>
 800dbe0:	e000      	b.n	800dbe4 <icmp_send_response+0xc0>
    return;
 800dbe2:	bf00      	nop
}
 800dbe4:	3720      	adds	r7, #32
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}
 800dbea:	bf00      	nop
 800dbec:	08012cdc 	.word	0x08012cdc
 800dbf0:	08012da8 	.word	0x08012da8
 800dbf4:	08012d4c 	.word	0x08012d4c

0800dbf8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b085      	sub	sp, #20
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800dc00:	4b33      	ldr	r3, [pc, #204]	@ (800dcd0 <ip4_route+0xd8>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	60fb      	str	r3, [r7, #12]
 800dc06:	e036      	b.n	800dc76 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dc0e:	f003 0301 	and.w	r3, r3, #1
 800dc12:	b2db      	uxtb	r3, r3
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d02b      	beq.n	800dc70 <ip4_route+0x78>
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dc1e:	089b      	lsrs	r3, r3, #2
 800dc20:	f003 0301 	and.w	r3, r3, #1
 800dc24:	b2db      	uxtb	r3, r3
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d022      	beq.n	800dc70 <ip4_route+0x78>
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	3304      	adds	r3, #4
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d01d      	beq.n	800dc70 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681a      	ldr	r2, [r3, #0]
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	3304      	adds	r3, #4
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	405a      	eors	r2, r3
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	3308      	adds	r3, #8
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	4013      	ands	r3, r2
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d101      	bne.n	800dc50 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	e038      	b.n	800dcc2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dc56:	f003 0302 	and.w	r3, r3, #2
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d108      	bne.n	800dc70 <ip4_route+0x78>
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681a      	ldr	r2, [r3, #0]
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	330c      	adds	r3, #12
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	d101      	bne.n	800dc70 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	e028      	b.n	800dcc2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	60fb      	str	r3, [r7, #12]
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d1c5      	bne.n	800dc08 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800dc7c:	4b15      	ldr	r3, [pc, #84]	@ (800dcd4 <ip4_route+0xdc>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d01a      	beq.n	800dcba <ip4_route+0xc2>
 800dc84:	4b13      	ldr	r3, [pc, #76]	@ (800dcd4 <ip4_route+0xdc>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dc8c:	f003 0301 	and.w	r3, r3, #1
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d012      	beq.n	800dcba <ip4_route+0xc2>
 800dc94:	4b0f      	ldr	r3, [pc, #60]	@ (800dcd4 <ip4_route+0xdc>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dc9c:	f003 0304 	and.w	r3, r3, #4
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d00a      	beq.n	800dcba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800dca4:	4b0b      	ldr	r3, [pc, #44]	@ (800dcd4 <ip4_route+0xdc>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	3304      	adds	r3, #4
 800dcaa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d004      	beq.n	800dcba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	b2db      	uxtb	r3, r3
 800dcb6:	2b7f      	cmp	r3, #127	@ 0x7f
 800dcb8:	d101      	bne.n	800dcbe <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	e001      	b.n	800dcc2 <ip4_route+0xca>
  }

  return netif_default;
 800dcbe:	4b05      	ldr	r3, [pc, #20]	@ (800dcd4 <ip4_route+0xdc>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	3714      	adds	r7, #20
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dccc:	4770      	bx	lr
 800dcce:	bf00      	nop
 800dcd0:	200082d0 	.word	0x200082d0
 800dcd4:	200082d4 	.word	0x200082d4

0800dcd8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b082      	sub	sp, #8
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dce6:	f003 0301 	and.w	r3, r3, #1
 800dcea:	b2db      	uxtb	r3, r3
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d016      	beq.n	800dd1e <ip4_input_accept+0x46>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	3304      	adds	r3, #4
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d011      	beq.n	800dd1e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800dcfa:	4b0b      	ldr	r3, [pc, #44]	@ (800dd28 <ip4_input_accept+0x50>)
 800dcfc:	695a      	ldr	r2, [r3, #20]
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	3304      	adds	r3, #4
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d008      	beq.n	800dd1a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800dd08:	4b07      	ldr	r3, [pc, #28]	@ (800dd28 <ip4_input_accept+0x50>)
 800dd0a:	695b      	ldr	r3, [r3, #20]
 800dd0c:	6879      	ldr	r1, [r7, #4]
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f000 fa08 	bl	800e124 <ip4_addr_isbroadcast_u32>
 800dd14:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d001      	beq.n	800dd1e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	e000      	b.n	800dd20 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800dd1e:	2300      	movs	r3, #0
}
 800dd20:	4618      	mov	r0, r3
 800dd22:	3708      	adds	r7, #8
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}
 800dd28:	20004d6c 	.word	0x20004d6c

0800dd2c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b086      	sub	sp, #24
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
 800dd34:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	685b      	ldr	r3, [r3, #4]
 800dd3a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	781b      	ldrb	r3, [r3, #0]
 800dd40:	091b      	lsrs	r3, r3, #4
 800dd42:	b2db      	uxtb	r3, r3
 800dd44:	2b04      	cmp	r3, #4
 800dd46:	d004      	beq.n	800dd52 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f7f8 f98f 	bl	800606c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	e107      	b.n	800df62 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800dd52:	697b      	ldr	r3, [r7, #20]
 800dd54:	781b      	ldrb	r3, [r3, #0]
 800dd56:	f003 030f 	and.w	r3, r3, #15
 800dd5a:	b2db      	uxtb	r3, r3
 800dd5c:	009b      	lsls	r3, r3, #2
 800dd5e:	b2db      	uxtb	r3, r3
 800dd60:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	885b      	ldrh	r3, [r3, #2]
 800dd66:	b29b      	uxth	r3, r3
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f7f6 fe21 	bl	80049b0 <lwip_htons>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	891b      	ldrh	r3, [r3, #8]
 800dd76:	89ba      	ldrh	r2, [r7, #12]
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	d204      	bcs.n	800dd86 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800dd7c:	89bb      	ldrh	r3, [r7, #12]
 800dd7e:	4619      	mov	r1, r3
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f7f7 ffed 	bl	8005d60 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	895b      	ldrh	r3, [r3, #10]
 800dd8a:	89fa      	ldrh	r2, [r7, #14]
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	d807      	bhi.n	800dda0 <ip4_input+0x74>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	891b      	ldrh	r3, [r3, #8]
 800dd94:	89ba      	ldrh	r2, [r7, #12]
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d802      	bhi.n	800dda0 <ip4_input+0x74>
 800dd9a:	89fb      	ldrh	r3, [r7, #14]
 800dd9c:	2b13      	cmp	r3, #19
 800dd9e:	d804      	bhi.n	800ddaa <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f7f8 f963 	bl	800606c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800dda6:	2300      	movs	r3, #0
 800dda8:	e0db      	b.n	800df62 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	691b      	ldr	r3, [r3, #16]
 800ddae:	4a6f      	ldr	r2, [pc, #444]	@ (800df6c <ip4_input+0x240>)
 800ddb0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	68db      	ldr	r3, [r3, #12]
 800ddb6:	4a6d      	ldr	r2, [pc, #436]	@ (800df6c <ip4_input+0x240>)
 800ddb8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ddba:	4b6c      	ldr	r3, [pc, #432]	@ (800df6c <ip4_input+0x240>)
 800ddbc:	695b      	ldr	r3, [r3, #20]
 800ddbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ddc2:	2be0      	cmp	r3, #224	@ 0xe0
 800ddc4:	d112      	bne.n	800ddec <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ddcc:	f003 0301 	and.w	r3, r3, #1
 800ddd0:	b2db      	uxtb	r3, r3
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d007      	beq.n	800dde6 <ip4_input+0xba>
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	3304      	adds	r3, #4
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d002      	beq.n	800dde6 <ip4_input+0xba>
      netif = inp;
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	613b      	str	r3, [r7, #16]
 800dde4:	e02a      	b.n	800de3c <ip4_input+0x110>
    } else {
      netif = NULL;
 800dde6:	2300      	movs	r3, #0
 800dde8:	613b      	str	r3, [r7, #16]
 800ddea:	e027      	b.n	800de3c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800ddec:	6838      	ldr	r0, [r7, #0]
 800ddee:	f7ff ff73 	bl	800dcd8 <ip4_input_accept>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d002      	beq.n	800ddfe <ip4_input+0xd2>
      netif = inp;
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	613b      	str	r3, [r7, #16]
 800ddfc:	e01e      	b.n	800de3c <ip4_input+0x110>
    } else {
      netif = NULL;
 800ddfe:	2300      	movs	r3, #0
 800de00:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800de02:	4b5a      	ldr	r3, [pc, #360]	@ (800df6c <ip4_input+0x240>)
 800de04:	695b      	ldr	r3, [r3, #20]
 800de06:	b2db      	uxtb	r3, r3
 800de08:	2b7f      	cmp	r3, #127	@ 0x7f
 800de0a:	d017      	beq.n	800de3c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800de0c:	4b58      	ldr	r3, [pc, #352]	@ (800df70 <ip4_input+0x244>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	613b      	str	r3, [r7, #16]
 800de12:	e00e      	b.n	800de32 <ip4_input+0x106>
          if (netif == inp) {
 800de14:	693a      	ldr	r2, [r7, #16]
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	429a      	cmp	r2, r3
 800de1a:	d006      	beq.n	800de2a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800de1c:	6938      	ldr	r0, [r7, #16]
 800de1e:	f7ff ff5b 	bl	800dcd8 <ip4_input_accept>
 800de22:	4603      	mov	r3, r0
 800de24:	2b00      	cmp	r3, #0
 800de26:	d108      	bne.n	800de3a <ip4_input+0x10e>
 800de28:	e000      	b.n	800de2c <ip4_input+0x100>
            continue;
 800de2a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	613b      	str	r3, [r7, #16]
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d1ed      	bne.n	800de14 <ip4_input+0xe8>
 800de38:	e000      	b.n	800de3c <ip4_input+0x110>
            break;
 800de3a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800de3c:	4b4b      	ldr	r3, [pc, #300]	@ (800df6c <ip4_input+0x240>)
 800de3e:	691b      	ldr	r3, [r3, #16]
 800de40:	6839      	ldr	r1, [r7, #0]
 800de42:	4618      	mov	r0, r3
 800de44:	f000 f96e 	bl	800e124 <ip4_addr_isbroadcast_u32>
 800de48:	4603      	mov	r3, r0
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d105      	bne.n	800de5a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800de4e:	4b47      	ldr	r3, [pc, #284]	@ (800df6c <ip4_input+0x240>)
 800de50:	691b      	ldr	r3, [r3, #16]
 800de52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800de56:	2be0      	cmp	r3, #224	@ 0xe0
 800de58:	d104      	bne.n	800de64 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f7f8 f906 	bl	800606c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800de60:	2300      	movs	r3, #0
 800de62:	e07e      	b.n	800df62 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d104      	bne.n	800de74 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f7f8 f8fe 	bl	800606c <pbuf_free>
    return ERR_OK;
 800de70:	2300      	movs	r3, #0
 800de72:	e076      	b.n	800df62 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	88db      	ldrh	r3, [r3, #6]
 800de78:	b29b      	uxth	r3, r3
 800de7a:	461a      	mov	r2, r3
 800de7c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800de80:	4013      	ands	r3, r2
 800de82:	2b00      	cmp	r3, #0
 800de84:	d00b      	beq.n	800de9e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f000 fd22 	bl	800e8d0 <ip4_reass>
 800de8c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d101      	bne.n	800de98 <ip4_input+0x16c>
      return ERR_OK;
 800de94:	2300      	movs	r3, #0
 800de96:	e064      	b.n	800df62 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	685b      	ldr	r3, [r3, #4]
 800de9c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800de9e:	4a33      	ldr	r2, [pc, #204]	@ (800df6c <ip4_input+0x240>)
 800dea0:	693b      	ldr	r3, [r7, #16]
 800dea2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800dea4:	4a31      	ldr	r2, [pc, #196]	@ (800df6c <ip4_input+0x240>)
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800deaa:	4a30      	ldr	r2, [pc, #192]	@ (800df6c <ip4_input+0x240>)
 800deac:	697b      	ldr	r3, [r7, #20]
 800deae:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	781b      	ldrb	r3, [r3, #0]
 800deb4:	f003 030f 	and.w	r3, r3, #15
 800deb8:	b2db      	uxtb	r3, r3
 800deba:	009b      	lsls	r3, r3, #2
 800debc:	b2db      	uxtb	r3, r3
 800debe:	461a      	mov	r2, r3
 800dec0:	4b2a      	ldr	r3, [pc, #168]	@ (800df6c <ip4_input+0x240>)
 800dec2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800dec4:	89fb      	ldrh	r3, [r7, #14]
 800dec6:	4619      	mov	r1, r3
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f7f8 f849 	bl	8005f60 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800dece:	697b      	ldr	r3, [r7, #20]
 800ded0:	7a5b      	ldrb	r3, [r3, #9]
 800ded2:	2b11      	cmp	r3, #17
 800ded4:	d006      	beq.n	800dee4 <ip4_input+0x1b8>
 800ded6:	2b11      	cmp	r3, #17
 800ded8:	dc13      	bgt.n	800df02 <ip4_input+0x1d6>
 800deda:	2b01      	cmp	r3, #1
 800dedc:	d00c      	beq.n	800def8 <ip4_input+0x1cc>
 800dede:	2b06      	cmp	r3, #6
 800dee0:	d005      	beq.n	800deee <ip4_input+0x1c2>
 800dee2:	e00e      	b.n	800df02 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800dee4:	6839      	ldr	r1, [r7, #0]
 800dee6:	6878      	ldr	r0, [r7, #4]
 800dee8:	f7fe fc68 	bl	800c7bc <udp_input>
        break;
 800deec:	e026      	b.n	800df3c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800deee:	6839      	ldr	r1, [r7, #0]
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f7fa f88f 	bl	8008014 <tcp_input>
        break;
 800def6:	e021      	b.n	800df3c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800def8:	6839      	ldr	r1, [r7, #0]
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f7ff fcee 	bl	800d8dc <icmp_input>
        break;
 800df00:	e01c      	b.n	800df3c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800df02:	4b1a      	ldr	r3, [pc, #104]	@ (800df6c <ip4_input+0x240>)
 800df04:	695b      	ldr	r3, [r3, #20]
 800df06:	6939      	ldr	r1, [r7, #16]
 800df08:	4618      	mov	r0, r3
 800df0a:	f000 f90b 	bl	800e124 <ip4_addr_isbroadcast_u32>
 800df0e:	4603      	mov	r3, r0
 800df10:	2b00      	cmp	r3, #0
 800df12:	d10f      	bne.n	800df34 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800df14:	4b15      	ldr	r3, [pc, #84]	@ (800df6c <ip4_input+0x240>)
 800df16:	695b      	ldr	r3, [r3, #20]
 800df18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800df1c:	2be0      	cmp	r3, #224	@ 0xe0
 800df1e:	d009      	beq.n	800df34 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800df20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800df24:	4619      	mov	r1, r3
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f7f8 f88d 	bl	8006046 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800df2c:	2102      	movs	r1, #2
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f7ff fdd8 	bl	800dae4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f7f8 f899 	bl	800606c <pbuf_free>
        break;
 800df3a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800df3c:	4b0b      	ldr	r3, [pc, #44]	@ (800df6c <ip4_input+0x240>)
 800df3e:	2200      	movs	r2, #0
 800df40:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800df42:	4b0a      	ldr	r3, [pc, #40]	@ (800df6c <ip4_input+0x240>)
 800df44:	2200      	movs	r2, #0
 800df46:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800df48:	4b08      	ldr	r3, [pc, #32]	@ (800df6c <ip4_input+0x240>)
 800df4a:	2200      	movs	r2, #0
 800df4c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800df4e:	4b07      	ldr	r3, [pc, #28]	@ (800df6c <ip4_input+0x240>)
 800df50:	2200      	movs	r2, #0
 800df52:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800df54:	4b05      	ldr	r3, [pc, #20]	@ (800df6c <ip4_input+0x240>)
 800df56:	2200      	movs	r2, #0
 800df58:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800df5a:	4b04      	ldr	r3, [pc, #16]	@ (800df6c <ip4_input+0x240>)
 800df5c:	2200      	movs	r2, #0
 800df5e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800df60:	2300      	movs	r3, #0
}
 800df62:	4618      	mov	r0, r3
 800df64:	3718      	adds	r7, #24
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}
 800df6a:	bf00      	nop
 800df6c:	20004d6c 	.word	0x20004d6c
 800df70:	200082d0 	.word	0x200082d0

0800df74 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b08a      	sub	sp, #40	@ 0x28
 800df78:	af04      	add	r7, sp, #16
 800df7a:	60f8      	str	r0, [r7, #12]
 800df7c:	60b9      	str	r1, [r7, #8]
 800df7e:	607a      	str	r2, [r7, #4]
 800df80:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d009      	beq.n	800dfa0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d003      	beq.n	800df9a <ip4_output_if+0x26>
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d102      	bne.n	800dfa0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800df9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df9c:	3304      	adds	r3, #4
 800df9e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800dfa0:	78fa      	ldrb	r2, [r7, #3]
 800dfa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfa4:	9302      	str	r3, [sp, #8]
 800dfa6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dfaa:	9301      	str	r3, [sp, #4]
 800dfac:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dfb0:	9300      	str	r3, [sp, #0]
 800dfb2:	4613      	mov	r3, r2
 800dfb4:	687a      	ldr	r2, [r7, #4]
 800dfb6:	6979      	ldr	r1, [r7, #20]
 800dfb8:	68f8      	ldr	r0, [r7, #12]
 800dfba:	f000 f805 	bl	800dfc8 <ip4_output_if_src>
 800dfbe:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3718      	adds	r7, #24
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b088      	sub	sp, #32
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	60f8      	str	r0, [r7, #12]
 800dfd0:	60b9      	str	r1, [r7, #8]
 800dfd2:	607a      	str	r2, [r7, #4]
 800dfd4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	7b9b      	ldrb	r3, [r3, #14]
 800dfda:	2b01      	cmp	r3, #1
 800dfdc:	d006      	beq.n	800dfec <ip4_output_if_src+0x24>
 800dfde:	4b4b      	ldr	r3, [pc, #300]	@ (800e10c <ip4_output_if_src+0x144>)
 800dfe0:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800dfe4:	494a      	ldr	r1, [pc, #296]	@ (800e110 <ip4_output_if_src+0x148>)
 800dfe6:	484b      	ldr	r0, [pc, #300]	@ (800e114 <ip4_output_if_src+0x14c>)
 800dfe8:	f001 f9b8 	bl	800f35c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d060      	beq.n	800e0b4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800dff2:	2314      	movs	r3, #20
 800dff4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800dff6:	2114      	movs	r1, #20
 800dff8:	68f8      	ldr	r0, [r7, #12]
 800dffa:	f7f7 ffa1 	bl	8005f40 <pbuf_add_header>
 800dffe:	4603      	mov	r3, r0
 800e000:	2b00      	cmp	r3, #0
 800e002:	d002      	beq.n	800e00a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e004:	f06f 0301 	mvn.w	r3, #1
 800e008:	e07c      	b.n	800e104 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	685b      	ldr	r3, [r3, #4]
 800e00e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	895b      	ldrh	r3, [r3, #10]
 800e014:	2b13      	cmp	r3, #19
 800e016:	d806      	bhi.n	800e026 <ip4_output_if_src+0x5e>
 800e018:	4b3c      	ldr	r3, [pc, #240]	@ (800e10c <ip4_output_if_src+0x144>)
 800e01a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800e01e:	493e      	ldr	r1, [pc, #248]	@ (800e118 <ip4_output_if_src+0x150>)
 800e020:	483c      	ldr	r0, [pc, #240]	@ (800e114 <ip4_output_if_src+0x14c>)
 800e022:	f001 f99b 	bl	800f35c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e026:	69fb      	ldr	r3, [r7, #28]
 800e028:	78fa      	ldrb	r2, [r7, #3]
 800e02a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e02c:	69fb      	ldr	r3, [r7, #28]
 800e02e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800e032:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681a      	ldr	r2, [r3, #0]
 800e038:	69fb      	ldr	r3, [r7, #28]
 800e03a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e03c:	8b7b      	ldrh	r3, [r7, #26]
 800e03e:	089b      	lsrs	r3, r3, #2
 800e040:	b29b      	uxth	r3, r3
 800e042:	b2db      	uxtb	r3, r3
 800e044:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e048:	b2da      	uxtb	r2, r3
 800e04a:	69fb      	ldr	r3, [r7, #28]
 800e04c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e04e:	69fb      	ldr	r3, [r7, #28]
 800e050:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800e054:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	891b      	ldrh	r3, [r3, #8]
 800e05a:	4618      	mov	r0, r3
 800e05c:	f7f6 fca8 	bl	80049b0 <lwip_htons>
 800e060:	4603      	mov	r3, r0
 800e062:	461a      	mov	r2, r3
 800e064:	69fb      	ldr	r3, [r7, #28]
 800e066:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e068:	69fb      	ldr	r3, [r7, #28]
 800e06a:	2200      	movs	r2, #0
 800e06c:	719a      	strb	r2, [r3, #6]
 800e06e:	2200      	movs	r2, #0
 800e070:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e072:	4b2a      	ldr	r3, [pc, #168]	@ (800e11c <ip4_output_if_src+0x154>)
 800e074:	881b      	ldrh	r3, [r3, #0]
 800e076:	4618      	mov	r0, r3
 800e078:	f7f6 fc9a 	bl	80049b0 <lwip_htons>
 800e07c:	4603      	mov	r3, r0
 800e07e:	461a      	mov	r2, r3
 800e080:	69fb      	ldr	r3, [r7, #28]
 800e082:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e084:	4b25      	ldr	r3, [pc, #148]	@ (800e11c <ip4_output_if_src+0x154>)
 800e086:	881b      	ldrh	r3, [r3, #0]
 800e088:	3301      	adds	r3, #1
 800e08a:	b29a      	uxth	r2, r3
 800e08c:	4b23      	ldr	r3, [pc, #140]	@ (800e11c <ip4_output_if_src+0x154>)
 800e08e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d104      	bne.n	800e0a0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e096:	4b22      	ldr	r3, [pc, #136]	@ (800e120 <ip4_output_if_src+0x158>)
 800e098:	681a      	ldr	r2, [r3, #0]
 800e09a:	69fb      	ldr	r3, [r7, #28]
 800e09c:	60da      	str	r2, [r3, #12]
 800e09e:	e003      	b.n	800e0a8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	681a      	ldr	r2, [r3, #0]
 800e0a4:	69fb      	ldr	r3, [r7, #28]
 800e0a6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e0a8:	69fb      	ldr	r3, [r7, #28]
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	729a      	strb	r2, [r3, #10]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	72da      	strb	r2, [r3, #11]
 800e0b2:	e00f      	b.n	800e0d4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	895b      	ldrh	r3, [r3, #10]
 800e0b8:	2b13      	cmp	r3, #19
 800e0ba:	d802      	bhi.n	800e0c2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e0bc:	f06f 0301 	mvn.w	r3, #1
 800e0c0:	e020      	b.n	800e104 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	685b      	ldr	r3, [r3, #4]
 800e0c6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e0c8:	69fb      	ldr	r3, [r7, #28]
 800e0ca:	691b      	ldr	r3, [r3, #16]
 800e0cc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e0ce:	f107 0314 	add.w	r3, r7, #20
 800e0d2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0d6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d00c      	beq.n	800e0f6 <ip4_output_if_src+0x12e>
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	891a      	ldrh	r2, [r3, #8]
 800e0e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0e2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d906      	bls.n	800e0f6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e0e8:	687a      	ldr	r2, [r7, #4]
 800e0ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e0ec:	68f8      	ldr	r0, [r7, #12]
 800e0ee:	f000 fde3 	bl	800ecb8 <ip4_frag>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	e006      	b.n	800e104 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0f8:	695b      	ldr	r3, [r3, #20]
 800e0fa:	687a      	ldr	r2, [r7, #4]
 800e0fc:	68f9      	ldr	r1, [r7, #12]
 800e0fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e100:	4798      	blx	r3
 800e102:	4603      	mov	r3, r0
}
 800e104:	4618      	mov	r0, r3
 800e106:	3720      	adds	r7, #32
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}
 800e10c:	08012dd4 	.word	0x08012dd4
 800e110:	08012e08 	.word	0x08012e08
 800e114:	08012e14 	.word	0x08012e14
 800e118:	08012e3c 	.word	0x08012e3c
 800e11c:	2000842e 	.word	0x2000842e
 800e120:	0801321c 	.word	0x0801321c

0800e124 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e124:	b480      	push	{r7}
 800e126:	b085      	sub	sp, #20
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e138:	d002      	beq.n	800e140 <ip4_addr_isbroadcast_u32+0x1c>
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d101      	bne.n	800e144 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e140:	2301      	movs	r3, #1
 800e142:	e02a      	b.n	800e19a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e14a:	f003 0302 	and.w	r3, r3, #2
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d101      	bne.n	800e156 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e152:	2300      	movs	r3, #0
 800e154:	e021      	b.n	800e19a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	3304      	adds	r3, #4
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	687a      	ldr	r2, [r7, #4]
 800e15e:	429a      	cmp	r2, r3
 800e160:	d101      	bne.n	800e166 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e162:	2300      	movs	r3, #0
 800e164:	e019      	b.n	800e19a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e166:	68fa      	ldr	r2, [r7, #12]
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	3304      	adds	r3, #4
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	405a      	eors	r2, r3
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	3308      	adds	r3, #8
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	4013      	ands	r3, r2
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d10d      	bne.n	800e198 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	3308      	adds	r3, #8
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	43da      	mvns	r2, r3
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	3308      	adds	r3, #8
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e190:	429a      	cmp	r2, r3
 800e192:	d101      	bne.n	800e198 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e194:	2301      	movs	r3, #1
 800e196:	e000      	b.n	800e19a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e198:	2300      	movs	r3, #0
  }
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3714      	adds	r7, #20
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr
	...

0800e1a8 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b082      	sub	sp, #8
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800e1b0:	2210      	movs	r2, #16
 800e1b2:	4904      	ldr	r1, [pc, #16]	@ (800e1c4 <ip4addr_ntoa+0x1c>)
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f000 f807 	bl	800e1c8 <ip4addr_ntoa_r>
 800e1ba:	4603      	mov	r3, r0
}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	3708      	adds	r7, #8
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}
 800e1c4:	20008430 	.word	0x20008430

0800e1c8 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800e1c8:	b480      	push	{r7}
 800e1ca:	b08d      	sub	sp, #52	@ 0x34
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	60f8      	str	r0, [r7, #12]
 800e1d0:	60b9      	str	r1, [r7, #8]
 800e1d2:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 800e1e2:	f107 0318 	add.w	r3, r7, #24
 800e1e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e1ee:	e058      	b.n	800e2a2 <ip4addr_ntoa_r+0xda>
    i = 0;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 800e1f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1f8:	781a      	ldrb	r2, [r3, #0]
 800e1fa:	4b32      	ldr	r3, [pc, #200]	@ (800e2c4 <ip4addr_ntoa_r+0xfc>)
 800e1fc:	fba3 1302 	umull	r1, r3, r3, r2
 800e200:	08d9      	lsrs	r1, r3, #3
 800e202:	460b      	mov	r3, r1
 800e204:	009b      	lsls	r3, r3, #2
 800e206:	440b      	add	r3, r1
 800e208:	005b      	lsls	r3, r3, #1
 800e20a:	1ad3      	subs	r3, r2, r3
 800e20c:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800e20e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e210:	781b      	ldrb	r3, [r3, #0]
 800e212:	4a2c      	ldr	r2, [pc, #176]	@ (800e2c4 <ip4addr_ntoa_r+0xfc>)
 800e214:	fba2 2303 	umull	r2, r3, r2, r3
 800e218:	08db      	lsrs	r3, r3, #3
 800e21a:	b2da      	uxtb	r2, r3
 800e21c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e21e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800e220:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e224:	1c5a      	adds	r2, r3, #1
 800e226:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 800e22a:	4619      	mov	r1, r3
 800e22c:	7ffb      	ldrb	r3, [r7, #31]
 800e22e:	3330      	adds	r3, #48	@ 0x30
 800e230:	b2da      	uxtb	r2, r3
 800e232:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 800e236:	443b      	add	r3, r7
 800e238:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800e23c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e23e:	781b      	ldrb	r3, [r3, #0]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d1d8      	bne.n	800e1f6 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800e244:	e011      	b.n	800e26a <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 800e246:	6a3b      	ldr	r3, [r7, #32]
 800e248:	1c5a      	adds	r2, r3, #1
 800e24a:	623a      	str	r2, [r7, #32]
 800e24c:	687a      	ldr	r2, [r7, #4]
 800e24e:	429a      	cmp	r2, r3
 800e250:	dc01      	bgt.n	800e256 <ip4addr_ntoa_r+0x8e>
        return NULL;
 800e252:	2300      	movs	r3, #0
 800e254:	e030      	b.n	800e2b8 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 800e256:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800e25a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e25c:	1c59      	adds	r1, r3, #1
 800e25e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800e260:	3230      	adds	r2, #48	@ 0x30
 800e262:	443a      	add	r2, r7
 800e264:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800e268:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800e26a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e26e:	1e5a      	subs	r2, r3, #1
 800e270:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 800e274:	2b00      	cmp	r3, #0
 800e276:	d1e6      	bne.n	800e246 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800e278:	6a3b      	ldr	r3, [r7, #32]
 800e27a:	1c5a      	adds	r2, r3, #1
 800e27c:	623a      	str	r2, [r7, #32]
 800e27e:	687a      	ldr	r2, [r7, #4]
 800e280:	429a      	cmp	r2, r3
 800e282:	dc01      	bgt.n	800e288 <ip4addr_ntoa_r+0xc0>
      return NULL;
 800e284:	2300      	movs	r3, #0
 800e286:	e017      	b.n	800e2b8 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 800e288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e28a:	1c5a      	adds	r2, r3, #1
 800e28c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e28e:	222e      	movs	r2, #46	@ 0x2e
 800e290:	701a      	strb	r2, [r3, #0]
    ap++;
 800e292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e294:	3301      	adds	r3, #1
 800e296:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 800e298:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e29c:	3301      	adds	r3, #1
 800e29e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e2a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e2a6:	2b03      	cmp	r3, #3
 800e2a8:	d9a2      	bls.n	800e1f0 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800e2aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ac:	3b01      	subs	r3, #1
 800e2ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e2b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	701a      	strb	r2, [r3, #0]
  return buf;
 800e2b6:	68bb      	ldr	r3, [r7, #8]
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3734      	adds	r7, #52	@ 0x34
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c2:	4770      	bx	lr
 800e2c4:	cccccccd 	.word	0xcccccccd

0800e2c8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b084      	sub	sp, #16
 800e2cc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e2d2:	4b12      	ldr	r3, [pc, #72]	@ (800e31c <ip_reass_tmr+0x54>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e2d8:	e018      	b.n	800e30c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	7fdb      	ldrb	r3, [r3, #31]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d00b      	beq.n	800e2fa <ip_reass_tmr+0x32>
      r->timer--;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	7fdb      	ldrb	r3, [r3, #31]
 800e2e6:	3b01      	subs	r3, #1
 800e2e8:	b2da      	uxtb	r2, r3
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	60fb      	str	r3, [r7, #12]
 800e2f8:	e008      	b.n	800e30c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e304:	68b9      	ldr	r1, [r7, #8]
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f000 f80a 	bl	800e320 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d1e3      	bne.n	800e2da <ip_reass_tmr+0x12>
    }
  }
}
 800e312:	bf00      	nop
 800e314:	bf00      	nop
 800e316:	3710      	adds	r7, #16
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}
 800e31c:	20008440 	.word	0x20008440

0800e320 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b088      	sub	sp, #32
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
 800e328:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e32a:	2300      	movs	r3, #0
 800e32c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e32e:	683a      	ldr	r2, [r7, #0]
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	429a      	cmp	r2, r3
 800e334:	d105      	bne.n	800e342 <ip_reass_free_complete_datagram+0x22>
 800e336:	4b45      	ldr	r3, [pc, #276]	@ (800e44c <ip_reass_free_complete_datagram+0x12c>)
 800e338:	22ab      	movs	r2, #171	@ 0xab
 800e33a:	4945      	ldr	r1, [pc, #276]	@ (800e450 <ip_reass_free_complete_datagram+0x130>)
 800e33c:	4845      	ldr	r0, [pc, #276]	@ (800e454 <ip_reass_free_complete_datagram+0x134>)
 800e33e:	f001 f80d 	bl	800f35c <iprintf>
  if (prev != NULL) {
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d00a      	beq.n	800e35e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	687a      	ldr	r2, [r7, #4]
 800e34e:	429a      	cmp	r2, r3
 800e350:	d005      	beq.n	800e35e <ip_reass_free_complete_datagram+0x3e>
 800e352:	4b3e      	ldr	r3, [pc, #248]	@ (800e44c <ip_reass_free_complete_datagram+0x12c>)
 800e354:	22ad      	movs	r2, #173	@ 0xad
 800e356:	4940      	ldr	r1, [pc, #256]	@ (800e458 <ip_reass_free_complete_datagram+0x138>)
 800e358:	483e      	ldr	r0, [pc, #248]	@ (800e454 <ip_reass_free_complete_datagram+0x134>)
 800e35a:	f000 ffff 	bl	800f35c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	685b      	ldr	r3, [r3, #4]
 800e362:	685b      	ldr	r3, [r3, #4]
 800e364:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e366:	697b      	ldr	r3, [r7, #20]
 800e368:	889b      	ldrh	r3, [r3, #4]
 800e36a:	b29b      	uxth	r3, r3
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d12a      	bne.n	800e3c6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	685b      	ldr	r3, [r3, #4]
 800e374:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e376:	697b      	ldr	r3, [r7, #20]
 800e378:	681a      	ldr	r2, [r3, #0]
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e37e:	69bb      	ldr	r3, [r7, #24]
 800e380:	6858      	ldr	r0, [r3, #4]
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	3308      	adds	r3, #8
 800e386:	2214      	movs	r2, #20
 800e388:	4619      	mov	r1, r3
 800e38a:	f001 f852 	bl	800f432 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e38e:	2101      	movs	r1, #1
 800e390:	69b8      	ldr	r0, [r7, #24]
 800e392:	f7ff fbb7 	bl	800db04 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e396:	69b8      	ldr	r0, [r7, #24]
 800e398:	f7f7 fef0 	bl	800617c <pbuf_clen>
 800e39c:	4603      	mov	r3, r0
 800e39e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e3a0:	8bfa      	ldrh	r2, [r7, #30]
 800e3a2:	8a7b      	ldrh	r3, [r7, #18]
 800e3a4:	4413      	add	r3, r2
 800e3a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e3aa:	db05      	blt.n	800e3b8 <ip_reass_free_complete_datagram+0x98>
 800e3ac:	4b27      	ldr	r3, [pc, #156]	@ (800e44c <ip_reass_free_complete_datagram+0x12c>)
 800e3ae:	22bc      	movs	r2, #188	@ 0xbc
 800e3b0:	492a      	ldr	r1, [pc, #168]	@ (800e45c <ip_reass_free_complete_datagram+0x13c>)
 800e3b2:	4828      	ldr	r0, [pc, #160]	@ (800e454 <ip_reass_free_complete_datagram+0x134>)
 800e3b4:	f000 ffd2 	bl	800f35c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e3b8:	8bfa      	ldrh	r2, [r7, #30]
 800e3ba:	8a7b      	ldrh	r3, [r7, #18]
 800e3bc:	4413      	add	r3, r2
 800e3be:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e3c0:	69b8      	ldr	r0, [r7, #24]
 800e3c2:	f7f7 fe53 	bl	800606c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	685b      	ldr	r3, [r3, #4]
 800e3ca:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e3cc:	e01f      	b.n	800e40e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e3ce:	69bb      	ldr	r3, [r7, #24]
 800e3d0:	685b      	ldr	r3, [r3, #4]
 800e3d2:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e3d4:	69bb      	ldr	r3, [r7, #24]
 800e3d6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e3de:	68f8      	ldr	r0, [r7, #12]
 800e3e0:	f7f7 fecc 	bl	800617c <pbuf_clen>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e3e8:	8bfa      	ldrh	r2, [r7, #30]
 800e3ea:	8a7b      	ldrh	r3, [r7, #18]
 800e3ec:	4413      	add	r3, r2
 800e3ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e3f2:	db05      	blt.n	800e400 <ip_reass_free_complete_datagram+0xe0>
 800e3f4:	4b15      	ldr	r3, [pc, #84]	@ (800e44c <ip_reass_free_complete_datagram+0x12c>)
 800e3f6:	22cc      	movs	r2, #204	@ 0xcc
 800e3f8:	4918      	ldr	r1, [pc, #96]	@ (800e45c <ip_reass_free_complete_datagram+0x13c>)
 800e3fa:	4816      	ldr	r0, [pc, #88]	@ (800e454 <ip_reass_free_complete_datagram+0x134>)
 800e3fc:	f000 ffae 	bl	800f35c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e400:	8bfa      	ldrh	r2, [r7, #30]
 800e402:	8a7b      	ldrh	r3, [r7, #18]
 800e404:	4413      	add	r3, r2
 800e406:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e408:	68f8      	ldr	r0, [r7, #12]
 800e40a:	f7f7 fe2f 	bl	800606c <pbuf_free>
  while (p != NULL) {
 800e40e:	69bb      	ldr	r3, [r7, #24]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d1dc      	bne.n	800e3ce <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e414:	6839      	ldr	r1, [r7, #0]
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f000 f8c2 	bl	800e5a0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e41c:	4b10      	ldr	r3, [pc, #64]	@ (800e460 <ip_reass_free_complete_datagram+0x140>)
 800e41e:	881b      	ldrh	r3, [r3, #0]
 800e420:	8bfa      	ldrh	r2, [r7, #30]
 800e422:	429a      	cmp	r2, r3
 800e424:	d905      	bls.n	800e432 <ip_reass_free_complete_datagram+0x112>
 800e426:	4b09      	ldr	r3, [pc, #36]	@ (800e44c <ip_reass_free_complete_datagram+0x12c>)
 800e428:	22d2      	movs	r2, #210	@ 0xd2
 800e42a:	490e      	ldr	r1, [pc, #56]	@ (800e464 <ip_reass_free_complete_datagram+0x144>)
 800e42c:	4809      	ldr	r0, [pc, #36]	@ (800e454 <ip_reass_free_complete_datagram+0x134>)
 800e42e:	f000 ff95 	bl	800f35c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e432:	4b0b      	ldr	r3, [pc, #44]	@ (800e460 <ip_reass_free_complete_datagram+0x140>)
 800e434:	881a      	ldrh	r2, [r3, #0]
 800e436:	8bfb      	ldrh	r3, [r7, #30]
 800e438:	1ad3      	subs	r3, r2, r3
 800e43a:	b29a      	uxth	r2, r3
 800e43c:	4b08      	ldr	r3, [pc, #32]	@ (800e460 <ip_reass_free_complete_datagram+0x140>)
 800e43e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e440:	8bfb      	ldrh	r3, [r7, #30]
}
 800e442:	4618      	mov	r0, r3
 800e444:	3720      	adds	r7, #32
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
 800e44a:	bf00      	nop
 800e44c:	08012e6c 	.word	0x08012e6c
 800e450:	08012ea8 	.word	0x08012ea8
 800e454:	08012eb4 	.word	0x08012eb4
 800e458:	08012edc 	.word	0x08012edc
 800e45c:	08012ef0 	.word	0x08012ef0
 800e460:	20008444 	.word	0x20008444
 800e464:	08012f10 	.word	0x08012f10

0800e468 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b08a      	sub	sp, #40	@ 0x28
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
 800e470:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e472:	2300      	movs	r3, #0
 800e474:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e476:	2300      	movs	r3, #0
 800e478:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e47a:	2300      	movs	r3, #0
 800e47c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e47e:	2300      	movs	r3, #0
 800e480:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e482:	2300      	movs	r3, #0
 800e484:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e486:	4b28      	ldr	r3, [pc, #160]	@ (800e528 <ip_reass_remove_oldest_datagram+0xc0>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800e48c:	e030      	b.n	800e4f0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e490:	695a      	ldr	r2, [r3, #20]
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	68db      	ldr	r3, [r3, #12]
 800e496:	429a      	cmp	r2, r3
 800e498:	d10c      	bne.n	800e4b4 <ip_reass_remove_oldest_datagram+0x4c>
 800e49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e49c:	699a      	ldr	r2, [r3, #24]
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	691b      	ldr	r3, [r3, #16]
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d106      	bne.n	800e4b4 <ip_reass_remove_oldest_datagram+0x4c>
 800e4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4a8:	899a      	ldrh	r2, [r3, #12]
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	889b      	ldrh	r3, [r3, #4]
 800e4ae:	b29b      	uxth	r3, r3
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d014      	beq.n	800e4de <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e4b4:	693b      	ldr	r3, [r7, #16]
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e4ba:	6a3b      	ldr	r3, [r7, #32]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d104      	bne.n	800e4ca <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4c2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e4c4:	69fb      	ldr	r3, [r7, #28]
 800e4c6:	61bb      	str	r3, [r7, #24]
 800e4c8:	e009      	b.n	800e4de <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4cc:	7fda      	ldrb	r2, [r3, #31]
 800e4ce:	6a3b      	ldr	r3, [r7, #32]
 800e4d0:	7fdb      	ldrb	r3, [r3, #31]
 800e4d2:	429a      	cmp	r2, r3
 800e4d4:	d803      	bhi.n	800e4de <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4d8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e4da:	69fb      	ldr	r3, [r7, #28]
 800e4dc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e4de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d001      	beq.n	800e4ea <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4e8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800e4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d1cb      	bne.n	800e48e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e4f6:	6a3b      	ldr	r3, [r7, #32]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d008      	beq.n	800e50e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e4fc:	69b9      	ldr	r1, [r7, #24]
 800e4fe:	6a38      	ldr	r0, [r7, #32]
 800e500:	f7ff ff0e 	bl	800e320 <ip_reass_free_complete_datagram>
 800e504:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e506:	697a      	ldr	r2, [r7, #20]
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	4413      	add	r3, r2
 800e50c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e50e:	697a      	ldr	r2, [r7, #20]
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	429a      	cmp	r2, r3
 800e514:	da02      	bge.n	800e51c <ip_reass_remove_oldest_datagram+0xb4>
 800e516:	693b      	ldr	r3, [r7, #16]
 800e518:	2b01      	cmp	r3, #1
 800e51a:	dcac      	bgt.n	800e476 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e51c:	697b      	ldr	r3, [r7, #20]
}
 800e51e:	4618      	mov	r0, r3
 800e520:	3728      	adds	r7, #40	@ 0x28
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
 800e526:	bf00      	nop
 800e528:	20008440 	.word	0x20008440

0800e52c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b084      	sub	sp, #16
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e536:	2004      	movs	r0, #4
 800e538:	f7f6 feb2 	bl	80052a0 <memp_malloc>
 800e53c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d110      	bne.n	800e566 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e544:	6839      	ldr	r1, [r7, #0]
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f7ff ff8e 	bl	800e468 <ip_reass_remove_oldest_datagram>
 800e54c:	4602      	mov	r2, r0
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	4293      	cmp	r3, r2
 800e552:	dc03      	bgt.n	800e55c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e554:	2004      	movs	r0, #4
 800e556:	f7f6 fea3 	bl	80052a0 <memp_malloc>
 800e55a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d101      	bne.n	800e566 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e562:	2300      	movs	r3, #0
 800e564:	e016      	b.n	800e594 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e566:	2220      	movs	r2, #32
 800e568:	2100      	movs	r1, #0
 800e56a:	68f8      	ldr	r0, [r7, #12]
 800e56c:	f000 ff32 	bl	800f3d4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	220f      	movs	r2, #15
 800e574:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e576:	4b09      	ldr	r3, [pc, #36]	@ (800e59c <ip_reass_enqueue_new_datagram+0x70>)
 800e578:	681a      	ldr	r2, [r3, #0]
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e57e:	4a07      	ldr	r2, [pc, #28]	@ (800e59c <ip_reass_enqueue_new_datagram+0x70>)
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	3308      	adds	r3, #8
 800e588:	2214      	movs	r2, #20
 800e58a:	6879      	ldr	r1, [r7, #4]
 800e58c:	4618      	mov	r0, r3
 800e58e:	f000 ff50 	bl	800f432 <memcpy>
  return ipr;
 800e592:	68fb      	ldr	r3, [r7, #12]
}
 800e594:	4618      	mov	r0, r3
 800e596:	3710      	adds	r7, #16
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}
 800e59c:	20008440 	.word	0x20008440

0800e5a0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b082      	sub	sp, #8
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
 800e5a8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e5aa:	4b10      	ldr	r3, [pc, #64]	@ (800e5ec <ip_reass_dequeue_datagram+0x4c>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	687a      	ldr	r2, [r7, #4]
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	d104      	bne.n	800e5be <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	4a0c      	ldr	r2, [pc, #48]	@ (800e5ec <ip_reass_dequeue_datagram+0x4c>)
 800e5ba:	6013      	str	r3, [r2, #0]
 800e5bc:	e00d      	b.n	800e5da <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d106      	bne.n	800e5d2 <ip_reass_dequeue_datagram+0x32>
 800e5c4:	4b0a      	ldr	r3, [pc, #40]	@ (800e5f0 <ip_reass_dequeue_datagram+0x50>)
 800e5c6:	f240 1245 	movw	r2, #325	@ 0x145
 800e5ca:	490a      	ldr	r1, [pc, #40]	@ (800e5f4 <ip_reass_dequeue_datagram+0x54>)
 800e5cc:	480a      	ldr	r0, [pc, #40]	@ (800e5f8 <ip_reass_dequeue_datagram+0x58>)
 800e5ce:	f000 fec5 	bl	800f35c <iprintf>
    prev->next = ipr->next;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681a      	ldr	r2, [r3, #0]
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e5da:	6879      	ldr	r1, [r7, #4]
 800e5dc:	2004      	movs	r0, #4
 800e5de:	f7f6 fecf 	bl	8005380 <memp_free>
}
 800e5e2:	bf00      	nop
 800e5e4:	3708      	adds	r7, #8
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}
 800e5ea:	bf00      	nop
 800e5ec:	20008440 	.word	0x20008440
 800e5f0:	08012e6c 	.word	0x08012e6c
 800e5f4:	08012f34 	.word	0x08012f34
 800e5f8:	08012eb4 	.word	0x08012eb4

0800e5fc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b08c      	sub	sp, #48	@ 0x30
 800e600:	af00      	add	r7, sp, #0
 800e602:	60f8      	str	r0, [r7, #12]
 800e604:	60b9      	str	r1, [r7, #8]
 800e606:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e608:	2300      	movs	r3, #0
 800e60a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e60c:	2301      	movs	r3, #1
 800e60e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	685b      	ldr	r3, [r3, #4]
 800e614:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e616:	69fb      	ldr	r3, [r7, #28]
 800e618:	885b      	ldrh	r3, [r3, #2]
 800e61a:	b29b      	uxth	r3, r3
 800e61c:	4618      	mov	r0, r3
 800e61e:	f7f6 f9c7 	bl	80049b0 <lwip_htons>
 800e622:	4603      	mov	r3, r0
 800e624:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e626:	69fb      	ldr	r3, [r7, #28]
 800e628:	781b      	ldrb	r3, [r3, #0]
 800e62a:	f003 030f 	and.w	r3, r3, #15
 800e62e:	b2db      	uxtb	r3, r3
 800e630:	009b      	lsls	r3, r3, #2
 800e632:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e634:	7e7b      	ldrb	r3, [r7, #25]
 800e636:	b29b      	uxth	r3, r3
 800e638:	8b7a      	ldrh	r2, [r7, #26]
 800e63a:	429a      	cmp	r2, r3
 800e63c:	d202      	bcs.n	800e644 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e63e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e642:	e135      	b.n	800e8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e644:	7e7b      	ldrb	r3, [r7, #25]
 800e646:	b29b      	uxth	r3, r3
 800e648:	8b7a      	ldrh	r2, [r7, #26]
 800e64a:	1ad3      	subs	r3, r2, r3
 800e64c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e64e:	69fb      	ldr	r3, [r7, #28]
 800e650:	88db      	ldrh	r3, [r3, #6]
 800e652:	b29b      	uxth	r3, r3
 800e654:	4618      	mov	r0, r3
 800e656:	f7f6 f9ab 	bl	80049b0 <lwip_htons>
 800e65a:	4603      	mov	r3, r0
 800e65c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e660:	b29b      	uxth	r3, r3
 800e662:	00db      	lsls	r3, r3, #3
 800e664:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	685b      	ldr	r3, [r3, #4]
 800e66a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800e66c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e66e:	2200      	movs	r2, #0
 800e670:	701a      	strb	r2, [r3, #0]
 800e672:	2200      	movs	r2, #0
 800e674:	705a      	strb	r2, [r3, #1]
 800e676:	2200      	movs	r2, #0
 800e678:	709a      	strb	r2, [r3, #2]
 800e67a:	2200      	movs	r2, #0
 800e67c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e67e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e680:	8afa      	ldrh	r2, [r7, #22]
 800e682:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e684:	8afa      	ldrh	r2, [r7, #22]
 800e686:	8b7b      	ldrh	r3, [r7, #26]
 800e688:	4413      	add	r3, r2
 800e68a:	b29a      	uxth	r2, r3
 800e68c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e68e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e692:	88db      	ldrh	r3, [r3, #6]
 800e694:	b29b      	uxth	r3, r3
 800e696:	8afa      	ldrh	r2, [r7, #22]
 800e698:	429a      	cmp	r2, r3
 800e69a:	d902      	bls.n	800e6a2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e69c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e6a0:	e106      	b.n	800e8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	685b      	ldr	r3, [r3, #4]
 800e6a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800e6a8:	e068      	b.n	800e77c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e6aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6ac:	685b      	ldr	r3, [r3, #4]
 800e6ae:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e6b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6b2:	889b      	ldrh	r3, [r3, #4]
 800e6b4:	b29a      	uxth	r2, r3
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	889b      	ldrh	r3, [r3, #4]
 800e6ba:	b29b      	uxth	r3, r3
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d235      	bcs.n	800e72c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e6c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e6c4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e6c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d020      	beq.n	800e70e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e6cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6ce:	889b      	ldrh	r3, [r3, #4]
 800e6d0:	b29a      	uxth	r2, r3
 800e6d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6d4:	88db      	ldrh	r3, [r3, #6]
 800e6d6:	b29b      	uxth	r3, r3
 800e6d8:	429a      	cmp	r2, r3
 800e6da:	d307      	bcc.n	800e6ec <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e6dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6de:	88db      	ldrh	r3, [r3, #6]
 800e6e0:	b29a      	uxth	r2, r3
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	889b      	ldrh	r3, [r3, #4]
 800e6e6:	b29b      	uxth	r3, r3
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	d902      	bls.n	800e6f2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e6ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e6f0:	e0de      	b.n	800e8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e6f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6f4:	68ba      	ldr	r2, [r7, #8]
 800e6f6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e6f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6fa:	88db      	ldrh	r3, [r3, #6]
 800e6fc:	b29a      	uxth	r2, r3
 800e6fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e700:	889b      	ldrh	r3, [r3, #4]
 800e702:	b29b      	uxth	r3, r3
 800e704:	429a      	cmp	r2, r3
 800e706:	d03d      	beq.n	800e784 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e708:	2300      	movs	r3, #0
 800e70a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e70c:	e03a      	b.n	800e784 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e70e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e710:	88db      	ldrh	r3, [r3, #6]
 800e712:	b29a      	uxth	r2, r3
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	889b      	ldrh	r3, [r3, #4]
 800e718:	b29b      	uxth	r3, r3
 800e71a:	429a      	cmp	r2, r3
 800e71c:	d902      	bls.n	800e724 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e71e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e722:	e0c5      	b.n	800e8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	68ba      	ldr	r2, [r7, #8]
 800e728:	605a      	str	r2, [r3, #4]
      break;
 800e72a:	e02b      	b.n	800e784 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e72c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e72e:	889b      	ldrh	r3, [r3, #4]
 800e730:	b29a      	uxth	r2, r3
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	889b      	ldrh	r3, [r3, #4]
 800e736:	b29b      	uxth	r3, r3
 800e738:	429a      	cmp	r2, r3
 800e73a:	d102      	bne.n	800e742 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e73c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e740:	e0b6      	b.n	800e8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e744:	889b      	ldrh	r3, [r3, #4]
 800e746:	b29a      	uxth	r2, r3
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	88db      	ldrh	r3, [r3, #6]
 800e74c:	b29b      	uxth	r3, r3
 800e74e:	429a      	cmp	r2, r3
 800e750:	d202      	bcs.n	800e758 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e752:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e756:	e0ab      	b.n	800e8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d009      	beq.n	800e772 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e75e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e760:	88db      	ldrh	r3, [r3, #6]
 800e762:	b29a      	uxth	r2, r3
 800e764:	693b      	ldr	r3, [r7, #16]
 800e766:	889b      	ldrh	r3, [r3, #4]
 800e768:	b29b      	uxth	r3, r3
 800e76a:	429a      	cmp	r2, r3
 800e76c:	d001      	beq.n	800e772 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e76e:	2300      	movs	r3, #0
 800e770:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800e77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d193      	bne.n	800e6aa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e782:	e000      	b.n	800e786 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e784:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d12d      	bne.n	800e7e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e78c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d01c      	beq.n	800e7cc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e794:	88db      	ldrh	r3, [r3, #6]
 800e796:	b29a      	uxth	r2, r3
 800e798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e79a:	889b      	ldrh	r3, [r3, #4]
 800e79c:	b29b      	uxth	r3, r3
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	d906      	bls.n	800e7b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e7a2:	4b45      	ldr	r3, [pc, #276]	@ (800e8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e7a4:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800e7a8:	4944      	ldr	r1, [pc, #272]	@ (800e8bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e7aa:	4845      	ldr	r0, [pc, #276]	@ (800e8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e7ac:	f000 fdd6 	bl	800f35c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e7b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7b2:	68ba      	ldr	r2, [r7, #8]
 800e7b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e7b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7b8:	88db      	ldrh	r3, [r3, #6]
 800e7ba:	b29a      	uxth	r2, r3
 800e7bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7be:	889b      	ldrh	r3, [r3, #4]
 800e7c0:	b29b      	uxth	r3, r3
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d010      	beq.n	800e7e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	623b      	str	r3, [r7, #32]
 800e7ca:	e00d      	b.n	800e7e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	685b      	ldr	r3, [r3, #4]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d006      	beq.n	800e7e2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e7d4:	4b38      	ldr	r3, [pc, #224]	@ (800e8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e7d6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800e7da:	493a      	ldr	r1, [pc, #232]	@ (800e8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e7dc:	4838      	ldr	r0, [pc, #224]	@ (800e8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e7de:	f000 fdbd 	bl	800f35c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	68ba      	ldr	r2, [r7, #8]
 800e7e6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d105      	bne.n	800e7fa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	7f9b      	ldrb	r3, [r3, #30]
 800e7f2:	f003 0301 	and.w	r3, r3, #1
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d059      	beq.n	800e8ae <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e7fa:	6a3b      	ldr	r3, [r7, #32]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d04f      	beq.n	800e8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	685b      	ldr	r3, [r3, #4]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d006      	beq.n	800e816 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	685b      	ldr	r3, [r3, #4]
 800e80c:	685b      	ldr	r3, [r3, #4]
 800e80e:	889b      	ldrh	r3, [r3, #4]
 800e810:	b29b      	uxth	r3, r3
 800e812:	2b00      	cmp	r3, #0
 800e814:	d002      	beq.n	800e81c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e816:	2300      	movs	r3, #0
 800e818:	623b      	str	r3, [r7, #32]
 800e81a:	e041      	b.n	800e8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e81c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e81e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800e820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800e826:	e012      	b.n	800e84e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e82a:	685b      	ldr	r3, [r3, #4]
 800e82c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800e82e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e830:	88db      	ldrh	r3, [r3, #6]
 800e832:	b29a      	uxth	r2, r3
 800e834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e836:	889b      	ldrh	r3, [r3, #4]
 800e838:	b29b      	uxth	r3, r3
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d002      	beq.n	800e844 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e83e:	2300      	movs	r3, #0
 800e840:	623b      	str	r3, [r7, #32]
            break;
 800e842:	e007      	b.n	800e854 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e846:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800e848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800e84e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e850:	2b00      	cmp	r3, #0
 800e852:	d1e9      	bne.n	800e828 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e854:	6a3b      	ldr	r3, [r7, #32]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d022      	beq.n	800e8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	685b      	ldr	r3, [r3, #4]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d106      	bne.n	800e870 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e862:	4b15      	ldr	r3, [pc, #84]	@ (800e8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e864:	f240 12df 	movw	r2, #479	@ 0x1df
 800e868:	4917      	ldr	r1, [pc, #92]	@ (800e8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e86a:	4815      	ldr	r0, [pc, #84]	@ (800e8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e86c:	f000 fd76 	bl	800f35c <iprintf>
          LWIP_ASSERT("sanity check",
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	685b      	ldr	r3, [r3, #4]
 800e874:	685b      	ldr	r3, [r3, #4]
 800e876:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e878:	429a      	cmp	r2, r3
 800e87a:	d106      	bne.n	800e88a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e87c:	4b0e      	ldr	r3, [pc, #56]	@ (800e8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e87e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800e882:	4911      	ldr	r1, [pc, #68]	@ (800e8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e884:	480e      	ldr	r0, [pc, #56]	@ (800e8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e886:	f000 fd69 	bl	800f35c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e88a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d006      	beq.n	800e8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e892:	4b09      	ldr	r3, [pc, #36]	@ (800e8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e894:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800e898:	490c      	ldr	r1, [pc, #48]	@ (800e8cc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e89a:	4809      	ldr	r0, [pc, #36]	@ (800e8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e89c:	f000 fd5e 	bl	800f35c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e8a0:	6a3b      	ldr	r3, [r7, #32]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	bf14      	ite	ne
 800e8a6:	2301      	movne	r3, #1
 800e8a8:	2300      	moveq	r3, #0
 800e8aa:	b2db      	uxtb	r3, r3
 800e8ac:	e000      	b.n	800e8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e8ae:	2300      	movs	r3, #0
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3730      	adds	r7, #48	@ 0x30
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}
 800e8b8:	08012e6c 	.word	0x08012e6c
 800e8bc:	08012f50 	.word	0x08012f50
 800e8c0:	08012eb4 	.word	0x08012eb4
 800e8c4:	08012f70 	.word	0x08012f70
 800e8c8:	08012fa8 	.word	0x08012fa8
 800e8cc:	08012fb8 	.word	0x08012fb8

0800e8d0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b08e      	sub	sp, #56	@ 0x38
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e8de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8e0:	781b      	ldrb	r3, [r3, #0]
 800e8e2:	f003 030f 	and.w	r3, r3, #15
 800e8e6:	b2db      	uxtb	r3, r3
 800e8e8:	009b      	lsls	r3, r3, #2
 800e8ea:	b2db      	uxtb	r3, r3
 800e8ec:	2b14      	cmp	r3, #20
 800e8ee:	f040 8171 	bne.w	800ebd4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e8f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8f4:	88db      	ldrh	r3, [r3, #6]
 800e8f6:	b29b      	uxth	r3, r3
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f7f6 f859 	bl	80049b0 <lwip_htons>
 800e8fe:	4603      	mov	r3, r0
 800e900:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e904:	b29b      	uxth	r3, r3
 800e906:	00db      	lsls	r3, r3, #3
 800e908:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e90a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e90c:	885b      	ldrh	r3, [r3, #2]
 800e90e:	b29b      	uxth	r3, r3
 800e910:	4618      	mov	r0, r3
 800e912:	f7f6 f84d 	bl	80049b0 <lwip_htons>
 800e916:	4603      	mov	r3, r0
 800e918:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e91a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e91c:	781b      	ldrb	r3, [r3, #0]
 800e91e:	f003 030f 	and.w	r3, r3, #15
 800e922:	b2db      	uxtb	r3, r3
 800e924:	009b      	lsls	r3, r3, #2
 800e926:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800e92a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e92e:	b29b      	uxth	r3, r3
 800e930:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e932:	429a      	cmp	r2, r3
 800e934:	f0c0 8150 	bcc.w	800ebd8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e938:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e93c:	b29b      	uxth	r3, r3
 800e93e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e940:	1ad3      	subs	r3, r2, r3
 800e942:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	f7f7 fc19 	bl	800617c <pbuf_clen>
 800e94a:	4603      	mov	r3, r0
 800e94c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e94e:	4b8c      	ldr	r3, [pc, #560]	@ (800eb80 <ip4_reass+0x2b0>)
 800e950:	881b      	ldrh	r3, [r3, #0]
 800e952:	461a      	mov	r2, r3
 800e954:	8c3b      	ldrh	r3, [r7, #32]
 800e956:	4413      	add	r3, r2
 800e958:	2b0a      	cmp	r3, #10
 800e95a:	dd10      	ble.n	800e97e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e95c:	8c3b      	ldrh	r3, [r7, #32]
 800e95e:	4619      	mov	r1, r3
 800e960:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e962:	f7ff fd81 	bl	800e468 <ip_reass_remove_oldest_datagram>
 800e966:	4603      	mov	r3, r0
 800e968:	2b00      	cmp	r3, #0
 800e96a:	f000 8137 	beq.w	800ebdc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e96e:	4b84      	ldr	r3, [pc, #528]	@ (800eb80 <ip4_reass+0x2b0>)
 800e970:	881b      	ldrh	r3, [r3, #0]
 800e972:	461a      	mov	r2, r3
 800e974:	8c3b      	ldrh	r3, [r7, #32]
 800e976:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e978:	2b0a      	cmp	r3, #10
 800e97a:	f300 812f 	bgt.w	800ebdc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e97e:	4b81      	ldr	r3, [pc, #516]	@ (800eb84 <ip4_reass+0x2b4>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	633b      	str	r3, [r7, #48]	@ 0x30
 800e984:	e015      	b.n	800e9b2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e988:	695a      	ldr	r2, [r3, #20]
 800e98a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e98c:	68db      	ldr	r3, [r3, #12]
 800e98e:	429a      	cmp	r2, r3
 800e990:	d10c      	bne.n	800e9ac <ip4_reass+0xdc>
 800e992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e994:	699a      	ldr	r2, [r3, #24]
 800e996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e998:	691b      	ldr	r3, [r3, #16]
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d106      	bne.n	800e9ac <ip4_reass+0xdc>
 800e99e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9a0:	899a      	ldrh	r2, [r3, #12]
 800e9a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9a4:	889b      	ldrh	r3, [r3, #4]
 800e9a6:	b29b      	uxth	r3, r3
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	d006      	beq.n	800e9ba <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e9ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	633b      	str	r3, [r7, #48]	@ 0x30
 800e9b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d1e6      	bne.n	800e986 <ip4_reass+0xb6>
 800e9b8:	e000      	b.n	800e9bc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e9ba:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e9bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d109      	bne.n	800e9d6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e9c2:	8c3b      	ldrh	r3, [r7, #32]
 800e9c4:	4619      	mov	r1, r3
 800e9c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9c8:	f7ff fdb0 	bl	800e52c <ip_reass_enqueue_new_datagram>
 800e9cc:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d11c      	bne.n	800ea0e <ip4_reass+0x13e>
      goto nullreturn;
 800e9d4:	e105      	b.n	800ebe2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e9d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9d8:	88db      	ldrh	r3, [r3, #6]
 800e9da:	b29b      	uxth	r3, r3
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f7f5 ffe7 	bl	80049b0 <lwip_htons>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d110      	bne.n	800ea0e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e9ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9ee:	89db      	ldrh	r3, [r3, #14]
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f7f5 ffdd 	bl	80049b0 <lwip_htons>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d006      	beq.n	800ea0e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ea00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea02:	3308      	adds	r3, #8
 800ea04:	2214      	movs	r2, #20
 800ea06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f000 fd12 	bl	800f432 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ea0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea10:	88db      	ldrh	r3, [r3, #6]
 800ea12:	b29b      	uxth	r3, r3
 800ea14:	f003 0320 	and.w	r3, r3, #32
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	bf0c      	ite	eq
 800ea1c:	2301      	moveq	r3, #1
 800ea1e:	2300      	movne	r3, #0
 800ea20:	b2db      	uxtb	r3, r3
 800ea22:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ea24:	69fb      	ldr	r3, [r7, #28]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d00e      	beq.n	800ea48 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800ea2a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ea2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea2e:	4413      	add	r3, r2
 800ea30:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ea32:	8b7a      	ldrh	r2, [r7, #26]
 800ea34:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ea36:	429a      	cmp	r2, r3
 800ea38:	f0c0 80a0 	bcc.w	800eb7c <ip4_reass+0x2ac>
 800ea3c:	8b7b      	ldrh	r3, [r7, #26]
 800ea3e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800ea42:	4293      	cmp	r3, r2
 800ea44:	f200 809a 	bhi.w	800eb7c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ea48:	69fa      	ldr	r2, [r7, #28]
 800ea4a:	6879      	ldr	r1, [r7, #4]
 800ea4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ea4e:	f7ff fdd5 	bl	800e5fc <ip_reass_chain_frag_into_datagram_and_validate>
 800ea52:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ea5a:	f000 809b 	beq.w	800eb94 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ea5e:	4b48      	ldr	r3, [pc, #288]	@ (800eb80 <ip4_reass+0x2b0>)
 800ea60:	881a      	ldrh	r2, [r3, #0]
 800ea62:	8c3b      	ldrh	r3, [r7, #32]
 800ea64:	4413      	add	r3, r2
 800ea66:	b29a      	uxth	r2, r3
 800ea68:	4b45      	ldr	r3, [pc, #276]	@ (800eb80 <ip4_reass+0x2b0>)
 800ea6a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ea6c:	69fb      	ldr	r3, [r7, #28]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d00d      	beq.n	800ea8e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ea72:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ea74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea76:	4413      	add	r3, r2
 800ea78:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ea7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea7c:	8a7a      	ldrh	r2, [r7, #18]
 800ea7e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ea80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea82:	7f9b      	ldrb	r3, [r3, #30]
 800ea84:	f043 0301 	orr.w	r3, r3, #1
 800ea88:	b2da      	uxtb	r2, r3
 800ea8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea8c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	2b01      	cmp	r3, #1
 800ea92:	d171      	bne.n	800eb78 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ea94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea96:	8b9b      	ldrh	r3, [r3, #28]
 800ea98:	3314      	adds	r3, #20
 800ea9a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ea9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea9e:	685b      	ldr	r3, [r3, #4]
 800eaa0:	685b      	ldr	r3, [r3, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800eaa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaa8:	685b      	ldr	r3, [r3, #4]
 800eaaa:	685b      	ldr	r3, [r3, #4]
 800eaac:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800eaae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eab0:	3308      	adds	r3, #8
 800eab2:	2214      	movs	r2, #20
 800eab4:	4619      	mov	r1, r3
 800eab6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eab8:	f000 fcbb 	bl	800f432 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800eabc:	8a3b      	ldrh	r3, [r7, #16]
 800eabe:	4618      	mov	r0, r3
 800eac0:	f7f5 ff76 	bl	80049b0 <lwip_htons>
 800eac4:	4603      	mov	r3, r0
 800eac6:	461a      	mov	r2, r3
 800eac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaca:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800eacc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eace:	2200      	movs	r2, #0
 800ead0:	719a      	strb	r2, [r3, #6]
 800ead2:	2200      	movs	r2, #0
 800ead4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ead6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ead8:	2200      	movs	r2, #0
 800eada:	729a      	strb	r2, [r3, #10]
 800eadc:	2200      	movs	r2, #0
 800eade:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800eae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eae2:	685b      	ldr	r3, [r3, #4]
 800eae4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800eae6:	e00d      	b.n	800eb04 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800eae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eaea:	685b      	ldr	r3, [r3, #4]
 800eaec:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800eaee:	2114      	movs	r1, #20
 800eaf0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800eaf2:	f7f7 fa35 	bl	8005f60 <pbuf_remove_header>
      pbuf_cat(p, r);
 800eaf6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f7f7 fb79 	bl	80061f0 <pbuf_cat>
      r = iprh->next_pbuf;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800eb04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d1ee      	bne.n	800eae8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800eb0a:	4b1e      	ldr	r3, [pc, #120]	@ (800eb84 <ip4_reass+0x2b4>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb10:	429a      	cmp	r2, r3
 800eb12:	d102      	bne.n	800eb1a <ip4_reass+0x24a>
      ipr_prev = NULL;
 800eb14:	2300      	movs	r3, #0
 800eb16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eb18:	e010      	b.n	800eb3c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800eb1a:	4b1a      	ldr	r3, [pc, #104]	@ (800eb84 <ip4_reass+0x2b4>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eb20:	e007      	b.n	800eb32 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800eb22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb28:	429a      	cmp	r2, r3
 800eb2a:	d006      	beq.n	800eb3a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800eb2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eb32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d1f4      	bne.n	800eb22 <ip4_reass+0x252>
 800eb38:	e000      	b.n	800eb3c <ip4_reass+0x26c>
          break;
 800eb3a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800eb3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eb3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eb40:	f7ff fd2e 	bl	800e5a0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f7f7 fb19 	bl	800617c <pbuf_clen>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800eb4e:	4b0c      	ldr	r3, [pc, #48]	@ (800eb80 <ip4_reass+0x2b0>)
 800eb50:	881b      	ldrh	r3, [r3, #0]
 800eb52:	8c3a      	ldrh	r2, [r7, #32]
 800eb54:	429a      	cmp	r2, r3
 800eb56:	d906      	bls.n	800eb66 <ip4_reass+0x296>
 800eb58:	4b0b      	ldr	r3, [pc, #44]	@ (800eb88 <ip4_reass+0x2b8>)
 800eb5a:	f240 229b 	movw	r2, #667	@ 0x29b
 800eb5e:	490b      	ldr	r1, [pc, #44]	@ (800eb8c <ip4_reass+0x2bc>)
 800eb60:	480b      	ldr	r0, [pc, #44]	@ (800eb90 <ip4_reass+0x2c0>)
 800eb62:	f000 fbfb 	bl	800f35c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800eb66:	4b06      	ldr	r3, [pc, #24]	@ (800eb80 <ip4_reass+0x2b0>)
 800eb68:	881a      	ldrh	r2, [r3, #0]
 800eb6a:	8c3b      	ldrh	r3, [r7, #32]
 800eb6c:	1ad3      	subs	r3, r2, r3
 800eb6e:	b29a      	uxth	r2, r3
 800eb70:	4b03      	ldr	r3, [pc, #12]	@ (800eb80 <ip4_reass+0x2b0>)
 800eb72:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	e038      	b.n	800ebea <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800eb78:	2300      	movs	r3, #0
 800eb7a:	e036      	b.n	800ebea <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800eb7c:	bf00      	nop
 800eb7e:	e00a      	b.n	800eb96 <ip4_reass+0x2c6>
 800eb80:	20008444 	.word	0x20008444
 800eb84:	20008440 	.word	0x20008440
 800eb88:	08012e6c 	.word	0x08012e6c
 800eb8c:	08012fdc 	.word	0x08012fdc
 800eb90:	08012eb4 	.word	0x08012eb4
    goto nullreturn_ipr;
 800eb94:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800eb96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d106      	bne.n	800ebaa <ip4_reass+0x2da>
 800eb9c:	4b15      	ldr	r3, [pc, #84]	@ (800ebf4 <ip4_reass+0x324>)
 800eb9e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800eba2:	4915      	ldr	r1, [pc, #84]	@ (800ebf8 <ip4_reass+0x328>)
 800eba4:	4815      	ldr	r0, [pc, #84]	@ (800ebfc <ip4_reass+0x32c>)
 800eba6:	f000 fbd9 	bl	800f35c <iprintf>
  if (ipr->p == NULL) {
 800ebaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebac:	685b      	ldr	r3, [r3, #4]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d116      	bne.n	800ebe0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800ebb2:	4b13      	ldr	r3, [pc, #76]	@ (800ec00 <ip4_reass+0x330>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	d006      	beq.n	800ebca <ip4_reass+0x2fa>
 800ebbc:	4b0d      	ldr	r3, [pc, #52]	@ (800ebf4 <ip4_reass+0x324>)
 800ebbe:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800ebc2:	4910      	ldr	r1, [pc, #64]	@ (800ec04 <ip4_reass+0x334>)
 800ebc4:	480d      	ldr	r0, [pc, #52]	@ (800ebfc <ip4_reass+0x32c>)
 800ebc6:	f000 fbc9 	bl	800f35c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800ebca:	2100      	movs	r1, #0
 800ebcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ebce:	f7ff fce7 	bl	800e5a0 <ip_reass_dequeue_datagram>
 800ebd2:	e006      	b.n	800ebe2 <ip4_reass+0x312>
    goto nullreturn;
 800ebd4:	bf00      	nop
 800ebd6:	e004      	b.n	800ebe2 <ip4_reass+0x312>
    goto nullreturn;
 800ebd8:	bf00      	nop
 800ebda:	e002      	b.n	800ebe2 <ip4_reass+0x312>
      goto nullreturn;
 800ebdc:	bf00      	nop
 800ebde:	e000      	b.n	800ebe2 <ip4_reass+0x312>
  }

nullreturn:
 800ebe0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	f7f7 fa42 	bl	800606c <pbuf_free>
  return NULL;
 800ebe8:	2300      	movs	r3, #0
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3738      	adds	r7, #56	@ 0x38
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	08012e6c 	.word	0x08012e6c
 800ebf8:	08012ff8 	.word	0x08012ff8
 800ebfc:	08012eb4 	.word	0x08012eb4
 800ec00:	20008440 	.word	0x20008440
 800ec04:	08013004 	.word	0x08013004

0800ec08 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800ec0c:	2005      	movs	r0, #5
 800ec0e:	f7f6 fb47 	bl	80052a0 <memp_malloc>
 800ec12:	4603      	mov	r3, r0
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	bd80      	pop	{r7, pc}

0800ec18 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b082      	sub	sp, #8
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d106      	bne.n	800ec34 <ip_frag_free_pbuf_custom_ref+0x1c>
 800ec26:	4b07      	ldr	r3, [pc, #28]	@ (800ec44 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800ec28:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800ec2c:	4906      	ldr	r1, [pc, #24]	@ (800ec48 <ip_frag_free_pbuf_custom_ref+0x30>)
 800ec2e:	4807      	ldr	r0, [pc, #28]	@ (800ec4c <ip_frag_free_pbuf_custom_ref+0x34>)
 800ec30:	f000 fb94 	bl	800f35c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ec34:	6879      	ldr	r1, [r7, #4]
 800ec36:	2005      	movs	r0, #5
 800ec38:	f7f6 fba2 	bl	8005380 <memp_free>
}
 800ec3c:	bf00      	nop
 800ec3e:	3708      	adds	r7, #8
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}
 800ec44:	08012e6c 	.word	0x08012e6c
 800ec48:	08013024 	.word	0x08013024
 800ec4c:	08012eb4 	.word	0x08012eb4

0800ec50 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b084      	sub	sp, #16
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d106      	bne.n	800ec70 <ipfrag_free_pbuf_custom+0x20>
 800ec62:	4b11      	ldr	r3, [pc, #68]	@ (800eca8 <ipfrag_free_pbuf_custom+0x58>)
 800ec64:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800ec68:	4910      	ldr	r1, [pc, #64]	@ (800ecac <ipfrag_free_pbuf_custom+0x5c>)
 800ec6a:	4811      	ldr	r0, [pc, #68]	@ (800ecb0 <ipfrag_free_pbuf_custom+0x60>)
 800ec6c:	f000 fb76 	bl	800f35c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800ec70:	68fa      	ldr	r2, [r7, #12]
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	429a      	cmp	r2, r3
 800ec76:	d006      	beq.n	800ec86 <ipfrag_free_pbuf_custom+0x36>
 800ec78:	4b0b      	ldr	r3, [pc, #44]	@ (800eca8 <ipfrag_free_pbuf_custom+0x58>)
 800ec7a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800ec7e:	490d      	ldr	r1, [pc, #52]	@ (800ecb4 <ipfrag_free_pbuf_custom+0x64>)
 800ec80:	480b      	ldr	r0, [pc, #44]	@ (800ecb0 <ipfrag_free_pbuf_custom+0x60>)
 800ec82:	f000 fb6b 	bl	800f35c <iprintf>
  if (pcr->original != NULL) {
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	695b      	ldr	r3, [r3, #20]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d004      	beq.n	800ec98 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	695b      	ldr	r3, [r3, #20]
 800ec92:	4618      	mov	r0, r3
 800ec94:	f7f7 f9ea 	bl	800606c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ec98:	68f8      	ldr	r0, [r7, #12]
 800ec9a:	f7ff ffbd 	bl	800ec18 <ip_frag_free_pbuf_custom_ref>
}
 800ec9e:	bf00      	nop
 800eca0:	3710      	adds	r7, #16
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}
 800eca6:	bf00      	nop
 800eca8:	08012e6c 	.word	0x08012e6c
 800ecac:	08013030 	.word	0x08013030
 800ecb0:	08012eb4 	.word	0x08012eb4
 800ecb4:	0801303c 	.word	0x0801303c

0800ecb8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b094      	sub	sp, #80	@ 0x50
 800ecbc:	af02      	add	r7, sp, #8
 800ecbe:	60f8      	str	r0, [r7, #12]
 800ecc0:	60b9      	str	r1, [r7, #8]
 800ecc2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ecca:	68bb      	ldr	r3, [r7, #8]
 800eccc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ecce:	3b14      	subs	r3, #20
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	da00      	bge.n	800ecd6 <ip4_frag+0x1e>
 800ecd4:	3307      	adds	r3, #7
 800ecd6:	10db      	asrs	r3, r3, #3
 800ecd8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ecda:	2314      	movs	r3, #20
 800ecdc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	685b      	ldr	r3, [r3, #4]
 800ece2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800ece4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ece6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ece8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecea:	781b      	ldrb	r3, [r3, #0]
 800ecec:	f003 030f 	and.w	r3, r3, #15
 800ecf0:	b2db      	uxtb	r3, r3
 800ecf2:	009b      	lsls	r3, r3, #2
 800ecf4:	b2db      	uxtb	r3, r3
 800ecf6:	2b14      	cmp	r3, #20
 800ecf8:	d002      	beq.n	800ed00 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ecfa:	f06f 0305 	mvn.w	r3, #5
 800ecfe:	e110      	b.n	800ef22 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	895b      	ldrh	r3, [r3, #10]
 800ed04:	2b13      	cmp	r3, #19
 800ed06:	d809      	bhi.n	800ed1c <ip4_frag+0x64>
 800ed08:	4b88      	ldr	r3, [pc, #544]	@ (800ef2c <ip4_frag+0x274>)
 800ed0a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800ed0e:	4988      	ldr	r1, [pc, #544]	@ (800ef30 <ip4_frag+0x278>)
 800ed10:	4888      	ldr	r0, [pc, #544]	@ (800ef34 <ip4_frag+0x27c>)
 800ed12:	f000 fb23 	bl	800f35c <iprintf>
 800ed16:	f06f 0305 	mvn.w	r3, #5
 800ed1a:	e102      	b.n	800ef22 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ed1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed1e:	88db      	ldrh	r3, [r3, #6]
 800ed20:	b29b      	uxth	r3, r3
 800ed22:	4618      	mov	r0, r3
 800ed24:	f7f5 fe44 	bl	80049b0 <lwip_htons>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800ed2c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ed2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ed32:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ed36:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ed38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ed3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	891b      	ldrh	r3, [r3, #8]
 800ed42:	3b14      	subs	r3, #20
 800ed44:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800ed48:	e0e1      	b.n	800ef0e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ed4a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ed4c:	00db      	lsls	r3, r3, #3
 800ed4e:	b29b      	uxth	r3, r3
 800ed50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ed54:	4293      	cmp	r3, r2
 800ed56:	bf28      	it	cs
 800ed58:	4613      	movcs	r3, r2
 800ed5a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ed5c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ed60:	2114      	movs	r1, #20
 800ed62:	200e      	movs	r0, #14
 800ed64:	f7f6 fe9e 	bl	8005aa4 <pbuf_alloc>
 800ed68:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800ed6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	f000 80d5 	beq.w	800ef1c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ed72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed74:	895b      	ldrh	r3, [r3, #10]
 800ed76:	2b13      	cmp	r3, #19
 800ed78:	d806      	bhi.n	800ed88 <ip4_frag+0xd0>
 800ed7a:	4b6c      	ldr	r3, [pc, #432]	@ (800ef2c <ip4_frag+0x274>)
 800ed7c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800ed80:	496d      	ldr	r1, [pc, #436]	@ (800ef38 <ip4_frag+0x280>)
 800ed82:	486c      	ldr	r0, [pc, #432]	@ (800ef34 <ip4_frag+0x27c>)
 800ed84:	f000 faea 	bl	800f35c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ed88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed8a:	685b      	ldr	r3, [r3, #4]
 800ed8c:	2214      	movs	r2, #20
 800ed8e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ed90:	4618      	mov	r0, r3
 800ed92:	f000 fb4e 	bl	800f432 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ed96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed98:	685b      	ldr	r3, [r3, #4]
 800ed9a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800ed9c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ed9e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800eda2:	e064      	b.n	800ee6e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	895a      	ldrh	r2, [r3, #10]
 800eda8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800edaa:	1ad3      	subs	r3, r2, r3
 800edac:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	895b      	ldrh	r3, [r3, #10]
 800edb2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800edb4:	429a      	cmp	r2, r3
 800edb6:	d906      	bls.n	800edc6 <ip4_frag+0x10e>
 800edb8:	4b5c      	ldr	r3, [pc, #368]	@ (800ef2c <ip4_frag+0x274>)
 800edba:	f240 322d 	movw	r2, #813	@ 0x32d
 800edbe:	495f      	ldr	r1, [pc, #380]	@ (800ef3c <ip4_frag+0x284>)
 800edc0:	485c      	ldr	r0, [pc, #368]	@ (800ef34 <ip4_frag+0x27c>)
 800edc2:	f000 facb 	bl	800f35c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800edc6:	8bfa      	ldrh	r2, [r7, #30]
 800edc8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800edcc:	4293      	cmp	r3, r2
 800edce:	bf28      	it	cs
 800edd0:	4613      	movcs	r3, r2
 800edd2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800edd6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d105      	bne.n	800edea <ip4_frag+0x132>
        poff = 0;
 800edde:	2300      	movs	r3, #0
 800ede0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	60fb      	str	r3, [r7, #12]
        continue;
 800ede8:	e041      	b.n	800ee6e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800edea:	f7ff ff0d 	bl	800ec08 <ip_frag_alloc_pbuf_custom_ref>
 800edee:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800edf0:	69bb      	ldr	r3, [r7, #24]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d103      	bne.n	800edfe <ip4_frag+0x146>
        pbuf_free(rambuf);
 800edf6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800edf8:	f7f7 f938 	bl	800606c <pbuf_free>
        goto memerr;
 800edfc:	e08f      	b.n	800ef1e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800edfe:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ee04:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ee06:	4413      	add	r3, r2
 800ee08:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800ee0c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800ee10:	9201      	str	r2, [sp, #4]
 800ee12:	9300      	str	r3, [sp, #0]
 800ee14:	4603      	mov	r3, r0
 800ee16:	2241      	movs	r2, #65	@ 0x41
 800ee18:	2000      	movs	r0, #0
 800ee1a:	f7f6 ff6d 	bl	8005cf8 <pbuf_alloced_custom>
 800ee1e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d106      	bne.n	800ee34 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ee26:	69b8      	ldr	r0, [r7, #24]
 800ee28:	f7ff fef6 	bl	800ec18 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800ee2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ee2e:	f7f7 f91d 	bl	800606c <pbuf_free>
        goto memerr;
 800ee32:	e074      	b.n	800ef1e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800ee34:	68f8      	ldr	r0, [r7, #12]
 800ee36:	f7f7 f9b9 	bl	80061ac <pbuf_ref>
      pcr->original = p;
 800ee3a:	69bb      	ldr	r3, [r7, #24]
 800ee3c:	68fa      	ldr	r2, [r7, #12]
 800ee3e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ee40:	69bb      	ldr	r3, [r7, #24]
 800ee42:	4a3f      	ldr	r2, [pc, #252]	@ (800ef40 <ip4_frag+0x288>)
 800ee44:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ee46:	6979      	ldr	r1, [r7, #20]
 800ee48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ee4a:	f7f7 f9d1 	bl	80061f0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800ee4e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800ee52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ee56:	1ad3      	subs	r3, r2, r3
 800ee58:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800ee5c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d004      	beq.n	800ee6e <ip4_frag+0x1b6>
        poff = 0;
 800ee64:	2300      	movs	r3, #0
 800ee66:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ee6e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d196      	bne.n	800eda4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800ee76:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800ee78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ee7c:	4413      	add	r3, r2
 800ee7e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ee84:	f1a3 0213 	sub.w	r2, r3, #19
 800ee88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ee8c:	429a      	cmp	r2, r3
 800ee8e:	bfcc      	ite	gt
 800ee90:	2301      	movgt	r3, #1
 800ee92:	2300      	movle	r3, #0
 800ee94:	b2db      	uxtb	r3, r3
 800ee96:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800ee98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ee9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eea0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800eea2:	6a3b      	ldr	r3, [r7, #32]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d002      	beq.n	800eeae <ip4_frag+0x1f6>
 800eea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d003      	beq.n	800eeb6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800eeae:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800eeb0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800eeb4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800eeb6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f7f5 fd79 	bl	80049b0 <lwip_htons>
 800eebe:	4603      	mov	r3, r0
 800eec0:	461a      	mov	r2, r3
 800eec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eec4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800eec6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800eec8:	3314      	adds	r3, #20
 800eeca:	b29b      	uxth	r3, r3
 800eecc:	4618      	mov	r0, r3
 800eece:	f7f5 fd6f 	bl	80049b0 <lwip_htons>
 800eed2:	4603      	mov	r3, r0
 800eed4:	461a      	mov	r2, r3
 800eed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eed8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800eeda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eedc:	2200      	movs	r2, #0
 800eede:	729a      	strb	r2, [r3, #10]
 800eee0:	2200      	movs	r2, #0
 800eee2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	695b      	ldr	r3, [r3, #20]
 800eee8:	687a      	ldr	r2, [r7, #4]
 800eeea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800eeec:	68b8      	ldr	r0, [r7, #8]
 800eeee:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800eef0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eef2:	f7f7 f8bb 	bl	800606c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800eef6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800eefa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800eefc:	1ad3      	subs	r3, r2, r3
 800eefe:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800ef02:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800ef06:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ef08:	4413      	add	r3, r2
 800ef0a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800ef0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	f47f af19 	bne.w	800ed4a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ef18:	2300      	movs	r3, #0
 800ef1a:	e002      	b.n	800ef22 <ip4_frag+0x26a>
      goto memerr;
 800ef1c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800ef1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	3748      	adds	r7, #72	@ 0x48
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
 800ef2a:	bf00      	nop
 800ef2c:	08012e6c 	.word	0x08012e6c
 800ef30:	08013048 	.word	0x08013048
 800ef34:	08012eb4 	.word	0x08012eb4
 800ef38:	08013064 	.word	0x08013064
 800ef3c:	08013084 	.word	0x08013084
 800ef40:	0800ec51 	.word	0x0800ec51

0800ef44 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b086      	sub	sp, #24
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
 800ef4c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800ef4e:	230e      	movs	r3, #14
 800ef50:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	895b      	ldrh	r3, [r3, #10]
 800ef56:	2b0e      	cmp	r3, #14
 800ef58:	d96e      	bls.n	800f038 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	7bdb      	ldrb	r3, [r3, #15]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d106      	bne.n	800ef70 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ef68:	3301      	adds	r3, #1
 800ef6a:	b2da      	uxtb	r2, r3
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	685b      	ldr	r3, [r3, #4]
 800ef74:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ef76:	693b      	ldr	r3, [r7, #16]
 800ef78:	7b1a      	ldrb	r2, [r3, #12]
 800ef7a:	7b5b      	ldrb	r3, [r3, #13]
 800ef7c:	021b      	lsls	r3, r3, #8
 800ef7e:	4313      	orrs	r3, r2
 800ef80:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ef82:	693b      	ldr	r3, [r7, #16]
 800ef84:	781b      	ldrb	r3, [r3, #0]
 800ef86:	f003 0301 	and.w	r3, r3, #1
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d023      	beq.n	800efd6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ef8e:	693b      	ldr	r3, [r7, #16]
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	2b01      	cmp	r3, #1
 800ef94:	d10f      	bne.n	800efb6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ef96:	693b      	ldr	r3, [r7, #16]
 800ef98:	785b      	ldrb	r3, [r3, #1]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d11b      	bne.n	800efd6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800efa2:	2b5e      	cmp	r3, #94	@ 0x5e
 800efa4:	d117      	bne.n	800efd6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	7b5b      	ldrb	r3, [r3, #13]
 800efaa:	f043 0310 	orr.w	r3, r3, #16
 800efae:	b2da      	uxtb	r2, r3
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	735a      	strb	r2, [r3, #13]
 800efb4:	e00f      	b.n	800efd6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800efb6:	693b      	ldr	r3, [r7, #16]
 800efb8:	2206      	movs	r2, #6
 800efba:	4928      	ldr	r1, [pc, #160]	@ (800f05c <ethernet_input+0x118>)
 800efbc:	4618      	mov	r0, r3
 800efbe:	f000 f9df 	bl	800f380 <memcmp>
 800efc2:	4603      	mov	r3, r0
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d106      	bne.n	800efd6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	7b5b      	ldrb	r3, [r3, #13]
 800efcc:	f043 0308 	orr.w	r3, r3, #8
 800efd0:	b2da      	uxtb	r2, r3
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800efd6:	89fb      	ldrh	r3, [r7, #14]
 800efd8:	2b08      	cmp	r3, #8
 800efda:	d003      	beq.n	800efe4 <ethernet_input+0xa0>
 800efdc:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800efe0:	d014      	beq.n	800f00c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800efe2:	e032      	b.n	800f04a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800efea:	f003 0308 	and.w	r3, r3, #8
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d024      	beq.n	800f03c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800eff2:	8afb      	ldrh	r3, [r7, #22]
 800eff4:	4619      	mov	r1, r3
 800eff6:	6878      	ldr	r0, [r7, #4]
 800eff8:	f7f6 ffb2 	bl	8005f60 <pbuf_remove_header>
 800effc:	4603      	mov	r3, r0
 800effe:	2b00      	cmp	r3, #0
 800f000:	d11e      	bne.n	800f040 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800f002:	6839      	ldr	r1, [r7, #0]
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	f7fe fe91 	bl	800dd2c <ip4_input>
      break;
 800f00a:	e013      	b.n	800f034 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f012:	f003 0308 	and.w	r3, r3, #8
 800f016:	2b00      	cmp	r3, #0
 800f018:	d014      	beq.n	800f044 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f01a:	8afb      	ldrh	r3, [r7, #22]
 800f01c:	4619      	mov	r1, r3
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	f7f6 ff9e 	bl	8005f60 <pbuf_remove_header>
 800f024:	4603      	mov	r3, r0
 800f026:	2b00      	cmp	r3, #0
 800f028:	d10e      	bne.n	800f048 <ethernet_input+0x104>
        etharp_input(p, netif);
 800f02a:	6839      	ldr	r1, [r7, #0]
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f7fe f831 	bl	800d094 <etharp_input>
      break;
 800f032:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f034:	2300      	movs	r3, #0
 800f036:	e00c      	b.n	800f052 <ethernet_input+0x10e>
    goto free_and_return;
 800f038:	bf00      	nop
 800f03a:	e006      	b.n	800f04a <ethernet_input+0x106>
        goto free_and_return;
 800f03c:	bf00      	nop
 800f03e:	e004      	b.n	800f04a <ethernet_input+0x106>
        goto free_and_return;
 800f040:	bf00      	nop
 800f042:	e002      	b.n	800f04a <ethernet_input+0x106>
        goto free_and_return;
 800f044:	bf00      	nop
 800f046:	e000      	b.n	800f04a <ethernet_input+0x106>
        goto free_and_return;
 800f048:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f04a:	6878      	ldr	r0, [r7, #4]
 800f04c:	f7f7 f80e 	bl	800606c <pbuf_free>
  return ERR_OK;
 800f050:	2300      	movs	r3, #0
}
 800f052:	4618      	mov	r0, r3
 800f054:	3718      	adds	r7, #24
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}
 800f05a:	bf00      	nop
 800f05c:	08013220 	.word	0x08013220

0800f060 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f060:	b580      	push	{r7, lr}
 800f062:	b086      	sub	sp, #24
 800f064:	af00      	add	r7, sp, #0
 800f066:	60f8      	str	r0, [r7, #12]
 800f068:	60b9      	str	r1, [r7, #8]
 800f06a:	607a      	str	r2, [r7, #4]
 800f06c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f06e:	8c3b      	ldrh	r3, [r7, #32]
 800f070:	4618      	mov	r0, r3
 800f072:	f7f5 fc9d 	bl	80049b0 <lwip_htons>
 800f076:	4603      	mov	r3, r0
 800f078:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f07a:	210e      	movs	r1, #14
 800f07c:	68b8      	ldr	r0, [r7, #8]
 800f07e:	f7f6 ff5f 	bl	8005f40 <pbuf_add_header>
 800f082:	4603      	mov	r3, r0
 800f084:	2b00      	cmp	r3, #0
 800f086:	d125      	bne.n	800f0d4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	685b      	ldr	r3, [r3, #4]
 800f08c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f08e:	693b      	ldr	r3, [r7, #16]
 800f090:	8afa      	ldrh	r2, [r7, #22]
 800f092:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f094:	693b      	ldr	r3, [r7, #16]
 800f096:	2206      	movs	r2, #6
 800f098:	6839      	ldr	r1, [r7, #0]
 800f09a:	4618      	mov	r0, r3
 800f09c:	f000 f9c9 	bl	800f432 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f0a0:	693b      	ldr	r3, [r7, #16]
 800f0a2:	3306      	adds	r3, #6
 800f0a4:	2206      	movs	r2, #6
 800f0a6:	6879      	ldr	r1, [r7, #4]
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f000 f9c2 	bl	800f432 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f0b4:	2b06      	cmp	r3, #6
 800f0b6:	d006      	beq.n	800f0c6 <ethernet_output+0x66>
 800f0b8:	4b0a      	ldr	r3, [pc, #40]	@ (800f0e4 <ethernet_output+0x84>)
 800f0ba:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800f0be:	490a      	ldr	r1, [pc, #40]	@ (800f0e8 <ethernet_output+0x88>)
 800f0c0:	480a      	ldr	r0, [pc, #40]	@ (800f0ec <ethernet_output+0x8c>)
 800f0c2:	f000 f94b 	bl	800f35c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	699b      	ldr	r3, [r3, #24]
 800f0ca:	68b9      	ldr	r1, [r7, #8]
 800f0cc:	68f8      	ldr	r0, [r7, #12]
 800f0ce:	4798      	blx	r3
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	e002      	b.n	800f0da <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f0d4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f0d6:	f06f 0301 	mvn.w	r3, #1
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	3718      	adds	r7, #24
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bd80      	pop	{r7, pc}
 800f0e2:	bf00      	nop
 800f0e4:	08013094 	.word	0x08013094
 800f0e8:	080130cc 	.word	0x080130cc
 800f0ec:	08013100 	.word	0x08013100

0800f0f0 <sniprintf>:
 800f0f0:	b40c      	push	{r2, r3}
 800f0f2:	b530      	push	{r4, r5, lr}
 800f0f4:	4b18      	ldr	r3, [pc, #96]	@ (800f158 <sniprintf+0x68>)
 800f0f6:	1e0c      	subs	r4, r1, #0
 800f0f8:	681d      	ldr	r5, [r3, #0]
 800f0fa:	b09d      	sub	sp, #116	@ 0x74
 800f0fc:	da08      	bge.n	800f110 <sniprintf+0x20>
 800f0fe:	238b      	movs	r3, #139	@ 0x8b
 800f100:	602b      	str	r3, [r5, #0]
 800f102:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f106:	b01d      	add	sp, #116	@ 0x74
 800f108:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f10c:	b002      	add	sp, #8
 800f10e:	4770      	bx	lr
 800f110:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f114:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f118:	f04f 0300 	mov.w	r3, #0
 800f11c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800f11e:	bf14      	ite	ne
 800f120:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800f124:	4623      	moveq	r3, r4
 800f126:	9304      	str	r3, [sp, #16]
 800f128:	9307      	str	r3, [sp, #28]
 800f12a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f12e:	9002      	str	r0, [sp, #8]
 800f130:	9006      	str	r0, [sp, #24]
 800f132:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f136:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f138:	ab21      	add	r3, sp, #132	@ 0x84
 800f13a:	a902      	add	r1, sp, #8
 800f13c:	4628      	mov	r0, r5
 800f13e:	9301      	str	r3, [sp, #4]
 800f140:	f000 fa4a 	bl	800f5d8 <_svfiprintf_r>
 800f144:	1c43      	adds	r3, r0, #1
 800f146:	bfbc      	itt	lt
 800f148:	238b      	movlt	r3, #139	@ 0x8b
 800f14a:	602b      	strlt	r3, [r5, #0]
 800f14c:	2c00      	cmp	r4, #0
 800f14e:	d0da      	beq.n	800f106 <sniprintf+0x16>
 800f150:	9b02      	ldr	r3, [sp, #8]
 800f152:	2200      	movs	r2, #0
 800f154:	701a      	strb	r2, [r3, #0]
 800f156:	e7d6      	b.n	800f106 <sniprintf+0x16>
 800f158:	20000038 	.word	0x20000038

0800f15c <rand>:
 800f15c:	4b16      	ldr	r3, [pc, #88]	@ (800f1b8 <rand+0x5c>)
 800f15e:	b510      	push	{r4, lr}
 800f160:	681c      	ldr	r4, [r3, #0]
 800f162:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f164:	b9b3      	cbnz	r3, 800f194 <rand+0x38>
 800f166:	2018      	movs	r0, #24
 800f168:	f000 fc74 	bl	800fa54 <malloc>
 800f16c:	4602      	mov	r2, r0
 800f16e:	6320      	str	r0, [r4, #48]	@ 0x30
 800f170:	b920      	cbnz	r0, 800f17c <rand+0x20>
 800f172:	4b12      	ldr	r3, [pc, #72]	@ (800f1bc <rand+0x60>)
 800f174:	4812      	ldr	r0, [pc, #72]	@ (800f1c0 <rand+0x64>)
 800f176:	2152      	movs	r1, #82	@ 0x52
 800f178:	f000 f96a 	bl	800f450 <__assert_func>
 800f17c:	4911      	ldr	r1, [pc, #68]	@ (800f1c4 <rand+0x68>)
 800f17e:	4b12      	ldr	r3, [pc, #72]	@ (800f1c8 <rand+0x6c>)
 800f180:	e9c0 1300 	strd	r1, r3, [r0]
 800f184:	4b11      	ldr	r3, [pc, #68]	@ (800f1cc <rand+0x70>)
 800f186:	6083      	str	r3, [r0, #8]
 800f188:	230b      	movs	r3, #11
 800f18a:	8183      	strh	r3, [r0, #12]
 800f18c:	2100      	movs	r1, #0
 800f18e:	2001      	movs	r0, #1
 800f190:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f194:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f196:	480e      	ldr	r0, [pc, #56]	@ (800f1d0 <rand+0x74>)
 800f198:	690b      	ldr	r3, [r1, #16]
 800f19a:	694c      	ldr	r4, [r1, #20]
 800f19c:	4a0d      	ldr	r2, [pc, #52]	@ (800f1d4 <rand+0x78>)
 800f19e:	4358      	muls	r0, r3
 800f1a0:	fb02 0004 	mla	r0, r2, r4, r0
 800f1a4:	fba3 3202 	umull	r3, r2, r3, r2
 800f1a8:	3301      	adds	r3, #1
 800f1aa:	eb40 0002 	adc.w	r0, r0, r2
 800f1ae:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800f1b2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800f1b6:	bd10      	pop	{r4, pc}
 800f1b8:	20000038 	.word	0x20000038
 800f1bc:	0801322e 	.word	0x0801322e
 800f1c0:	08013245 	.word	0x08013245
 800f1c4:	abcd330e 	.word	0xabcd330e
 800f1c8:	e66d1234 	.word	0xe66d1234
 800f1cc:	0005deec 	.word	0x0005deec
 800f1d0:	5851f42d 	.word	0x5851f42d
 800f1d4:	4c957f2d 	.word	0x4c957f2d

0800f1d8 <std>:
 800f1d8:	2300      	movs	r3, #0
 800f1da:	b510      	push	{r4, lr}
 800f1dc:	4604      	mov	r4, r0
 800f1de:	e9c0 3300 	strd	r3, r3, [r0]
 800f1e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f1e6:	6083      	str	r3, [r0, #8]
 800f1e8:	8181      	strh	r1, [r0, #12]
 800f1ea:	6643      	str	r3, [r0, #100]	@ 0x64
 800f1ec:	81c2      	strh	r2, [r0, #14]
 800f1ee:	6183      	str	r3, [r0, #24]
 800f1f0:	4619      	mov	r1, r3
 800f1f2:	2208      	movs	r2, #8
 800f1f4:	305c      	adds	r0, #92	@ 0x5c
 800f1f6:	f000 f8ed 	bl	800f3d4 <memset>
 800f1fa:	4b0d      	ldr	r3, [pc, #52]	@ (800f230 <std+0x58>)
 800f1fc:	6263      	str	r3, [r4, #36]	@ 0x24
 800f1fe:	4b0d      	ldr	r3, [pc, #52]	@ (800f234 <std+0x5c>)
 800f200:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f202:	4b0d      	ldr	r3, [pc, #52]	@ (800f238 <std+0x60>)
 800f204:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f206:	4b0d      	ldr	r3, [pc, #52]	@ (800f23c <std+0x64>)
 800f208:	6323      	str	r3, [r4, #48]	@ 0x30
 800f20a:	4b0d      	ldr	r3, [pc, #52]	@ (800f240 <std+0x68>)
 800f20c:	6224      	str	r4, [r4, #32]
 800f20e:	429c      	cmp	r4, r3
 800f210:	d006      	beq.n	800f220 <std+0x48>
 800f212:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f216:	4294      	cmp	r4, r2
 800f218:	d002      	beq.n	800f220 <std+0x48>
 800f21a:	33d0      	adds	r3, #208	@ 0xd0
 800f21c:	429c      	cmp	r4, r3
 800f21e:	d105      	bne.n	800f22c <std+0x54>
 800f220:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f228:	f000 b900 	b.w	800f42c <__retarget_lock_init_recursive>
 800f22c:	bd10      	pop	{r4, pc}
 800f22e:	bf00      	nop
 800f230:	08010031 	.word	0x08010031
 800f234:	08010053 	.word	0x08010053
 800f238:	0801008b 	.word	0x0801008b
 800f23c:	080100af 	.word	0x080100af
 800f240:	20008448 	.word	0x20008448

0800f244 <stdio_exit_handler>:
 800f244:	4a02      	ldr	r2, [pc, #8]	@ (800f250 <stdio_exit_handler+0xc>)
 800f246:	4903      	ldr	r1, [pc, #12]	@ (800f254 <stdio_exit_handler+0x10>)
 800f248:	4803      	ldr	r0, [pc, #12]	@ (800f258 <stdio_exit_handler+0x14>)
 800f24a:	f000 b869 	b.w	800f320 <_fwalk_sglue>
 800f24e:	bf00      	nop
 800f250:	2000002c 	.word	0x2000002c
 800f254:	0800ffc9 	.word	0x0800ffc9
 800f258:	2000003c 	.word	0x2000003c

0800f25c <cleanup_stdio>:
 800f25c:	6841      	ldr	r1, [r0, #4]
 800f25e:	4b0c      	ldr	r3, [pc, #48]	@ (800f290 <cleanup_stdio+0x34>)
 800f260:	4299      	cmp	r1, r3
 800f262:	b510      	push	{r4, lr}
 800f264:	4604      	mov	r4, r0
 800f266:	d001      	beq.n	800f26c <cleanup_stdio+0x10>
 800f268:	f000 feae 	bl	800ffc8 <_fflush_r>
 800f26c:	68a1      	ldr	r1, [r4, #8]
 800f26e:	4b09      	ldr	r3, [pc, #36]	@ (800f294 <cleanup_stdio+0x38>)
 800f270:	4299      	cmp	r1, r3
 800f272:	d002      	beq.n	800f27a <cleanup_stdio+0x1e>
 800f274:	4620      	mov	r0, r4
 800f276:	f000 fea7 	bl	800ffc8 <_fflush_r>
 800f27a:	68e1      	ldr	r1, [r4, #12]
 800f27c:	4b06      	ldr	r3, [pc, #24]	@ (800f298 <cleanup_stdio+0x3c>)
 800f27e:	4299      	cmp	r1, r3
 800f280:	d004      	beq.n	800f28c <cleanup_stdio+0x30>
 800f282:	4620      	mov	r0, r4
 800f284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f288:	f000 be9e 	b.w	800ffc8 <_fflush_r>
 800f28c:	bd10      	pop	{r4, pc}
 800f28e:	bf00      	nop
 800f290:	20008448 	.word	0x20008448
 800f294:	200084b0 	.word	0x200084b0
 800f298:	20008518 	.word	0x20008518

0800f29c <global_stdio_init.part.0>:
 800f29c:	b510      	push	{r4, lr}
 800f29e:	4b0b      	ldr	r3, [pc, #44]	@ (800f2cc <global_stdio_init.part.0+0x30>)
 800f2a0:	4c0b      	ldr	r4, [pc, #44]	@ (800f2d0 <global_stdio_init.part.0+0x34>)
 800f2a2:	4a0c      	ldr	r2, [pc, #48]	@ (800f2d4 <global_stdio_init.part.0+0x38>)
 800f2a4:	601a      	str	r2, [r3, #0]
 800f2a6:	4620      	mov	r0, r4
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	2104      	movs	r1, #4
 800f2ac:	f7ff ff94 	bl	800f1d8 <std>
 800f2b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f2b4:	2201      	movs	r2, #1
 800f2b6:	2109      	movs	r1, #9
 800f2b8:	f7ff ff8e 	bl	800f1d8 <std>
 800f2bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f2c0:	2202      	movs	r2, #2
 800f2c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2c6:	2112      	movs	r1, #18
 800f2c8:	f7ff bf86 	b.w	800f1d8 <std>
 800f2cc:	20008580 	.word	0x20008580
 800f2d0:	20008448 	.word	0x20008448
 800f2d4:	0800f245 	.word	0x0800f245

0800f2d8 <__sfp_lock_acquire>:
 800f2d8:	4801      	ldr	r0, [pc, #4]	@ (800f2e0 <__sfp_lock_acquire+0x8>)
 800f2da:	f000 b8a8 	b.w	800f42e <__retarget_lock_acquire_recursive>
 800f2de:	bf00      	nop
 800f2e0:	20008585 	.word	0x20008585

0800f2e4 <__sfp_lock_release>:
 800f2e4:	4801      	ldr	r0, [pc, #4]	@ (800f2ec <__sfp_lock_release+0x8>)
 800f2e6:	f000 b8a3 	b.w	800f430 <__retarget_lock_release_recursive>
 800f2ea:	bf00      	nop
 800f2ec:	20008585 	.word	0x20008585

0800f2f0 <__sinit>:
 800f2f0:	b510      	push	{r4, lr}
 800f2f2:	4604      	mov	r4, r0
 800f2f4:	f7ff fff0 	bl	800f2d8 <__sfp_lock_acquire>
 800f2f8:	6a23      	ldr	r3, [r4, #32]
 800f2fa:	b11b      	cbz	r3, 800f304 <__sinit+0x14>
 800f2fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f300:	f7ff bff0 	b.w	800f2e4 <__sfp_lock_release>
 800f304:	4b04      	ldr	r3, [pc, #16]	@ (800f318 <__sinit+0x28>)
 800f306:	6223      	str	r3, [r4, #32]
 800f308:	4b04      	ldr	r3, [pc, #16]	@ (800f31c <__sinit+0x2c>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d1f5      	bne.n	800f2fc <__sinit+0xc>
 800f310:	f7ff ffc4 	bl	800f29c <global_stdio_init.part.0>
 800f314:	e7f2      	b.n	800f2fc <__sinit+0xc>
 800f316:	bf00      	nop
 800f318:	0800f25d 	.word	0x0800f25d
 800f31c:	20008580 	.word	0x20008580

0800f320 <_fwalk_sglue>:
 800f320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f324:	4607      	mov	r7, r0
 800f326:	4688      	mov	r8, r1
 800f328:	4614      	mov	r4, r2
 800f32a:	2600      	movs	r6, #0
 800f32c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f330:	f1b9 0901 	subs.w	r9, r9, #1
 800f334:	d505      	bpl.n	800f342 <_fwalk_sglue+0x22>
 800f336:	6824      	ldr	r4, [r4, #0]
 800f338:	2c00      	cmp	r4, #0
 800f33a:	d1f7      	bne.n	800f32c <_fwalk_sglue+0xc>
 800f33c:	4630      	mov	r0, r6
 800f33e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f342:	89ab      	ldrh	r3, [r5, #12]
 800f344:	2b01      	cmp	r3, #1
 800f346:	d907      	bls.n	800f358 <_fwalk_sglue+0x38>
 800f348:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f34c:	3301      	adds	r3, #1
 800f34e:	d003      	beq.n	800f358 <_fwalk_sglue+0x38>
 800f350:	4629      	mov	r1, r5
 800f352:	4638      	mov	r0, r7
 800f354:	47c0      	blx	r8
 800f356:	4306      	orrs	r6, r0
 800f358:	3568      	adds	r5, #104	@ 0x68
 800f35a:	e7e9      	b.n	800f330 <_fwalk_sglue+0x10>

0800f35c <iprintf>:
 800f35c:	b40f      	push	{r0, r1, r2, r3}
 800f35e:	b507      	push	{r0, r1, r2, lr}
 800f360:	4906      	ldr	r1, [pc, #24]	@ (800f37c <iprintf+0x20>)
 800f362:	ab04      	add	r3, sp, #16
 800f364:	6808      	ldr	r0, [r1, #0]
 800f366:	f853 2b04 	ldr.w	r2, [r3], #4
 800f36a:	6881      	ldr	r1, [r0, #8]
 800f36c:	9301      	str	r3, [sp, #4]
 800f36e:	f000 fa59 	bl	800f824 <_vfiprintf_r>
 800f372:	b003      	add	sp, #12
 800f374:	f85d eb04 	ldr.w	lr, [sp], #4
 800f378:	b004      	add	sp, #16
 800f37a:	4770      	bx	lr
 800f37c:	20000038 	.word	0x20000038

0800f380 <memcmp>:
 800f380:	b510      	push	{r4, lr}
 800f382:	3901      	subs	r1, #1
 800f384:	4402      	add	r2, r0
 800f386:	4290      	cmp	r0, r2
 800f388:	d101      	bne.n	800f38e <memcmp+0xe>
 800f38a:	2000      	movs	r0, #0
 800f38c:	e005      	b.n	800f39a <memcmp+0x1a>
 800f38e:	7803      	ldrb	r3, [r0, #0]
 800f390:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f394:	42a3      	cmp	r3, r4
 800f396:	d001      	beq.n	800f39c <memcmp+0x1c>
 800f398:	1b18      	subs	r0, r3, r4
 800f39a:	bd10      	pop	{r4, pc}
 800f39c:	3001      	adds	r0, #1
 800f39e:	e7f2      	b.n	800f386 <memcmp+0x6>

0800f3a0 <memmove>:
 800f3a0:	4288      	cmp	r0, r1
 800f3a2:	b510      	push	{r4, lr}
 800f3a4:	eb01 0402 	add.w	r4, r1, r2
 800f3a8:	d902      	bls.n	800f3b0 <memmove+0x10>
 800f3aa:	4284      	cmp	r4, r0
 800f3ac:	4623      	mov	r3, r4
 800f3ae:	d807      	bhi.n	800f3c0 <memmove+0x20>
 800f3b0:	1e43      	subs	r3, r0, #1
 800f3b2:	42a1      	cmp	r1, r4
 800f3b4:	d008      	beq.n	800f3c8 <memmove+0x28>
 800f3b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f3ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f3be:	e7f8      	b.n	800f3b2 <memmove+0x12>
 800f3c0:	4402      	add	r2, r0
 800f3c2:	4601      	mov	r1, r0
 800f3c4:	428a      	cmp	r2, r1
 800f3c6:	d100      	bne.n	800f3ca <memmove+0x2a>
 800f3c8:	bd10      	pop	{r4, pc}
 800f3ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f3ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f3d2:	e7f7      	b.n	800f3c4 <memmove+0x24>

0800f3d4 <memset>:
 800f3d4:	4402      	add	r2, r0
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	4293      	cmp	r3, r2
 800f3da:	d100      	bne.n	800f3de <memset+0xa>
 800f3dc:	4770      	bx	lr
 800f3de:	f803 1b01 	strb.w	r1, [r3], #1
 800f3e2:	e7f9      	b.n	800f3d8 <memset+0x4>

0800f3e4 <__libc_init_array>:
 800f3e4:	b570      	push	{r4, r5, r6, lr}
 800f3e6:	4d0d      	ldr	r5, [pc, #52]	@ (800f41c <__libc_init_array+0x38>)
 800f3e8:	4c0d      	ldr	r4, [pc, #52]	@ (800f420 <__libc_init_array+0x3c>)
 800f3ea:	1b64      	subs	r4, r4, r5
 800f3ec:	10a4      	asrs	r4, r4, #2
 800f3ee:	2600      	movs	r6, #0
 800f3f0:	42a6      	cmp	r6, r4
 800f3f2:	d109      	bne.n	800f408 <__libc_init_array+0x24>
 800f3f4:	4d0b      	ldr	r5, [pc, #44]	@ (800f424 <__libc_init_array+0x40>)
 800f3f6:	4c0c      	ldr	r4, [pc, #48]	@ (800f428 <__libc_init_array+0x44>)
 800f3f8:	f001 f860 	bl	80104bc <_init>
 800f3fc:	1b64      	subs	r4, r4, r5
 800f3fe:	10a4      	asrs	r4, r4, #2
 800f400:	2600      	movs	r6, #0
 800f402:	42a6      	cmp	r6, r4
 800f404:	d105      	bne.n	800f412 <__libc_init_array+0x2e>
 800f406:	bd70      	pop	{r4, r5, r6, pc}
 800f408:	f855 3b04 	ldr.w	r3, [r5], #4
 800f40c:	4798      	blx	r3
 800f40e:	3601      	adds	r6, #1
 800f410:	e7ee      	b.n	800f3f0 <__libc_init_array+0xc>
 800f412:	f855 3b04 	ldr.w	r3, [r5], #4
 800f416:	4798      	blx	r3
 800f418:	3601      	adds	r6, #1
 800f41a:	e7f2      	b.n	800f402 <__libc_init_array+0x1e>
 800f41c:	08013314 	.word	0x08013314
 800f420:	08013314 	.word	0x08013314
 800f424:	08013314 	.word	0x08013314
 800f428:	08013318 	.word	0x08013318

0800f42c <__retarget_lock_init_recursive>:
 800f42c:	4770      	bx	lr

0800f42e <__retarget_lock_acquire_recursive>:
 800f42e:	4770      	bx	lr

0800f430 <__retarget_lock_release_recursive>:
 800f430:	4770      	bx	lr

0800f432 <memcpy>:
 800f432:	440a      	add	r2, r1
 800f434:	4291      	cmp	r1, r2
 800f436:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800f43a:	d100      	bne.n	800f43e <memcpy+0xc>
 800f43c:	4770      	bx	lr
 800f43e:	b510      	push	{r4, lr}
 800f440:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f444:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f448:	4291      	cmp	r1, r2
 800f44a:	d1f9      	bne.n	800f440 <memcpy+0xe>
 800f44c:	bd10      	pop	{r4, pc}
	...

0800f450 <__assert_func>:
 800f450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f452:	4614      	mov	r4, r2
 800f454:	461a      	mov	r2, r3
 800f456:	4b09      	ldr	r3, [pc, #36]	@ (800f47c <__assert_func+0x2c>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	4605      	mov	r5, r0
 800f45c:	68d8      	ldr	r0, [r3, #12]
 800f45e:	b14c      	cbz	r4, 800f474 <__assert_func+0x24>
 800f460:	4b07      	ldr	r3, [pc, #28]	@ (800f480 <__assert_func+0x30>)
 800f462:	9100      	str	r1, [sp, #0]
 800f464:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f468:	4906      	ldr	r1, [pc, #24]	@ (800f484 <__assert_func+0x34>)
 800f46a:	462b      	mov	r3, r5
 800f46c:	f000 fe24 	bl	80100b8 <fiprintf>
 800f470:	f000 ffd0 	bl	8010414 <abort>
 800f474:	4b04      	ldr	r3, [pc, #16]	@ (800f488 <__assert_func+0x38>)
 800f476:	461c      	mov	r4, r3
 800f478:	e7f3      	b.n	800f462 <__assert_func+0x12>
 800f47a:	bf00      	nop
 800f47c:	20000038 	.word	0x20000038
 800f480:	0801329d 	.word	0x0801329d
 800f484:	080132aa 	.word	0x080132aa
 800f488:	080132d8 	.word	0x080132d8

0800f48c <_free_r>:
 800f48c:	b538      	push	{r3, r4, r5, lr}
 800f48e:	4605      	mov	r5, r0
 800f490:	2900      	cmp	r1, #0
 800f492:	d041      	beq.n	800f518 <_free_r+0x8c>
 800f494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f498:	1f0c      	subs	r4, r1, #4
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	bfb8      	it	lt
 800f49e:	18e4      	addlt	r4, r4, r3
 800f4a0:	f000 fdba 	bl	8010018 <__malloc_lock>
 800f4a4:	4a1d      	ldr	r2, [pc, #116]	@ (800f51c <_free_r+0x90>)
 800f4a6:	6813      	ldr	r3, [r2, #0]
 800f4a8:	b933      	cbnz	r3, 800f4b8 <_free_r+0x2c>
 800f4aa:	6063      	str	r3, [r4, #4]
 800f4ac:	6014      	str	r4, [r2, #0]
 800f4ae:	4628      	mov	r0, r5
 800f4b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4b4:	f000 bdb6 	b.w	8010024 <__malloc_unlock>
 800f4b8:	42a3      	cmp	r3, r4
 800f4ba:	d908      	bls.n	800f4ce <_free_r+0x42>
 800f4bc:	6820      	ldr	r0, [r4, #0]
 800f4be:	1821      	adds	r1, r4, r0
 800f4c0:	428b      	cmp	r3, r1
 800f4c2:	bf01      	itttt	eq
 800f4c4:	6819      	ldreq	r1, [r3, #0]
 800f4c6:	685b      	ldreq	r3, [r3, #4]
 800f4c8:	1809      	addeq	r1, r1, r0
 800f4ca:	6021      	streq	r1, [r4, #0]
 800f4cc:	e7ed      	b.n	800f4aa <_free_r+0x1e>
 800f4ce:	461a      	mov	r2, r3
 800f4d0:	685b      	ldr	r3, [r3, #4]
 800f4d2:	b10b      	cbz	r3, 800f4d8 <_free_r+0x4c>
 800f4d4:	42a3      	cmp	r3, r4
 800f4d6:	d9fa      	bls.n	800f4ce <_free_r+0x42>
 800f4d8:	6811      	ldr	r1, [r2, #0]
 800f4da:	1850      	adds	r0, r2, r1
 800f4dc:	42a0      	cmp	r0, r4
 800f4de:	d10b      	bne.n	800f4f8 <_free_r+0x6c>
 800f4e0:	6820      	ldr	r0, [r4, #0]
 800f4e2:	4401      	add	r1, r0
 800f4e4:	1850      	adds	r0, r2, r1
 800f4e6:	4283      	cmp	r3, r0
 800f4e8:	6011      	str	r1, [r2, #0]
 800f4ea:	d1e0      	bne.n	800f4ae <_free_r+0x22>
 800f4ec:	6818      	ldr	r0, [r3, #0]
 800f4ee:	685b      	ldr	r3, [r3, #4]
 800f4f0:	6053      	str	r3, [r2, #4]
 800f4f2:	4408      	add	r0, r1
 800f4f4:	6010      	str	r0, [r2, #0]
 800f4f6:	e7da      	b.n	800f4ae <_free_r+0x22>
 800f4f8:	d902      	bls.n	800f500 <_free_r+0x74>
 800f4fa:	230c      	movs	r3, #12
 800f4fc:	602b      	str	r3, [r5, #0]
 800f4fe:	e7d6      	b.n	800f4ae <_free_r+0x22>
 800f500:	6820      	ldr	r0, [r4, #0]
 800f502:	1821      	adds	r1, r4, r0
 800f504:	428b      	cmp	r3, r1
 800f506:	bf04      	itt	eq
 800f508:	6819      	ldreq	r1, [r3, #0]
 800f50a:	685b      	ldreq	r3, [r3, #4]
 800f50c:	6063      	str	r3, [r4, #4]
 800f50e:	bf04      	itt	eq
 800f510:	1809      	addeq	r1, r1, r0
 800f512:	6021      	streq	r1, [r4, #0]
 800f514:	6054      	str	r4, [r2, #4]
 800f516:	e7ca      	b.n	800f4ae <_free_r+0x22>
 800f518:	bd38      	pop	{r3, r4, r5, pc}
 800f51a:	bf00      	nop
 800f51c:	20008590 	.word	0x20008590

0800f520 <__ssputs_r>:
 800f520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f524:	688e      	ldr	r6, [r1, #8]
 800f526:	461f      	mov	r7, r3
 800f528:	42be      	cmp	r6, r7
 800f52a:	680b      	ldr	r3, [r1, #0]
 800f52c:	4682      	mov	sl, r0
 800f52e:	460c      	mov	r4, r1
 800f530:	4690      	mov	r8, r2
 800f532:	d82d      	bhi.n	800f590 <__ssputs_r+0x70>
 800f534:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f538:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f53c:	d026      	beq.n	800f58c <__ssputs_r+0x6c>
 800f53e:	6965      	ldr	r5, [r4, #20]
 800f540:	6909      	ldr	r1, [r1, #16]
 800f542:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f546:	eba3 0901 	sub.w	r9, r3, r1
 800f54a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f54e:	1c7b      	adds	r3, r7, #1
 800f550:	444b      	add	r3, r9
 800f552:	106d      	asrs	r5, r5, #1
 800f554:	429d      	cmp	r5, r3
 800f556:	bf38      	it	cc
 800f558:	461d      	movcc	r5, r3
 800f55a:	0553      	lsls	r3, r2, #21
 800f55c:	d527      	bpl.n	800f5ae <__ssputs_r+0x8e>
 800f55e:	4629      	mov	r1, r5
 800f560:	f000 faa2 	bl	800faa8 <_malloc_r>
 800f564:	4606      	mov	r6, r0
 800f566:	b360      	cbz	r0, 800f5c2 <__ssputs_r+0xa2>
 800f568:	6921      	ldr	r1, [r4, #16]
 800f56a:	464a      	mov	r2, r9
 800f56c:	f7ff ff61 	bl	800f432 <memcpy>
 800f570:	89a3      	ldrh	r3, [r4, #12]
 800f572:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f576:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f57a:	81a3      	strh	r3, [r4, #12]
 800f57c:	6126      	str	r6, [r4, #16]
 800f57e:	6165      	str	r5, [r4, #20]
 800f580:	444e      	add	r6, r9
 800f582:	eba5 0509 	sub.w	r5, r5, r9
 800f586:	6026      	str	r6, [r4, #0]
 800f588:	60a5      	str	r5, [r4, #8]
 800f58a:	463e      	mov	r6, r7
 800f58c:	42be      	cmp	r6, r7
 800f58e:	d900      	bls.n	800f592 <__ssputs_r+0x72>
 800f590:	463e      	mov	r6, r7
 800f592:	6820      	ldr	r0, [r4, #0]
 800f594:	4632      	mov	r2, r6
 800f596:	4641      	mov	r1, r8
 800f598:	f7ff ff02 	bl	800f3a0 <memmove>
 800f59c:	68a3      	ldr	r3, [r4, #8]
 800f59e:	1b9b      	subs	r3, r3, r6
 800f5a0:	60a3      	str	r3, [r4, #8]
 800f5a2:	6823      	ldr	r3, [r4, #0]
 800f5a4:	4433      	add	r3, r6
 800f5a6:	6023      	str	r3, [r4, #0]
 800f5a8:	2000      	movs	r0, #0
 800f5aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5ae:	462a      	mov	r2, r5
 800f5b0:	f000 fd94 	bl	80100dc <_realloc_r>
 800f5b4:	4606      	mov	r6, r0
 800f5b6:	2800      	cmp	r0, #0
 800f5b8:	d1e0      	bne.n	800f57c <__ssputs_r+0x5c>
 800f5ba:	6921      	ldr	r1, [r4, #16]
 800f5bc:	4650      	mov	r0, sl
 800f5be:	f7ff ff65 	bl	800f48c <_free_r>
 800f5c2:	230c      	movs	r3, #12
 800f5c4:	f8ca 3000 	str.w	r3, [sl]
 800f5c8:	89a3      	ldrh	r3, [r4, #12]
 800f5ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f5ce:	81a3      	strh	r3, [r4, #12]
 800f5d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f5d4:	e7e9      	b.n	800f5aa <__ssputs_r+0x8a>
	...

0800f5d8 <_svfiprintf_r>:
 800f5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5dc:	4698      	mov	r8, r3
 800f5de:	898b      	ldrh	r3, [r1, #12]
 800f5e0:	061b      	lsls	r3, r3, #24
 800f5e2:	b09d      	sub	sp, #116	@ 0x74
 800f5e4:	4607      	mov	r7, r0
 800f5e6:	460d      	mov	r5, r1
 800f5e8:	4614      	mov	r4, r2
 800f5ea:	d510      	bpl.n	800f60e <_svfiprintf_r+0x36>
 800f5ec:	690b      	ldr	r3, [r1, #16]
 800f5ee:	b973      	cbnz	r3, 800f60e <_svfiprintf_r+0x36>
 800f5f0:	2140      	movs	r1, #64	@ 0x40
 800f5f2:	f000 fa59 	bl	800faa8 <_malloc_r>
 800f5f6:	6028      	str	r0, [r5, #0]
 800f5f8:	6128      	str	r0, [r5, #16]
 800f5fa:	b930      	cbnz	r0, 800f60a <_svfiprintf_r+0x32>
 800f5fc:	230c      	movs	r3, #12
 800f5fe:	603b      	str	r3, [r7, #0]
 800f600:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f604:	b01d      	add	sp, #116	@ 0x74
 800f606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f60a:	2340      	movs	r3, #64	@ 0x40
 800f60c:	616b      	str	r3, [r5, #20]
 800f60e:	2300      	movs	r3, #0
 800f610:	9309      	str	r3, [sp, #36]	@ 0x24
 800f612:	2320      	movs	r3, #32
 800f614:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f618:	f8cd 800c 	str.w	r8, [sp, #12]
 800f61c:	2330      	movs	r3, #48	@ 0x30
 800f61e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f7bc <_svfiprintf_r+0x1e4>
 800f622:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f626:	f04f 0901 	mov.w	r9, #1
 800f62a:	4623      	mov	r3, r4
 800f62c:	469a      	mov	sl, r3
 800f62e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f632:	b10a      	cbz	r2, 800f638 <_svfiprintf_r+0x60>
 800f634:	2a25      	cmp	r2, #37	@ 0x25
 800f636:	d1f9      	bne.n	800f62c <_svfiprintf_r+0x54>
 800f638:	ebba 0b04 	subs.w	fp, sl, r4
 800f63c:	d00b      	beq.n	800f656 <_svfiprintf_r+0x7e>
 800f63e:	465b      	mov	r3, fp
 800f640:	4622      	mov	r2, r4
 800f642:	4629      	mov	r1, r5
 800f644:	4638      	mov	r0, r7
 800f646:	f7ff ff6b 	bl	800f520 <__ssputs_r>
 800f64a:	3001      	adds	r0, #1
 800f64c:	f000 80a7 	beq.w	800f79e <_svfiprintf_r+0x1c6>
 800f650:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f652:	445a      	add	r2, fp
 800f654:	9209      	str	r2, [sp, #36]	@ 0x24
 800f656:	f89a 3000 	ldrb.w	r3, [sl]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	f000 809f 	beq.w	800f79e <_svfiprintf_r+0x1c6>
 800f660:	2300      	movs	r3, #0
 800f662:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f666:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f66a:	f10a 0a01 	add.w	sl, sl, #1
 800f66e:	9304      	str	r3, [sp, #16]
 800f670:	9307      	str	r3, [sp, #28]
 800f672:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f676:	931a      	str	r3, [sp, #104]	@ 0x68
 800f678:	4654      	mov	r4, sl
 800f67a:	2205      	movs	r2, #5
 800f67c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f680:	484e      	ldr	r0, [pc, #312]	@ (800f7bc <_svfiprintf_r+0x1e4>)
 800f682:	f7f0 fdad 	bl	80001e0 <memchr>
 800f686:	9a04      	ldr	r2, [sp, #16]
 800f688:	b9d8      	cbnz	r0, 800f6c2 <_svfiprintf_r+0xea>
 800f68a:	06d0      	lsls	r0, r2, #27
 800f68c:	bf44      	itt	mi
 800f68e:	2320      	movmi	r3, #32
 800f690:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f694:	0711      	lsls	r1, r2, #28
 800f696:	bf44      	itt	mi
 800f698:	232b      	movmi	r3, #43	@ 0x2b
 800f69a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f69e:	f89a 3000 	ldrb.w	r3, [sl]
 800f6a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800f6a4:	d015      	beq.n	800f6d2 <_svfiprintf_r+0xfa>
 800f6a6:	9a07      	ldr	r2, [sp, #28]
 800f6a8:	4654      	mov	r4, sl
 800f6aa:	2000      	movs	r0, #0
 800f6ac:	f04f 0c0a 	mov.w	ip, #10
 800f6b0:	4621      	mov	r1, r4
 800f6b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f6b6:	3b30      	subs	r3, #48	@ 0x30
 800f6b8:	2b09      	cmp	r3, #9
 800f6ba:	d94b      	bls.n	800f754 <_svfiprintf_r+0x17c>
 800f6bc:	b1b0      	cbz	r0, 800f6ec <_svfiprintf_r+0x114>
 800f6be:	9207      	str	r2, [sp, #28]
 800f6c0:	e014      	b.n	800f6ec <_svfiprintf_r+0x114>
 800f6c2:	eba0 0308 	sub.w	r3, r0, r8
 800f6c6:	fa09 f303 	lsl.w	r3, r9, r3
 800f6ca:	4313      	orrs	r3, r2
 800f6cc:	9304      	str	r3, [sp, #16]
 800f6ce:	46a2      	mov	sl, r4
 800f6d0:	e7d2      	b.n	800f678 <_svfiprintf_r+0xa0>
 800f6d2:	9b03      	ldr	r3, [sp, #12]
 800f6d4:	1d19      	adds	r1, r3, #4
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	9103      	str	r1, [sp, #12]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	bfbb      	ittet	lt
 800f6de:	425b      	neglt	r3, r3
 800f6e0:	f042 0202 	orrlt.w	r2, r2, #2
 800f6e4:	9307      	strge	r3, [sp, #28]
 800f6e6:	9307      	strlt	r3, [sp, #28]
 800f6e8:	bfb8      	it	lt
 800f6ea:	9204      	strlt	r2, [sp, #16]
 800f6ec:	7823      	ldrb	r3, [r4, #0]
 800f6ee:	2b2e      	cmp	r3, #46	@ 0x2e
 800f6f0:	d10a      	bne.n	800f708 <_svfiprintf_r+0x130>
 800f6f2:	7863      	ldrb	r3, [r4, #1]
 800f6f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800f6f6:	d132      	bne.n	800f75e <_svfiprintf_r+0x186>
 800f6f8:	9b03      	ldr	r3, [sp, #12]
 800f6fa:	1d1a      	adds	r2, r3, #4
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	9203      	str	r2, [sp, #12]
 800f700:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f704:	3402      	adds	r4, #2
 800f706:	9305      	str	r3, [sp, #20]
 800f708:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f7cc <_svfiprintf_r+0x1f4>
 800f70c:	7821      	ldrb	r1, [r4, #0]
 800f70e:	2203      	movs	r2, #3
 800f710:	4650      	mov	r0, sl
 800f712:	f7f0 fd65 	bl	80001e0 <memchr>
 800f716:	b138      	cbz	r0, 800f728 <_svfiprintf_r+0x150>
 800f718:	9b04      	ldr	r3, [sp, #16]
 800f71a:	eba0 000a 	sub.w	r0, r0, sl
 800f71e:	2240      	movs	r2, #64	@ 0x40
 800f720:	4082      	lsls	r2, r0
 800f722:	4313      	orrs	r3, r2
 800f724:	3401      	adds	r4, #1
 800f726:	9304      	str	r3, [sp, #16]
 800f728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f72c:	4824      	ldr	r0, [pc, #144]	@ (800f7c0 <_svfiprintf_r+0x1e8>)
 800f72e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f732:	2206      	movs	r2, #6
 800f734:	f7f0 fd54 	bl	80001e0 <memchr>
 800f738:	2800      	cmp	r0, #0
 800f73a:	d036      	beq.n	800f7aa <_svfiprintf_r+0x1d2>
 800f73c:	4b21      	ldr	r3, [pc, #132]	@ (800f7c4 <_svfiprintf_r+0x1ec>)
 800f73e:	bb1b      	cbnz	r3, 800f788 <_svfiprintf_r+0x1b0>
 800f740:	9b03      	ldr	r3, [sp, #12]
 800f742:	3307      	adds	r3, #7
 800f744:	f023 0307 	bic.w	r3, r3, #7
 800f748:	3308      	adds	r3, #8
 800f74a:	9303      	str	r3, [sp, #12]
 800f74c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f74e:	4433      	add	r3, r6
 800f750:	9309      	str	r3, [sp, #36]	@ 0x24
 800f752:	e76a      	b.n	800f62a <_svfiprintf_r+0x52>
 800f754:	fb0c 3202 	mla	r2, ip, r2, r3
 800f758:	460c      	mov	r4, r1
 800f75a:	2001      	movs	r0, #1
 800f75c:	e7a8      	b.n	800f6b0 <_svfiprintf_r+0xd8>
 800f75e:	2300      	movs	r3, #0
 800f760:	3401      	adds	r4, #1
 800f762:	9305      	str	r3, [sp, #20]
 800f764:	4619      	mov	r1, r3
 800f766:	f04f 0c0a 	mov.w	ip, #10
 800f76a:	4620      	mov	r0, r4
 800f76c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f770:	3a30      	subs	r2, #48	@ 0x30
 800f772:	2a09      	cmp	r2, #9
 800f774:	d903      	bls.n	800f77e <_svfiprintf_r+0x1a6>
 800f776:	2b00      	cmp	r3, #0
 800f778:	d0c6      	beq.n	800f708 <_svfiprintf_r+0x130>
 800f77a:	9105      	str	r1, [sp, #20]
 800f77c:	e7c4      	b.n	800f708 <_svfiprintf_r+0x130>
 800f77e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f782:	4604      	mov	r4, r0
 800f784:	2301      	movs	r3, #1
 800f786:	e7f0      	b.n	800f76a <_svfiprintf_r+0x192>
 800f788:	ab03      	add	r3, sp, #12
 800f78a:	9300      	str	r3, [sp, #0]
 800f78c:	462a      	mov	r2, r5
 800f78e:	4b0e      	ldr	r3, [pc, #56]	@ (800f7c8 <_svfiprintf_r+0x1f0>)
 800f790:	a904      	add	r1, sp, #16
 800f792:	4638      	mov	r0, r7
 800f794:	f3af 8000 	nop.w
 800f798:	1c42      	adds	r2, r0, #1
 800f79a:	4606      	mov	r6, r0
 800f79c:	d1d6      	bne.n	800f74c <_svfiprintf_r+0x174>
 800f79e:	89ab      	ldrh	r3, [r5, #12]
 800f7a0:	065b      	lsls	r3, r3, #25
 800f7a2:	f53f af2d 	bmi.w	800f600 <_svfiprintf_r+0x28>
 800f7a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f7a8:	e72c      	b.n	800f604 <_svfiprintf_r+0x2c>
 800f7aa:	ab03      	add	r3, sp, #12
 800f7ac:	9300      	str	r3, [sp, #0]
 800f7ae:	462a      	mov	r2, r5
 800f7b0:	4b05      	ldr	r3, [pc, #20]	@ (800f7c8 <_svfiprintf_r+0x1f0>)
 800f7b2:	a904      	add	r1, sp, #16
 800f7b4:	4638      	mov	r0, r7
 800f7b6:	f000 fa65 	bl	800fc84 <_printf_i>
 800f7ba:	e7ed      	b.n	800f798 <_svfiprintf_r+0x1c0>
 800f7bc:	080132d9 	.word	0x080132d9
 800f7c0:	080132e3 	.word	0x080132e3
 800f7c4:	00000000 	.word	0x00000000
 800f7c8:	0800f521 	.word	0x0800f521
 800f7cc:	080132df 	.word	0x080132df

0800f7d0 <__sfputc_r>:
 800f7d0:	6893      	ldr	r3, [r2, #8]
 800f7d2:	3b01      	subs	r3, #1
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	b410      	push	{r4}
 800f7d8:	6093      	str	r3, [r2, #8]
 800f7da:	da08      	bge.n	800f7ee <__sfputc_r+0x1e>
 800f7dc:	6994      	ldr	r4, [r2, #24]
 800f7de:	42a3      	cmp	r3, r4
 800f7e0:	db01      	blt.n	800f7e6 <__sfputc_r+0x16>
 800f7e2:	290a      	cmp	r1, #10
 800f7e4:	d103      	bne.n	800f7ee <__sfputc_r+0x1e>
 800f7e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7ea:	f000 bca5 	b.w	8010138 <__swbuf_r>
 800f7ee:	6813      	ldr	r3, [r2, #0]
 800f7f0:	1c58      	adds	r0, r3, #1
 800f7f2:	6010      	str	r0, [r2, #0]
 800f7f4:	7019      	strb	r1, [r3, #0]
 800f7f6:	4608      	mov	r0, r1
 800f7f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7fc:	4770      	bx	lr

0800f7fe <__sfputs_r>:
 800f7fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f800:	4606      	mov	r6, r0
 800f802:	460f      	mov	r7, r1
 800f804:	4614      	mov	r4, r2
 800f806:	18d5      	adds	r5, r2, r3
 800f808:	42ac      	cmp	r4, r5
 800f80a:	d101      	bne.n	800f810 <__sfputs_r+0x12>
 800f80c:	2000      	movs	r0, #0
 800f80e:	e007      	b.n	800f820 <__sfputs_r+0x22>
 800f810:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f814:	463a      	mov	r2, r7
 800f816:	4630      	mov	r0, r6
 800f818:	f7ff ffda 	bl	800f7d0 <__sfputc_r>
 800f81c:	1c43      	adds	r3, r0, #1
 800f81e:	d1f3      	bne.n	800f808 <__sfputs_r+0xa>
 800f820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f824 <_vfiprintf_r>:
 800f824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f828:	460d      	mov	r5, r1
 800f82a:	b09d      	sub	sp, #116	@ 0x74
 800f82c:	4614      	mov	r4, r2
 800f82e:	4698      	mov	r8, r3
 800f830:	4606      	mov	r6, r0
 800f832:	b118      	cbz	r0, 800f83c <_vfiprintf_r+0x18>
 800f834:	6a03      	ldr	r3, [r0, #32]
 800f836:	b90b      	cbnz	r3, 800f83c <_vfiprintf_r+0x18>
 800f838:	f7ff fd5a 	bl	800f2f0 <__sinit>
 800f83c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f83e:	07d9      	lsls	r1, r3, #31
 800f840:	d405      	bmi.n	800f84e <_vfiprintf_r+0x2a>
 800f842:	89ab      	ldrh	r3, [r5, #12]
 800f844:	059a      	lsls	r2, r3, #22
 800f846:	d402      	bmi.n	800f84e <_vfiprintf_r+0x2a>
 800f848:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f84a:	f7ff fdf0 	bl	800f42e <__retarget_lock_acquire_recursive>
 800f84e:	89ab      	ldrh	r3, [r5, #12]
 800f850:	071b      	lsls	r3, r3, #28
 800f852:	d501      	bpl.n	800f858 <_vfiprintf_r+0x34>
 800f854:	692b      	ldr	r3, [r5, #16]
 800f856:	b99b      	cbnz	r3, 800f880 <_vfiprintf_r+0x5c>
 800f858:	4629      	mov	r1, r5
 800f85a:	4630      	mov	r0, r6
 800f85c:	f000 fcaa 	bl	80101b4 <__swsetup_r>
 800f860:	b170      	cbz	r0, 800f880 <_vfiprintf_r+0x5c>
 800f862:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f864:	07dc      	lsls	r4, r3, #31
 800f866:	d504      	bpl.n	800f872 <_vfiprintf_r+0x4e>
 800f868:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f86c:	b01d      	add	sp, #116	@ 0x74
 800f86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f872:	89ab      	ldrh	r3, [r5, #12]
 800f874:	0598      	lsls	r0, r3, #22
 800f876:	d4f7      	bmi.n	800f868 <_vfiprintf_r+0x44>
 800f878:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f87a:	f7ff fdd9 	bl	800f430 <__retarget_lock_release_recursive>
 800f87e:	e7f3      	b.n	800f868 <_vfiprintf_r+0x44>
 800f880:	2300      	movs	r3, #0
 800f882:	9309      	str	r3, [sp, #36]	@ 0x24
 800f884:	2320      	movs	r3, #32
 800f886:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f88a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f88e:	2330      	movs	r3, #48	@ 0x30
 800f890:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fa40 <_vfiprintf_r+0x21c>
 800f894:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f898:	f04f 0901 	mov.w	r9, #1
 800f89c:	4623      	mov	r3, r4
 800f89e:	469a      	mov	sl, r3
 800f8a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8a4:	b10a      	cbz	r2, 800f8aa <_vfiprintf_r+0x86>
 800f8a6:	2a25      	cmp	r2, #37	@ 0x25
 800f8a8:	d1f9      	bne.n	800f89e <_vfiprintf_r+0x7a>
 800f8aa:	ebba 0b04 	subs.w	fp, sl, r4
 800f8ae:	d00b      	beq.n	800f8c8 <_vfiprintf_r+0xa4>
 800f8b0:	465b      	mov	r3, fp
 800f8b2:	4622      	mov	r2, r4
 800f8b4:	4629      	mov	r1, r5
 800f8b6:	4630      	mov	r0, r6
 800f8b8:	f7ff ffa1 	bl	800f7fe <__sfputs_r>
 800f8bc:	3001      	adds	r0, #1
 800f8be:	f000 80a7 	beq.w	800fa10 <_vfiprintf_r+0x1ec>
 800f8c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f8c4:	445a      	add	r2, fp
 800f8c6:	9209      	str	r2, [sp, #36]	@ 0x24
 800f8c8:	f89a 3000 	ldrb.w	r3, [sl]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	f000 809f 	beq.w	800fa10 <_vfiprintf_r+0x1ec>
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f8d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f8dc:	f10a 0a01 	add.w	sl, sl, #1
 800f8e0:	9304      	str	r3, [sp, #16]
 800f8e2:	9307      	str	r3, [sp, #28]
 800f8e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f8e8:	931a      	str	r3, [sp, #104]	@ 0x68
 800f8ea:	4654      	mov	r4, sl
 800f8ec:	2205      	movs	r2, #5
 800f8ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8f2:	4853      	ldr	r0, [pc, #332]	@ (800fa40 <_vfiprintf_r+0x21c>)
 800f8f4:	f7f0 fc74 	bl	80001e0 <memchr>
 800f8f8:	9a04      	ldr	r2, [sp, #16]
 800f8fa:	b9d8      	cbnz	r0, 800f934 <_vfiprintf_r+0x110>
 800f8fc:	06d1      	lsls	r1, r2, #27
 800f8fe:	bf44      	itt	mi
 800f900:	2320      	movmi	r3, #32
 800f902:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f906:	0713      	lsls	r3, r2, #28
 800f908:	bf44      	itt	mi
 800f90a:	232b      	movmi	r3, #43	@ 0x2b
 800f90c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f910:	f89a 3000 	ldrb.w	r3, [sl]
 800f914:	2b2a      	cmp	r3, #42	@ 0x2a
 800f916:	d015      	beq.n	800f944 <_vfiprintf_r+0x120>
 800f918:	9a07      	ldr	r2, [sp, #28]
 800f91a:	4654      	mov	r4, sl
 800f91c:	2000      	movs	r0, #0
 800f91e:	f04f 0c0a 	mov.w	ip, #10
 800f922:	4621      	mov	r1, r4
 800f924:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f928:	3b30      	subs	r3, #48	@ 0x30
 800f92a:	2b09      	cmp	r3, #9
 800f92c:	d94b      	bls.n	800f9c6 <_vfiprintf_r+0x1a2>
 800f92e:	b1b0      	cbz	r0, 800f95e <_vfiprintf_r+0x13a>
 800f930:	9207      	str	r2, [sp, #28]
 800f932:	e014      	b.n	800f95e <_vfiprintf_r+0x13a>
 800f934:	eba0 0308 	sub.w	r3, r0, r8
 800f938:	fa09 f303 	lsl.w	r3, r9, r3
 800f93c:	4313      	orrs	r3, r2
 800f93e:	9304      	str	r3, [sp, #16]
 800f940:	46a2      	mov	sl, r4
 800f942:	e7d2      	b.n	800f8ea <_vfiprintf_r+0xc6>
 800f944:	9b03      	ldr	r3, [sp, #12]
 800f946:	1d19      	adds	r1, r3, #4
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	9103      	str	r1, [sp, #12]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	bfbb      	ittet	lt
 800f950:	425b      	neglt	r3, r3
 800f952:	f042 0202 	orrlt.w	r2, r2, #2
 800f956:	9307      	strge	r3, [sp, #28]
 800f958:	9307      	strlt	r3, [sp, #28]
 800f95a:	bfb8      	it	lt
 800f95c:	9204      	strlt	r2, [sp, #16]
 800f95e:	7823      	ldrb	r3, [r4, #0]
 800f960:	2b2e      	cmp	r3, #46	@ 0x2e
 800f962:	d10a      	bne.n	800f97a <_vfiprintf_r+0x156>
 800f964:	7863      	ldrb	r3, [r4, #1]
 800f966:	2b2a      	cmp	r3, #42	@ 0x2a
 800f968:	d132      	bne.n	800f9d0 <_vfiprintf_r+0x1ac>
 800f96a:	9b03      	ldr	r3, [sp, #12]
 800f96c:	1d1a      	adds	r2, r3, #4
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	9203      	str	r2, [sp, #12]
 800f972:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f976:	3402      	adds	r4, #2
 800f978:	9305      	str	r3, [sp, #20]
 800f97a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fa50 <_vfiprintf_r+0x22c>
 800f97e:	7821      	ldrb	r1, [r4, #0]
 800f980:	2203      	movs	r2, #3
 800f982:	4650      	mov	r0, sl
 800f984:	f7f0 fc2c 	bl	80001e0 <memchr>
 800f988:	b138      	cbz	r0, 800f99a <_vfiprintf_r+0x176>
 800f98a:	9b04      	ldr	r3, [sp, #16]
 800f98c:	eba0 000a 	sub.w	r0, r0, sl
 800f990:	2240      	movs	r2, #64	@ 0x40
 800f992:	4082      	lsls	r2, r0
 800f994:	4313      	orrs	r3, r2
 800f996:	3401      	adds	r4, #1
 800f998:	9304      	str	r3, [sp, #16]
 800f99a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f99e:	4829      	ldr	r0, [pc, #164]	@ (800fa44 <_vfiprintf_r+0x220>)
 800f9a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f9a4:	2206      	movs	r2, #6
 800f9a6:	f7f0 fc1b 	bl	80001e0 <memchr>
 800f9aa:	2800      	cmp	r0, #0
 800f9ac:	d03f      	beq.n	800fa2e <_vfiprintf_r+0x20a>
 800f9ae:	4b26      	ldr	r3, [pc, #152]	@ (800fa48 <_vfiprintf_r+0x224>)
 800f9b0:	bb1b      	cbnz	r3, 800f9fa <_vfiprintf_r+0x1d6>
 800f9b2:	9b03      	ldr	r3, [sp, #12]
 800f9b4:	3307      	adds	r3, #7
 800f9b6:	f023 0307 	bic.w	r3, r3, #7
 800f9ba:	3308      	adds	r3, #8
 800f9bc:	9303      	str	r3, [sp, #12]
 800f9be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9c0:	443b      	add	r3, r7
 800f9c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9c4:	e76a      	b.n	800f89c <_vfiprintf_r+0x78>
 800f9c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800f9ca:	460c      	mov	r4, r1
 800f9cc:	2001      	movs	r0, #1
 800f9ce:	e7a8      	b.n	800f922 <_vfiprintf_r+0xfe>
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	3401      	adds	r4, #1
 800f9d4:	9305      	str	r3, [sp, #20]
 800f9d6:	4619      	mov	r1, r3
 800f9d8:	f04f 0c0a 	mov.w	ip, #10
 800f9dc:	4620      	mov	r0, r4
 800f9de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9e2:	3a30      	subs	r2, #48	@ 0x30
 800f9e4:	2a09      	cmp	r2, #9
 800f9e6:	d903      	bls.n	800f9f0 <_vfiprintf_r+0x1cc>
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d0c6      	beq.n	800f97a <_vfiprintf_r+0x156>
 800f9ec:	9105      	str	r1, [sp, #20]
 800f9ee:	e7c4      	b.n	800f97a <_vfiprintf_r+0x156>
 800f9f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f9f4:	4604      	mov	r4, r0
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	e7f0      	b.n	800f9dc <_vfiprintf_r+0x1b8>
 800f9fa:	ab03      	add	r3, sp, #12
 800f9fc:	9300      	str	r3, [sp, #0]
 800f9fe:	462a      	mov	r2, r5
 800fa00:	4b12      	ldr	r3, [pc, #72]	@ (800fa4c <_vfiprintf_r+0x228>)
 800fa02:	a904      	add	r1, sp, #16
 800fa04:	4630      	mov	r0, r6
 800fa06:	f3af 8000 	nop.w
 800fa0a:	4607      	mov	r7, r0
 800fa0c:	1c78      	adds	r0, r7, #1
 800fa0e:	d1d6      	bne.n	800f9be <_vfiprintf_r+0x19a>
 800fa10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fa12:	07d9      	lsls	r1, r3, #31
 800fa14:	d405      	bmi.n	800fa22 <_vfiprintf_r+0x1fe>
 800fa16:	89ab      	ldrh	r3, [r5, #12]
 800fa18:	059a      	lsls	r2, r3, #22
 800fa1a:	d402      	bmi.n	800fa22 <_vfiprintf_r+0x1fe>
 800fa1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fa1e:	f7ff fd07 	bl	800f430 <__retarget_lock_release_recursive>
 800fa22:	89ab      	ldrh	r3, [r5, #12]
 800fa24:	065b      	lsls	r3, r3, #25
 800fa26:	f53f af1f 	bmi.w	800f868 <_vfiprintf_r+0x44>
 800fa2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fa2c:	e71e      	b.n	800f86c <_vfiprintf_r+0x48>
 800fa2e:	ab03      	add	r3, sp, #12
 800fa30:	9300      	str	r3, [sp, #0]
 800fa32:	462a      	mov	r2, r5
 800fa34:	4b05      	ldr	r3, [pc, #20]	@ (800fa4c <_vfiprintf_r+0x228>)
 800fa36:	a904      	add	r1, sp, #16
 800fa38:	4630      	mov	r0, r6
 800fa3a:	f000 f923 	bl	800fc84 <_printf_i>
 800fa3e:	e7e4      	b.n	800fa0a <_vfiprintf_r+0x1e6>
 800fa40:	080132d9 	.word	0x080132d9
 800fa44:	080132e3 	.word	0x080132e3
 800fa48:	00000000 	.word	0x00000000
 800fa4c:	0800f7ff 	.word	0x0800f7ff
 800fa50:	080132df 	.word	0x080132df

0800fa54 <malloc>:
 800fa54:	4b02      	ldr	r3, [pc, #8]	@ (800fa60 <malloc+0xc>)
 800fa56:	4601      	mov	r1, r0
 800fa58:	6818      	ldr	r0, [r3, #0]
 800fa5a:	f000 b825 	b.w	800faa8 <_malloc_r>
 800fa5e:	bf00      	nop
 800fa60:	20000038 	.word	0x20000038

0800fa64 <sbrk_aligned>:
 800fa64:	b570      	push	{r4, r5, r6, lr}
 800fa66:	4e0f      	ldr	r6, [pc, #60]	@ (800faa4 <sbrk_aligned+0x40>)
 800fa68:	460c      	mov	r4, r1
 800fa6a:	6831      	ldr	r1, [r6, #0]
 800fa6c:	4605      	mov	r5, r0
 800fa6e:	b911      	cbnz	r1, 800fa76 <sbrk_aligned+0x12>
 800fa70:	f000 fc8c 	bl	801038c <_sbrk_r>
 800fa74:	6030      	str	r0, [r6, #0]
 800fa76:	4621      	mov	r1, r4
 800fa78:	4628      	mov	r0, r5
 800fa7a:	f000 fc87 	bl	801038c <_sbrk_r>
 800fa7e:	1c43      	adds	r3, r0, #1
 800fa80:	d103      	bne.n	800fa8a <sbrk_aligned+0x26>
 800fa82:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800fa86:	4620      	mov	r0, r4
 800fa88:	bd70      	pop	{r4, r5, r6, pc}
 800fa8a:	1cc4      	adds	r4, r0, #3
 800fa8c:	f024 0403 	bic.w	r4, r4, #3
 800fa90:	42a0      	cmp	r0, r4
 800fa92:	d0f8      	beq.n	800fa86 <sbrk_aligned+0x22>
 800fa94:	1a21      	subs	r1, r4, r0
 800fa96:	4628      	mov	r0, r5
 800fa98:	f000 fc78 	bl	801038c <_sbrk_r>
 800fa9c:	3001      	adds	r0, #1
 800fa9e:	d1f2      	bne.n	800fa86 <sbrk_aligned+0x22>
 800faa0:	e7ef      	b.n	800fa82 <sbrk_aligned+0x1e>
 800faa2:	bf00      	nop
 800faa4:	2000858c 	.word	0x2000858c

0800faa8 <_malloc_r>:
 800faa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800faac:	1ccd      	adds	r5, r1, #3
 800faae:	f025 0503 	bic.w	r5, r5, #3
 800fab2:	3508      	adds	r5, #8
 800fab4:	2d0c      	cmp	r5, #12
 800fab6:	bf38      	it	cc
 800fab8:	250c      	movcc	r5, #12
 800faba:	2d00      	cmp	r5, #0
 800fabc:	4606      	mov	r6, r0
 800fabe:	db01      	blt.n	800fac4 <_malloc_r+0x1c>
 800fac0:	42a9      	cmp	r1, r5
 800fac2:	d904      	bls.n	800face <_malloc_r+0x26>
 800fac4:	230c      	movs	r3, #12
 800fac6:	6033      	str	r3, [r6, #0]
 800fac8:	2000      	movs	r0, #0
 800faca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800face:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fba4 <_malloc_r+0xfc>
 800fad2:	f000 faa1 	bl	8010018 <__malloc_lock>
 800fad6:	f8d8 3000 	ldr.w	r3, [r8]
 800fada:	461c      	mov	r4, r3
 800fadc:	bb44      	cbnz	r4, 800fb30 <_malloc_r+0x88>
 800fade:	4629      	mov	r1, r5
 800fae0:	4630      	mov	r0, r6
 800fae2:	f7ff ffbf 	bl	800fa64 <sbrk_aligned>
 800fae6:	1c43      	adds	r3, r0, #1
 800fae8:	4604      	mov	r4, r0
 800faea:	d158      	bne.n	800fb9e <_malloc_r+0xf6>
 800faec:	f8d8 4000 	ldr.w	r4, [r8]
 800faf0:	4627      	mov	r7, r4
 800faf2:	2f00      	cmp	r7, #0
 800faf4:	d143      	bne.n	800fb7e <_malloc_r+0xd6>
 800faf6:	2c00      	cmp	r4, #0
 800faf8:	d04b      	beq.n	800fb92 <_malloc_r+0xea>
 800fafa:	6823      	ldr	r3, [r4, #0]
 800fafc:	4639      	mov	r1, r7
 800fafe:	4630      	mov	r0, r6
 800fb00:	eb04 0903 	add.w	r9, r4, r3
 800fb04:	f000 fc42 	bl	801038c <_sbrk_r>
 800fb08:	4581      	cmp	r9, r0
 800fb0a:	d142      	bne.n	800fb92 <_malloc_r+0xea>
 800fb0c:	6821      	ldr	r1, [r4, #0]
 800fb0e:	1a6d      	subs	r5, r5, r1
 800fb10:	4629      	mov	r1, r5
 800fb12:	4630      	mov	r0, r6
 800fb14:	f7ff ffa6 	bl	800fa64 <sbrk_aligned>
 800fb18:	3001      	adds	r0, #1
 800fb1a:	d03a      	beq.n	800fb92 <_malloc_r+0xea>
 800fb1c:	6823      	ldr	r3, [r4, #0]
 800fb1e:	442b      	add	r3, r5
 800fb20:	6023      	str	r3, [r4, #0]
 800fb22:	f8d8 3000 	ldr.w	r3, [r8]
 800fb26:	685a      	ldr	r2, [r3, #4]
 800fb28:	bb62      	cbnz	r2, 800fb84 <_malloc_r+0xdc>
 800fb2a:	f8c8 7000 	str.w	r7, [r8]
 800fb2e:	e00f      	b.n	800fb50 <_malloc_r+0xa8>
 800fb30:	6822      	ldr	r2, [r4, #0]
 800fb32:	1b52      	subs	r2, r2, r5
 800fb34:	d420      	bmi.n	800fb78 <_malloc_r+0xd0>
 800fb36:	2a0b      	cmp	r2, #11
 800fb38:	d917      	bls.n	800fb6a <_malloc_r+0xc2>
 800fb3a:	1961      	adds	r1, r4, r5
 800fb3c:	42a3      	cmp	r3, r4
 800fb3e:	6025      	str	r5, [r4, #0]
 800fb40:	bf18      	it	ne
 800fb42:	6059      	strne	r1, [r3, #4]
 800fb44:	6863      	ldr	r3, [r4, #4]
 800fb46:	bf08      	it	eq
 800fb48:	f8c8 1000 	streq.w	r1, [r8]
 800fb4c:	5162      	str	r2, [r4, r5]
 800fb4e:	604b      	str	r3, [r1, #4]
 800fb50:	4630      	mov	r0, r6
 800fb52:	f000 fa67 	bl	8010024 <__malloc_unlock>
 800fb56:	f104 000b 	add.w	r0, r4, #11
 800fb5a:	1d23      	adds	r3, r4, #4
 800fb5c:	f020 0007 	bic.w	r0, r0, #7
 800fb60:	1ac2      	subs	r2, r0, r3
 800fb62:	bf1c      	itt	ne
 800fb64:	1a1b      	subne	r3, r3, r0
 800fb66:	50a3      	strne	r3, [r4, r2]
 800fb68:	e7af      	b.n	800faca <_malloc_r+0x22>
 800fb6a:	6862      	ldr	r2, [r4, #4]
 800fb6c:	42a3      	cmp	r3, r4
 800fb6e:	bf0c      	ite	eq
 800fb70:	f8c8 2000 	streq.w	r2, [r8]
 800fb74:	605a      	strne	r2, [r3, #4]
 800fb76:	e7eb      	b.n	800fb50 <_malloc_r+0xa8>
 800fb78:	4623      	mov	r3, r4
 800fb7a:	6864      	ldr	r4, [r4, #4]
 800fb7c:	e7ae      	b.n	800fadc <_malloc_r+0x34>
 800fb7e:	463c      	mov	r4, r7
 800fb80:	687f      	ldr	r7, [r7, #4]
 800fb82:	e7b6      	b.n	800faf2 <_malloc_r+0x4a>
 800fb84:	461a      	mov	r2, r3
 800fb86:	685b      	ldr	r3, [r3, #4]
 800fb88:	42a3      	cmp	r3, r4
 800fb8a:	d1fb      	bne.n	800fb84 <_malloc_r+0xdc>
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	6053      	str	r3, [r2, #4]
 800fb90:	e7de      	b.n	800fb50 <_malloc_r+0xa8>
 800fb92:	230c      	movs	r3, #12
 800fb94:	6033      	str	r3, [r6, #0]
 800fb96:	4630      	mov	r0, r6
 800fb98:	f000 fa44 	bl	8010024 <__malloc_unlock>
 800fb9c:	e794      	b.n	800fac8 <_malloc_r+0x20>
 800fb9e:	6005      	str	r5, [r0, #0]
 800fba0:	e7d6      	b.n	800fb50 <_malloc_r+0xa8>
 800fba2:	bf00      	nop
 800fba4:	20008590 	.word	0x20008590

0800fba8 <_printf_common>:
 800fba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbac:	4616      	mov	r6, r2
 800fbae:	4698      	mov	r8, r3
 800fbb0:	688a      	ldr	r2, [r1, #8]
 800fbb2:	690b      	ldr	r3, [r1, #16]
 800fbb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fbb8:	4293      	cmp	r3, r2
 800fbba:	bfb8      	it	lt
 800fbbc:	4613      	movlt	r3, r2
 800fbbe:	6033      	str	r3, [r6, #0]
 800fbc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fbc4:	4607      	mov	r7, r0
 800fbc6:	460c      	mov	r4, r1
 800fbc8:	b10a      	cbz	r2, 800fbce <_printf_common+0x26>
 800fbca:	3301      	adds	r3, #1
 800fbcc:	6033      	str	r3, [r6, #0]
 800fbce:	6823      	ldr	r3, [r4, #0]
 800fbd0:	0699      	lsls	r1, r3, #26
 800fbd2:	bf42      	ittt	mi
 800fbd4:	6833      	ldrmi	r3, [r6, #0]
 800fbd6:	3302      	addmi	r3, #2
 800fbd8:	6033      	strmi	r3, [r6, #0]
 800fbda:	6825      	ldr	r5, [r4, #0]
 800fbdc:	f015 0506 	ands.w	r5, r5, #6
 800fbe0:	d106      	bne.n	800fbf0 <_printf_common+0x48>
 800fbe2:	f104 0a19 	add.w	sl, r4, #25
 800fbe6:	68e3      	ldr	r3, [r4, #12]
 800fbe8:	6832      	ldr	r2, [r6, #0]
 800fbea:	1a9b      	subs	r3, r3, r2
 800fbec:	42ab      	cmp	r3, r5
 800fbee:	dc26      	bgt.n	800fc3e <_printf_common+0x96>
 800fbf0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fbf4:	6822      	ldr	r2, [r4, #0]
 800fbf6:	3b00      	subs	r3, #0
 800fbf8:	bf18      	it	ne
 800fbfa:	2301      	movne	r3, #1
 800fbfc:	0692      	lsls	r2, r2, #26
 800fbfe:	d42b      	bmi.n	800fc58 <_printf_common+0xb0>
 800fc00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fc04:	4641      	mov	r1, r8
 800fc06:	4638      	mov	r0, r7
 800fc08:	47c8      	blx	r9
 800fc0a:	3001      	adds	r0, #1
 800fc0c:	d01e      	beq.n	800fc4c <_printf_common+0xa4>
 800fc0e:	6823      	ldr	r3, [r4, #0]
 800fc10:	6922      	ldr	r2, [r4, #16]
 800fc12:	f003 0306 	and.w	r3, r3, #6
 800fc16:	2b04      	cmp	r3, #4
 800fc18:	bf02      	ittt	eq
 800fc1a:	68e5      	ldreq	r5, [r4, #12]
 800fc1c:	6833      	ldreq	r3, [r6, #0]
 800fc1e:	1aed      	subeq	r5, r5, r3
 800fc20:	68a3      	ldr	r3, [r4, #8]
 800fc22:	bf0c      	ite	eq
 800fc24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fc28:	2500      	movne	r5, #0
 800fc2a:	4293      	cmp	r3, r2
 800fc2c:	bfc4      	itt	gt
 800fc2e:	1a9b      	subgt	r3, r3, r2
 800fc30:	18ed      	addgt	r5, r5, r3
 800fc32:	2600      	movs	r6, #0
 800fc34:	341a      	adds	r4, #26
 800fc36:	42b5      	cmp	r5, r6
 800fc38:	d11a      	bne.n	800fc70 <_printf_common+0xc8>
 800fc3a:	2000      	movs	r0, #0
 800fc3c:	e008      	b.n	800fc50 <_printf_common+0xa8>
 800fc3e:	2301      	movs	r3, #1
 800fc40:	4652      	mov	r2, sl
 800fc42:	4641      	mov	r1, r8
 800fc44:	4638      	mov	r0, r7
 800fc46:	47c8      	blx	r9
 800fc48:	3001      	adds	r0, #1
 800fc4a:	d103      	bne.n	800fc54 <_printf_common+0xac>
 800fc4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fc50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc54:	3501      	adds	r5, #1
 800fc56:	e7c6      	b.n	800fbe6 <_printf_common+0x3e>
 800fc58:	18e1      	adds	r1, r4, r3
 800fc5a:	1c5a      	adds	r2, r3, #1
 800fc5c:	2030      	movs	r0, #48	@ 0x30
 800fc5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fc62:	4422      	add	r2, r4
 800fc64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fc68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fc6c:	3302      	adds	r3, #2
 800fc6e:	e7c7      	b.n	800fc00 <_printf_common+0x58>
 800fc70:	2301      	movs	r3, #1
 800fc72:	4622      	mov	r2, r4
 800fc74:	4641      	mov	r1, r8
 800fc76:	4638      	mov	r0, r7
 800fc78:	47c8      	blx	r9
 800fc7a:	3001      	adds	r0, #1
 800fc7c:	d0e6      	beq.n	800fc4c <_printf_common+0xa4>
 800fc7e:	3601      	adds	r6, #1
 800fc80:	e7d9      	b.n	800fc36 <_printf_common+0x8e>
	...

0800fc84 <_printf_i>:
 800fc84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc88:	7e0f      	ldrb	r7, [r1, #24]
 800fc8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fc8c:	2f78      	cmp	r7, #120	@ 0x78
 800fc8e:	4691      	mov	r9, r2
 800fc90:	4680      	mov	r8, r0
 800fc92:	460c      	mov	r4, r1
 800fc94:	469a      	mov	sl, r3
 800fc96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fc9a:	d807      	bhi.n	800fcac <_printf_i+0x28>
 800fc9c:	2f62      	cmp	r7, #98	@ 0x62
 800fc9e:	d80a      	bhi.n	800fcb6 <_printf_i+0x32>
 800fca0:	2f00      	cmp	r7, #0
 800fca2:	f000 80d1 	beq.w	800fe48 <_printf_i+0x1c4>
 800fca6:	2f58      	cmp	r7, #88	@ 0x58
 800fca8:	f000 80b8 	beq.w	800fe1c <_printf_i+0x198>
 800fcac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fcb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fcb4:	e03a      	b.n	800fd2c <_printf_i+0xa8>
 800fcb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fcba:	2b15      	cmp	r3, #21
 800fcbc:	d8f6      	bhi.n	800fcac <_printf_i+0x28>
 800fcbe:	a101      	add	r1, pc, #4	@ (adr r1, 800fcc4 <_printf_i+0x40>)
 800fcc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fcc4:	0800fd1d 	.word	0x0800fd1d
 800fcc8:	0800fd31 	.word	0x0800fd31
 800fccc:	0800fcad 	.word	0x0800fcad
 800fcd0:	0800fcad 	.word	0x0800fcad
 800fcd4:	0800fcad 	.word	0x0800fcad
 800fcd8:	0800fcad 	.word	0x0800fcad
 800fcdc:	0800fd31 	.word	0x0800fd31
 800fce0:	0800fcad 	.word	0x0800fcad
 800fce4:	0800fcad 	.word	0x0800fcad
 800fce8:	0800fcad 	.word	0x0800fcad
 800fcec:	0800fcad 	.word	0x0800fcad
 800fcf0:	0800fe2f 	.word	0x0800fe2f
 800fcf4:	0800fd5b 	.word	0x0800fd5b
 800fcf8:	0800fde9 	.word	0x0800fde9
 800fcfc:	0800fcad 	.word	0x0800fcad
 800fd00:	0800fcad 	.word	0x0800fcad
 800fd04:	0800fe51 	.word	0x0800fe51
 800fd08:	0800fcad 	.word	0x0800fcad
 800fd0c:	0800fd5b 	.word	0x0800fd5b
 800fd10:	0800fcad 	.word	0x0800fcad
 800fd14:	0800fcad 	.word	0x0800fcad
 800fd18:	0800fdf1 	.word	0x0800fdf1
 800fd1c:	6833      	ldr	r3, [r6, #0]
 800fd1e:	1d1a      	adds	r2, r3, #4
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	6032      	str	r2, [r6, #0]
 800fd24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fd28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fd2c:	2301      	movs	r3, #1
 800fd2e:	e09c      	b.n	800fe6a <_printf_i+0x1e6>
 800fd30:	6833      	ldr	r3, [r6, #0]
 800fd32:	6820      	ldr	r0, [r4, #0]
 800fd34:	1d19      	adds	r1, r3, #4
 800fd36:	6031      	str	r1, [r6, #0]
 800fd38:	0606      	lsls	r6, r0, #24
 800fd3a:	d501      	bpl.n	800fd40 <_printf_i+0xbc>
 800fd3c:	681d      	ldr	r5, [r3, #0]
 800fd3e:	e003      	b.n	800fd48 <_printf_i+0xc4>
 800fd40:	0645      	lsls	r5, r0, #25
 800fd42:	d5fb      	bpl.n	800fd3c <_printf_i+0xb8>
 800fd44:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fd48:	2d00      	cmp	r5, #0
 800fd4a:	da03      	bge.n	800fd54 <_printf_i+0xd0>
 800fd4c:	232d      	movs	r3, #45	@ 0x2d
 800fd4e:	426d      	negs	r5, r5
 800fd50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd54:	4858      	ldr	r0, [pc, #352]	@ (800feb8 <_printf_i+0x234>)
 800fd56:	230a      	movs	r3, #10
 800fd58:	e011      	b.n	800fd7e <_printf_i+0xfa>
 800fd5a:	6821      	ldr	r1, [r4, #0]
 800fd5c:	6833      	ldr	r3, [r6, #0]
 800fd5e:	0608      	lsls	r0, r1, #24
 800fd60:	f853 5b04 	ldr.w	r5, [r3], #4
 800fd64:	d402      	bmi.n	800fd6c <_printf_i+0xe8>
 800fd66:	0649      	lsls	r1, r1, #25
 800fd68:	bf48      	it	mi
 800fd6a:	b2ad      	uxthmi	r5, r5
 800fd6c:	2f6f      	cmp	r7, #111	@ 0x6f
 800fd6e:	4852      	ldr	r0, [pc, #328]	@ (800feb8 <_printf_i+0x234>)
 800fd70:	6033      	str	r3, [r6, #0]
 800fd72:	bf14      	ite	ne
 800fd74:	230a      	movne	r3, #10
 800fd76:	2308      	moveq	r3, #8
 800fd78:	2100      	movs	r1, #0
 800fd7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fd7e:	6866      	ldr	r6, [r4, #4]
 800fd80:	60a6      	str	r6, [r4, #8]
 800fd82:	2e00      	cmp	r6, #0
 800fd84:	db05      	blt.n	800fd92 <_printf_i+0x10e>
 800fd86:	6821      	ldr	r1, [r4, #0]
 800fd88:	432e      	orrs	r6, r5
 800fd8a:	f021 0104 	bic.w	r1, r1, #4
 800fd8e:	6021      	str	r1, [r4, #0]
 800fd90:	d04b      	beq.n	800fe2a <_printf_i+0x1a6>
 800fd92:	4616      	mov	r6, r2
 800fd94:	fbb5 f1f3 	udiv	r1, r5, r3
 800fd98:	fb03 5711 	mls	r7, r3, r1, r5
 800fd9c:	5dc7      	ldrb	r7, [r0, r7]
 800fd9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fda2:	462f      	mov	r7, r5
 800fda4:	42bb      	cmp	r3, r7
 800fda6:	460d      	mov	r5, r1
 800fda8:	d9f4      	bls.n	800fd94 <_printf_i+0x110>
 800fdaa:	2b08      	cmp	r3, #8
 800fdac:	d10b      	bne.n	800fdc6 <_printf_i+0x142>
 800fdae:	6823      	ldr	r3, [r4, #0]
 800fdb0:	07df      	lsls	r7, r3, #31
 800fdb2:	d508      	bpl.n	800fdc6 <_printf_i+0x142>
 800fdb4:	6923      	ldr	r3, [r4, #16]
 800fdb6:	6861      	ldr	r1, [r4, #4]
 800fdb8:	4299      	cmp	r1, r3
 800fdba:	bfde      	ittt	le
 800fdbc:	2330      	movle	r3, #48	@ 0x30
 800fdbe:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fdc2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800fdc6:	1b92      	subs	r2, r2, r6
 800fdc8:	6122      	str	r2, [r4, #16]
 800fdca:	f8cd a000 	str.w	sl, [sp]
 800fdce:	464b      	mov	r3, r9
 800fdd0:	aa03      	add	r2, sp, #12
 800fdd2:	4621      	mov	r1, r4
 800fdd4:	4640      	mov	r0, r8
 800fdd6:	f7ff fee7 	bl	800fba8 <_printf_common>
 800fdda:	3001      	adds	r0, #1
 800fddc:	d14a      	bne.n	800fe74 <_printf_i+0x1f0>
 800fdde:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fde2:	b004      	add	sp, #16
 800fde4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fde8:	6823      	ldr	r3, [r4, #0]
 800fdea:	f043 0320 	orr.w	r3, r3, #32
 800fdee:	6023      	str	r3, [r4, #0]
 800fdf0:	4832      	ldr	r0, [pc, #200]	@ (800febc <_printf_i+0x238>)
 800fdf2:	2778      	movs	r7, #120	@ 0x78
 800fdf4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fdf8:	6823      	ldr	r3, [r4, #0]
 800fdfa:	6831      	ldr	r1, [r6, #0]
 800fdfc:	061f      	lsls	r7, r3, #24
 800fdfe:	f851 5b04 	ldr.w	r5, [r1], #4
 800fe02:	d402      	bmi.n	800fe0a <_printf_i+0x186>
 800fe04:	065f      	lsls	r7, r3, #25
 800fe06:	bf48      	it	mi
 800fe08:	b2ad      	uxthmi	r5, r5
 800fe0a:	6031      	str	r1, [r6, #0]
 800fe0c:	07d9      	lsls	r1, r3, #31
 800fe0e:	bf44      	itt	mi
 800fe10:	f043 0320 	orrmi.w	r3, r3, #32
 800fe14:	6023      	strmi	r3, [r4, #0]
 800fe16:	b11d      	cbz	r5, 800fe20 <_printf_i+0x19c>
 800fe18:	2310      	movs	r3, #16
 800fe1a:	e7ad      	b.n	800fd78 <_printf_i+0xf4>
 800fe1c:	4826      	ldr	r0, [pc, #152]	@ (800feb8 <_printf_i+0x234>)
 800fe1e:	e7e9      	b.n	800fdf4 <_printf_i+0x170>
 800fe20:	6823      	ldr	r3, [r4, #0]
 800fe22:	f023 0320 	bic.w	r3, r3, #32
 800fe26:	6023      	str	r3, [r4, #0]
 800fe28:	e7f6      	b.n	800fe18 <_printf_i+0x194>
 800fe2a:	4616      	mov	r6, r2
 800fe2c:	e7bd      	b.n	800fdaa <_printf_i+0x126>
 800fe2e:	6833      	ldr	r3, [r6, #0]
 800fe30:	6825      	ldr	r5, [r4, #0]
 800fe32:	6961      	ldr	r1, [r4, #20]
 800fe34:	1d18      	adds	r0, r3, #4
 800fe36:	6030      	str	r0, [r6, #0]
 800fe38:	062e      	lsls	r6, r5, #24
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	d501      	bpl.n	800fe42 <_printf_i+0x1be>
 800fe3e:	6019      	str	r1, [r3, #0]
 800fe40:	e002      	b.n	800fe48 <_printf_i+0x1c4>
 800fe42:	0668      	lsls	r0, r5, #25
 800fe44:	d5fb      	bpl.n	800fe3e <_printf_i+0x1ba>
 800fe46:	8019      	strh	r1, [r3, #0]
 800fe48:	2300      	movs	r3, #0
 800fe4a:	6123      	str	r3, [r4, #16]
 800fe4c:	4616      	mov	r6, r2
 800fe4e:	e7bc      	b.n	800fdca <_printf_i+0x146>
 800fe50:	6833      	ldr	r3, [r6, #0]
 800fe52:	1d1a      	adds	r2, r3, #4
 800fe54:	6032      	str	r2, [r6, #0]
 800fe56:	681e      	ldr	r6, [r3, #0]
 800fe58:	6862      	ldr	r2, [r4, #4]
 800fe5a:	2100      	movs	r1, #0
 800fe5c:	4630      	mov	r0, r6
 800fe5e:	f7f0 f9bf 	bl	80001e0 <memchr>
 800fe62:	b108      	cbz	r0, 800fe68 <_printf_i+0x1e4>
 800fe64:	1b80      	subs	r0, r0, r6
 800fe66:	6060      	str	r0, [r4, #4]
 800fe68:	6863      	ldr	r3, [r4, #4]
 800fe6a:	6123      	str	r3, [r4, #16]
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fe72:	e7aa      	b.n	800fdca <_printf_i+0x146>
 800fe74:	6923      	ldr	r3, [r4, #16]
 800fe76:	4632      	mov	r2, r6
 800fe78:	4649      	mov	r1, r9
 800fe7a:	4640      	mov	r0, r8
 800fe7c:	47d0      	blx	sl
 800fe7e:	3001      	adds	r0, #1
 800fe80:	d0ad      	beq.n	800fdde <_printf_i+0x15a>
 800fe82:	6823      	ldr	r3, [r4, #0]
 800fe84:	079b      	lsls	r3, r3, #30
 800fe86:	d413      	bmi.n	800feb0 <_printf_i+0x22c>
 800fe88:	68e0      	ldr	r0, [r4, #12]
 800fe8a:	9b03      	ldr	r3, [sp, #12]
 800fe8c:	4298      	cmp	r0, r3
 800fe8e:	bfb8      	it	lt
 800fe90:	4618      	movlt	r0, r3
 800fe92:	e7a6      	b.n	800fde2 <_printf_i+0x15e>
 800fe94:	2301      	movs	r3, #1
 800fe96:	4632      	mov	r2, r6
 800fe98:	4649      	mov	r1, r9
 800fe9a:	4640      	mov	r0, r8
 800fe9c:	47d0      	blx	sl
 800fe9e:	3001      	adds	r0, #1
 800fea0:	d09d      	beq.n	800fdde <_printf_i+0x15a>
 800fea2:	3501      	adds	r5, #1
 800fea4:	68e3      	ldr	r3, [r4, #12]
 800fea6:	9903      	ldr	r1, [sp, #12]
 800fea8:	1a5b      	subs	r3, r3, r1
 800feaa:	42ab      	cmp	r3, r5
 800feac:	dcf2      	bgt.n	800fe94 <_printf_i+0x210>
 800feae:	e7eb      	b.n	800fe88 <_printf_i+0x204>
 800feb0:	2500      	movs	r5, #0
 800feb2:	f104 0619 	add.w	r6, r4, #25
 800feb6:	e7f5      	b.n	800fea4 <_printf_i+0x220>
 800feb8:	080132ea 	.word	0x080132ea
 800febc:	080132fb 	.word	0x080132fb

0800fec0 <__sflush_r>:
 800fec0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fec8:	0716      	lsls	r6, r2, #28
 800feca:	4605      	mov	r5, r0
 800fecc:	460c      	mov	r4, r1
 800fece:	d454      	bmi.n	800ff7a <__sflush_r+0xba>
 800fed0:	684b      	ldr	r3, [r1, #4]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	dc02      	bgt.n	800fedc <__sflush_r+0x1c>
 800fed6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fed8:	2b00      	cmp	r3, #0
 800feda:	dd48      	ble.n	800ff6e <__sflush_r+0xae>
 800fedc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fede:	2e00      	cmp	r6, #0
 800fee0:	d045      	beq.n	800ff6e <__sflush_r+0xae>
 800fee2:	2300      	movs	r3, #0
 800fee4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fee8:	682f      	ldr	r7, [r5, #0]
 800feea:	6a21      	ldr	r1, [r4, #32]
 800feec:	602b      	str	r3, [r5, #0]
 800feee:	d030      	beq.n	800ff52 <__sflush_r+0x92>
 800fef0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fef2:	89a3      	ldrh	r3, [r4, #12]
 800fef4:	0759      	lsls	r1, r3, #29
 800fef6:	d505      	bpl.n	800ff04 <__sflush_r+0x44>
 800fef8:	6863      	ldr	r3, [r4, #4]
 800fefa:	1ad2      	subs	r2, r2, r3
 800fefc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fefe:	b10b      	cbz	r3, 800ff04 <__sflush_r+0x44>
 800ff00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ff02:	1ad2      	subs	r2, r2, r3
 800ff04:	2300      	movs	r3, #0
 800ff06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ff08:	6a21      	ldr	r1, [r4, #32]
 800ff0a:	4628      	mov	r0, r5
 800ff0c:	47b0      	blx	r6
 800ff0e:	1c43      	adds	r3, r0, #1
 800ff10:	89a3      	ldrh	r3, [r4, #12]
 800ff12:	d106      	bne.n	800ff22 <__sflush_r+0x62>
 800ff14:	6829      	ldr	r1, [r5, #0]
 800ff16:	291d      	cmp	r1, #29
 800ff18:	d82b      	bhi.n	800ff72 <__sflush_r+0xb2>
 800ff1a:	4a2a      	ldr	r2, [pc, #168]	@ (800ffc4 <__sflush_r+0x104>)
 800ff1c:	40ca      	lsrs	r2, r1
 800ff1e:	07d6      	lsls	r6, r2, #31
 800ff20:	d527      	bpl.n	800ff72 <__sflush_r+0xb2>
 800ff22:	2200      	movs	r2, #0
 800ff24:	6062      	str	r2, [r4, #4]
 800ff26:	04d9      	lsls	r1, r3, #19
 800ff28:	6922      	ldr	r2, [r4, #16]
 800ff2a:	6022      	str	r2, [r4, #0]
 800ff2c:	d504      	bpl.n	800ff38 <__sflush_r+0x78>
 800ff2e:	1c42      	adds	r2, r0, #1
 800ff30:	d101      	bne.n	800ff36 <__sflush_r+0x76>
 800ff32:	682b      	ldr	r3, [r5, #0]
 800ff34:	b903      	cbnz	r3, 800ff38 <__sflush_r+0x78>
 800ff36:	6560      	str	r0, [r4, #84]	@ 0x54
 800ff38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ff3a:	602f      	str	r7, [r5, #0]
 800ff3c:	b1b9      	cbz	r1, 800ff6e <__sflush_r+0xae>
 800ff3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ff42:	4299      	cmp	r1, r3
 800ff44:	d002      	beq.n	800ff4c <__sflush_r+0x8c>
 800ff46:	4628      	mov	r0, r5
 800ff48:	f7ff faa0 	bl	800f48c <_free_r>
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ff50:	e00d      	b.n	800ff6e <__sflush_r+0xae>
 800ff52:	2301      	movs	r3, #1
 800ff54:	4628      	mov	r0, r5
 800ff56:	47b0      	blx	r6
 800ff58:	4602      	mov	r2, r0
 800ff5a:	1c50      	adds	r0, r2, #1
 800ff5c:	d1c9      	bne.n	800fef2 <__sflush_r+0x32>
 800ff5e:	682b      	ldr	r3, [r5, #0]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d0c6      	beq.n	800fef2 <__sflush_r+0x32>
 800ff64:	2b1d      	cmp	r3, #29
 800ff66:	d001      	beq.n	800ff6c <__sflush_r+0xac>
 800ff68:	2b16      	cmp	r3, #22
 800ff6a:	d11e      	bne.n	800ffaa <__sflush_r+0xea>
 800ff6c:	602f      	str	r7, [r5, #0]
 800ff6e:	2000      	movs	r0, #0
 800ff70:	e022      	b.n	800ffb8 <__sflush_r+0xf8>
 800ff72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff76:	b21b      	sxth	r3, r3
 800ff78:	e01b      	b.n	800ffb2 <__sflush_r+0xf2>
 800ff7a:	690f      	ldr	r7, [r1, #16]
 800ff7c:	2f00      	cmp	r7, #0
 800ff7e:	d0f6      	beq.n	800ff6e <__sflush_r+0xae>
 800ff80:	0793      	lsls	r3, r2, #30
 800ff82:	680e      	ldr	r6, [r1, #0]
 800ff84:	bf08      	it	eq
 800ff86:	694b      	ldreq	r3, [r1, #20]
 800ff88:	600f      	str	r7, [r1, #0]
 800ff8a:	bf18      	it	ne
 800ff8c:	2300      	movne	r3, #0
 800ff8e:	eba6 0807 	sub.w	r8, r6, r7
 800ff92:	608b      	str	r3, [r1, #8]
 800ff94:	f1b8 0f00 	cmp.w	r8, #0
 800ff98:	dde9      	ble.n	800ff6e <__sflush_r+0xae>
 800ff9a:	6a21      	ldr	r1, [r4, #32]
 800ff9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ff9e:	4643      	mov	r3, r8
 800ffa0:	463a      	mov	r2, r7
 800ffa2:	4628      	mov	r0, r5
 800ffa4:	47b0      	blx	r6
 800ffa6:	2800      	cmp	r0, #0
 800ffa8:	dc08      	bgt.n	800ffbc <__sflush_r+0xfc>
 800ffaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ffb2:	81a3      	strh	r3, [r4, #12]
 800ffb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ffb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffbc:	4407      	add	r7, r0
 800ffbe:	eba8 0800 	sub.w	r8, r8, r0
 800ffc2:	e7e7      	b.n	800ff94 <__sflush_r+0xd4>
 800ffc4:	20400001 	.word	0x20400001

0800ffc8 <_fflush_r>:
 800ffc8:	b538      	push	{r3, r4, r5, lr}
 800ffca:	690b      	ldr	r3, [r1, #16]
 800ffcc:	4605      	mov	r5, r0
 800ffce:	460c      	mov	r4, r1
 800ffd0:	b913      	cbnz	r3, 800ffd8 <_fflush_r+0x10>
 800ffd2:	2500      	movs	r5, #0
 800ffd4:	4628      	mov	r0, r5
 800ffd6:	bd38      	pop	{r3, r4, r5, pc}
 800ffd8:	b118      	cbz	r0, 800ffe2 <_fflush_r+0x1a>
 800ffda:	6a03      	ldr	r3, [r0, #32]
 800ffdc:	b90b      	cbnz	r3, 800ffe2 <_fflush_r+0x1a>
 800ffde:	f7ff f987 	bl	800f2f0 <__sinit>
 800ffe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d0f3      	beq.n	800ffd2 <_fflush_r+0xa>
 800ffea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ffec:	07d0      	lsls	r0, r2, #31
 800ffee:	d404      	bmi.n	800fffa <_fflush_r+0x32>
 800fff0:	0599      	lsls	r1, r3, #22
 800fff2:	d402      	bmi.n	800fffa <_fflush_r+0x32>
 800fff4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fff6:	f7ff fa1a 	bl	800f42e <__retarget_lock_acquire_recursive>
 800fffa:	4628      	mov	r0, r5
 800fffc:	4621      	mov	r1, r4
 800fffe:	f7ff ff5f 	bl	800fec0 <__sflush_r>
 8010002:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010004:	07da      	lsls	r2, r3, #31
 8010006:	4605      	mov	r5, r0
 8010008:	d4e4      	bmi.n	800ffd4 <_fflush_r+0xc>
 801000a:	89a3      	ldrh	r3, [r4, #12]
 801000c:	059b      	lsls	r3, r3, #22
 801000e:	d4e1      	bmi.n	800ffd4 <_fflush_r+0xc>
 8010010:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010012:	f7ff fa0d 	bl	800f430 <__retarget_lock_release_recursive>
 8010016:	e7dd      	b.n	800ffd4 <_fflush_r+0xc>

08010018 <__malloc_lock>:
 8010018:	4801      	ldr	r0, [pc, #4]	@ (8010020 <__malloc_lock+0x8>)
 801001a:	f7ff ba08 	b.w	800f42e <__retarget_lock_acquire_recursive>
 801001e:	bf00      	nop
 8010020:	20008584 	.word	0x20008584

08010024 <__malloc_unlock>:
 8010024:	4801      	ldr	r0, [pc, #4]	@ (801002c <__malloc_unlock+0x8>)
 8010026:	f7ff ba03 	b.w	800f430 <__retarget_lock_release_recursive>
 801002a:	bf00      	nop
 801002c:	20008584 	.word	0x20008584

08010030 <__sread>:
 8010030:	b510      	push	{r4, lr}
 8010032:	460c      	mov	r4, r1
 8010034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010038:	f000 f996 	bl	8010368 <_read_r>
 801003c:	2800      	cmp	r0, #0
 801003e:	bfab      	itete	ge
 8010040:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010042:	89a3      	ldrhlt	r3, [r4, #12]
 8010044:	181b      	addge	r3, r3, r0
 8010046:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801004a:	bfac      	ite	ge
 801004c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801004e:	81a3      	strhlt	r3, [r4, #12]
 8010050:	bd10      	pop	{r4, pc}

08010052 <__swrite>:
 8010052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010056:	461f      	mov	r7, r3
 8010058:	898b      	ldrh	r3, [r1, #12]
 801005a:	05db      	lsls	r3, r3, #23
 801005c:	4605      	mov	r5, r0
 801005e:	460c      	mov	r4, r1
 8010060:	4616      	mov	r6, r2
 8010062:	d505      	bpl.n	8010070 <__swrite+0x1e>
 8010064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010068:	2302      	movs	r3, #2
 801006a:	2200      	movs	r2, #0
 801006c:	f000 f96a 	bl	8010344 <_lseek_r>
 8010070:	89a3      	ldrh	r3, [r4, #12]
 8010072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010076:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801007a:	81a3      	strh	r3, [r4, #12]
 801007c:	4632      	mov	r2, r6
 801007e:	463b      	mov	r3, r7
 8010080:	4628      	mov	r0, r5
 8010082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010086:	f000 b991 	b.w	80103ac <_write_r>

0801008a <__sseek>:
 801008a:	b510      	push	{r4, lr}
 801008c:	460c      	mov	r4, r1
 801008e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010092:	f000 f957 	bl	8010344 <_lseek_r>
 8010096:	1c43      	adds	r3, r0, #1
 8010098:	89a3      	ldrh	r3, [r4, #12]
 801009a:	bf15      	itete	ne
 801009c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801009e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80100a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80100a6:	81a3      	strheq	r3, [r4, #12]
 80100a8:	bf18      	it	ne
 80100aa:	81a3      	strhne	r3, [r4, #12]
 80100ac:	bd10      	pop	{r4, pc}

080100ae <__sclose>:
 80100ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100b2:	f000 b98d 	b.w	80103d0 <_close_r>
	...

080100b8 <fiprintf>:
 80100b8:	b40e      	push	{r1, r2, r3}
 80100ba:	b503      	push	{r0, r1, lr}
 80100bc:	4601      	mov	r1, r0
 80100be:	ab03      	add	r3, sp, #12
 80100c0:	4805      	ldr	r0, [pc, #20]	@ (80100d8 <fiprintf+0x20>)
 80100c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80100c6:	6800      	ldr	r0, [r0, #0]
 80100c8:	9301      	str	r3, [sp, #4]
 80100ca:	f7ff fbab 	bl	800f824 <_vfiprintf_r>
 80100ce:	b002      	add	sp, #8
 80100d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80100d4:	b003      	add	sp, #12
 80100d6:	4770      	bx	lr
 80100d8:	20000038 	.word	0x20000038

080100dc <_realloc_r>:
 80100dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100e0:	4607      	mov	r7, r0
 80100e2:	4614      	mov	r4, r2
 80100e4:	460d      	mov	r5, r1
 80100e6:	b921      	cbnz	r1, 80100f2 <_realloc_r+0x16>
 80100e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100ec:	4611      	mov	r1, r2
 80100ee:	f7ff bcdb 	b.w	800faa8 <_malloc_r>
 80100f2:	b92a      	cbnz	r2, 8010100 <_realloc_r+0x24>
 80100f4:	f7ff f9ca 	bl	800f48c <_free_r>
 80100f8:	4625      	mov	r5, r4
 80100fa:	4628      	mov	r0, r5
 80100fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010100:	f000 f98f 	bl	8010422 <_malloc_usable_size_r>
 8010104:	4284      	cmp	r4, r0
 8010106:	4606      	mov	r6, r0
 8010108:	d802      	bhi.n	8010110 <_realloc_r+0x34>
 801010a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801010e:	d8f4      	bhi.n	80100fa <_realloc_r+0x1e>
 8010110:	4621      	mov	r1, r4
 8010112:	4638      	mov	r0, r7
 8010114:	f7ff fcc8 	bl	800faa8 <_malloc_r>
 8010118:	4680      	mov	r8, r0
 801011a:	b908      	cbnz	r0, 8010120 <_realloc_r+0x44>
 801011c:	4645      	mov	r5, r8
 801011e:	e7ec      	b.n	80100fa <_realloc_r+0x1e>
 8010120:	42b4      	cmp	r4, r6
 8010122:	4622      	mov	r2, r4
 8010124:	4629      	mov	r1, r5
 8010126:	bf28      	it	cs
 8010128:	4632      	movcs	r2, r6
 801012a:	f7ff f982 	bl	800f432 <memcpy>
 801012e:	4629      	mov	r1, r5
 8010130:	4638      	mov	r0, r7
 8010132:	f7ff f9ab 	bl	800f48c <_free_r>
 8010136:	e7f1      	b.n	801011c <_realloc_r+0x40>

08010138 <__swbuf_r>:
 8010138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801013a:	460e      	mov	r6, r1
 801013c:	4614      	mov	r4, r2
 801013e:	4605      	mov	r5, r0
 8010140:	b118      	cbz	r0, 801014a <__swbuf_r+0x12>
 8010142:	6a03      	ldr	r3, [r0, #32]
 8010144:	b90b      	cbnz	r3, 801014a <__swbuf_r+0x12>
 8010146:	f7ff f8d3 	bl	800f2f0 <__sinit>
 801014a:	69a3      	ldr	r3, [r4, #24]
 801014c:	60a3      	str	r3, [r4, #8]
 801014e:	89a3      	ldrh	r3, [r4, #12]
 8010150:	071a      	lsls	r2, r3, #28
 8010152:	d501      	bpl.n	8010158 <__swbuf_r+0x20>
 8010154:	6923      	ldr	r3, [r4, #16]
 8010156:	b943      	cbnz	r3, 801016a <__swbuf_r+0x32>
 8010158:	4621      	mov	r1, r4
 801015a:	4628      	mov	r0, r5
 801015c:	f000 f82a 	bl	80101b4 <__swsetup_r>
 8010160:	b118      	cbz	r0, 801016a <__swbuf_r+0x32>
 8010162:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8010166:	4638      	mov	r0, r7
 8010168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801016a:	6823      	ldr	r3, [r4, #0]
 801016c:	6922      	ldr	r2, [r4, #16]
 801016e:	1a98      	subs	r0, r3, r2
 8010170:	6963      	ldr	r3, [r4, #20]
 8010172:	b2f6      	uxtb	r6, r6
 8010174:	4283      	cmp	r3, r0
 8010176:	4637      	mov	r7, r6
 8010178:	dc05      	bgt.n	8010186 <__swbuf_r+0x4e>
 801017a:	4621      	mov	r1, r4
 801017c:	4628      	mov	r0, r5
 801017e:	f7ff ff23 	bl	800ffc8 <_fflush_r>
 8010182:	2800      	cmp	r0, #0
 8010184:	d1ed      	bne.n	8010162 <__swbuf_r+0x2a>
 8010186:	68a3      	ldr	r3, [r4, #8]
 8010188:	3b01      	subs	r3, #1
 801018a:	60a3      	str	r3, [r4, #8]
 801018c:	6823      	ldr	r3, [r4, #0]
 801018e:	1c5a      	adds	r2, r3, #1
 8010190:	6022      	str	r2, [r4, #0]
 8010192:	701e      	strb	r6, [r3, #0]
 8010194:	6962      	ldr	r2, [r4, #20]
 8010196:	1c43      	adds	r3, r0, #1
 8010198:	429a      	cmp	r2, r3
 801019a:	d004      	beq.n	80101a6 <__swbuf_r+0x6e>
 801019c:	89a3      	ldrh	r3, [r4, #12]
 801019e:	07db      	lsls	r3, r3, #31
 80101a0:	d5e1      	bpl.n	8010166 <__swbuf_r+0x2e>
 80101a2:	2e0a      	cmp	r6, #10
 80101a4:	d1df      	bne.n	8010166 <__swbuf_r+0x2e>
 80101a6:	4621      	mov	r1, r4
 80101a8:	4628      	mov	r0, r5
 80101aa:	f7ff ff0d 	bl	800ffc8 <_fflush_r>
 80101ae:	2800      	cmp	r0, #0
 80101b0:	d0d9      	beq.n	8010166 <__swbuf_r+0x2e>
 80101b2:	e7d6      	b.n	8010162 <__swbuf_r+0x2a>

080101b4 <__swsetup_r>:
 80101b4:	b538      	push	{r3, r4, r5, lr}
 80101b6:	4b29      	ldr	r3, [pc, #164]	@ (801025c <__swsetup_r+0xa8>)
 80101b8:	4605      	mov	r5, r0
 80101ba:	6818      	ldr	r0, [r3, #0]
 80101bc:	460c      	mov	r4, r1
 80101be:	b118      	cbz	r0, 80101c8 <__swsetup_r+0x14>
 80101c0:	6a03      	ldr	r3, [r0, #32]
 80101c2:	b90b      	cbnz	r3, 80101c8 <__swsetup_r+0x14>
 80101c4:	f7ff f894 	bl	800f2f0 <__sinit>
 80101c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101cc:	0719      	lsls	r1, r3, #28
 80101ce:	d422      	bmi.n	8010216 <__swsetup_r+0x62>
 80101d0:	06da      	lsls	r2, r3, #27
 80101d2:	d407      	bmi.n	80101e4 <__swsetup_r+0x30>
 80101d4:	2209      	movs	r2, #9
 80101d6:	602a      	str	r2, [r5, #0]
 80101d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80101dc:	81a3      	strh	r3, [r4, #12]
 80101de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80101e2:	e033      	b.n	801024c <__swsetup_r+0x98>
 80101e4:	0758      	lsls	r0, r3, #29
 80101e6:	d512      	bpl.n	801020e <__swsetup_r+0x5a>
 80101e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80101ea:	b141      	cbz	r1, 80101fe <__swsetup_r+0x4a>
 80101ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80101f0:	4299      	cmp	r1, r3
 80101f2:	d002      	beq.n	80101fa <__swsetup_r+0x46>
 80101f4:	4628      	mov	r0, r5
 80101f6:	f7ff f949 	bl	800f48c <_free_r>
 80101fa:	2300      	movs	r3, #0
 80101fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80101fe:	89a3      	ldrh	r3, [r4, #12]
 8010200:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010204:	81a3      	strh	r3, [r4, #12]
 8010206:	2300      	movs	r3, #0
 8010208:	6063      	str	r3, [r4, #4]
 801020a:	6923      	ldr	r3, [r4, #16]
 801020c:	6023      	str	r3, [r4, #0]
 801020e:	89a3      	ldrh	r3, [r4, #12]
 8010210:	f043 0308 	orr.w	r3, r3, #8
 8010214:	81a3      	strh	r3, [r4, #12]
 8010216:	6923      	ldr	r3, [r4, #16]
 8010218:	b94b      	cbnz	r3, 801022e <__swsetup_r+0x7a>
 801021a:	89a3      	ldrh	r3, [r4, #12]
 801021c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010224:	d003      	beq.n	801022e <__swsetup_r+0x7a>
 8010226:	4621      	mov	r1, r4
 8010228:	4628      	mov	r0, r5
 801022a:	f000 f83f 	bl	80102ac <__smakebuf_r>
 801022e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010232:	f013 0201 	ands.w	r2, r3, #1
 8010236:	d00a      	beq.n	801024e <__swsetup_r+0x9a>
 8010238:	2200      	movs	r2, #0
 801023a:	60a2      	str	r2, [r4, #8]
 801023c:	6962      	ldr	r2, [r4, #20]
 801023e:	4252      	negs	r2, r2
 8010240:	61a2      	str	r2, [r4, #24]
 8010242:	6922      	ldr	r2, [r4, #16]
 8010244:	b942      	cbnz	r2, 8010258 <__swsetup_r+0xa4>
 8010246:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801024a:	d1c5      	bne.n	80101d8 <__swsetup_r+0x24>
 801024c:	bd38      	pop	{r3, r4, r5, pc}
 801024e:	0799      	lsls	r1, r3, #30
 8010250:	bf58      	it	pl
 8010252:	6962      	ldrpl	r2, [r4, #20]
 8010254:	60a2      	str	r2, [r4, #8]
 8010256:	e7f4      	b.n	8010242 <__swsetup_r+0x8e>
 8010258:	2000      	movs	r0, #0
 801025a:	e7f7      	b.n	801024c <__swsetup_r+0x98>
 801025c:	20000038 	.word	0x20000038

08010260 <__swhatbuf_r>:
 8010260:	b570      	push	{r4, r5, r6, lr}
 8010262:	460c      	mov	r4, r1
 8010264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010268:	2900      	cmp	r1, #0
 801026a:	b096      	sub	sp, #88	@ 0x58
 801026c:	4615      	mov	r5, r2
 801026e:	461e      	mov	r6, r3
 8010270:	da0d      	bge.n	801028e <__swhatbuf_r+0x2e>
 8010272:	89a3      	ldrh	r3, [r4, #12]
 8010274:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010278:	f04f 0100 	mov.w	r1, #0
 801027c:	bf14      	ite	ne
 801027e:	2340      	movne	r3, #64	@ 0x40
 8010280:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010284:	2000      	movs	r0, #0
 8010286:	6031      	str	r1, [r6, #0]
 8010288:	602b      	str	r3, [r5, #0]
 801028a:	b016      	add	sp, #88	@ 0x58
 801028c:	bd70      	pop	{r4, r5, r6, pc}
 801028e:	466a      	mov	r2, sp
 8010290:	f000 f8ae 	bl	80103f0 <_fstat_r>
 8010294:	2800      	cmp	r0, #0
 8010296:	dbec      	blt.n	8010272 <__swhatbuf_r+0x12>
 8010298:	9901      	ldr	r1, [sp, #4]
 801029a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801029e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80102a2:	4259      	negs	r1, r3
 80102a4:	4159      	adcs	r1, r3
 80102a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80102aa:	e7eb      	b.n	8010284 <__swhatbuf_r+0x24>

080102ac <__smakebuf_r>:
 80102ac:	898b      	ldrh	r3, [r1, #12]
 80102ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80102b0:	079d      	lsls	r5, r3, #30
 80102b2:	4606      	mov	r6, r0
 80102b4:	460c      	mov	r4, r1
 80102b6:	d507      	bpl.n	80102c8 <__smakebuf_r+0x1c>
 80102b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80102bc:	6023      	str	r3, [r4, #0]
 80102be:	6123      	str	r3, [r4, #16]
 80102c0:	2301      	movs	r3, #1
 80102c2:	6163      	str	r3, [r4, #20]
 80102c4:	b003      	add	sp, #12
 80102c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102c8:	ab01      	add	r3, sp, #4
 80102ca:	466a      	mov	r2, sp
 80102cc:	f7ff ffc8 	bl	8010260 <__swhatbuf_r>
 80102d0:	9f00      	ldr	r7, [sp, #0]
 80102d2:	4605      	mov	r5, r0
 80102d4:	4639      	mov	r1, r7
 80102d6:	4630      	mov	r0, r6
 80102d8:	f7ff fbe6 	bl	800faa8 <_malloc_r>
 80102dc:	b948      	cbnz	r0, 80102f2 <__smakebuf_r+0x46>
 80102de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102e2:	059a      	lsls	r2, r3, #22
 80102e4:	d4ee      	bmi.n	80102c4 <__smakebuf_r+0x18>
 80102e6:	f023 0303 	bic.w	r3, r3, #3
 80102ea:	f043 0302 	orr.w	r3, r3, #2
 80102ee:	81a3      	strh	r3, [r4, #12]
 80102f0:	e7e2      	b.n	80102b8 <__smakebuf_r+0xc>
 80102f2:	89a3      	ldrh	r3, [r4, #12]
 80102f4:	6020      	str	r0, [r4, #0]
 80102f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80102fa:	81a3      	strh	r3, [r4, #12]
 80102fc:	9b01      	ldr	r3, [sp, #4]
 80102fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010302:	b15b      	cbz	r3, 801031c <__smakebuf_r+0x70>
 8010304:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010308:	4630      	mov	r0, r6
 801030a:	f000 f80b 	bl	8010324 <_isatty_r>
 801030e:	b128      	cbz	r0, 801031c <__smakebuf_r+0x70>
 8010310:	89a3      	ldrh	r3, [r4, #12]
 8010312:	f023 0303 	bic.w	r3, r3, #3
 8010316:	f043 0301 	orr.w	r3, r3, #1
 801031a:	81a3      	strh	r3, [r4, #12]
 801031c:	89a3      	ldrh	r3, [r4, #12]
 801031e:	431d      	orrs	r5, r3
 8010320:	81a5      	strh	r5, [r4, #12]
 8010322:	e7cf      	b.n	80102c4 <__smakebuf_r+0x18>

08010324 <_isatty_r>:
 8010324:	b538      	push	{r3, r4, r5, lr}
 8010326:	4d06      	ldr	r5, [pc, #24]	@ (8010340 <_isatty_r+0x1c>)
 8010328:	2300      	movs	r3, #0
 801032a:	4604      	mov	r4, r0
 801032c:	4608      	mov	r0, r1
 801032e:	602b      	str	r3, [r5, #0]
 8010330:	f7f0 fe6c 	bl	800100c <_isatty>
 8010334:	1c43      	adds	r3, r0, #1
 8010336:	d102      	bne.n	801033e <_isatty_r+0x1a>
 8010338:	682b      	ldr	r3, [r5, #0]
 801033a:	b103      	cbz	r3, 801033e <_isatty_r+0x1a>
 801033c:	6023      	str	r3, [r4, #0]
 801033e:	bd38      	pop	{r3, r4, r5, pc}
 8010340:	20008588 	.word	0x20008588

08010344 <_lseek_r>:
 8010344:	b538      	push	{r3, r4, r5, lr}
 8010346:	4d07      	ldr	r5, [pc, #28]	@ (8010364 <_lseek_r+0x20>)
 8010348:	4604      	mov	r4, r0
 801034a:	4608      	mov	r0, r1
 801034c:	4611      	mov	r1, r2
 801034e:	2200      	movs	r2, #0
 8010350:	602a      	str	r2, [r5, #0]
 8010352:	461a      	mov	r2, r3
 8010354:	f7f0 fe65 	bl	8001022 <_lseek>
 8010358:	1c43      	adds	r3, r0, #1
 801035a:	d102      	bne.n	8010362 <_lseek_r+0x1e>
 801035c:	682b      	ldr	r3, [r5, #0]
 801035e:	b103      	cbz	r3, 8010362 <_lseek_r+0x1e>
 8010360:	6023      	str	r3, [r4, #0]
 8010362:	bd38      	pop	{r3, r4, r5, pc}
 8010364:	20008588 	.word	0x20008588

08010368 <_read_r>:
 8010368:	b538      	push	{r3, r4, r5, lr}
 801036a:	4d07      	ldr	r5, [pc, #28]	@ (8010388 <_read_r+0x20>)
 801036c:	4604      	mov	r4, r0
 801036e:	4608      	mov	r0, r1
 8010370:	4611      	mov	r1, r2
 8010372:	2200      	movs	r2, #0
 8010374:	602a      	str	r2, [r5, #0]
 8010376:	461a      	mov	r2, r3
 8010378:	f7f0 fdf3 	bl	8000f62 <_read>
 801037c:	1c43      	adds	r3, r0, #1
 801037e:	d102      	bne.n	8010386 <_read_r+0x1e>
 8010380:	682b      	ldr	r3, [r5, #0]
 8010382:	b103      	cbz	r3, 8010386 <_read_r+0x1e>
 8010384:	6023      	str	r3, [r4, #0]
 8010386:	bd38      	pop	{r3, r4, r5, pc}
 8010388:	20008588 	.word	0x20008588

0801038c <_sbrk_r>:
 801038c:	b538      	push	{r3, r4, r5, lr}
 801038e:	4d06      	ldr	r5, [pc, #24]	@ (80103a8 <_sbrk_r+0x1c>)
 8010390:	2300      	movs	r3, #0
 8010392:	4604      	mov	r4, r0
 8010394:	4608      	mov	r0, r1
 8010396:	602b      	str	r3, [r5, #0]
 8010398:	f7f0 fe50 	bl	800103c <_sbrk>
 801039c:	1c43      	adds	r3, r0, #1
 801039e:	d102      	bne.n	80103a6 <_sbrk_r+0x1a>
 80103a0:	682b      	ldr	r3, [r5, #0]
 80103a2:	b103      	cbz	r3, 80103a6 <_sbrk_r+0x1a>
 80103a4:	6023      	str	r3, [r4, #0]
 80103a6:	bd38      	pop	{r3, r4, r5, pc}
 80103a8:	20008588 	.word	0x20008588

080103ac <_write_r>:
 80103ac:	b538      	push	{r3, r4, r5, lr}
 80103ae:	4d07      	ldr	r5, [pc, #28]	@ (80103cc <_write_r+0x20>)
 80103b0:	4604      	mov	r4, r0
 80103b2:	4608      	mov	r0, r1
 80103b4:	4611      	mov	r1, r2
 80103b6:	2200      	movs	r2, #0
 80103b8:	602a      	str	r2, [r5, #0]
 80103ba:	461a      	mov	r2, r3
 80103bc:	f7f0 fdee 	bl	8000f9c <_write>
 80103c0:	1c43      	adds	r3, r0, #1
 80103c2:	d102      	bne.n	80103ca <_write_r+0x1e>
 80103c4:	682b      	ldr	r3, [r5, #0]
 80103c6:	b103      	cbz	r3, 80103ca <_write_r+0x1e>
 80103c8:	6023      	str	r3, [r4, #0]
 80103ca:	bd38      	pop	{r3, r4, r5, pc}
 80103cc:	20008588 	.word	0x20008588

080103d0 <_close_r>:
 80103d0:	b538      	push	{r3, r4, r5, lr}
 80103d2:	4d06      	ldr	r5, [pc, #24]	@ (80103ec <_close_r+0x1c>)
 80103d4:	2300      	movs	r3, #0
 80103d6:	4604      	mov	r4, r0
 80103d8:	4608      	mov	r0, r1
 80103da:	602b      	str	r3, [r5, #0]
 80103dc:	f7f0 fdfa 	bl	8000fd4 <_close>
 80103e0:	1c43      	adds	r3, r0, #1
 80103e2:	d102      	bne.n	80103ea <_close_r+0x1a>
 80103e4:	682b      	ldr	r3, [r5, #0]
 80103e6:	b103      	cbz	r3, 80103ea <_close_r+0x1a>
 80103e8:	6023      	str	r3, [r4, #0]
 80103ea:	bd38      	pop	{r3, r4, r5, pc}
 80103ec:	20008588 	.word	0x20008588

080103f0 <_fstat_r>:
 80103f0:	b538      	push	{r3, r4, r5, lr}
 80103f2:	4d07      	ldr	r5, [pc, #28]	@ (8010410 <_fstat_r+0x20>)
 80103f4:	2300      	movs	r3, #0
 80103f6:	4604      	mov	r4, r0
 80103f8:	4608      	mov	r0, r1
 80103fa:	4611      	mov	r1, r2
 80103fc:	602b      	str	r3, [r5, #0]
 80103fe:	f7f0 fdf5 	bl	8000fec <_fstat>
 8010402:	1c43      	adds	r3, r0, #1
 8010404:	d102      	bne.n	801040c <_fstat_r+0x1c>
 8010406:	682b      	ldr	r3, [r5, #0]
 8010408:	b103      	cbz	r3, 801040c <_fstat_r+0x1c>
 801040a:	6023      	str	r3, [r4, #0]
 801040c:	bd38      	pop	{r3, r4, r5, pc}
 801040e:	bf00      	nop
 8010410:	20008588 	.word	0x20008588

08010414 <abort>:
 8010414:	b508      	push	{r3, lr}
 8010416:	2006      	movs	r0, #6
 8010418:	f000 f834 	bl	8010484 <raise>
 801041c:	2001      	movs	r0, #1
 801041e:	f7f0 fd95 	bl	8000f4c <_exit>

08010422 <_malloc_usable_size_r>:
 8010422:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010426:	1f18      	subs	r0, r3, #4
 8010428:	2b00      	cmp	r3, #0
 801042a:	bfbc      	itt	lt
 801042c:	580b      	ldrlt	r3, [r1, r0]
 801042e:	18c0      	addlt	r0, r0, r3
 8010430:	4770      	bx	lr

08010432 <_raise_r>:
 8010432:	291f      	cmp	r1, #31
 8010434:	b538      	push	{r3, r4, r5, lr}
 8010436:	4605      	mov	r5, r0
 8010438:	460c      	mov	r4, r1
 801043a:	d904      	bls.n	8010446 <_raise_r+0x14>
 801043c:	2316      	movs	r3, #22
 801043e:	6003      	str	r3, [r0, #0]
 8010440:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010444:	bd38      	pop	{r3, r4, r5, pc}
 8010446:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010448:	b112      	cbz	r2, 8010450 <_raise_r+0x1e>
 801044a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801044e:	b94b      	cbnz	r3, 8010464 <_raise_r+0x32>
 8010450:	4628      	mov	r0, r5
 8010452:	f000 f831 	bl	80104b8 <_getpid_r>
 8010456:	4622      	mov	r2, r4
 8010458:	4601      	mov	r1, r0
 801045a:	4628      	mov	r0, r5
 801045c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010460:	f000 b818 	b.w	8010494 <_kill_r>
 8010464:	2b01      	cmp	r3, #1
 8010466:	d00a      	beq.n	801047e <_raise_r+0x4c>
 8010468:	1c59      	adds	r1, r3, #1
 801046a:	d103      	bne.n	8010474 <_raise_r+0x42>
 801046c:	2316      	movs	r3, #22
 801046e:	6003      	str	r3, [r0, #0]
 8010470:	2001      	movs	r0, #1
 8010472:	e7e7      	b.n	8010444 <_raise_r+0x12>
 8010474:	2100      	movs	r1, #0
 8010476:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801047a:	4620      	mov	r0, r4
 801047c:	4798      	blx	r3
 801047e:	2000      	movs	r0, #0
 8010480:	e7e0      	b.n	8010444 <_raise_r+0x12>
	...

08010484 <raise>:
 8010484:	4b02      	ldr	r3, [pc, #8]	@ (8010490 <raise+0xc>)
 8010486:	4601      	mov	r1, r0
 8010488:	6818      	ldr	r0, [r3, #0]
 801048a:	f7ff bfd2 	b.w	8010432 <_raise_r>
 801048e:	bf00      	nop
 8010490:	20000038 	.word	0x20000038

08010494 <_kill_r>:
 8010494:	b538      	push	{r3, r4, r5, lr}
 8010496:	4d07      	ldr	r5, [pc, #28]	@ (80104b4 <_kill_r+0x20>)
 8010498:	2300      	movs	r3, #0
 801049a:	4604      	mov	r4, r0
 801049c:	4608      	mov	r0, r1
 801049e:	4611      	mov	r1, r2
 80104a0:	602b      	str	r3, [r5, #0]
 80104a2:	f7f0 fd41 	bl	8000f28 <_kill>
 80104a6:	1c43      	adds	r3, r0, #1
 80104a8:	d102      	bne.n	80104b0 <_kill_r+0x1c>
 80104aa:	682b      	ldr	r3, [r5, #0]
 80104ac:	b103      	cbz	r3, 80104b0 <_kill_r+0x1c>
 80104ae:	6023      	str	r3, [r4, #0]
 80104b0:	bd38      	pop	{r3, r4, r5, pc}
 80104b2:	bf00      	nop
 80104b4:	20008588 	.word	0x20008588

080104b8 <_getpid_r>:
 80104b8:	f7f0 bd2e 	b.w	8000f18 <_getpid>

080104bc <_init>:
 80104bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104be:	bf00      	nop
 80104c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104c2:	bc08      	pop	{r3}
 80104c4:	469e      	mov	lr, r3
 80104c6:	4770      	bx	lr

080104c8 <_fini>:
 80104c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ca:	bf00      	nop
 80104cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104ce:	bc08      	pop	{r3}
 80104d0:	469e      	mov	lr, r3
 80104d2:	4770      	bx	lr
